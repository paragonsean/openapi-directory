/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISMApi_H
#define OAI_OAISMApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSmBypassActivationLockAttempt_request.h"
#include "OAILockNetworkSmDevices_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSmDeviceFields_request.h"
#include "OAIUpdateNetworkSmDevicesTags_request.h"
#include "OAIWipeNetworkSmDevice_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISMApi : public QObject {
    Q_OBJECT

public:
    OAISMApi(const int timeOut = 0);
    ~OAISMApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_sm_bypass_activation_lock_attempt_request OAICreateNetworkSmBypassActivationLockAttempt_request [required]
    */
    virtual void createNetworkSmBypassActivationLockAttempt(const QString &network_id, const OAICreateNetworkSmBypassActivationLockAttempt_request &oai_create_network_sm_bypass_activation_lock_attempt_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  attempt_id QString [required]
    */
    virtual void getNetworkSmBypassActivationLockAttempt(const QString &network_id, const QString &attempt_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmCellularUsageHistory(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmCerts(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmConnectivity(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDesktopLogs(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmDeviceCommandLogs(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmDeviceProfiles(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  fields QString [optional]
    * @param[in]  wifi_macs QString [optional]
    * @param[in]  serials QString [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  batch_size qint32 [optional]
    * @param[in]  batch_token QString [optional]
    */
    virtual void getNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wifi_macs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serials = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &batch_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &batch_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmNetworkAdapters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    */
    virtual void getNetworkSmPerformanceHistory(const QString &network_id, const QString &id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSmProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmRestrictions(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmSecurityCenters(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmSoftwares(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserDeviceProfiles(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getNetworkSmUserSoftwares(const QString &network_id, const QString &user_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  ids QString [optional]
    * @param[in]  usernames QString [optional]
    * @param[in]  emails QString [optional]
    * @param[in]  scope QString [optional]
    */
    virtual void getNetworkSmUsers(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usernames = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void getNetworkSmWlanLists(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_lock_network_sm_devices_request OAILockNetworkSmDevices_request [optional]
    */
    virtual void lockNetworkSmDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request> &oai_lock_network_sm_devices_request = ::OpenAPI::OptionalParam<OAILockNetworkSmDevices_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void refreshNetworkSmDeviceDetails(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  device_id QString [required]
    */
    virtual void unenrollNetworkSmDevice(const QString &network_id, const QString &device_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_sm_device_fields_request OAIUpdateNetworkSmDeviceFields_request [required]
    */
    virtual void updateNetworkSmDeviceFields(const QString &network_id, const OAIUpdateNetworkSmDeviceFields_request &oai_update_network_sm_device_fields_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_sm_devices_tags_request OAIUpdateNetworkSmDevicesTags_request [required]
    */
    virtual void updateNetworkSmDevicesTags(const QString &network_id, const OAIUpdateNetworkSmDevicesTags_request &oai_update_network_sm_devices_tags_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_wipe_network_sm_device_request OAIWipeNetworkSmDevice_request [optional]
    */
    virtual void wipeNetworkSmDevice(const QString &network_id, const ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevice_request> &oai_wipe_network_sm_device_request = ::OpenAPI::OptionalParam<OAIWipeNetworkSmDevice_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmBypassActivationLockAttemptCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmCellularUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmCertsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmConnectivityCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDesktopLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceCommandLogsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmNetworkAdaptersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmPerformanceHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmRestrictionsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmSecurityCentersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserDeviceProfilesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUserSoftwaresCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmUsersCallback(OAIHttpRequestWorker *worker);
    void getNetworkSmWlanListsCallback(OAIHttpRequestWorker *worker);
    void lockNetworkSmDevicesCallback(OAIHttpRequestWorker *worker);
    void refreshNetworkSmDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmDeviceFieldsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSmDevicesTagsCallback(OAIHttpRequestWorker *worker);
    void wipeNetworkSmDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void getNetworkSmBypassActivationLockAttemptSignal(OAIObject summary);
    void getNetworkSmCellularUsageHistorySignal(QList<OAIObject> summary);
    void getNetworkSmCertsSignal(QList<OAIObject> summary);
    void getNetworkSmConnectivitySignal(QList<OAIObject> summary);
    void getNetworkSmDesktopLogsSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceCommandLogsSignal(QList<OAIObject> summary);
    void getNetworkSmDeviceProfilesSignal(QList<OAIObject> summary);
    void getNetworkSmDevicesSignal(OAIObject summary);
    void getNetworkSmNetworkAdaptersSignal(QList<OAIObject> summary);
    void getNetworkSmPerformanceHistorySignal(QList<OAIObject> summary);
    void getNetworkSmProfilesSignal(OAIObject summary);
    void getNetworkSmRestrictionsSignal(QList<OAIObject> summary);
    void getNetworkSmSecurityCentersSignal(QList<OAIObject> summary);
    void getNetworkSmSoftwaresSignal(QList<OAIObject> summary);
    void getNetworkSmUserDeviceProfilesSignal(QList<OAIObject> summary);
    void getNetworkSmUserSoftwaresSignal(QList<OAIObject> summary);
    void getNetworkSmUsersSignal(QList<OAIObject> summary);
    void getNetworkSmWlanListsSignal(QList<OAIObject> summary);
    void lockNetworkSmDevicesSignal(OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignal();
    void unenrollNetworkSmDeviceSignal(OAIObject summary);
    void updateNetworkSmDeviceFieldsSignal(OAIObject summary);
    void updateNetworkSmDevicesTagsSignal(OAIObject summary);
    void wipeNetworkSmDeviceSignal(OAIObject summary);


    void createNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmBypassActivationLockAttemptSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmCellularUsageHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmCertsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmConnectivitySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDesktopLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceCommandLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmNetworkAdaptersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmPerformanceHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmProfilesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSmRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmSecurityCentersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmUserDeviceProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmUserSoftwaresSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSmWlanListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void lockNetworkSmDevicesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void refreshNetworkSmDeviceDetailsSignalFull(OAIHttpRequestWorker *worker);
    void unenrollNetworkSmDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSmDeviceFieldsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSmDevicesTagsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void wipeNetworkSmDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalError() instead")
    void createNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalError() instead")
    void getNetworkSmBypassActivationLockAttemptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmCellularUsageHistorySignalError() instead")
    void getNetworkSmCellularUsageHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmCellularUsageHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmCertsSignalError() instead")
    void getNetworkSmCertsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmCertsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmConnectivitySignalError() instead")
    void getNetworkSmConnectivitySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmConnectivitySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDesktopLogsSignalError() instead")
    void getNetworkSmDesktopLogsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDesktopLogsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCommandLogsSignalError() instead")
    void getNetworkSmDeviceCommandLogsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCommandLogsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceProfilesSignalError() instead")
    void getNetworkSmDeviceProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalError() instead")
    void getNetworkSmDevicesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmNetworkAdaptersSignalError() instead")
    void getNetworkSmNetworkAdaptersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmNetworkAdaptersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmPerformanceHistorySignalError() instead")
    void getNetworkSmPerformanceHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmPerformanceHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalError() instead")
    void getNetworkSmProfilesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmRestrictionsSignalError() instead")
    void getNetworkSmRestrictionsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmRestrictionsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmSecurityCentersSignalError() instead")
    void getNetworkSmSecurityCentersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmSecurityCentersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmSoftwaresSignalError() instead")
    void getNetworkSmSoftwaresSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmSoftwaresSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalError() instead")
    void getNetworkSmUserDeviceProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalError() instead")
    void getNetworkSmUserSoftwaresSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalError() instead")
    void getNetworkSmUsersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmWlanListsSignalError() instead")
    void getNetworkSmWlanListsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmWlanListsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalError() instead")
    void lockNetworkSmDevicesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalError() instead")
    void refreshNetworkSmDeviceDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalError() instead")
    void unenrollNetworkSmDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDeviceFieldsSignalError() instead")
    void updateNetworkSmDeviceFieldsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDeviceFieldsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesTagsSignalError() instead")
    void updateNetworkSmDevicesTagsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesTagsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDeviceSignalError() instead")
    void wipeNetworkSmDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void createNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmBypassActivationLockAttemptSignalErrorFull() instead")
    void getNetworkSmBypassActivationLockAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmBypassActivationLockAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmCellularUsageHistorySignalErrorFull() instead")
    void getNetworkSmCellularUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmCellularUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmCertsSignalErrorFull() instead")
    void getNetworkSmCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmConnectivitySignalErrorFull() instead")
    void getNetworkSmConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDesktopLogsSignalErrorFull() instead")
    void getNetworkSmDesktopLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDesktopLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceCommandLogsSignalErrorFull() instead")
    void getNetworkSmDeviceCommandLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceCommandLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmDevicesSignalErrorFull() instead")
    void getNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmNetworkAdaptersSignalErrorFull() instead")
    void getNetworkSmNetworkAdaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmNetworkAdaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmPerformanceHistorySignalErrorFull() instead")
    void getNetworkSmPerformanceHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmPerformanceHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmProfilesSignalErrorFull() instead")
    void getNetworkSmProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmRestrictionsSignalErrorFull() instead")
    void getNetworkSmRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmSecurityCentersSignalErrorFull() instead")
    void getNetworkSmSecurityCentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmSecurityCentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmSoftwaresSignalErrorFull() instead")
    void getNetworkSmSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserDeviceProfilesSignalErrorFull() instead")
    void getNetworkSmUserDeviceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserDeviceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUserSoftwaresSignalErrorFull() instead")
    void getNetworkSmUserSoftwaresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUserSoftwaresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmUsersSignalErrorFull() instead")
    void getNetworkSmUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSmWlanListsSignalErrorFull() instead")
    void getNetworkSmWlanListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSmWlanListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockNetworkSmDevicesSignalErrorFull() instead")
    void lockNetworkSmDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockNetworkSmDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshNetworkSmDeviceDetailsSignalErrorFull() instead")
    void refreshNetworkSmDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshNetworkSmDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unenrollNetworkSmDeviceSignalErrorFull() instead")
    void unenrollNetworkSmDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unenrollNetworkSmDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDeviceFieldsSignalErrorFull() instead")
    void updateNetworkSmDeviceFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDeviceFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSmDevicesTagsSignalErrorFull() instead")
    void updateNetworkSmDevicesTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSmDevicesTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wipeNetworkSmDeviceSignalErrorFull() instead")
    void wipeNetworkSmDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wipeNetworkSmDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
