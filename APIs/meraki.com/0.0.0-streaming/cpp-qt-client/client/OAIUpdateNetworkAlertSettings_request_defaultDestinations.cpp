/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkAlertSettings_request_defaultDestinations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkAlertSettings_request_defaultDestinations::OAIUpdateNetworkAlertSettings_request_defaultDestinations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkAlertSettings_request_defaultDestinations::OAIUpdateNetworkAlertSettings_request_defaultDestinations() {
    this->initializeModel();
}

OAIUpdateNetworkAlertSettings_request_defaultDestinations::~OAIUpdateNetworkAlertSettings_request_defaultDestinations() {}

void OAIUpdateNetworkAlertSettings_request_defaultDestinations::initializeModel() {

    m_all_admins_isSet = false;
    m_all_admins_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_http_server_ids_isSet = false;
    m_http_server_ids_isValid = false;

    m_snmp_isSet = false;
    m_snmp_isValid = false;
}

void OAIUpdateNetworkAlertSettings_request_defaultDestinations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkAlertSettings_request_defaultDestinations::fromJsonObject(QJsonObject json) {

    m_all_admins_isValid = ::OpenAPI::fromJsonValue(m_all_admins, json[QString("allAdmins")]);
    m_all_admins_isSet = !json[QString("allAdmins")].isNull() && m_all_admins_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_http_server_ids_isValid = ::OpenAPI::fromJsonValue(m_http_server_ids, json[QString("httpServerIds")]);
    m_http_server_ids_isSet = !json[QString("httpServerIds")].isNull() && m_http_server_ids_isValid;

    m_snmp_isValid = ::OpenAPI::fromJsonValue(m_snmp, json[QString("snmp")]);
    m_snmp_isSet = !json[QString("snmp")].isNull() && m_snmp_isValid;
}

QString OAIUpdateNetworkAlertSettings_request_defaultDestinations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkAlertSettings_request_defaultDestinations::asJsonObject() const {
    QJsonObject obj;
    if (m_all_admins_isSet) {
        obj.insert(QString("allAdmins"), ::OpenAPI::toJsonValue(m_all_admins));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_http_server_ids.size() > 0) {
        obj.insert(QString("httpServerIds"), ::OpenAPI::toJsonValue(m_http_server_ids));
    }
    if (m_snmp_isSet) {
        obj.insert(QString("snmp"), ::OpenAPI::toJsonValue(m_snmp));
    }
    return obj;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::isAllAdmins() const {
    return m_all_admins;
}
void OAIUpdateNetworkAlertSettings_request_defaultDestinations::setAllAdmins(const bool &all_admins) {
    m_all_admins = all_admins;
    m_all_admins_isSet = true;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_all_admins_Set() const{
    return m_all_admins_isSet;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_all_admins_Valid() const{
    return m_all_admins_isValid;
}

QList<QString> OAIUpdateNetworkAlertSettings_request_defaultDestinations::getEmails() const {
    return m_emails;
}
void OAIUpdateNetworkAlertSettings_request_defaultDestinations::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_emails_Valid() const{
    return m_emails_isValid;
}

QList<QString> OAIUpdateNetworkAlertSettings_request_defaultDestinations::getHttpServerIds() const {
    return m_http_server_ids;
}
void OAIUpdateNetworkAlertSettings_request_defaultDestinations::setHttpServerIds(const QList<QString> &http_server_ids) {
    m_http_server_ids = http_server_ids;
    m_http_server_ids_isSet = true;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_http_server_ids_Set() const{
    return m_http_server_ids_isSet;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_http_server_ids_Valid() const{
    return m_http_server_ids_isValid;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::isSnmp() const {
    return m_snmp;
}
void OAIUpdateNetworkAlertSettings_request_defaultDestinations::setSnmp(const bool &snmp) {
    m_snmp = snmp;
    m_snmp_isSet = true;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_snmp_Set() const{
    return m_snmp_isSet;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::is_snmp_Valid() const{
    return m_snmp_isValid;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_server_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snmp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkAlertSettings_request_defaultDestinations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
