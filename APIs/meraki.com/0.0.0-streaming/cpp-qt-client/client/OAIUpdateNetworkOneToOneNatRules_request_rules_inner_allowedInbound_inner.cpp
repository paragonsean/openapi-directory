/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner() {
    this->initializeModel();
}

OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::~OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner() {}

void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::initializeModel() {

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_destination_ports_isSet = false;
    m_destination_ports_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::fromJsonObject(QJsonObject json) {

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowedIps")]);
    m_allowed_ips_isSet = !json[QString("allowedIps")].isNull() && m_allowed_ips_isValid;

    m_destination_ports_isValid = ::OpenAPI::fromJsonValue(m_destination_ports, json[QString("destinationPorts")]);
    m_destination_ports_isSet = !json[QString("destinationPorts")].isNull() && m_destination_ports_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_ips.size() > 0) {
        obj.insert(QString("allowedIps"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_destination_ports.size() > 0) {
        obj.insert(QString("destinationPorts"), ::OpenAPI::toJsonValue(m_destination_ports));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QList<QString> OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::getAllowedIps() const {
    return m_allowed_ips;
}
void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::setAllowedIps(const QList<QString> &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

QList<QString> OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::getDestinationPorts() const {
    return m_destination_ports;
}
void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::setDestinationPorts(const QList<QString> &destination_ports) {
    m_destination_ports = destination_ports;
    m_destination_ports_isSet = true;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_destination_ports_Set() const{
    return m_destination_ports_isSet;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_destination_ports_Valid() const{
    return m_destination_ports_isValid;
}

QString OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::getProtocol() const {
    return m_protocol;
}
void OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkOneToOneNatRules_request_rules_inner_allowedInbound_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
