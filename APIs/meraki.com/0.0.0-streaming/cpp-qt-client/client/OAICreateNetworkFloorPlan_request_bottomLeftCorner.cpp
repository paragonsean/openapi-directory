/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkFloorPlan_request_bottomLeftCorner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkFloorPlan_request_bottomLeftCorner::OAICreateNetworkFloorPlan_request_bottomLeftCorner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkFloorPlan_request_bottomLeftCorner::OAICreateNetworkFloorPlan_request_bottomLeftCorner() {
    this->initializeModel();
}

OAICreateNetworkFloorPlan_request_bottomLeftCorner::~OAICreateNetworkFloorPlan_request_bottomLeftCorner() {}

void OAICreateNetworkFloorPlan_request_bottomLeftCorner::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;
}

void OAICreateNetworkFloorPlan_request_bottomLeftCorner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkFloorPlan_request_bottomLeftCorner::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;
}

QString OAICreateNetworkFloorPlan_request_bottomLeftCorner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkFloorPlan_request_bottomLeftCorner::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    return obj;
}

float OAICreateNetworkFloorPlan_request_bottomLeftCorner::getLat() const {
    return m_lat;
}
void OAICreateNetworkFloorPlan_request_bottomLeftCorner::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAICreateNetworkFloorPlan_request_bottomLeftCorner::getLng() const {
    return m_lng;
}
void OAICreateNetworkFloorPlan_request_bottomLeftCorner::setLng(const float &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::is_lng_Valid() const{
    return m_lng_isValid;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkFloorPlan_request_bottomLeftCorner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
