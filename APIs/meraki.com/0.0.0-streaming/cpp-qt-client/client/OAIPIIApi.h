/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPIIApi_H
#define OAI_OAIPIIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkPiiRequest_request.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPIIApi : public QObject {
    Q_OBJECT

public:
    OAIPIIApi(const int timeOut = 0);
    ~OAIPIIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_pii_request_request OAICreateNetworkPiiRequest_request [optional]
    */
    virtual void createNetworkPiiRequest(const QString &network_id, const ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request> &oai_create_network_pii_request_request = ::OpenAPI::OptionalParam<OAICreateNetworkPiiRequest_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void deleteNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiPiiKeys(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  request_id QString [required]
    */
    virtual void getNetworkPiiRequest(const QString &network_id, const QString &request_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkPiiRequests(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmDevicesForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  mac QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  imei QString [optional]
    * @param[in]  bluetooth_mac QString [optional]
    */
    virtual void getNetworkPiiSmOwnersForKey(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imei = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bluetooth_mac = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiPiiKeysCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiRequestsCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmDevicesForKeyCallback(OAIHttpRequestWorker *worker);
    void getNetworkPiiSmOwnersForKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkPiiRequestSignal(OAIObject summary);
    void deleteNetworkPiiRequestSignal();
    void getNetworkPiiPiiKeysSignal(OAIObject summary);
    void getNetworkPiiRequestSignal(OAIObject summary);
    void getNetworkPiiRequestsSignal(QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignal(OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignal(OAIObject summary);


    void createNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkPiiPiiKeysSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkPiiSmDevicesForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkPiiSmOwnersForKeySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalError() instead")
    void createNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalError() instead")
    void deleteNetworkPiiRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalError() instead")
    void getNetworkPiiPiiKeysSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalError() instead")
    void getNetworkPiiRequestSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalError() instead")
    void getNetworkPiiRequestsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalError() instead")
    void getNetworkPiiSmDevicesForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalError() instead")
    void getNetworkPiiSmOwnersForKeySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkPiiRequestSignalErrorFull() instead")
    void createNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkPiiRequestSignalErrorFull() instead")
    void deleteNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiPiiKeysSignalErrorFull() instead")
    void getNetworkPiiPiiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiPiiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestSignalErrorFull() instead")
    void getNetworkPiiRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiRequestsSignalErrorFull() instead")
    void getNetworkPiiRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmDevicesForKeySignalErrorFull() instead")
    void getNetworkPiiSmDevicesForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmDevicesForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkPiiSmOwnersForKeySignalErrorFull() instead")
    void getNetworkPiiSmOwnersForKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkPiiSmOwnersForKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
