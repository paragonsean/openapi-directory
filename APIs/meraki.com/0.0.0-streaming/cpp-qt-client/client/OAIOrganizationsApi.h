/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClaimIntoOrganization_request.h"
#include "OAICloneOrganization_request.h"
#include "OAIObject.h"
#include "OAIUpdateOrganizationThirdPartyVPNPeers_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_claim_into_organization_request OAIClaimIntoOrganization_request [optional]
    */
    virtual void claimIntoOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request> &oai_claim_into_organization_request = ::OpenAPI::OptionalParam<OAIClaimIntoOrganization_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_clone_organization_request OAICloneOrganization_request [required]
    */
    virtual void cloneOrganization(const QString &organization_id, const OAICloneOrganization_request &oai_clone_organization_request);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganization(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationDeviceStatuses(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  include_license_info bool [optional]
    */
    virtual void getOrganizationInventory(const QString &organization_id, const ::OpenAPI::OptionalParam<bool> &include_license_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationThirdPartyVPNPeers(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  uplink QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void getOrganizationUplinksLossAndLatency(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());


    virtual void getOrganizations();

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_third_party_vpn_peers_request OAIUpdateOrganizationThirdPartyVPNPeers_request [required]
    */
    virtual void updateOrganizationThirdPartyVPNPeers(const QString &organization_id, const OAIUpdateOrganizationThirdPartyVPNPeers_request &oai_update_organization_third_party_vpn_peers_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void claimIntoOrganizationCallback(OAIHttpRequestWorker *worker);
    void cloneOrganizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDeviceStatusesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationInventoryCallback(OAIHttpRequestWorker *worker);
    void getOrganizationThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);
    void getOrganizationUplinksLossAndLatencyCallback(OAIHttpRequestWorker *worker);
    void getOrganizationsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationThirdPartyVPNPeersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void claimIntoOrganizationSignal(OAIObject summary);
    void cloneOrganizationSignal(OAIObject summary);
    void getOrganizationSignal(OAIObject summary);
    void getOrganizationDeviceStatusesSignal(QList<OAIObject> summary);
    void getOrganizationInventorySignal(QList<OAIObject> summary);
    void getOrganizationThirdPartyVPNPeersSignal(QList<OAIObject> summary);
    void getOrganizationUplinksLossAndLatencySignal(QList<OAIObject> summary);
    void getOrganizationsSignal(QList<OAIObject> summary);
    void updateOrganizationThirdPartyVPNPeersSignal(QList<OAIObject> summary);


    void claimIntoOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloneOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationDeviceStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationInventorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationUplinksLossAndLatencySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateOrganizationThirdPartyVPNPeersSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);

    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalError() instead")
    void claimIntoOrganizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalError() instead")
    void cloneOrganizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalError() instead")
    void getOrganizationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDeviceStatusesSignalError() instead")
    void getOrganizationDeviceStatusesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDeviceStatusesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventorySignalError() instead")
    void getOrganizationInventorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationThirdPartyVPNPeersSignalError() instead")
    void getOrganizationThirdPartyVPNPeersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationThirdPartyVPNPeersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksLossAndLatencySignalError() instead")
    void getOrganizationUplinksLossAndLatencySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksLossAndLatencySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalError() instead")
    void getOrganizationsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationThirdPartyVPNPeersSignalError() instead")
    void updateOrganizationThirdPartyVPNPeersSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationThirdPartyVPNPeersSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use claimIntoOrganizationSignalErrorFull() instead")
    void claimIntoOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimIntoOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloneOrganizationSignalErrorFull() instead")
    void cloneOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSignalErrorFull() instead")
    void getOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDeviceStatusesSignalErrorFull() instead")
    void getOrganizationDeviceStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDeviceStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationInventorySignalErrorFull() instead")
    void getOrganizationInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationThirdPartyVPNPeersSignalErrorFull() instead")
    void getOrganizationThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationUplinksLossAndLatencySignalErrorFull() instead")
    void getOrganizationUplinksLossAndLatencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationUplinksLossAndLatencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsSignalErrorFull() instead")
    void getOrganizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationThirdPartyVPNPeersSignalErrorFull() instead")
    void updateOrganizationThirdPartyVPNPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationThirdPartyVPNPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
