/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntrusionSettingsApi_H
#define OAI_OAIIntrusionSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIUpdateNetworkSecurityIntrusionSettings_request.h"
#include "OAIUpdateOrganizationSecurityIntrusionSettings_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntrusionSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIIntrusionSettingsApi(const int timeOut = 0);
    ~OAIIntrusionSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSecurityIntrusionSettings(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationSecurityIntrusionSettings(const QString &organization_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_security_intrusion_settings_request OAIUpdateNetworkSecurityIntrusionSettings_request [optional]
    */
    virtual void updateNetworkSecurityIntrusionSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSecurityIntrusionSettings_request> &oai_update_network_security_intrusion_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSecurityIntrusionSettings_request>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_update_organization_security_intrusion_settings_request OAIUpdateOrganizationSecurityIntrusionSettings_request [required]
    */
    virtual void updateOrganizationSecurityIntrusionSettings(const QString &organization_id, const OAIUpdateOrganizationSecurityIntrusionSettings_request &oai_update_organization_security_intrusion_settings_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNetworkSecurityIntrusionSettingsCallback(OAIHttpRequestWorker *worker);
    void getOrganizationSecurityIntrusionSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSecurityIntrusionSettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationSecurityIntrusionSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNetworkSecurityIntrusionSettingsSignal(OAIObject summary);
    void getOrganizationSecurityIntrusionSettingsSignal(OAIObject summary);
    void updateNetworkSecurityIntrusionSettingsSignal(OAIObject summary);
    void updateOrganizationSecurityIntrusionSettingsSignal(OAIObject summary);


    void getNetworkSecurityIntrusionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganizationSecurityIntrusionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSecurityIntrusionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateOrganizationSecurityIntrusionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getNetworkSecurityIntrusionSettingsSignalError() instead")
    void getNetworkSecurityIntrusionSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSecurityIntrusionSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSecurityIntrusionSettingsSignalError() instead")
    void getOrganizationSecurityIntrusionSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSecurityIntrusionSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSecurityIntrusionSettingsSignalError() instead")
    void updateNetworkSecurityIntrusionSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSecurityIntrusionSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSecurityIntrusionSettingsSignalError() instead")
    void updateOrganizationSecurityIntrusionSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSecurityIntrusionSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNetworkSecurityIntrusionSettingsSignalErrorFull() instead")
    void getNetworkSecurityIntrusionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSecurityIntrusionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationSecurityIntrusionSettingsSignalErrorFull() instead")
    void getOrganizationSecurityIntrusionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSecurityIntrusionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSecurityIntrusionSettingsSignalErrorFull() instead")
    void updateNetworkSecurityIntrusionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSecurityIntrusionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSecurityIntrusionSettingsSignalErrorFull() instead")
    void updateOrganizationSecurityIntrusionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSecurityIntrusionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
