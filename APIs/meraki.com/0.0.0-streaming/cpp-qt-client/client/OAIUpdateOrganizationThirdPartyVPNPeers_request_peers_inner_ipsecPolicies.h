/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies.h
 *
 * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 */

#ifndef OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies_H
#define OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies : public OAIObject {
public:
    OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies();
    OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies(QString json);
    ~OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getChildAuthAlgo() const;
    void setChildAuthAlgo(const QList<QString> &child_auth_algo);
    bool is_child_auth_algo_Set() const;
    bool is_child_auth_algo_Valid() const;

    QList<QString> getChildCipherAlgo() const;
    void setChildCipherAlgo(const QList<QString> &child_cipher_algo);
    bool is_child_cipher_algo_Set() const;
    bool is_child_cipher_algo_Valid() const;

    qint32 getChildLifetime() const;
    void setChildLifetime(const qint32 &child_lifetime);
    bool is_child_lifetime_Set() const;
    bool is_child_lifetime_Valid() const;

    QList<QString> getChildPfsGroup() const;
    void setChildPfsGroup(const QList<QString> &child_pfs_group);
    bool is_child_pfs_group_Set() const;
    bool is_child_pfs_group_Valid() const;

    QList<QString> getIkeAuthAlgo() const;
    void setIkeAuthAlgo(const QList<QString> &ike_auth_algo);
    bool is_ike_auth_algo_Set() const;
    bool is_ike_auth_algo_Valid() const;

    QList<QString> getIkeCipherAlgo() const;
    void setIkeCipherAlgo(const QList<QString> &ike_cipher_algo);
    bool is_ike_cipher_algo_Set() const;
    bool is_ike_cipher_algo_Valid() const;

    QList<QString> getIkeDiffieHellmanGroup() const;
    void setIkeDiffieHellmanGroup(const QList<QString> &ike_diffie_hellman_group);
    bool is_ike_diffie_hellman_group_Set() const;
    bool is_ike_diffie_hellman_group_Valid() const;

    qint32 getIkeLifetime() const;
    void setIkeLifetime(const qint32 &ike_lifetime);
    bool is_ike_lifetime_Set() const;
    bool is_ike_lifetime_Valid() const;

    QList<QString> getIkePrfAlgo() const;
    void setIkePrfAlgo(const QList<QString> &ike_prf_algo);
    bool is_ike_prf_algo_Set() const;
    bool is_ike_prf_algo_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_child_auth_algo;
    bool m_child_auth_algo_isSet;
    bool m_child_auth_algo_isValid;

    QList<QString> m_child_cipher_algo;
    bool m_child_cipher_algo_isSet;
    bool m_child_cipher_algo_isValid;

    qint32 m_child_lifetime;
    bool m_child_lifetime_isSet;
    bool m_child_lifetime_isValid;

    QList<QString> m_child_pfs_group;
    bool m_child_pfs_group_isSet;
    bool m_child_pfs_group_isValid;

    QList<QString> m_ike_auth_algo;
    bool m_ike_auth_algo_isSet;
    bool m_ike_auth_algo_isValid;

    QList<QString> m_ike_cipher_algo;
    bool m_ike_cipher_algo_isSet;
    bool m_ike_cipher_algo_isValid;

    QList<QString> m_ike_diffie_hellman_group;
    bool m_ike_diffie_hellman_group_isSet;
    bool m_ike_diffie_hellman_group_isValid;

    qint32 m_ike_lifetime;
    bool m_ike_lifetime_isSet;
    bool m_ike_lifetime_isValid;

    QList<QString> m_ike_prf_algo;
    bool m_ike_prf_algo_isSet;
    bool m_ike_prf_algo_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies)

#endif // OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies_H
