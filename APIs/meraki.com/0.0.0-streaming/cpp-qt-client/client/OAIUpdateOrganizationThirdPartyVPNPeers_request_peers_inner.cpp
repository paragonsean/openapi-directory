/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner() {
    this->initializeModel();
}

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::~OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner() {}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::initializeModel() {

    m_ike_version_isSet = false;
    m_ike_version_isValid = false;

    m_ipsec_policies_isSet = false;
    m_ipsec_policies_isValid = false;

    m_ipsec_policies_preset_isSet = false;
    m_ipsec_policies_preset_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_private_subnets_isSet = false;
    m_private_subnets_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::fromJsonObject(QJsonObject json) {

    m_ike_version_isValid = ::OpenAPI::fromJsonValue(m_ike_version, json[QString("ikeVersion")]);
    m_ike_version_isSet = !json[QString("ikeVersion")].isNull() && m_ike_version_isValid;

    m_ipsec_policies_isValid = ::OpenAPI::fromJsonValue(m_ipsec_policies, json[QString("ipsecPolicies")]);
    m_ipsec_policies_isSet = !json[QString("ipsecPolicies")].isNull() && m_ipsec_policies_isValid;

    m_ipsec_policies_preset_isValid = ::OpenAPI::fromJsonValue(m_ipsec_policies_preset, json[QString("ipsecPoliciesPreset")]);
    m_ipsec_policies_preset_isSet = !json[QString("ipsecPoliciesPreset")].isNull() && m_ipsec_policies_preset_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_private_subnets_isValid = ::OpenAPI::fromJsonValue(m_private_subnets, json[QString("privateSubnets")]);
    m_private_subnets_isSet = !json[QString("privateSubnets")].isNull() && m_private_subnets_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIp")]);
    m_public_ip_isSet = !json[QString("publicIp")].isNull() && m_public_ip_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("remoteId")]);
    m_remote_id_isSet = !json[QString("remoteId")].isNull() && m_remote_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ike_version_isSet) {
        obj.insert(QString("ikeVersion"), ::OpenAPI::toJsonValue(m_ike_version));
    }
    if (m_ipsec_policies.isSet()) {
        obj.insert(QString("ipsecPolicies"), ::OpenAPI::toJsonValue(m_ipsec_policies));
    }
    if (m_ipsec_policies_preset_isSet) {
        obj.insert(QString("ipsecPoliciesPreset"), ::OpenAPI::toJsonValue(m_ipsec_policies_preset));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_private_subnets.size() > 0) {
        obj.insert(QString("privateSubnets"), ::OpenAPI::toJsonValue(m_private_subnets));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIp"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("remoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getIkeVersion() const {
    return m_ike_version;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setIkeVersion(const QString &ike_version) {
    m_ike_version = ike_version;
    m_ike_version_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ike_version_Set() const{
    return m_ike_version_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ike_version_Valid() const{
    return m_ike_version_isValid;
}

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getIpsecPolicies() const {
    return m_ipsec_policies;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setIpsecPolicies(const OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies &ipsec_policies) {
    m_ipsec_policies = ipsec_policies;
    m_ipsec_policies_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ipsec_policies_Set() const{
    return m_ipsec_policies_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ipsec_policies_Valid() const{
    return m_ipsec_policies_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getIpsecPoliciesPreset() const {
    return m_ipsec_policies_preset;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setIpsecPoliciesPreset(const QString &ipsec_policies_preset) {
    m_ipsec_policies_preset = ipsec_policies_preset;
    m_ipsec_policies_preset_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ipsec_policies_preset_Set() const{
    return m_ipsec_policies_preset_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_ipsec_policies_preset_Valid() const{
    return m_ipsec_policies_preset_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getName() const {
    return m_name;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getNetworkTags() const {
    return m_network_tags;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getPrivateSubnets() const {
    return m_private_subnets;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setPrivateSubnets(const QList<QString> &private_subnets) {
    m_private_subnets = private_subnets;
    m_private_subnets_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_private_subnets_Set() const{
    return m_private_subnets_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_private_subnets_Valid() const{
    return m_private_subnets_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getPublicIp() const {
    return m_public_ip;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getRemoteId() const {
    return m_remote_id;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::getSecret() const {
    return m_secret;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ike_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipsec_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipsec_policies_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_private_subnets_isValid && m_public_ip_isValid && m_secret_isValid && true;
}

} // namespace OpenAPI
