/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISwitchSettingsApi_H
#define OAI_OAISwitchSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkSwitchSettingsQosRule_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSwitchSettingsMulticast_request.h"
#include "OAIUpdateNetworkSwitchSettingsQosRule_request.h"
#include "OAIUpdateNetworkSwitchSettingsQosRulesOrder_request.h"
#include "OAIUpdateNetworkSwitchSettingsStormControl_request.h"
#include "OAIUpdateNetworkSwitchSettings_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISwitchSettingsApi : public QObject {
    Q_OBJECT

public:
    OAISwitchSettingsApi(const int timeOut = 0);
    ~OAISwitchSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_switch_settings_qos_rule_request OAICreateNetworkSwitchSettingsQosRule_request [required]
    */
    virtual void createNetworkSwitchSettingsQosRule(const QString &network_id, const OAICreateNetworkSwitchSettingsQosRule_request &oai_create_network_switch_settings_qos_rule_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void deleteNetworkSwitchSettingsQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettings(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettingsMtu(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettingsMulticast(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    */
    virtual void getNetworkSwitchSettingsQosRule(const QString &network_id, const QString &qos_rule_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettingsQosRules(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettingsQosRulesOrder(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSwitchSettingsStormControl(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_request OAIUpdateNetworkSwitchSettings_request [optional]
    */
    virtual void updateNetworkSwitchSettings(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request> &oai_update_network_switch_settings_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettings_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_multicast_request OAIUpdateNetworkSwitchSettingsMulticast_request [optional]
    */
    virtual void updateNetworkSwitchSettingsMulticast(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsMulticast_request> &oai_update_network_switch_settings_multicast_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsMulticast_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  qos_rule_id QString [required]
    * @param[in]  oai_update_network_switch_settings_qos_rule_request OAIUpdateNetworkSwitchSettingsQosRule_request [optional]
    */
    virtual void updateNetworkSwitchSettingsQosRule(const QString &network_id, const QString &qos_rule_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsQosRule_request> &oai_update_network_switch_settings_qos_rule_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsQosRule_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_qos_rules_order_request OAIUpdateNetworkSwitchSettingsQosRulesOrder_request [required]
    */
    virtual void updateNetworkSwitchSettingsQosRulesOrder(const QString &network_id, const OAIUpdateNetworkSwitchSettingsQosRulesOrder_request &oai_update_network_switch_settings_qos_rules_order_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_switch_settings_storm_control_request OAIUpdateNetworkSwitchSettingsStormControl_request [optional]
    */
    virtual void updateNetworkSwitchSettingsStormControl(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsStormControl_request> &oai_update_network_switch_settings_storm_control_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkSwitchSettingsStormControl_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkSwitchSettingsQosRuleCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkSwitchSettingsQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsMtuCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsMulticastCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsQosRuleCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsQosRulesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsStormControlCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsMulticastCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsQosRuleCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsQosRulesOrderCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSwitchSettingsStormControlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkSwitchSettingsQosRuleSignal(OAIObject summary);
    void deleteNetworkSwitchSettingsQosRuleSignal();
    void getNetworkSwitchSettingsSignal(OAIObject summary);
    void getNetworkSwitchSettingsMtuSignal(OAIObject summary);
    void getNetworkSwitchSettingsMulticastSignal(OAIObject summary);
    void getNetworkSwitchSettingsQosRuleSignal(OAIObject summary);
    void getNetworkSwitchSettingsQosRulesSignal(QList<OAIObject> summary);
    void getNetworkSwitchSettingsQosRulesOrderSignal(OAIObject summary);
    void getNetworkSwitchSettingsStormControlSignal(OAIObject summary);
    void updateNetworkSwitchSettingsSignal(OAIObject summary);
    void updateNetworkSwitchSettingsMulticastSignal(OAIObject summary);
    void updateNetworkSwitchSettingsQosRuleSignal(OAIObject summary);
    void updateNetworkSwitchSettingsQosRulesOrderSignal(OAIObject summary);
    void updateNetworkSwitchSettingsStormControlSignal(OAIObject summary);


    void createNetworkSwitchSettingsQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSwitchSettingsQosRuleSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsMtuSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsQosRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSwitchSettingsQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkSwitchSettingsStormControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsMulticastSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsQosRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsQosRulesOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSwitchSettingsStormControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchSettingsQosRuleSignalError() instead")
    void createNetworkSwitchSettingsQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchSettingsQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchSettingsQosRuleSignalError() instead")
    void deleteNetworkSwitchSettingsQosRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchSettingsQosRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalError() instead")
    void getNetworkSwitchSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsMtuSignalError() instead")
    void getNetworkSwitchSettingsMtuSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsMtuSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsMulticastSignalError() instead")
    void getNetworkSwitchSettingsMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRuleSignalError() instead")
    void getNetworkSwitchSettingsQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRulesSignalError() instead")
    void getNetworkSwitchSettingsQosRulesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRulesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRulesOrderSignalError() instead")
    void getNetworkSwitchSettingsQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsStormControlSignalError() instead")
    void getNetworkSwitchSettingsStormControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsStormControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalError() instead")
    void updateNetworkSwitchSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsMulticastSignalError() instead")
    void updateNetworkSwitchSettingsMulticastSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsMulticastSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsQosRuleSignalError() instead")
    void updateNetworkSwitchSettingsQosRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsQosRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsQosRulesOrderSignalError() instead")
    void updateNetworkSwitchSettingsQosRulesOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsQosRulesOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsStormControlSignalError() instead")
    void updateNetworkSwitchSettingsStormControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsStormControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkSwitchSettingsQosRuleSignalErrorFull() instead")
    void createNetworkSwitchSettingsQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkSwitchSettingsQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSwitchSettingsQosRuleSignalErrorFull() instead")
    void deleteNetworkSwitchSettingsQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSwitchSettingsQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsSignalErrorFull() instead")
    void getNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsMtuSignalErrorFull() instead")
    void getNetworkSwitchSettingsMtuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsMtuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsMulticastSignalErrorFull() instead")
    void getNetworkSwitchSettingsMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRuleSignalErrorFull() instead")
    void getNetworkSwitchSettingsQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRulesSignalErrorFull() instead")
    void getNetworkSwitchSettingsQosRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsQosRulesOrderSignalErrorFull() instead")
    void getNetworkSwitchSettingsQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSwitchSettingsStormControlSignalErrorFull() instead")
    void getNetworkSwitchSettingsStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSwitchSettingsStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsSignalErrorFull() instead")
    void updateNetworkSwitchSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsMulticastSignalErrorFull() instead")
    void updateNetworkSwitchSettingsMulticastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsMulticastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsQosRuleSignalErrorFull() instead")
    void updateNetworkSwitchSettingsQosRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsQosRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsQosRulesOrderSignalErrorFull() instead")
    void updateNetworkSwitchSettingsQosRulesOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsQosRulesOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSwitchSettingsStormControlSignalErrorFull() instead")
    void updateNetworkSwitchSettingsStormControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSwitchSettingsStormControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
