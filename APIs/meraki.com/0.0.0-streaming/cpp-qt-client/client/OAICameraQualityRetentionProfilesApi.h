/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICameraQualityRetentionProfilesApi_H
#define OAI_OAICameraQualityRetentionProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkCameraQualityRetentionProfile_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkCameraQualityRetentionProfile_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICameraQualityRetentionProfilesApi : public QObject {
    Q_OBJECT

public:
    OAICameraQualityRetentionProfilesApi(const int timeOut = 0);
    ~OAICameraQualityRetentionProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_camera_quality_retention_profile_request OAICreateNetworkCameraQualityRetentionProfile_request [required]
    */
    virtual void createNetworkCameraQualityRetentionProfile(const QString &network_id, const OAICreateNetworkCameraQualityRetentionProfile_request &oai_create_network_camera_quality_retention_profile_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void deleteNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkCameraQualityRetentionProfiles(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  quality_retention_profile_id QString [required]
    * @param[in]  oai_update_network_camera_quality_retention_profile_request OAIUpdateNetworkCameraQualityRetentionProfile_request [optional]
    */
    virtual void updateNetworkCameraQualityRetentionProfile(const QString &network_id, const QString &quality_retention_profile_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request> &oai_update_network_camera_quality_retention_profile_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkCameraQualityRetentionProfile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfilesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCameraQualityRetentionProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void deleteNetworkCameraQualityRetentionProfileSignal();
    void getNetworkCameraQualityRetentionProfileSignal(OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignal(QList<OAIObject> summary);
    void updateNetworkCameraQualityRetentionProfileSignal(OAIObject summary);


    void createNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkCameraQualityRetentionProfilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkCameraQualityRetentionProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalError() instead")
    void createNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalError() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalError() instead")
    void getNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalError() instead")
    void getNetworkCameraQualityRetentionProfilesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalError() instead")
    void updateNetworkCameraQualityRetentionProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void createNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void deleteNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkCameraQualityRetentionProfilesSignalErrorFull() instead")
    void getNetworkCameraQualityRetentionProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkCameraQualityRetentionProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkCameraQualityRetentionProfileSignalErrorFull() instead")
    void updateNetworkCameraQualityRetentionProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkCameraQualityRetentionProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
