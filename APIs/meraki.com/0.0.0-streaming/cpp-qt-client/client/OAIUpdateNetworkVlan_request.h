/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkVlan_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkVlan_request_H
#define OAIUpdateNetworkVlan_request_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIUpdateNetworkStaticRoute_request_reservedIpRanges_inner.h"
#include "OAIUpdateNetworkVlan_request_dhcpOptions_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateNetworkVlan_request_dhcpOptions_inner;
class OAIUpdateNetworkStaticRoute_request_reservedIpRanges_inner;

class OAIUpdateNetworkVlan_request : public OAIObject {
public:
    OAIUpdateNetworkVlan_request();
    OAIUpdateNetworkVlan_request(QString json);
    ~OAIUpdateNetworkVlan_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplianceIp() const;
    void setApplianceIp(const QString &appliance_ip);
    bool is_appliance_ip_Set() const;
    bool is_appliance_ip_Valid() const;

    QString getDhcpBootFilename() const;
    void setDhcpBootFilename(const QString &dhcp_boot_filename);
    bool is_dhcp_boot_filename_Set() const;
    bool is_dhcp_boot_filename_Valid() const;

    QString getDhcpBootNextServer() const;
    void setDhcpBootNextServer(const QString &dhcp_boot_next_server);
    bool is_dhcp_boot_next_server_Set() const;
    bool is_dhcp_boot_next_server_Valid() const;

    bool isDhcpBootOptionsEnabled() const;
    void setDhcpBootOptionsEnabled(const bool &dhcp_boot_options_enabled);
    bool is_dhcp_boot_options_enabled_Set() const;
    bool is_dhcp_boot_options_enabled_Valid() const;

    QString getDhcpHandling() const;
    void setDhcpHandling(const QString &dhcp_handling);
    bool is_dhcp_handling_Set() const;
    bool is_dhcp_handling_Valid() const;

    QString getDhcpLeaseTime() const;
    void setDhcpLeaseTime(const QString &dhcp_lease_time);
    bool is_dhcp_lease_time_Set() const;
    bool is_dhcp_lease_time_Valid() const;

    QList<OAIUpdateNetworkVlan_request_dhcpOptions_inner> getDhcpOptions() const;
    void setDhcpOptions(const QList<OAIUpdateNetworkVlan_request_dhcpOptions_inner> &dhcp_options);
    bool is_dhcp_options_Set() const;
    bool is_dhcp_options_Valid() const;

    QList<QString> getDhcpRelayServerIps() const;
    void setDhcpRelayServerIps(const QList<QString> &dhcp_relay_server_ips);
    bool is_dhcp_relay_server_ips_Set() const;
    bool is_dhcp_relay_server_ips_Valid() const;

    QString getDnsNameservers() const;
    void setDnsNameservers(const QString &dns_nameservers);
    bool is_dns_nameservers_Set() const;
    bool is_dns_nameservers_Valid() const;

    OAIObject getFixedIpAssignments() const;
    void setFixedIpAssignments(const OAIObject &fixed_ip_assignments);
    bool is_fixed_ip_assignments_Set() const;
    bool is_fixed_ip_assignments_Valid() const;

    QString getGroupPolicyId() const;
    void setGroupPolicyId(const QString &group_policy_id);
    bool is_group_policy_id_Set() const;
    bool is_group_policy_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIUpdateNetworkStaticRoute_request_reservedIpRanges_inner> getReservedIpRanges() const;
    void setReservedIpRanges(const QList<OAIUpdateNetworkStaticRoute_request_reservedIpRanges_inner> &reserved_ip_ranges);
    bool is_reserved_ip_ranges_Set() const;
    bool is_reserved_ip_ranges_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    QString getVpnNatSubnet() const;
    void setVpnNatSubnet(const QString &vpn_nat_subnet);
    bool is_vpn_nat_subnet_Set() const;
    bool is_vpn_nat_subnet_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_appliance_ip;
    bool m_appliance_ip_isSet;
    bool m_appliance_ip_isValid;

    QString m_dhcp_boot_filename;
    bool m_dhcp_boot_filename_isSet;
    bool m_dhcp_boot_filename_isValid;

    QString m_dhcp_boot_next_server;
    bool m_dhcp_boot_next_server_isSet;
    bool m_dhcp_boot_next_server_isValid;

    bool m_dhcp_boot_options_enabled;
    bool m_dhcp_boot_options_enabled_isSet;
    bool m_dhcp_boot_options_enabled_isValid;

    QString m_dhcp_handling;
    bool m_dhcp_handling_isSet;
    bool m_dhcp_handling_isValid;

    QString m_dhcp_lease_time;
    bool m_dhcp_lease_time_isSet;
    bool m_dhcp_lease_time_isValid;

    QList<OAIUpdateNetworkVlan_request_dhcpOptions_inner> m_dhcp_options;
    bool m_dhcp_options_isSet;
    bool m_dhcp_options_isValid;

    QList<QString> m_dhcp_relay_server_ips;
    bool m_dhcp_relay_server_ips_isSet;
    bool m_dhcp_relay_server_ips_isValid;

    QString m_dns_nameservers;
    bool m_dns_nameservers_isSet;
    bool m_dns_nameservers_isValid;

    OAIObject m_fixed_ip_assignments;
    bool m_fixed_ip_assignments_isSet;
    bool m_fixed_ip_assignments_isValid;

    QString m_group_policy_id;
    bool m_group_policy_id_isSet;
    bool m_group_policy_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIUpdateNetworkStaticRoute_request_reservedIpRanges_inner> m_reserved_ip_ranges;
    bool m_reserved_ip_ranges_isSet;
    bool m_reserved_ip_ranges_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    QString m_vpn_nat_subnet;
    bool m_vpn_nat_subnet_isSet;
    bool m_vpn_nat_subnet_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkVlan_request)

#endif // OAIUpdateNetworkVlan_request_H
