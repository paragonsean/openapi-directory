/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateNetworkSsid_request.h
 *
 * 
 */

#ifndef OAIUpdateNetworkSsid_request_H
#define OAIUpdateNetworkSsid_request_H

#include <QJsonObject>

#include "OAIUpdateNetworkSsid_request_apTagsAndVlanIds_inner.h"
#include "OAIUpdateNetworkSsid_request_radiusAccountingServers_inner.h"
#include "OAIUpdateNetworkSsid_request_radiusServers_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateNetworkSsid_request_apTagsAndVlanIds_inner;
class OAIUpdateNetworkSsid_request_radiusAccountingServers_inner;
class OAIUpdateNetworkSsid_request_radiusServers_inner;

class OAIUpdateNetworkSsid_request : public OAIObject {
public:
    OAIUpdateNetworkSsid_request();
    OAIUpdateNetworkSsid_request(QString json);
    ~OAIUpdateNetworkSsid_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIUpdateNetworkSsid_request_apTagsAndVlanIds_inner> getApTagsAndVlanIds() const;
    void setApTagsAndVlanIds(const QList<OAIUpdateNetworkSsid_request_apTagsAndVlanIds_inner> &ap_tags_and_vlan_ids);
    bool is_ap_tags_and_vlan_ids_Set() const;
    bool is_ap_tags_and_vlan_ids_Valid() const;

    QString getAuthMode() const;
    void setAuthMode(const QString &auth_mode);
    bool is_auth_mode_Set() const;
    bool is_auth_mode_Valid() const;

    QList<QString> getAvailabilityTags() const;
    void setAvailabilityTags(const QList<QString> &availability_tags);
    bool is_availability_tags_Set() const;
    bool is_availability_tags_Valid() const;

    bool isAvailableOnAllAps() const;
    void setAvailableOnAllAps(const bool &available_on_all_aps);
    bool is_available_on_all_aps_Set() const;
    bool is_available_on_all_aps_Valid() const;

    QString getBandSelection() const;
    void setBandSelection(const QString &band_selection);
    bool is_band_selection_Set() const;
    bool is_band_selection_Valid() const;

    QString getConcentratorNetworkId() const;
    void setConcentratorNetworkId(const QString &concentrator_network_id);
    bool is_concentrator_network_id_Set() const;
    bool is_concentrator_network_id_Valid() const;

    qint32 getDefaultVlanId() const;
    void setDefaultVlanId(const qint32 &default_vlan_id);
    bool is_default_vlan_id_Set() const;
    bool is_default_vlan_id_Valid() const;

    bool isDisassociateClientsOnVpnFailover() const;
    void setDisassociateClientsOnVpnFailover(const bool &disassociate_clients_on_vpn_failover);
    bool is_disassociate_clients_on_vpn_failover_Set() const;
    bool is_disassociate_clients_on_vpn_failover_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEncryptionMode() const;
    void setEncryptionMode(const QString &encryption_mode);
    bool is_encryption_mode_Set() const;
    bool is_encryption_mode_Valid() const;

    QString getEnterpriseAdminAccess() const;
    void setEnterpriseAdminAccess(const QString &enterprise_admin_access);
    bool is_enterprise_admin_access_Set() const;
    bool is_enterprise_admin_access_Valid() const;

    QString getIpAssignmentMode() const;
    void setIpAssignmentMode(const QString &ip_assignment_mode);
    bool is_ip_assignment_mode_Set() const;
    bool is_ip_assignment_mode_Valid() const;

    bool isLanIsolationEnabled() const;
    void setLanIsolationEnabled(const bool &lan_isolation_enabled);
    bool is_lan_isolation_enabled_Set() const;
    bool is_lan_isolation_enabled_Valid() const;

    float getMinBitrate() const;
    void setMinBitrate(const float &min_bitrate);
    bool is_min_bitrate_Set() const;
    bool is_min_bitrate_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPerClientBandwidthLimitDown() const;
    void setPerClientBandwidthLimitDown(const qint32 &per_client_bandwidth_limit_down);
    bool is_per_client_bandwidth_limit_down_Set() const;
    bool is_per_client_bandwidth_limit_down_Valid() const;

    qint32 getPerClientBandwidthLimitUp() const;
    void setPerClientBandwidthLimitUp(const qint32 &per_client_bandwidth_limit_up);
    bool is_per_client_bandwidth_limit_up_Set() const;
    bool is_per_client_bandwidth_limit_up_Valid() const;

    QString getPsk() const;
    void setPsk(const QString &psk);
    bool is_psk_Set() const;
    bool is_psk_Valid() const;

    bool isRadiusAccountingEnabled() const;
    void setRadiusAccountingEnabled(const bool &radius_accounting_enabled);
    bool is_radius_accounting_enabled_Set() const;
    bool is_radius_accounting_enabled_Valid() const;

    QList<OAIUpdateNetworkSsid_request_radiusAccountingServers_inner> getRadiusAccountingServers() const;
    void setRadiusAccountingServers(const QList<OAIUpdateNetworkSsid_request_radiusAccountingServers_inner> &radius_accounting_servers);
    bool is_radius_accounting_servers_Set() const;
    bool is_radius_accounting_servers_Valid() const;

    QString getRadiusAttributeForGroupPolicies() const;
    void setRadiusAttributeForGroupPolicies(const QString &radius_attribute_for_group_policies);
    bool is_radius_attribute_for_group_policies_Set() const;
    bool is_radius_attribute_for_group_policies_Valid() const;

    bool isRadiusCoaEnabled() const;
    void setRadiusCoaEnabled(const bool &radius_coa_enabled);
    bool is_radius_coa_enabled_Set() const;
    bool is_radius_coa_enabled_Valid() const;

    QString getRadiusFailoverPolicy() const;
    void setRadiusFailoverPolicy(const QString &radius_failover_policy);
    bool is_radius_failover_policy_Set() const;
    bool is_radius_failover_policy_Valid() const;

    QString getRadiusLoadBalancingPolicy() const;
    void setRadiusLoadBalancingPolicy(const QString &radius_load_balancing_policy);
    bool is_radius_load_balancing_policy_Set() const;
    bool is_radius_load_balancing_policy_Valid() const;

    bool isRadiusOverride() const;
    void setRadiusOverride(const bool &radius_override);
    bool is_radius_override_Set() const;
    bool is_radius_override_Valid() const;

    QList<OAIUpdateNetworkSsid_request_radiusServers_inner> getRadiusServers() const;
    void setRadiusServers(const QList<OAIUpdateNetworkSsid_request_radiusServers_inner> &radius_servers);
    bool is_radius_servers_Set() const;
    bool is_radius_servers_Valid() const;

    QString getSecondaryConcentratorNetworkId() const;
    void setSecondaryConcentratorNetworkId(const QString &secondary_concentrator_network_id);
    bool is_secondary_concentrator_network_id_Set() const;
    bool is_secondary_concentrator_network_id_Valid() const;

    QString getSplashPage() const;
    void setSplashPage(const QString &splash_page);
    bool is_splash_page_Set() const;
    bool is_splash_page_Valid() const;

    bool isUseVlanTagging() const;
    void setUseVlanTagging(const bool &use_vlan_tagging);
    bool is_use_vlan_tagging_Set() const;
    bool is_use_vlan_tagging_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    qint32 getVlanId() const;
    void setVlanId(const qint32 &vlan_id);
    bool is_vlan_id_Set() const;
    bool is_vlan_id_Valid() const;

    bool isWalledGardenEnabled() const;
    void setWalledGardenEnabled(const bool &walled_garden_enabled);
    bool is_walled_garden_enabled_Set() const;
    bool is_walled_garden_enabled_Valid() const;

    QString getWalledGardenRanges() const;
    void setWalledGardenRanges(const QString &walled_garden_ranges);
    bool is_walled_garden_ranges_Set() const;
    bool is_walled_garden_ranges_Valid() const;

    QString getWpaEncryptionMode() const;
    void setWpaEncryptionMode(const QString &wpa_encryption_mode);
    bool is_wpa_encryption_mode_Set() const;
    bool is_wpa_encryption_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIUpdateNetworkSsid_request_apTagsAndVlanIds_inner> m_ap_tags_and_vlan_ids;
    bool m_ap_tags_and_vlan_ids_isSet;
    bool m_ap_tags_and_vlan_ids_isValid;

    QString m_auth_mode;
    bool m_auth_mode_isSet;
    bool m_auth_mode_isValid;

    QList<QString> m_availability_tags;
    bool m_availability_tags_isSet;
    bool m_availability_tags_isValid;

    bool m_available_on_all_aps;
    bool m_available_on_all_aps_isSet;
    bool m_available_on_all_aps_isValid;

    QString m_band_selection;
    bool m_band_selection_isSet;
    bool m_band_selection_isValid;

    QString m_concentrator_network_id;
    bool m_concentrator_network_id_isSet;
    bool m_concentrator_network_id_isValid;

    qint32 m_default_vlan_id;
    bool m_default_vlan_id_isSet;
    bool m_default_vlan_id_isValid;

    bool m_disassociate_clients_on_vpn_failover;
    bool m_disassociate_clients_on_vpn_failover_isSet;
    bool m_disassociate_clients_on_vpn_failover_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_encryption_mode;
    bool m_encryption_mode_isSet;
    bool m_encryption_mode_isValid;

    QString m_enterprise_admin_access;
    bool m_enterprise_admin_access_isSet;
    bool m_enterprise_admin_access_isValid;

    QString m_ip_assignment_mode;
    bool m_ip_assignment_mode_isSet;
    bool m_ip_assignment_mode_isValid;

    bool m_lan_isolation_enabled;
    bool m_lan_isolation_enabled_isSet;
    bool m_lan_isolation_enabled_isValid;

    float m_min_bitrate;
    bool m_min_bitrate_isSet;
    bool m_min_bitrate_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_per_client_bandwidth_limit_down;
    bool m_per_client_bandwidth_limit_down_isSet;
    bool m_per_client_bandwidth_limit_down_isValid;

    qint32 m_per_client_bandwidth_limit_up;
    bool m_per_client_bandwidth_limit_up_isSet;
    bool m_per_client_bandwidth_limit_up_isValid;

    QString m_psk;
    bool m_psk_isSet;
    bool m_psk_isValid;

    bool m_radius_accounting_enabled;
    bool m_radius_accounting_enabled_isSet;
    bool m_radius_accounting_enabled_isValid;

    QList<OAIUpdateNetworkSsid_request_radiusAccountingServers_inner> m_radius_accounting_servers;
    bool m_radius_accounting_servers_isSet;
    bool m_radius_accounting_servers_isValid;

    QString m_radius_attribute_for_group_policies;
    bool m_radius_attribute_for_group_policies_isSet;
    bool m_radius_attribute_for_group_policies_isValid;

    bool m_radius_coa_enabled;
    bool m_radius_coa_enabled_isSet;
    bool m_radius_coa_enabled_isValid;

    QString m_radius_failover_policy;
    bool m_radius_failover_policy_isSet;
    bool m_radius_failover_policy_isValid;

    QString m_radius_load_balancing_policy;
    bool m_radius_load_balancing_policy_isSet;
    bool m_radius_load_balancing_policy_isValid;

    bool m_radius_override;
    bool m_radius_override_isSet;
    bool m_radius_override_isValid;

    QList<OAIUpdateNetworkSsid_request_radiusServers_inner> m_radius_servers;
    bool m_radius_servers_isSet;
    bool m_radius_servers_isValid;

    QString m_secondary_concentrator_network_id;
    bool m_secondary_concentrator_network_id_isSet;
    bool m_secondary_concentrator_network_id_isValid;

    QString m_splash_page;
    bool m_splash_page_isSet;
    bool m_splash_page_isValid;

    bool m_use_vlan_tagging;
    bool m_use_vlan_tagging_isSet;
    bool m_use_vlan_tagging_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;

    qint32 m_vlan_id;
    bool m_vlan_id_isSet;
    bool m_vlan_id_isValid;

    bool m_walled_garden_enabled;
    bool m_walled_garden_enabled_isSet;
    bool m_walled_garden_enabled_isValid;

    QString m_walled_garden_ranges;
    bool m_walled_garden_ranges_isSet;
    bool m_walled_garden_ranges_isValid;

    QString m_wpa_encryption_mode;
    bool m_wpa_encryption_mode_isSet;
    bool m_wpa_encryption_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateNetworkSsid_request)

#endif // OAIUpdateNetworkSsid_request_H
