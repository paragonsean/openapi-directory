/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkBluetoothSettings_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkBluetoothSettings_200_response::OAIGetNetworkBluetoothSettings_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkBluetoothSettings_200_response::OAIGetNetworkBluetoothSettings_200_response() {
    this->initializeModel();
}

OAIGetNetworkBluetoothSettings_200_response::~OAIGetNetworkBluetoothSettings_200_response() {}

void OAIGetNetworkBluetoothSettings_200_response::initializeModel() {

    m_advertising_enabled_isSet = false;
    m_advertising_enabled_isValid = false;

    m_major_isSet = false;
    m_major_isValid = false;

    m_major_minor_assignment_mode_isSet = false;
    m_major_minor_assignment_mode_isValid = false;

    m_minor_isSet = false;
    m_minor_isValid = false;

    m_scanning_enabled_isSet = false;
    m_scanning_enabled_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIGetNetworkBluetoothSettings_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkBluetoothSettings_200_response::fromJsonObject(QJsonObject json) {

    m_advertising_enabled_isValid = ::OpenAPI::fromJsonValue(m_advertising_enabled, json[QString("advertisingEnabled")]);
    m_advertising_enabled_isSet = !json[QString("advertisingEnabled")].isNull() && m_advertising_enabled_isValid;

    m_major_isValid = ::OpenAPI::fromJsonValue(m_major, json[QString("major")]);
    m_major_isSet = !json[QString("major")].isNull() && m_major_isValid;

    m_major_minor_assignment_mode_isValid = ::OpenAPI::fromJsonValue(m_major_minor_assignment_mode, json[QString("majorMinorAssignmentMode")]);
    m_major_minor_assignment_mode_isSet = !json[QString("majorMinorAssignmentMode")].isNull() && m_major_minor_assignment_mode_isValid;

    m_minor_isValid = ::OpenAPI::fromJsonValue(m_minor, json[QString("minor")]);
    m_minor_isSet = !json[QString("minor")].isNull() && m_minor_isValid;

    m_scanning_enabled_isValid = ::OpenAPI::fromJsonValue(m_scanning_enabled, json[QString("scanningEnabled")]);
    m_scanning_enabled_isSet = !json[QString("scanningEnabled")].isNull() && m_scanning_enabled_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIGetNetworkBluetoothSettings_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkBluetoothSettings_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_advertising_enabled_isSet) {
        obj.insert(QString("advertisingEnabled"), ::OpenAPI::toJsonValue(m_advertising_enabled));
    }
    if (m_major_isSet) {
        obj.insert(QString("major"), ::OpenAPI::toJsonValue(m_major));
    }
    if (m_major_minor_assignment_mode_isSet) {
        obj.insert(QString("majorMinorAssignmentMode"), ::OpenAPI::toJsonValue(m_major_minor_assignment_mode));
    }
    if (m_minor_isSet) {
        obj.insert(QString("minor"), ::OpenAPI::toJsonValue(m_minor));
    }
    if (m_scanning_enabled_isSet) {
        obj.insert(QString("scanningEnabled"), ::OpenAPI::toJsonValue(m_scanning_enabled));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

bool OAIGetNetworkBluetoothSettings_200_response::isAdvertisingEnabled() const {
    return m_advertising_enabled;
}
void OAIGetNetworkBluetoothSettings_200_response::setAdvertisingEnabled(const bool &advertising_enabled) {
    m_advertising_enabled = advertising_enabled;
    m_advertising_enabled_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_advertising_enabled_Set() const{
    return m_advertising_enabled_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_advertising_enabled_Valid() const{
    return m_advertising_enabled_isValid;
}

qint32 OAIGetNetworkBluetoothSettings_200_response::getMajor() const {
    return m_major;
}
void OAIGetNetworkBluetoothSettings_200_response::setMajor(const qint32 &major) {
    m_major = major;
    m_major_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_major_Set() const{
    return m_major_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_major_Valid() const{
    return m_major_isValid;
}

QString OAIGetNetworkBluetoothSettings_200_response::getMajorMinorAssignmentMode() const {
    return m_major_minor_assignment_mode;
}
void OAIGetNetworkBluetoothSettings_200_response::setMajorMinorAssignmentMode(const QString &major_minor_assignment_mode) {
    m_major_minor_assignment_mode = major_minor_assignment_mode;
    m_major_minor_assignment_mode_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_major_minor_assignment_mode_Set() const{
    return m_major_minor_assignment_mode_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_major_minor_assignment_mode_Valid() const{
    return m_major_minor_assignment_mode_isValid;
}

qint32 OAIGetNetworkBluetoothSettings_200_response::getMinor() const {
    return m_minor;
}
void OAIGetNetworkBluetoothSettings_200_response::setMinor(const qint32 &minor) {
    m_minor = minor;
    m_minor_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_minor_Set() const{
    return m_minor_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_minor_Valid() const{
    return m_minor_isValid;
}

bool OAIGetNetworkBluetoothSettings_200_response::isScanningEnabled() const {
    return m_scanning_enabled;
}
void OAIGetNetworkBluetoothSettings_200_response::setScanningEnabled(const bool &scanning_enabled) {
    m_scanning_enabled = scanning_enabled;
    m_scanning_enabled_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_scanning_enabled_Set() const{
    return m_scanning_enabled_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_scanning_enabled_Valid() const{
    return m_scanning_enabled_isValid;
}

QString OAIGetNetworkBluetoothSettings_200_response::getUuid() const {
    return m_uuid;
}
void OAIGetNetworkBluetoothSettings_200_response::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIGetNetworkBluetoothSettings_200_response::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIGetNetworkBluetoothSettings_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertising_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_minor_assignment_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanning_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkBluetoothSettings_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
