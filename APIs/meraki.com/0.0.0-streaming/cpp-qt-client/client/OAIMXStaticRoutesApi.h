/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMXStaticRoutesApi_H
#define OAI_OAIMXStaticRoutesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkStaticRoute_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkStaticRoute_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMXStaticRoutesApi : public QObject {
    Q_OBJECT

public:
    OAIMXStaticRoutesApi(const int timeOut = 0);
    ~OAIMXStaticRoutesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_create_network_static_route_request OAICreateNetworkStaticRoute_request [required]
    */
    virtual void createNetworkStaticRoute(const QString &network_id, const OAICreateNetworkStaticRoute_request &oai_create_network_static_route_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void deleteNetworkStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    */
    virtual void getNetworkStaticRoute(const QString &network_id, const QString &static_route_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkStaticRoutes(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  static_route_id QString [required]
    * @param[in]  oai_update_network_static_route_request OAIUpdateNetworkStaticRoute_request [optional]
    */
    virtual void updateNetworkStaticRoute(const QString &network_id, const QString &static_route_id, const ::OpenAPI::OptionalParam<OAIUpdateNetworkStaticRoute_request> &oai_update_network_static_route_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkStaticRoute_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkStaticRouteCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkStaticRouteCallback(OAIHttpRequestWorker *worker);
    void getNetworkStaticRoutesCallback(OAIHttpRequestWorker *worker);
    void updateNetworkStaticRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkStaticRouteSignal(OAIObject summary);
    void deleteNetworkStaticRouteSignal();
    void getNetworkStaticRouteSignal(OAIObject summary);
    void getNetworkStaticRoutesSignal(QList<OAIObject> summary);
    void updateNetworkStaticRouteSignal(OAIObject summary);


    void createNetworkStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkStaticRouteSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkStaticRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void updateNetworkStaticRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createNetworkStaticRouteSignalError() instead")
    void createNetworkStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkStaticRouteSignalError() instead")
    void deleteNetworkStaticRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkStaticRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkStaticRouteSignalError() instead")
    void getNetworkStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkStaticRoutesSignalError() instead")
    void getNetworkStaticRoutesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkStaticRoutesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkStaticRouteSignalError() instead")
    void updateNetworkStaticRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkStaticRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkStaticRouteSignalErrorFull() instead")
    void createNetworkStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkStaticRouteSignalErrorFull() instead")
    void deleteNetworkStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkStaticRouteSignalErrorFull() instead")
    void getNetworkStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkStaticRoutesSignalErrorFull() instead")
    void getNetworkStaticRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkStaticRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkStaticRouteSignalErrorFull() instead")
    void updateNetworkStaticRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkStaticRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
