/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner() {
    this->initializeModel();
}

OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::~OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner() {}

void OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::initializeModel() {

    m_local_subnet_isSet = false;
    m_local_subnet_isValid = false;

    m_use_vpn_isSet = false;
    m_use_vpn_isValid = false;
}

void OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::fromJsonObject(QJsonObject json) {

    m_local_subnet_isValid = ::OpenAPI::fromJsonValue(m_local_subnet, json[QString("localSubnet")]);
    m_local_subnet_isSet = !json[QString("localSubnet")].isNull() && m_local_subnet_isValid;

    m_use_vpn_isValid = ::OpenAPI::fromJsonValue(m_use_vpn, json[QString("useVpn")]);
    m_use_vpn_isSet = !json[QString("useVpn")].isNull() && m_use_vpn_isValid;
}

QString OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_local_subnet_isSet) {
        obj.insert(QString("localSubnet"), ::OpenAPI::toJsonValue(m_local_subnet));
    }
    if (m_use_vpn_isSet) {
        obj.insert(QString("useVpn"), ::OpenAPI::toJsonValue(m_use_vpn));
    }
    return obj;
}

QString OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::getLocalSubnet() const {
    return m_local_subnet;
}
void OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::setLocalSubnet(const QString &local_subnet) {
    m_local_subnet = local_subnet;
    m_local_subnet_isSet = true;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::is_local_subnet_Set() const{
    return m_local_subnet_isSet;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::is_local_subnet_Valid() const{
    return m_local_subnet_isValid;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::isUseVpn() const {
    return m_use_vpn;
}
void OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::setUseVpn(const bool &use_vpn) {
    m_use_vpn = use_vpn;
    m_use_vpn_isSet = true;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::is_use_vpn_Set() const{
    return m_use_vpn_isSet;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::is_use_vpn_Valid() const{
    return m_use_vpn_isValid;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_vpn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSiteToSiteVpn_request_subnets_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_local_subnet_isValid && true;
}

} // namespace OpenAPI
