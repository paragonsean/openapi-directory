/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkPiiRequest_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkPiiRequest_request::OAICreateNetworkPiiRequest_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkPiiRequest_request::OAICreateNetworkPiiRequest_request() {
    this->initializeModel();
}

OAICreateNetworkPiiRequest_request::~OAICreateNetworkPiiRequest_request() {}

void OAICreateNetworkPiiRequest_request::initializeModel() {

    m_datasets_isSet = false;
    m_datasets_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_sm_device_id_isSet = false;
    m_sm_device_id_isValid = false;

    m_sm_user_id_isSet = false;
    m_sm_user_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAICreateNetworkPiiRequest_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkPiiRequest_request::fromJsonObject(QJsonObject json) {

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_sm_device_id_isValid = ::OpenAPI::fromJsonValue(m_sm_device_id, json[QString("smDeviceId")]);
    m_sm_device_id_isSet = !json[QString("smDeviceId")].isNull() && m_sm_device_id_isValid;

    m_sm_user_id_isValid = ::OpenAPI::fromJsonValue(m_sm_user_id, json[QString("smUserId")]);
    m_sm_user_id_isSet = !json[QString("smUserId")].isNull() && m_sm_user_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAICreateNetworkPiiRequest_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkPiiRequest_request::asJsonObject() const {
    QJsonObject obj;
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_sm_device_id_isSet) {
        obj.insert(QString("smDeviceId"), ::OpenAPI::toJsonValue(m_sm_device_id));
    }
    if (m_sm_user_id_isSet) {
        obj.insert(QString("smUserId"), ::OpenAPI::toJsonValue(m_sm_user_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QList<QString> OAICreateNetworkPiiRequest_request::getDatasets() const {
    return m_datasets;
}
void OAICreateNetworkPiiRequest_request::setDatasets(const QList<QString> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_datasets_Valid() const{
    return m_datasets_isValid;
}

QString OAICreateNetworkPiiRequest_request::getEmail() const {
    return m_email;
}
void OAICreateNetworkPiiRequest_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreateNetworkPiiRequest_request::getMac() const {
    return m_mac;
}
void OAICreateNetworkPiiRequest_request::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAICreateNetworkPiiRequest_request::getSmDeviceId() const {
    return m_sm_device_id;
}
void OAICreateNetworkPiiRequest_request::setSmDeviceId(const QString &sm_device_id) {
    m_sm_device_id = sm_device_id;
    m_sm_device_id_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_sm_device_id_Set() const{
    return m_sm_device_id_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_sm_device_id_Valid() const{
    return m_sm_device_id_isValid;
}

QString OAICreateNetworkPiiRequest_request::getSmUserId() const {
    return m_sm_user_id;
}
void OAICreateNetworkPiiRequest_request::setSmUserId(const QString &sm_user_id) {
    m_sm_user_id = sm_user_id;
    m_sm_user_id_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_sm_user_id_Set() const{
    return m_sm_user_id_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_sm_user_id_Valid() const{
    return m_sm_user_id_isValid;
}

QString OAICreateNetworkPiiRequest_request::getType() const {
    return m_type;
}
void OAICreateNetworkPiiRequest_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateNetworkPiiRequest_request::getUsername() const {
    return m_username;
}
void OAICreateNetworkPiiRequest_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateNetworkPiiRequest_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateNetworkPiiRequest_request::is_username_Valid() const{
    return m_username_isValid;
}

bool OAICreateNetworkPiiRequest_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sm_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sm_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkPiiRequest_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
