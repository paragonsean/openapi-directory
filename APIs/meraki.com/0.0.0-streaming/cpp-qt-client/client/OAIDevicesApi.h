/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClaimNetworkDevices_request.h"
#include "OAICycleDeviceSwitchPorts_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkDevice_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_claim_network_devices_request OAIClaimNetworkDevices_request [optional]
    */
    virtual void claimNetworkDevices(const QString &network_id, const ::OpenAPI::OptionalParam<OAIClaimNetworkDevices_request> &oai_claim_network_devices_request = ::OpenAPI::OptionalParam<OAIClaimNetworkDevices_request>());

    /**
    * @param[in]  serial QString [required]
    * @param[in]  oai_cycle_device_switch_ports_request OAICycleDeviceSwitchPorts_request [required]
    */
    virtual void cycleDeviceSwitchPorts(const QString &serial, const OAICycleDeviceSwitchPorts_request &oai_cycle_device_switch_ports_request);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getNetworkDevice(const QString &network_id, const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    * @param[in]  ip QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  t1 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  uplink QString [optional]
    */
    virtual void getNetworkDeviceLossAndLatencyHistory(const QString &network_id, const QString &serial, const QString &ip, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &t1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &uplink = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getNetworkDevicePerformance(const QString &network_id, const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void getNetworkDeviceUplink(const QString &network_id, const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkDevices(const QString &network_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  starting_after QString [optional]
    * @param[in]  ending_before QString [optional]
    * @param[in]  configuration_updated_after QString [optional]
    */
    virtual void getOrganizationDevices(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &starting_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ending_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_updated_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void rebootNetworkDevice(const QString &network_id, const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void removeNetworkDevice(const QString &network_id, const QString &serial);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  serial QString [required]
    * @param[in]  oai_update_network_device_request OAIUpdateNetworkDevice_request [optional]
    */
    virtual void updateNetworkDevice(const QString &network_id, const QString &serial, const ::OpenAPI::OptionalParam<OAIUpdateNetworkDevice_request> &oai_update_network_device_request = ::OpenAPI::OptionalParam<OAIUpdateNetworkDevice_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void claimNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void cycleDeviceSwitchPortsCallback(OAIHttpRequestWorker *worker);
    void getNetworkDeviceCallback(OAIHttpRequestWorker *worker);
    void getNetworkDeviceLossAndLatencyHistoryCallback(OAIHttpRequestWorker *worker);
    void getNetworkDevicePerformanceCallback(OAIHttpRequestWorker *worker);
    void getNetworkDeviceUplinkCallback(OAIHttpRequestWorker *worker);
    void getNetworkDevicesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationDevicesCallback(OAIHttpRequestWorker *worker);
    void rebootNetworkDeviceCallback(OAIHttpRequestWorker *worker);
    void removeNetworkDeviceCallback(OAIHttpRequestWorker *worker);
    void updateNetworkDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void claimNetworkDevicesSignal();
    void cycleDeviceSwitchPortsSignal(OAIObject summary);
    void getNetworkDeviceSignal(OAIObject summary);
    void getNetworkDeviceLossAndLatencyHistorySignal(QList<OAIObject> summary);
    void getNetworkDevicePerformanceSignal(OAIObject summary);
    void getNetworkDeviceUplinkSignal(QList<OAIObject> summary);
    void getNetworkDevicesSignal(QList<OAIObject> summary);
    void getOrganizationDevicesSignal(QList<OAIObject> summary);
    void rebootNetworkDeviceSignal(OAIObject summary);
    void removeNetworkDeviceSignal();
    void updateNetworkDeviceSignal(OAIObject summary);


    void claimNetworkDevicesSignalFull(OAIHttpRequestWorker *worker);
    void cycleDeviceSwitchPortsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkDeviceLossAndLatencyHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkDevicePerformanceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkDeviceUplinkSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationDevicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void rebootNetworkDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void removeNetworkDeviceSignalFull(OAIHttpRequestWorker *worker);
    void updateNetworkDeviceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalError() instead")
    void claimNetworkDevicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalError() instead")
    void cycleDeviceSwitchPortsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceSignalError() instead")
    void getNetworkDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceLossAndLatencyHistorySignalError() instead")
    void getNetworkDeviceLossAndLatencyHistorySignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceLossAndLatencyHistorySignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicePerformanceSignalError() instead")
    void getNetworkDevicePerformanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicePerformanceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceUplinkSignalError() instead")
    void getNetworkDeviceUplinkSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceUplinkSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalError() instead")
    void getNetworkDevicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalError() instead")
    void getOrganizationDevicesSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootNetworkDeviceSignalError() instead")
    void rebootNetworkDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootNetworkDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDeviceSignalError() instead")
    void removeNetworkDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkDeviceSignalError() instead")
    void updateNetworkDeviceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkDeviceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use claimNetworkDevicesSignalErrorFull() instead")
    void claimNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void claimNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cycleDeviceSwitchPortsSignalErrorFull() instead")
    void cycleDeviceSwitchPortsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cycleDeviceSwitchPortsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceSignalErrorFull() instead")
    void getNetworkDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceLossAndLatencyHistorySignalErrorFull() instead")
    void getNetworkDeviceLossAndLatencyHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceLossAndLatencyHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicePerformanceSignalErrorFull() instead")
    void getNetworkDevicePerformanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicePerformanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDeviceUplinkSignalErrorFull() instead")
    void getNetworkDeviceUplinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDeviceUplinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkDevicesSignalErrorFull() instead")
    void getNetworkDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationDevicesSignalErrorFull() instead")
    void getOrganizationDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebootNetworkDeviceSignalErrorFull() instead")
    void rebootNetworkDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rebootNetworkDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNetworkDeviceSignalErrorFull() instead")
    void removeNetworkDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNetworkDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkDeviceSignalErrorFull() instead")
    void updateNetworkDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
