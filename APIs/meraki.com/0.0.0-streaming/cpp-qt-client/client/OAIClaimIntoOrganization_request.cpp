/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClaimIntoOrganization_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClaimIntoOrganization_request::OAIClaimIntoOrganization_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClaimIntoOrganization_request::OAIClaimIntoOrganization_request() {
    this->initializeModel();
}

OAIClaimIntoOrganization_request::~OAIClaimIntoOrganization_request() {}

void OAIClaimIntoOrganization_request::initializeModel() {

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_orders_isSet = false;
    m_orders_isValid = false;

    m_serials_isSet = false;
    m_serials_isValid = false;
}

void OAIClaimIntoOrganization_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClaimIntoOrganization_request::fromJsonObject(QJsonObject json) {

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_orders_isValid = ::OpenAPI::fromJsonValue(m_orders, json[QString("orders")]);
    m_orders_isSet = !json[QString("orders")].isNull() && m_orders_isValid;

    m_serials_isValid = ::OpenAPI::fromJsonValue(m_serials, json[QString("serials")]);
    m_serials_isSet = !json[QString("serials")].isNull() && m_serials_isValid;
}

QString OAIClaimIntoOrganization_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClaimIntoOrganization_request::asJsonObject() const {
    QJsonObject obj;
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_orders.size() > 0) {
        obj.insert(QString("orders"), ::OpenAPI::toJsonValue(m_orders));
    }
    if (m_serials.size() > 0) {
        obj.insert(QString("serials"), ::OpenAPI::toJsonValue(m_serials));
    }
    return obj;
}

QList<OAIClaimIntoOrganization_request_licenses_inner> OAIClaimIntoOrganization_request::getLicenses() const {
    return m_licenses;
}
void OAIClaimIntoOrganization_request::setLicenses(const QList<OAIClaimIntoOrganization_request_licenses_inner> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIClaimIntoOrganization_request::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIClaimIntoOrganization_request::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QList<QString> OAIClaimIntoOrganization_request::getOrders() const {
    return m_orders;
}
void OAIClaimIntoOrganization_request::setOrders(const QList<QString> &orders) {
    m_orders = orders;
    m_orders_isSet = true;
}

bool OAIClaimIntoOrganization_request::is_orders_Set() const{
    return m_orders_isSet;
}

bool OAIClaimIntoOrganization_request::is_orders_Valid() const{
    return m_orders_isValid;
}

QList<QString> OAIClaimIntoOrganization_request::getSerials() const {
    return m_serials;
}
void OAIClaimIntoOrganization_request::setSerials(const QList<QString> &serials) {
    m_serials = serials;
    m_serials_isSet = true;
}

bool OAIClaimIntoOrganization_request::is_serials_Set() const{
    return m_serials_isSet;
}

bool OAIClaimIntoOrganization_request::is_serials_Valid() const{
    return m_serials_isValid;
}

bool OAIClaimIntoOrganization_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serials.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClaimIntoOrganization_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
