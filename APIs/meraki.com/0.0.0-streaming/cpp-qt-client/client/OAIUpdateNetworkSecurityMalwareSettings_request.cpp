/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSecurityMalwareSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSecurityMalwareSettings_request::OAIUpdateNetworkSecurityMalwareSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSecurityMalwareSettings_request::OAIUpdateNetworkSecurityMalwareSettings_request() {
    this->initializeModel();
}

OAIUpdateNetworkSecurityMalwareSettings_request::~OAIUpdateNetworkSecurityMalwareSettings_request() {}

void OAIUpdateNetworkSecurityMalwareSettings_request::initializeModel() {

    m_allowed_files_isSet = false;
    m_allowed_files_isValid = false;

    m_allowed_urls_isSet = false;
    m_allowed_urls_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIUpdateNetworkSecurityMalwareSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSecurityMalwareSettings_request::fromJsonObject(QJsonObject json) {

    m_allowed_files_isValid = ::OpenAPI::fromJsonValue(m_allowed_files, json[QString("allowedFiles")]);
    m_allowed_files_isSet = !json[QString("allowedFiles")].isNull() && m_allowed_files_isValid;

    m_allowed_urls_isValid = ::OpenAPI::fromJsonValue(m_allowed_urls, json[QString("allowedUrls")]);
    m_allowed_urls_isSet = !json[QString("allowedUrls")].isNull() && m_allowed_urls_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIUpdateNetworkSecurityMalwareSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSecurityMalwareSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_files.size() > 0) {
        obj.insert(QString("allowedFiles"), ::OpenAPI::toJsonValue(m_allowed_files));
    }
    if (m_allowed_urls.size() > 0) {
        obj.insert(QString("allowedUrls"), ::OpenAPI::toJsonValue(m_allowed_urls));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QList<OAIUpdateNetworkSecurityMalwareSettings_request_allowedFiles_inner> OAIUpdateNetworkSecurityMalwareSettings_request::getAllowedFiles() const {
    return m_allowed_files;
}
void OAIUpdateNetworkSecurityMalwareSettings_request::setAllowedFiles(const QList<OAIUpdateNetworkSecurityMalwareSettings_request_allowedFiles_inner> &allowed_files) {
    m_allowed_files = allowed_files;
    m_allowed_files_isSet = true;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_allowed_files_Set() const{
    return m_allowed_files_isSet;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_allowed_files_Valid() const{
    return m_allowed_files_isValid;
}

QList<OAIUpdateNetworkSecurityMalwareSettings_request_allowedUrls_inner> OAIUpdateNetworkSecurityMalwareSettings_request::getAllowedUrls() const {
    return m_allowed_urls;
}
void OAIUpdateNetworkSecurityMalwareSettings_request::setAllowedUrls(const QList<OAIUpdateNetworkSecurityMalwareSettings_request_allowedUrls_inner> &allowed_urls) {
    m_allowed_urls = allowed_urls;
    m_allowed_urls_isSet = true;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_allowed_urls_Set() const{
    return m_allowed_urls_isSet;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_allowed_urls_Valid() const{
    return m_allowed_urls_isValid;
}

QString OAIUpdateNetworkSecurityMalwareSettings_request::getMode() const {
    return m_mode;
}
void OAIUpdateNetworkSecurityMalwareSettings_request::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSecurityMalwareSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && true;
}

} // namespace OpenAPI
