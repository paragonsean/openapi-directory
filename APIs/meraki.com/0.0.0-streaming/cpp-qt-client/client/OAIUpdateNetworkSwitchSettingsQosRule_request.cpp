/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkSwitchSettingsQosRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkSwitchSettingsQosRule_request::OAIUpdateNetworkSwitchSettingsQosRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkSwitchSettingsQosRule_request::OAIUpdateNetworkSwitchSettingsQosRule_request() {
    this->initializeModel();
}

OAIUpdateNetworkSwitchSettingsQosRule_request::~OAIUpdateNetworkSwitchSettingsQosRule_request() {}

void OAIUpdateNetworkSwitchSettingsQosRule_request::initializeModel() {

    m_dscp_isSet = false;
    m_dscp_isValid = false;

    m_dst_port_isSet = false;
    m_dst_port_isValid = false;

    m_dst_port_range_isSet = false;
    m_dst_port_range_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_src_port_isSet = false;
    m_src_port_isValid = false;

    m_src_port_range_isSet = false;
    m_src_port_range_isValid = false;

    m_vlan_isSet = false;
    m_vlan_isValid = false;
}

void OAIUpdateNetworkSwitchSettingsQosRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkSwitchSettingsQosRule_request::fromJsonObject(QJsonObject json) {

    m_dscp_isValid = ::OpenAPI::fromJsonValue(m_dscp, json[QString("dscp")]);
    m_dscp_isSet = !json[QString("dscp")].isNull() && m_dscp_isValid;

    m_dst_port_isValid = ::OpenAPI::fromJsonValue(m_dst_port, json[QString("dstPort")]);
    m_dst_port_isSet = !json[QString("dstPort")].isNull() && m_dst_port_isValid;

    m_dst_port_range_isValid = ::OpenAPI::fromJsonValue(m_dst_port_range, json[QString("dstPortRange")]);
    m_dst_port_range_isSet = !json[QString("dstPortRange")].isNull() && m_dst_port_range_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_src_port_isValid = ::OpenAPI::fromJsonValue(m_src_port, json[QString("srcPort")]);
    m_src_port_isSet = !json[QString("srcPort")].isNull() && m_src_port_isValid;

    m_src_port_range_isValid = ::OpenAPI::fromJsonValue(m_src_port_range, json[QString("srcPortRange")]);
    m_src_port_range_isSet = !json[QString("srcPortRange")].isNull() && m_src_port_range_isValid;

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;
}

QString OAIUpdateNetworkSwitchSettingsQosRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkSwitchSettingsQosRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_dscp_isSet) {
        obj.insert(QString("dscp"), ::OpenAPI::toJsonValue(m_dscp));
    }
    if (m_dst_port_isSet) {
        obj.insert(QString("dstPort"), ::OpenAPI::toJsonValue(m_dst_port));
    }
    if (m_dst_port_range_isSet) {
        obj.insert(QString("dstPortRange"), ::OpenAPI::toJsonValue(m_dst_port_range));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_src_port_isSet) {
        obj.insert(QString("srcPort"), ::OpenAPI::toJsonValue(m_src_port));
    }
    if (m_src_port_range_isSet) {
        obj.insert(QString("srcPortRange"), ::OpenAPI::toJsonValue(m_src_port_range));
    }
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    return obj;
}

qint32 OAIUpdateNetworkSwitchSettingsQosRule_request::getDscp() const {
    return m_dscp;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setDscp(const qint32 &dscp) {
    m_dscp = dscp;
    m_dscp_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dscp_Set() const{
    return m_dscp_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dscp_Valid() const{
    return m_dscp_isValid;
}

qint32 OAIUpdateNetworkSwitchSettingsQosRule_request::getDstPort() const {
    return m_dst_port;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setDstPort(const qint32 &dst_port) {
    m_dst_port = dst_port;
    m_dst_port_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dst_port_Set() const{
    return m_dst_port_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dst_port_Valid() const{
    return m_dst_port_isValid;
}

QString OAIUpdateNetworkSwitchSettingsQosRule_request::getDstPortRange() const {
    return m_dst_port_range;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setDstPortRange(const QString &dst_port_range) {
    m_dst_port_range = dst_port_range;
    m_dst_port_range_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dst_port_range_Set() const{
    return m_dst_port_range_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_dst_port_range_Valid() const{
    return m_dst_port_range_isValid;
}

QString OAIUpdateNetworkSwitchSettingsQosRule_request::getProtocol() const {
    return m_protocol;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIUpdateNetworkSwitchSettingsQosRule_request::getSrcPort() const {
    return m_src_port;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setSrcPort(const qint32 &src_port) {
    m_src_port = src_port;
    m_src_port_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_src_port_Set() const{
    return m_src_port_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_src_port_Valid() const{
    return m_src_port_isValid;
}

QString OAIUpdateNetworkSwitchSettingsQosRule_request::getSrcPortRange() const {
    return m_src_port_range;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setSrcPortRange(const QString &src_port_range) {
    m_src_port_range = src_port_range;
    m_src_port_range_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_src_port_range_Set() const{
    return m_src_port_range_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_src_port_range_Valid() const{
    return m_src_port_range_isValid;
}

qint32 OAIUpdateNetworkSwitchSettingsQosRule_request::getVlan() const {
    return m_vlan;
}
void OAIUpdateNetworkSwitchSettingsQosRule_request::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::is_vlan_Valid() const{
    return m_vlan_isValid;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkSwitchSettingsQosRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
