/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILockNetworkSmDevices_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILockNetworkSmDevices_request::OAILockNetworkSmDevices_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILockNetworkSmDevices_request::OAILockNetworkSmDevices_request() {
    this->initializeModel();
}

OAILockNetworkSmDevices_request::~OAILockNetworkSmDevices_request() {}

void OAILockNetworkSmDevices_request::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_serials_isSet = false;
    m_serials_isValid = false;

    m_wifi_macs_isSet = false;
    m_wifi_macs_isValid = false;
}

void OAILockNetworkSmDevices_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILockNetworkSmDevices_request::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_serials_isValid = ::OpenAPI::fromJsonValue(m_serials, json[QString("serials")]);
    m_serials_isSet = !json[QString("serials")].isNull() && m_serials_isValid;

    m_wifi_macs_isValid = ::OpenAPI::fromJsonValue(m_wifi_macs, json[QString("wifiMacs")]);
    m_wifi_macs_isSet = !json[QString("wifiMacs")].isNull() && m_wifi_macs_isValid;
}

QString OAILockNetworkSmDevices_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILockNetworkSmDevices_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ids_isSet) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_serials_isSet) {
        obj.insert(QString("serials"), ::OpenAPI::toJsonValue(m_serials));
    }
    if (m_wifi_macs_isSet) {
        obj.insert(QString("wifiMacs"), ::OpenAPI::toJsonValue(m_wifi_macs));
    }
    return obj;
}

QString OAILockNetworkSmDevices_request::getIds() const {
    return m_ids;
}
void OAILockNetworkSmDevices_request::setIds(const QString &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAILockNetworkSmDevices_request::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAILockNetworkSmDevices_request::is_ids_Valid() const{
    return m_ids_isValid;
}

qint32 OAILockNetworkSmDevices_request::getPin() const {
    return m_pin;
}
void OAILockNetworkSmDevices_request::setPin(const qint32 &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAILockNetworkSmDevices_request::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAILockNetworkSmDevices_request::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAILockNetworkSmDevices_request::getScope() const {
    return m_scope;
}
void OAILockNetworkSmDevices_request::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAILockNetworkSmDevices_request::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAILockNetworkSmDevices_request::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAILockNetworkSmDevices_request::getSerials() const {
    return m_serials;
}
void OAILockNetworkSmDevices_request::setSerials(const QString &serials) {
    m_serials = serials;
    m_serials_isSet = true;
}

bool OAILockNetworkSmDevices_request::is_serials_Set() const{
    return m_serials_isSet;
}

bool OAILockNetworkSmDevices_request::is_serials_Valid() const{
    return m_serials_isValid;
}

QString OAILockNetworkSmDevices_request::getWifiMacs() const {
    return m_wifi_macs;
}
void OAILockNetworkSmDevices_request::setWifiMacs(const QString &wifi_macs) {
    m_wifi_macs = wifi_macs;
    m_wifi_macs_isSet = true;
}

bool OAILockNetworkSmDevices_request::is_wifi_macs_Set() const{
    return m_wifi_macs_isSet;
}

bool OAILockNetworkSmDevices_request::is_wifi_macs_Valid() const{
    return m_wifi_macs_isValid;
}

bool OAILockNetworkSmDevices_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_macs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILockNetworkSmDevices_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
