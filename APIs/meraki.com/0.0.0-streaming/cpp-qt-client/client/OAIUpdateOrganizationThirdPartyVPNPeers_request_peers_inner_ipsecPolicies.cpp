/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies() {
    this->initializeModel();
}

OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::~OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies() {}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::initializeModel() {

    m_child_auth_algo_isSet = false;
    m_child_auth_algo_isValid = false;

    m_child_cipher_algo_isSet = false;
    m_child_cipher_algo_isValid = false;

    m_child_lifetime_isSet = false;
    m_child_lifetime_isValid = false;

    m_child_pfs_group_isSet = false;
    m_child_pfs_group_isValid = false;

    m_ike_auth_algo_isSet = false;
    m_ike_auth_algo_isValid = false;

    m_ike_cipher_algo_isSet = false;
    m_ike_cipher_algo_isValid = false;

    m_ike_diffie_hellman_group_isSet = false;
    m_ike_diffie_hellman_group_isValid = false;

    m_ike_lifetime_isSet = false;
    m_ike_lifetime_isValid = false;

    m_ike_prf_algo_isSet = false;
    m_ike_prf_algo_isValid = false;
}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::fromJsonObject(QJsonObject json) {

    m_child_auth_algo_isValid = ::OpenAPI::fromJsonValue(m_child_auth_algo, json[QString("childAuthAlgo")]);
    m_child_auth_algo_isSet = !json[QString("childAuthAlgo")].isNull() && m_child_auth_algo_isValid;

    m_child_cipher_algo_isValid = ::OpenAPI::fromJsonValue(m_child_cipher_algo, json[QString("childCipherAlgo")]);
    m_child_cipher_algo_isSet = !json[QString("childCipherAlgo")].isNull() && m_child_cipher_algo_isValid;

    m_child_lifetime_isValid = ::OpenAPI::fromJsonValue(m_child_lifetime, json[QString("childLifetime")]);
    m_child_lifetime_isSet = !json[QString("childLifetime")].isNull() && m_child_lifetime_isValid;

    m_child_pfs_group_isValid = ::OpenAPI::fromJsonValue(m_child_pfs_group, json[QString("childPfsGroup")]);
    m_child_pfs_group_isSet = !json[QString("childPfsGroup")].isNull() && m_child_pfs_group_isValid;

    m_ike_auth_algo_isValid = ::OpenAPI::fromJsonValue(m_ike_auth_algo, json[QString("ikeAuthAlgo")]);
    m_ike_auth_algo_isSet = !json[QString("ikeAuthAlgo")].isNull() && m_ike_auth_algo_isValid;

    m_ike_cipher_algo_isValid = ::OpenAPI::fromJsonValue(m_ike_cipher_algo, json[QString("ikeCipherAlgo")]);
    m_ike_cipher_algo_isSet = !json[QString("ikeCipherAlgo")].isNull() && m_ike_cipher_algo_isValid;

    m_ike_diffie_hellman_group_isValid = ::OpenAPI::fromJsonValue(m_ike_diffie_hellman_group, json[QString("ikeDiffieHellmanGroup")]);
    m_ike_diffie_hellman_group_isSet = !json[QString("ikeDiffieHellmanGroup")].isNull() && m_ike_diffie_hellman_group_isValid;

    m_ike_lifetime_isValid = ::OpenAPI::fromJsonValue(m_ike_lifetime, json[QString("ikeLifetime")]);
    m_ike_lifetime_isSet = !json[QString("ikeLifetime")].isNull() && m_ike_lifetime_isValid;

    m_ike_prf_algo_isValid = ::OpenAPI::fromJsonValue(m_ike_prf_algo, json[QString("ikePrfAlgo")]);
    m_ike_prf_algo_isSet = !json[QString("ikePrfAlgo")].isNull() && m_ike_prf_algo_isValid;
}

QString OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_child_auth_algo.size() > 0) {
        obj.insert(QString("childAuthAlgo"), ::OpenAPI::toJsonValue(m_child_auth_algo));
    }
    if (m_child_cipher_algo.size() > 0) {
        obj.insert(QString("childCipherAlgo"), ::OpenAPI::toJsonValue(m_child_cipher_algo));
    }
    if (m_child_lifetime_isSet) {
        obj.insert(QString("childLifetime"), ::OpenAPI::toJsonValue(m_child_lifetime));
    }
    if (m_child_pfs_group.size() > 0) {
        obj.insert(QString("childPfsGroup"), ::OpenAPI::toJsonValue(m_child_pfs_group));
    }
    if (m_ike_auth_algo.size() > 0) {
        obj.insert(QString("ikeAuthAlgo"), ::OpenAPI::toJsonValue(m_ike_auth_algo));
    }
    if (m_ike_cipher_algo.size() > 0) {
        obj.insert(QString("ikeCipherAlgo"), ::OpenAPI::toJsonValue(m_ike_cipher_algo));
    }
    if (m_ike_diffie_hellman_group.size() > 0) {
        obj.insert(QString("ikeDiffieHellmanGroup"), ::OpenAPI::toJsonValue(m_ike_diffie_hellman_group));
    }
    if (m_ike_lifetime_isSet) {
        obj.insert(QString("ikeLifetime"), ::OpenAPI::toJsonValue(m_ike_lifetime));
    }
    if (m_ike_prf_algo.size() > 0) {
        obj.insert(QString("ikePrfAlgo"), ::OpenAPI::toJsonValue(m_ike_prf_algo));
    }
    return obj;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getChildAuthAlgo() const {
    return m_child_auth_algo;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setChildAuthAlgo(const QList<QString> &child_auth_algo) {
    m_child_auth_algo = child_auth_algo;
    m_child_auth_algo_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_auth_algo_Set() const{
    return m_child_auth_algo_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_auth_algo_Valid() const{
    return m_child_auth_algo_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getChildCipherAlgo() const {
    return m_child_cipher_algo;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setChildCipherAlgo(const QList<QString> &child_cipher_algo) {
    m_child_cipher_algo = child_cipher_algo;
    m_child_cipher_algo_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_cipher_algo_Set() const{
    return m_child_cipher_algo_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_cipher_algo_Valid() const{
    return m_child_cipher_algo_isValid;
}

qint32 OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getChildLifetime() const {
    return m_child_lifetime;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setChildLifetime(const qint32 &child_lifetime) {
    m_child_lifetime = child_lifetime;
    m_child_lifetime_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_lifetime_Set() const{
    return m_child_lifetime_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_lifetime_Valid() const{
    return m_child_lifetime_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getChildPfsGroup() const {
    return m_child_pfs_group;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setChildPfsGroup(const QList<QString> &child_pfs_group) {
    m_child_pfs_group = child_pfs_group;
    m_child_pfs_group_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_pfs_group_Set() const{
    return m_child_pfs_group_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_child_pfs_group_Valid() const{
    return m_child_pfs_group_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getIkeAuthAlgo() const {
    return m_ike_auth_algo;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setIkeAuthAlgo(const QList<QString> &ike_auth_algo) {
    m_ike_auth_algo = ike_auth_algo;
    m_ike_auth_algo_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_auth_algo_Set() const{
    return m_ike_auth_algo_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_auth_algo_Valid() const{
    return m_ike_auth_algo_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getIkeCipherAlgo() const {
    return m_ike_cipher_algo;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setIkeCipherAlgo(const QList<QString> &ike_cipher_algo) {
    m_ike_cipher_algo = ike_cipher_algo;
    m_ike_cipher_algo_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_cipher_algo_Set() const{
    return m_ike_cipher_algo_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_cipher_algo_Valid() const{
    return m_ike_cipher_algo_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getIkeDiffieHellmanGroup() const {
    return m_ike_diffie_hellman_group;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setIkeDiffieHellmanGroup(const QList<QString> &ike_diffie_hellman_group) {
    m_ike_diffie_hellman_group = ike_diffie_hellman_group;
    m_ike_diffie_hellman_group_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_diffie_hellman_group_Set() const{
    return m_ike_diffie_hellman_group_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_diffie_hellman_group_Valid() const{
    return m_ike_diffie_hellman_group_isValid;
}

qint32 OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getIkeLifetime() const {
    return m_ike_lifetime;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setIkeLifetime(const qint32 &ike_lifetime) {
    m_ike_lifetime = ike_lifetime;
    m_ike_lifetime_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_lifetime_Set() const{
    return m_ike_lifetime_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_lifetime_Valid() const{
    return m_ike_lifetime_isValid;
}

QList<QString> OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::getIkePrfAlgo() const {
    return m_ike_prf_algo;
}
void OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::setIkePrfAlgo(const QList<QString> &ike_prf_algo) {
    m_ike_prf_algo = ike_prf_algo;
    m_ike_prf_algo_isSet = true;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_prf_algo_Set() const{
    return m_ike_prf_algo_isSet;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::is_ike_prf_algo_Valid() const{
    return m_ike_prf_algo_isValid;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_auth_algo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_cipher_algo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_pfs_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ike_auth_algo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ike_cipher_algo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ike_diffie_hellman_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ike_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ike_prf_algo.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOrganizationThirdPartyVPNPeers_request_peers_inner_ipsecPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
