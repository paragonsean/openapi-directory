/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkWirelessSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkWirelessSettings_request::OAIUpdateNetworkWirelessSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkWirelessSettings_request::OAIUpdateNetworkWirelessSettings_request() {
    this->initializeModel();
}

OAIUpdateNetworkWirelessSettings_request::~OAIUpdateNetworkWirelessSettings_request() {}

void OAIUpdateNetworkWirelessSettings_request::initializeModel() {

    m_ipv6_bridge_enabled_isSet = false;
    m_ipv6_bridge_enabled_isValid = false;

    m_led_lights_on_isSet = false;
    m_led_lights_on_isValid = false;

    m_location_analytics_enabled_isSet = false;
    m_location_analytics_enabled_isValid = false;

    m_meshing_enabled_isSet = false;
    m_meshing_enabled_isValid = false;

    m_upgrade_strategy_isSet = false;
    m_upgrade_strategy_isValid = false;
}

void OAIUpdateNetworkWirelessSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkWirelessSettings_request::fromJsonObject(QJsonObject json) {

    m_ipv6_bridge_enabled_isValid = ::OpenAPI::fromJsonValue(m_ipv6_bridge_enabled, json[QString("ipv6BridgeEnabled")]);
    m_ipv6_bridge_enabled_isSet = !json[QString("ipv6BridgeEnabled")].isNull() && m_ipv6_bridge_enabled_isValid;

    m_led_lights_on_isValid = ::OpenAPI::fromJsonValue(m_led_lights_on, json[QString("ledLightsOn")]);
    m_led_lights_on_isSet = !json[QString("ledLightsOn")].isNull() && m_led_lights_on_isValid;

    m_location_analytics_enabled_isValid = ::OpenAPI::fromJsonValue(m_location_analytics_enabled, json[QString("locationAnalyticsEnabled")]);
    m_location_analytics_enabled_isSet = !json[QString("locationAnalyticsEnabled")].isNull() && m_location_analytics_enabled_isValid;

    m_meshing_enabled_isValid = ::OpenAPI::fromJsonValue(m_meshing_enabled, json[QString("meshingEnabled")]);
    m_meshing_enabled_isSet = !json[QString("meshingEnabled")].isNull() && m_meshing_enabled_isValid;

    m_upgrade_strategy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_strategy, json[QString("upgradeStrategy")]);
    m_upgrade_strategy_isSet = !json[QString("upgradeStrategy")].isNull() && m_upgrade_strategy_isValid;
}

QString OAIUpdateNetworkWirelessSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkWirelessSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_ipv6_bridge_enabled_isSet) {
        obj.insert(QString("ipv6BridgeEnabled"), ::OpenAPI::toJsonValue(m_ipv6_bridge_enabled));
    }
    if (m_led_lights_on_isSet) {
        obj.insert(QString("ledLightsOn"), ::OpenAPI::toJsonValue(m_led_lights_on));
    }
    if (m_location_analytics_enabled_isSet) {
        obj.insert(QString("locationAnalyticsEnabled"), ::OpenAPI::toJsonValue(m_location_analytics_enabled));
    }
    if (m_meshing_enabled_isSet) {
        obj.insert(QString("meshingEnabled"), ::OpenAPI::toJsonValue(m_meshing_enabled));
    }
    if (m_upgrade_strategy_isSet) {
        obj.insert(QString("upgradeStrategy"), ::OpenAPI::toJsonValue(m_upgrade_strategy));
    }
    return obj;
}

bool OAIUpdateNetworkWirelessSettings_request::isIpv6BridgeEnabled() const {
    return m_ipv6_bridge_enabled;
}
void OAIUpdateNetworkWirelessSettings_request::setIpv6BridgeEnabled(const bool &ipv6_bridge_enabled) {
    m_ipv6_bridge_enabled = ipv6_bridge_enabled;
    m_ipv6_bridge_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSettings_request::is_ipv6_bridge_enabled_Set() const{
    return m_ipv6_bridge_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSettings_request::is_ipv6_bridge_enabled_Valid() const{
    return m_ipv6_bridge_enabled_isValid;
}

bool OAIUpdateNetworkWirelessSettings_request::isLedLightsOn() const {
    return m_led_lights_on;
}
void OAIUpdateNetworkWirelessSettings_request::setLedLightsOn(const bool &led_lights_on) {
    m_led_lights_on = led_lights_on;
    m_led_lights_on_isSet = true;
}

bool OAIUpdateNetworkWirelessSettings_request::is_led_lights_on_Set() const{
    return m_led_lights_on_isSet;
}

bool OAIUpdateNetworkWirelessSettings_request::is_led_lights_on_Valid() const{
    return m_led_lights_on_isValid;
}

bool OAIUpdateNetworkWirelessSettings_request::isLocationAnalyticsEnabled() const {
    return m_location_analytics_enabled;
}
void OAIUpdateNetworkWirelessSettings_request::setLocationAnalyticsEnabled(const bool &location_analytics_enabled) {
    m_location_analytics_enabled = location_analytics_enabled;
    m_location_analytics_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSettings_request::is_location_analytics_enabled_Set() const{
    return m_location_analytics_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSettings_request::is_location_analytics_enabled_Valid() const{
    return m_location_analytics_enabled_isValid;
}

bool OAIUpdateNetworkWirelessSettings_request::isMeshingEnabled() const {
    return m_meshing_enabled;
}
void OAIUpdateNetworkWirelessSettings_request::setMeshingEnabled(const bool &meshing_enabled) {
    m_meshing_enabled = meshing_enabled;
    m_meshing_enabled_isSet = true;
}

bool OAIUpdateNetworkWirelessSettings_request::is_meshing_enabled_Set() const{
    return m_meshing_enabled_isSet;
}

bool OAIUpdateNetworkWirelessSettings_request::is_meshing_enabled_Valid() const{
    return m_meshing_enabled_isValid;
}

QString OAIUpdateNetworkWirelessSettings_request::getUpgradeStrategy() const {
    return m_upgrade_strategy;
}
void OAIUpdateNetworkWirelessSettings_request::setUpgradeStrategy(const QString &upgrade_strategy) {
    m_upgrade_strategy = upgrade_strategy;
    m_upgrade_strategy_isSet = true;
}

bool OAIUpdateNetworkWirelessSettings_request::is_upgrade_strategy_Set() const{
    return m_upgrade_strategy_isSet;
}

bool OAIUpdateNetworkWirelessSettings_request::is_upgrade_strategy_Valid() const{
    return m_upgrade_strategy_isValid;
}

bool OAIUpdateNetworkWirelessSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ipv6_bridge_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_led_lights_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_analytics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meshing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkWirelessSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
