/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworksApi_H
#define OAI_OAINetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBindNetwork_request.h"
#include "OAICombineOrganizationNetworks_request.h"
#include "OAICreateOrganizationNetwork_request.h"
#include "OAIObject.h"
#include "OAIUpdateNetworkSiteToSiteVpn_request.h"
#include "OAIUpdateNetwork_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworksApi : public QObject {
    Q_OBJECT

public:
    OAINetworksApi(const int timeOut = 0);
    ~OAINetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_bind_network_request OAIBindNetwork_request [required]
    */
    virtual void bindNetwork(const QString &network_id, const OAIBindNetwork_request &oai_bind_network_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_combine_organization_networks_request OAICombineOrganizationNetworks_request [required]
    */
    virtual void combineOrganizationNetworks(const QString &organization_id, const OAICombineOrganizationNetworks_request &oai_combine_organization_networks_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_create_organization_network_request OAICreateOrganizationNetwork_request [required]
    */
    virtual void createOrganizationNetwork(const QString &organization_id, const OAICreateOrganizationNetwork_request &oai_create_organization_network_request);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void deleteNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    */
    virtual void getNetworkAirMarshal(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void getNetworkSiteToSiteVpn(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  t0 QString [optional]
    * @param[in]  timespan float [optional]
    * @param[in]  device_type QString [optional]
    */
    virtual void getNetworkTraffic(const QString &network_id, const ::OpenAPI::OptionalParam<QString> &t0 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &timespan = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &device_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  config_template_id QString [optional]
    */
    virtual void getOrganizationNetworks(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &config_template_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void splitNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    */
    virtual void unbindNetwork(const QString &network_id);

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_request OAIUpdateNetwork_request [optional]
    */
    virtual void updateNetwork(const QString &network_id, const ::OpenAPI::OptionalParam<OAIUpdateNetwork_request> &oai_update_network_request = ::OpenAPI::OptionalParam<OAIUpdateNetwork_request>());

    /**
    * @param[in]  network_id QString [required]
    * @param[in]  oai_update_network_site_to_site_vpn_request OAIUpdateNetworkSiteToSiteVpn_request [required]
    */
    virtual void updateNetworkSiteToSiteVpn(const QString &network_id, const OAIUpdateNetworkSiteToSiteVpn_request &oai_update_network_site_to_site_vpn_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bindNetworkCallback(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void createOrganizationNetworkCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkCallback(OAIHttpRequestWorker *worker);
    void getNetworkCallback(OAIHttpRequestWorker *worker);
    void getNetworkAirMarshalCallback(OAIHttpRequestWorker *worker);
    void getNetworkSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);
    void getNetworkTrafficCallback(OAIHttpRequestWorker *worker);
    void getOrganizationNetworksCallback(OAIHttpRequestWorker *worker);
    void splitNetworkCallback(OAIHttpRequestWorker *worker);
    void unbindNetworkCallback(OAIHttpRequestWorker *worker);
    void updateNetworkCallback(OAIHttpRequestWorker *worker);
    void updateNetworkSiteToSiteVpnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bindNetworkSignal();
    void combineOrganizationNetworksSignal(OAIObject summary);
    void createOrganizationNetworkSignal(OAIObject summary);
    void deleteNetworkSignal();
    void getNetworkSignal(OAIObject summary);
    void getNetworkAirMarshalSignal(QList<OAIObject> summary);
    void getNetworkSiteToSiteVpnSignal(OAIObject summary);
    void getNetworkTrafficSignal(QList<OAIObject> summary);
    void getOrganizationNetworksSignal(QList<OAIObject> summary);
    void splitNetworkSignal(OAIObject summary);
    void unbindNetworkSignal();
    void updateNetworkSignal(OAIObject summary);
    void updateNetworkSiteToSiteVpnSignal(OAIObject summary);


    void bindNetworkSignalFull(OAIHttpRequestWorker *worker);
    void combineOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createOrganizationNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteNetworkSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkAirMarshalSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getNetworkSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getNetworkTrafficSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getOrganizationNetworksSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void splitNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void unbindNetworkSignalFull(OAIHttpRequestWorker *worker);
    void updateNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateNetworkSiteToSiteVpnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use bindNetworkSignalError() instead")
    void bindNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalError() instead")
    void combineOrganizationNetworksSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalError() instead")
    void createOrganizationNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalError() instead")
    void deleteNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalError() instead")
    void getNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAirMarshalSignalError() instead")
    void getNetworkAirMarshalSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAirMarshalSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSiteToSiteVpnSignalError() instead")
    void getNetworkSiteToSiteVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSiteToSiteVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalError() instead")
    void getNetworkTrafficSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalError() instead")
    void getOrganizationNetworksSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalError() instead")
    void splitNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalError() instead")
    void unbindNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalError() instead")
    void updateNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSiteToSiteVpnSignalError() instead")
    void updateNetworkSiteToSiteVpnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSiteToSiteVpnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bindNetworkSignalErrorFull() instead")
    void bindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use combineOrganizationNetworksSignalErrorFull() instead")
    void combineOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void combineOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationNetworkSignalErrorFull() instead")
    void createOrganizationNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkSignalErrorFull() instead")
    void deleteNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSignalErrorFull() instead")
    void getNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkAirMarshalSignalErrorFull() instead")
    void getNetworkAirMarshalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkAirMarshalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSiteToSiteVpnSignalErrorFull() instead")
    void getNetworkSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkTrafficSignalErrorFull() instead")
    void getNetworkTrafficSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkTrafficSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationNetworksSignalErrorFull() instead")
    void getOrganizationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitNetworkSignalErrorFull() instead")
    void splitNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbindNetworkSignalErrorFull() instead")
    void unbindNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unbindNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSignalErrorFull() instead")
    void updateNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNetworkSiteToSiteVpnSignalErrorFull() instead")
    void updateNetworkSiteToSiteVpnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNetworkSiteToSiteVpnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
