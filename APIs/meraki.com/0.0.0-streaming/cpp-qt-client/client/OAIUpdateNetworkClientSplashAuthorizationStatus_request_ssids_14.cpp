/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14() {
    this->initializeModel();
}

OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::~OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14() {}

void OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::initializeModel() {

    m_is_authorized_isSet = false;
    m_is_authorized_isValid = false;
}

void OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::fromJsonObject(QJsonObject json) {

    m_is_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_authorized, json[QString("isAuthorized")]);
    m_is_authorized_isSet = !json[QString("isAuthorized")].isNull() && m_is_authorized_isValid;
}

QString OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::asJsonObject() const {
    QJsonObject obj;
    if (m_is_authorized_isSet) {
        obj.insert(QString("isAuthorized"), ::OpenAPI::toJsonValue(m_is_authorized));
    }
    return obj;
}

bool OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::isIsAuthorized() const {
    return m_is_authorized;
}
void OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::setIsAuthorized(const bool &is_authorized) {
    m_is_authorized = is_authorized;
    m_is_authorized_isSet = true;
}

bool OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::is_is_authorized_Set() const{
    return m_is_authorized_isSet;
}

bool OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::is_is_authorized_Valid() const{
    return m_is_authorized_isValid;
}

bool OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkClientSplashAuthorizationStatus_request_ssids_14::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
