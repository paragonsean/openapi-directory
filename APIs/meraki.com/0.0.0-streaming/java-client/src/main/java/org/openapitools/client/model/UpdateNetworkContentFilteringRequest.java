/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkContentFilteringRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkContentFilteringRequest {
  public static final String SERIALIZED_NAME_ALLOWED_URL_PATTERNS = "allowedUrlPatterns";
  @SerializedName(SERIALIZED_NAME_ALLOWED_URL_PATTERNS)
  private List<String> allowedUrlPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_URL_CATEGORIES = "blockedUrlCategories";
  @SerializedName(SERIALIZED_NAME_BLOCKED_URL_CATEGORIES)
  private List<String> blockedUrlCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_URL_PATTERNS = "blockedUrlPatterns";
  @SerializedName(SERIALIZED_NAME_BLOCKED_URL_PATTERNS)
  private List<String> blockedUrlPatterns = new ArrayList<>();

  /**
   * URL category list size which is either &#39;topSites&#39; or &#39;fullList&#39;
   */
  @JsonAdapter(UrlCategoryListSizeEnum.Adapter.class)
  public enum UrlCategoryListSizeEnum {
    FULL_LIST("fullList"),
    
    TOP_SITES("topSites");

    private String value;

    UrlCategoryListSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UrlCategoryListSizeEnum fromValue(String value) {
      for (UrlCategoryListSizeEnum b : UrlCategoryListSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UrlCategoryListSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UrlCategoryListSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UrlCategoryListSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UrlCategoryListSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UrlCategoryListSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_URL_CATEGORY_LIST_SIZE = "urlCategoryListSize";
  @SerializedName(SERIALIZED_NAME_URL_CATEGORY_LIST_SIZE)
  private UrlCategoryListSizeEnum urlCategoryListSize;

  public UpdateNetworkContentFilteringRequest() {
  }

  public UpdateNetworkContentFilteringRequest allowedUrlPatterns(List<String> allowedUrlPatterns) {
    this.allowedUrlPatterns = allowedUrlPatterns;
    return this;
  }

  public UpdateNetworkContentFilteringRequest addAllowedUrlPatternsItem(String allowedUrlPatternsItem) {
    if (this.allowedUrlPatterns == null) {
      this.allowedUrlPatterns = new ArrayList<>();
    }
    this.allowedUrlPatterns.add(allowedUrlPatternsItem);
    return this;
  }

  /**
   * A list of URL patterns that are allowed
   * @return allowedUrlPatterns
   */
  @javax.annotation.Nullable
  public List<String> getAllowedUrlPatterns() {
    return allowedUrlPatterns;
  }

  public void setAllowedUrlPatterns(List<String> allowedUrlPatterns) {
    this.allowedUrlPatterns = allowedUrlPatterns;
  }


  public UpdateNetworkContentFilteringRequest blockedUrlCategories(List<String> blockedUrlCategories) {
    this.blockedUrlCategories = blockedUrlCategories;
    return this;
  }

  public UpdateNetworkContentFilteringRequest addBlockedUrlCategoriesItem(String blockedUrlCategoriesItem) {
    if (this.blockedUrlCategories == null) {
      this.blockedUrlCategories = new ArrayList<>();
    }
    this.blockedUrlCategories.add(blockedUrlCategoriesItem);
    return this;
  }

  /**
   * A list of URL categories to block
   * @return blockedUrlCategories
   */
  @javax.annotation.Nullable
  public List<String> getBlockedUrlCategories() {
    return blockedUrlCategories;
  }

  public void setBlockedUrlCategories(List<String> blockedUrlCategories) {
    this.blockedUrlCategories = blockedUrlCategories;
  }


  public UpdateNetworkContentFilteringRequest blockedUrlPatterns(List<String> blockedUrlPatterns) {
    this.blockedUrlPatterns = blockedUrlPatterns;
    return this;
  }

  public UpdateNetworkContentFilteringRequest addBlockedUrlPatternsItem(String blockedUrlPatternsItem) {
    if (this.blockedUrlPatterns == null) {
      this.blockedUrlPatterns = new ArrayList<>();
    }
    this.blockedUrlPatterns.add(blockedUrlPatternsItem);
    return this;
  }

  /**
   * A list of URL patterns that are blocked
   * @return blockedUrlPatterns
   */
  @javax.annotation.Nullable
  public List<String> getBlockedUrlPatterns() {
    return blockedUrlPatterns;
  }

  public void setBlockedUrlPatterns(List<String> blockedUrlPatterns) {
    this.blockedUrlPatterns = blockedUrlPatterns;
  }


  public UpdateNetworkContentFilteringRequest urlCategoryListSize(UrlCategoryListSizeEnum urlCategoryListSize) {
    this.urlCategoryListSize = urlCategoryListSize;
    return this;
  }

  /**
   * URL category list size which is either &#39;topSites&#39; or &#39;fullList&#39;
   * @return urlCategoryListSize
   */
  @javax.annotation.Nullable
  public UrlCategoryListSizeEnum getUrlCategoryListSize() {
    return urlCategoryListSize;
  }

  public void setUrlCategoryListSize(UrlCategoryListSizeEnum urlCategoryListSize) {
    this.urlCategoryListSize = urlCategoryListSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkContentFilteringRequest updateNetworkContentFilteringRequest = (UpdateNetworkContentFilteringRequest) o;
    return Objects.equals(this.allowedUrlPatterns, updateNetworkContentFilteringRequest.allowedUrlPatterns) &&
        Objects.equals(this.blockedUrlCategories, updateNetworkContentFilteringRequest.blockedUrlCategories) &&
        Objects.equals(this.blockedUrlPatterns, updateNetworkContentFilteringRequest.blockedUrlPatterns) &&
        Objects.equals(this.urlCategoryListSize, updateNetworkContentFilteringRequest.urlCategoryListSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUrlPatterns, blockedUrlCategories, blockedUrlPatterns, urlCategoryListSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkContentFilteringRequest {\n");
    sb.append("    allowedUrlPatterns: ").append(toIndentedString(allowedUrlPatterns)).append("\n");
    sb.append("    blockedUrlCategories: ").append(toIndentedString(blockedUrlCategories)).append("\n");
    sb.append("    blockedUrlPatterns: ").append(toIndentedString(blockedUrlPatterns)).append("\n");
    sb.append("    urlCategoryListSize: ").append(toIndentedString(urlCategoryListSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedUrlPatterns");
    openapiFields.add("blockedUrlCategories");
    openapiFields.add("blockedUrlPatterns");
    openapiFields.add("urlCategoryListSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkContentFilteringRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkContentFilteringRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkContentFilteringRequest is not found in the empty JSON string", UpdateNetworkContentFilteringRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkContentFilteringRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkContentFilteringRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedUrlPatterns") != null && !jsonObj.get("allowedUrlPatterns").isJsonNull() && !jsonObj.get("allowedUrlPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedUrlPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("allowedUrlPatterns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedUrlCategories") != null && !jsonObj.get("blockedUrlCategories").isJsonNull() && !jsonObj.get("blockedUrlCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedUrlCategories` to be an array in the JSON string but got `%s`", jsonObj.get("blockedUrlCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedUrlPatterns") != null && !jsonObj.get("blockedUrlPatterns").isJsonNull() && !jsonObj.get("blockedUrlPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedUrlPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("blockedUrlPatterns").toString()));
      }
      if ((jsonObj.get("urlCategoryListSize") != null && !jsonObj.get("urlCategoryListSize").isJsonNull()) && !jsonObj.get("urlCategoryListSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlCategoryListSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlCategoryListSize").toString()));
      }
      // validate the optional field `urlCategoryListSize`
      if (jsonObj.get("urlCategoryListSize") != null && !jsonObj.get("urlCategoryListSize").isJsonNull()) {
        UrlCategoryListSizeEnum.validateJsonElement(jsonObj.get("urlCategoryListSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkContentFilteringRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkContentFilteringRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkContentFilteringRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkContentFilteringRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkContentFilteringRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkContentFilteringRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkContentFilteringRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkContentFilteringRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkContentFilteringRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkContentFilteringRequest
   */
  public static UpdateNetworkContentFilteringRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkContentFilteringRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkContentFilteringRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

