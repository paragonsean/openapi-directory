/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkWarmSpareSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkWarmSpareSettingsRequest {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SPARE_SERIAL = "spareSerial";
  @SerializedName(SERIALIZED_NAME_SPARE_SERIAL)
  private String spareSerial;

  public static final String SERIALIZED_NAME_UPLINK_MODE = "uplinkMode";
  @SerializedName(SERIALIZED_NAME_UPLINK_MODE)
  private String uplinkMode;

  public static final String SERIALIZED_NAME_VIRTUAL_IP1 = "virtualIp1";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_IP1)
  private String virtualIp1;

  public static final String SERIALIZED_NAME_VIRTUAL_IP2 = "virtualIp2";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_IP2)
  private String virtualIp2;

  public UpdateNetworkWarmSpareSettingsRequest() {
  }

  public UpdateNetworkWarmSpareSettingsRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Enable warm spare
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateNetworkWarmSpareSettingsRequest spareSerial(String spareSerial) {
    this.spareSerial = spareSerial;
    return this;
  }

  /**
   * Serial number of the warm spare appliance
   * @return spareSerial
   */
  @javax.annotation.Nullable
  public String getSpareSerial() {
    return spareSerial;
  }

  public void setSpareSerial(String spareSerial) {
    this.spareSerial = spareSerial;
  }


  public UpdateNetworkWarmSpareSettingsRequest uplinkMode(String uplinkMode) {
    this.uplinkMode = uplinkMode;
    return this;
  }

  /**
   * Uplink mode, either virtual or public
   * @return uplinkMode
   */
  @javax.annotation.Nullable
  public String getUplinkMode() {
    return uplinkMode;
  }

  public void setUplinkMode(String uplinkMode) {
    this.uplinkMode = uplinkMode;
  }


  public UpdateNetworkWarmSpareSettingsRequest virtualIp1(String virtualIp1) {
    this.virtualIp1 = virtualIp1;
    return this;
  }

  /**
   * The WAN 1 shared IP
   * @return virtualIp1
   */
  @javax.annotation.Nullable
  public String getVirtualIp1() {
    return virtualIp1;
  }

  public void setVirtualIp1(String virtualIp1) {
    this.virtualIp1 = virtualIp1;
  }


  public UpdateNetworkWarmSpareSettingsRequest virtualIp2(String virtualIp2) {
    this.virtualIp2 = virtualIp2;
    return this;
  }

  /**
   * The WAN 2 shared IP
   * @return virtualIp2
   */
  @javax.annotation.Nullable
  public String getVirtualIp2() {
    return virtualIp2;
  }

  public void setVirtualIp2(String virtualIp2) {
    this.virtualIp2 = virtualIp2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkWarmSpareSettingsRequest updateNetworkWarmSpareSettingsRequest = (UpdateNetworkWarmSpareSettingsRequest) o;
    return Objects.equals(this.enabled, updateNetworkWarmSpareSettingsRequest.enabled) &&
        Objects.equals(this.spareSerial, updateNetworkWarmSpareSettingsRequest.spareSerial) &&
        Objects.equals(this.uplinkMode, updateNetworkWarmSpareSettingsRequest.uplinkMode) &&
        Objects.equals(this.virtualIp1, updateNetworkWarmSpareSettingsRequest.virtualIp1) &&
        Objects.equals(this.virtualIp2, updateNetworkWarmSpareSettingsRequest.virtualIp2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, spareSerial, uplinkMode, virtualIp1, virtualIp2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkWarmSpareSettingsRequest {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    spareSerial: ").append(toIndentedString(spareSerial)).append("\n");
    sb.append("    uplinkMode: ").append(toIndentedString(uplinkMode)).append("\n");
    sb.append("    virtualIp1: ").append(toIndentedString(virtualIp1)).append("\n");
    sb.append("    virtualIp2: ").append(toIndentedString(virtualIp2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("spareSerial");
    openapiFields.add("uplinkMode");
    openapiFields.add("virtualIp1");
    openapiFields.add("virtualIp2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkWarmSpareSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkWarmSpareSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkWarmSpareSettingsRequest is not found in the empty JSON string", UpdateNetworkWarmSpareSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkWarmSpareSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkWarmSpareSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkWarmSpareSettingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("spareSerial") != null && !jsonObj.get("spareSerial").isJsonNull()) && !jsonObj.get("spareSerial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spareSerial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spareSerial").toString()));
      }
      if ((jsonObj.get("uplinkMode") != null && !jsonObj.get("uplinkMode").isJsonNull()) && !jsonObj.get("uplinkMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uplinkMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uplinkMode").toString()));
      }
      if ((jsonObj.get("virtualIp1") != null && !jsonObj.get("virtualIp1").isJsonNull()) && !jsonObj.get("virtualIp1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualIp1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualIp1").toString()));
      }
      if ((jsonObj.get("virtualIp2") != null && !jsonObj.get("virtualIp2").isJsonNull()) && !jsonObj.get("virtualIp2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualIp2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualIp2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkWarmSpareSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkWarmSpareSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkWarmSpareSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkWarmSpareSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkWarmSpareSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkWarmSpareSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkWarmSpareSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkWarmSpareSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkWarmSpareSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkWarmSpareSettingsRequest
   */
  public static UpdateNetworkWarmSpareSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkWarmSpareSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkWarmSpareSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

