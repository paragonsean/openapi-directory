/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private String access;

  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowedIps";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private List<String> allowedIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAN_IP = "lanIp";
  @SerializedName(SERIALIZED_NAME_LAN_IP)
  private String lanIp;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "localPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private String localPort;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_PUBLIC_PORT = "publicPort";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PORT)
  private String publicPort;

  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner() {
  }

  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner access(String access) {
    this.access = access;
    return this;
  }

  /**
   * &#x60;any&#x60; or &#x60;restricted&#x60;. Specify the right to make inbound connections on the specified ports or port ranges. If &#x60;restricted&#x60;, a list of allowed IPs is mandatory.
   * @return access
   */
  @javax.annotation.Nonnull
  public String getAccess() {
    return access;
  }

  public void setAccess(String access) {
    this.access = access;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner allowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner addAllowedIpsItem(String allowedIpsItem) {
    if (this.allowedIps == null) {
      this.allowedIps = new ArrayList<>();
    }
    this.allowedIps.add(allowedIpsItem);
    return this;
  }

  /**
   * An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
   * @return allowedIps
   */
  @javax.annotation.Nullable
  public List<String> getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner lanIp(String lanIp) {
    this.lanIp = lanIp;
    return this;
  }

  /**
   * The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
   * @return lanIp
   */
  @javax.annotation.Nonnull
  public String getLanIp() {
    return lanIp;
  }

  public void setLanIp(String lanIp) {
    this.lanIp = lanIp;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner localPort(String localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * A port or port ranges that will receive the forwarded traffic from the WAN
   * @return localPort
   */
  @javax.annotation.Nonnull
  public String getLocalPort() {
    return localPort;
  }

  public void setLocalPort(String localPort) {
    this.localPort = localPort;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A descriptive name for the rule
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * TCP or UDP
   * @return protocol
   */
  @javax.annotation.Nonnull
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner publicPort(String publicPort) {
    this.publicPort = publicPort;
    return this;
  }

  /**
   * A port or port ranges that will be forwarded to the host on the LAN
   * @return publicPort
   */
  @javax.annotation.Nonnull
  public String getPublicPort() {
    return publicPort;
  }

  public void setPublicPort(String publicPort) {
    this.publicPort = publicPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner = (UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner) o;
    return Objects.equals(this.access, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.access) &&
        Objects.equals(this.allowedIps, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.allowedIps) &&
        Objects.equals(this.lanIp, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.lanIp) &&
        Objects.equals(this.localPort, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.localPort) &&
        Objects.equals(this.name, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.name) &&
        Objects.equals(this.protocol, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.protocol) &&
        Objects.equals(this.publicPort, updateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.publicPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, allowedIps, lanIp, localPort, name, protocol, publicPort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    lanIp: ").append(toIndentedString(lanIp)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    publicPort: ").append(toIndentedString(publicPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("allowedIps");
    openapiFields.add("lanIp");
    openapiFields.add("localPort");
    openapiFields.add("name");
    openapiFields.add("protocol");
    openapiFields.add("publicPort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("lanIp");
    openapiRequiredFields.add("localPort");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("publicPort");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner is not found in the empty JSON string", UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedIps") != null && !jsonObj.get("allowedIps").isJsonNull() && !jsonObj.get("allowedIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedIps` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIps").toString()));
      }
      if (!jsonObj.get("lanIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lanIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lanIp").toString()));
      }
      if (!jsonObj.get("localPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localPort").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (!jsonObj.get("publicPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicPort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner>() {
           @Override
           public void write(JsonWriter out, UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner
   * @throws IOException if the JSON string is invalid with respect to UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner
   */
  public static UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner.class);
  }

  /**
   * Convert an instance of UpdateDeviceCellularGatewaySettingsPortForwardingRulesRequestRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

