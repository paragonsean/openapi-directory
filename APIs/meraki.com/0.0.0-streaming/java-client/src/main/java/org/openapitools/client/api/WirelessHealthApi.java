/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WirelessHealthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WirelessHealthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WirelessHealthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNetworkClientConnectionStats
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientConnectionStatsCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientConnectionStatsValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientConnectionStats(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientConnectionStats(Async)");
        }

        return getNetworkClientConnectionStatsCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientConnectionStats(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientConnectionStatsWithHttpInfo(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for a given client on this network
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientConnectionStatsWithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientConnectionStatsValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for a given client on this network (asynchronously)
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientConnectionStatsAsync(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientConnectionStatsValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientLatencyStats
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientLatencyStatsCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/{clientId}/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientLatencyStatsValidateBeforeCall(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientLatencyStats(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getNetworkClientLatencyStats(Async)");
        }

        return getNetworkClientLatencyStatsCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkClientLatencyStats(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkClientLatencyStatsWithHttpInfo(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for a given client on this network
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkClientLatencyStatsWithHttpInfo(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientLatencyStatsValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for a given client on this network (asynchronously)
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * @param networkId  (required)
     * @param clientId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientLatencyStatsAsync(String networkId, String clientId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientLatencyStatsValidateBeforeCall(networkId, clientId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsConnectionStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsConnectionStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsConnectionStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsConnectionStats(Async)");
        }

        return getNetworkClientsConnectionStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsConnectionStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsConnectionStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsConnectionStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for this network, grouped by clients (asynchronously)
     * Aggregated connectivity info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsConnectionStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkClientsLatencyStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsLatencyStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/clients/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkClientsLatencyStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkClientsLatencyStats(Async)");
        }

        return getNetworkClientsLatencyStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkClientsLatencyStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkClientsLatencyStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for this network, grouped by clients
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkClientsLatencyStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkClientsLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for this network, grouped by clients (asynchronously)
     * Aggregated latency info for this network, grouped by clients
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkClientsLatencyStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkClientsLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkConnectionStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkConnectionStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkConnectionStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkConnectionStats(Async)");
        }

        return getNetworkConnectionStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for this network
     * Aggregated connectivity info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkConnectionStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkConnectionStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for this network
     * Aggregated connectivity info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkConnectionStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for this network (asynchronously)
     * Aggregated connectivity info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkConnectionStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDeviceConnectionStats
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDeviceConnectionStatsCall(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/{serial}/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDeviceConnectionStatsValidateBeforeCall(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDeviceConnectionStats(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getNetworkDeviceConnectionStats(Async)");
        }

        return getNetworkDeviceConnectionStatsCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for a given AP on this network
     * Aggregated connectivity info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkDeviceConnectionStats(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkDeviceConnectionStatsWithHttpInfo(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for a given AP on this network
     * Aggregated connectivity info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkDeviceConnectionStatsWithHttpInfo(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDeviceConnectionStatsValidateBeforeCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for a given AP on this network (asynchronously)
     * Aggregated connectivity info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDeviceConnectionStatsAsync(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDeviceConnectionStatsValidateBeforeCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDeviceLatencyStats
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDeviceLatencyStatsCall(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/{serial}/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDeviceLatencyStatsValidateBeforeCall(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDeviceLatencyStats(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling getNetworkDeviceLatencyStats(Async)");
        }

        return getNetworkDeviceLatencyStatsCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for a given AP on this network
     * Aggregated latency info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkDeviceLatencyStats(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkDeviceLatencyStatsWithHttpInfo(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for a given AP on this network
     * Aggregated latency info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkDeviceLatencyStatsWithHttpInfo(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDeviceLatencyStatsValidateBeforeCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for a given AP on this network (asynchronously)
     * Aggregated latency info for a given AP on this network
     * @param networkId  (required)
     * @param serial  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDeviceLatencyStatsAsync(String networkId, String serial, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDeviceLatencyStatsValidateBeforeCall(networkId, serial, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDevicesConnectionStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesConnectionStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/connectionStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDevicesConnectionStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDevicesConnectionStats(Async)");
        }

        return getNetworkDevicesConnectionStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);

    }

    /**
     * Aggregated connectivity info for this network, grouped by node
     * Aggregated connectivity info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkDevicesConnectionStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkDevicesConnectionStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag);
        return localVarResp.getData();
    }

    /**
     * Aggregated connectivity info for this network, grouped by node
     * Aggregated connectivity info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkDevicesConnectionStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDevicesConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated connectivity info for this network, grouped by node (asynchronously)
     * Aggregated connectivity info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesConnectionStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDevicesConnectionStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkDevicesLatencyStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesLatencyStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/devices/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkDevicesLatencyStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkDevicesLatencyStats(Async)");
        }

        return getNetworkDevicesLatencyStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for this network, grouped by node
     * Aggregated latency info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkDevicesLatencyStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkDevicesLatencyStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for this network, grouped by node
     * Aggregated latency info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkDevicesLatencyStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkDevicesLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for this network, grouped by node (asynchronously)
     * Aggregated latency info for this network, grouped by node
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkDevicesLatencyStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkDevicesLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkFailedConnections
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param serial Filter by AP (optional)
     * @param clientId Filter by client MAC (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFailedConnectionsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String serial, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/failedConnections"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkFailedConnectionsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String serial, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkFailedConnections(Async)");
        }

        return getNetworkFailedConnectionsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId, _callback);

    }

    /**
     * List of all failed client connection events on this network in a given time range
     * List of all failed client connection events on this network in a given time range
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param serial Filter by AP (optional)
     * @param clientId Filter by client MAC (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkFailedConnections(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String serial, String clientId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkFailedConnectionsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId);
        return localVarResp.getData();
    }

    /**
     * List of all failed client connection events on this network in a given time range
     * List of all failed client connection events on this network in a given time range
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param serial Filter by AP (optional)
     * @param clientId Filter by client MAC (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkFailedConnectionsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String serial, String clientId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkFailedConnectionsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all failed client connection events on this network in a given time range (asynchronously)
     * List of all failed client connection events on this network in a given time range
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param serial Filter by AP (optional)
     * @param clientId Filter by client MAC (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkFailedConnectionsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String serial, String clientId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkFailedConnectionsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, serial, clientId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkLatencyStats
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkLatencyStatsCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/latencyStats"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (t0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t0", t0));
        }

        if (t1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t1", t1));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (band != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band", band));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (apTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apTag", apTag));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkLatencyStatsValidateBeforeCall(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkLatencyStats(Async)");
        }

        return getNetworkLatencyStatsCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);

    }

    /**
     * Aggregated latency info for this network
     * Aggregated latency info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkLatencyStats(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkLatencyStatsWithHttpInfo(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields);
        return localVarResp.getData();
    }

    /**
     * Aggregated latency info for this network
     * Aggregated latency info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkLatencyStatsWithHttpInfo(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields) throws ApiException {
        okhttp3.Call localVarCall = getNetworkLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregated latency info for this network (asynchronously)
     * Aggregated latency info for this network
     * @param networkId  (required)
     * @param t0 The beginning of the timespan for the data. The maximum lookback period is 180 days from today. (optional)
     * @param t1 The end of the timespan for the data. t1 can be a maximum of 7 days after t0. (optional)
     * @param timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. (optional)
     * @param band Filter results by band (either &#39;2.4&#39; or &#39;5&#39;). Note that data prior to February 2020 will not have band information. (optional)
     * @param ssid Filter results by SSID (optional)
     * @param vlan Filter results by VLAN (optional)
     * @param apTag Filter results by AP Tag (optional)
     * @param fields Partial selection: If present, this call will return only the selected fields of [\&quot;rawDistribution\&quot;, \&quot;avg\&quot;]. All fields will be returned by default. Selected fields must be entered as a comma separated string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkLatencyStatsAsync(String networkId, String t0, String t1, Float timespan, String band, Integer ssid, Integer vlan, String apTag, String fields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkLatencyStatsValidateBeforeCall(networkId, t0, t1, timespan, band, ssid, vlan, apTag, fields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
