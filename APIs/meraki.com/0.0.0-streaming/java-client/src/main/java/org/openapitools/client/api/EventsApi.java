/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNetworkEvents
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsCall(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (includedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "includedEventTypes", includedEventTypes));
        }

        if (excludedEventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "excludedEventTypes", excludedEventTypes));
        }

        if (deviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceMac", deviceMac));
        }

        if (deviceSerial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceSerial", deviceSerial));
        }

        if (deviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceName", deviceName));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientIp", clientIp));
        }

        if (clientMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientMac", clientMac));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientName", clientName));
        }

        if (smDeviceMac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceMac", smDeviceMac));
        }

        if (smDeviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smDeviceName", smDeviceName));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingAfter", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endingBefore", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEventsValidateBeforeCall(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEvents(Async)");
        }

        return getNetworkEventsCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);

    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public Object getNetworkEvents(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkEventsWithHttpInfo(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore);
        return localVarResp.getData();
    }

    /**
     * List the events for the network
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkEventsWithHttpInfo(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEventsValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the events for the network (asynchronously)
     * List the events for the network
     * @param networkId  (required)
     * @param productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and environmental (optional)
     * @param includedEventTypes A list of event types. The returned events will be filtered to only include events with these types. (optional)
     * @param excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types. (optional)
     * @param deviceMac The MAC address of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceSerial The serial of the Meraki device which the list of events will be filtered with (optional)
     * @param deviceName The name of the Meraki device which the list of events will be filtered with (optional)
     * @param clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks. (optional)
     * @param clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks. (optional)
     * @param clientName The name, or partial name, of the client which the list of events will be filtered with (optional)
     * @param smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with (optional)
     * @param smDeviceName The name of the Systems Manager device which the list of events will be filtered with (optional)
     * @param perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10. (optional)
     * @param startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * Link - A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsAsync(String networkId, String productType, List<String> includedEventTypes, List<String> excludedEventTypes, String deviceMac, String deviceSerial, String deviceName, String clientIp, String clientMac, String clientName, String smDeviceMac, String smDeviceName, Integer perPage, String startingAfter, String endingBefore, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEventsValidateBeforeCall(networkId, productType, includedEventTypes, excludedEventTypes, deviceMac, deviceSerial, deviceName, clientIp, clientMac, clientName, smDeviceMac, smDeviceName, perPage, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkEventsEventTypes
     * @param networkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypesCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{networkId}/events/eventTypes"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "meraki_api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkEventsEventTypesValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes(Async)");
        }

        return getNetworkEventsEventTypesCall(networkId, _callback);

    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getNetworkEventsEventTypes(String networkId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getNetworkEventsEventTypesWithHttpInfo(networkId);
        return localVarResp.getData();
    }

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param networkId  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getNetworkEventsEventTypesWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getNetworkEventsEventTypesValidateBeforeCall(networkId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the event type to human-readable description (asynchronously)
     * List the event type to human-readable description
     * @param networkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkEventsEventTypesAsync(String networkId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkEventsEventTypesValidateBeforeCall(networkId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
