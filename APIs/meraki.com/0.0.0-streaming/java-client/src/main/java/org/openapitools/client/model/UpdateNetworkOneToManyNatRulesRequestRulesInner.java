/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkOneToManyNatRulesRequestRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkOneToManyNatRulesRequestRulesInner {
  public static final String SERIALIZED_NAME_PORT_RULES = "portRules";
  @SerializedName(SERIALIZED_NAME_PORT_RULES)
  private List<UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner> portRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP)
  private String publicIp;

  /**
   * The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
   */
  @JsonAdapter(UplinkEnum.Adapter.class)
  public enum UplinkEnum {
    INTERNET1("internet1"),
    
    INTERNET2("internet2");

    private String value;

    UplinkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UplinkEnum fromValue(String value) {
      for (UplinkEnum b : UplinkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UplinkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UplinkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UplinkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UplinkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UplinkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPLINK = "uplink";
  @SerializedName(SERIALIZED_NAME_UPLINK)
  private UplinkEnum uplink;

  public UpdateNetworkOneToManyNatRulesRequestRulesInner() {
  }

  public UpdateNetworkOneToManyNatRulesRequestRulesInner portRules(List<UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner> portRules) {
    this.portRules = portRules;
    return this;
  }

  public UpdateNetworkOneToManyNatRulesRequestRulesInner addPortRulesItem(UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner portRulesItem) {
    if (this.portRules == null) {
      this.portRules = new ArrayList<>();
    }
    this.portRules.add(portRulesItem);
    return this;
  }

  /**
   * An array of associated forwarding rules
   * @return portRules
   */
  @javax.annotation.Nonnull
  public List<UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner> getPortRules() {
    return portRules;
  }

  public void setPortRules(List<UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner> portRules) {
    this.portRules = portRules;
  }


  public UpdateNetworkOneToManyNatRulesRequestRulesInner publicIp(String publicIp) {
    this.publicIp = publicIp;
    return this;
  }

  /**
   * The IP address that will be used to access the internal resource from the WAN
   * @return publicIp
   */
  @javax.annotation.Nonnull
  public String getPublicIp() {
    return publicIp;
  }

  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }


  public UpdateNetworkOneToManyNatRulesRequestRulesInner uplink(UplinkEnum uplink) {
    this.uplink = uplink;
    return this;
  }

  /**
   * The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
   * @return uplink
   */
  @javax.annotation.Nonnull
  public UplinkEnum getUplink() {
    return uplink;
  }

  public void setUplink(UplinkEnum uplink) {
    this.uplink = uplink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkOneToManyNatRulesRequestRulesInner updateNetworkOneToManyNatRulesRequestRulesInner = (UpdateNetworkOneToManyNatRulesRequestRulesInner) o;
    return Objects.equals(this.portRules, updateNetworkOneToManyNatRulesRequestRulesInner.portRules) &&
        Objects.equals(this.publicIp, updateNetworkOneToManyNatRulesRequestRulesInner.publicIp) &&
        Objects.equals(this.uplink, updateNetworkOneToManyNatRulesRequestRulesInner.uplink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portRules, publicIp, uplink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkOneToManyNatRulesRequestRulesInner {\n");
    sb.append("    portRules: ").append(toIndentedString(portRules)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    uplink: ").append(toIndentedString(uplink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portRules");
    openapiFields.add("publicIp");
    openapiFields.add("uplink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("portRules");
    openapiRequiredFields.add("publicIp");
    openapiRequiredFields.add("uplink");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkOneToManyNatRulesRequestRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkOneToManyNatRulesRequestRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkOneToManyNatRulesRequestRulesInner is not found in the empty JSON string", UpdateNetworkOneToManyNatRulesRequestRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkOneToManyNatRulesRequestRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkOneToManyNatRulesRequestRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkOneToManyNatRulesRequestRulesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("portRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `portRules` to be an array in the JSON string but got `%s`", jsonObj.get("portRules").toString()));
      }

      JsonArray jsonArrayportRules = jsonObj.getAsJsonArray("portRules");
      // validate the required field `portRules` (array)
      for (int i = 0; i < jsonArrayportRules.size(); i++) {
        UpdateNetworkOneToManyNatRulesRequestRulesInnerPortRulesInner.validateJsonElement(jsonArrayportRules.get(i));
      };
      if (!jsonObj.get("publicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIp").toString()));
      }
      if (!jsonObj.get("uplink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uplink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uplink").toString()));
      }
      // validate the required field `uplink`
      UplinkEnum.validateJsonElement(jsonObj.get("uplink"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkOneToManyNatRulesRequestRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkOneToManyNatRulesRequestRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkOneToManyNatRulesRequestRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkOneToManyNatRulesRequestRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkOneToManyNatRulesRequestRulesInner>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkOneToManyNatRulesRequestRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkOneToManyNatRulesRequestRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkOneToManyNatRulesRequestRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkOneToManyNatRulesRequestRulesInner
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkOneToManyNatRulesRequestRulesInner
   */
  public static UpdateNetworkOneToManyNatRulesRequestRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkOneToManyNatRulesRequestRulesInner.class);
  }

  /**
   * Convert an instance of UpdateNetworkOneToManyNatRulesRequestRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

