/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkDeviceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkDeviceRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_FLOOR_PLAN_ID = "floorPlanId";
  @SerializedName(SERIALIZED_NAME_FLOOR_PLAN_ID)
  private String floorPlanId;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Float lat;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Float lng;

  public static final String SERIALIZED_NAME_MOVE_MAP_MARKER = "moveMapMarker";
  @SerializedName(SERIALIZED_NAME_MOVE_MAP_MARKER)
  private Boolean moveMapMarker;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SWITCH_PROFILE_ID = "switchProfileId";
  @SerializedName(SERIALIZED_NAME_SWITCH_PROFILE_ID)
  private String switchProfileId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public UpdateNetworkDeviceRequest() {
  }

  public UpdateNetworkDeviceRequest address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The address of a device
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public UpdateNetworkDeviceRequest floorPlanId(String floorPlanId) {
    this.floorPlanId = floorPlanId;
    return this;
  }

  /**
   * The floor plan to associate to this device. null disassociates the device from the floorplan.
   * @return floorPlanId
   */
  @javax.annotation.Nullable
  public String getFloorPlanId() {
    return floorPlanId;
  }

  public void setFloorPlanId(String floorPlanId) {
    this.floorPlanId = floorPlanId;
  }


  public UpdateNetworkDeviceRequest lat(Float lat) {
    this.lat = lat;
    return this;
  }

  /**
   * The latitude of a device
   * @return lat
   */
  @javax.annotation.Nullable
  public Float getLat() {
    return lat;
  }

  public void setLat(Float lat) {
    this.lat = lat;
  }


  public UpdateNetworkDeviceRequest lng(Float lng) {
    this.lng = lng;
    return this;
  }

  /**
   * The longitude of a device
   * @return lng
   */
  @javax.annotation.Nullable
  public Float getLng() {
    return lng;
  }

  public void setLng(Float lng) {
    this.lng = lng;
  }


  public UpdateNetworkDeviceRequest moveMapMarker(Boolean moveMapMarker) {
    this.moveMapMarker = moveMapMarker;
    return this;
  }

  /**
   * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
   * @return moveMapMarker
   */
  @javax.annotation.Nullable
  public Boolean getMoveMapMarker() {
    return moveMapMarker;
  }

  public void setMoveMapMarker(Boolean moveMapMarker) {
    this.moveMapMarker = moveMapMarker;
  }


  public UpdateNetworkDeviceRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of a device
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNetworkDeviceRequest notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes for the device. String. Limited to 255 characters.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public UpdateNetworkDeviceRequest switchProfileId(String switchProfileId) {
    this.switchProfileId = switchProfileId;
    return this;
  }

  /**
   * The ID of a switch profile to bind to the device (for available switch profiles, see the &#39;Switch Profiles&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
   * @return switchProfileId
   */
  @javax.annotation.Nullable
  public String getSwitchProfileId() {
    return switchProfileId;
  }

  public void setSwitchProfileId(String switchProfileId) {
    this.switchProfileId = switchProfileId;
  }


  public UpdateNetworkDeviceRequest tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The tags of a device
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkDeviceRequest updateNetworkDeviceRequest = (UpdateNetworkDeviceRequest) o;
    return Objects.equals(this.address, updateNetworkDeviceRequest.address) &&
        Objects.equals(this.floorPlanId, updateNetworkDeviceRequest.floorPlanId) &&
        Objects.equals(this.lat, updateNetworkDeviceRequest.lat) &&
        Objects.equals(this.lng, updateNetworkDeviceRequest.lng) &&
        Objects.equals(this.moveMapMarker, updateNetworkDeviceRequest.moveMapMarker) &&
        Objects.equals(this.name, updateNetworkDeviceRequest.name) &&
        Objects.equals(this.notes, updateNetworkDeviceRequest.notes) &&
        Objects.equals(this.switchProfileId, updateNetworkDeviceRequest.switchProfileId) &&
        Objects.equals(this.tags, updateNetworkDeviceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, floorPlanId, lat, lng, moveMapMarker, name, notes, switchProfileId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkDeviceRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    floorPlanId: ").append(toIndentedString(floorPlanId)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    moveMapMarker: ").append(toIndentedString(moveMapMarker)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    switchProfileId: ").append(toIndentedString(switchProfileId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("floorPlanId");
    openapiFields.add("lat");
    openapiFields.add("lng");
    openapiFields.add("moveMapMarker");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("switchProfileId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkDeviceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkDeviceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkDeviceRequest is not found in the empty JSON string", UpdateNetworkDeviceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkDeviceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkDeviceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("floorPlanId") != null && !jsonObj.get("floorPlanId").isJsonNull()) && !jsonObj.get("floorPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorPlanId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("switchProfileId") != null && !jsonObj.get("switchProfileId").isJsonNull()) && !jsonObj.get("switchProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchProfileId").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkDeviceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkDeviceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkDeviceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkDeviceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkDeviceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkDeviceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkDeviceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkDeviceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkDeviceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkDeviceRequest
   */
  public static UpdateNetworkDeviceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkDeviceRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkDeviceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

