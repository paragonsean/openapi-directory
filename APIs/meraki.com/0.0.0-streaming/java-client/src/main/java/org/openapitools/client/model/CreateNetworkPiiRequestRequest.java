/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkPiiRequestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkPiiRequestRequest {
  public static final String SERIALIZED_NAME_DATASETS = "datasets";
  @SerializedName(SERIALIZED_NAME_DATASETS)
  private List<String> datasets = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_SM_DEVICE_ID = "smDeviceId";
  @SerializedName(SERIALIZED_NAME_SM_DEVICE_ID)
  private String smDeviceId;

  public static final String SERIALIZED_NAME_SM_USER_ID = "smUserId";
  @SerializedName(SERIALIZED_NAME_SM_USER_ID)
  private String smUserId;

  /**
   * One of \&quot;delete\&quot; or \&quot;restrict processing\&quot;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DELETE("delete"),
    
    RESTRICT_PROCESSING("restrict processing");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public CreateNetworkPiiRequestRequest() {
  }

  public CreateNetworkPiiRequestRequest datasets(List<String> datasets) {
    this.datasets = datasets;
    return this;
  }

  public CreateNetworkPiiRequestRequest addDatasetsItem(String datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * The datasets related to the provided key that should be deleted. Only applies to \&quot;delete\&quot; requests. The value \&quot;all\&quot; will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)
   * @return datasets
   */
  @javax.annotation.Nullable
  public List<String> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<String> datasets) {
    this.datasets = datasets;
  }


  public CreateNetworkPiiRequestRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of a network user account. Only applies to \&quot;delete\&quot; requests.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreateNetworkPiiRequestRequest mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The MAC of a network client device. Applies to both \&quot;restrict processing\&quot; and \&quot;delete\&quot; requests.
   * @return mac
   */
  @javax.annotation.Nullable
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }


  public CreateNetworkPiiRequestRequest smDeviceId(String smDeviceId) {
    this.smDeviceId = smDeviceId;
    return this;
  }

  /**
   * The sm_device_id of a Systems Manager device. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager device. Must include \&quot;device\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the device.
   * @return smDeviceId
   */
  @javax.annotation.Nullable
  public String getSmDeviceId() {
    return smDeviceId;
  }

  public void setSmDeviceId(String smDeviceId) {
    this.smDeviceId = smDeviceId;
  }


  public CreateNetworkPiiRequestRequest smUserId(String smUserId) {
    this.smUserId = smUserId;
    return this;
  }

  /**
   * The sm_user_id of a Systems Manager user. The only way to \&quot;restrict processing\&quot; or \&quot;delete\&quot; a Systems Manager user. Must include \&quot;user\&quot; in the dataset for a \&quot;delete\&quot; request to destroy the user.
   * @return smUserId
   */
  @javax.annotation.Nullable
  public String getSmUserId() {
    return smUserId;
  }

  public void setSmUserId(String smUserId) {
    this.smUserId = smUserId;
  }


  public CreateNetworkPiiRequestRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * One of \&quot;delete\&quot; or \&quot;restrict processing\&quot;
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CreateNetworkPiiRequestRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of a network log in. Only applies to \&quot;delete\&quot; requests.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = (CreateNetworkPiiRequestRequest) o;
    return Objects.equals(this.datasets, createNetworkPiiRequestRequest.datasets) &&
        Objects.equals(this.email, createNetworkPiiRequestRequest.email) &&
        Objects.equals(this.mac, createNetworkPiiRequestRequest.mac) &&
        Objects.equals(this.smDeviceId, createNetworkPiiRequestRequest.smDeviceId) &&
        Objects.equals(this.smUserId, createNetworkPiiRequestRequest.smUserId) &&
        Objects.equals(this.type, createNetworkPiiRequestRequest.type) &&
        Objects.equals(this.username, createNetworkPiiRequestRequest.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasets, email, mac, smDeviceId, smUserId, type, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkPiiRequestRequest {\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    smDeviceId: ").append(toIndentedString(smDeviceId)).append("\n");
    sb.append("    smUserId: ").append(toIndentedString(smUserId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasets");
    openapiFields.add("email");
    openapiFields.add("mac");
    openapiFields.add("smDeviceId");
    openapiFields.add("smUserId");
    openapiFields.add("type");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkPiiRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkPiiRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkPiiRequestRequest is not found in the empty JSON string", CreateNetworkPiiRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkPiiRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkPiiRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("datasets") != null && !jsonObj.get("datasets").isJsonNull() && !jsonObj.get("datasets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasets` to be an array in the JSON string but got `%s`", jsonObj.get("datasets").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("smDeviceId") != null && !jsonObj.get("smDeviceId").isJsonNull()) && !jsonObj.get("smDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smDeviceId").toString()));
      }
      if ((jsonObj.get("smUserId") != null && !jsonObj.get("smUserId").isJsonNull()) && !jsonObj.get("smUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smUserId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkPiiRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkPiiRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkPiiRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkPiiRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkPiiRequestRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkPiiRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkPiiRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkPiiRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkPiiRequestRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkPiiRequestRequest
   */
  public static CreateNetworkPiiRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkPiiRequestRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkPiiRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

