/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOrganizationAdminRequestNetworksInner;
import org.openapitools.client.model.CreateOrganizationAdminRequestTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOrganizationAdminRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:53.186925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateOrganizationAdminRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<CreateOrganizationAdminRequestNetworksInner> networks = new ArrayList<>();

  /**
   * The privilege of the dashboard administrator on the organization. Can be one of &#39;full&#39;, &#39;read-only&#39;, &#39;enterprise&#39; or &#39;none&#39;
   */
  @JsonAdapter(OrgAccessEnum.Adapter.class)
  public enum OrgAccessEnum {
    ENTERPRISE("enterprise"),
    
    FULL("full"),
    
    NONE("none"),
    
    READ_ONLY("read-only");

    private String value;

    OrgAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrgAccessEnum fromValue(String value) {
      for (OrgAccessEnum b : OrgAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrgAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrgAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrgAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrgAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrgAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORG_ACCESS = "orgAccess";
  @SerializedName(SERIALIZED_NAME_ORG_ACCESS)
  private OrgAccessEnum orgAccess;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<CreateOrganizationAdminRequestTagsInner> tags = new ArrayList<>();

  public UpdateOrganizationAdminRequest() {
  }

  public UpdateOrganizationAdminRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the dashboard administrator
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateOrganizationAdminRequest networks(List<CreateOrganizationAdminRequestNetworksInner> networks) {
    this.networks = networks;
    return this;
  }

  public UpdateOrganizationAdminRequest addNetworksItem(CreateOrganizationAdminRequestNetworksInner networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * The list of networks that the dashboard administrator has privileges on
   * @return networks
   */
  @javax.annotation.Nullable
  public List<CreateOrganizationAdminRequestNetworksInner> getNetworks() {
    return networks;
  }

  public void setNetworks(List<CreateOrganizationAdminRequestNetworksInner> networks) {
    this.networks = networks;
  }


  public UpdateOrganizationAdminRequest orgAccess(OrgAccessEnum orgAccess) {
    this.orgAccess = orgAccess;
    return this;
  }

  /**
   * The privilege of the dashboard administrator on the organization. Can be one of &#39;full&#39;, &#39;read-only&#39;, &#39;enterprise&#39; or &#39;none&#39;
   * @return orgAccess
   */
  @javax.annotation.Nullable
  public OrgAccessEnum getOrgAccess() {
    return orgAccess;
  }

  public void setOrgAccess(OrgAccessEnum orgAccess) {
    this.orgAccess = orgAccess;
  }


  public UpdateOrganizationAdminRequest tags(List<CreateOrganizationAdminRequestTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateOrganizationAdminRequest addTagsItem(CreateOrganizationAdminRequestTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The list of tags that the dashboard administrator has privileges on
   * @return tags
   */
  @javax.annotation.Nullable
  public List<CreateOrganizationAdminRequestTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<CreateOrganizationAdminRequestTagsInner> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOrganizationAdminRequest updateOrganizationAdminRequest = (UpdateOrganizationAdminRequest) o;
    return Objects.equals(this.name, updateOrganizationAdminRequest.name) &&
        Objects.equals(this.networks, updateOrganizationAdminRequest.networks) &&
        Objects.equals(this.orgAccess, updateOrganizationAdminRequest.orgAccess) &&
        Objects.equals(this.tags, updateOrganizationAdminRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, networks, orgAccess, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOrganizationAdminRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    orgAccess: ").append(toIndentedString(orgAccess)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("networks");
    openapiFields.add("orgAccess");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOrganizationAdminRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOrganizationAdminRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOrganizationAdminRequest is not found in the empty JSON string", UpdateOrganizationAdminRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOrganizationAdminRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOrganizationAdminRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            CreateOrganizationAdminRequestNetworksInner.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("orgAccess") != null && !jsonObj.get("orgAccess").isJsonNull()) && !jsonObj.get("orgAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgAccess").toString()));
      }
      // validate the optional field `orgAccess`
      if (jsonObj.get("orgAccess") != null && !jsonObj.get("orgAccess").isJsonNull()) {
        OrgAccessEnum.validateJsonElement(jsonObj.get("orgAccess"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            CreateOrganizationAdminRequestTagsInner.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOrganizationAdminRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOrganizationAdminRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOrganizationAdminRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOrganizationAdminRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOrganizationAdminRequest>() {
           @Override
           public void write(JsonWriter out, UpdateOrganizationAdminRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOrganizationAdminRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOrganizationAdminRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOrganizationAdminRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateOrganizationAdminRequest
   */
  public static UpdateOrganizationAdminRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOrganizationAdminRequest.class);
  }

  /**
   * Convert an instance of UpdateOrganizationAdminRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

