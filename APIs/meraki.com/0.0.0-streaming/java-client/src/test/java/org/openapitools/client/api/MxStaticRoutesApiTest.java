/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkStaticRouteRequest;
import org.openapitools.client.model.UpdateNetworkStaticRouteRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MxStaticRoutesApi
 */
@Disabled
public class MxStaticRoutesApiTest {

    private final MxStaticRoutesApi api = new MxStaticRoutesApi();

    /**
     * Add a static route for an MX or teleworker network
     *
     * Add a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkStaticRouteTest() throws ApiException {
        String networkId = null;
        CreateNetworkStaticRouteRequest createNetworkStaticRouteRequest = null;
        Object response = api.createNetworkStaticRoute(networkId, createNetworkStaticRouteRequest);
        // TODO: test validations
    }

    /**
     * Delete a static route from an MX or teleworker network
     *
     * Delete a static route from an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        api.deleteNetworkStaticRoute(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * Return a static route for an MX or teleworker network
     *
     * Return a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        Object response = api.getNetworkStaticRoute(networkId, staticRouteId);
        // TODO: test validations
    }

    /**
     * List the static routes for an MX or teleworker network
     *
     * List the static routes for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkStaticRoutesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkStaticRoutes(networkId);
        // TODO: test validations
    }

    /**
     * Update a static route for an MX or teleworker network
     *
     * Update a static route for an MX or teleworker network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkStaticRouteTest() throws ApiException {
        String networkId = null;
        String staticRouteId = null;
        UpdateNetworkStaticRouteRequest updateNetworkStaticRouteRequest = null;
        Object response = api.updateNetworkStaticRoute(networkId, staticRouteId, updateNetworkStaticRouteRequest);
        // TODO: test validations
    }

}
