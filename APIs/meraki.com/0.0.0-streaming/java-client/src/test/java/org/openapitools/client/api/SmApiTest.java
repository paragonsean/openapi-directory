/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateNetworkSmBypassActivationLockAttemptRequest;
import org.openapitools.client.model.LockNetworkSmDevicesRequest;
import org.openapitools.client.model.UpdateNetworkSmDeviceFieldsRequest;
import org.openapitools.client.model.UpdateNetworkSmDevicesTagsRequest;
import org.openapitools.client.model.WipeNetworkSmDeviceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmApi
 */
@Disabled
public class SmApiTest {

    private final SmApi api = new SmApi();

    /**
     * Bypass activation lock attempt
     *
     * Bypass activation lock attempt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSmBypassActivationLockAttemptTest() throws ApiException {
        String networkId = null;
        CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest = null;
        Object response = api.createNetworkSmBypassActivationLockAttempt(networkId, createNetworkSmBypassActivationLockAttemptRequest);
        // TODO: test validations
    }

    /**
     * Bypass activation lock attempt status
     *
     * Bypass activation lock attempt status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmBypassActivationLockAttemptTest() throws ApiException {
        String networkId = null;
        String attemptId = null;
        Object response = api.getNetworkSmBypassActivationLockAttempt(networkId, attemptId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily cellular data usage history
     *
     * Return the client&#39;s daily cellular data usage history. Usage data is in kilobytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmCellularUsageHistoryTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmCellularUsageHistory(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the certs on a device
     *
     * List the certs on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmCertsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmCerts(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmConnectivityTest() throws ApiException {
        String networkId = null;
        String id = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkSmConnectivity(networkId, id, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDesktopLogsTest() throws ApiException {
        String networkId = null;
        String id = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkSmDesktopLogs(networkId, id, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return historical records of commands sent to Systems Manager devices
     *
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceCommandLogsTest() throws ApiException {
        String networkId = null;
        String id = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkSmDeviceCommandLogs(networkId, id, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Get the profiles associated with a device
     *
     * Get the profiles associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDeviceProfilesTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmDeviceProfiles(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * List the devices enrolled in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        String fields = null;
        String wifiMacs = null;
        String serials = null;
        String ids = null;
        String scope = null;
        Integer batchSize = null;
        String batchToken = null;
        Object response = api.getNetworkSmDevices(networkId, fields, wifiMacs, serials, ids, scope, batchSize, batchToken);
        // TODO: test validations
    }

    /**
     * List the network adapters of a device
     *
     * List the network adapters of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmNetworkAdaptersTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmNetworkAdapters(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmPerformanceHistoryTest() throws ApiException {
        String networkId = null;
        String id = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkSmPerformanceHistory(networkId, id, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * List all the profiles in the network
     *
     * List all the profiles in the network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmProfilesTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSmProfiles(networkId);
        // TODO: test validations
    }

    /**
     * List the restrictions on a device
     *
     * List the restrictions on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmRestrictionsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmRestrictions(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * List the security centers on a device
     *
     * List the security centers on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmSecurityCentersTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmSecurityCenters(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a device
     *
     * Get a list of softwares associated with a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmSoftwaresTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmSoftwares(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Get the profiles associated with a user
     *
     * Get the profiles associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserDeviceProfilesTest() throws ApiException {
        String networkId = null;
        String userId = null;
        List<Object> response = api.getNetworkSmUserDeviceProfiles(networkId, userId);
        // TODO: test validations
    }

    /**
     * Get a list of softwares associated with a user
     *
     * Get a list of softwares associated with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUserSoftwaresTest() throws ApiException {
        String networkId = null;
        String userId = null;
        List<Object> response = api.getNetworkSmUserSoftwares(networkId, userId);
        // TODO: test validations
    }

    /**
     * List the owners in an SM network with various specified fields and filters
     *
     * List the owners in an SM network with various specified fields and filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmUsersTest() throws ApiException {
        String networkId = null;
        String ids = null;
        String usernames = null;
        String emails = null;
        String scope = null;
        List<Object> response = api.getNetworkSmUsers(networkId, ids, usernames, emails, scope);
        // TODO: test validations
    }

    /**
     * List the saved SSID names on a device
     *
     * List the saved SSID names on a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSmWlanListsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        List<Object> response = api.getNetworkSmWlanLists(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Lock a set of devices
     *
     * Lock a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockNetworkSmDevicesTest() throws ApiException {
        String networkId = null;
        LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = null;
        Object response = api.lockNetworkSmDevices(networkId, lockNetworkSmDevicesRequest);
        // TODO: test validations
    }

    /**
     * Refresh the details of a device
     *
     * Refresh the details of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshNetworkSmDeviceDetailsTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        api.refreshNetworkSmDeviceDetails(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Unenroll a device
     *
     * Unenroll a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unenrollNetworkSmDeviceTest() throws ApiException {
        String networkId = null;
        String deviceId = null;
        Object response = api.unenrollNetworkSmDevice(networkId, deviceId);
        // TODO: test validations
    }

    /**
     * Modify the fields of a device
     *
     * Modify the fields of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmDeviceFieldsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSmDeviceFieldsRequest updateNetworkSmDeviceFieldsRequest = null;
        Object response = api.updateNetworkSmDeviceFields(networkId, updateNetworkSmDeviceFieldsRequest);
        // TODO: test validations
    }

    /**
     * Add, delete, or update the tags of a set of devices
     *
     * Add, delete, or update the tags of a set of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSmDevicesTagsTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSmDevicesTagsRequest updateNetworkSmDevicesTagsRequest = null;
        Object response = api.updateNetworkSmDevicesTags(networkId, updateNetworkSmDevicesTagsRequest);
        // TODO: test validations
    }

    /**
     * Wipe a device
     *
     * Wipe a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wipeNetworkSmDeviceTest() throws ApiException {
        String networkId = null;
        WipeNetworkSmDeviceRequest wipeNetworkSmDeviceRequest = null;
        Object response = api.wipeNetworkSmDevice(networkId, wipeNetworkSmDeviceRequest);
        // TODO: test validations
    }

}
