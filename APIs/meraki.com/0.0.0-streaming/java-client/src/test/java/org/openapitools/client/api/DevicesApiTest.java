/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClaimNetworkDevicesRequest;
import org.openapitools.client.model.CycleDeviceSwitchPortsRequest;
import org.openapitools.client.model.UpdateNetworkDeviceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimNetworkDevicesTest() throws ApiException {
        String networkId = null;
        ClaimNetworkDevicesRequest claimNetworkDevicesRequest = null;
        api.claimNetworkDevices(networkId, claimNetworkDevicesRequest);
        // TODO: test validations
    }

    /**
     * Cycle a set of switch ports
     *
     * Cycle a set of switch ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cycleDeviceSwitchPortsTest() throws ApiException {
        String serial = null;
        CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest = null;
        Object response = api.cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPortsRequest);
        // TODO: test validations
    }

    /**
     * Return a single device
     *
     * Return a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDeviceTest() throws ApiException {
        String networkId = null;
        String serial = null;
        Object response = api.getNetworkDevice(networkId, serial);
        // TODO: test validations
    }

    /**
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     *
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDeviceLossAndLatencyHistoryTest() throws ApiException {
        String networkId = null;
        String serial = null;
        String ip = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        String uplink = null;
        List<Object> response = api.getNetworkDeviceLossAndLatencyHistory(networkId, serial, ip, t0, t1, timespan, resolution, uplink);
        // TODO: test validations
    }

    /**
     * Return the performance score for a single MX
     *
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDevicePerformanceTest() throws ApiException {
        String networkId = null;
        String serial = null;
        Object response = api.getNetworkDevicePerformance(networkId, serial);
        // TODO: test validations
    }

    /**
     * Return the uplink information for a device.
     *
     * Return the uplink information for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDeviceUplinkTest() throws ApiException {
        String networkId = null;
        String serial = null;
        List<Object> response = api.getNetworkDeviceUplink(networkId, serial);
        // TODO: test validations
    }

    /**
     * List the devices in a network
     *
     * List the devices in a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkDevicesTest() throws ApiException {
        String networkId = null;
        List<Object> response = api.getNetworkDevices(networkId);
        // TODO: test validations
    }

    /**
     * List the devices in an organization
     *
     * List the devices in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDevicesTest() throws ApiException {
        String organizationId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        String configurationUpdatedAfter = null;
        List<Object> response = api.getOrganizationDevices(organizationId, perPage, startingAfter, endingBefore, configurationUpdatedAfter);
        // TODO: test validations
    }

    /**
     * Reboot a device
     *
     * Reboot a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootNetworkDeviceTest() throws ApiException {
        String networkId = null;
        String serial = null;
        Object response = api.rebootNetworkDevice(networkId, serial);
        // TODO: test validations
    }

    /**
     * Remove a single device
     *
     * Remove a single device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNetworkDeviceTest() throws ApiException {
        String networkId = null;
        String serial = null;
        api.removeNetworkDevice(networkId, serial);
        // TODO: test validations
    }

    /**
     * Update the attributes of a device
     *
     * Update the attributes of a device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkDeviceTest() throws ApiException {
        String networkId = null;
        String serial = null;
        UpdateNetworkDeviceRequest updateNetworkDeviceRequest = null;
        Object response = api.updateNetworkDevice(networkId, serial, updateNetworkDeviceRequest);
        // TODO: test validations
    }

}
