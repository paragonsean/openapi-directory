/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetNetworkClients200Response;
import org.openapitools.client.model.ProvisionNetworkClientsRequest;
import org.openapitools.client.model.UpdateNetworkClientPolicyRequest;
import org.openapitools.client.model.UpdateNetworkClientSplashAuthorizationStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientsApi
 */
@Disabled
public class ClientsApiTest {

    private final ClientsApi api = new ClientsApi();

    /**
     * List the clients of a device, up to a maximum of a month ago
     *
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceClientsTest() throws ApiException {
        String serial = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getDeviceClients(serial, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the client associated with the given identifier
     *
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClient(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the events associated with this client
     *
     * Return the events associated with this client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientEventsTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        List<Object> response = api.getNetworkClientEvents(networkId, clientId, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Return the latency history for a client
     *
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientLatencyHistoryTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        String t0 = null;
        String t1 = null;
        Float timespan = null;
        Integer resolution = null;
        List<Object> response = api.getNetworkClientLatencyHistory(networkId, clientId, t0, t1, timespan, resolution);
        // TODO: test validations
    }

    /**
     * Return the policy assigned to a client on the network
     *
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientPolicyTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientPolicy(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash
     *
     * Return the splash authorization for a client, for each SSID they&#39;ve associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientSplashAuthorizationStatusTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        Object response = api.getNetworkClientSplashAuthorizationStatus(networkId, clientId);
        // TODO: test validations
    }

    /**
     * Return the client&#39;s daily usage history
     *
     * Return the client&#39;s daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientUsageHistoryTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        List<Object> response = api.getNetworkClientUsageHistory(networkId, clientId);
        // TODO: test validations
    }

    /**
     * List the clients that have used this network in the timespan
     *
     * List the clients that have used this network in the timespan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkClientsTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        Integer perPage = null;
        String startingAfter = null;
        String endingBefore = null;
        GetNetworkClients200Response response = api.getNetworkClients(networkId, t0, timespan, perPage, startingAfter, endingBefore);
        // TODO: test validations
    }

    /**
     * Provisions a client with a name and policy
     *
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionNetworkClientsTest() throws ApiException {
        String networkId = null;
        ProvisionNetworkClientsRequest provisionNetworkClientsRequest = null;
        Object response = api.provisionNetworkClients(networkId, provisionNetworkClientsRequest);
        // TODO: test validations
    }

    /**
     * Update the policy assigned to a client on the network
     *
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientPolicyTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = null;
        Object response = api.updateNetworkClientPolicy(networkId, clientId, updateNetworkClientPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a client&#39;s splash authorization
     *
     * Update a client&#39;s splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkClientSplashAuthorizationStatusTest() throws ApiException {
        String networkId = null;
        String clientId = null;
        UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = null;
        Object response = api.updateNetworkClientSplashAuthorizationStatus(networkId, clientId, updateNetworkClientSplashAuthorizationStatusRequest);
        // TODO: test validations
    }

}
