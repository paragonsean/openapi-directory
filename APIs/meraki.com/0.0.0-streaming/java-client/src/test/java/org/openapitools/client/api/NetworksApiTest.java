/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 23 April, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * The version of the OpenAPI document: 0.0.0-streaming
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BindNetworkRequest;
import org.openapitools.client.model.CombineOrganizationNetworksRequest;
import org.openapitools.client.model.CreateOrganizationNetworkRequest;
import org.openapitools.client.model.UpdateNetworkRequest;
import org.openapitools.client.model.UpdateNetworkSiteToSiteVpnRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworksApi
 */
@Disabled
public class NetworksApiTest {

    private final NetworksApi api = new NetworksApi();

    /**
     * Bind a network to a template.
     *
     * Bind a network to a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bindNetworkTest() throws ApiException {
        String networkId = null;
        BindNetworkRequest bindNetworkRequest = null;
        api.bindNetwork(networkId, bindNetworkRequest);
        // TODO: test validations
    }

    /**
     * Combine multiple networks into a single network
     *
     * Combine multiple networks into a single network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineOrganizationNetworksTest() throws ApiException {
        String organizationId = null;
        CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = null;
        Object response = api.combineOrganizationNetworks(organizationId, combineOrganizationNetworksRequest);
        // TODO: test validations
    }

    /**
     * Create a network
     *
     * Create a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationNetworkTest() throws ApiException {
        String organizationId = null;
        CreateOrganizationNetworkRequest createOrganizationNetworkRequest = null;
        Object response = api.createOrganizationNetwork(organizationId, createOrganizationNetworkRequest);
        // TODO: test validations
    }

    /**
     * Delete a network
     *
     * Delete a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkTest() throws ApiException {
        String networkId = null;
        api.deleteNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Return a network
     *
     * Return a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetwork(networkId);
        // TODO: test validations
    }

    /**
     * List Air Marshal scan results from a network
     *
     * List Air Marshal scan results from a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAirMarshalTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        List<Object> response = api.getNetworkAirMarshal(networkId, t0, timespan);
        // TODO: test validations
    }

    /**
     * Return the site-to-site VPN settings of a network
     *
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSiteToSiteVpnTest() throws ApiException {
        String networkId = null;
        Object response = api.getNetworkSiteToSiteVpn(networkId);
        // TODO: test validations
    }

    /**
     * Return the traffic analysis data for this network
     *
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTrafficTest() throws ApiException {
        String networkId = null;
        String t0 = null;
        Float timespan = null;
        String deviceType = null;
        List<Object> response = api.getNetworkTraffic(networkId, t0, timespan, deviceType);
        // TODO: test validations
    }

    /**
     * List the networks in an organization
     *
     * List the networks in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationNetworksTest() throws ApiException {
        String organizationId = null;
        String configTemplateId = null;
        List<Object> response = api.getOrganizationNetworks(organizationId, configTemplateId);
        // TODO: test validations
    }

    /**
     * Split a combined network into individual networks for each type of device
     *
     * Split a combined network into individual networks for each type of device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitNetworkTest() throws ApiException {
        String networkId = null;
        Object response = api.splitNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Unbind a network from a template.
     *
     * Unbind a network from a template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unbindNetworkTest() throws ApiException {
        String networkId = null;
        api.unbindNetwork(networkId);
        // TODO: test validations
    }

    /**
     * Update a network
     *
     * Update a network
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkTest() throws ApiException {
        String networkId = null;
        UpdateNetworkRequest updateNetworkRequest = null;
        Object response = api.updateNetwork(networkId, updateNetworkRequest);
        // TODO: test validations
    }

    /**
     * Update the site-to-site VPN settings of a network
     *
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSiteToSiteVpnTest() throws ApiException {
        String networkId = null;
        UpdateNetworkSiteToSiteVpnRequest updateNetworkSiteToSiteVpnRequest = null;
        Object response = api.updateNetworkSiteToSiteVpn(networkId, updateNetworkSiteToSiteVpnRequest);
        // TODO: test validations
    }

}
