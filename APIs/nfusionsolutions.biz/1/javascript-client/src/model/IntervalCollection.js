/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';

/**
 * The IntervalCollection model module.
 * @module model/IntervalCollection
 * @version 1
 */
class IntervalCollection {
    /**
     * Constructs a new <code>IntervalCollection</code>.
     * @alias module:model/IntervalCollection
     */
    constructor() { 
        
        IntervalCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntervalCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntervalCollection} obj Optional instance to populate.
     * @return {module:model/IntervalCollection} The populated <code>IntervalCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntervalCollection();

            if (data.hasOwnProperty('baseCurrency')) {
                obj['baseCurrency'] = ApiClient.convertToType(data['baseCurrency'], 'String');
            }
            if (data.hasOwnProperty('intervals')) {
                obj['intervals'] = ApiClient.convertToType(data['intervals'], [Interval]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntervalCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntervalCollection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseCurrency'] && !(typeof data['baseCurrency'] === 'string' || data['baseCurrency'] instanceof String)) {
            throw new Error("Expected the field `baseCurrency` to be a primitive type in the JSON string but got " + data['baseCurrency']);
        }
        if (data['intervals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intervals'])) {
                throw new Error("Expected the field `intervals` to be an array in the JSON data but got " + data['intervals']);
            }
            // validate the optional field `intervals` (array)
            for (const item of data['intervals']) {
                Interval.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}



/**
 * @member {String} baseCurrency
 */
IntervalCollection.prototype['baseCurrency'] = undefined;

/**
 * @member {Array.<module:model/Interval>} intervals
 */
IntervalCollection.prototype['intervals'] = undefined;

/**
 * @member {String} name
 */
IntervalCollection.prototype['name'] = undefined;

/**
 * @member {String} symbol
 */
IntervalCollection.prototype['symbol'] = undefined;






export default IntervalCollection;

