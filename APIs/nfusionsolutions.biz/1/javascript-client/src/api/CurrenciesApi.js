/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntervalCollectionResponse from '../model/IntervalCollectionResponse';
import RateResponse from '../model/RateResponse';
import SummaryResponse from '../model/SummaryResponse';

/**
* Currencies service.
* @module api/CurrenciesApi
* @version 1
*/
export default class CurrenciesApi {

    /**
    * Constructs a new CurrenciesApi. 
    * @alias module:api/CurrenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currenciesHistoryGET operation.
     * @callback module:api/CurrenciesApi~currenciesHistoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical prices for requested currency pairs
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * @param {String} pairs comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD
     * @param {Date} start start date of time period. format is <i>yyyy-mm-dd</i>
     * @param {Object} opts Optional parameters
     * @param {Date} [end] end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
     * @param {String} [interval] aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesHistoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    currenciesHistoryGET(pairs, start, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pairs' is set
      if (pairs === undefined || pairs === null) {
        throw new Error("Missing the required parameter 'pairs' when calling currenciesHistoryGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling currenciesHistoryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'pairs': pairs,
        'start': start,
        'end': opts['end'],
        'interval': opts['interval'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Currencies/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesRateGET operation.
     * @callback module:api/CurrenciesApi~currenciesRateGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RateResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest mid rate for requested currency pairs
     * Current Mid Rate
     * @param {String} pairs comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesRateGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RateResponse>}
     */
    currenciesRateGET(pairs, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pairs' is set
      if (pairs === undefined || pairs === null) {
        throw new Error("Missing the required parameter 'pairs' when calling currenciesRateGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'pairs': pairs,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [RateResponse];
      return this.apiClient.callApi(
        '/api/v1/Currencies/rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesSummaryGET operation.
     * @callback module:api/CurrenciesApi~currenciesSummaryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest Summary for requested currency pairs
     * Current and daily summary information combined into a single quote
     * @param {String} pairs comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesSummaryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryResponse>}
     */
    currenciesSummaryGET(pairs, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pairs' is set
      if (pairs === undefined || pairs === null) {
        throw new Error("Missing the required parameter 'pairs' when calling currenciesSummaryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'pairs': pairs,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SummaryResponse];
      return this.apiClient.callApi(
        '/api/v1/Currencies/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesSupportedCurrenciesHistoryGET operation.
     * @callback module:api/CurrenciesApi~currenciesSupportedCurrenciesHistoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currency pairs supported by the history endpoint
     * Only the currency pairs in the direction noted can be used with the history endpoint.  For example: USD/CAD is not the same as CAD/USD
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesSupportedCurrenciesHistoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    currenciesSupportedCurrenciesHistoryGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Currencies/history/supported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesSupportedCurrenciesRateGET operation.
     * @callback module:api/CurrenciesApi~currenciesSupportedCurrenciesRateGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currencies supported by the rate endpoint
     * Any of the currencies in this list can be paired with any other currency in this list when supplied to the Rate endpoint.  For example: USD/CAD,CAD/USD,USD/EUR,EUR/CAD
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesSupportedCurrenciesRateGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    currenciesSupportedCurrenciesRateGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Currencies/rate/supported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currenciesSupportedCurrenciesSummaryGET operation.
     * @callback module:api/CurrenciesApi~currenciesSupportedCurrenciesSummaryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currency pairs supported by the Summary endpoint
     * Only the currency pairs in the direction noted can be used with the Summary endpoint.  For example: USD/CAD is not the same as CAD/USD
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/CurrenciesApi~currenciesSupportedCurrenciesSummaryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    currenciesSupportedCurrenciesSummaryGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Currencies/summary/supported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
