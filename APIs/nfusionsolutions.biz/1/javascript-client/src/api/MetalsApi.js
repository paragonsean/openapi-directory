/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntervalCollectionResponse from '../model/IntervalCollectionResponse';
import SummaryResponse from '../model/SummaryResponse';

/**
* Metals service.
* @module api/MetalsApi
* @version 1
*/
export default class MetalsApi {

    /**
    * Constructs a new MetalsApi. 
    * @alias module:api/MetalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metalsBenchmarkHistoryGET operation.
     * @callback module:api/MetalsApi~metalsBenchmarkHistoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical benchmark prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param {String} metals comma separated list of metals
     * @param {Date} start start date of time period. format is <i>yyyy-mm-dd</i>
     * @param {Object} opts Optional parameters
     * @param {Date} [end] end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
     * @param {String} [interval] aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
     * @param {Boolean} [historicalfx] if true use historical currency rates otherwise current currency rates. Defaults to true.
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsBenchmarkHistoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    metalsBenchmarkHistoryGET(metals, start, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsBenchmarkHistoryGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metalsBenchmarkHistoryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'start': start,
        'end': opts['end'],
        'interval': opts['interval'],
        'historicalfx': opts['historicalfx'],
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/benchmark/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsBenchmarkSummaryGET operation.
     * @callback module:api/MetalsApi~metalsBenchmarkSummaryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest Benchmark prices for requested metals
     * Benchmark price information
     * @param {String} metals comma separated list of metals
     * @param {Object} opts Optional parameters
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsBenchmarkSummaryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryResponse>}
     */
    metalsBenchmarkSummaryGET(metals, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsBenchmarkSummaryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SummaryResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/benchmark/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsBenchmarkSupportedMetalsGET operation.
     * @callback module:api/MetalsApi~metalsBenchmarkSupportedMetalsGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of symbols supported by the benchmark endpoints
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsBenchmarkSupportedMetalsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    metalsBenchmarkSupportedMetalsGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Metals/benchmark/supported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotAnnualHistoricalPerformanceGET operation.
     * @callback module:api/MetalsApi~metalsSpotAnnualHistoricalPerformanceGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historical Annual Performance for requested metals
     * Annual Historical Performance information
     * @param {String} metals comma separated list of metals
     * @param {Object} opts Optional parameters
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {Number} [years] Number of years of history to return. Defaults to 10.
     * @param {module:api/MetalsApi~metalsSpotAnnualHistoricalPerformanceGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    metalsSpotAnnualHistoricalPerformanceGET(metals, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsSpotAnnualHistoricalPerformanceGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format'],
        'years': opts['years']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/performance/annual', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotHistoricalPerformanceGET operation.
     * @callback module:api/MetalsApi~metalsSpotHistoricalPerformanceGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historical Performance for requested metals
     * Historical Performance information
     * @param {String} metals comma separated list of metals
     * @param {Object} opts Optional parameters
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotHistoricalPerformanceGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    metalsSpotHistoricalPerformanceGET(metals, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsSpotHistoricalPerformanceGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotHistoryGET operation.
     * @callback module:api/MetalsApi~metalsSpotHistoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical Spot prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param {String} metals comma separated list of metals
     * @param {Date} start start date of time period. format is <i>yyyy-mm-dd</i>
     * @param {Object} opts Optional parameters
     * @param {Date} [end] end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
     * @param {String} [interval] aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
     * @param {Boolean} [historicalfx] if true use historical currency rates otherwise current currency rates. Defaults to true.
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotHistoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    metalsSpotHistoryGET(metals, start, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsSpotHistoryGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metalsSpotHistoryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'start': start,
        'end': opts['end'],
        'interval': opts['interval'],
        'historicalfx': opts['historicalfx'],
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotRatioHistoryGET operation.
     * @callback module:api/MetalsApi~metalsSpotRatioHistoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntervalCollectionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical Spot Ratio prices for requested metals
     * Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * @param {String} pairs comma separated list of metals
     * @param {Date} start start date of time period. format is <i>yyyy-mm-dd</i>
     * @param {Object} opts Optional parameters
     * @param {Date} [end] end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
     * @param {String} [interval] aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotRatioHistoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntervalCollectionResponse>}
     */
    metalsSpotRatioHistoryGET(pairs, start, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pairs' is set
      if (pairs === undefined || pairs === null) {
        throw new Error("Missing the required parameter 'pairs' when calling metalsSpotRatioHistoryGET");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling metalsSpotRatioHistoryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'pairs': pairs,
        'start': start,
        'end': opts['end'],
        'interval': opts['interval'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IntervalCollectionResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/ratio/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotRatioSummaryGET operation.
     * @callback module:api/MetalsApi~metalsSpotRatioSummaryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest Spot Summary for requested metal ratios
     * Ratios between prices of two metals
     * @param {String} pairs comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotRatioSummaryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryResponse>}
     */
    metalsSpotRatioSummaryGET(pairs, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pairs' is set
      if (pairs === undefined || pairs === null) {
        throw new Error("Missing the required parameter 'pairs' when calling metalsSpotRatioSummaryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'pairs': pairs,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SummaryResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/ratio/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotSummaryGET operation.
     * @callback module:api/MetalsApi~metalsSpotSummaryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest Spot Summary for requested metals
     * Current and daily summary information combined into a single quote
     * @param {String} metals comma separated list of metals
     * @param {Object} opts Optional parameters
     * @param {String} [currency] comma separated list of conversion currencies, defaults to USD
     * @param {module:model/String} [unitofmeasure] unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotSummaryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryResponse>}
     */
    metalsSpotSummaryGET(metals, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metals' is set
      if (metals === undefined || metals === null) {
        throw new Error("Missing the required parameter 'metals' when calling metalsSpotSummaryGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'metals': metals,
        'currency': opts['currency'],
        'unitofmeasure': opts['unitofmeasure'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SummaryResponse];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSpotSupportedMetalsGET operation.
     * @callback module:api/MetalsApi~metalsSpotSupportedMetalsGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of symbols supported by the spot endpoints
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSpotSupportedMetalsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    metalsSpotSupportedMetalsGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Metals/spot/supported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metalsSupportedCurrenciesMetalsGET operation.
     * @callback module:api/MetalsApi~metalsSupportedCurrenciesMetalsGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currencies supported by metals endpoints for currency conversion
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] to override content negotiation specify a value of json or xml
     * @param {module:api/MetalsApi~metalsSupportedCurrenciesMetalsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    metalsSupportedCurrenciesMetalsGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/Metals/supported/currency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
