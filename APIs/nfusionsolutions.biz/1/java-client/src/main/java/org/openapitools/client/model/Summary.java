/*
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:52.606616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Summary {
  public static final String SERIALIZED_NAME_ASK = "ask";
  @SerializedName(SERIALIZED_NAME_ASK)
  private Double ask;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_BID = "bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private Double bid;

  public static final String SERIALIZED_NAME_FIFTY_TWO_WEEK_HIGH = "fiftyTwoWeekHigh";
  @SerializedName(SERIALIZED_NAME_FIFTY_TWO_WEEK_HIGH)
  private Double fiftyTwoWeekHigh;

  public static final String SERIALIZED_NAME_FIFTY_TWO_WEEK_LOW = "fiftyTwoWeekLow";
  @SerializedName(SERIALIZED_NAME_FIFTY_TWO_WEEK_LOW)
  private Double fiftyTwoWeekLow;

  public static final String SERIALIZED_NAME_FIFTY_TWO_WEEK_PERCENT_CHANGE = "fiftyTwoWeekPercentChange";
  @SerializedName(SERIALIZED_NAME_FIFTY_TWO_WEEK_PERCENT_CHANGE)
  private Double fiftyTwoWeekPercentChange;

  public static final String SERIALIZED_NAME_FOUR_WEEK_PERCENT_CHANGE = "fourWeekPercentChange";
  @SerializedName(SERIALIZED_NAME_FOUR_WEEK_PERCENT_CHANGE)
  private Double fourWeekPercentChange;

  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private Double high;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private Double last;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private Double low;

  public static final String SERIALIZED_NAME_ONE_DAY_CHANGE = "oneDayChange";
  @SerializedName(SERIALIZED_NAME_ONE_DAY_CHANGE)
  private Double oneDayChange;

  public static final String SERIALIZED_NAME_ONE_DAY_PERCENT_CHANGE = "oneDayPercentChange";
  @SerializedName(SERIALIZED_NAME_ONE_DAY_PERCENT_CHANGE)
  private Double oneDayPercentChange;

  public static final String SERIALIZED_NAME_ONE_DAY_VALUE = "oneDayValue";
  @SerializedName(SERIALIZED_NAME_ONE_DAY_VALUE)
  private Double oneDayValue;

  public static final String SERIALIZED_NAME_OPEN = "open";
  @SerializedName(SERIALIZED_NAME_OPEN)
  private Double open;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public static final String SERIALIZED_NAME_TWELVE_WEEK_PERCENT_CHANGE = "twelveWeekPercentChange";
  @SerializedName(SERIALIZED_NAME_TWELVE_WEEK_PERCENT_CHANGE)
  private Double twelveWeekPercentChange;

  public static final String SERIALIZED_NAME_YEAR_TO_DATE_PERCENT_CHANGE = "yearToDatePercentChange";
  @SerializedName(SERIALIZED_NAME_YEAR_TO_DATE_PERCENT_CHANGE)
  private Double yearToDatePercentChange;

  public Summary() {
  }

  public Summary ask(Double ask) {
    this.ask = ask;
    return this;
  }

  /**
   * Get ask
   * @return ask
   */
  @javax.annotation.Nullable
  public Double getAsk() {
    return ask;
  }

  public void setAsk(Double ask) {
    this.ask = ask;
  }


  public Summary baseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Get baseCurrency
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public String getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public Summary bid(Double bid) {
    this.bid = bid;
    return this;
  }

  /**
   * Get bid
   * @return bid
   */
  @javax.annotation.Nullable
  public Double getBid() {
    return bid;
  }

  public void setBid(Double bid) {
    this.bid = bid;
  }


  public Summary fiftyTwoWeekHigh(Double fiftyTwoWeekHigh) {
    this.fiftyTwoWeekHigh = fiftyTwoWeekHigh;
    return this;
  }

  /**
   * Get fiftyTwoWeekHigh
   * @return fiftyTwoWeekHigh
   */
  @javax.annotation.Nullable
  public Double getFiftyTwoWeekHigh() {
    return fiftyTwoWeekHigh;
  }

  public void setFiftyTwoWeekHigh(Double fiftyTwoWeekHigh) {
    this.fiftyTwoWeekHigh = fiftyTwoWeekHigh;
  }


  public Summary fiftyTwoWeekLow(Double fiftyTwoWeekLow) {
    this.fiftyTwoWeekLow = fiftyTwoWeekLow;
    return this;
  }

  /**
   * Get fiftyTwoWeekLow
   * @return fiftyTwoWeekLow
   */
  @javax.annotation.Nullable
  public Double getFiftyTwoWeekLow() {
    return fiftyTwoWeekLow;
  }

  public void setFiftyTwoWeekLow(Double fiftyTwoWeekLow) {
    this.fiftyTwoWeekLow = fiftyTwoWeekLow;
  }


  public Summary fiftyTwoWeekPercentChange(Double fiftyTwoWeekPercentChange) {
    this.fiftyTwoWeekPercentChange = fiftyTwoWeekPercentChange;
    return this;
  }

  /**
   * Get fiftyTwoWeekPercentChange
   * @return fiftyTwoWeekPercentChange
   */
  @javax.annotation.Nullable
  public Double getFiftyTwoWeekPercentChange() {
    return fiftyTwoWeekPercentChange;
  }

  public void setFiftyTwoWeekPercentChange(Double fiftyTwoWeekPercentChange) {
    this.fiftyTwoWeekPercentChange = fiftyTwoWeekPercentChange;
  }


  public Summary fourWeekPercentChange(Double fourWeekPercentChange) {
    this.fourWeekPercentChange = fourWeekPercentChange;
    return this;
  }

  /**
   * Get fourWeekPercentChange
   * @return fourWeekPercentChange
   */
  @javax.annotation.Nullable
  public Double getFourWeekPercentChange() {
    return fourWeekPercentChange;
  }

  public void setFourWeekPercentChange(Double fourWeekPercentChange) {
    this.fourWeekPercentChange = fourWeekPercentChange;
  }


  public Summary high(Double high) {
    this.high = high;
    return this;
  }

  /**
   * Get high
   * @return high
   */
  @javax.annotation.Nullable
  public Double getHigh() {
    return high;
  }

  public void setHigh(Double high) {
    this.high = high;
  }


  public Summary last(Double last) {
    this.last = last;
    return this;
  }

  /**
   * Get last
   * @return last
   */
  @javax.annotation.Nullable
  public Double getLast() {
    return last;
  }

  public void setLast(Double last) {
    this.last = last;
  }


  public Summary low(Double low) {
    this.low = low;
    return this;
  }

  /**
   * Get low
   * @return low
   */
  @javax.annotation.Nullable
  public Double getLow() {
    return low;
  }

  public void setLow(Double low) {
    this.low = low;
  }


  public Summary oneDayChange(Double oneDayChange) {
    this.oneDayChange = oneDayChange;
    return this;
  }

  /**
   * Get oneDayChange
   * @return oneDayChange
   */
  @javax.annotation.Nullable
  public Double getOneDayChange() {
    return oneDayChange;
  }

  public void setOneDayChange(Double oneDayChange) {
    this.oneDayChange = oneDayChange;
  }


  public Summary oneDayPercentChange(Double oneDayPercentChange) {
    this.oneDayPercentChange = oneDayPercentChange;
    return this;
  }

  /**
   * Get oneDayPercentChange
   * @return oneDayPercentChange
   */
  @javax.annotation.Nullable
  public Double getOneDayPercentChange() {
    return oneDayPercentChange;
  }

  public void setOneDayPercentChange(Double oneDayPercentChange) {
    this.oneDayPercentChange = oneDayPercentChange;
  }


  public Summary oneDayValue(Double oneDayValue) {
    this.oneDayValue = oneDayValue;
    return this;
  }

  /**
   * Get oneDayValue
   * @return oneDayValue
   */
  @javax.annotation.Nullable
  public Double getOneDayValue() {
    return oneDayValue;
  }

  public void setOneDayValue(Double oneDayValue) {
    this.oneDayValue = oneDayValue;
  }


  public Summary open(Double open) {
    this.open = open;
    return this;
  }

  /**
   * Get open
   * @return open
   */
  @javax.annotation.Nullable
  public Double getOpen() {
    return open;
  }

  public void setOpen(Double open) {
    this.open = open;
  }


  public Summary symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Summary timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }


  public Summary twelveWeekPercentChange(Double twelveWeekPercentChange) {
    this.twelveWeekPercentChange = twelveWeekPercentChange;
    return this;
  }

  /**
   * Get twelveWeekPercentChange
   * @return twelveWeekPercentChange
   */
  @javax.annotation.Nullable
  public Double getTwelveWeekPercentChange() {
    return twelveWeekPercentChange;
  }

  public void setTwelveWeekPercentChange(Double twelveWeekPercentChange) {
    this.twelveWeekPercentChange = twelveWeekPercentChange;
  }


  public Summary yearToDatePercentChange(Double yearToDatePercentChange) {
    this.yearToDatePercentChange = yearToDatePercentChange;
    return this;
  }

  /**
   * Get yearToDatePercentChange
   * @return yearToDatePercentChange
   */
  @javax.annotation.Nullable
  public Double getYearToDatePercentChange() {
    return yearToDatePercentChange;
  }

  public void setYearToDatePercentChange(Double yearToDatePercentChange) {
    this.yearToDatePercentChange = yearToDatePercentChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Summary summary = (Summary) o;
    return Objects.equals(this.ask, summary.ask) &&
        Objects.equals(this.baseCurrency, summary.baseCurrency) &&
        Objects.equals(this.bid, summary.bid) &&
        Objects.equals(this.fiftyTwoWeekHigh, summary.fiftyTwoWeekHigh) &&
        Objects.equals(this.fiftyTwoWeekLow, summary.fiftyTwoWeekLow) &&
        Objects.equals(this.fiftyTwoWeekPercentChange, summary.fiftyTwoWeekPercentChange) &&
        Objects.equals(this.fourWeekPercentChange, summary.fourWeekPercentChange) &&
        Objects.equals(this.high, summary.high) &&
        Objects.equals(this.last, summary.last) &&
        Objects.equals(this.low, summary.low) &&
        Objects.equals(this.oneDayChange, summary.oneDayChange) &&
        Objects.equals(this.oneDayPercentChange, summary.oneDayPercentChange) &&
        Objects.equals(this.oneDayValue, summary.oneDayValue) &&
        Objects.equals(this.open, summary.open) &&
        Objects.equals(this.symbol, summary.symbol) &&
        Objects.equals(this.timeStamp, summary.timeStamp) &&
        Objects.equals(this.twelveWeekPercentChange, summary.twelveWeekPercentChange) &&
        Objects.equals(this.yearToDatePercentChange, summary.yearToDatePercentChange);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ask, baseCurrency, bid, fiftyTwoWeekHigh, fiftyTwoWeekLow, fiftyTwoWeekPercentChange, fourWeekPercentChange, high, last, low, oneDayChange, oneDayPercentChange, oneDayValue, open, symbol, timeStamp, twelveWeekPercentChange, yearToDatePercentChange);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Summary {\n");
    sb.append("    ask: ").append(toIndentedString(ask)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    fiftyTwoWeekHigh: ").append(toIndentedString(fiftyTwoWeekHigh)).append("\n");
    sb.append("    fiftyTwoWeekLow: ").append(toIndentedString(fiftyTwoWeekLow)).append("\n");
    sb.append("    fiftyTwoWeekPercentChange: ").append(toIndentedString(fiftyTwoWeekPercentChange)).append("\n");
    sb.append("    fourWeekPercentChange: ").append(toIndentedString(fourWeekPercentChange)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    oneDayChange: ").append(toIndentedString(oneDayChange)).append("\n");
    sb.append("    oneDayPercentChange: ").append(toIndentedString(oneDayPercentChange)).append("\n");
    sb.append("    oneDayValue: ").append(toIndentedString(oneDayValue)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    twelveWeekPercentChange: ").append(toIndentedString(twelveWeekPercentChange)).append("\n");
    sb.append("    yearToDatePercentChange: ").append(toIndentedString(yearToDatePercentChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ask");
    openapiFields.add("baseCurrency");
    openapiFields.add("bid");
    openapiFields.add("fiftyTwoWeekHigh");
    openapiFields.add("fiftyTwoWeekLow");
    openapiFields.add("fiftyTwoWeekPercentChange");
    openapiFields.add("fourWeekPercentChange");
    openapiFields.add("high");
    openapiFields.add("last");
    openapiFields.add("low");
    openapiFields.add("oneDayChange");
    openapiFields.add("oneDayPercentChange");
    openapiFields.add("oneDayValue");
    openapiFields.add("open");
    openapiFields.add("symbol");
    openapiFields.add("timeStamp");
    openapiFields.add("twelveWeekPercentChange");
    openapiFields.add("yearToDatePercentChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Summary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Summary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Summary is not found in the empty JSON string", Summary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Summary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Summary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Summary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Summary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Summary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Summary.class));

       return (TypeAdapter<T>) new TypeAdapter<Summary>() {
           @Override
           public void write(JsonWriter out, Summary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Summary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Summary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Summary
   * @throws IOException if the JSON string is invalid with respect to Summary
   */
  public static Summary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Summary.class);
  }

  /**
   * Convert an instance of Summary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

