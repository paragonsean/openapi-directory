/*
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IntervalCollection;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntervalCollectionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:52.606616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntervalCollectionResponse {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private IntervalCollection data;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_REQUESTED_CURRENCY = "requestedCurrency";
  @SerializedName(SERIALIZED_NAME_REQUESTED_CURRENCY)
  private String requestedCurrency;

  public static final String SERIALIZED_NAME_REQUESTED_SYMBOL = "requestedSymbol";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SYMBOL)
  private String requestedSymbol;

  public static final String SERIALIZED_NAME_REQUESTED_UNIT_OF_MEASURE = "requestedUnitOfMeasure";
  @SerializedName(SERIALIZED_NAME_REQUESTED_UNIT_OF_MEASURE)
  private String requestedUnitOfMeasure;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public IntervalCollectionResponse() {
  }

  public IntervalCollectionResponse data(IntervalCollection data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public IntervalCollection getData() {
    return data;
  }

  public void setData(IntervalCollection data) {
    this.data = data;
  }


  public IntervalCollectionResponse error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public IntervalCollectionResponse requestedCurrency(String requestedCurrency) {
    this.requestedCurrency = requestedCurrency;
    return this;
  }

  /**
   * Get requestedCurrency
   * @return requestedCurrency
   */
  @javax.annotation.Nullable
  public String getRequestedCurrency() {
    return requestedCurrency;
  }

  public void setRequestedCurrency(String requestedCurrency) {
    this.requestedCurrency = requestedCurrency;
  }


  public IntervalCollectionResponse requestedSymbol(String requestedSymbol) {
    this.requestedSymbol = requestedSymbol;
    return this;
  }

  /**
   * Get requestedSymbol
   * @return requestedSymbol
   */
  @javax.annotation.Nullable
  public String getRequestedSymbol() {
    return requestedSymbol;
  }

  public void setRequestedSymbol(String requestedSymbol) {
    this.requestedSymbol = requestedSymbol;
  }


  public IntervalCollectionResponse requestedUnitOfMeasure(String requestedUnitOfMeasure) {
    this.requestedUnitOfMeasure = requestedUnitOfMeasure;
    return this;
  }

  /**
   * Get requestedUnitOfMeasure
   * @return requestedUnitOfMeasure
   */
  @javax.annotation.Nullable
  public String getRequestedUnitOfMeasure() {
    return requestedUnitOfMeasure;
  }

  public void setRequestedUnitOfMeasure(String requestedUnitOfMeasure) {
    this.requestedUnitOfMeasure = requestedUnitOfMeasure;
  }


  public IntervalCollectionResponse success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntervalCollectionResponse intervalCollectionResponse = (IntervalCollectionResponse) o;
    return Objects.equals(this.data, intervalCollectionResponse.data) &&
        Objects.equals(this.error, intervalCollectionResponse.error) &&
        Objects.equals(this.requestedCurrency, intervalCollectionResponse.requestedCurrency) &&
        Objects.equals(this.requestedSymbol, intervalCollectionResponse.requestedSymbol) &&
        Objects.equals(this.requestedUnitOfMeasure, intervalCollectionResponse.requestedUnitOfMeasure) &&
        Objects.equals(this.success, intervalCollectionResponse.success);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, error, requestedCurrency, requestedSymbol, requestedUnitOfMeasure, success);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntervalCollectionResponse {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    requestedCurrency: ").append(toIndentedString(requestedCurrency)).append("\n");
    sb.append("    requestedSymbol: ").append(toIndentedString(requestedSymbol)).append("\n");
    sb.append("    requestedUnitOfMeasure: ").append(toIndentedString(requestedUnitOfMeasure)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("error");
    openapiFields.add("requestedCurrency");
    openapiFields.add("requestedSymbol");
    openapiFields.add("requestedUnitOfMeasure");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntervalCollectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntervalCollectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntervalCollectionResponse is not found in the empty JSON string", IntervalCollectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntervalCollectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntervalCollectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        IntervalCollection.validateJsonElement(jsonObj.get("data"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("requestedCurrency") != null && !jsonObj.get("requestedCurrency").isJsonNull()) && !jsonObj.get("requestedCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedCurrency").toString()));
      }
      if ((jsonObj.get("requestedSymbol") != null && !jsonObj.get("requestedSymbol").isJsonNull()) && !jsonObj.get("requestedSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedSymbol").toString()));
      }
      if ((jsonObj.get("requestedUnitOfMeasure") != null && !jsonObj.get("requestedUnitOfMeasure").isJsonNull()) && !jsonObj.get("requestedUnitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedUnitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedUnitOfMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntervalCollectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntervalCollectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntervalCollectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntervalCollectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IntervalCollectionResponse>() {
           @Override
           public void write(JsonWriter out, IntervalCollectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntervalCollectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntervalCollectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntervalCollectionResponse
   * @throws IOException if the JSON string is invalid with respect to IntervalCollectionResponse
   */
  public static IntervalCollectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntervalCollectionResponse.class);
  }

  /**
   * Convert an instance of IntervalCollectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

