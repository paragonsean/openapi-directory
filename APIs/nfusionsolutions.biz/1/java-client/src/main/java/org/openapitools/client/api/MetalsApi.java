/*
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IntervalCollectionResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SummaryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for metalsBenchmarkHistoryGET
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkHistoryGETCall(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/benchmark/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (historicalfx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("historicalfx", historicalfx));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsBenchmarkHistoryGETValidateBeforeCall(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsBenchmarkHistoryGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling metalsBenchmarkHistoryGET(Async)");
        }

        return metalsBenchmarkHistoryGETCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, _callback);

    }

    /**
     * Get historical benchmark prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;IntervalCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<IntervalCollectionResponse> metalsBenchmarkHistoryGET(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format) throws ApiException {
        ApiResponse<List<IntervalCollectionResponse>> localVarResp = metalsBenchmarkHistoryGETWithHttpInfo(metals, start, end, interval, historicalfx, currency, unitofmeasure, format);
        return localVarResp.getData();
    }

    /**
     * Get historical benchmark prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;IntervalCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntervalCollectionResponse>> metalsBenchmarkHistoryGETWithHttpInfo(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsBenchmarkHistoryGETValidateBeforeCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, null);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical benchmark prices for requested metals (asynchronously)
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkHistoryGETAsync(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback<List<IntervalCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsBenchmarkHistoryGETValidateBeforeCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, _callback);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsBenchmarkSummaryGET
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkSummaryGETCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/benchmark/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsBenchmarkSummaryGETValidateBeforeCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsBenchmarkSummaryGET(Async)");
        }

        return metalsBenchmarkSummaryGETCall(metals, currency, unitofmeasure, format, _callback);

    }

    /**
     * Get latest Benchmark prices for requested metals
     * Benchmark price information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;SummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<SummaryResponse> metalsBenchmarkSummaryGET(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        ApiResponse<List<SummaryResponse>> localVarResp = metalsBenchmarkSummaryGETWithHttpInfo(metals, currency, unitofmeasure, format);
        return localVarResp.getData();
    }

    /**
     * Get latest Benchmark prices for requested metals
     * Benchmark price information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;SummaryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SummaryResponse>> metalsBenchmarkSummaryGETWithHttpInfo(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsBenchmarkSummaryGETValidateBeforeCall(metals, currency, unitofmeasure, format, null);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest Benchmark prices for requested metals (asynchronously)
     * Benchmark price information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkSummaryGETAsync(String metals, String currency, String unitofmeasure, String format, final ApiCallback<List<SummaryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsBenchmarkSummaryGETValidateBeforeCall(metals, currency, unitofmeasure, format, _callback);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsBenchmarkSupportedMetalsGET
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkSupportedMetalsGETCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/benchmark/supported";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsBenchmarkSupportedMetalsGETValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return metalsBenchmarkSupportedMetalsGETCall(format, _callback);

    }

    /**
     * Get list of symbols supported by the benchmark endpoints
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<String> metalsBenchmarkSupportedMetalsGET(String format) throws ApiException {
        ApiResponse<List<String>> localVarResp = metalsBenchmarkSupportedMetalsGETWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Get list of symbols supported by the benchmark endpoints
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> metalsBenchmarkSupportedMetalsGETWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = metalsBenchmarkSupportedMetalsGETValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of symbols supported by the benchmark endpoints (asynchronously)
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsBenchmarkSupportedMetalsGETAsync(String format, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsBenchmarkSupportedMetalsGETValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotAnnualHistoricalPerformanceGET
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param years Number of years of history to return. Defaults to 10. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotAnnualHistoricalPerformanceGETCall(String metals, String currency, String unitofmeasure, String format, Integer years, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/performance/annual";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (years != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("years", years));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotAnnualHistoricalPerformanceGETValidateBeforeCall(String metals, String currency, String unitofmeasure, String format, Integer years, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsSpotAnnualHistoricalPerformanceGET(Async)");
        }

        return metalsSpotAnnualHistoricalPerformanceGETCall(metals, currency, unitofmeasure, format, years, _callback);

    }

    /**
     * Get Historical Annual Performance for requested metals
     * Annual Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param years Number of years of history to return. Defaults to 10. (optional)
     * @return List&lt;IntervalCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<IntervalCollectionResponse> metalsSpotAnnualHistoricalPerformanceGET(String metals, String currency, String unitofmeasure, String format, Integer years) throws ApiException {
        ApiResponse<List<IntervalCollectionResponse>> localVarResp = metalsSpotAnnualHistoricalPerformanceGETWithHttpInfo(metals, currency, unitofmeasure, format, years);
        return localVarResp.getData();
    }

    /**
     * Get Historical Annual Performance for requested metals
     * Annual Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param years Number of years of history to return. Defaults to 10. (optional)
     * @return ApiResponse&lt;List&lt;IntervalCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntervalCollectionResponse>> metalsSpotAnnualHistoricalPerformanceGETWithHttpInfo(String metals, String currency, String unitofmeasure, String format, Integer years) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotAnnualHistoricalPerformanceGETValidateBeforeCall(metals, currency, unitofmeasure, format, years, null);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Historical Annual Performance for requested metals (asynchronously)
     * Annual Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param years Number of years of history to return. Defaults to 10. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotAnnualHistoricalPerformanceGETAsync(String metals, String currency, String unitofmeasure, String format, Integer years, final ApiCallback<List<IntervalCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotAnnualHistoricalPerformanceGETValidateBeforeCall(metals, currency, unitofmeasure, format, years, _callback);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotHistoricalPerformanceGET
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotHistoricalPerformanceGETCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/performance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotHistoricalPerformanceGETValidateBeforeCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsSpotHistoricalPerformanceGET(Async)");
        }

        return metalsSpotHistoricalPerformanceGETCall(metals, currency, unitofmeasure, format, _callback);

    }

    /**
     * Get Historical Performance for requested metals
     * Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;IntervalCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<IntervalCollectionResponse> metalsSpotHistoricalPerformanceGET(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        ApiResponse<List<IntervalCollectionResponse>> localVarResp = metalsSpotHistoricalPerformanceGETWithHttpInfo(metals, currency, unitofmeasure, format);
        return localVarResp.getData();
    }

    /**
     * Get Historical Performance for requested metals
     * Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;IntervalCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntervalCollectionResponse>> metalsSpotHistoricalPerformanceGETWithHttpInfo(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotHistoricalPerformanceGETValidateBeforeCall(metals, currency, unitofmeasure, format, null);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Historical Performance for requested metals (asynchronously)
     * Historical Performance information
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotHistoricalPerformanceGETAsync(String metals, String currency, String unitofmeasure, String format, final ApiCallback<List<IntervalCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotHistoricalPerformanceGETValidateBeforeCall(metals, currency, unitofmeasure, format, _callback);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotHistoryGET
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotHistoryGETCall(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (historicalfx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("historicalfx", historicalfx));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotHistoryGETValidateBeforeCall(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsSpotHistoryGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling metalsSpotHistoryGET(Async)");
        }

        return metalsSpotHistoryGETCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, _callback);

    }

    /**
     * Get historical Spot prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;IntervalCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<IntervalCollectionResponse> metalsSpotHistoryGET(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format) throws ApiException {
        ApiResponse<List<IntervalCollectionResponse>> localVarResp = metalsSpotHistoryGETWithHttpInfo(metals, start, end, interval, historicalfx, currency, unitofmeasure, format);
        return localVarResp.getData();
    }

    /**
     * Get historical Spot prices for requested metals
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;IntervalCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntervalCollectionResponse>> metalsSpotHistoryGETWithHttpInfo(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotHistoryGETValidateBeforeCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, null);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical Spot prices for requested metals (asynchronously)
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     * @param metals comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param historicalfx if true use historical currency rates otherwise current currency rates. Defaults to true. (optional)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotHistoryGETAsync(String metals, OffsetDateTime start, OffsetDateTime end, String interval, Boolean historicalfx, String currency, String unitofmeasure, String format, final ApiCallback<List<IntervalCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotHistoryGETValidateBeforeCall(metals, start, end, interval, historicalfx, currency, unitofmeasure, format, _callback);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotRatioHistoryGET
     * @param pairs comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotRatioHistoryGETCall(String pairs, OffsetDateTime start, OffsetDateTime end, String interval, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/ratio/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pairs", pairs));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotRatioHistoryGETValidateBeforeCall(String pairs, OffsetDateTime start, OffsetDateTime end, String interval, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pairs' is set
        if (pairs == null) {
            throw new ApiException("Missing the required parameter 'pairs' when calling metalsSpotRatioHistoryGET(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling metalsSpotRatioHistoryGET(Async)");
        }

        return metalsSpotRatioHistoryGETCall(pairs, start, end, interval, format, _callback);

    }

    /**
     * Get historical Spot Ratio prices for requested metals
     * Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * @param pairs comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;IntervalCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<IntervalCollectionResponse> metalsSpotRatioHistoryGET(String pairs, OffsetDateTime start, OffsetDateTime end, String interval, String format) throws ApiException {
        ApiResponse<List<IntervalCollectionResponse>> localVarResp = metalsSpotRatioHistoryGETWithHttpInfo(pairs, start, end, interval, format);
        return localVarResp.getData();
    }

    /**
     * Get historical Spot Ratio prices for requested metals
     * Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * @param pairs comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;IntervalCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntervalCollectionResponse>> metalsSpotRatioHistoryGETWithHttpInfo(String pairs, OffsetDateTime start, OffsetDateTime end, String interval, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotRatioHistoryGETValidateBeforeCall(pairs, start, end, interval, format, null);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get historical Spot Ratio prices for requested metals (asynchronously)
     * Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * @param pairs comma separated list of metals (required)
     * @param start start date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt; (required)
     * @param end end date of time period. format is &lt;i&gt;yyyy-mm-dd&lt;/i&gt;. Default is current date. (optional)
     * @param interval aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y&#x3D;year,  m&#x3D;month,  w&#x3D;week,  d&#x3D;day,  h&#x3D;hour,  mi&#x3D;minute    For example, a yearly interval can be specified as \&quot;y\&quot; and 6 month interval as \&quot;6m\&quot;.     If not specified the interval parameter default is 1 Day. (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotRatioHistoryGETAsync(String pairs, OffsetDateTime start, OffsetDateTime end, String interval, String format, final ApiCallback<List<IntervalCollectionResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotRatioHistoryGETValidateBeforeCall(pairs, start, end, interval, format, _callback);
        Type localVarReturnType = new TypeToken<List<IntervalCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotRatioSummaryGET
     * @param pairs comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotRatioSummaryGETCall(String pairs, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/ratio/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pairs", pairs));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotRatioSummaryGETValidateBeforeCall(String pairs, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pairs' is set
        if (pairs == null) {
            throw new ApiException("Missing the required parameter 'pairs' when calling metalsSpotRatioSummaryGET(Async)");
        }

        return metalsSpotRatioSummaryGETCall(pairs, format, _callback);

    }

    /**
     * Get latest Spot Summary for requested metal ratios
     * Ratios between prices of two metals
     * @param pairs comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;SummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<SummaryResponse> metalsSpotRatioSummaryGET(String pairs, String format) throws ApiException {
        ApiResponse<List<SummaryResponse>> localVarResp = metalsSpotRatioSummaryGETWithHttpInfo(pairs, format);
        return localVarResp.getData();
    }

    /**
     * Get latest Spot Summary for requested metal ratios
     * Ratios between prices of two metals
     * @param pairs comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;SummaryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SummaryResponse>> metalsSpotRatioSummaryGETWithHttpInfo(String pairs, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotRatioSummaryGETValidateBeforeCall(pairs, format, null);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest Spot Summary for requested metal ratios (asynchronously)
     * Ratios between prices of two metals
     * @param pairs comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotRatioSummaryGETAsync(String pairs, String format, final ApiCallback<List<SummaryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotRatioSummaryGETValidateBeforeCall(pairs, format, _callback);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotSummaryGET
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotSummaryGETCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metals", metals));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (unitofmeasure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitofmeasure", unitofmeasure));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotSummaryGETValidateBeforeCall(String metals, String currency, String unitofmeasure, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metals' is set
        if (metals == null) {
            throw new ApiException("Missing the required parameter 'metals' when calling metalsSpotSummaryGET(Async)");
        }

        return metalsSpotSummaryGETCall(metals, currency, unitofmeasure, format, _callback);

    }

    /**
     * Get latest Spot Summary for requested metals
     * Current and daily summary information combined into a single quote
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;SummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<SummaryResponse> metalsSpotSummaryGET(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        ApiResponse<List<SummaryResponse>> localVarResp = metalsSpotSummaryGETWithHttpInfo(metals, currency, unitofmeasure, format);
        return localVarResp.getData();
    }

    /**
     * Get latest Spot Summary for requested metals
     * Current and daily summary information combined into a single quote
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;SummaryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SummaryResponse>> metalsSpotSummaryGETWithHttpInfo(String metals, String currency, String unitofmeasure, String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotSummaryGETValidateBeforeCall(metals, currency, unitofmeasure, format, null);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest Spot Summary for requested metals (asynchronously)
     * Current and daily summary information combined into a single quote
     * @param metals comma separated list of metals (required)
     * @param currency comma separated list of conversion currencies, defaults to USD (optional)
     * @param unitofmeasure unit of meaure, defaults to troy ounces. allowed values are:  mg&#x3D;milligram  g&#x3D;gram  kg&#x3D;kilogram  gr&#x3D;grain  oz&#x3D;ounce  toz&#x3D;troy ounce  ct&#x3D;carat  dwt&#x3D;pennyweight (optional)
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotSummaryGETAsync(String metals, String currency, String unitofmeasure, String format, final ApiCallback<List<SummaryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotSummaryGETValidateBeforeCall(metals, currency, unitofmeasure, format, _callback);
        Type localVarReturnType = new TypeToken<List<SummaryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSpotSupportedMetalsGET
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotSupportedMetalsGETCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/spot/supported";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSpotSupportedMetalsGETValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return metalsSpotSupportedMetalsGETCall(format, _callback);

    }

    /**
     * Get list of symbols supported by the spot endpoints
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<String> metalsSpotSupportedMetalsGET(String format) throws ApiException {
        ApiResponse<List<String>> localVarResp = metalsSpotSupportedMetalsGETWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Get list of symbols supported by the spot endpoints
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> metalsSpotSupportedMetalsGETWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSpotSupportedMetalsGETValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of symbols supported by the spot endpoints (asynchronously)
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSpotSupportedMetalsGETAsync(String format, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSpotSupportedMetalsGETValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metalsSupportedCurrenciesMetalsGET
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSupportedCurrenciesMetalsGETCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Metals/supported/currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metalsSupportedCurrenciesMetalsGETValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return metalsSupportedCurrenciesMetalsGETCall(format, _callback);

    }

    /**
     * Get list of currencies supported by metals endpoints for currency conversion
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<String> metalsSupportedCurrenciesMetalsGET(String format) throws ApiException {
        ApiResponse<List<String>> localVarResp = metalsSupportedCurrenciesMetalsGETWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Get list of currencies supported by metals endpoints for currency conversion
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> metalsSupportedCurrenciesMetalsGETWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = metalsSupportedCurrenciesMetalsGETValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of currencies supported by metals endpoints for currency conversion (asynchronously)
     * 
     * @param format to override content negotiation specify a value of json or xml (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metalsSupportedCurrenciesMetalsGETAsync(String format, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metalsSupportedCurrenciesMetalsGETValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
