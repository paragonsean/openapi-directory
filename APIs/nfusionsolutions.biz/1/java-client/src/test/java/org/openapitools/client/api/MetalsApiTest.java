/*
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IntervalCollectionResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SummaryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetalsApi
 */
@Disabled
public class MetalsApiTest {

    private final MetalsApi api = new MetalsApi();

    /**
     * Get historical benchmark prices for requested metals
     *
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsBenchmarkHistoryGETTest() throws ApiException {
        String metals = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        String interval = null;
        Boolean historicalfx = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        List<IntervalCollectionResponse> response = api.metalsBenchmarkHistoryGET(metals, start, end, interval, historicalfx, currency, unitofmeasure, format);
        // TODO: test validations
    }

    /**
     * Get latest Benchmark prices for requested metals
     *
     * Benchmark price information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsBenchmarkSummaryGETTest() throws ApiException {
        String metals = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        List<SummaryResponse> response = api.metalsBenchmarkSummaryGET(metals, currency, unitofmeasure, format);
        // TODO: test validations
    }

    /**
     * Get list of symbols supported by the benchmark endpoints
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsBenchmarkSupportedMetalsGETTest() throws ApiException {
        String format = null;
        List<String> response = api.metalsBenchmarkSupportedMetalsGET(format);
        // TODO: test validations
    }

    /**
     * Get Historical Annual Performance for requested metals
     *
     * Annual Historical Performance information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotAnnualHistoricalPerformanceGETTest() throws ApiException {
        String metals = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        Integer years = null;
        List<IntervalCollectionResponse> response = api.metalsSpotAnnualHistoricalPerformanceGET(metals, currency, unitofmeasure, format, years);
        // TODO: test validations
    }

    /**
     * Get Historical Performance for requested metals
     *
     * Historical Performance information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotHistoricalPerformanceGETTest() throws ApiException {
        String metals = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        List<IntervalCollectionResponse> response = api.metalsSpotHistoricalPerformanceGET(metals, currency, unitofmeasure, format);
        // TODO: test validations
    }

    /**
     * Get historical Spot prices for requested metals
     *
     * Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today&#39;s fx rates to a historical period, or to apply the historical rates from that same time frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotHistoryGETTest() throws ApiException {
        String metals = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        String interval = null;
        Boolean historicalfx = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        List<IntervalCollectionResponse> response = api.metalsSpotHistoryGET(metals, start, end, interval, historicalfx, currency, unitofmeasure, format);
        // TODO: test validations
    }

    /**
     * Get historical Spot Ratio prices for requested metals
     *
     * Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotRatioHistoryGETTest() throws ApiException {
        String pairs = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        String interval = null;
        String format = null;
        List<IntervalCollectionResponse> response = api.metalsSpotRatioHistoryGET(pairs, start, end, interval, format);
        // TODO: test validations
    }

    /**
     * Get latest Spot Summary for requested metal ratios
     *
     * Ratios between prices of two metals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotRatioSummaryGETTest() throws ApiException {
        String pairs = null;
        String format = null;
        List<SummaryResponse> response = api.metalsSpotRatioSummaryGET(pairs, format);
        // TODO: test validations
    }

    /**
     * Get latest Spot Summary for requested metals
     *
     * Current and daily summary information combined into a single quote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotSummaryGETTest() throws ApiException {
        String metals = null;
        String currency = null;
        String unitofmeasure = null;
        String format = null;
        List<SummaryResponse> response = api.metalsSpotSummaryGET(metals, currency, unitofmeasure, format);
        // TODO: test validations
    }

    /**
     * Get list of symbols supported by the spot endpoints
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSpotSupportedMetalsGETTest() throws ApiException {
        String format = null;
        List<String> response = api.metalsSpotSupportedMetalsGET(format);
        // TODO: test validations
    }

    /**
     * Get list of currencies supported by metals endpoints for currency conversion
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metalsSupportedCurrenciesMetalsGETTest() throws ApiException {
        String format = null;
        List<String> response = api.metalsSupportedCurrenciesMetalsGET(format);
        // TODO: test validations
    }

}
