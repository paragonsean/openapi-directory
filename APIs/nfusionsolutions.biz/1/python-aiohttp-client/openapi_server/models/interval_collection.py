# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server import util


class IntervalCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_currency: str=None, intervals: List[Interval]=None, name: str=None, symbol: str=None):
        """IntervalCollection - a model defined in OpenAPI

        :param base_currency: The base_currency of this IntervalCollection.
        :param intervals: The intervals of this IntervalCollection.
        :param name: The name of this IntervalCollection.
        :param symbol: The symbol of this IntervalCollection.
        """
        self.openapi_types = {
            'base_currency': str,
            'intervals': List[Interval],
            'name': str,
            'symbol': str
        }

        self.attribute_map = {
            'base_currency': 'baseCurrency',
            'intervals': 'intervals',
            'name': 'name',
            'symbol': 'symbol'
        }

        self._base_currency = base_currency
        self._intervals = intervals
        self._name = name
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntervalCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntervalCollection of this IntervalCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_currency(self):
        """Gets the base_currency of this IntervalCollection.


        :return: The base_currency of this IntervalCollection.
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this IntervalCollection.


        :param base_currency: The base_currency of this IntervalCollection.
        :type base_currency: str
        """

        self._base_currency = base_currency

    @property
    def intervals(self):
        """Gets the intervals of this IntervalCollection.


        :return: The intervals of this IntervalCollection.
        :rtype: List[Interval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this IntervalCollection.


        :param intervals: The intervals of this IntervalCollection.
        :type intervals: List[Interval]
        """

        self._intervals = intervals

    @property
    def name(self):
        """Gets the name of this IntervalCollection.


        :return: The name of this IntervalCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntervalCollection.


        :param name: The name of this IntervalCollection.
        :type name: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this IntervalCollection.


        :return: The symbol of this IntervalCollection.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IntervalCollection.


        :param symbol: The symbol of this IntervalCollection.
        :type symbol: str
        """

        self._symbol = symbol
