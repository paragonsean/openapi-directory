# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval_collection import IntervalCollection
from openapi_server import util


class IntervalCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: IntervalCollection=None, error: str=None, requested_currency: str=None, requested_symbol: str=None, requested_unit_of_measure: str=None, success: bool=None):
        """IntervalCollectionResponse - a model defined in OpenAPI

        :param data: The data of this IntervalCollectionResponse.
        :param error: The error of this IntervalCollectionResponse.
        :param requested_currency: The requested_currency of this IntervalCollectionResponse.
        :param requested_symbol: The requested_symbol of this IntervalCollectionResponse.
        :param requested_unit_of_measure: The requested_unit_of_measure of this IntervalCollectionResponse.
        :param success: The success of this IntervalCollectionResponse.
        """
        self.openapi_types = {
            'data': IntervalCollection,
            'error': str,
            'requested_currency': str,
            'requested_symbol': str,
            'requested_unit_of_measure': str,
            'success': bool
        }

        self.attribute_map = {
            'data': 'data',
            'error': 'error',
            'requested_currency': 'requestedCurrency',
            'requested_symbol': 'requestedSymbol',
            'requested_unit_of_measure': 'requestedUnitOfMeasure',
            'success': 'success'
        }

        self._data = data
        self._error = error
        self._requested_currency = requested_currency
        self._requested_symbol = requested_symbol
        self._requested_unit_of_measure = requested_unit_of_measure
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntervalCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntervalCollectionResponse of this IntervalCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this IntervalCollectionResponse.


        :return: The data of this IntervalCollectionResponse.
        :rtype: IntervalCollection
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IntervalCollectionResponse.


        :param data: The data of this IntervalCollectionResponse.
        :type data: IntervalCollection
        """

        self._data = data

    @property
    def error(self):
        """Gets the error of this IntervalCollectionResponse.


        :return: The error of this IntervalCollectionResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IntervalCollectionResponse.


        :param error: The error of this IntervalCollectionResponse.
        :type error: str
        """

        self._error = error

    @property
    def requested_currency(self):
        """Gets the requested_currency of this IntervalCollectionResponse.


        :return: The requested_currency of this IntervalCollectionResponse.
        :rtype: str
        """
        return self._requested_currency

    @requested_currency.setter
    def requested_currency(self, requested_currency):
        """Sets the requested_currency of this IntervalCollectionResponse.


        :param requested_currency: The requested_currency of this IntervalCollectionResponse.
        :type requested_currency: str
        """

        self._requested_currency = requested_currency

    @property
    def requested_symbol(self):
        """Gets the requested_symbol of this IntervalCollectionResponse.


        :return: The requested_symbol of this IntervalCollectionResponse.
        :rtype: str
        """
        return self._requested_symbol

    @requested_symbol.setter
    def requested_symbol(self, requested_symbol):
        """Sets the requested_symbol of this IntervalCollectionResponse.


        :param requested_symbol: The requested_symbol of this IntervalCollectionResponse.
        :type requested_symbol: str
        """

        self._requested_symbol = requested_symbol

    @property
    def requested_unit_of_measure(self):
        """Gets the requested_unit_of_measure of this IntervalCollectionResponse.


        :return: The requested_unit_of_measure of this IntervalCollectionResponse.
        :rtype: str
        """
        return self._requested_unit_of_measure

    @requested_unit_of_measure.setter
    def requested_unit_of_measure(self, requested_unit_of_measure):
        """Sets the requested_unit_of_measure of this IntervalCollectionResponse.


        :param requested_unit_of_measure: The requested_unit_of_measure of this IntervalCollectionResponse.
        :type requested_unit_of_measure: str
        """

        self._requested_unit_of_measure = requested_unit_of_measure

    @property
    def success(self):
        """Gets the success of this IntervalCollectionResponse.


        :return: The success of this IntervalCollectionResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this IntervalCollectionResponse.


        :param success: The success of this IntervalCollectionResponse.
        :type success: bool
        """

        self._success = success
