# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Interval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change: float=None, change_percent: float=None, end: datetime=None, high: float=None, last: float=None, low: float=None, open: float=None, start: datetime=None):
        """Interval - a model defined in OpenAPI

        :param change: The change of this Interval.
        :param change_percent: The change_percent of this Interval.
        :param end: The end of this Interval.
        :param high: The high of this Interval.
        :param last: The last of this Interval.
        :param low: The low of this Interval.
        :param open: The open of this Interval.
        :param start: The start of this Interval.
        """
        self.openapi_types = {
            'change': float,
            'change_percent': float,
            'end': datetime,
            'high': float,
            'last': float,
            'low': float,
            'open': float,
            'start': datetime
        }

        self.attribute_map = {
            'change': 'change',
            'change_percent': 'changePercent',
            'end': 'end',
            'high': 'high',
            'last': 'last',
            'low': 'low',
            'open': 'open',
            'start': 'start'
        }

        self._change = change
        self._change_percent = change_percent
        self._end = end
        self._high = high
        self._last = last
        self._low = low
        self._open = open
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interval of this Interval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change(self):
        """Gets the change of this Interval.


        :return: The change of this Interval.
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this Interval.


        :param change: The change of this Interval.
        :type change: float
        """

        self._change = change

    @property
    def change_percent(self):
        """Gets the change_percent of this Interval.


        :return: The change_percent of this Interval.
        :rtype: float
        """
        return self._change_percent

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this Interval.


        :param change_percent: The change_percent of this Interval.
        :type change_percent: float
        """

        self._change_percent = change_percent

    @property
    def end(self):
        """Gets the end of this Interval.


        :return: The end of this Interval.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Interval.


        :param end: The end of this Interval.
        :type end: datetime
        """

        self._end = end

    @property
    def high(self):
        """Gets the high of this Interval.


        :return: The high of this Interval.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this Interval.


        :param high: The high of this Interval.
        :type high: float
        """

        self._high = high

    @property
    def last(self):
        """Gets the last of this Interval.


        :return: The last of this Interval.
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Interval.


        :param last: The last of this Interval.
        :type last: float
        """

        self._last = last

    @property
    def low(self):
        """Gets the low of this Interval.


        :return: The low of this Interval.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this Interval.


        :param low: The low of this Interval.
        :type low: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this Interval.


        :return: The open of this Interval.
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Interval.


        :param open: The open of this Interval.
        :type open: float
        """

        self._open = open

    @property
    def start(self):
        """Gets the start of this Interval.


        :return: The start of this Interval.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Interval.


        :param start: The start of this Interval.
        :type start: datetime
        """

        self._start = start
