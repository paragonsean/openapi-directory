/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary::OAISummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary::OAISummary() {
    this->initializeModel();
}

OAISummary::~OAISummary() {}

void OAISummary::initializeModel() {

    m_ask_isSet = false;
    m_ask_isValid = false;

    m_base_currency_isSet = false;
    m_base_currency_isValid = false;

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_fifty_two_week_high_isSet = false;
    m_fifty_two_week_high_isValid = false;

    m_fifty_two_week_low_isSet = false;
    m_fifty_two_week_low_isValid = false;

    m_fifty_two_week_percent_change_isSet = false;
    m_fifty_two_week_percent_change_isValid = false;

    m_four_week_percent_change_isSet = false;
    m_four_week_percent_change_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_one_day_change_isSet = false;
    m_one_day_change_isValid = false;

    m_one_day_percent_change_isSet = false;
    m_one_day_percent_change_isValid = false;

    m_one_day_value_isSet = false;
    m_one_day_value_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_twelve_week_percent_change_isSet = false;
    m_twelve_week_percent_change_isValid = false;

    m_year_to_date_percent_change_isSet = false;
    m_year_to_date_percent_change_isValid = false;
}

void OAISummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary::fromJsonObject(QJsonObject json) {

    m_ask_isValid = ::OpenAPI::fromJsonValue(m_ask, json[QString("ask")]);
    m_ask_isSet = !json[QString("ask")].isNull() && m_ask_isValid;

    m_base_currency_isValid = ::OpenAPI::fromJsonValue(m_base_currency, json[QString("baseCurrency")]);
    m_base_currency_isSet = !json[QString("baseCurrency")].isNull() && m_base_currency_isValid;

    m_bid_isValid = ::OpenAPI::fromJsonValue(m_bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;

    m_fifty_two_week_high_isValid = ::OpenAPI::fromJsonValue(m_fifty_two_week_high, json[QString("fiftyTwoWeekHigh")]);
    m_fifty_two_week_high_isSet = !json[QString("fiftyTwoWeekHigh")].isNull() && m_fifty_two_week_high_isValid;

    m_fifty_two_week_low_isValid = ::OpenAPI::fromJsonValue(m_fifty_two_week_low, json[QString("fiftyTwoWeekLow")]);
    m_fifty_two_week_low_isSet = !json[QString("fiftyTwoWeekLow")].isNull() && m_fifty_two_week_low_isValid;

    m_fifty_two_week_percent_change_isValid = ::OpenAPI::fromJsonValue(m_fifty_two_week_percent_change, json[QString("fiftyTwoWeekPercentChange")]);
    m_fifty_two_week_percent_change_isSet = !json[QString("fiftyTwoWeekPercentChange")].isNull() && m_fifty_two_week_percent_change_isValid;

    m_four_week_percent_change_isValid = ::OpenAPI::fromJsonValue(m_four_week_percent_change, json[QString("fourWeekPercentChange")]);
    m_four_week_percent_change_isSet = !json[QString("fourWeekPercentChange")].isNull() && m_four_week_percent_change_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_one_day_change_isValid = ::OpenAPI::fromJsonValue(m_one_day_change, json[QString("oneDayChange")]);
    m_one_day_change_isSet = !json[QString("oneDayChange")].isNull() && m_one_day_change_isValid;

    m_one_day_percent_change_isValid = ::OpenAPI::fromJsonValue(m_one_day_percent_change, json[QString("oneDayPercentChange")]);
    m_one_day_percent_change_isSet = !json[QString("oneDayPercentChange")].isNull() && m_one_day_percent_change_isValid;

    m_one_day_value_isValid = ::OpenAPI::fromJsonValue(m_one_day_value, json[QString("oneDayValue")]);
    m_one_day_value_isSet = !json[QString("oneDayValue")].isNull() && m_one_day_value_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_twelve_week_percent_change_isValid = ::OpenAPI::fromJsonValue(m_twelve_week_percent_change, json[QString("twelveWeekPercentChange")]);
    m_twelve_week_percent_change_isSet = !json[QString("twelveWeekPercentChange")].isNull() && m_twelve_week_percent_change_isValid;

    m_year_to_date_percent_change_isValid = ::OpenAPI::fromJsonValue(m_year_to_date_percent_change, json[QString("yearToDatePercentChange")]);
    m_year_to_date_percent_change_isSet = !json[QString("yearToDatePercentChange")].isNull() && m_year_to_date_percent_change_isValid;
}

QString OAISummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary::asJsonObject() const {
    QJsonObject obj;
    if (m_ask_isSet) {
        obj.insert(QString("ask"), ::OpenAPI::toJsonValue(m_ask));
    }
    if (m_base_currency_isSet) {
        obj.insert(QString("baseCurrency"), ::OpenAPI::toJsonValue(m_base_currency));
    }
    if (m_bid_isSet) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(m_bid));
    }
    if (m_fifty_two_week_high_isSet) {
        obj.insert(QString("fiftyTwoWeekHigh"), ::OpenAPI::toJsonValue(m_fifty_two_week_high));
    }
    if (m_fifty_two_week_low_isSet) {
        obj.insert(QString("fiftyTwoWeekLow"), ::OpenAPI::toJsonValue(m_fifty_two_week_low));
    }
    if (m_fifty_two_week_percent_change_isSet) {
        obj.insert(QString("fiftyTwoWeekPercentChange"), ::OpenAPI::toJsonValue(m_fifty_two_week_percent_change));
    }
    if (m_four_week_percent_change_isSet) {
        obj.insert(QString("fourWeekPercentChange"), ::OpenAPI::toJsonValue(m_four_week_percent_change));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_one_day_change_isSet) {
        obj.insert(QString("oneDayChange"), ::OpenAPI::toJsonValue(m_one_day_change));
    }
    if (m_one_day_percent_change_isSet) {
        obj.insert(QString("oneDayPercentChange"), ::OpenAPI::toJsonValue(m_one_day_percent_change));
    }
    if (m_one_day_value_isSet) {
        obj.insert(QString("oneDayValue"), ::OpenAPI::toJsonValue(m_one_day_value));
    }
    if (m_open_isSet) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_twelve_week_percent_change_isSet) {
        obj.insert(QString("twelveWeekPercentChange"), ::OpenAPI::toJsonValue(m_twelve_week_percent_change));
    }
    if (m_year_to_date_percent_change_isSet) {
        obj.insert(QString("yearToDatePercentChange"), ::OpenAPI::toJsonValue(m_year_to_date_percent_change));
    }
    return obj;
}

double OAISummary::getAsk() const {
    return m_ask;
}
void OAISummary::setAsk(const double &ask) {
    m_ask = ask;
    m_ask_isSet = true;
}

bool OAISummary::is_ask_Set() const{
    return m_ask_isSet;
}

bool OAISummary::is_ask_Valid() const{
    return m_ask_isValid;
}

QString OAISummary::getBaseCurrency() const {
    return m_base_currency;
}
void OAISummary::setBaseCurrency(const QString &base_currency) {
    m_base_currency = base_currency;
    m_base_currency_isSet = true;
}

bool OAISummary::is_base_currency_Set() const{
    return m_base_currency_isSet;
}

bool OAISummary::is_base_currency_Valid() const{
    return m_base_currency_isValid;
}

double OAISummary::getBid() const {
    return m_bid;
}
void OAISummary::setBid(const double &bid) {
    m_bid = bid;
    m_bid_isSet = true;
}

bool OAISummary::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAISummary::is_bid_Valid() const{
    return m_bid_isValid;
}

double OAISummary::getFiftyTwoWeekHigh() const {
    return m_fifty_two_week_high;
}
void OAISummary::setFiftyTwoWeekHigh(const double &fifty_two_week_high) {
    m_fifty_two_week_high = fifty_two_week_high;
    m_fifty_two_week_high_isSet = true;
}

bool OAISummary::is_fifty_two_week_high_Set() const{
    return m_fifty_two_week_high_isSet;
}

bool OAISummary::is_fifty_two_week_high_Valid() const{
    return m_fifty_two_week_high_isValid;
}

double OAISummary::getFiftyTwoWeekLow() const {
    return m_fifty_two_week_low;
}
void OAISummary::setFiftyTwoWeekLow(const double &fifty_two_week_low) {
    m_fifty_two_week_low = fifty_two_week_low;
    m_fifty_two_week_low_isSet = true;
}

bool OAISummary::is_fifty_two_week_low_Set() const{
    return m_fifty_two_week_low_isSet;
}

bool OAISummary::is_fifty_two_week_low_Valid() const{
    return m_fifty_two_week_low_isValid;
}

double OAISummary::getFiftyTwoWeekPercentChange() const {
    return m_fifty_two_week_percent_change;
}
void OAISummary::setFiftyTwoWeekPercentChange(const double &fifty_two_week_percent_change) {
    m_fifty_two_week_percent_change = fifty_two_week_percent_change;
    m_fifty_two_week_percent_change_isSet = true;
}

bool OAISummary::is_fifty_two_week_percent_change_Set() const{
    return m_fifty_two_week_percent_change_isSet;
}

bool OAISummary::is_fifty_two_week_percent_change_Valid() const{
    return m_fifty_two_week_percent_change_isValid;
}

double OAISummary::getFourWeekPercentChange() const {
    return m_four_week_percent_change;
}
void OAISummary::setFourWeekPercentChange(const double &four_week_percent_change) {
    m_four_week_percent_change = four_week_percent_change;
    m_four_week_percent_change_isSet = true;
}

bool OAISummary::is_four_week_percent_change_Set() const{
    return m_four_week_percent_change_isSet;
}

bool OAISummary::is_four_week_percent_change_Valid() const{
    return m_four_week_percent_change_isValid;
}

double OAISummary::getHigh() const {
    return m_high;
}
void OAISummary::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAISummary::is_high_Set() const{
    return m_high_isSet;
}

bool OAISummary::is_high_Valid() const{
    return m_high_isValid;
}

double OAISummary::getLast() const {
    return m_last;
}
void OAISummary::setLast(const double &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAISummary::is_last_Set() const{
    return m_last_isSet;
}

bool OAISummary::is_last_Valid() const{
    return m_last_isValid;
}

double OAISummary::getLow() const {
    return m_low;
}
void OAISummary::setLow(const double &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAISummary::is_low_Set() const{
    return m_low_isSet;
}

bool OAISummary::is_low_Valid() const{
    return m_low_isValid;
}

double OAISummary::getOneDayChange() const {
    return m_one_day_change;
}
void OAISummary::setOneDayChange(const double &one_day_change) {
    m_one_day_change = one_day_change;
    m_one_day_change_isSet = true;
}

bool OAISummary::is_one_day_change_Set() const{
    return m_one_day_change_isSet;
}

bool OAISummary::is_one_day_change_Valid() const{
    return m_one_day_change_isValid;
}

double OAISummary::getOneDayPercentChange() const {
    return m_one_day_percent_change;
}
void OAISummary::setOneDayPercentChange(const double &one_day_percent_change) {
    m_one_day_percent_change = one_day_percent_change;
    m_one_day_percent_change_isSet = true;
}

bool OAISummary::is_one_day_percent_change_Set() const{
    return m_one_day_percent_change_isSet;
}

bool OAISummary::is_one_day_percent_change_Valid() const{
    return m_one_day_percent_change_isValid;
}

double OAISummary::getOneDayValue() const {
    return m_one_day_value;
}
void OAISummary::setOneDayValue(const double &one_day_value) {
    m_one_day_value = one_day_value;
    m_one_day_value_isSet = true;
}

bool OAISummary::is_one_day_value_Set() const{
    return m_one_day_value_isSet;
}

bool OAISummary::is_one_day_value_Valid() const{
    return m_one_day_value_isValid;
}

double OAISummary::getOpen() const {
    return m_open;
}
void OAISummary::setOpen(const double &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAISummary::is_open_Set() const{
    return m_open_isSet;
}

bool OAISummary::is_open_Valid() const{
    return m_open_isValid;
}

QString OAISummary::getSymbol() const {
    return m_symbol;
}
void OAISummary::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAISummary::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAISummary::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QDateTime OAISummary::getTimeStamp() const {
    return m_time_stamp;
}
void OAISummary::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAISummary::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAISummary::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

double OAISummary::getTwelveWeekPercentChange() const {
    return m_twelve_week_percent_change;
}
void OAISummary::setTwelveWeekPercentChange(const double &twelve_week_percent_change) {
    m_twelve_week_percent_change = twelve_week_percent_change;
    m_twelve_week_percent_change_isSet = true;
}

bool OAISummary::is_twelve_week_percent_change_Set() const{
    return m_twelve_week_percent_change_isSet;
}

bool OAISummary::is_twelve_week_percent_change_Valid() const{
    return m_twelve_week_percent_change_isValid;
}

double OAISummary::getYearToDatePercentChange() const {
    return m_year_to_date_percent_change;
}
void OAISummary::setYearToDatePercentChange(const double &year_to_date_percent_change) {
    m_year_to_date_percent_change = year_to_date_percent_change;
    m_year_to_date_percent_change_isSet = true;
}

bool OAISummary::is_year_to_date_percent_change_Set() const{
    return m_year_to_date_percent_change_isSet;
}

bool OAISummary::is_year_to_date_percent_change_Valid() const{
    return m_year_to_date_percent_change_isValid;
}

bool OAISummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifty_two_week_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifty_two_week_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifty_two_week_percent_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_four_week_percent_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_day_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_day_percent_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_day_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twelve_week_percent_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_to_date_percent_change_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
