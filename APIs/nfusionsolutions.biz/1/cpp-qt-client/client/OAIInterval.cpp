/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInterval::OAIInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInterval::OAIInterval() {
    this->initializeModel();
}

OAIInterval::~OAIInterval() {}

void OAIInterval::initializeModel() {

    m_change_isSet = false;
    m_change_isValid = false;

    m_change_percent_isSet = false;
    m_change_percent_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInterval::fromJsonObject(QJsonObject json) {

    m_change_isValid = ::OpenAPI::fromJsonValue(m_change, json[QString("change")]);
    m_change_isSet = !json[QString("change")].isNull() && m_change_isValid;

    m_change_percent_isValid = ::OpenAPI::fromJsonValue(m_change_percent, json[QString("changePercent")]);
    m_change_percent_isSet = !json[QString("changePercent")].isNull() && m_change_percent_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_change_isSet) {
        obj.insert(QString("change"), ::OpenAPI::toJsonValue(m_change));
    }
    if (m_change_percent_isSet) {
        obj.insert(QString("changePercent"), ::OpenAPI::toJsonValue(m_change_percent));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_open_isSet) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

double OAIInterval::getChange() const {
    return m_change;
}
void OAIInterval::setChange(const double &change) {
    m_change = change;
    m_change_isSet = true;
}

bool OAIInterval::is_change_Set() const{
    return m_change_isSet;
}

bool OAIInterval::is_change_Valid() const{
    return m_change_isValid;
}

double OAIInterval::getChangePercent() const {
    return m_change_percent;
}
void OAIInterval::setChangePercent(const double &change_percent) {
    m_change_percent = change_percent;
    m_change_percent_isSet = true;
}

bool OAIInterval::is_change_percent_Set() const{
    return m_change_percent_isSet;
}

bool OAIInterval::is_change_percent_Valid() const{
    return m_change_percent_isValid;
}

QDateTime OAIInterval::getEnd() const {
    return m_end;
}
void OAIInterval::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIInterval::is_end_Set() const{
    return m_end_isSet;
}

bool OAIInterval::is_end_Valid() const{
    return m_end_isValid;
}

double OAIInterval::getHigh() const {
    return m_high;
}
void OAIInterval::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIInterval::is_high_Set() const{
    return m_high_isSet;
}

bool OAIInterval::is_high_Valid() const{
    return m_high_isValid;
}

double OAIInterval::getLast() const {
    return m_last;
}
void OAIInterval::setLast(const double &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIInterval::is_last_Set() const{
    return m_last_isSet;
}

bool OAIInterval::is_last_Valid() const{
    return m_last_isValid;
}

double OAIInterval::getLow() const {
    return m_low;
}
void OAIInterval::setLow(const double &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIInterval::is_low_Set() const{
    return m_low_isSet;
}

bool OAIInterval::is_low_Valid() const{
    return m_low_isValid;
}

double OAIInterval::getOpen() const {
    return m_open;
}
void OAIInterval::setOpen(const double &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIInterval::is_open_Set() const{
    return m_open_isSet;
}

bool OAIInterval::is_open_Valid() const{
    return m_open_isValid;
}

QDateTime OAIInterval::getStart() const {
    return m_start;
}
void OAIInterval::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIInterval::is_start_Set() const{
    return m_start_isSet;
}

bool OAIInterval::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
