/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISummary.h
 *
 * 
 */

#ifndef OAISummary_H
#define OAISummary_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISummary : public OAIObject {
public:
    OAISummary();
    OAISummary(QString json);
    ~OAISummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAsk() const;
    void setAsk(const double &ask);
    bool is_ask_Set() const;
    bool is_ask_Valid() const;

    QString getBaseCurrency() const;
    void setBaseCurrency(const QString &base_currency);
    bool is_base_currency_Set() const;
    bool is_base_currency_Valid() const;

    double getBid() const;
    void setBid(const double &bid);
    bool is_bid_Set() const;
    bool is_bid_Valid() const;

    double getFiftyTwoWeekHigh() const;
    void setFiftyTwoWeekHigh(const double &fifty_two_week_high);
    bool is_fifty_two_week_high_Set() const;
    bool is_fifty_two_week_high_Valid() const;

    double getFiftyTwoWeekLow() const;
    void setFiftyTwoWeekLow(const double &fifty_two_week_low);
    bool is_fifty_two_week_low_Set() const;
    bool is_fifty_two_week_low_Valid() const;

    double getFiftyTwoWeekPercentChange() const;
    void setFiftyTwoWeekPercentChange(const double &fifty_two_week_percent_change);
    bool is_fifty_two_week_percent_change_Set() const;
    bool is_fifty_two_week_percent_change_Valid() const;

    double getFourWeekPercentChange() const;
    void setFourWeekPercentChange(const double &four_week_percent_change);
    bool is_four_week_percent_change_Set() const;
    bool is_four_week_percent_change_Valid() const;

    double getHigh() const;
    void setHigh(const double &high);
    bool is_high_Set() const;
    bool is_high_Valid() const;

    double getLast() const;
    void setLast(const double &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    double getLow() const;
    void setLow(const double &low);
    bool is_low_Set() const;
    bool is_low_Valid() const;

    double getOneDayChange() const;
    void setOneDayChange(const double &one_day_change);
    bool is_one_day_change_Set() const;
    bool is_one_day_change_Valid() const;

    double getOneDayPercentChange() const;
    void setOneDayPercentChange(const double &one_day_percent_change);
    bool is_one_day_percent_change_Set() const;
    bool is_one_day_percent_change_Valid() const;

    double getOneDayValue() const;
    void setOneDayValue(const double &one_day_value);
    bool is_one_day_value_Set() const;
    bool is_one_day_value_Valid() const;

    double getOpen() const;
    void setOpen(const double &open);
    bool is_open_Set() const;
    bool is_open_Valid() const;

    QString getSymbol() const;
    void setSymbol(const QString &symbol);
    bool is_symbol_Set() const;
    bool is_symbol_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    double getTwelveWeekPercentChange() const;
    void setTwelveWeekPercentChange(const double &twelve_week_percent_change);
    bool is_twelve_week_percent_change_Set() const;
    bool is_twelve_week_percent_change_Valid() const;

    double getYearToDatePercentChange() const;
    void setYearToDatePercentChange(const double &year_to_date_percent_change);
    bool is_year_to_date_percent_change_Set() const;
    bool is_year_to_date_percent_change_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_ask;
    bool m_ask_isSet;
    bool m_ask_isValid;

    QString m_base_currency;
    bool m_base_currency_isSet;
    bool m_base_currency_isValid;

    double m_bid;
    bool m_bid_isSet;
    bool m_bid_isValid;

    double m_fifty_two_week_high;
    bool m_fifty_two_week_high_isSet;
    bool m_fifty_two_week_high_isValid;

    double m_fifty_two_week_low;
    bool m_fifty_two_week_low_isSet;
    bool m_fifty_two_week_low_isValid;

    double m_fifty_two_week_percent_change;
    bool m_fifty_two_week_percent_change_isSet;
    bool m_fifty_two_week_percent_change_isValid;

    double m_four_week_percent_change;
    bool m_four_week_percent_change_isSet;
    bool m_four_week_percent_change_isValid;

    double m_high;
    bool m_high_isSet;
    bool m_high_isValid;

    double m_last;
    bool m_last_isSet;
    bool m_last_isValid;

    double m_low;
    bool m_low_isSet;
    bool m_low_isValid;

    double m_one_day_change;
    bool m_one_day_change_isSet;
    bool m_one_day_change_isValid;

    double m_one_day_percent_change;
    bool m_one_day_percent_change_isSet;
    bool m_one_day_percent_change_isValid;

    double m_one_day_value;
    bool m_one_day_value_isSet;
    bool m_one_day_value_isValid;

    double m_open;
    bool m_open_isSet;
    bool m_open_isValid;

    QString m_symbol;
    bool m_symbol_isSet;
    bool m_symbol_isValid;

    QDateTime m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;

    double m_twelve_week_percent_change;
    bool m_twelve_week_percent_change_isSet;
    bool m_twelve_week_percent_change_isValid;

    double m_year_to_date_percent_change;
    bool m_year_to_date_percent_change_isSet;
    bool m_year_to_date_percent_change_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISummary)

#endif // OAISummary_H
