/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntervalCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntervalCollection::OAIIntervalCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntervalCollection::OAIIntervalCollection() {
    this->initializeModel();
}

OAIIntervalCollection::~OAIIntervalCollection() {}

void OAIIntervalCollection::initializeModel() {

    m_base_currency_isSet = false;
    m_base_currency_isValid = false;

    m_intervals_isSet = false;
    m_intervals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIIntervalCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntervalCollection::fromJsonObject(QJsonObject json) {

    m_base_currency_isValid = ::OpenAPI::fromJsonValue(m_base_currency, json[QString("baseCurrency")]);
    m_base_currency_isSet = !json[QString("baseCurrency")].isNull() && m_base_currency_isValid;

    m_intervals_isValid = ::OpenAPI::fromJsonValue(m_intervals, json[QString("intervals")]);
    m_intervals_isSet = !json[QString("intervals")].isNull() && m_intervals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIIntervalCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntervalCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_base_currency_isSet) {
        obj.insert(QString("baseCurrency"), ::OpenAPI::toJsonValue(m_base_currency));
    }
    if (m_intervals.size() > 0) {
        obj.insert(QString("intervals"), ::OpenAPI::toJsonValue(m_intervals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIIntervalCollection::getBaseCurrency() const {
    return m_base_currency;
}
void OAIIntervalCollection::setBaseCurrency(const QString &base_currency) {
    m_base_currency = base_currency;
    m_base_currency_isSet = true;
}

bool OAIIntervalCollection::is_base_currency_Set() const{
    return m_base_currency_isSet;
}

bool OAIIntervalCollection::is_base_currency_Valid() const{
    return m_base_currency_isValid;
}

QList<OAIInterval> OAIIntervalCollection::getIntervals() const {
    return m_intervals;
}
void OAIIntervalCollection::setIntervals(const QList<OAIInterval> &intervals) {
    m_intervals = intervals;
    m_intervals_isSet = true;
}

bool OAIIntervalCollection::is_intervals_Set() const{
    return m_intervals_isSet;
}

bool OAIIntervalCollection::is_intervals_Valid() const{
    return m_intervals_isValid;
}

QString OAIIntervalCollection::getName() const {
    return m_name;
}
void OAIIntervalCollection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntervalCollection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntervalCollection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIntervalCollection::getSymbol() const {
    return m_symbol;
}
void OAIIntervalCollection::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIIntervalCollection::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIIntervalCollection::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIIntervalCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intervals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntervalCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
