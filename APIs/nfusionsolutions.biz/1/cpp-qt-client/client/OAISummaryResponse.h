/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISummaryResponse.h
 *
 * 
 */

#ifndef OAISummaryResponse_H
#define OAISummaryResponse_H

#include <QJsonObject>

#include "OAISummary.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISummary;

class OAISummaryResponse : public OAIObject {
public:
    OAISummaryResponse();
    OAISummaryResponse(QString json);
    ~OAISummaryResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISummary getData() const;
    void setData(const OAISummary &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getRequestedCurrency() const;
    void setRequestedCurrency(const QString &requested_currency);
    bool is_requested_currency_Set() const;
    bool is_requested_currency_Valid() const;

    QString getRequestedSymbol() const;
    void setRequestedSymbol(const QString &requested_symbol);
    bool is_requested_symbol_Set() const;
    bool is_requested_symbol_Valid() const;

    QString getRequestedUnitOfMeasure() const;
    void setRequestedUnitOfMeasure(const QString &requested_unit_of_measure);
    bool is_requested_unit_of_measure_Set() const;
    bool is_requested_unit_of_measure_Valid() const;

    bool isSuccess() const;
    void setSuccess(const bool &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISummary m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_requested_currency;
    bool m_requested_currency_isSet;
    bool m_requested_currency_isValid;

    QString m_requested_symbol;
    bool m_requested_symbol_isSet;
    bool m_requested_symbol_isValid;

    QString m_requested_unit_of_measure;
    bool m_requested_unit_of_measure_isSet;
    bool m_requested_unit_of_measure_isValid;

    bool m_success;
    bool m_success_isSet;
    bool m_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISummaryResponse)

#endif // OAISummaryResponse_H
