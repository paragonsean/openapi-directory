/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICurrenciesApi_H
#define OAI_OAICurrenciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIntervalCollectionResponse.h"
#include "OAIRateResponse.h"
#include "OAISummaryResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICurrenciesApi : public QObject {
    Q_OBJECT

public:
    OAICurrenciesApi(const int timeOut = 0);
    ~OAICurrenciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pairs QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void currenciesHistoryGET(const QString &pairs, const QDateTime &start, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pairs QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void currenciesRateGET(const QString &pairs, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pairs QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void currenciesSummaryGET(const QString &pairs, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void currenciesSupportedCurrenciesHistoryGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void currenciesSupportedCurrenciesRateGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void currenciesSupportedCurrenciesSummaryGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void currenciesHistoryGETCallback(OAIHttpRequestWorker *worker);
    void currenciesRateGETCallback(OAIHttpRequestWorker *worker);
    void currenciesSummaryGETCallback(OAIHttpRequestWorker *worker);
    void currenciesSupportedCurrenciesHistoryGETCallback(OAIHttpRequestWorker *worker);
    void currenciesSupportedCurrenciesRateGETCallback(OAIHttpRequestWorker *worker);
    void currenciesSupportedCurrenciesSummaryGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void currenciesHistoryGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void currenciesRateGETSignal(QList<OAIRateResponse> summary);
    void currenciesSummaryGETSignal(QList<OAISummaryResponse> summary);
    void currenciesSupportedCurrenciesHistoryGETSignal(QList<QString> summary);
    void currenciesSupportedCurrenciesRateGETSignal(QList<QString> summary);
    void currenciesSupportedCurrenciesSummaryGETSignal(QList<QString> summary);


    void currenciesHistoryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void currenciesRateGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIRateResponse> summary);
    void currenciesSummaryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISummaryResponse> summary);
    void currenciesSupportedCurrenciesHistoryGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void currenciesSupportedCurrenciesRateGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void currenciesSupportedCurrenciesSummaryGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use currenciesHistoryGETSignalError() instead")
    void currenciesHistoryGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesHistoryGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesRateGETSignalError() instead")
    void currenciesRateGETSignalE(QList<OAIRateResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesRateGETSignalError(QList<OAIRateResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSummaryGETSignalError() instead")
    void currenciesSummaryGETSignalE(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSummaryGETSignalError(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesHistoryGETSignalError() instead")
    void currenciesSupportedCurrenciesHistoryGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesHistoryGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesRateGETSignalError() instead")
    void currenciesSupportedCurrenciesRateGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesRateGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesSummaryGETSignalError() instead")
    void currenciesSupportedCurrenciesSummaryGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesSummaryGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use currenciesHistoryGETSignalErrorFull() instead")
    void currenciesHistoryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesHistoryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesRateGETSignalErrorFull() instead")
    void currenciesRateGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesRateGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSummaryGETSignalErrorFull() instead")
    void currenciesSummaryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSummaryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesHistoryGETSignalErrorFull() instead")
    void currenciesSupportedCurrenciesHistoryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesHistoryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesRateGETSignalErrorFull() instead")
    void currenciesSupportedCurrenciesRateGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesRateGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currenciesSupportedCurrenciesSummaryGETSignalErrorFull() instead")
    void currenciesSupportedCurrenciesSummaryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currenciesSupportedCurrenciesSummaryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
