/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateResponse::OAIRateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateResponse::OAIRateResponse() {
    this->initializeModel();
}

OAIRateResponse::~OAIRateResponse() {}

void OAIRateResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_requested_currency_isSet = false;
    m_requested_currency_isValid = false;

    m_requested_symbol_isSet = false;
    m_requested_symbol_isValid = false;

    m_requested_unit_of_measure_isSet = false;
    m_requested_unit_of_measure_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIRateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_requested_currency_isValid = ::OpenAPI::fromJsonValue(m_requested_currency, json[QString("requestedCurrency")]);
    m_requested_currency_isSet = !json[QString("requestedCurrency")].isNull() && m_requested_currency_isValid;

    m_requested_symbol_isValid = ::OpenAPI::fromJsonValue(m_requested_symbol, json[QString("requestedSymbol")]);
    m_requested_symbol_isSet = !json[QString("requestedSymbol")].isNull() && m_requested_symbol_isValid;

    m_requested_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_requested_unit_of_measure, json[QString("requestedUnitOfMeasure")]);
    m_requested_unit_of_measure_isSet = !json[QString("requestedUnitOfMeasure")].isNull() && m_requested_unit_of_measure_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIRateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_requested_currency_isSet) {
        obj.insert(QString("requestedCurrency"), ::OpenAPI::toJsonValue(m_requested_currency));
    }
    if (m_requested_symbol_isSet) {
        obj.insert(QString("requestedSymbol"), ::OpenAPI::toJsonValue(m_requested_symbol));
    }
    if (m_requested_unit_of_measure_isSet) {
        obj.insert(QString("requestedUnitOfMeasure"), ::OpenAPI::toJsonValue(m_requested_unit_of_measure));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

OAIRate OAIRateResponse::getData() const {
    return m_data;
}
void OAIRateResponse::setData(const OAIRate &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIRateResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIRateResponse::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIRateResponse::getError() const {
    return m_error;
}
void OAIRateResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRateResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRateResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIRateResponse::getRequestedCurrency() const {
    return m_requested_currency;
}
void OAIRateResponse::setRequestedCurrency(const QString &requested_currency) {
    m_requested_currency = requested_currency;
    m_requested_currency_isSet = true;
}

bool OAIRateResponse::is_requested_currency_Set() const{
    return m_requested_currency_isSet;
}

bool OAIRateResponse::is_requested_currency_Valid() const{
    return m_requested_currency_isValid;
}

QString OAIRateResponse::getRequestedSymbol() const {
    return m_requested_symbol;
}
void OAIRateResponse::setRequestedSymbol(const QString &requested_symbol) {
    m_requested_symbol = requested_symbol;
    m_requested_symbol_isSet = true;
}

bool OAIRateResponse::is_requested_symbol_Set() const{
    return m_requested_symbol_isSet;
}

bool OAIRateResponse::is_requested_symbol_Valid() const{
    return m_requested_symbol_isValid;
}

QString OAIRateResponse::getRequestedUnitOfMeasure() const {
    return m_requested_unit_of_measure;
}
void OAIRateResponse::setRequestedUnitOfMeasure(const QString &requested_unit_of_measure) {
    m_requested_unit_of_measure = requested_unit_of_measure;
    m_requested_unit_of_measure_isSet = true;
}

bool OAIRateResponse::is_requested_unit_of_measure_Set() const{
    return m_requested_unit_of_measure_isSet;
}

bool OAIRateResponse::is_requested_unit_of_measure_Valid() const{
    return m_requested_unit_of_measure_isValid;
}

bool OAIRateResponse::isSuccess() const {
    return m_success;
}
void OAIRateResponse::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIRateResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIRateResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIRateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
