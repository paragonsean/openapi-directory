/**
 * nFusion Solutions Market Data API
 * [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@nfusionsolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetalsApi_H
#define OAI_OAIMetalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIntervalCollectionResponse.h"
#include "OAISummaryResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetalsApi : public QObject {
    Q_OBJECT

public:
    OAIMetalsApi(const int timeOut = 0);
    ~OAIMetalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  metals QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  historicalfx bool [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsBenchmarkHistoryGET(const QString &metals, const QDateTime &start, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &historicalfx = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metals QString [required]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsBenchmarkSummaryGET(const QString &metals, const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void metalsBenchmarkSupportedMetalsGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metals QString [required]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  years qint32 [optional]
    */
    virtual void metalsSpotAnnualHistoricalPerformanceGET(const QString &metals, const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &years = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  metals QString [required]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotHistoricalPerformanceGET(const QString &metals, const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metals QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  historicalfx bool [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotHistoryGET(const QString &metals, const QDateTime &start, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &historicalfx = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pairs QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotRatioHistoryGET(const QString &pairs, const QDateTime &start, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pairs QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotRatioSummaryGET(const QString &pairs, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metals QString [required]
    * @param[in]  currency QString [optional]
    * @param[in]  unitofmeasure QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotSummaryGET(const QString &metals, const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unitofmeasure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void metalsSpotSupportedMetalsGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void metalsSupportedCurrenciesMetalsGET(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void metalsBenchmarkHistoryGETCallback(OAIHttpRequestWorker *worker);
    void metalsBenchmarkSummaryGETCallback(OAIHttpRequestWorker *worker);
    void metalsBenchmarkSupportedMetalsGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotAnnualHistoricalPerformanceGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotHistoricalPerformanceGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotHistoryGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotRatioHistoryGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotRatioSummaryGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotSummaryGETCallback(OAIHttpRequestWorker *worker);
    void metalsSpotSupportedMetalsGETCallback(OAIHttpRequestWorker *worker);
    void metalsSupportedCurrenciesMetalsGETCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void metalsBenchmarkHistoryGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void metalsBenchmarkSummaryGETSignal(QList<OAISummaryResponse> summary);
    void metalsBenchmarkSupportedMetalsGETSignal(QList<QString> summary);
    void metalsSpotAnnualHistoricalPerformanceGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotHistoricalPerformanceGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotHistoryGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotRatioHistoryGETSignal(QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotRatioSummaryGETSignal(QList<OAISummaryResponse> summary);
    void metalsSpotSummaryGETSignal(QList<OAISummaryResponse> summary);
    void metalsSpotSupportedMetalsGETSignal(QList<QString> summary);
    void metalsSupportedCurrenciesMetalsGETSignal(QList<QString> summary);


    void metalsBenchmarkHistoryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void metalsBenchmarkSummaryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISummaryResponse> summary);
    void metalsBenchmarkSupportedMetalsGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void metalsSpotAnnualHistoricalPerformanceGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotHistoricalPerformanceGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotHistoryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotRatioHistoryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntervalCollectionResponse> summary);
    void metalsSpotRatioSummaryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISummaryResponse> summary);
    void metalsSpotSummaryGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISummaryResponse> summary);
    void metalsSpotSupportedMetalsGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void metalsSupportedCurrenciesMetalsGETSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use metalsBenchmarkHistoryGETSignalError() instead")
    void metalsBenchmarkHistoryGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkHistoryGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsBenchmarkSummaryGETSignalError() instead")
    void metalsBenchmarkSummaryGETSignalE(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkSummaryGETSignalError(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsBenchmarkSupportedMetalsGETSignalError() instead")
    void metalsBenchmarkSupportedMetalsGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkSupportedMetalsGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotAnnualHistoricalPerformanceGETSignalError() instead")
    void metalsSpotAnnualHistoricalPerformanceGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotAnnualHistoricalPerformanceGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotHistoricalPerformanceGETSignalError() instead")
    void metalsSpotHistoricalPerformanceGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotHistoricalPerformanceGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotHistoryGETSignalError() instead")
    void metalsSpotHistoryGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotHistoryGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotRatioHistoryGETSignalError() instead")
    void metalsSpotRatioHistoryGETSignalE(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotRatioHistoryGETSignalError(QList<OAIIntervalCollectionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotRatioSummaryGETSignalError() instead")
    void metalsSpotRatioSummaryGETSignalE(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotRatioSummaryGETSignalError(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotSummaryGETSignalError() instead")
    void metalsSpotSummaryGETSignalE(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotSummaryGETSignalError(QList<OAISummaryResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotSupportedMetalsGETSignalError() instead")
    void metalsSpotSupportedMetalsGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotSupportedMetalsGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSupportedCurrenciesMetalsGETSignalError() instead")
    void metalsSupportedCurrenciesMetalsGETSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSupportedCurrenciesMetalsGETSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use metalsBenchmarkHistoryGETSignalErrorFull() instead")
    void metalsBenchmarkHistoryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkHistoryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsBenchmarkSummaryGETSignalErrorFull() instead")
    void metalsBenchmarkSummaryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkSummaryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsBenchmarkSupportedMetalsGETSignalErrorFull() instead")
    void metalsBenchmarkSupportedMetalsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsBenchmarkSupportedMetalsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotAnnualHistoricalPerformanceGETSignalErrorFull() instead")
    void metalsSpotAnnualHistoricalPerformanceGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotAnnualHistoricalPerformanceGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotHistoricalPerformanceGETSignalErrorFull() instead")
    void metalsSpotHistoricalPerformanceGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotHistoricalPerformanceGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotHistoryGETSignalErrorFull() instead")
    void metalsSpotHistoryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotHistoryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotRatioHistoryGETSignalErrorFull() instead")
    void metalsSpotRatioHistoryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotRatioHistoryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotRatioSummaryGETSignalErrorFull() instead")
    void metalsSpotRatioSummaryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotRatioSummaryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotSummaryGETSignalErrorFull() instead")
    void metalsSpotSummaryGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotSummaryGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSpotSupportedMetalsGETSignalErrorFull() instead")
    void metalsSpotSupportedMetalsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSpotSupportedMetalsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metalsSupportedCurrenciesMetalsGETSignalErrorFull() instead")
    void metalsSupportedCurrenciesMetalsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metalsSupportedCurrenciesMetalsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
