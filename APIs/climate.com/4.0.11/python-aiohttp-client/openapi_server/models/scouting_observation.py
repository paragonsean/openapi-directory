# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry import Geometry
from openapi_server.models.scouting_tag import ScoutingTag
from openapi_server import util


class ScoutingObservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, field_ids: List[str]=None, id: str=None, location: Geometry=None, location_display_color: str=None, note: str=None, start_time: datetime=None, status: str=None, tags: List[ScoutingTag]=None, timespan: str=None, title: str=None, updated_at: datetime=None):
        """ScoutingObservation - a model defined in OpenAPI

        :param end_time: The end_time of this ScoutingObservation.
        :param field_ids: The field_ids of this ScoutingObservation.
        :param id: The id of this ScoutingObservation.
        :param location: The location of this ScoutingObservation.
        :param location_display_color: The location_display_color of this ScoutingObservation.
        :param note: The note of this ScoutingObservation.
        :param start_time: The start_time of this ScoutingObservation.
        :param status: The status of this ScoutingObservation.
        :param tags: The tags of this ScoutingObservation.
        :param timespan: The timespan of this ScoutingObservation.
        :param title: The title of this ScoutingObservation.
        :param updated_at: The updated_at of this ScoutingObservation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'field_ids': List[str],
            'id': str,
            'location': Geometry,
            'location_display_color': str,
            'note': str,
            'start_time': datetime,
            'status': str,
            'tags': List[ScoutingTag],
            'timespan': str,
            'title': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'field_ids': 'fieldIds',
            'id': 'id',
            'location': 'location',
            'location_display_color': 'locationDisplayColor',
            'note': 'note',
            'start_time': 'startTime',
            'status': 'status',
            'tags': 'tags',
            'timespan': 'timespan',
            'title': 'title',
            'updated_at': 'updatedAt'
        }

        self._end_time = end_time
        self._field_ids = field_ids
        self._id = id
        self._location = location
        self._location_display_color = location_display_color
        self._note = note
        self._start_time = start_time
        self._status = status
        self._tags = tags
        self._timespan = timespan
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoutingObservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoutingObservation of this ScoutingObservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ScoutingObservation.

        The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :return: The end_time of this ScoutingObservation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScoutingObservation.

        The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :param end_time: The end_time of this ScoutingObservation.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def field_ids(self):
        """Gets the field_ids of this ScoutingObservation.

        Array of field ids associated with this observation.

        :return: The field_ids of this ScoutingObservation.
        :rtype: List[str]
        """
        return self._field_ids

    @field_ids.setter
    def field_ids(self, field_ids):
        """Sets the field_ids of this ScoutingObservation.

        Array of field ids associated with this observation.

        :param field_ids: The field_ids of this ScoutingObservation.
        :type field_ids: List[str]
        """
        if field_ids is None:
            raise ValueError("Invalid value for `field_ids`, must not be `None`")

        self._field_ids = field_ids

    @property
    def id(self):
        """Gets the id of this ScoutingObservation.

        The id of a scouting observation.

        :return: The id of this ScoutingObservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoutingObservation.

        The id of a scouting observation.

        :param id: The id of this ScoutingObservation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this ScoutingObservation.


        :return: The location of this ScoutingObservation.
        :rtype: Geometry
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ScoutingObservation.


        :param location: The location of this ScoutingObservation.
        :type location: Geometry
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def location_display_color(self):
        """Gets the location_display_color of this ScoutingObservation.

        Color of scouting pin assigned in the Climate FieldView app. Limited in the Ux to a set of RGB values. * #307af7 * #38d753 * #b037e4 * #ef3e3e * #f7ec41 * #ff8439 * #808080 

        :return: The location_display_color of this ScoutingObservation.
        :rtype: str
        """
        return self._location_display_color

    @location_display_color.setter
    def location_display_color(self, location_display_color):
        """Sets the location_display_color of this ScoutingObservation.

        Color of scouting pin assigned in the Climate FieldView app. Limited in the Ux to a set of RGB values. * #307af7 * #38d753 * #b037e4 * #ef3e3e * #f7ec41 * #ff8439 * #808080 

        :param location_display_color: The location_display_color of this ScoutingObservation.
        :type location_display_color: str
        """
        allowed_values = ["#307af7", "#38d753", "#b037e4", "#ef3e3e", "#f7ec41", "#ff8439", "#808080"]  # noqa: E501
        if location_display_color not in allowed_values:
            raise ValueError(
                "Invalid value for `location_display_color` ({0}), must be one of {1}"
                .format(location_display_color, allowed_values)
            )

        self._location_display_color = location_display_color

    @property
    def note(self):
        """Gets the note of this ScoutingObservation.

        The text of the scouting observation. Maximum of 4000 characters.

        :return: The note of this ScoutingObservation.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ScoutingObservation.

        The text of the scouting observation. Maximum of 4000 characters.

        :param note: The note of this ScoutingObservation.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def start_time(self):
        """Gets the start_time of this ScoutingObservation.

        The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :return: The start_time of this ScoutingObservation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScoutingObservation.

        The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :param start_time: The start_time of this ScoutingObservation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ScoutingObservation.

        The status of the scouting observation For example : ACTIVE, DELETED

        :return: The status of this ScoutingObservation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoutingObservation.

        The status of the scouting observation For example : ACTIVE, DELETED

        :param status: The status of this ScoutingObservation.
        :type status: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ScoutingObservation.

        For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.

        :return: The tags of this ScoutingObservation.
        :rtype: List[ScoutingTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ScoutingObservation.

        For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.

        :param tags: The tags of this ScoutingObservation.
        :type tags: List[ScoutingTag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def timespan(self):
        """Gets the timespan of this ScoutingObservation.

        Permanent or seasonal

        :return: The timespan of this ScoutingObservation.
        :rtype: str
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this ScoutingObservation.

        Permanent or seasonal

        :param timespan: The timespan of this ScoutingObservation.
        :type timespan: str
        """
        allowed_values = ["PERMANENT", "SEASONAL"]  # noqa: E501
        if timespan not in allowed_values:
            raise ValueError(
                "Invalid value for `timespan` ({0}), must be one of {1}"
                .format(timespan, allowed_values)
            )

        self._timespan = timespan

    @property
    def title(self):
        """Gets the title of this ScoutingObservation.

        The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.

        :return: The title of this ScoutingObservation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoutingObservation.

        The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.

        :param title: The title of this ScoutingObservation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this ScoutingObservation.

        The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :return: The updated_at of this ScoutingObservation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ScoutingObservation.

        The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :param updated_at: The updated_at of this ScoutingObservation.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
