# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoutingObservationAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, id: str=None, length: int=None, status: str=None, updated_at: datetime=None):
        """ScoutingObservationAttachment - a model defined in OpenAPI

        :param content_type: The content_type of this ScoutingObservationAttachment.
        :param id: The id of this ScoutingObservationAttachment.
        :param length: The length of this ScoutingObservationAttachment.
        :param status: The status of this ScoutingObservationAttachment.
        :param updated_at: The updated_at of this ScoutingObservationAttachment.
        """
        self.openapi_types = {
            'content_type': str,
            'id': str,
            'length': int,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'id': 'id',
            'length': 'length',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._content_type = content_type
        self._id = id
        self._length = length
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoutingObservationAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoutingObservationAttachment of this ScoutingObservationAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this ScoutingObservationAttachment.

        The content type of the attachment, e.g. image/png.

        :return: The content_type of this ScoutingObservationAttachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ScoutingObservationAttachment.

        The content type of the attachment, e.g. image/png.

        :param content_type: The content_type of this ScoutingObservationAttachment.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def id(self):
        """Gets the id of this ScoutingObservationAttachment.

        id of the attachment

        :return: The id of this ScoutingObservationAttachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoutingObservationAttachment.

        id of the attachment

        :param id: The id of this ScoutingObservationAttachment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def length(self):
        """Gets the length of this ScoutingObservationAttachment.

        The number of bytes in the attachment.

        :return: The length of this ScoutingObservationAttachment.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ScoutingObservationAttachment.

        The number of bytes in the attachment.

        :param length: The length of this ScoutingObservationAttachment.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def status(self):
        """Gets the status of this ScoutingObservationAttachment.

        The status of the attachment. For example : ACTIVE, DELETED

        :return: The status of this ScoutingObservationAttachment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoutingObservationAttachment.

        The status of the attachment. For example : ACTIVE, DELETED

        :param status: The status of this ScoutingObservationAttachment.
        :type status: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this ScoutingObservationAttachment.

        The time the attachment was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339) 

        :return: The updated_at of this ScoutingObservationAttachment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ScoutingObservationAttachment.

        The time the attachment was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339) 

        :param updated_at: The updated_at of this ScoutingObservationAttachment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
