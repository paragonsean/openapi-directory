# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Export(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, definition: object=None):
        """Export - a model defined in OpenAPI

        :param content_type: The content_type of this Export.
        :param definition: The definition of this Export.
        """
        self.openapi_types = {
            'content_type': str,
            'definition': object
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'definition': 'definition'
        }

        self._content_type = content_type
        self._definition = definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Export':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Export of this Export.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Export.

        Content type representing data being exported (e.g. application/vnd.climate.acrsi.geojson).

        :return: The content_type of this Export.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Export.

        Content type representing data being exported (e.g. application/vnd.climate.acrsi.geojson).

        :param content_type: The content_type of this Export.
        :type content_type: str
        """
        allowed_values = ["application/vnd.climate.acrsi.geojson", "application/vnd.climate.harvest.geojson"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def definition(self):
        """Gets the definition of this Export.

        Additional specifications for a client's data export request, dependent on the content type.

        :return: The definition of this Export.
        :rtype: object
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this Export.

        Additional specifications for a client's data export request, dependent on the content type.

        :param definition: The definition of this Export.
        :type definition: object
        """

        self._definition = definition
