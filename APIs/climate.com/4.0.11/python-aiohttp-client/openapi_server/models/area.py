# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Area(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, q: float=None, u: str=None):
        """Area - a model defined in OpenAPI

        :param q: The q of this Area.
        :param u: The u of this Area.
        """
        self.openapi_types = {
            'q': float,
            'u': str
        }

        self.attribute_map = {
            'q': 'q',
            'u': 'u'
        }

        self._q = q
        self._u = u

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Area':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Area of this Area.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def q(self):
        """Gets the q of this Area.


        :return: The q of this Area.
        :rtype: float
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this Area.


        :param q: The q of this Area.
        :type q: float
        """
        if q is None:
            raise ValueError("Invalid value for `q`, must not be `None`")

        self._q = q

    @property
    def u(self):
        """Gets the u of this Area.


        :return: The u of this Area.
        :rtype: str
        """
        return self._u

    @u.setter
    def u(self, u):
        """Sets the u of this Area.


        :param u: The u of this Area.
        :type u: str
        """
        if u is None:
            raise ValueError("Invalid value for `u`, must not be `None`")

        self._u = u
