# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: str=None, error: str=None, size: int=None, status: str=None, x_next_token: str=None):
        """ExportStatus - a model defined in OpenAPI

        :param checksum: The checksum of this ExportStatus.
        :param error: The error of this ExportStatus.
        :param size: The size of this ExportStatus.
        :param status: The status of this ExportStatus.
        :param x_next_token: The x_next_token of this ExportStatus.
        """
        self.openapi_types = {
            'checksum': str,
            'error': str,
            'size': int,
            'status': str,
            'x_next_token': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'error': 'error',
            'size': 'size',
            'status': 'status',
            'x_next_token': 'xNextToken'
        }

        self._checksum = checksum
        self._error = error
        self._size = size
        self._status = status
        self._x_next_token = x_next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportStatus of this ExportStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this ExportStatus.

        Base64 encoded MD5 hash of the export's contents.

        :return: The checksum of this ExportStatus.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this ExportStatus.

        Base64 encoded MD5 hash of the export's contents.

        :param checksum: The checksum of this ExportStatus.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def error(self):
        """Gets the error of this ExportStatus.

        Message indicating reason for validation failure.

        :return: The error of this ExportStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ExportStatus.

        Message indicating reason for validation failure.

        :param error: The error of this ExportStatus.
        :type error: str
        """

        self._error = error

    @property
    def size(self):
        """Gets the size of this ExportStatus.

        Size of the export's contents in bytes.

        :return: The size of this ExportStatus.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ExportStatus.

        Size of the export's contents in bytes.

        :param size: The size of this ExportStatus.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this ExportStatus.

        Current status of the export request:   * `PROCESSING` - Export request has been received by Climate and is being processed.   * `INVALID` - Export request has failed validity check.   * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.   * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.   * `NO_DATA` - The export request completed successfully but generated no data. 

        :return: The status of this ExportStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExportStatus.

        Current status of the export request:   * `PROCESSING` - Export request has been received by Climate and is being processed.   * `INVALID` - Export request has failed validity check.   * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.   * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.   * `NO_DATA` - The export request completed successfully but generated no data. 

        :param status: The status of this ExportStatus.
        :type status: str
        """
        allowed_values = ["PROCESSING", "INVALID", "EXPIRED", "COMPLETED", "NO_DATA"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def x_next_token(self):
        """Gets the x_next_token of this ExportStatus.

        Token which may be used when executing an identical export in the future, but which only wants export data which was not previously exported. Assume a given field export request matches 12 fields today. And tomorrow it matches 15 fields. By passing the xNextToken in the definition section of tomorrow's field export request, only the 3 additional fields would be exported. Note, all other parameters passed in the definition section must be identical to the original request. 

        :return: The x_next_token of this ExportStatus.
        :rtype: str
        """
        return self._x_next_token

    @x_next_token.setter
    def x_next_token(self, x_next_token):
        """Sets the x_next_token of this ExportStatus.

        Token which may be used when executing an identical export in the future, but which only wants export data which was not previously exported. Assume a given field export request matches 12 fields today. And tomorrow it matches 15 fields. By passing the xNextToken in the definition section of tomorrow's field export request, only the 3 additional fields would be exported. Note, all other parameters passed in the definition section must be identical to the original request. 

        :param x_next_token: The x_next_token of this ExportStatus.
        :type x_next_token: str
        """

        self._x_next_token = x_next_token
