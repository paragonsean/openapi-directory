# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlantingActivitySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, end_time: datetime=None, field_ids: List[str]=None, id: str=None, length: int=None, start_time: datetime=None, updated_at: datetime=None):
        """PlantingActivitySummary - a model defined in OpenAPI

        :param created_at: The created_at of this PlantingActivitySummary.
        :param end_time: The end_time of this PlantingActivitySummary.
        :param field_ids: The field_ids of this PlantingActivitySummary.
        :param id: The id of this PlantingActivitySummary.
        :param length: The length of this PlantingActivitySummary.
        :param start_time: The start_time of this PlantingActivitySummary.
        :param updated_at: The updated_at of this PlantingActivitySummary.
        """
        self.openapi_types = {
            'created_at': datetime,
            'end_time': datetime,
            'field_ids': List[str],
            'id': str,
            'length': int,
            'start_time': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'end_time': 'endTime',
            'field_ids': 'fieldIds',
            'id': 'id',
            'length': 'length',
            'start_time': 'startTime',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._end_time = end_time
        self._field_ids = field_ids
        self._id = id
        self._length = length
        self._start_time = start_time
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlantingActivitySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlantingActivitySummary of this PlantingActivitySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PlantingActivitySummary.

        The time the planting activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :return: The created_at of this PlantingActivitySummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlantingActivitySummary.

        The time the planting activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :param created_at: The created_at of this PlantingActivitySummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def end_time(self):
        """Gets the end_time of this PlantingActivitySummary.

        The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :return: The end_time of this PlantingActivitySummary.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PlantingActivitySummary.

        The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :param end_time: The end_time of this PlantingActivitySummary.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def field_ids(self):
        """Gets the field_ids of this PlantingActivitySummary.

        Array of field ids associated the planting activity.

        :return: The field_ids of this PlantingActivitySummary.
        :rtype: List[str]
        """
        return self._field_ids

    @field_ids.setter
    def field_ids(self, field_ids):
        """Sets the field_ids of this PlantingActivitySummary.

        Array of field ids associated the planting activity.

        :param field_ids: The field_ids of this PlantingActivitySummary.
        :type field_ids: List[str]
        """
        if field_ids is None:
            raise ValueError("Invalid value for `field_ids`, must not be `None`")

        self._field_ids = field_ids

    @property
    def id(self):
        """Gets the id of this PlantingActivitySummary.

        The id of a planting activity.

        :return: The id of this PlantingActivitySummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantingActivitySummary.

        The id of a planting activity.

        :param id: The id of this PlantingActivitySummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def length(self):
        """Gets the length of this PlantingActivitySummary.

        The size in bytes of the raw planting activity file.

        :return: The length of this PlantingActivitySummary.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PlantingActivitySummary.

        The size in bytes of the raw planting activity file.

        :param length: The length of this PlantingActivitySummary.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def start_time(self):
        """Gets the start_time of this PlantingActivitySummary.

        The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :return: The start_time of this PlantingActivitySummary.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PlantingActivitySummary.

        The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).

        :param start_time: The start_time of this PlantingActivitySummary.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def updated_at(self):
        """Gets the updated_at of this PlantingActivitySummary.

        The time the planting activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :return: The updated_at of this PlantingActivitySummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PlantingActivitySummary.

        The time the planting activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).

        :param updated_at: The updated_at of this PlantingActivitySummary.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
