# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Upload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, length: int=None, md5: str=None, metadata: Dict[str, object]=None):
        """Upload - a model defined in OpenAPI

        :param content_type: The content_type of this Upload.
        :param length: The length of this Upload.
        :param md5: The md5 of this Upload.
        :param metadata: The metadata of this Upload.
        """
        self.openapi_types = {
            'content_type': str,
            'length': int,
            'md5': str,
            'metadata': Dict[str, object]
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'length': 'length',
            'md5': 'md5',
            'metadata': 'metadata'
        }

        self._content_type = content_type
        self._length = length
        self._md5 = md5
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Upload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Upload of this Upload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Upload.

        Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)

        :return: The content_type of this Upload.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Upload.

        Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)

        :param content_type: The content_type of this Upload.
        :type content_type: str
        """
        allowed_values = ["image/vnd.climate.thermal.geotiff", "image/vnd.climate.ndvi.geotiff", "image/vnd.climate.rgb.geotiff", "image/vnd.climate.rgb-nir.geotiff", "image/vnd.climate.rgb-cir.geotiff", "image/vnd.climate.waterstress.geotiff", "image/vnd.climate.elevation.geotiff", "image/vnd.climate.raw.geotiff", "application/vnd.climate.field.geojson", "application/vnd.climate.rx.planting.shp", "application/vnd.climate.prescription.zones.shp", "application/vnd.climate.modus.xml", "application/vnd.climate.stand-count.geojson", "application/vnd.climate.weed-count.geojson", "application/vnd.climate.as-applied.zip", "application/vnd.climate.as-planted.zip", "application/vnd.climate.as-harvested.zip"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def length(self):
        """Gets the length of this Upload.

        Content size in bytes

        :return: The length of this Upload.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Upload.

        Content size in bytes

        :param length: The length of this Upload.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def md5(self):
        """Gets the md5 of this Upload.

        Base64 encoded md5 hash of the content

        :return: The md5 of this Upload.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this Upload.

        Base64 encoded md5 hash of the content

        :param md5: The md5 of this Upload.
        :type md5: str
        """
        if md5 is None:
            raise ValueError("Invalid value for `md5`, must not be `None`")

        self._md5 = md5

    @property
    def metadata(self):
        """Gets the metadata of this Upload.


        :return: The metadata of this Upload.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Upload.


        :param metadata: The metadata of this Upload.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata
