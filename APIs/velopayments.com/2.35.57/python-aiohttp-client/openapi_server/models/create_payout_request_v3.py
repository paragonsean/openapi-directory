# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_instruction_v3 import PaymentInstructionV3
from openapi_server import util


class CreatePayoutRequestV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payments: List[PaymentInstructionV3]=None, payout_from_payor_id: str=None, payout_memo: str=None, payout_to_payor_id: str=None):
        """CreatePayoutRequestV3 - a model defined in OpenAPI

        :param payments: The payments of this CreatePayoutRequestV3.
        :param payout_from_payor_id: The payout_from_payor_id of this CreatePayoutRequestV3.
        :param payout_memo: The payout_memo of this CreatePayoutRequestV3.
        :param payout_to_payor_id: The payout_to_payor_id of this CreatePayoutRequestV3.
        """
        self.openapi_types = {
            'payments': List[PaymentInstructionV3],
            'payout_from_payor_id': str,
            'payout_memo': str,
            'payout_to_payor_id': str
        }

        self.attribute_map = {
            'payments': 'payments',
            'payout_from_payor_id': 'payoutFromPayorId',
            'payout_memo': 'payoutMemo',
            'payout_to_payor_id': 'payoutToPayorId'
        }

        self._payments = payments
        self._payout_from_payor_id = payout_from_payor_id
        self._payout_memo = payout_memo
        self._payout_to_payor_id = payout_to_payor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePayoutRequestV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePayoutRequestV3 of this CreatePayoutRequestV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payments(self):
        """Gets the payments of this CreatePayoutRequestV3.


        :return: The payments of this CreatePayoutRequestV3.
        :rtype: List[PaymentInstructionV3]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this CreatePayoutRequestV3.


        :param payments: The payments of this CreatePayoutRequestV3.
        :type payments: List[PaymentInstructionV3]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")
        if payments is not None and len(payments) > 2000:
            raise ValueError("Invalid value for `payments`, number of items must be less than or equal to `2000`")
        if payments is not None and len(payments) < 1:
            raise ValueError("Invalid value for `payments`, number of items must be greater than or equal to `1`")

        self._payments = payments

    @property
    def payout_from_payor_id(self):
        """Gets the payout_from_payor_id of this CreatePayoutRequestV3.

        <p>The id of the payor whose source account(s) will be debited</p> <p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p> 

        :return: The payout_from_payor_id of this CreatePayoutRequestV3.
        :rtype: str
        """
        return self._payout_from_payor_id

    @payout_from_payor_id.setter
    def payout_from_payor_id(self, payout_from_payor_id):
        """Sets the payout_from_payor_id of this CreatePayoutRequestV3.

        <p>The id of the payor whose source account(s) will be debited</p> <p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p> 

        :param payout_from_payor_id: The payout_from_payor_id of this CreatePayoutRequestV3.
        :type payout_from_payor_id: str
        """

        self._payout_from_payor_id = payout_from_payor_id

    @property
    def payout_memo(self):
        """Gets the payout_memo of this CreatePayoutRequestV3.

        <p>Text applied to all payment memos unless specified explicitly on a payment</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :return: The payout_memo of this CreatePayoutRequestV3.
        :rtype: str
        """
        return self._payout_memo

    @payout_memo.setter
    def payout_memo(self, payout_memo):
        """Sets the payout_memo of this CreatePayoutRequestV3.

        <p>Text applied to all payment memos unless specified explicitly on a payment</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :param payout_memo: The payout_memo of this CreatePayoutRequestV3.
        :type payout_memo: str
        """
        if payout_memo is not None and len(payout_memo) > 40:
            raise ValueError("Invalid value for `payout_memo`, length must be less than or equal to `40`")

        self._payout_memo = payout_memo

    @property
    def payout_to_payor_id(self):
        """Gets the payout_to_payor_id of this CreatePayoutRequestV3.

        <p>The id of the payor whose payees will be paid</p> <p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p> 

        :return: The payout_to_payor_id of this CreatePayoutRequestV3.
        :rtype: str
        """
        return self._payout_to_payor_id

    @payout_to_payor_id.setter
    def payout_to_payor_id(self, payout_to_payor_id):
        """Sets the payout_to_payor_id of this CreatePayoutRequestV3.

        <p>The id of the payor whose payees will be paid</p> <p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p> 

        :param payout_to_payor_id: The payout_to_payor_id of this CreatePayoutRequestV3.
        :type payout_to_payor_id: str
        """

        self._payout_to_payor_id = payout_to_payor_id
