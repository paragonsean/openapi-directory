# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class QuoteFxSummaryV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, expiry_time: datetime=None, funding_status: str=None, inverted_rate: float=None, payment_currency: str=None, quote_id: str=None, rate: float=None, source_currency: str=None, status: str=None, total_payment_amount: int=None, total_source_amount: int=None):
        """QuoteFxSummaryV3 - a model defined in OpenAPI

        :param creation_time: The creation_time of this QuoteFxSummaryV3.
        :param expiry_time: The expiry_time of this QuoteFxSummaryV3.
        :param funding_status: The funding_status of this QuoteFxSummaryV3.
        :param inverted_rate: The inverted_rate of this QuoteFxSummaryV3.
        :param payment_currency: The payment_currency of this QuoteFxSummaryV3.
        :param quote_id: The quote_id of this QuoteFxSummaryV3.
        :param rate: The rate of this QuoteFxSummaryV3.
        :param source_currency: The source_currency of this QuoteFxSummaryV3.
        :param status: The status of this QuoteFxSummaryV3.
        :param total_payment_amount: The total_payment_amount of this QuoteFxSummaryV3.
        :param total_source_amount: The total_source_amount of this QuoteFxSummaryV3.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'expiry_time': datetime,
            'funding_status': str,
            'inverted_rate': float,
            'payment_currency': str,
            'quote_id': str,
            'rate': float,
            'source_currency': str,
            'status': str,
            'total_payment_amount': int,
            'total_source_amount': int
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'expiry_time': 'expiryTime',
            'funding_status': 'fundingStatus',
            'inverted_rate': 'invertedRate',
            'payment_currency': 'paymentCurrency',
            'quote_id': 'quoteId',
            'rate': 'rate',
            'source_currency': 'sourceCurrency',
            'status': 'status',
            'total_payment_amount': 'totalPaymentAmount',
            'total_source_amount': 'totalSourceAmount'
        }

        self._creation_time = creation_time
        self._expiry_time = expiry_time
        self._funding_status = funding_status
        self._inverted_rate = inverted_rate
        self._payment_currency = payment_currency
        self._quote_id = quote_id
        self._rate = rate
        self._source_currency = source_currency
        self._status = status
        self._total_payment_amount = total_payment_amount
        self._total_source_amount = total_source_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteFxSummaryV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuoteFxSummaryV3 of this QuoteFxSummaryV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this QuoteFxSummaryV3.

        Timestamp of when the quote was created

        :return: The creation_time of this QuoteFxSummaryV3.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this QuoteFxSummaryV3.

        Timestamp of when the quote was created

        :param creation_time: The creation_time of this QuoteFxSummaryV3.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def expiry_time(self):
        """Gets the expiry_time of this QuoteFxSummaryV3.

        The timestamp for when the quote will expire

        :return: The expiry_time of this QuoteFxSummaryV3.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this QuoteFxSummaryV3.

        The timestamp for when the quote will expire

        :param expiry_time: The expiry_time of this QuoteFxSummaryV3.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def funding_status(self):
        """Gets the funding_status of this QuoteFxSummaryV3.

        Current status of the funding associated with this quote. One of the following values: UNFUNDED, INSTRUCTED, FUNDED

        :return: The funding_status of this QuoteFxSummaryV3.
        :rtype: str
        """
        return self._funding_status

    @funding_status.setter
    def funding_status(self, funding_status):
        """Sets the funding_status of this QuoteFxSummaryV3.

        Current status of the funding associated with this quote. One of the following values: UNFUNDED, INSTRUCTED, FUNDED

        :param funding_status: The funding_status of this QuoteFxSummaryV3.
        :type funding_status: str
        """
        if funding_status is None:
            raise ValueError("Invalid value for `funding_status`, must not be `None`")

        self._funding_status = funding_status

    @property
    def inverted_rate(self):
        """Gets the inverted_rate of this QuoteFxSummaryV3.

        The inverse conversion rate (from paymnent currency to source currency)

        :return: The inverted_rate of this QuoteFxSummaryV3.
        :rtype: float
        """
        return self._inverted_rate

    @inverted_rate.setter
    def inverted_rate(self, inverted_rate):
        """Sets the inverted_rate of this QuoteFxSummaryV3.

        The inverse conversion rate (from paymnent currency to source currency)

        :param inverted_rate: The inverted_rate of this QuoteFxSummaryV3.
        :type inverted_rate: float
        """

        self._inverted_rate = inverted_rate

    @property
    def payment_currency(self):
        """Gets the payment_currency of this QuoteFxSummaryV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The payment_currency of this QuoteFxSummaryV3.
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this QuoteFxSummaryV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param payment_currency: The payment_currency of this QuoteFxSummaryV3.
        :type payment_currency: str
        """
        if payment_currency is None:
            raise ValueError("Invalid value for `payment_currency`, must not be `None`")
        if payment_currency is not None and len(payment_currency) > 3:
            raise ValueError("Invalid value for `payment_currency`, length must be less than or equal to `3`")
        if payment_currency is not None and len(payment_currency) < 3:
            raise ValueError("Invalid value for `payment_currency`, length must be greater than or equal to `3`")
        if payment_currency is not None and not re.search(r'^[A-Z]{3}$', payment_currency):
            raise ValueError("Invalid value for `payment_currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._payment_currency = payment_currency

    @property
    def quote_id(self):
        """Gets the quote_id of this QuoteFxSummaryV3.

        The id of the created quote

        :return: The quote_id of this QuoteFxSummaryV3.
        :rtype: str
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this QuoteFxSummaryV3.

        The id of the created quote

        :param quote_id: The quote_id of this QuoteFxSummaryV3.
        :type quote_id: str
        """
        if quote_id is None:
            raise ValueError("Invalid value for `quote_id`, must not be `None`")

        self._quote_id = quote_id

    @property
    def rate(self):
        """Gets the rate of this QuoteFxSummaryV3.

        The conversion rate (from the source currency to the payment currency)

        :return: The rate of this QuoteFxSummaryV3.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this QuoteFxSummaryV3.

        The conversion rate (from the source currency to the payment currency)

        :param rate: The rate of this QuoteFxSummaryV3.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def source_currency(self):
        """Gets the source_currency of this QuoteFxSummaryV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The source_currency of this QuoteFxSummaryV3.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this QuoteFxSummaryV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param source_currency: The source_currency of this QuoteFxSummaryV3.
        :type source_currency: str
        """
        if source_currency is None:
            raise ValueError("Invalid value for `source_currency`, must not be `None`")
        if source_currency is not None and len(source_currency) > 3:
            raise ValueError("Invalid value for `source_currency`, length must be less than or equal to `3`")
        if source_currency is not None and len(source_currency) < 3:
            raise ValueError("Invalid value for `source_currency`, length must be greater than or equal to `3`")
        if source_currency is not None and not re.search(r'^[A-Z]{3}$', source_currency):
            raise ValueError("Invalid value for `source_currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._source_currency = source_currency

    @property
    def status(self):
        """Gets the status of this QuoteFxSummaryV3.

        Current status of the fx quote. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED, REJECTED

        :return: The status of this QuoteFxSummaryV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuoteFxSummaryV3.

        Current status of the fx quote. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED, REJECTED

        :param status: The status of this QuoteFxSummaryV3.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def total_payment_amount(self):
        """Gets the total_payment_amount of this QuoteFxSummaryV3.

        The amount (in minor units) that the payee will receive

        :return: The total_payment_amount of this QuoteFxSummaryV3.
        :rtype: int
        """
        return self._total_payment_amount

    @total_payment_amount.setter
    def total_payment_amount(self, total_payment_amount):
        """Sets the total_payment_amount of this QuoteFxSummaryV3.

        The amount (in minor units) that the payee will receive

        :param total_payment_amount: The total_payment_amount of this QuoteFxSummaryV3.
        :type total_payment_amount: int
        """
        if total_payment_amount is None:
            raise ValueError("Invalid value for `total_payment_amount`, must not be `None`")

        self._total_payment_amount = total_payment_amount

    @property
    def total_source_amount(self):
        """Gets the total_source_amount of this QuoteFxSummaryV3.

        The amount (in minor units) that will be paid from the source account

        :return: The total_source_amount of this QuoteFxSummaryV3.
        :rtype: int
        """
        return self._total_source_amount

    @total_source_amount.setter
    def total_source_amount(self, total_source_amount):
        """Sets the total_source_amount of this QuoteFxSummaryV3.

        The amount (in minor units) that will be paid from the source account

        :param total_source_amount: The total_source_amount of this QuoteFxSummaryV3.
        :type total_source_amount: int
        """
        if total_source_amount is None:
            raise ValueError("Invalid value for `total_source_amount`, must not be `None`")

        self._total_source_amount = total_source_amount
