# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayoutPayor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dba_name: str=None, payor_id: str=None, payor_name: str=None, principal: str=None, principal_id: str=None):
        """PayoutPayor - a model defined in OpenAPI

        :param dba_name: The dba_name of this PayoutPayor.
        :param payor_id: The payor_id of this PayoutPayor.
        :param payor_name: The payor_name of this PayoutPayor.
        :param principal: The principal of this PayoutPayor.
        :param principal_id: The principal_id of this PayoutPayor.
        """
        self.openapi_types = {
            'dba_name': str,
            'payor_id': str,
            'payor_name': str,
            'principal': str,
            'principal_id': str
        }

        self.attribute_map = {
            'dba_name': 'dbaName',
            'payor_id': 'payorId',
            'payor_name': 'payorName',
            'principal': 'principal',
            'principal_id': 'principalId'
        }

        self._dba_name = dba_name
        self._payor_id = payor_id
        self._payor_name = payor_name
        self._principal = principal
        self._principal_id = principal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutPayor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutPayor of this PayoutPayor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dba_name(self):
        """Gets the dba_name of this PayoutPayor.

        The alternate name of the payor.

        :return: The dba_name of this PayoutPayor.
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this PayoutPayor.

        The alternate name of the payor.

        :param dba_name: The dba_name of this PayoutPayor.
        :type dba_name: str
        """
        if dba_name is None:
            raise ValueError("Invalid value for `dba_name`, must not be `None`")

        self._dba_name = dba_name

    @property
    def payor_id(self):
        """Gets the payor_id of this PayoutPayor.

        The id of the payor.

        :return: The payor_id of this PayoutPayor.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this PayoutPayor.

        The id of the payor.

        :param payor_id: The payor_id of this PayoutPayor.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id

    @property
    def payor_name(self):
        """Gets the payor_name of this PayoutPayor.

        The name of the payor.

        :return: The payor_name of this PayoutPayor.
        :rtype: str
        """
        return self._payor_name

    @payor_name.setter
    def payor_name(self, payor_name):
        """Sets the payor_name of this PayoutPayor.

        The name of the payor.

        :param payor_name: The payor_name of this PayoutPayor.
        :type payor_name: str
        """
        if payor_name is None:
            raise ValueError("Invalid value for `payor_name`, must not be `None`")

        self._payor_name = payor_name

    @property
    def principal(self):
        """Gets the principal of this PayoutPayor.

        Email address if principal is a user or ID if application.

        :return: The principal of this PayoutPayor.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PayoutPayor.

        Email address if principal is a user or ID if application.

        :param principal: The principal of this PayoutPayor.
        :type principal: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def principal_id(self):
        """Gets the principal_id of this PayoutPayor.

        The id of the principal.

        :return: The principal_id of this PayoutPayor.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this PayoutPayor.

        The id of the principal.

        :param principal_id: The principal_id of this PayoutPayor.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id
