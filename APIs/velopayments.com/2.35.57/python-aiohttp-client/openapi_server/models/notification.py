# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_source import NotificationSource
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, category: str=None, event_name: str=None, sequence_number: int=None, source: NotificationSource=None):
        """Notification - a model defined in OpenAPI

        :param api_version: The api_version of this Notification.
        :param category: The category of this Notification.
        :param event_name: The event_name of this Notification.
        :param sequence_number: The sequence_number of this Notification.
        :param source: The source of this Notification.
        """
        self.openapi_types = {
            'api_version': str,
            'category': str,
            'event_name': str,
            'sequence_number': int,
            'source': NotificationSource
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'category': 'category',
            'event_name': 'eventName',
            'sequence_number': 'sequenceNumber',
            'source': 'source'
        }

        self._api_version = api_version
        self._category = category
        self._event_name = event_name
        self._sequence_number = sequence_number
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this Notification.

        The API version of the notification schema

        :return: The api_version of this Notification.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Notification.

        The API version of the notification schema

        :param api_version: The api_version of this Notification.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")

        self._api_version = api_version

    @property
    def category(self):
        """Gets the category of this Notification.

        The category that the notification relates to. One of \"payment\", \"payee\", \"debit\" or \"system\"

        :return: The category of this Notification.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Notification.

        The category that the notification relates to. One of \"payment\", \"payee\", \"debit\" or \"system\"

        :param category: The category of this Notification.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def event_name(self):
        """Gets the event_name of this Notification.

        The name of event that led to this notification

        :return: The event_name of this Notification.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Notification.

        The name of event that led to this notification

        :param event_name: The event_name of this Notification.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")

        self._event_name = event_name

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Notification.

        This is a payor specific sequence number starting at 1 for the first notification sent

        :return: The sequence_number of this Notification.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Notification.

        This is a payor specific sequence number starting at 1 for the first notification sent

        :param sequence_number: The sequence_number of this Notification.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")

        self._sequence_number = sequence_number

    @property
    def source(self):
        """Gets the source of this Notification.


        :return: The source of this Notification.
        :rtype: NotificationSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Notification.


        :param source: The source of this Notification.
        :type source: NotificationSource
        """

        self._source = source
