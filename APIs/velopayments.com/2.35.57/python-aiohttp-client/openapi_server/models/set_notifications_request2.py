# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetNotificationsRequest2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_balance: int=None):
        """SetNotificationsRequest2 - a model defined in OpenAPI

        :param minimum_balance: The minimum_balance of this SetNotificationsRequest2.
        """
        self.openapi_types = {
            'minimum_balance': int
        }

        self.attribute_map = {
            'minimum_balance': 'minimumBalance'
        }

        self._minimum_balance = minimum_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetNotificationsRequest2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetNotificationsRequest_2 of this SetNotificationsRequest2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_balance(self):
        """Gets the minimum_balance of this SetNotificationsRequest2.

        Amount to set as minimum balance for notifications in minor units

        :return: The minimum_balance of this SetNotificationsRequest2.
        :rtype: int
        """
        return self._minimum_balance

    @minimum_balance.setter
    def minimum_balance(self, minimum_balance):
        """Sets the minimum_balance of this SetNotificationsRequest2.

        Amount to set as minimum balance for notifications in minor units

        :param minimum_balance: The minimum_balance of this SetNotificationsRequest2.
        :type minimum_balance: int
        """
        if minimum_balance is None:
            raise ValueError("Invalid value for `minimum_balance`, must not be `None`")
        if minimum_balance is not None and minimum_balance > 9999999999:
            raise ValueError("Invalid value for `minimum_balance`, must be a value less than or equal to `9999999999`")
        if minimum_balance is not None and minimum_balance < 0:
            raise ValueError("Invalid value for `minimum_balance`, must be a value greater than or equal to `0`")

        self._minimum_balance = minimum_balance
