# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchedulePayoutRequestV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notifications_enabled: bool=None, scheduled_for: datetime=None):
        """SchedulePayoutRequestV3 - a model defined in OpenAPI

        :param notifications_enabled: The notifications_enabled of this SchedulePayoutRequestV3.
        :param scheduled_for: The scheduled_for of this SchedulePayoutRequestV3.
        """
        self.openapi_types = {
            'notifications_enabled': bool,
            'scheduled_for': datetime
        }

        self.attribute_map = {
            'notifications_enabled': 'notificationsEnabled',
            'scheduled_for': 'scheduledFor'
        }

        self._notifications_enabled = notifications_enabled
        self._scheduled_for = scheduled_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchedulePayoutRequestV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchedulePayoutRequestV3 of this SchedulePayoutRequestV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notifications_enabled(self):
        """Gets the notifications_enabled of this SchedulePayoutRequestV3.

        Flag to indicate whether to receive notifications when scheduled payout is processed

        :return: The notifications_enabled of this SchedulePayoutRequestV3.
        :rtype: bool
        """
        return self._notifications_enabled

    @notifications_enabled.setter
    def notifications_enabled(self, notifications_enabled):
        """Sets the notifications_enabled of this SchedulePayoutRequestV3.

        Flag to indicate whether to receive notifications when scheduled payout is processed

        :param notifications_enabled: The notifications_enabled of this SchedulePayoutRequestV3.
        :type notifications_enabled: bool
        """
        if notifications_enabled is None:
            raise ValueError("Invalid value for `notifications_enabled`, must not be `None`")

        self._notifications_enabled = notifications_enabled

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this SchedulePayoutRequestV3.

        UTC timestamp for instructing the payout. Format is ISO-8601.

        :return: The scheduled_for of this SchedulePayoutRequestV3.
        :rtype: datetime
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this SchedulePayoutRequestV3.

        UTC timestamp for instructing the payout. Format is ISO-8601.

        :param scheduled_for: The scheduled_for of this SchedulePayoutRequestV3.
        :type scheduled_for: datetime
        """
        if scheduled_for is None:
            raise ValueError("Invalid value for `scheduled_for`, must not be `None`")

        self._scheduled_for = scheduled_for
