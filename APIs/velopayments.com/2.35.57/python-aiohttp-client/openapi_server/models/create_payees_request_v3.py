# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_payee_v3 import CreatePayeeV3
from openapi_server import util


class CreatePayeesRequestV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payees: List[CreatePayeeV3]=None, payor_id: str=None):
        """CreatePayeesRequestV3 - a model defined in OpenAPI

        :param payees: The payees of this CreatePayeesRequestV3.
        :param payor_id: The payor_id of this CreatePayeesRequestV3.
        """
        self.openapi_types = {
            'payees': List[CreatePayeeV3],
            'payor_id': str
        }

        self.attribute_map = {
            'payees': 'payees',
            'payor_id': 'payorId'
        }

        self._payees = payees
        self._payor_id = payor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePayeesRequestV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePayeesRequestV3 of this CreatePayeesRequestV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payees(self):
        """Gets the payees of this CreatePayeesRequestV3.


        :return: The payees of this CreatePayeesRequestV3.
        :rtype: List[CreatePayeeV3]
        """
        return self._payees

    @payees.setter
    def payees(self, payees):
        """Sets the payees of this CreatePayeesRequestV3.


        :param payees: The payees of this CreatePayeesRequestV3.
        :type payees: List[CreatePayeeV3]
        """
        if payees is None:
            raise ValueError("Invalid value for `payees`, must not be `None`")

        self._payees = payees

    @property
    def payor_id(self):
        """Gets the payor_id of this CreatePayeesRequestV3.


        :return: The payor_id of this CreatePayeesRequestV3.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this CreatePayeesRequestV3.


        :param payor_id: The payor_id of this CreatePayeesRequestV3.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id
