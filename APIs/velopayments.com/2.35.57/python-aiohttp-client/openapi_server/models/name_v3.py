# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NameV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, other_names: str=None, title: str=None):
        """NameV3 - a model defined in OpenAPI

        :param first_name: The first_name of this NameV3.
        :param last_name: The last_name of this NameV3.
        :param other_names: The other_names of this NameV3.
        :param title: The title of this NameV3.
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'other_names': str,
            'title': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'other_names': 'otherNames',
            'title': 'title'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._other_names = other_names
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NameV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NameV3 of this NameV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this NameV3.


        :return: The first_name of this NameV3.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NameV3.


        :param first_name: The first_name of this NameV3.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 40:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `40`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NameV3.


        :return: The last_name of this NameV3.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NameV3.


        :param last_name: The last_name of this NameV3.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 40:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `40`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def other_names(self):
        """Gets the other_names of this NameV3.


        :return: The other_names of this NameV3.
        :rtype: str
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this NameV3.


        :param other_names: The other_names of this NameV3.
        :type other_names: str
        """
        if other_names is not None and len(other_names) > 40:
            raise ValueError("Invalid value for `other_names`, length must be less than or equal to `40`")
        if other_names is not None and len(other_names) < 1:
            raise ValueError("Invalid value for `other_names`, length must be greater than or equal to `1`")

        self._other_names = other_names

    @property
    def title(self):
        """Gets the title of this NameV3.


        :return: The title of this NameV3.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NameV3.


        :param title: The title of this NameV3.
        :type title: str
        """
        if title is not None and len(title) > 10:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `10`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
