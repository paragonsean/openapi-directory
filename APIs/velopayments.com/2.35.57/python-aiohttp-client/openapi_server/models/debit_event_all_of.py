# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DebitEventAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debit_transaction_id: str=None):
        """DebitEventAllOf - a model defined in OpenAPI

        :param debit_transaction_id: The debit_transaction_id of this DebitEventAllOf.
        """
        self.openapi_types = {
            'debit_transaction_id': str
        }

        self.attribute_map = {
            'debit_transaction_id': 'debitTransactionId'
        }

        self._debit_transaction_id = debit_transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebitEventAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebitEvent_allOf of this DebitEventAllOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debit_transaction_id(self):
        """Gets the debit_transaction_id of this DebitEventAllOf.

        ID of this debit transaction within the Velo platform

        :return: The debit_transaction_id of this DebitEventAllOf.
        :rtype: str
        """
        return self._debit_transaction_id

    @debit_transaction_id.setter
    def debit_transaction_id(self, debit_transaction_id):
        """Sets the debit_transaction_id of this DebitEventAllOf.

        ID of this debit transaction within the Velo platform

        :param debit_transaction_id: The debit_transaction_id of this DebitEventAllOf.
        :type debit_transaction_id: str
        """
        if debit_transaction_id is None:
            raise ValueError("Invalid value for `debit_transaction_id`, must not be `None`")

        self._debit_transaction_id = debit_transaction_id
