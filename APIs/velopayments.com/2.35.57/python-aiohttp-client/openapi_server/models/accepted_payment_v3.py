# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AcceptedPaymentV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency_type: str=None, payment_memo: str=None, payment_metadata: str=None, payor_payment_id: str=None, rails_id: str=None, remote_id: str=None, remote_system_id: str=None, source_account_name: str=None):
        """AcceptedPaymentV3 - a model defined in OpenAPI

        :param amount: The amount of this AcceptedPaymentV3.
        :param currency_type: The currency_type of this AcceptedPaymentV3.
        :param payment_memo: The payment_memo of this AcceptedPaymentV3.
        :param payment_metadata: The payment_metadata of this AcceptedPaymentV3.
        :param payor_payment_id: The payor_payment_id of this AcceptedPaymentV3.
        :param rails_id: The rails_id of this AcceptedPaymentV3.
        :param remote_id: The remote_id of this AcceptedPaymentV3.
        :param remote_system_id: The remote_system_id of this AcceptedPaymentV3.
        :param source_account_name: The source_account_name of this AcceptedPaymentV3.
        """
        self.openapi_types = {
            'amount': int,
            'currency_type': str,
            'payment_memo': str,
            'payment_metadata': str,
            'payor_payment_id': str,
            'rails_id': str,
            'remote_id': str,
            'remote_system_id': str,
            'source_account_name': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency_type': 'currencyType',
            'payment_memo': 'paymentMemo',
            'payment_metadata': 'paymentMetadata',
            'payor_payment_id': 'payorPaymentId',
            'rails_id': 'railsId',
            'remote_id': 'remoteId',
            'remote_system_id': 'remoteSystemId',
            'source_account_name': 'sourceAccountName'
        }

        self._amount = amount
        self._currency_type = currency_type
        self._payment_memo = payment_memo
        self._payment_metadata = payment_metadata
        self._payor_payment_id = payor_payment_id
        self._rails_id = rails_id
        self._remote_id = remote_id
        self._remote_system_id = remote_system_id
        self._source_account_name = source_account_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptedPaymentV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptedPaymentV3 of this AcceptedPaymentV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this AcceptedPaymentV3.

        The amount of the payment in minor units

        :return: The amount of this AcceptedPaymentV3.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AcceptedPaymentV3.

        The amount of the payment in minor units

        :param amount: The amount of this AcceptedPaymentV3.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency_type(self):
        """Gets the currency_type of this AcceptedPaymentV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency_type of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """Sets the currency_type of this AcceptedPaymentV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency_type: The currency_type of this AcceptedPaymentV3.
        :type currency_type: str
        """
        if currency_type is None:
            raise ValueError("Invalid value for `currency_type`, must not be `None`")
        if currency_type is not None and len(currency_type) > 3:
            raise ValueError("Invalid value for `currency_type`, length must be less than or equal to `3`")
        if currency_type is not None and len(currency_type) < 3:
            raise ValueError("Invalid value for `currency_type`, length must be greater than or equal to `3`")
        if currency_type is not None and not re.search(r'^[A-Z]{3}$', currency_type):
            raise ValueError("Invalid value for `currency_type`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency_type = currency_type

    @property
    def payment_memo(self):
        """Gets the payment_memo of this AcceptedPaymentV3.

        <p>Any value here will override the memo value in the parent payout</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :return: The payment_memo of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._payment_memo

    @payment_memo.setter
    def payment_memo(self, payment_memo):
        """Sets the payment_memo of this AcceptedPaymentV3.

        <p>Any value here will override the memo value in the parent payout</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :param payment_memo: The payment_memo of this AcceptedPaymentV3.
        :type payment_memo: str
        """
        if payment_memo is not None and len(payment_memo) > 40:
            raise ValueError("Invalid value for `payment_memo`, length must be less than or equal to `40`")
        if payment_memo is not None and len(payment_memo) < 0:
            raise ValueError("Invalid value for `payment_memo`, length must be greater than or equal to `0`")

        self._payment_memo = payment_memo

    @property
    def payment_metadata(self):
        """Gets the payment_metadata of this AcceptedPaymentV3.

        <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p> <p>The structure of the data will be dictated by the requirements of the payment rails</p> 

        :return: The payment_metadata of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._payment_metadata

    @payment_metadata.setter
    def payment_metadata(self, payment_metadata):
        """Sets the payment_metadata of this AcceptedPaymentV3.

        <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p> <p>The structure of the data will be dictated by the requirements of the payment rails</p> 

        :param payment_metadata: The payment_metadata of this AcceptedPaymentV3.
        :type payment_metadata: str
        """
        if payment_metadata is not None and len(payment_metadata) > 512:
            raise ValueError("Invalid value for `payment_metadata`, length must be less than or equal to `512`")
        if payment_metadata is not None and len(payment_metadata) < 0:
            raise ValueError("Invalid value for `payment_metadata`, length must be greater than or equal to `0`")

        self._payment_metadata = payment_metadata

    @property
    def payor_payment_id(self):
        """Gets the payor_payment_id of this AcceptedPaymentV3.

        A reference identifier for the payor for the given payee payment

        :return: The payor_payment_id of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._payor_payment_id

    @payor_payment_id.setter
    def payor_payment_id(self, payor_payment_id):
        """Sets the payor_payment_id of this AcceptedPaymentV3.

        A reference identifier for the payor for the given payee payment

        :param payor_payment_id: The payor_payment_id of this AcceptedPaymentV3.
        :type payor_payment_id: str
        """
        if payor_payment_id is None:
            raise ValueError("Invalid value for `payor_payment_id`, must not be `None`")
        if payor_payment_id is not None and len(payor_payment_id) > 40:
            raise ValueError("Invalid value for `payor_payment_id`, length must be less than or equal to `40`")
        if payor_payment_id is not None and len(payor_payment_id) < 0:
            raise ValueError("Invalid value for `payor_payment_id`, length must be greater than or equal to `0`")

        self._payor_payment_id = payor_payment_id

    @property
    def rails_id(self):
        """Gets the rails_id of this AcceptedPaymentV3.

        Indicates the 3rd party system involved in making this payment

        :return: The rails_id of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._rails_id

    @rails_id.setter
    def rails_id(self, rails_id):
        """Sets the rails_id of this AcceptedPaymentV3.

        Indicates the 3rd party system involved in making this payment

        :param rails_id: The rails_id of this AcceptedPaymentV3.
        :type rails_id: str
        """
        if rails_id is None:
            raise ValueError("Invalid value for `rails_id`, must not be `None`")

        self._rails_id = rails_id

    @property
    def remote_id(self):
        """Gets the remote_id of this AcceptedPaymentV3.

        Your identifier for the payee

        :return: The remote_id of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this AcceptedPaymentV3.

        Your identifier for the payee

        :param remote_id: The remote_id of this AcceptedPaymentV3.
        :type remote_id: str
        """
        if remote_id is None:
            raise ValueError("Invalid value for `remote_id`, must not be `None`")
        if remote_id is not None and len(remote_id) > 100:
            raise ValueError("Invalid value for `remote_id`, length must be less than or equal to `100`")
        if remote_id is not None and len(remote_id) < 1:
            raise ValueError("Invalid value for `remote_id`, length must be greater than or equal to `1`")

        self._remote_id = remote_id

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this AcceptedPaymentV3.

        <p>The identifier for the remote payments system if not Velo</p> 

        :return: The remote_system_id of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this AcceptedPaymentV3.

        <p>The identifier for the remote payments system if not Velo</p> 

        :param remote_system_id: The remote_system_id of this AcceptedPaymentV3.
        :type remote_system_id: str
        """
        if remote_system_id is not None and len(remote_system_id) > 100:
            raise ValueError("Invalid value for `remote_system_id`, length must be less than or equal to `100`")
        if remote_system_id is not None and len(remote_system_id) < 1:
            raise ValueError("Invalid value for `remote_system_id`, length must be greater than or equal to `1`")

        self._remote_system_id = remote_system_id

    @property
    def source_account_name(self):
        """Gets the source_account_name of this AcceptedPaymentV3.

        The identifier of the source account to debit the payment from

        :return: The source_account_name of this AcceptedPaymentV3.
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this AcceptedPaymentV3.

        The identifier of the source account to debit the payment from

        :param source_account_name: The source_account_name of this AcceptedPaymentV3.
        :type source_account_name: str
        """
        if source_account_name is None:
            raise ValueError("Invalid value for `source_account_name`, must not be `None`")

        self._source_account_name = source_account_name
