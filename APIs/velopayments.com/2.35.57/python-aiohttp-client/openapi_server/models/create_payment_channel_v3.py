# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreatePaymentChannelV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, country_code: str=None, currency: str=None, iban: str=None, payment_channel_name: str=None, routing_number: str=None):
        """CreatePaymentChannelV3 - a model defined in OpenAPI

        :param account_name: The account_name of this CreatePaymentChannelV3.
        :param account_number: The account_number of this CreatePaymentChannelV3.
        :param country_code: The country_code of this CreatePaymentChannelV3.
        :param currency: The currency of this CreatePaymentChannelV3.
        :param iban: The iban of this CreatePaymentChannelV3.
        :param payment_channel_name: The payment_channel_name of this CreatePaymentChannelV3.
        :param routing_number: The routing_number of this CreatePaymentChannelV3.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'country_code': str,
            'currency': str,
            'iban': str,
            'payment_channel_name': str,
            'routing_number': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'country_code': 'countryCode',
            'currency': 'currency',
            'iban': 'iban',
            'payment_channel_name': 'paymentChannelName',
            'routing_number': 'routingNumber'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._country_code = country_code
        self._currency = currency
        self._iban = iban
        self._payment_channel_name = payment_channel_name
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePaymentChannelV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePaymentChannelV3 of this CreatePaymentChannelV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this CreatePaymentChannelV3.


        :return: The account_name of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CreatePaymentChannelV3.


        :param account_name: The account_name of this CreatePaymentChannelV3.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this CreatePaymentChannelV3.

        Either routing number and account number or only iban must be set

        :return: The account_number of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreatePaymentChannelV3.

        Either routing number and account number or only iban must be set

        :param account_number: The account_number of this CreatePaymentChannelV3.
        :type account_number: str
        """
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")
        if account_number is not None and len(account_number) < 6:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `6`")

        self._account_number = account_number

    @property
    def country_code(self):
        """Gets the country_code of this CreatePaymentChannelV3.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The country_code of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CreatePaymentChannelV3.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param country_code: The country_code of this CreatePaymentChannelV3.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 2:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")
        if country_code is not None and not re.search(r'^[A-Z]{2}$', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country_code = country_code

    @property
    def currency(self):
        """Gets the currency of this CreatePaymentChannelV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreatePaymentChannelV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency: The currency of this CreatePaymentChannelV3.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency = currency

    @property
    def iban(self):
        """Gets the iban of this CreatePaymentChannelV3.

        Must match the regular expression ```^[A-Za-z0-9]+$```.

        :return: The iban of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this CreatePaymentChannelV3.

        Must match the regular expression ```^[A-Za-z0-9]+$```.

        :param iban: The iban of this CreatePaymentChannelV3.
        :type iban: str
        """
        if iban is not None and len(iban) > 34:
            raise ValueError("Invalid value for `iban`, length must be less than or equal to `34`")
        if iban is not None and len(iban) < 15:
            raise ValueError("Invalid value for `iban`, length must be greater than or equal to `15`")
        if iban is not None and not re.search(r'^[A-Za-z0-9]+$', iban):
            raise ValueError("Invalid value for `iban`, must be a follow pattern or equal to `/^[A-Za-z0-9]+$/`")

        self._iban = iban

    @property
    def payment_channel_name(self):
        """Gets the payment_channel_name of this CreatePaymentChannelV3.


        :return: The payment_channel_name of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._payment_channel_name

    @payment_channel_name.setter
    def payment_channel_name(self, payment_channel_name):
        """Sets the payment_channel_name of this CreatePaymentChannelV3.


        :param payment_channel_name: The payment_channel_name of this CreatePaymentChannelV3.
        :type payment_channel_name: str
        """

        self._payment_channel_name = payment_channel_name

    @property
    def routing_number(self):
        """Gets the routing_number of this CreatePaymentChannelV3.

        Either routing number and account number or only iban must be set

        :return: The routing_number of this CreatePaymentChannelV3.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreatePaymentChannelV3.

        Either routing number and account number or only iban must be set

        :param routing_number: The routing_number of this CreatePaymentChannelV3.
        :type routing_number: str
        """
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number
