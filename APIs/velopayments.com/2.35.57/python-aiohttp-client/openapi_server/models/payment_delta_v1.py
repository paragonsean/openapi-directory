# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentDeltaV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_amount: int=None, payment_currency: str=None, payment_id: str=None, payor_payment_id: str=None, payout_id: str=None, source_amount: int=None, source_currency: str=None, status: str=None):
        """PaymentDeltaV1 - a model defined in OpenAPI

        :param payment_amount: The payment_amount of this PaymentDeltaV1.
        :param payment_currency: The payment_currency of this PaymentDeltaV1.
        :param payment_id: The payment_id of this PaymentDeltaV1.
        :param payor_payment_id: The payor_payment_id of this PaymentDeltaV1.
        :param payout_id: The payout_id of this PaymentDeltaV1.
        :param source_amount: The source_amount of this PaymentDeltaV1.
        :param source_currency: The source_currency of this PaymentDeltaV1.
        :param status: The status of this PaymentDeltaV1.
        """
        self.openapi_types = {
            'payment_amount': int,
            'payment_currency': str,
            'payment_id': str,
            'payor_payment_id': str,
            'payout_id': str,
            'source_amount': int,
            'source_currency': str,
            'status': str
        }

        self.attribute_map = {
            'payment_amount': 'paymentAmount',
            'payment_currency': 'paymentCurrency',
            'payment_id': 'paymentId',
            'payor_payment_id': 'payorPaymentId',
            'payout_id': 'payoutId',
            'source_amount': 'sourceAmount',
            'source_currency': 'sourceCurrency',
            'status': 'status'
        }

        self._payment_amount = payment_amount
        self._payment_currency = payment_currency
        self._payment_id = payment_id
        self._payor_payment_id = payor_payment_id
        self._payout_id = payout_id
        self._source_amount = source_amount
        self._source_currency = source_currency
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDeltaV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDeltaV1 of this PaymentDeltaV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_amount(self):
        """Gets the payment_amount of this PaymentDeltaV1.


        :return: The payment_amount of this PaymentDeltaV1.
        :rtype: int
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this PaymentDeltaV1.


        :param payment_amount: The payment_amount of this PaymentDeltaV1.
        :type payment_amount: int
        """

        self._payment_amount = payment_amount

    @property
    def payment_currency(self):
        """Gets the payment_currency of this PaymentDeltaV1.


        :return: The payment_currency of this PaymentDeltaV1.
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this PaymentDeltaV1.


        :param payment_currency: The payment_currency of this PaymentDeltaV1.
        :type payment_currency: str
        """

        self._payment_currency = payment_currency

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentDeltaV1.


        :return: The payment_id of this PaymentDeltaV1.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentDeltaV1.


        :param payment_id: The payment_id of this PaymentDeltaV1.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def payor_payment_id(self):
        """Gets the payor_payment_id of this PaymentDeltaV1.


        :return: The payor_payment_id of this PaymentDeltaV1.
        :rtype: str
        """
        return self._payor_payment_id

    @payor_payment_id.setter
    def payor_payment_id(self, payor_payment_id):
        """Sets the payor_payment_id of this PaymentDeltaV1.


        :param payor_payment_id: The payor_payment_id of this PaymentDeltaV1.
        :type payor_payment_id: str
        """

        self._payor_payment_id = payor_payment_id

    @property
    def payout_id(self):
        """Gets the payout_id of this PaymentDeltaV1.


        :return: The payout_id of this PaymentDeltaV1.
        :rtype: str
        """
        return self._payout_id

    @payout_id.setter
    def payout_id(self, payout_id):
        """Sets the payout_id of this PaymentDeltaV1.


        :param payout_id: The payout_id of this PaymentDeltaV1.
        :type payout_id: str
        """
        if payout_id is None:
            raise ValueError("Invalid value for `payout_id`, must not be `None`")

        self._payout_id = payout_id

    @property
    def source_amount(self):
        """Gets the source_amount of this PaymentDeltaV1.


        :return: The source_amount of this PaymentDeltaV1.
        :rtype: int
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """Sets the source_amount of this PaymentDeltaV1.


        :param source_amount: The source_amount of this PaymentDeltaV1.
        :type source_amount: int
        """

        self._source_amount = source_amount

    @property
    def source_currency(self):
        """Gets the source_currency of this PaymentDeltaV1.


        :return: The source_currency of this PaymentDeltaV1.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this PaymentDeltaV1.


        :param source_currency: The source_currency of this PaymentDeltaV1.
        :type source_currency: str
        """

        self._source_currency = source_currency

    @property
    def status(self):
        """Gets the status of this PaymentDeltaV1.


        :return: The status of this PaymentDeltaV1.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentDeltaV1.


        :param status: The status of this PaymentDeltaV1.
        :type status: str
        """

        self._status = status
