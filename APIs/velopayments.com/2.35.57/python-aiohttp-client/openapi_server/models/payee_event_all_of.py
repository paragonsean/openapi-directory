# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payee_event_all_of_reasons import PayeeEventAllOfReasons
from openapi_server import util


class PayeeEventAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payee_id: str=None, reasons: List[PayeeEventAllOfReasons]=None):
        """PayeeEventAllOf - a model defined in OpenAPI

        :param payee_id: The payee_id of this PayeeEventAllOf.
        :param reasons: The reasons of this PayeeEventAllOf.
        """
        self.openapi_types = {
            'payee_id': str,
            'reasons': List[PayeeEventAllOfReasons]
        }

        self.attribute_map = {
            'payee_id': 'payeeId',
            'reasons': 'reasons'
        }

        self._payee_id = payee_id
        self._reasons = reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayeeEventAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayeeEvent_allOf of this PayeeEventAllOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payee_id(self):
        """Gets the payee_id of this PayeeEventAllOf.

        ID of this payee within the Velo platform

        :return: The payee_id of this PayeeEventAllOf.
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this PayeeEventAllOf.

        ID of this payee within the Velo platform

        :param payee_id: The payee_id of this PayeeEventAllOf.
        :type payee_id: str
        """
        if payee_id is None:
            raise ValueError("Invalid value for `payee_id`, must not be `None`")

        self._payee_id = payee_id

    @property
    def reasons(self):
        """Gets the reasons of this PayeeEventAllOf.

        The reasons for the event notification.

        :return: The reasons of this PayeeEventAllOf.
        :rtype: List[PayeeEventAllOfReasons]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this PayeeEventAllOf.

        The reasons for the event notification.

        :param reasons: The reasons of this PayeeEventAllOf.
        :type reasons: List[PayeeEventAllOfReasons]
        """

        self._reasons = reasons
