# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayorLinksResponseLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_payor_id: str=None, link_id: str=None, link_type: str=None, to_payor_id: str=None):
        """PayorLinksResponseLinks - a model defined in OpenAPI

        :param from_payor_id: The from_payor_id of this PayorLinksResponseLinks.
        :param link_id: The link_id of this PayorLinksResponseLinks.
        :param link_type: The link_type of this PayorLinksResponseLinks.
        :param to_payor_id: The to_payor_id of this PayorLinksResponseLinks.
        """
        self.openapi_types = {
            'from_payor_id': str,
            'link_id': str,
            'link_type': str,
            'to_payor_id': str
        }

        self.attribute_map = {
            'from_payor_id': 'fromPayorId',
            'link_id': 'linkId',
            'link_type': 'linkType',
            'to_payor_id': 'toPayorId'
        }

        self._from_payor_id = from_payor_id
        self._link_id = link_id
        self._link_type = link_type
        self._to_payor_id = to_payor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayorLinksResponseLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayorLinksResponse_links of this PayorLinksResponseLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_payor_id(self):
        """Gets the from_payor_id of this PayorLinksResponseLinks.


        :return: The from_payor_id of this PayorLinksResponseLinks.
        :rtype: str
        """
        return self._from_payor_id

    @from_payor_id.setter
    def from_payor_id(self, from_payor_id):
        """Sets the from_payor_id of this PayorLinksResponseLinks.


        :param from_payor_id: The from_payor_id of this PayorLinksResponseLinks.
        :type from_payor_id: str
        """
        if from_payor_id is None:
            raise ValueError("Invalid value for `from_payor_id`, must not be `None`")

        self._from_payor_id = from_payor_id

    @property
    def link_id(self):
        """Gets the link_id of this PayorLinksResponseLinks.


        :return: The link_id of this PayorLinksResponseLinks.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this PayorLinksResponseLinks.


        :param link_id: The link_id of this PayorLinksResponseLinks.
        :type link_id: str
        """
        if link_id is None:
            raise ValueError("Invalid value for `link_id`, must not be `None`")

        self._link_id = link_id

    @property
    def link_type(self):
        """Gets the link_type of this PayorLinksResponseLinks.

        The type of the link. One of the following values: PARENT_OF

        :return: The link_type of this PayorLinksResponseLinks.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this PayorLinksResponseLinks.

        The type of the link. One of the following values: PARENT_OF

        :param link_type: The link_type of this PayorLinksResponseLinks.
        :type link_type: str
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")

        self._link_type = link_type

    @property
    def to_payor_id(self):
        """Gets the to_payor_id of this PayorLinksResponseLinks.


        :return: The to_payor_id of this PayorLinksResponseLinks.
        :rtype: str
        """
        return self._to_payor_id

    @to_payor_id.setter
    def to_payor_id(self, to_payor_id):
        """Sets the to_payor_id of this PayorLinksResponseLinks.


        :param to_payor_id: The to_payor_id of this PayorLinksResponseLinks.
        :type to_payor_id: str
        """
        if to_payor_id is None:
            raise ValueError("Invalid value for `to_payor_id`, must not be `None`")

        self._to_payor_id = to_payor_id
