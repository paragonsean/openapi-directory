# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_individual_v3_name import CreateIndividualV3Name
from openapi_server import util


class CreateIndividualV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: date=None, name: CreateIndividualV3Name=None, national_identification: str=None):
        """CreateIndividualV3 - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this CreateIndividualV3.
        :param name: The name of this CreateIndividualV3.
        :param national_identification: The national_identification of this CreateIndividualV3.
        """
        self.openapi_types = {
            'date_of_birth': date,
            'name': CreateIndividualV3Name,
            'national_identification': str
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'name': 'name',
            'national_identification': 'nationalIdentification'
        }

        self._date_of_birth = date_of_birth
        self._name = name
        self._national_identification = national_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIndividualV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIndividualV3 of this CreateIndividualV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CreateIndividualV3.

        Must not be date in future. Example - 1970-05-20

        :return: The date_of_birth of this CreateIndividualV3.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CreateIndividualV3.

        Must not be date in future. Example - 1970-05-20

        :param date_of_birth: The date_of_birth of this CreateIndividualV3.
        :type date_of_birth: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def name(self):
        """Gets the name of this CreateIndividualV3.


        :return: The name of this CreateIndividualV3.
        :rtype: CreateIndividualV3Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateIndividualV3.


        :param name: The name of this CreateIndividualV3.
        :type name: CreateIndividualV3Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def national_identification(self):
        """Gets the national_identification of this CreateIndividualV3.


        :return: The national_identification of this CreateIndividualV3.
        :rtype: str
        """
        return self._national_identification

    @national_identification.setter
    def national_identification(self, national_identification):
        """Sets the national_identification of this CreateIndividualV3.


        :param national_identification: The national_identification of this CreateIndividualV3.
        :type national_identification: str
        """
        if national_identification is not None and len(national_identification) > 30:
            raise ValueError("Invalid value for `national_identification`, length must be less than or equal to `30`")
        if national_identification is not None and len(national_identification) < 6:
            raise ValueError("Invalid value for `national_identification`, length must be greater than or equal to `6`")

        self._national_identification = national_identification
