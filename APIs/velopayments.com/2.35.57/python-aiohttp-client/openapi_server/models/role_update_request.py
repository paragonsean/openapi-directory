# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoleUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roles: List[str]=None, verification_code: str=None):
        """RoleUpdateRequest - a model defined in OpenAPI

        :param roles: The roles of this RoleUpdateRequest.
        :param verification_code: The verification_code of this RoleUpdateRequest.
        """
        self.openapi_types = {
            'roles': List[str],
            'verification_code': str
        }

        self.attribute_map = {
            'roles': 'roles',
            'verification_code': 'verificationCode'
        }

        self._roles = roles
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleUpdateRequest of this RoleUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roles(self):
        """Gets the roles of this RoleUpdateRequest.

        <p>The role(s) for the user</p> <p>The role must exist</p> <p>The role can be a custom role or a system role but the invoker must have the permissions to assign the role</p> <p>System roles are: backoffice.admin, payor.master_admin, payor.admin, payor.support</p> 

        :return: The roles of this RoleUpdateRequest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RoleUpdateRequest.

        <p>The role(s) for the user</p> <p>The role must exist</p> <p>The role can be a custom role or a system role but the invoker must have the permissions to assign the role</p> <p>System roles are: backoffice.admin, payor.master_admin, payor.admin, payor.support</p> 

        :param roles: The roles of this RoleUpdateRequest.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def verification_code(self):
        """Gets the verification_code of this RoleUpdateRequest.

        <p>Optional property that MUST be suppied when manually verifying a user</p> <p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p> 

        :return: The verification_code of this RoleUpdateRequest.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this RoleUpdateRequest.

        <p>Optional property that MUST be suppied when manually verifying a user</p> <p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p> 

        :param verification_code: The verification_code of this RoleUpdateRequest.
        :type verification_code: str
        """
        if verification_code is not None and len(verification_code) > 6:
            raise ValueError("Invalid value for `verification_code`, length must be less than or equal to `6`")
        if verification_code is not None and len(verification_code) < 6:
            raise ValueError("Invalid value for `verification_code`, length must be greater than or equal to `6`")

        self._verification_code = verification_code
