# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentChannelRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, display_order: int=None, element: str=None, max_length: int=None, min_length: int=None, required: bool=None, validation: str=None):
        """PaymentChannelRule - a model defined in OpenAPI

        :param description: The description of this PaymentChannelRule.
        :param display_name: The display_name of this PaymentChannelRule.
        :param display_order: The display_order of this PaymentChannelRule.
        :param element: The element of this PaymentChannelRule.
        :param max_length: The max_length of this PaymentChannelRule.
        :param min_length: The min_length of this PaymentChannelRule.
        :param required: The required of this PaymentChannelRule.
        :param validation: The validation of this PaymentChannelRule.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'display_order': int,
            'element': str,
            'max_length': int,
            'min_length': int,
            'required': bool,
            'validation': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'display_order': 'displayOrder',
            'element': 'element',
            'max_length': 'maxLength',
            'min_length': 'minLength',
            'required': 'required',
            'validation': 'validation'
        }

        self._description = description
        self._display_name = display_name
        self._display_order = display_order
        self._element = element
        self._max_length = max_length
        self._min_length = min_length
        self._required = required
        self._validation = validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentChannelRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentChannelRule of this PaymentChannelRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PaymentChannelRule.

        An optional description, or hint, as to how the user should enter the field value.

        :return: The description of this PaymentChannelRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentChannelRule.

        An optional description, or hint, as to how the user should enter the field value.

        :param description: The description of this PaymentChannelRule.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this PaymentChannelRule.

        User friendly name

        :return: The display_name of this PaymentChannelRule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PaymentChannelRule.

        User friendly name

        :param display_name: The display_name of this PaymentChannelRule.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def display_order(self):
        """Gets the display_order of this PaymentChannelRule.


        :return: The display_order of this PaymentChannelRule.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this PaymentChannelRule.


        :param display_order: The display_order of this PaymentChannelRule.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def element(self):
        """Gets the element of this PaymentChannelRule.

        <p>the rule element</p> <p>will match a given element name for a payment channel configuration 

        :return: The element of this PaymentChannelRule.
        :rtype: str
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this PaymentChannelRule.

        <p>the rule element</p> <p>will match a given element name for a payment channel configuration 

        :param element: The element of this PaymentChannelRule.
        :type element: str
        """
        if element is None:
            raise ValueError("Invalid value for `element`, must not be `None`")

        self._element = element

    @property
    def max_length(self):
        """Gets the max_length of this PaymentChannelRule.

        maximum length of the element data

        :return: The max_length of this PaymentChannelRule.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this PaymentChannelRule.

        maximum length of the element data

        :param max_length: The max_length of this PaymentChannelRule.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this PaymentChannelRule.

        mininum length of the element data

        :return: The min_length of this PaymentChannelRule.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this PaymentChannelRule.

        mininum length of the element data

        :param min_length: The min_length of this PaymentChannelRule.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def required(self):
        """Gets the required of this PaymentChannelRule.

        is this element required

        :return: The required of this PaymentChannelRule.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this PaymentChannelRule.

        is this element required

        :param required: The required of this PaymentChannelRule.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def validation(self):
        """Gets the validation of this PaymentChannelRule.

        a regex to validate the element data

        :return: The validation of this PaymentChannelRule.
        :rtype: str
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this PaymentChannelRule.

        a regex to validate the element data

        :param validation: The validation of this PaymentChannelRule.
        :type validation: str
        """
        if validation is None:
            raise ValueError("Invalid value for `validation`, must not be `None`")

        self._validation = validation
