# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.challenge_v4 import ChallengeV4
from openapi_server.models.company_v4 import CompanyV4
from openapi_server.models.individual_v4 import IndividualV4
from openapi_server.models.payee_address_v4 import PayeeAddressV4
from openapi_server.models.payee_type_enum import PayeeTypeEnum
import re
from openapi_server import util


class UpdatePayeeDetailsRequestV4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PayeeAddressV4=None, challenge: ChallengeV4=None, company: CompanyV4=None, contact_sms_number: str=None, email: str=None, individual: IndividualV4=None, language: str=None, payee_type: PayeeTypeEnum=None):
        """UpdatePayeeDetailsRequestV4 - a model defined in OpenAPI

        :param address: The address of this UpdatePayeeDetailsRequestV4.
        :param challenge: The challenge of this UpdatePayeeDetailsRequestV4.
        :param company: The company of this UpdatePayeeDetailsRequestV4.
        :param contact_sms_number: The contact_sms_number of this UpdatePayeeDetailsRequestV4.
        :param email: The email of this UpdatePayeeDetailsRequestV4.
        :param individual: The individual of this UpdatePayeeDetailsRequestV4.
        :param language: The language of this UpdatePayeeDetailsRequestV4.
        :param payee_type: The payee_type of this UpdatePayeeDetailsRequestV4.
        """
        self.openapi_types = {
            'address': PayeeAddressV4,
            'challenge': ChallengeV4,
            'company': CompanyV4,
            'contact_sms_number': str,
            'email': str,
            'individual': IndividualV4,
            'language': str,
            'payee_type': PayeeTypeEnum
        }

        self.attribute_map = {
            'address': 'address',
            'challenge': 'challenge',
            'company': 'company',
            'contact_sms_number': 'contactSmsNumber',
            'email': 'email',
            'individual': 'individual',
            'language': 'language',
            'payee_type': 'payeeType'
        }

        self._address = address
        self._challenge = challenge
        self._company = company
        self._contact_sms_number = contact_sms_number
        self._email = email
        self._individual = individual
        self._language = language
        self._payee_type = payee_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePayeeDetailsRequestV4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePayeeDetailsRequestV4 of this UpdatePayeeDetailsRequestV4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UpdatePayeeDetailsRequestV4.


        :return: The address of this UpdatePayeeDetailsRequestV4.
        :rtype: PayeeAddressV4
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UpdatePayeeDetailsRequestV4.


        :param address: The address of this UpdatePayeeDetailsRequestV4.
        :type address: PayeeAddressV4
        """

        self._address = address

    @property
    def challenge(self):
        """Gets the challenge of this UpdatePayeeDetailsRequestV4.


        :return: The challenge of this UpdatePayeeDetailsRequestV4.
        :rtype: ChallengeV4
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this UpdatePayeeDetailsRequestV4.


        :param challenge: The challenge of this UpdatePayeeDetailsRequestV4.
        :type challenge: ChallengeV4
        """

        self._challenge = challenge

    @property
    def company(self):
        """Gets the company of this UpdatePayeeDetailsRequestV4.


        :return: The company of this UpdatePayeeDetailsRequestV4.
        :rtype: CompanyV4
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UpdatePayeeDetailsRequestV4.


        :param company: The company of this UpdatePayeeDetailsRequestV4.
        :type company: CompanyV4
        """

        self._company = company

    @property
    def contact_sms_number(self):
        """Gets the contact_sms_number of this UpdatePayeeDetailsRequestV4.

        The phone number of a device that the payee wishes to receive sms messages on 

        :return: The contact_sms_number of this UpdatePayeeDetailsRequestV4.
        :rtype: str
        """
        return self._contact_sms_number

    @contact_sms_number.setter
    def contact_sms_number(self, contact_sms_number):
        """Sets the contact_sms_number of this UpdatePayeeDetailsRequestV4.

        The phone number of a device that the payee wishes to receive sms messages on 

        :param contact_sms_number: The contact_sms_number of this UpdatePayeeDetailsRequestV4.
        :type contact_sms_number: str
        """
        if contact_sms_number is not None and not re.search(r'^\+[1-9]\d{1,14}$', contact_sms_number):
            raise ValueError("Invalid value for `contact_sms_number`, must be a follow pattern or equal to `/^\+[1-9]\d{1,14}$/`")

        self._contact_sms_number = contact_sms_number

    @property
    def email(self):
        """Gets the email of this UpdatePayeeDetailsRequestV4.


        :return: The email of this UpdatePayeeDetailsRequestV4.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdatePayeeDetailsRequestV4.


        :param email: The email of this UpdatePayeeDetailsRequestV4.
        :type email: str
        """

        self._email = email

    @property
    def individual(self):
        """Gets the individual of this UpdatePayeeDetailsRequestV4.


        :return: The individual of this UpdatePayeeDetailsRequestV4.
        :rtype: IndividualV4
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this UpdatePayeeDetailsRequestV4.


        :param individual: The individual of this UpdatePayeeDetailsRequestV4.
        :type individual: IndividualV4
        """

        self._individual = individual

    @property
    def language(self):
        """Gets the language of this UpdatePayeeDetailsRequestV4.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :return: The language of this UpdatePayeeDetailsRequestV4.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UpdatePayeeDetailsRequestV4.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :param language: The language of this UpdatePayeeDetailsRequestV4.
        :type language: str
        """

        self._language = language

    @property
    def payee_type(self):
        """Gets the payee_type of this UpdatePayeeDetailsRequestV4.


        :return: The payee_type of this UpdatePayeeDetailsRequestV4.
        :rtype: PayeeTypeEnum
        """
        return self._payee_type

    @payee_type.setter
    def payee_type(self, payee_type):
        """Sets the payee_type of this UpdatePayeeDetailsRequestV4.


        :param payee_type: The payee_type of this UpdatePayeeDetailsRequestV4.
        :type payee_type: PayeeTypeEnum
        """

        self._payee_type = payee_type
