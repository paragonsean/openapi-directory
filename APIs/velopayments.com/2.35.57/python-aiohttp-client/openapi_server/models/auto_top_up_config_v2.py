# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoTopUpConfigV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, min_balance: int=None, target_balance: int=None):
        """AutoTopUpConfigV2 - a model defined in OpenAPI

        :param enabled: The enabled of this AutoTopUpConfigV2.
        :param min_balance: The min_balance of this AutoTopUpConfigV2.
        :param target_balance: The target_balance of this AutoTopUpConfigV2.
        """
        self.openapi_types = {
            'enabled': bool,
            'min_balance': int,
            'target_balance': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'min_balance': 'minBalance',
            'target_balance': 'targetBalance'
        }

        self._enabled = enabled
        self._min_balance = min_balance
        self._target_balance = target_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoTopUpConfigV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoTopUpConfigV2 of this AutoTopUpConfigV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AutoTopUpConfigV2.

        Is auto top-up enabled? automatically trigger funding to top-up the source account balance when the balance falls below the configured minimum level.

        :return: The enabled of this AutoTopUpConfigV2.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutoTopUpConfigV2.

        Is auto top-up enabled? automatically trigger funding to top-up the source account balance when the balance falls below the configured minimum level.

        :param enabled: The enabled of this AutoTopUpConfigV2.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def min_balance(self):
        """Gets the min_balance of this AutoTopUpConfigV2.

        When the payor balance falls below this level then auto top-up will be triggered. Note - This is in minor units.

        :return: The min_balance of this AutoTopUpConfigV2.
        :rtype: int
        """
        return self._min_balance

    @min_balance.setter
    def min_balance(self, min_balance):
        """Sets the min_balance of this AutoTopUpConfigV2.

        When the payor balance falls below this level then auto top-up will be triggered. Note - This is in minor units.

        :param min_balance: The min_balance of this AutoTopUpConfigV2.
        :type min_balance: int
        """

        self._min_balance = min_balance

    @property
    def target_balance(self):
        """Gets the target_balance of this AutoTopUpConfigV2.

        When the payor balance falls below the min balance then auto top-up will request funds bring the balance to this level. Note - this is in minor units.

        :return: The target_balance of this AutoTopUpConfigV2.
        :rtype: int
        """
        return self._target_balance

    @target_balance.setter
    def target_balance(self, target_balance):
        """Sets the target_balance of this AutoTopUpConfigV2.

        When the payor balance falls below the min balance then auto top-up will request funds bring the balance to this level. Note - this is in minor units.

        :param target_balance: The target_balance of this AutoTopUpConfigV2.
        :type target_balance: int
        """

        self._target_balance = target_balance
