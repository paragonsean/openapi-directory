# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_data import ErrorData
from openapi_server.models.localisation_details import LocalisationDetails
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, error_data: ErrorData=None, error_message: str=None, localisation_details: LocalisationDetails=None, location: str=None, location_type: str=None, reason_code: str=None):
        """Error - a model defined in OpenAPI

        :param error_code: The error_code of this Error.
        :param error_data: The error_data of this Error.
        :param error_message: The error_message of this Error.
        :param localisation_details: The localisation_details of this Error.
        :param location: The location of this Error.
        :param location_type: The location_type of this Error.
        :param reason_code: The reason_code of this Error.
        """
        self.openapi_types = {
            'error_code': str,
            'error_data': ErrorData,
            'error_message': str,
            'localisation_details': LocalisationDetails,
            'location': str,
            'location_type': str,
            'reason_code': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_data': 'errorData',
            'error_message': 'errorMessage',
            'localisation_details': 'localisationDetails',
            'location': 'location',
            'location_type': 'locationType',
            'reason_code': 'reasonCode'
        }

        self._error_code = error_code
        self._error_data = error_data
        self._error_message = error_message
        self._localisation_details = localisation_details
        self._location = location
        self._location_type = location_type
        self._reason_code = reason_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this Error.

        Unique numeric code that can be used for switching client behavior or to drive translated or customised error messages

        :return: The error_code of this Error.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.

        Unique numeric code that can be used for switching client behavior or to drive translated or customised error messages

        :param error_code: The error_code of this Error.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_data(self):
        """Gets the error_data of this Error.


        :return: The error_data of this Error.
        :rtype: ErrorData
        """
        return self._error_data

    @error_data.setter
    def error_data(self, error_data):
        """Sets the error_data of this Error.


        :param error_data: The error_data of this Error.
        :type error_data: ErrorData
        """

        self._error_data = error_data

    @property
    def error_message(self):
        """Gets the error_message of this Error.

        English language message indicating the nature of the error

        :return: The error_message of this Error.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Error.

        English language message indicating the nature of the error

        :param error_message: The error_message of this Error.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def localisation_details(self):
        """Gets the localisation_details of this Error.


        :return: The localisation_details of this Error.
        :rtype: LocalisationDetails
        """
        return self._localisation_details

    @localisation_details.setter
    def localisation_details(self, localisation_details):
        """Sets the localisation_details of this Error.


        :param localisation_details: The localisation_details of this Error.
        :type localisation_details: LocalisationDetails
        """

        self._localisation_details = localisation_details

    @property
    def location(self):
        """Gets the location of this Error.

        the property or object that caused the error

        :return: The location of this Error.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Error.

        the property or object that caused the error

        :param location: The location of this Error.
        :type location: str
        """

        self._location = location

    @property
    def location_type(self):
        """Gets the location_type of this Error.

        the location type in the request that was the cause of the error 

        :return: The location_type of this Error.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Error.

        the location type in the request that was the cause of the error 

        :param location_type: The location_type of this Error.
        :type location_type: str
        """
        allowed_values = ["requestBody", "queryParam", "requestParam", "header", "pathParam"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def reason_code(self):
        """Gets the reason_code of this Error.

        a camel-cased string that can be used by clients to localise client error messages (deprecated)

        :return: The reason_code of this Error.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Error.

        a camel-cased string that can be used by clients to localise client error messages (deprecated)

        :param reason_code: The reason_code of this Error.
        :type reason_code: str
        """

        self._reason_code = reason_code
