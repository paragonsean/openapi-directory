# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FundingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_date: datetime=None, allocation_type: str=None, amount: int=None, currency: str=None, detected_funding_ref: str=None, funding_account_type: str=None, funding_id: str=None, hidden_date: datetime=None, payor_id: str=None, physical_account_name: str=None, reason: str=None, source_account_id: str=None, status: str=None, text: str=None):
        """FundingResponse - a model defined in OpenAPI

        :param allocation_date: The allocation_date of this FundingResponse.
        :param allocation_type: The allocation_type of this FundingResponse.
        :param amount: The amount of this FundingResponse.
        :param currency: The currency of this FundingResponse.
        :param detected_funding_ref: The detected_funding_ref of this FundingResponse.
        :param funding_account_type: The funding_account_type of this FundingResponse.
        :param funding_id: The funding_id of this FundingResponse.
        :param hidden_date: The hidden_date of this FundingResponse.
        :param payor_id: The payor_id of this FundingResponse.
        :param physical_account_name: The physical_account_name of this FundingResponse.
        :param reason: The reason of this FundingResponse.
        :param source_account_id: The source_account_id of this FundingResponse.
        :param status: The status of this FundingResponse.
        :param text: The text of this FundingResponse.
        """
        self.openapi_types = {
            'allocation_date': datetime,
            'allocation_type': str,
            'amount': int,
            'currency': str,
            'detected_funding_ref': str,
            'funding_account_type': str,
            'funding_id': str,
            'hidden_date': datetime,
            'payor_id': str,
            'physical_account_name': str,
            'reason': str,
            'source_account_id': str,
            'status': str,
            'text': str
        }

        self.attribute_map = {
            'allocation_date': 'allocationDate',
            'allocation_type': 'allocationType',
            'amount': 'amount',
            'currency': 'currency',
            'detected_funding_ref': 'detectedFundingRef',
            'funding_account_type': 'fundingAccountType',
            'funding_id': 'fundingId',
            'hidden_date': 'hiddenDate',
            'payor_id': 'payorId',
            'physical_account_name': 'physicalAccountName',
            'reason': 'reason',
            'source_account_id': 'sourceAccountId',
            'status': 'status',
            'text': 'text'
        }

        self._allocation_date = allocation_date
        self._allocation_type = allocation_type
        self._amount = amount
        self._currency = currency
        self._detected_funding_ref = detected_funding_ref
        self._funding_account_type = funding_account_type
        self._funding_id = funding_id
        self._hidden_date = hidden_date
        self._payor_id = payor_id
        self._physical_account_name = physical_account_name
        self._reason = reason
        self._source_account_id = source_account_id
        self._status = status
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundingResponse of this FundingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_date(self):
        """Gets the allocation_date of this FundingResponse.


        :return: The allocation_date of this FundingResponse.
        :rtype: datetime
        """
        return self._allocation_date

    @allocation_date.setter
    def allocation_date(self, allocation_date):
        """Sets the allocation_date of this FundingResponse.


        :param allocation_date: The allocation_date of this FundingResponse.
        :type allocation_date: datetime
        """
        if allocation_date is None:
            raise ValueError("Invalid value for `allocation_date`, must not be `None`")

        self._allocation_date = allocation_date

    @property
    def allocation_type(self):
        """Gets the allocation_type of this FundingResponse.

        Funding Allocation Type. One of the following values: AUTOMATIC, MANUAL

        :return: The allocation_type of this FundingResponse.
        :rtype: str
        """
        return self._allocation_type

    @allocation_type.setter
    def allocation_type(self, allocation_type):
        """Sets the allocation_type of this FundingResponse.

        Funding Allocation Type. One of the following values: AUTOMATIC, MANUAL

        :param allocation_type: The allocation_type of this FundingResponse.
        :type allocation_type: str
        """

        self._allocation_type = allocation_type

    @property
    def amount(self):
        """Gets the amount of this FundingResponse.


        :return: The amount of this FundingResponse.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FundingResponse.


        :param amount: The amount of this FundingResponse.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this FundingResponse.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency of this FundingResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FundingResponse.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency: The currency of this FundingResponse.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency = currency

    @property
    def detected_funding_ref(self):
        """Gets the detected_funding_ref of this FundingResponse.


        :return: The detected_funding_ref of this FundingResponse.
        :rtype: str
        """
        return self._detected_funding_ref

    @detected_funding_ref.setter
    def detected_funding_ref(self, detected_funding_ref):
        """Sets the detected_funding_ref of this FundingResponse.


        :param detected_funding_ref: The detected_funding_ref of this FundingResponse.
        :type detected_funding_ref: str
        """

        self._detected_funding_ref = detected_funding_ref

    @property
    def funding_account_type(self):
        """Gets the funding_account_type of this FundingResponse.

        Funding Account Type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE

        :return: The funding_account_type of this FundingResponse.
        :rtype: str
        """
        return self._funding_account_type

    @funding_account_type.setter
    def funding_account_type(self, funding_account_type):
        """Sets the funding_account_type of this FundingResponse.

        Funding Account Type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE

        :param funding_account_type: The funding_account_type of this FundingResponse.
        :type funding_account_type: str
        """
        if funding_account_type is None:
            raise ValueError("Invalid value for `funding_account_type`, must not be `None`")

        self._funding_account_type = funding_account_type

    @property
    def funding_id(self):
        """Gets the funding_id of this FundingResponse.


        :return: The funding_id of this FundingResponse.
        :rtype: str
        """
        return self._funding_id

    @funding_id.setter
    def funding_id(self, funding_id):
        """Sets the funding_id of this FundingResponse.


        :param funding_id: The funding_id of this FundingResponse.
        :type funding_id: str
        """
        if funding_id is None:
            raise ValueError("Invalid value for `funding_id`, must not be `None`")

        self._funding_id = funding_id

    @property
    def hidden_date(self):
        """Gets the hidden_date of this FundingResponse.


        :return: The hidden_date of this FundingResponse.
        :rtype: datetime
        """
        return self._hidden_date

    @hidden_date.setter
    def hidden_date(self, hidden_date):
        """Sets the hidden_date of this FundingResponse.


        :param hidden_date: The hidden_date of this FundingResponse.
        :type hidden_date: datetime
        """

        self._hidden_date = hidden_date

    @property
    def payor_id(self):
        """Gets the payor_id of this FundingResponse.


        :return: The payor_id of this FundingResponse.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this FundingResponse.


        :param payor_id: The payor_id of this FundingResponse.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id

    @property
    def physical_account_name(self):
        """Gets the physical_account_name of this FundingResponse.


        :return: The physical_account_name of this FundingResponse.
        :rtype: str
        """
        return self._physical_account_name

    @physical_account_name.setter
    def physical_account_name(self, physical_account_name):
        """Sets the physical_account_name of this FundingResponse.


        :param physical_account_name: The physical_account_name of this FundingResponse.
        :type physical_account_name: str
        """

        self._physical_account_name = physical_account_name

    @property
    def reason(self):
        """Gets the reason of this FundingResponse.


        :return: The reason of this FundingResponse.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this FundingResponse.


        :param reason: The reason of this FundingResponse.
        :type reason: str
        """

        self._reason = reason

    @property
    def source_account_id(self):
        """Gets the source_account_id of this FundingResponse.


        :return: The source_account_id of this FundingResponse.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this FundingResponse.


        :param source_account_id: The source_account_id of this FundingResponse.
        :type source_account_id: str
        """

        self._source_account_id = source_account_id

    @property
    def status(self):
        """Gets the status of this FundingResponse.

        Current status of the funding. One of the follwing values: PENDING, UNALLOCATED, ALLOCATED, HIDDEN, RETURNED, RETURNING, BULK_RETURN, OTHER

        :return: The status of this FundingResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FundingResponse.

        Current status of the funding. One of the follwing values: PENDING, UNALLOCATED, ALLOCATED, HIDDEN, RETURNED, RETURNING, BULK_RETURN, OTHER

        :param status: The status of this FundingResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def text(self):
        """Gets the text of this FundingResponse.


        :return: The text of this FundingResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FundingResponse.


        :param text: The text of this FundingResponse.
        :type text: str
        """

        self._text = text
