# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_event_response_v3 import PaymentEventResponseV3
from openapi_server import util


class PaymentResponseV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, country_code: str=None, events: List[PaymentEventResponseV3]=None, filename_reference: str=None, funding_status: str=None, iban: str=None, individual_identification_number: str=None, inverted_rate: float=None, payee_id: str=None, payment_amount: int=None, payment_channel_id: str=None, payment_channel_name: str=None, payment_currency: str=None, payment_id: str=None, payment_memo: str=None, payment_scheme: str=None, payor_id: str=None, payor_name: str=None, payor_payment_id: str=None, quote_id: str=None, rails_batch_id: str=None, rails_id: str='RAILS ID UNAVAILABLE', rails_payment_id: str=None, rate: float=None, rejection_reason: str=None, remote_id: str=None, return_cost: int=None, return_reason: str=None, routing_number: str=None, source_account_id: str=None, source_account_name: str=None, source_amount: int=None, source_currency: str=None, status: str=None, submitted_date_time: datetime=None, trace_number: str=None):
        """PaymentResponseV3 - a model defined in OpenAPI

        :param account_name: The account_name of this PaymentResponseV3.
        :param account_number: The account_number of this PaymentResponseV3.
        :param country_code: The country_code of this PaymentResponseV3.
        :param events: The events of this PaymentResponseV3.
        :param filename_reference: The filename_reference of this PaymentResponseV3.
        :param funding_status: The funding_status of this PaymentResponseV3.
        :param iban: The iban of this PaymentResponseV3.
        :param individual_identification_number: The individual_identification_number of this PaymentResponseV3.
        :param inverted_rate: The inverted_rate of this PaymentResponseV3.
        :param payee_id: The payee_id of this PaymentResponseV3.
        :param payment_amount: The payment_amount of this PaymentResponseV3.
        :param payment_channel_id: The payment_channel_id of this PaymentResponseV3.
        :param payment_channel_name: The payment_channel_name of this PaymentResponseV3.
        :param payment_currency: The payment_currency of this PaymentResponseV3.
        :param payment_id: The payment_id of this PaymentResponseV3.
        :param payment_memo: The payment_memo of this PaymentResponseV3.
        :param payment_scheme: The payment_scheme of this PaymentResponseV3.
        :param payor_id: The payor_id of this PaymentResponseV3.
        :param payor_name: The payor_name of this PaymentResponseV3.
        :param payor_payment_id: The payor_payment_id of this PaymentResponseV3.
        :param quote_id: The quote_id of this PaymentResponseV3.
        :param rails_batch_id: The rails_batch_id of this PaymentResponseV3.
        :param rails_id: The rails_id of this PaymentResponseV3.
        :param rails_payment_id: The rails_payment_id of this PaymentResponseV3.
        :param rate: The rate of this PaymentResponseV3.
        :param rejection_reason: The rejection_reason of this PaymentResponseV3.
        :param remote_id: The remote_id of this PaymentResponseV3.
        :param return_cost: The return_cost of this PaymentResponseV3.
        :param return_reason: The return_reason of this PaymentResponseV3.
        :param routing_number: The routing_number of this PaymentResponseV3.
        :param source_account_id: The source_account_id of this PaymentResponseV3.
        :param source_account_name: The source_account_name of this PaymentResponseV3.
        :param source_amount: The source_amount of this PaymentResponseV3.
        :param source_currency: The source_currency of this PaymentResponseV3.
        :param status: The status of this PaymentResponseV3.
        :param submitted_date_time: The submitted_date_time of this PaymentResponseV3.
        :param trace_number: The trace_number of this PaymentResponseV3.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'country_code': str,
            'events': List[PaymentEventResponseV3],
            'filename_reference': str,
            'funding_status': str,
            'iban': str,
            'individual_identification_number': str,
            'inverted_rate': float,
            'payee_id': str,
            'payment_amount': int,
            'payment_channel_id': str,
            'payment_channel_name': str,
            'payment_currency': str,
            'payment_id': str,
            'payment_memo': str,
            'payment_scheme': str,
            'payor_id': str,
            'payor_name': str,
            'payor_payment_id': str,
            'quote_id': str,
            'rails_batch_id': str,
            'rails_id': str,
            'rails_payment_id': str,
            'rate': float,
            'rejection_reason': str,
            'remote_id': str,
            'return_cost': int,
            'return_reason': str,
            'routing_number': str,
            'source_account_id': str,
            'source_account_name': str,
            'source_amount': int,
            'source_currency': str,
            'status': str,
            'submitted_date_time': datetime,
            'trace_number': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'country_code': 'countryCode',
            'events': 'events',
            'filename_reference': 'filenameReference',
            'funding_status': 'fundingStatus',
            'iban': 'iban',
            'individual_identification_number': 'individualIdentificationNumber',
            'inverted_rate': 'invertedRate',
            'payee_id': 'payeeId',
            'payment_amount': 'paymentAmount',
            'payment_channel_id': 'paymentChannelId',
            'payment_channel_name': 'paymentChannelName',
            'payment_currency': 'paymentCurrency',
            'payment_id': 'paymentId',
            'payment_memo': 'paymentMemo',
            'payment_scheme': 'paymentScheme',
            'payor_id': 'payorId',
            'payor_name': 'payorName',
            'payor_payment_id': 'payorPaymentId',
            'quote_id': 'quoteId',
            'rails_batch_id': 'railsBatchId',
            'rails_id': 'railsId',
            'rails_payment_id': 'railsPaymentId',
            'rate': 'rate',
            'rejection_reason': 'rejectionReason',
            'remote_id': 'remoteId',
            'return_cost': 'returnCost',
            'return_reason': 'returnReason',
            'routing_number': 'routingNumber',
            'source_account_id': 'sourceAccountId',
            'source_account_name': 'sourceAccountName',
            'source_amount': 'sourceAmount',
            'source_currency': 'sourceCurrency',
            'status': 'status',
            'submitted_date_time': 'submittedDateTime',
            'trace_number': 'traceNumber'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._country_code = country_code
        self._events = events
        self._filename_reference = filename_reference
        self._funding_status = funding_status
        self._iban = iban
        self._individual_identification_number = individual_identification_number
        self._inverted_rate = inverted_rate
        self._payee_id = payee_id
        self._payment_amount = payment_amount
        self._payment_channel_id = payment_channel_id
        self._payment_channel_name = payment_channel_name
        self._payment_currency = payment_currency
        self._payment_id = payment_id
        self._payment_memo = payment_memo
        self._payment_scheme = payment_scheme
        self._payor_id = payor_id
        self._payor_name = payor_name
        self._payor_payment_id = payor_payment_id
        self._quote_id = quote_id
        self._rails_batch_id = rails_batch_id
        self._rails_id = rails_id
        self._rails_payment_id = rails_payment_id
        self._rate = rate
        self._rejection_reason = rejection_reason
        self._remote_id = remote_id
        self._return_cost = return_cost
        self._return_reason = return_reason
        self._routing_number = routing_number
        self._source_account_id = source_account_id
        self._source_account_name = source_account_name
        self._source_amount = source_amount
        self._source_currency = source_currency
        self._status = status
        self._submitted_date_time = submitted_date_time
        self._trace_number = trace_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResponseV3 of this PaymentResponseV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this PaymentResponseV3.


        :return: The account_name of this PaymentResponseV3.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this PaymentResponseV3.


        :param account_name: The account_name of this PaymentResponseV3.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this PaymentResponseV3.

        The account number for the account which will receive the payment.

        :return: The account_number of this PaymentResponseV3.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PaymentResponseV3.

        The account number for the account which will receive the payment.

        :param account_number: The account_number of this PaymentResponseV3.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def country_code(self):
        """Gets the country_code of this PaymentResponseV3.

        The country code of the payment channel.

        :return: The country_code of this PaymentResponseV3.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PaymentResponseV3.

        The country code of the payment channel.

        :param country_code: The country_code of this PaymentResponseV3.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def events(self):
        """Gets the events of this PaymentResponseV3.


        :return: The events of this PaymentResponseV3.
        :rtype: List[PaymentEventResponseV3]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this PaymentResponseV3.


        :param events: The events of this PaymentResponseV3.
        :type events: List[PaymentEventResponseV3]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def filename_reference(self):
        """Gets the filename_reference of this PaymentResponseV3.

        ACH file payment was submitted in, if applicable

        :return: The filename_reference of this PaymentResponseV3.
        :rtype: str
        """
        return self._filename_reference

    @filename_reference.setter
    def filename_reference(self, filename_reference):
        """Sets the filename_reference of this PaymentResponseV3.

        ACH file payment was submitted in, if applicable

        :param filename_reference: The filename_reference of this PaymentResponseV3.
        :type filename_reference: str
        """

        self._filename_reference = filename_reference

    @property
    def funding_status(self):
        """Gets the funding_status of this PaymentResponseV3.

        The funding status of the payment. One of the following values: [FUNDED, INSTRUCTED, UNFUNDED

        :return: The funding_status of this PaymentResponseV3.
        :rtype: str
        """
        return self._funding_status

    @funding_status.setter
    def funding_status(self, funding_status):
        """Sets the funding_status of this PaymentResponseV3.

        The funding status of the payment. One of the following values: [FUNDED, INSTRUCTED, UNFUNDED

        :param funding_status: The funding_status of this PaymentResponseV3.
        :type funding_status: str
        """
        if funding_status is None:
            raise ValueError("Invalid value for `funding_status`, must not be `None`")

        self._funding_status = funding_status

    @property
    def iban(self):
        """Gets the iban of this PaymentResponseV3.

        The iban for the payment.

        :return: The iban of this PaymentResponseV3.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PaymentResponseV3.

        The iban for the payment.

        :param iban: The iban of this PaymentResponseV3.
        :type iban: str
        """

        self._iban = iban

    @property
    def individual_identification_number(self):
        """Gets the individual_identification_number of this PaymentResponseV3.

        Individual Identification Number assigned to the payment in the ACH file, if applicable

        :return: The individual_identification_number of this PaymentResponseV3.
        :rtype: str
        """
        return self._individual_identification_number

    @individual_identification_number.setter
    def individual_identification_number(self, individual_identification_number):
        """Sets the individual_identification_number of this PaymentResponseV3.

        Individual Identification Number assigned to the payment in the ACH file, if applicable

        :param individual_identification_number: The individual_identification_number of this PaymentResponseV3.
        :type individual_identification_number: str
        """

        self._individual_identification_number = individual_identification_number

    @property
    def inverted_rate(self):
        """Gets the inverted_rate of this PaymentResponseV3.

        The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed

        :return: The inverted_rate of this PaymentResponseV3.
        :rtype: float
        """
        return self._inverted_rate

    @inverted_rate.setter
    def inverted_rate(self, inverted_rate):
        """Sets the inverted_rate of this PaymentResponseV3.

        The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed

        :param inverted_rate: The inverted_rate of this PaymentResponseV3.
        :type inverted_rate: float
        """

        self._inverted_rate = inverted_rate

    @property
    def payee_id(self):
        """Gets the payee_id of this PaymentResponseV3.

        The id of the paymeee

        :return: The payee_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this PaymentResponseV3.

        The id of the paymeee

        :param payee_id: The payee_id of this PaymentResponseV3.
        :type payee_id: str
        """
        if payee_id is None:
            raise ValueError("Invalid value for `payee_id`, must not be `None`")

        self._payee_id = payee_id

    @property
    def payment_amount(self):
        """Gets the payment_amount of this PaymentResponseV3.

        The amount which the payee will receive

        :return: The payment_amount of this PaymentResponseV3.
        :rtype: int
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this PaymentResponseV3.

        The amount which the payee will receive

        :param payment_amount: The payment_amount of this PaymentResponseV3.
        :type payment_amount: int
        """
        if payment_amount is None:
            raise ValueError("Invalid value for `payment_amount`, must not be `None`")

        self._payment_amount = payment_amount

    @property
    def payment_channel_id(self):
        """Gets the payment_channel_id of this PaymentResponseV3.


        :return: The payment_channel_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_channel_id

    @payment_channel_id.setter
    def payment_channel_id(self, payment_channel_id):
        """Sets the payment_channel_id of this PaymentResponseV3.


        :param payment_channel_id: The payment_channel_id of this PaymentResponseV3.
        :type payment_channel_id: str
        """

        self._payment_channel_id = payment_channel_id

    @property
    def payment_channel_name(self):
        """Gets the payment_channel_name of this PaymentResponseV3.


        :return: The payment_channel_name of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_channel_name

    @payment_channel_name.setter
    def payment_channel_name(self, payment_channel_name):
        """Sets the payment_channel_name of this PaymentResponseV3.


        :param payment_channel_name: The payment_channel_name of this PaymentResponseV3.
        :type payment_channel_name: str
        """

        self._payment_channel_name = payment_channel_name

    @property
    def payment_currency(self):
        """Gets the payment_currency of this PaymentResponseV3.

        ISO 3 character currency code

        :return: The payment_currency of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this PaymentResponseV3.

        ISO 3 character currency code

        :param payment_currency: The payment_currency of this PaymentResponseV3.
        :type payment_currency: str
        """
        if payment_currency is not None and len(payment_currency) > 3:
            raise ValueError("Invalid value for `payment_currency`, length must be less than or equal to `3`")
        if payment_currency is not None and len(payment_currency) < 3:
            raise ValueError("Invalid value for `payment_currency`, length must be greater than or equal to `3`")

        self._payment_currency = payment_currency

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentResponseV3.

        The id of the payment

        :return: The payment_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentResponseV3.

        The id of the payment

        :param payment_id: The payment_id of this PaymentResponseV3.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def payment_memo(self):
        """Gets the payment_memo of this PaymentResponseV3.

        The payment memo set by the payor

        :return: The payment_memo of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_memo

    @payment_memo.setter
    def payment_memo(self, payment_memo):
        """Sets the payment_memo of this PaymentResponseV3.

        The payment memo set by the payor

        :param payment_memo: The payment_memo of this PaymentResponseV3.
        :type payment_memo: str
        """

        self._payment_memo = payment_memo

    @property
    def payment_scheme(self):
        """Gets the payment_scheme of this PaymentResponseV3.


        :return: The payment_scheme of this PaymentResponseV3.
        :rtype: str
        """
        return self._payment_scheme

    @payment_scheme.setter
    def payment_scheme(self, payment_scheme):
        """Sets the payment_scheme of this PaymentResponseV3.


        :param payment_scheme: The payment_scheme of this PaymentResponseV3.
        :type payment_scheme: str
        """

        self._payment_scheme = payment_scheme

    @property
    def payor_id(self):
        """Gets the payor_id of this PaymentResponseV3.

        The id of the payor

        :return: The payor_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this PaymentResponseV3.

        The id of the payor

        :param payor_id: The payor_id of this PaymentResponseV3.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id

    @property
    def payor_name(self):
        """Gets the payor_name of this PaymentResponseV3.

        The name of the payor

        :return: The payor_name of this PaymentResponseV3.
        :rtype: str
        """
        return self._payor_name

    @payor_name.setter
    def payor_name(self, payor_name):
        """Sets the payor_name of this PaymentResponseV3.

        The name of the payor

        :param payor_name: The payor_name of this PaymentResponseV3.
        :type payor_name: str
        """

        self._payor_name = payor_name

    @property
    def payor_payment_id(self):
        """Gets the payor_payment_id of this PaymentResponseV3.


        :return: The payor_payment_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._payor_payment_id

    @payor_payment_id.setter
    def payor_payment_id(self, payor_payment_id):
        """Sets the payor_payment_id of this PaymentResponseV3.


        :param payor_payment_id: The payor_payment_id of this PaymentResponseV3.
        :type payor_payment_id: str
        """

        self._payor_payment_id = payor_payment_id

    @property
    def quote_id(self):
        """Gets the quote_id of this PaymentResponseV3.

        The quote Id used for the FX

        :return: The quote_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this PaymentResponseV3.

        The quote Id used for the FX

        :param quote_id: The quote_id of this PaymentResponseV3.
        :type quote_id: str
        """
        if quote_id is None:
            raise ValueError("Invalid value for `quote_id`, must not be `None`")

        self._quote_id = quote_id

    @property
    def rails_batch_id(self):
        """Gets the rails_batch_id of this PaymentResponseV3.


        :return: The rails_batch_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._rails_batch_id

    @rails_batch_id.setter
    def rails_batch_id(self, rails_batch_id):
        """Sets the rails_batch_id of this PaymentResponseV3.


        :param rails_batch_id: The rails_batch_id of this PaymentResponseV3.
        :type rails_batch_id: str
        """

        self._rails_batch_id = rails_batch_id

    @property
    def rails_id(self):
        """Gets the rails_id of this PaymentResponseV3.

        The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.

        :return: The rails_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._rails_id

    @rails_id.setter
    def rails_id(self, rails_id):
        """Sets the rails_id of this PaymentResponseV3.

        The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.

        :param rails_id: The rails_id of this PaymentResponseV3.
        :type rails_id: str
        """
        if rails_id is None:
            raise ValueError("Invalid value for `rails_id`, must not be `None`")

        self._rails_id = rails_id

    @property
    def rails_payment_id(self):
        """Gets the rails_payment_id of this PaymentResponseV3.


        :return: The rails_payment_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._rails_payment_id

    @rails_payment_id.setter
    def rails_payment_id(self, rails_payment_id):
        """Sets the rails_payment_id of this PaymentResponseV3.


        :param rails_payment_id: The rails_payment_id of this PaymentResponseV3.
        :type rails_payment_id: str
        """

        self._rails_payment_id = rails_payment_id

    @property
    def rate(self):
        """Gets the rate of this PaymentResponseV3.

        The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed

        :return: The rate of this PaymentResponseV3.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this PaymentResponseV3.

        The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed

        :param rate: The rate of this PaymentResponseV3.
        :type rate: float
        """

        self._rate = rate

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this PaymentResponseV3.


        :return: The rejection_reason of this PaymentResponseV3.
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this PaymentResponseV3.


        :param rejection_reason: The rejection_reason of this PaymentResponseV3.
        :type rejection_reason: str
        """

        self._rejection_reason = rejection_reason

    @property
    def remote_id(self):
        """Gets the remote_id of this PaymentResponseV3.

        The remote id by which the payor refers to the payee. Only populated once payment is confirmed

        :return: The remote_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PaymentResponseV3.

        The remote id by which the payor refers to the payee. Only populated once payment is confirmed

        :param remote_id: The remote_id of this PaymentResponseV3.
        :type remote_id: str
        """

        self._remote_id = remote_id

    @property
    def return_cost(self):
        """Gets the return_cost of this PaymentResponseV3.

        The return cost if a returned payment.

        :return: The return_cost of this PaymentResponseV3.
        :rtype: int
        """
        return self._return_cost

    @return_cost.setter
    def return_cost(self, return_cost):
        """Sets the return_cost of this PaymentResponseV3.

        The return cost if a returned payment.

        :param return_cost: The return_cost of this PaymentResponseV3.
        :type return_cost: int
        """

        self._return_cost = return_cost

    @property
    def return_reason(self):
        """Gets the return_reason of this PaymentResponseV3.


        :return: The return_reason of this PaymentResponseV3.
        :rtype: str
        """
        return self._return_reason

    @return_reason.setter
    def return_reason(self, return_reason):
        """Sets the return_reason of this PaymentResponseV3.


        :param return_reason: The return_reason of this PaymentResponseV3.
        :type return_reason: str
        """

        self._return_reason = return_reason

    @property
    def routing_number(self):
        """Gets the routing_number of this PaymentResponseV3.

        The routing number for the payment.

        :return: The routing_number of this PaymentResponseV3.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PaymentResponseV3.

        The routing number for the payment.

        :param routing_number: The routing_number of this PaymentResponseV3.
        :type routing_number: str
        """

        self._routing_number = routing_number

    @property
    def source_account_id(self):
        """Gets the source_account_id of this PaymentResponseV3.

        The id of the source account from which the payment was taken

        :return: The source_account_id of this PaymentResponseV3.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this PaymentResponseV3.

        The id of the source account from which the payment was taken

        :param source_account_id: The source_account_id of this PaymentResponseV3.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")

        self._source_account_id = source_account_id

    @property
    def source_account_name(self):
        """Gets the source_account_name of this PaymentResponseV3.

        The name of the source account from which the payment was taken

        :return: The source_account_name of this PaymentResponseV3.
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this PaymentResponseV3.

        The name of the source account from which the payment was taken

        :param source_account_name: The source_account_name of this PaymentResponseV3.
        :type source_account_name: str
        """

        self._source_account_name = source_account_name

    @property
    def source_amount(self):
        """Gets the source_amount of this PaymentResponseV3.

        The source amount for the payment (amount debited to make the payment)

        :return: The source_amount of this PaymentResponseV3.
        :rtype: int
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """Sets the source_amount of this PaymentResponseV3.

        The source amount for the payment (amount debited to make the payment)

        :param source_amount: The source_amount of this PaymentResponseV3.
        :type source_amount: int
        """

        self._source_amount = source_amount

    @property
    def source_currency(self):
        """Gets the source_currency of this PaymentResponseV3.

        ISO 3 character currency code

        :return: The source_currency of this PaymentResponseV3.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this PaymentResponseV3.

        ISO 3 character currency code

        :param source_currency: The source_currency of this PaymentResponseV3.
        :type source_currency: str
        """
        if source_currency is not None and len(source_currency) > 3:
            raise ValueError("Invalid value for `source_currency`, length must be less than or equal to `3`")
        if source_currency is not None and len(source_currency) < 3:
            raise ValueError("Invalid value for `source_currency`, length must be greater than or equal to `3`")

        self._source_currency = source_currency

    @property
    def status(self):
        """Gets the status of this PaymentResponseV3.

        Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, FAILED, WITHDRAWN

        :return: The status of this PaymentResponseV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentResponseV3.

        Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, FAILED, WITHDRAWN

        :param status: The status of this PaymentResponseV3.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def submitted_date_time(self):
        """Gets the submitted_date_time of this PaymentResponseV3.


        :return: The submitted_date_time of this PaymentResponseV3.
        :rtype: datetime
        """
        return self._submitted_date_time

    @submitted_date_time.setter
    def submitted_date_time(self, submitted_date_time):
        """Sets the submitted_date_time of this PaymentResponseV3.


        :param submitted_date_time: The submitted_date_time of this PaymentResponseV3.
        :type submitted_date_time: datetime
        """
        if submitted_date_time is None:
            raise ValueError("Invalid value for `submitted_date_time`, must not be `None`")

        self._submitted_date_time = submitted_date_time

    @property
    def trace_number(self):
        """Gets the trace_number of this PaymentResponseV3.

        Trace Number assigned to the payment in the ACH file, if applicable

        :return: The trace_number of this PaymentResponseV3.
        :rtype: str
        """
        return self._trace_number

    @trace_number.setter
    def trace_number(self, trace_number):
        """Sets the trace_number of this PaymentResponseV3.

        Trace Number assigned to the payment in the ACH file, if applicable

        :param trace_number: The trace_number of this PaymentResponseV3.
        :type trace_number: str
        """

        self._trace_number = trace_number
