# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferRequestV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, to_source_account_id: str=None):
        """TransferRequestV2 - a model defined in OpenAPI

        :param amount: The amount of this TransferRequestV2.
        :param currency: The currency of this TransferRequestV2.
        :param to_source_account_id: The to_source_account_id of this TransferRequestV2.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'to_source_account_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'to_source_account_id': 'toSourceAccountId'
        }

        self._amount = amount
        self._currency = currency
        self._to_source_account_id = to_source_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferRequestV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferRequestV2 of this TransferRequestV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransferRequestV2.

        Amount to transfer, in minor units

        :return: The amount of this TransferRequestV2.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransferRequestV2.

        Amount to transfer, in minor units

        :param amount: The amount of this TransferRequestV2.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount > 9999999999:
            raise ValueError("Invalid value for `amount`, must be a value less than or equal to `9999999999`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this TransferRequestV2.


        :return: The currency of this TransferRequestV2.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransferRequestV2.


        :param currency: The currency of this TransferRequestV2.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def to_source_account_id(self):
        """Gets the to_source_account_id of this TransferRequestV2.

        The 'to' source account id, which will be credited

        :return: The to_source_account_id of this TransferRequestV2.
        :rtype: str
        """
        return self._to_source_account_id

    @to_source_account_id.setter
    def to_source_account_id(self, to_source_account_id):
        """Sets the to_source_account_id of this TransferRequestV2.

        The 'to' source account id, which will be credited

        :param to_source_account_id: The to_source_account_id of this TransferRequestV2.
        :type to_source_account_id: str
        """
        if to_source_account_id is None:
            raise ValueError("Invalid value for `to_source_account_id`, must not be `None`")

        self._to_source_account_id = to_source_account_id
