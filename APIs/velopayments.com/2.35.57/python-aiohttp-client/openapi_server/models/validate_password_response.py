# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidatePasswordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score: int=None, suggestions: List[str]=None, valid: bool=None, warning: str=None):
        """ValidatePasswordResponse - a model defined in OpenAPI

        :param score: The score of this ValidatePasswordResponse.
        :param suggestions: The suggestions of this ValidatePasswordResponse.
        :param valid: The valid of this ValidatePasswordResponse.
        :param warning: The warning of this ValidatePasswordResponse.
        """
        self.openapi_types = {
            'score': int,
            'suggestions': List[str],
            'valid': bool,
            'warning': str
        }

        self.attribute_map = {
            'score': 'score',
            'suggestions': 'suggestions',
            'valid': 'valid',
            'warning': 'warning'
        }

        self._score = score
        self._suggestions = suggestions
        self._valid = valid
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidatePasswordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidatePasswordResponse of this ValidatePasswordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score(self):
        """Gets the score of this ValidatePasswordResponse.

        More secure passwords are given a higher score. <P> For a password to be acceptable for use in Velo, it must score at least 3 

        :return: The score of this ValidatePasswordResponse.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ValidatePasswordResponse.

        More secure passwords are given a higher score. <P> For a password to be acceptable for use in Velo, it must score at least 3 

        :param score: The score of this ValidatePasswordResponse.
        :type score: int
        """
        if score is not None and score > 4:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `4`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def suggestions(self):
        """Gets the suggestions of this ValidatePasswordResponse.


        :return: The suggestions of this ValidatePasswordResponse.
        :rtype: List[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this ValidatePasswordResponse.


        :param suggestions: The suggestions of this ValidatePasswordResponse.
        :type suggestions: List[str]
        """

        self._suggestions = suggestions

    @property
    def valid(self):
        """Gets the valid of this ValidatePasswordResponse.

        if true then the password can be accepted

        :return: The valid of this ValidatePasswordResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ValidatePasswordResponse.

        if true then the password can be accepted

        :param valid: The valid of this ValidatePasswordResponse.
        :type valid: bool
        """

        self._valid = valid

    @property
    def warning(self):
        """Gets the warning of this ValidatePasswordResponse.

        Any warning message as a reason for the given score.

        :return: The warning of this ValidatePasswordResponse.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this ValidatePasswordResponse.

        Any warning message as a reason for the given score.

        :param warning: The warning of this ValidatePasswordResponse.
        :type warning: str
        """

        self._warning = warning
