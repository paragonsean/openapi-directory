# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResendTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_type: str=None, verification_code: str=None):
        """ResendTokenRequest - a model defined in OpenAPI

        :param token_type: The token_type of this ResendTokenRequest.
        :param verification_code: The verification_code of this ResendTokenRequest.
        """
        self.openapi_types = {
            'token_type': str,
            'verification_code': str
        }

        self.attribute_map = {
            'token_type': 'tokenType',
            'verification_code': 'verificationCode'
        }

        self._token_type = token_type
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResendTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResendTokenRequest of this ResendTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_type(self):
        """Gets the token_type of this ResendTokenRequest.

        The type of the token to resend

        :return: The token_type of this ResendTokenRequest.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this ResendTokenRequest.

        The type of the token to resend

        :param token_type: The token_type of this ResendTokenRequest.
        :type token_type: str
        """
        allowed_values = ["INVITE_MFA_USER", "MFA_REGISTRATION"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    @property
    def verification_code(self):
        """Gets the verification_code of this ResendTokenRequest.

        <p>Optional property that MUST be suppied when manually verifying a user</p> <p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p> 

        :return: The verification_code of this ResendTokenRequest.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this ResendTokenRequest.

        <p>Optional property that MUST be suppied when manually verifying a user</p> <p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p> 

        :param verification_code: The verification_code of this ResendTokenRequest.
        :type verification_code: str
        """
        if verification_code is not None and len(verification_code) > 6:
            raise ValueError("Invalid value for `verification_code`, length must be less than or equal to `6`")
        if verification_code is not None and len(verification_code) < 6:
            raise ValueError("Invalid value for `verification_code`, length must be greater than or equal to `6`")

        self._verification_code = verification_code
