# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SourceAccountV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, source_account_id: str=None, source_account_name: str=None, total_payout_cost: int=None):
        """SourceAccountV3 - a model defined in OpenAPI

        :param currency: The currency of this SourceAccountV3.
        :param source_account_id: The source_account_id of this SourceAccountV3.
        :param source_account_name: The source_account_name of this SourceAccountV3.
        :param total_payout_cost: The total_payout_cost of this SourceAccountV3.
        """
        self.openapi_types = {
            'currency': str,
            'source_account_id': str,
            'source_account_name': str,
            'total_payout_cost': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'source_account_id': 'sourceAccountId',
            'source_account_name': 'sourceAccountName',
            'total_payout_cost': 'totalPayoutCost'
        }

        self._currency = currency
        self._source_account_id = source_account_id
        self._source_account_name = source_account_name
        self._total_payout_cost = total_payout_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceAccountV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceAccountV3 of this SourceAccountV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this SourceAccountV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency of this SourceAccountV3.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SourceAccountV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency: The currency of this SourceAccountV3.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency = currency

    @property
    def source_account_id(self):
        """Gets the source_account_id of this SourceAccountV3.

        The id of the payout

        :return: The source_account_id of this SourceAccountV3.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this SourceAccountV3.

        The id of the payout

        :param source_account_id: The source_account_id of this SourceAccountV3.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")

        self._source_account_id = source_account_id

    @property
    def source_account_name(self):
        """Gets the source_account_name of this SourceAccountV3.

        The name of the source account as referencec in the payout

        :return: The source_account_name of this SourceAccountV3.
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this SourceAccountV3.

        The name of the source account as referencec in the payout

        :param source_account_name: The source_account_name of this SourceAccountV3.
        :type source_account_name: str
        """
        if source_account_name is None:
            raise ValueError("Invalid value for `source_account_name`, must not be `None`")

        self._source_account_name = source_account_name

    @property
    def total_payout_cost(self):
        """Gets the total_payout_cost of this SourceAccountV3.

        The total amount (in mnor units) that will be debited from the source account for the payout

        :return: The total_payout_cost of this SourceAccountV3.
        :rtype: int
        """
        return self._total_payout_cost

    @total_payout_cost.setter
    def total_payout_cost(self, total_payout_cost):
        """Sets the total_payout_cost of this SourceAccountV3.

        The total amount (in mnor units) that will be debited from the source account for the payout

        :param total_payout_cost: The total_payout_cost of this SourceAccountV3.
        :type total_payout_cost: int
        """
        if total_payout_cost is None:
            raise ValueError("Invalid value for `total_payout_cost`, must not be `None`")

        self._total_payout_cost = total_payout_cost
