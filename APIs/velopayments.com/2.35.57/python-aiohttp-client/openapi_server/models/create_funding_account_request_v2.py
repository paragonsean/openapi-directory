# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateFundingAccountRequestV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, currency: str=None, name: str=None, payor_id: str=None, routing_number: str=None, type: str=None):
        """CreateFundingAccountRequestV2 - a model defined in OpenAPI

        :param account_name: The account_name of this CreateFundingAccountRequestV2.
        :param account_number: The account_number of this CreateFundingAccountRequestV2.
        :param currency: The currency of this CreateFundingAccountRequestV2.
        :param name: The name of this CreateFundingAccountRequestV2.
        :param payor_id: The payor_id of this CreateFundingAccountRequestV2.
        :param routing_number: The routing_number of this CreateFundingAccountRequestV2.
        :param type: The type of this CreateFundingAccountRequestV2.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'currency': str,
            'name': str,
            'payor_id': str,
            'routing_number': str,
            'type': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'currency': 'currency',
            'name': 'name',
            'payor_id': 'payorId',
            'routing_number': 'routingNumber',
            'type': 'type'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._currency = currency
        self._name = name
        self._payor_id = payor_id
        self._routing_number = routing_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFundingAccountRequestV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFundingAccountRequestV2 of this CreateFundingAccountRequestV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :return: The account_name of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :param account_name: The account_name of this CreateFundingAccountRequestV2.
        :type account_name: str
        """
        if account_name is not None and len(account_name) > 22:
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `22`")
        if account_name is not None and len(account_name) < 1:
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :return: The account_number of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :param account_number: The account_number of this CreateFundingAccountRequestV2.
        :type account_number: str
        """
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")
        if account_number is not None and len(account_number) < 4:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `4`")

        self._account_number = account_number

    @property
    def currency(self):
        """Gets the currency of this CreateFundingAccountRequestV2.

        ISO 4217 currency code, Required if type is either WUBS_DECOUPLED or PRIVATE

        :return: The currency of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateFundingAccountRequestV2.

        ISO 4217 currency code, Required if type is either WUBS_DECOUPLED or PRIVATE

        :param currency: The currency of this CreateFundingAccountRequestV2.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this CreateFundingAccountRequestV2.


        :return: The name of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFundingAccountRequestV2.


        :param name: The name of this CreateFundingAccountRequestV2.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def payor_id(self):
        """Gets the payor_id of this CreateFundingAccountRequestV2.


        :return: The payor_id of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this CreateFundingAccountRequestV2.


        :param payor_id: The payor_id of this CreateFundingAccountRequestV2.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id

    @property
    def routing_number(self):
        """Gets the routing_number of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :return: The routing_number of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreateFundingAccountRequestV2.

        Required if type is either FBO or PRIVATE

        :param routing_number: The routing_number of this CreateFundingAccountRequestV2.
        :type routing_number: str
        """
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 6:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `6`")

        self._routing_number = routing_number

    @property
    def type(self):
        """Gets the type of this CreateFundingAccountRequestV2.


        :return: The type of this CreateFundingAccountRequestV2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateFundingAccountRequestV2.


        :param type: The type of this CreateFundingAccountRequestV2.
        :type type: str
        """
        allowed_values = ["FBO", "WUBS_DECOUPLED", "PRIVATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
