# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payee_type_enum import PayeeTypeEnum
import re
from openapi_server import util


class CreatePayeesCSVRequestV4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_city: str=None, address_country: str=None, address_county_or_province: str=None, address_line1: str=None, address_line2: str=None, address_line3: str=None, address_line4: str=None, address_zip_or_postcode: str=None, challenge_description: str=None, challenge_value: str=None, company_ein: str=None, company_name: str=None, company_operating_name: str=None, email: str=None, individual_date_of_birth: date=None, individual_first_name: str=None, individual_last_name: str=None, individual_national_identification: str=None, individual_other_names: str=None, individual_title: str=None, payee_language: str=None, payment_channel_account_name: str=None, payment_channel_account_number: str=None, payment_channel_country_code: str=None, payment_channel_currency: str=None, payment_channel_iban: str=None, payment_channel_routing_number: str=None, remote_id: str=None, type: PayeeTypeEnum=None):
        """CreatePayeesCSVRequestV4 - a model defined in OpenAPI

        :param address_city: The address_city of this CreatePayeesCSVRequestV4.
        :param address_country: The address_country of this CreatePayeesCSVRequestV4.
        :param address_county_or_province: The address_county_or_province of this CreatePayeesCSVRequestV4.
        :param address_line1: The address_line1 of this CreatePayeesCSVRequestV4.
        :param address_line2: The address_line2 of this CreatePayeesCSVRequestV4.
        :param address_line3: The address_line3 of this CreatePayeesCSVRequestV4.
        :param address_line4: The address_line4 of this CreatePayeesCSVRequestV4.
        :param address_zip_or_postcode: The address_zip_or_postcode of this CreatePayeesCSVRequestV4.
        :param challenge_description: The challenge_description of this CreatePayeesCSVRequestV4.
        :param challenge_value: The challenge_value of this CreatePayeesCSVRequestV4.
        :param company_ein: The company_ein of this CreatePayeesCSVRequestV4.
        :param company_name: The company_name of this CreatePayeesCSVRequestV4.
        :param company_operating_name: The company_operating_name of this CreatePayeesCSVRequestV4.
        :param email: The email of this CreatePayeesCSVRequestV4.
        :param individual_date_of_birth: The individual_date_of_birth of this CreatePayeesCSVRequestV4.
        :param individual_first_name: The individual_first_name of this CreatePayeesCSVRequestV4.
        :param individual_last_name: The individual_last_name of this CreatePayeesCSVRequestV4.
        :param individual_national_identification: The individual_national_identification of this CreatePayeesCSVRequestV4.
        :param individual_other_names: The individual_other_names of this CreatePayeesCSVRequestV4.
        :param individual_title: The individual_title of this CreatePayeesCSVRequestV4.
        :param payee_language: The payee_language of this CreatePayeesCSVRequestV4.
        :param payment_channel_account_name: The payment_channel_account_name of this CreatePayeesCSVRequestV4.
        :param payment_channel_account_number: The payment_channel_account_number of this CreatePayeesCSVRequestV4.
        :param payment_channel_country_code: The payment_channel_country_code of this CreatePayeesCSVRequestV4.
        :param payment_channel_currency: The payment_channel_currency of this CreatePayeesCSVRequestV4.
        :param payment_channel_iban: The payment_channel_iban of this CreatePayeesCSVRequestV4.
        :param payment_channel_routing_number: The payment_channel_routing_number of this CreatePayeesCSVRequestV4.
        :param remote_id: The remote_id of this CreatePayeesCSVRequestV4.
        :param type: The type of this CreatePayeesCSVRequestV4.
        """
        self.openapi_types = {
            'address_city': str,
            'address_country': str,
            'address_county_or_province': str,
            'address_line1': str,
            'address_line2': str,
            'address_line3': str,
            'address_line4': str,
            'address_zip_or_postcode': str,
            'challenge_description': str,
            'challenge_value': str,
            'company_ein': str,
            'company_name': str,
            'company_operating_name': str,
            'email': str,
            'individual_date_of_birth': date,
            'individual_first_name': str,
            'individual_last_name': str,
            'individual_national_identification': str,
            'individual_other_names': str,
            'individual_title': str,
            'payee_language': str,
            'payment_channel_account_name': str,
            'payment_channel_account_number': str,
            'payment_channel_country_code': str,
            'payment_channel_currency': str,
            'payment_channel_iban': str,
            'payment_channel_routing_number': str,
            'remote_id': str,
            'type': PayeeTypeEnum
        }

        self.attribute_map = {
            'address_city': 'addressCity',
            'address_country': 'addressCountry',
            'address_county_or_province': 'addressCountyOrProvince',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'address_line3': 'addressLine3',
            'address_line4': 'addressLine4',
            'address_zip_or_postcode': 'addressZipOrPostcode',
            'challenge_description': 'challengeDescription',
            'challenge_value': 'challengeValue',
            'company_ein': 'companyEIN',
            'company_name': 'companyName',
            'company_operating_name': 'companyOperatingName',
            'email': 'email',
            'individual_date_of_birth': 'individualDateOfBirth',
            'individual_first_name': 'individualFirstName',
            'individual_last_name': 'individualLastName',
            'individual_national_identification': 'individualNationalIdentification',
            'individual_other_names': 'individualOtherNames',
            'individual_title': 'individualTitle',
            'payee_language': 'payeeLanguage',
            'payment_channel_account_name': 'paymentChannelAccountName',
            'payment_channel_account_number': 'paymentChannelAccountNumber',
            'payment_channel_country_code': 'paymentChannelCountryCode',
            'payment_channel_currency': 'paymentChannelCurrency',
            'payment_channel_iban': 'paymentChannelIban',
            'payment_channel_routing_number': 'paymentChannelRoutingNumber',
            'remote_id': 'remoteId',
            'type': 'type'
        }

        self._address_city = address_city
        self._address_country = address_country
        self._address_county_or_province = address_county_or_province
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._address_line4 = address_line4
        self._address_zip_or_postcode = address_zip_or_postcode
        self._challenge_description = challenge_description
        self._challenge_value = challenge_value
        self._company_ein = company_ein
        self._company_name = company_name
        self._company_operating_name = company_operating_name
        self._email = email
        self._individual_date_of_birth = individual_date_of_birth
        self._individual_first_name = individual_first_name
        self._individual_last_name = individual_last_name
        self._individual_national_identification = individual_national_identification
        self._individual_other_names = individual_other_names
        self._individual_title = individual_title
        self._payee_language = payee_language
        self._payment_channel_account_name = payment_channel_account_name
        self._payment_channel_account_number = payment_channel_account_number
        self._payment_channel_country_code = payment_channel_country_code
        self._payment_channel_currency = payment_channel_currency
        self._payment_channel_iban = payment_channel_iban
        self._payment_channel_routing_number = payment_channel_routing_number
        self._remote_id = remote_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePayeesCSVRequestV4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePayeesCSVRequestV4 of this CreatePayeesCSVRequestV4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_city(self):
        """Gets the address_city of this CreatePayeesCSVRequestV4.


        :return: The address_city of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CreatePayeesCSVRequestV4.


        :param address_city: The address_city of this CreatePayeesCSVRequestV4.
        :type address_city: str
        """
        if address_city is None:
            raise ValueError("Invalid value for `address_city`, must not be `None`")
        if address_city is not None and len(address_city) > 50:
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `50`")
        if address_city is not None and len(address_city) < 2:
            raise ValueError("Invalid value for `address_city`, length must be greater than or equal to `2`")

        self._address_city = address_city

    @property
    def address_country(self):
        """Gets the address_country of this CreatePayeesCSVRequestV4.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The address_country of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this CreatePayeesCSVRequestV4.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param address_country: The address_country of this CreatePayeesCSVRequestV4.
        :type address_country: str
        """
        if address_country is None:
            raise ValueError("Invalid value for `address_country`, must not be `None`")
        if address_country is not None and len(address_country) > 2:
            raise ValueError("Invalid value for `address_country`, length must be less than or equal to `2`")
        if address_country is not None and len(address_country) < 2:
            raise ValueError("Invalid value for `address_country`, length must be greater than or equal to `2`")
        if address_country is not None and not re.search(r'^[A-Z]{2}$', address_country):
            raise ValueError("Invalid value for `address_country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._address_country = address_country

    @property
    def address_county_or_province(self):
        """Gets the address_county_or_province of this CreatePayeesCSVRequestV4.


        :return: The address_county_or_province of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_county_or_province

    @address_county_or_province.setter
    def address_county_or_province(self, address_county_or_province):
        """Sets the address_county_or_province of this CreatePayeesCSVRequestV4.


        :param address_county_or_province: The address_county_or_province of this CreatePayeesCSVRequestV4.
        :type address_county_or_province: str
        """
        if address_county_or_province is not None and len(address_county_or_province) > 50:
            raise ValueError("Invalid value for `address_county_or_province`, length must be less than or equal to `50`")
        if address_county_or_province is not None and len(address_county_or_province) < 1:
            raise ValueError("Invalid value for `address_county_or_province`, length must be greater than or equal to `1`")

        self._address_county_or_province = address_county_or_province

    @property
    def address_line1(self):
        """Gets the address_line1 of this CreatePayeesCSVRequestV4.


        :return: The address_line1 of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CreatePayeesCSVRequestV4.


        :param address_line1: The address_line1 of this CreatePayeesCSVRequestV4.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")
        if address_line1 is not None and len(address_line1) > 100:
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `100`")
        if address_line1 is not None and len(address_line1) < 2:
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `2`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CreatePayeesCSVRequestV4.


        :return: The address_line2 of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CreatePayeesCSVRequestV4.


        :param address_line2: The address_line2 of this CreatePayeesCSVRequestV4.
        :type address_line2: str
        """
        if address_line2 is not None and len(address_line2) > 100:
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `100`")
        if address_line2 is not None and len(address_line2) < 0:
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `0`")

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this CreatePayeesCSVRequestV4.


        :return: The address_line3 of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this CreatePayeesCSVRequestV4.


        :param address_line3: The address_line3 of this CreatePayeesCSVRequestV4.
        :type address_line3: str
        """
        if address_line3 is not None and len(address_line3) > 100:
            raise ValueError("Invalid value for `address_line3`, length must be less than or equal to `100`")
        if address_line3 is not None and len(address_line3) < 0:
            raise ValueError("Invalid value for `address_line3`, length must be greater than or equal to `0`")

        self._address_line3 = address_line3

    @property
    def address_line4(self):
        """Gets the address_line4 of this CreatePayeesCSVRequestV4.


        :return: The address_line4 of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_line4

    @address_line4.setter
    def address_line4(self, address_line4):
        """Sets the address_line4 of this CreatePayeesCSVRequestV4.


        :param address_line4: The address_line4 of this CreatePayeesCSVRequestV4.
        :type address_line4: str
        """
        if address_line4 is not None and len(address_line4) > 100:
            raise ValueError("Invalid value for `address_line4`, length must be less than or equal to `100`")
        if address_line4 is not None and len(address_line4) < 0:
            raise ValueError("Invalid value for `address_line4`, length must be greater than or equal to `0`")

        self._address_line4 = address_line4

    @property
    def address_zip_or_postcode(self):
        """Gets the address_zip_or_postcode of this CreatePayeesCSVRequestV4.


        :return: The address_zip_or_postcode of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._address_zip_or_postcode

    @address_zip_or_postcode.setter
    def address_zip_or_postcode(self, address_zip_or_postcode):
        """Sets the address_zip_or_postcode of this CreatePayeesCSVRequestV4.


        :param address_zip_or_postcode: The address_zip_or_postcode of this CreatePayeesCSVRequestV4.
        :type address_zip_or_postcode: str
        """
        if address_zip_or_postcode is None:
            raise ValueError("Invalid value for `address_zip_or_postcode`, must not be `None`")
        if address_zip_or_postcode is not None and len(address_zip_or_postcode) > 60:
            raise ValueError("Invalid value for `address_zip_or_postcode`, length must be less than or equal to `60`")
        if address_zip_or_postcode is not None and len(address_zip_or_postcode) < 1:
            raise ValueError("Invalid value for `address_zip_or_postcode`, length must be greater than or equal to `1`")

        self._address_zip_or_postcode = address_zip_or_postcode

    @property
    def challenge_description(self):
        """Gets the challenge_description of this CreatePayeesCSVRequestV4.


        :return: The challenge_description of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._challenge_description

    @challenge_description.setter
    def challenge_description(self, challenge_description):
        """Sets the challenge_description of this CreatePayeesCSVRequestV4.


        :param challenge_description: The challenge_description of this CreatePayeesCSVRequestV4.
        :type challenge_description: str
        """
        if challenge_description is not None and len(challenge_description) > 255:
            raise ValueError("Invalid value for `challenge_description`, length must be less than or equal to `255`")
        if challenge_description is not None and len(challenge_description) < 1:
            raise ValueError("Invalid value for `challenge_description`, length must be greater than or equal to `1`")

        self._challenge_description = challenge_description

    @property
    def challenge_value(self):
        """Gets the challenge_value of this CreatePayeesCSVRequestV4.


        :return: The challenge_value of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._challenge_value

    @challenge_value.setter
    def challenge_value(self, challenge_value):
        """Sets the challenge_value of this CreatePayeesCSVRequestV4.


        :param challenge_value: The challenge_value of this CreatePayeesCSVRequestV4.
        :type challenge_value: str
        """
        if challenge_value is not None and len(challenge_value) > 20:
            raise ValueError("Invalid value for `challenge_value`, length must be less than or equal to `20`")
        if challenge_value is not None and len(challenge_value) < 3:
            raise ValueError("Invalid value for `challenge_value`, length must be greater than or equal to `3`")

        self._challenge_value = challenge_value

    @property
    def company_ein(self):
        """Gets the company_ein of this CreatePayeesCSVRequestV4.


        :return: The company_ein of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._company_ein

    @company_ein.setter
    def company_ein(self, company_ein):
        """Sets the company_ein of this CreatePayeesCSVRequestV4.


        :param company_ein: The company_ein of this CreatePayeesCSVRequestV4.
        :type company_ein: str
        """
        if company_ein is not None and len(company_ein) > 30:
            raise ValueError("Invalid value for `company_ein`, length must be less than or equal to `30`")
        if company_ein is not None and len(company_ein) < 6:
            raise ValueError("Invalid value for `company_ein`, length must be greater than or equal to `6`")

        self._company_ein = company_ein

    @property
    def company_name(self):
        """Gets the company_name of this CreatePayeesCSVRequestV4.


        :return: The company_name of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CreatePayeesCSVRequestV4.


        :param company_name: The company_name of this CreatePayeesCSVRequestV4.
        :type company_name: str
        """
        if company_name is not None and len(company_name) > 40:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `40`")
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name

    @property
    def company_operating_name(self):
        """Gets the company_operating_name of this CreatePayeesCSVRequestV4.


        :return: The company_operating_name of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._company_operating_name

    @company_operating_name.setter
    def company_operating_name(self, company_operating_name):
        """Sets the company_operating_name of this CreatePayeesCSVRequestV4.


        :param company_operating_name: The company_operating_name of this CreatePayeesCSVRequestV4.
        :type company_operating_name: str
        """
        if company_operating_name is not None and len(company_operating_name) > 100:
            raise ValueError("Invalid value for `company_operating_name`, length must be less than or equal to `100`")
        if company_operating_name is not None and len(company_operating_name) < 1:
            raise ValueError("Invalid value for `company_operating_name`, length must be greater than or equal to `1`")

        self._company_operating_name = company_operating_name

    @property
    def email(self):
        """Gets the email of this CreatePayeesCSVRequestV4.


        :return: The email of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreatePayeesCSVRequestV4.


        :param email: The email of this CreatePayeesCSVRequestV4.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")

        self._email = email

    @property
    def individual_date_of_birth(self):
        """Gets the individual_date_of_birth of this CreatePayeesCSVRequestV4.

        Must not be date in future. Example - 1970-05-20

        :return: The individual_date_of_birth of this CreatePayeesCSVRequestV4.
        :rtype: date
        """
        return self._individual_date_of_birth

    @individual_date_of_birth.setter
    def individual_date_of_birth(self, individual_date_of_birth):
        """Sets the individual_date_of_birth of this CreatePayeesCSVRequestV4.

        Must not be date in future. Example - 1970-05-20

        :param individual_date_of_birth: The individual_date_of_birth of this CreatePayeesCSVRequestV4.
        :type individual_date_of_birth: date
        """

        self._individual_date_of_birth = individual_date_of_birth

    @property
    def individual_first_name(self):
        """Gets the individual_first_name of this CreatePayeesCSVRequestV4.


        :return: The individual_first_name of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._individual_first_name

    @individual_first_name.setter
    def individual_first_name(self, individual_first_name):
        """Sets the individual_first_name of this CreatePayeesCSVRequestV4.


        :param individual_first_name: The individual_first_name of this CreatePayeesCSVRequestV4.
        :type individual_first_name: str
        """
        if individual_first_name is not None and len(individual_first_name) > 40:
            raise ValueError("Invalid value for `individual_first_name`, length must be less than or equal to `40`")
        if individual_first_name is not None and len(individual_first_name) < 1:
            raise ValueError("Invalid value for `individual_first_name`, length must be greater than or equal to `1`")

        self._individual_first_name = individual_first_name

    @property
    def individual_last_name(self):
        """Gets the individual_last_name of this CreatePayeesCSVRequestV4.


        :return: The individual_last_name of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._individual_last_name

    @individual_last_name.setter
    def individual_last_name(self, individual_last_name):
        """Sets the individual_last_name of this CreatePayeesCSVRequestV4.


        :param individual_last_name: The individual_last_name of this CreatePayeesCSVRequestV4.
        :type individual_last_name: str
        """
        if individual_last_name is not None and len(individual_last_name) > 40:
            raise ValueError("Invalid value for `individual_last_name`, length must be less than or equal to `40`")
        if individual_last_name is not None and len(individual_last_name) < 1:
            raise ValueError("Invalid value for `individual_last_name`, length must be greater than or equal to `1`")

        self._individual_last_name = individual_last_name

    @property
    def individual_national_identification(self):
        """Gets the individual_national_identification of this CreatePayeesCSVRequestV4.


        :return: The individual_national_identification of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._individual_national_identification

    @individual_national_identification.setter
    def individual_national_identification(self, individual_national_identification):
        """Sets the individual_national_identification of this CreatePayeesCSVRequestV4.


        :param individual_national_identification: The individual_national_identification of this CreatePayeesCSVRequestV4.
        :type individual_national_identification: str
        """
        if individual_national_identification is not None and len(individual_national_identification) > 30:
            raise ValueError("Invalid value for `individual_national_identification`, length must be less than or equal to `30`")
        if individual_national_identification is not None and len(individual_national_identification) < 6:
            raise ValueError("Invalid value for `individual_national_identification`, length must be greater than or equal to `6`")

        self._individual_national_identification = individual_national_identification

    @property
    def individual_other_names(self):
        """Gets the individual_other_names of this CreatePayeesCSVRequestV4.


        :return: The individual_other_names of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._individual_other_names

    @individual_other_names.setter
    def individual_other_names(self, individual_other_names):
        """Sets the individual_other_names of this CreatePayeesCSVRequestV4.


        :param individual_other_names: The individual_other_names of this CreatePayeesCSVRequestV4.
        :type individual_other_names: str
        """
        if individual_other_names is not None and len(individual_other_names) > 40:
            raise ValueError("Invalid value for `individual_other_names`, length must be less than or equal to `40`")
        if individual_other_names is not None and len(individual_other_names) < 1:
            raise ValueError("Invalid value for `individual_other_names`, length must be greater than or equal to `1`")

        self._individual_other_names = individual_other_names

    @property
    def individual_title(self):
        """Gets the individual_title of this CreatePayeesCSVRequestV4.


        :return: The individual_title of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._individual_title

    @individual_title.setter
    def individual_title(self, individual_title):
        """Sets the individual_title of this CreatePayeesCSVRequestV4.


        :param individual_title: The individual_title of this CreatePayeesCSVRequestV4.
        :type individual_title: str
        """
        if individual_title is not None and len(individual_title) > 40:
            raise ValueError("Invalid value for `individual_title`, length must be less than or equal to `40`")
        if individual_title is not None and len(individual_title) < 1:
            raise ValueError("Invalid value for `individual_title`, length must be greater than or equal to `1`")

        self._individual_title = individual_title

    @property
    def payee_language(self):
        """Gets the payee_language of this CreatePayeesCSVRequestV4.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :return: The payee_language of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payee_language

    @payee_language.setter
    def payee_language(self, payee_language):
        """Sets the payee_language of this CreatePayeesCSVRequestV4.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :param payee_language: The payee_language of this CreatePayeesCSVRequestV4.
        :type payee_language: str
        """

        self._payee_language = payee_language

    @property
    def payment_channel_account_name(self):
        """Gets the payment_channel_account_name of this CreatePayeesCSVRequestV4.


        :return: The payment_channel_account_name of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_account_name

    @payment_channel_account_name.setter
    def payment_channel_account_name(self, payment_channel_account_name):
        """Sets the payment_channel_account_name of this CreatePayeesCSVRequestV4.


        :param payment_channel_account_name: The payment_channel_account_name of this CreatePayeesCSVRequestV4.
        :type payment_channel_account_name: str
        """

        self._payment_channel_account_name = payment_channel_account_name

    @property
    def payment_channel_account_number(self):
        """Gets the payment_channel_account_number of this CreatePayeesCSVRequestV4.

        Either routing number and account number or only iban must be set

        :return: The payment_channel_account_number of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_account_number

    @payment_channel_account_number.setter
    def payment_channel_account_number(self, payment_channel_account_number):
        """Sets the payment_channel_account_number of this CreatePayeesCSVRequestV4.

        Either routing number and account number or only iban must be set

        :param payment_channel_account_number: The payment_channel_account_number of this CreatePayeesCSVRequestV4.
        :type payment_channel_account_number: str
        """
        if payment_channel_account_number is not None and len(payment_channel_account_number) > 17:
            raise ValueError("Invalid value for `payment_channel_account_number`, length must be less than or equal to `17`")
        if payment_channel_account_number is not None and len(payment_channel_account_number) < 6:
            raise ValueError("Invalid value for `payment_channel_account_number`, length must be greater than or equal to `6`")

        self._payment_channel_account_number = payment_channel_account_number

    @property
    def payment_channel_country_code(self):
        """Gets the payment_channel_country_code of this CreatePayeesCSVRequestV4.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The payment_channel_country_code of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_country_code

    @payment_channel_country_code.setter
    def payment_channel_country_code(self, payment_channel_country_code):
        """Sets the payment_channel_country_code of this CreatePayeesCSVRequestV4.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param payment_channel_country_code: The payment_channel_country_code of this CreatePayeesCSVRequestV4.
        :type payment_channel_country_code: str
        """
        if payment_channel_country_code is not None and len(payment_channel_country_code) > 2:
            raise ValueError("Invalid value for `payment_channel_country_code`, length must be less than or equal to `2`")
        if payment_channel_country_code is not None and len(payment_channel_country_code) < 2:
            raise ValueError("Invalid value for `payment_channel_country_code`, length must be greater than or equal to `2`")
        if payment_channel_country_code is not None and not re.search(r'^[A-Z]{2}$', payment_channel_country_code):
            raise ValueError("Invalid value for `payment_channel_country_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._payment_channel_country_code = payment_channel_country_code

    @property
    def payment_channel_currency(self):
        """Gets the payment_channel_currency of this CreatePayeesCSVRequestV4.


        :return: The payment_channel_currency of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_currency

    @payment_channel_currency.setter
    def payment_channel_currency(self, payment_channel_currency):
        """Sets the payment_channel_currency of this CreatePayeesCSVRequestV4.


        :param payment_channel_currency: The payment_channel_currency of this CreatePayeesCSVRequestV4.
        :type payment_channel_currency: str
        """
        if payment_channel_currency is not None and len(payment_channel_currency) > 3:
            raise ValueError("Invalid value for `payment_channel_currency`, length must be less than or equal to `3`")
        if payment_channel_currency is not None and len(payment_channel_currency) < 3:
            raise ValueError("Invalid value for `payment_channel_currency`, length must be greater than or equal to `3`")

        self._payment_channel_currency = payment_channel_currency

    @property
    def payment_channel_iban(self):
        """Gets the payment_channel_iban of this CreatePayeesCSVRequestV4.

        Must match the regular expression ```^[A-Za-z0-9]+$```.

        :return: The payment_channel_iban of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_iban

    @payment_channel_iban.setter
    def payment_channel_iban(self, payment_channel_iban):
        """Sets the payment_channel_iban of this CreatePayeesCSVRequestV4.

        Must match the regular expression ```^[A-Za-z0-9]+$```.

        :param payment_channel_iban: The payment_channel_iban of this CreatePayeesCSVRequestV4.
        :type payment_channel_iban: str
        """
        if payment_channel_iban is not None and len(payment_channel_iban) > 34:
            raise ValueError("Invalid value for `payment_channel_iban`, length must be less than or equal to `34`")
        if payment_channel_iban is not None and len(payment_channel_iban) < 15:
            raise ValueError("Invalid value for `payment_channel_iban`, length must be greater than or equal to `15`")
        if payment_channel_iban is not None and not re.search(r'^[A-Za-z0-9]+$', payment_channel_iban):
            raise ValueError("Invalid value for `payment_channel_iban`, must be a follow pattern or equal to `/^[A-Za-z0-9]+$/`")

        self._payment_channel_iban = payment_channel_iban

    @property
    def payment_channel_routing_number(self):
        """Gets the payment_channel_routing_number of this CreatePayeesCSVRequestV4.

        Either routing number and account number or only iban must be set

        :return: The payment_channel_routing_number of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._payment_channel_routing_number

    @payment_channel_routing_number.setter
    def payment_channel_routing_number(self, payment_channel_routing_number):
        """Sets the payment_channel_routing_number of this CreatePayeesCSVRequestV4.

        Either routing number and account number or only iban must be set

        :param payment_channel_routing_number: The payment_channel_routing_number of this CreatePayeesCSVRequestV4.
        :type payment_channel_routing_number: str
        """
        if payment_channel_routing_number is not None and len(payment_channel_routing_number) > 9:
            raise ValueError("Invalid value for `payment_channel_routing_number`, length must be less than or equal to `9`")
        if payment_channel_routing_number is not None and len(payment_channel_routing_number) < 9:
            raise ValueError("Invalid value for `payment_channel_routing_number`, length must be greater than or equal to `9`")

        self._payment_channel_routing_number = payment_channel_routing_number

    @property
    def remote_id(self):
        """Gets the remote_id of this CreatePayeesCSVRequestV4.


        :return: The remote_id of this CreatePayeesCSVRequestV4.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this CreatePayeesCSVRequestV4.


        :param remote_id: The remote_id of this CreatePayeesCSVRequestV4.
        :type remote_id: str
        """
        if remote_id is None:
            raise ValueError("Invalid value for `remote_id`, must not be `None`")
        if remote_id is not None and len(remote_id) > 100:
            raise ValueError("Invalid value for `remote_id`, length must be less than or equal to `100`")
        if remote_id is not None and len(remote_id) < 1:
            raise ValueError("Invalid value for `remote_id`, length must be greater than or equal to `1`")

        self._remote_id = remote_id

    @property
    def type(self):
        """Gets the type of this CreatePayeesCSVRequestV4.


        :return: The type of this CreatePayeesCSVRequestV4.
        :rtype: PayeeTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePayeesCSVRequestV4.


        :param type: The type of this CreatePayeesCSVRequestV4.
        :type type: PayeeTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
