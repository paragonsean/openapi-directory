# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payout_payor_ids import PayoutPayorIds
from openapi_server import util


class PaymentEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, event_id: str=None, source_type: str=None, payment_id: str=None, payor_payment_id: str=None, payout_payor_ids: PayoutPayorIds=None):
        """PaymentEvent - a model defined in OpenAPI

        :param created_at: The created_at of this PaymentEvent.
        :param event_id: The event_id of this PaymentEvent.
        :param source_type: The source_type of this PaymentEvent.
        :param payment_id: The payment_id of this PaymentEvent.
        :param payor_payment_id: The payor_payment_id of this PaymentEvent.
        :param payout_payor_ids: The payout_payor_ids of this PaymentEvent.
        """
        self.openapi_types = {
            'created_at': datetime,
            'event_id': str,
            'source_type': str,
            'payment_id': str,
            'payor_payment_id': str,
            'payout_payor_ids': PayoutPayorIds
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'event_id': 'eventId',
            'source_type': 'sourceType',
            'payment_id': 'paymentId',
            'payor_payment_id': 'payorPaymentId',
            'payout_payor_ids': 'payoutPayorIds'
        }

        self._created_at = created_at
        self._event_id = event_id
        self._source_type = source_type
        self._payment_id = payment_id
        self._payor_payment_id = payor_payment_id
        self._payout_payor_ids = payout_payor_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentEvent of this PaymentEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PaymentEvent.

        ISO8601 timestamp indicating when the source event was created

        :return: The created_at of this PaymentEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PaymentEvent.

        ISO8601 timestamp indicating when the source event was created

        :param created_at: The created_at of this PaymentEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event_id(self):
        """Gets the event_id of this PaymentEvent.

        UUID id of the source event in the Velo platform

        :return: The event_id of this PaymentEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PaymentEvent.

        UUID id of the source event in the Velo platform

        :param event_id: The event_id of this PaymentEvent.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def source_type(self):
        """Gets the source_type of this PaymentEvent.

        OA3 Schema type name for the source info which is used as the discriminator value to ensure that data binding works correctly

        :return: The source_type of this PaymentEvent.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this PaymentEvent.

        OA3 Schema type name for the source info which is used as the discriminator value to ensure that data binding works correctly

        :param source_type: The source_type of this PaymentEvent.
        :type source_type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")

        self._source_type = source_type

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentEvent.

        ID of this payment within the Velo platform

        :return: The payment_id of this PaymentEvent.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentEvent.

        ID of this payment within the Velo platform

        :param payment_id: The payment_id of this PaymentEvent.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def payor_payment_id(self):
        """Gets the payor_payment_id of this PaymentEvent.

        ID of this payment in the payors system

        :return: The payor_payment_id of this PaymentEvent.
        :rtype: str
        """
        return self._payor_payment_id

    @payor_payment_id.setter
    def payor_payment_id(self, payor_payment_id):
        """Sets the payor_payment_id of this PaymentEvent.

        ID of this payment in the payors system

        :param payor_payment_id: The payor_payment_id of this PaymentEvent.
        :type payor_payment_id: str
        """

        self._payor_payment_id = payor_payment_id

    @property
    def payout_payor_ids(self):
        """Gets the payout_payor_ids of this PaymentEvent.


        :return: The payout_payor_ids of this PaymentEvent.
        :rtype: PayoutPayorIds
        """
        return self._payout_payor_ids

    @payout_payor_ids.setter
    def payout_payor_ids(self, payout_payor_ids):
        """Sets the payout_payor_ids of this PaymentEvent.


        :param payout_payor_ids: The payout_payor_ids of this PaymentEvent.
        :type payout_payor_ids: PayoutPayorIds
        """

        self._payout_payor_ids = payout_payor_ids
