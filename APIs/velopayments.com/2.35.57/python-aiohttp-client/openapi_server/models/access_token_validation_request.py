# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessTokenValidationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, otp: str=None):
        """AccessTokenValidationRequest - a model defined in OpenAPI

        :param otp: The otp of this AccessTokenValidationRequest.
        """
        self.openapi_types = {
            'otp': str
        }

        self.attribute_map = {
            'otp': 'otp'
        }

        self._otp = otp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenValidationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenValidationRequest of this AccessTokenValidationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def otp(self):
        """Gets the otp of this AccessTokenValidationRequest.

        an OTP either sent via sms or generated by a registered MFA device

        :return: The otp of this AccessTokenValidationRequest.
        :rtype: str
        """
        return self._otp

    @otp.setter
    def otp(self, otp):
        """Sets the otp of this AccessTokenValidationRequest.

        an OTP either sent via sms or generated by a registered MFA device

        :param otp: The otp of this AccessTokenValidationRequest.
        :type otp: str
        """
        if otp is None:
            raise ValueError("Invalid value for `otp`, must not be `None`")
        if otp is not None and len(otp) > 64:
            raise ValueError("Invalid value for `otp`, length must be less than or equal to `64`")
        if otp is not None and len(otp) < 6:
            raise ValueError("Invalid value for `otp`, length must be greater than or equal to `6`")

        self._otp = otp
