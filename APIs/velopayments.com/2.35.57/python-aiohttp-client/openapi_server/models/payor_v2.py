# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payor_address_v2 import PayorAddressV2
from openapi_server.models.transmission_types2 import TransmissionTypes2
from openapi_server import util


class PayorV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PayorAddressV2=None, allows_language_choice: bool=None, collective_alias: str=None, dba_name: str=None, includes_reports: bool=None, kyc_state: str=None, language: str=None, managing_payees: bool=None, manual_lockout: bool=None, max_master_payor_admins: int=None, open_banking_enabled: bool=None, payee_grace_period_days: int=None, payee_grace_period_processing_enabled: bool=None, payment_rails: str=None, payor_id: str=None, payor_name: str=None, payor_xid: str=None, primary_contact_email: str=None, primary_contact_name: str=None, primary_contact_phone: str=None, provider: str=None, reminder_emails_opt_out: bool=None, remote_system_ids: List[str]=None, support_contact: str=None, transmission_types: TransmissionTypes2=None, usd_txn_value_reporting_threshold: int=None, wu_customer_id: str=None):
        """PayorV2 - a model defined in OpenAPI

        :param address: The address of this PayorV2.
        :param allows_language_choice: The allows_language_choice of this PayorV2.
        :param collective_alias: The collective_alias of this PayorV2.
        :param dba_name: The dba_name of this PayorV2.
        :param includes_reports: The includes_reports of this PayorV2.
        :param kyc_state: The kyc_state of this PayorV2.
        :param language: The language of this PayorV2.
        :param managing_payees: The managing_payees of this PayorV2.
        :param manual_lockout: The manual_lockout of this PayorV2.
        :param max_master_payor_admins: The max_master_payor_admins of this PayorV2.
        :param open_banking_enabled: The open_banking_enabled of this PayorV2.
        :param payee_grace_period_days: The payee_grace_period_days of this PayorV2.
        :param payee_grace_period_processing_enabled: The payee_grace_period_processing_enabled of this PayorV2.
        :param payment_rails: The payment_rails of this PayorV2.
        :param payor_id: The payor_id of this PayorV2.
        :param payor_name: The payor_name of this PayorV2.
        :param payor_xid: The payor_xid of this PayorV2.
        :param primary_contact_email: The primary_contact_email of this PayorV2.
        :param primary_contact_name: The primary_contact_name of this PayorV2.
        :param primary_contact_phone: The primary_contact_phone of this PayorV2.
        :param provider: The provider of this PayorV2.
        :param reminder_emails_opt_out: The reminder_emails_opt_out of this PayorV2.
        :param remote_system_ids: The remote_system_ids of this PayorV2.
        :param support_contact: The support_contact of this PayorV2.
        :param transmission_types: The transmission_types of this PayorV2.
        :param usd_txn_value_reporting_threshold: The usd_txn_value_reporting_threshold of this PayorV2.
        :param wu_customer_id: The wu_customer_id of this PayorV2.
        """
        self.openapi_types = {
            'address': PayorAddressV2,
            'allows_language_choice': bool,
            'collective_alias': str,
            'dba_name': str,
            'includes_reports': bool,
            'kyc_state': str,
            'language': str,
            'managing_payees': bool,
            'manual_lockout': bool,
            'max_master_payor_admins': int,
            'open_banking_enabled': bool,
            'payee_grace_period_days': int,
            'payee_grace_period_processing_enabled': bool,
            'payment_rails': str,
            'payor_id': str,
            'payor_name': str,
            'payor_xid': str,
            'primary_contact_email': str,
            'primary_contact_name': str,
            'primary_contact_phone': str,
            'provider': str,
            'reminder_emails_opt_out': bool,
            'remote_system_ids': List[str],
            'support_contact': str,
            'transmission_types': TransmissionTypes2,
            'usd_txn_value_reporting_threshold': int,
            'wu_customer_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'allows_language_choice': 'allowsLanguageChoice',
            'collective_alias': 'collectiveAlias',
            'dba_name': 'dbaName',
            'includes_reports': 'includesReports',
            'kyc_state': 'kycState',
            'language': 'language',
            'managing_payees': 'managingPayees',
            'manual_lockout': 'manualLockout',
            'max_master_payor_admins': 'maxMasterPayorAdmins',
            'open_banking_enabled': 'openBankingEnabled',
            'payee_grace_period_days': 'payeeGracePeriodDays',
            'payee_grace_period_processing_enabled': 'payeeGracePeriodProcessingEnabled',
            'payment_rails': 'paymentRails',
            'payor_id': 'payorId',
            'payor_name': 'payorName',
            'payor_xid': 'payorXid',
            'primary_contact_email': 'primaryContactEmail',
            'primary_contact_name': 'primaryContactName',
            'primary_contact_phone': 'primaryContactPhone',
            'provider': 'provider',
            'reminder_emails_opt_out': 'reminderEmailsOptOut',
            'remote_system_ids': 'remoteSystemIds',
            'support_contact': 'supportContact',
            'transmission_types': 'transmissionTypes',
            'usd_txn_value_reporting_threshold': 'usdTxnValueReportingThreshold',
            'wu_customer_id': 'wuCustomerId'
        }

        self._address = address
        self._allows_language_choice = allows_language_choice
        self._collective_alias = collective_alias
        self._dba_name = dba_name
        self._includes_reports = includes_reports
        self._kyc_state = kyc_state
        self._language = language
        self._managing_payees = managing_payees
        self._manual_lockout = manual_lockout
        self._max_master_payor_admins = max_master_payor_admins
        self._open_banking_enabled = open_banking_enabled
        self._payee_grace_period_days = payee_grace_period_days
        self._payee_grace_period_processing_enabled = payee_grace_period_processing_enabled
        self._payment_rails = payment_rails
        self._payor_id = payor_id
        self._payor_name = payor_name
        self._payor_xid = payor_xid
        self._primary_contact_email = primary_contact_email
        self._primary_contact_name = primary_contact_name
        self._primary_contact_phone = primary_contact_phone
        self._provider = provider
        self._reminder_emails_opt_out = reminder_emails_opt_out
        self._remote_system_ids = remote_system_ids
        self._support_contact = support_contact
        self._transmission_types = transmission_types
        self._usd_txn_value_reporting_threshold = usd_txn_value_reporting_threshold
        self._wu_customer_id = wu_customer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayorV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayorV2 of this PayorV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PayorV2.


        :return: The address of this PayorV2.
        :rtype: PayorAddressV2
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PayorV2.


        :param address: The address of this PayorV2.
        :type address: PayorAddressV2
        """

        self._address = address

    @property
    def allows_language_choice(self):
        """Gets the allows_language_choice of this PayorV2.

        Whether or not the payor allows language choice in the UI.

        :return: The allows_language_choice of this PayorV2.
        :rtype: bool
        """
        return self._allows_language_choice

    @allows_language_choice.setter
    def allows_language_choice(self, allows_language_choice):
        """Sets the allows_language_choice of this PayorV2.

        Whether or not the payor allows language choice in the UI.

        :param allows_language_choice: The allows_language_choice of this PayorV2.
        :type allows_language_choice: bool
        """

        self._allows_language_choice = allows_language_choice

    @property
    def collective_alias(self):
        """Gets the collective_alias of this PayorV2.

        How the payor has chosen to refer to payees.

        :return: The collective_alias of this PayorV2.
        :rtype: str
        """
        return self._collective_alias

    @collective_alias.setter
    def collective_alias(self, collective_alias):
        """Sets the collective_alias of this PayorV2.

        How the payor has chosen to refer to payees.

        :param collective_alias: The collective_alias of this PayorV2.
        :type collective_alias: str
        """

        self._collective_alias = collective_alias

    @property
    def dba_name(self):
        """Gets the dba_name of this PayorV2.

        The payor’s 'Doing Business As' name.

        :return: The dba_name of this PayorV2.
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this PayorV2.

        The payor’s 'Doing Business As' name.

        :param dba_name: The dba_name of this PayorV2.
        :type dba_name: str
        """

        self._dba_name = dba_name

    @property
    def includes_reports(self):
        """Gets the includes_reports of this PayorV2.


        :return: The includes_reports of this PayorV2.
        :rtype: bool
        """
        return self._includes_reports

    @includes_reports.setter
    def includes_reports(self, includes_reports):
        """Sets the includes_reports of this PayorV2.


        :param includes_reports: The includes_reports of this PayorV2.
        :type includes_reports: bool
        """

        self._includes_reports = includes_reports

    @property
    def kyc_state(self):
        """Gets the kyc_state of this PayorV2.

        The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC

        :return: The kyc_state of this PayorV2.
        :rtype: str
        """
        return self._kyc_state

    @kyc_state.setter
    def kyc_state(self, kyc_state):
        """Sets the kyc_state of this PayorV2.

        The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC

        :param kyc_state: The kyc_state of this PayorV2.
        :type kyc_state: str
        """

        self._kyc_state = kyc_state

    @property
    def language(self):
        """Gets the language of this PayorV2.

        The payor’s language preference. Must be one of [EN, FR]

        :return: The language of this PayorV2.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PayorV2.

        The payor’s language preference. Must be one of [EN, FR]

        :param language: The language of this PayorV2.
        :type language: str
        """

        self._language = language

    @property
    def managing_payees(self):
        """Gets the managing_payees of this PayorV2.


        :return: The managing_payees of this PayorV2.
        :rtype: bool
        """
        return self._managing_payees

    @managing_payees.setter
    def managing_payees(self, managing_payees):
        """Sets the managing_payees of this PayorV2.


        :param managing_payees: The managing_payees of this PayorV2.
        :type managing_payees: bool
        """

        self._managing_payees = managing_payees

    @property
    def manual_lockout(self):
        """Gets the manual_lockout of this PayorV2.

        Whether or not the payor has been manually locked by the backoffice.

        :return: The manual_lockout of this PayorV2.
        :rtype: bool
        """
        return self._manual_lockout

    @manual_lockout.setter
    def manual_lockout(self, manual_lockout):
        """Sets the manual_lockout of this PayorV2.

        Whether or not the payor has been manually locked by the backoffice.

        :param manual_lockout: The manual_lockout of this PayorV2.
        :type manual_lockout: bool
        """

        self._manual_lockout = manual_lockout

    @property
    def max_master_payor_admins(self):
        """Gets the max_master_payor_admins of this PayorV2.


        :return: The max_master_payor_admins of this PayorV2.
        :rtype: int
        """
        return self._max_master_payor_admins

    @max_master_payor_admins.setter
    def max_master_payor_admins(self, max_master_payor_admins):
        """Sets the max_master_payor_admins of this PayorV2.


        :param max_master_payor_admins: The max_master_payor_admins of this PayorV2.
        :type max_master_payor_admins: int
        """

        self._max_master_payor_admins = max_master_payor_admins

    @property
    def open_banking_enabled(self):
        """Gets the open_banking_enabled of this PayorV2.

        Is Open Banking supported for this payor

        :return: The open_banking_enabled of this PayorV2.
        :rtype: bool
        """
        return self._open_banking_enabled

    @open_banking_enabled.setter
    def open_banking_enabled(self, open_banking_enabled):
        """Sets the open_banking_enabled of this PayorV2.

        Is Open Banking supported for this payor

        :param open_banking_enabled: The open_banking_enabled of this PayorV2.
        :type open_banking_enabled: bool
        """

        self._open_banking_enabled = open_banking_enabled

    @property
    def payee_grace_period_days(self):
        """Gets the payee_grace_period_days of this PayorV2.

        The grace period for paying payees in days.

        :return: The payee_grace_period_days of this PayorV2.
        :rtype: int
        """
        return self._payee_grace_period_days

    @payee_grace_period_days.setter
    def payee_grace_period_days(self, payee_grace_period_days):
        """Sets the payee_grace_period_days of this PayorV2.

        The grace period for paying payees in days.

        :param payee_grace_period_days: The payee_grace_period_days of this PayorV2.
        :type payee_grace_period_days: int
        """

        self._payee_grace_period_days = payee_grace_period_days

    @property
    def payee_grace_period_processing_enabled(self):
        """Gets the payee_grace_period_processing_enabled of this PayorV2.

        Whether grace period processing is enabled.

        :return: The payee_grace_period_processing_enabled of this PayorV2.
        :rtype: bool
        """
        return self._payee_grace_period_processing_enabled

    @payee_grace_period_processing_enabled.setter
    def payee_grace_period_processing_enabled(self, payee_grace_period_processing_enabled):
        """Sets the payee_grace_period_processing_enabled of this PayorV2.

        Whether grace period processing is enabled.

        :param payee_grace_period_processing_enabled: The payee_grace_period_processing_enabled of this PayorV2.
        :type payee_grace_period_processing_enabled: bool
        """

        self._payee_grace_period_processing_enabled = payee_grace_period_processing_enabled

    @property
    def payment_rails(self):
        """Gets the payment_rails of this PayorV2.

        The id of the payment rails

        :return: The payment_rails of this PayorV2.
        :rtype: str
        """
        return self._payment_rails

    @payment_rails.setter
    def payment_rails(self, payment_rails):
        """Sets the payment_rails of this PayorV2.

        The id of the payment rails

        :param payment_rails: The payment_rails of this PayorV2.
        :type payment_rails: str
        """

        self._payment_rails = payment_rails

    @property
    def payor_id(self):
        """Gets the payor_id of this PayorV2.


        :return: The payor_id of this PayorV2.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this PayorV2.


        :param payor_id: The payor_id of this PayorV2.
        :type payor_id: str
        """
        if payor_id is None:
            raise ValueError("Invalid value for `payor_id`, must not be `None`")

        self._payor_id = payor_id

    @property
    def payor_name(self):
        """Gets the payor_name of this PayorV2.

        The name of the payor.

        :return: The payor_name of this PayorV2.
        :rtype: str
        """
        return self._payor_name

    @payor_name.setter
    def payor_name(self, payor_name):
        """Sets the payor_name of this PayorV2.

        The name of the payor.

        :param payor_name: The payor_name of this PayorV2.
        :type payor_name: str
        """
        if payor_name is None:
            raise ValueError("Invalid value for `payor_name`, must not be `None`")

        self._payor_name = payor_name

    @property
    def payor_xid(self):
        """Gets the payor_xid of this PayorV2.

        A unique identifier that an external system uses to reference the payor in their system

        :return: The payor_xid of this PayorV2.
        :rtype: str
        """
        return self._payor_xid

    @payor_xid.setter
    def payor_xid(self, payor_xid):
        """Sets the payor_xid of this PayorV2.

        A unique identifier that an external system uses to reference the payor in their system

        :param payor_xid: The payor_xid of this PayorV2.
        :type payor_xid: str
        """

        self._payor_xid = payor_xid

    @property
    def primary_contact_email(self):
        """Gets the primary_contact_email of this PayorV2.

        Primary contact email for the payor.

        :return: The primary_contact_email of this PayorV2.
        :rtype: str
        """
        return self._primary_contact_email

    @primary_contact_email.setter
    def primary_contact_email(self, primary_contact_email):
        """Sets the primary_contact_email of this PayorV2.

        Primary contact email for the payor.

        :param primary_contact_email: The primary_contact_email of this PayorV2.
        :type primary_contact_email: str
        """

        self._primary_contact_email = primary_contact_email

    @property
    def primary_contact_name(self):
        """Gets the primary_contact_name of this PayorV2.

        Name of primary contact for the payor.

        :return: The primary_contact_name of this PayorV2.
        :rtype: str
        """
        return self._primary_contact_name

    @primary_contact_name.setter
    def primary_contact_name(self, primary_contact_name):
        """Sets the primary_contact_name of this PayorV2.

        Name of primary contact for the payor.

        :param primary_contact_name: The primary_contact_name of this PayorV2.
        :type primary_contact_name: str
        """

        self._primary_contact_name = primary_contact_name

    @property
    def primary_contact_phone(self):
        """Gets the primary_contact_phone of this PayorV2.

        Primary contact phone number for the payor.

        :return: The primary_contact_phone of this PayorV2.
        :rtype: str
        """
        return self._primary_contact_phone

    @primary_contact_phone.setter
    def primary_contact_phone(self, primary_contact_phone):
        """Sets the primary_contact_phone of this PayorV2.

        Primary contact phone number for the payor.

        :param primary_contact_phone: The primary_contact_phone of this PayorV2.
        :type primary_contact_phone: str
        """

        self._primary_contact_phone = primary_contact_phone

    @property
    def provider(self):
        """Gets the provider of this PayorV2.

        The source of the payorXid, default is null which means Velo

        :return: The provider of this PayorV2.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PayorV2.

        The source of the payorXid, default is null which means Velo

        :param provider: The provider of this PayorV2.
        :type provider: str
        """

        self._provider = provider

    @property
    def reminder_emails_opt_out(self):
        """Gets the reminder_emails_opt_out of this PayorV2.

        Whether or not the payor has opted-out of reminder emails being sent.

        :return: The reminder_emails_opt_out of this PayorV2.
        :rtype: bool
        """
        return self._reminder_emails_opt_out

    @reminder_emails_opt_out.setter
    def reminder_emails_opt_out(self, reminder_emails_opt_out):
        """Sets the reminder_emails_opt_out of this PayorV2.

        Whether or not the payor has opted-out of reminder emails being sent.

        :param reminder_emails_opt_out: The reminder_emails_opt_out of this PayorV2.
        :type reminder_emails_opt_out: bool
        """

        self._reminder_emails_opt_out = reminder_emails_opt_out

    @property
    def remote_system_ids(self):
        """Gets the remote_system_ids of this PayorV2.

        The payor’s supported remote systems by id

        :return: The remote_system_ids of this PayorV2.
        :rtype: List[str]
        """
        return self._remote_system_ids

    @remote_system_ids.setter
    def remote_system_ids(self, remote_system_ids):
        """Sets the remote_system_ids of this PayorV2.

        The payor’s supported remote systems by id

        :param remote_system_ids: The remote_system_ids of this PayorV2.
        :type remote_system_ids: List[str]
        """

        self._remote_system_ids = remote_system_ids

    @property
    def support_contact(self):
        """Gets the support_contact of this PayorV2.

        The payor’s support contact email address.

        :return: The support_contact of this PayorV2.
        :rtype: str
        """
        return self._support_contact

    @support_contact.setter
    def support_contact(self, support_contact):
        """Sets the support_contact of this PayorV2.

        The payor’s support contact email address.

        :param support_contact: The support_contact of this PayorV2.
        :type support_contact: str
        """

        self._support_contact = support_contact

    @property
    def transmission_types(self):
        """Gets the transmission_types of this PayorV2.


        :return: The transmission_types of this PayorV2.
        :rtype: TransmissionTypes2
        """
        return self._transmission_types

    @transmission_types.setter
    def transmission_types(self, transmission_types):
        """Sets the transmission_types of this PayorV2.


        :param transmission_types: The transmission_types of this PayorV2.
        :type transmission_types: TransmissionTypes2
        """

        self._transmission_types = transmission_types

    @property
    def usd_txn_value_reporting_threshold(self):
        """Gets the usd_txn_value_reporting_threshold of this PayorV2.

        USD in minor units

        :return: The usd_txn_value_reporting_threshold of this PayorV2.
        :rtype: int
        """
        return self._usd_txn_value_reporting_threshold

    @usd_txn_value_reporting_threshold.setter
    def usd_txn_value_reporting_threshold(self, usd_txn_value_reporting_threshold):
        """Sets the usd_txn_value_reporting_threshold of this PayorV2.

        USD in minor units

        :param usd_txn_value_reporting_threshold: The usd_txn_value_reporting_threshold of this PayorV2.
        :type usd_txn_value_reporting_threshold: int
        """

        self._usd_txn_value_reporting_threshold = usd_txn_value_reporting_threshold

    @property
    def wu_customer_id(self):
        """Gets the wu_customer_id of this PayorV2.


        :return: The wu_customer_id of this PayorV2.
        :rtype: str
        """
        return self._wu_customer_id

    @wu_customer_id.setter
    def wu_customer_id(self, wu_customer_id):
        """Sets the wu_customer_id of this PayorV2.


        :param wu_customer_id: The wu_customer_id of this PayorV2.
        :type wu_customer_id: str
        """

        self._wu_customer_id = wu_customer_id
