# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payable_issue_v3 import PayableIssueV3
from openapi_server import util


class PayeePayorRefV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invitation_status: str=None, invitation_status_timestamp: datetime=None, payable_issues: List[PayableIssueV3]=None, payable_status: bool=None, payment_channel_id: str=None, payor_id: str=None, remote_id: str=None):
        """PayeePayorRefV3 - a model defined in OpenAPI

        :param invitation_status: The invitation_status of this PayeePayorRefV3.
        :param invitation_status_timestamp: The invitation_status_timestamp of this PayeePayorRefV3.
        :param payable_issues: The payable_issues of this PayeePayorRefV3.
        :param payable_status: The payable_status of this PayeePayorRefV3.
        :param payment_channel_id: The payment_channel_id of this PayeePayorRefV3.
        :param payor_id: The payor_id of this PayeePayorRefV3.
        :param remote_id: The remote_id of this PayeePayorRefV3.
        """
        self.openapi_types = {
            'invitation_status': str,
            'invitation_status_timestamp': datetime,
            'payable_issues': List[PayableIssueV3],
            'payable_status': bool,
            'payment_channel_id': str,
            'payor_id': str,
            'remote_id': str
        }

        self.attribute_map = {
            'invitation_status': 'invitationStatus',
            'invitation_status_timestamp': 'invitationStatusTimestamp',
            'payable_issues': 'payableIssues',
            'payable_status': 'payableStatus',
            'payment_channel_id': 'paymentChannelId',
            'payor_id': 'payorId',
            'remote_id': 'remoteId'
        }

        self._invitation_status = invitation_status
        self._invitation_status_timestamp = invitation_status_timestamp
        self._payable_issues = payable_issues
        self._payable_status = payable_status
        self._payment_channel_id = payment_channel_id
        self._payor_id = payor_id
        self._remote_id = remote_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayeePayorRefV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayeePayorRefV3 of this PayeePayorRefV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invitation_status(self):
        """Gets the invitation_status of this PayeePayorRefV3.


        :return: The invitation_status of this PayeePayorRefV3.
        :rtype: str
        """
        return self._invitation_status

    @invitation_status.setter
    def invitation_status(self, invitation_status):
        """Sets the invitation_status of this PayeePayorRefV3.


        :param invitation_status: The invitation_status of this PayeePayorRefV3.
        :type invitation_status: str
        """

        self._invitation_status = invitation_status

    @property
    def invitation_status_timestamp(self):
        """Gets the invitation_status_timestamp of this PayeePayorRefV3.

        The timestamp when the invitation status is updated

        :return: The invitation_status_timestamp of this PayeePayorRefV3.
        :rtype: datetime
        """
        return self._invitation_status_timestamp

    @invitation_status_timestamp.setter
    def invitation_status_timestamp(self, invitation_status_timestamp):
        """Sets the invitation_status_timestamp of this PayeePayorRefV3.

        The timestamp when the invitation status is updated

        :param invitation_status_timestamp: The invitation_status_timestamp of this PayeePayorRefV3.
        :type invitation_status_timestamp: datetime
        """

        self._invitation_status_timestamp = invitation_status_timestamp

    @property
    def payable_issues(self):
        """Gets the payable_issues of this PayeePayorRefV3.

        Indicates any conditions which prevent the payee from being payable for this payor

        :return: The payable_issues of this PayeePayorRefV3.
        :rtype: List[PayableIssueV3]
        """
        return self._payable_issues

    @payable_issues.setter
    def payable_issues(self, payable_issues):
        """Sets the payable_issues of this PayeePayorRefV3.

        Indicates any conditions which prevent the payee from being payable for this payor

        :param payable_issues: The payable_issues of this PayeePayorRefV3.
        :type payable_issues: List[PayableIssueV3]
        """

        self._payable_issues = payable_issues

    @property
    def payable_status(self):
        """Gets the payable_status of this PayeePayorRefV3.

        Indicates if the payee is payable for this payor

        :return: The payable_status of this PayeePayorRefV3.
        :rtype: bool
        """
        return self._payable_status

    @payable_status.setter
    def payable_status(self, payable_status):
        """Sets the payable_status of this PayeePayorRefV3.

        Indicates if the payee is payable for this payor

        :param payable_status: The payable_status of this PayeePayorRefV3.
        :type payable_status: bool
        """

        self._payable_status = payable_status

    @property
    def payment_channel_id(self):
        """Gets the payment_channel_id of this PayeePayorRefV3.


        :return: The payment_channel_id of this PayeePayorRefV3.
        :rtype: str
        """
        return self._payment_channel_id

    @payment_channel_id.setter
    def payment_channel_id(self, payment_channel_id):
        """Sets the payment_channel_id of this PayeePayorRefV3.


        :param payment_channel_id: The payment_channel_id of this PayeePayorRefV3.
        :type payment_channel_id: str
        """

        self._payment_channel_id = payment_channel_id

    @property
    def payor_id(self):
        """Gets the payor_id of this PayeePayorRefV3.


        :return: The payor_id of this PayeePayorRefV3.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this PayeePayorRefV3.


        :param payor_id: The payor_id of this PayeePayorRefV3.
        :type payor_id: str
        """

        self._payor_id = payor_id

    @property
    def remote_id(self):
        """Gets the remote_id of this PayeePayorRefV3.


        :return: The remote_id of this PayeePayorRefV3.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PayeePayorRefV3.


        :param remote_id: The remote_id of this PayeePayorRefV3.
        :type remote_id: str
        """

        self._remote_id = remote_id
