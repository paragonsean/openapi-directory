# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentRejectedOrReturnedAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason_code: str=None, reason_message: str=None):
        """PaymentRejectedOrReturnedAllOf - a model defined in OpenAPI

        :param reason_code: The reason_code of this PaymentRejectedOrReturnedAllOf.
        :param reason_message: The reason_message of this PaymentRejectedOrReturnedAllOf.
        """
        self.openapi_types = {
            'reason_code': str,
            'reason_message': str
        }

        self.attribute_map = {
            'reason_code': 'reasonCode',
            'reason_message': 'reasonMessage'
        }

        self._reason_code = reason_code
        self._reason_message = reason_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRejectedOrReturnedAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRejectedOrReturned_allOf of this PaymentRejectedOrReturnedAllOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason_code(self):
        """Gets the reason_code of this PaymentRejectedOrReturnedAllOf.

        The Velo code that indicates why the payment was rejected or returned

        :return: The reason_code of this PaymentRejectedOrReturnedAllOf.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this PaymentRejectedOrReturnedAllOf.

        The Velo code that indicates why the payment was rejected or returned

        :param reason_code: The reason_code of this PaymentRejectedOrReturnedAllOf.
        :type reason_code: str
        """
        if reason_code is None:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")

        self._reason_code = reason_code

    @property
    def reason_message(self):
        """Gets the reason_message of this PaymentRejectedOrReturnedAllOf.

        The description of why the payment was rejected or returned

        :return: The reason_message of this PaymentRejectedOrReturnedAllOf.
        :rtype: str
        """
        return self._reason_message

    @reason_message.setter
    def reason_message(self, reason_message):
        """Sets the reason_message of this PaymentRejectedOrReturnedAllOf.

        The description of why the payment was rejected or returned

        :param reason_message: The reason_message of this PaymentRejectedOrReturnedAllOf.
        :type reason_message: str
        """
        if reason_message is None:
            raise ValueError("Invalid value for `reason_message`, must not be `None`")

        self._reason_message = reason_message
