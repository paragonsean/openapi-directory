# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayorBrandingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collective_alias: str=None, dba_name: str=None, logo_url: str=None, payor_name: str=None, support_contact: str=None):
        """PayorBrandingResponse - a model defined in OpenAPI

        :param collective_alias: The collective_alias of this PayorBrandingResponse.
        :param dba_name: The dba_name of this PayorBrandingResponse.
        :param logo_url: The logo_url of this PayorBrandingResponse.
        :param payor_name: The payor_name of this PayorBrandingResponse.
        :param support_contact: The support_contact of this PayorBrandingResponse.
        """
        self.openapi_types = {
            'collective_alias': str,
            'dba_name': str,
            'logo_url': str,
            'payor_name': str,
            'support_contact': str
        }

        self.attribute_map = {
            'collective_alias': 'collectiveAlias',
            'dba_name': 'dbaName',
            'logo_url': 'logoUrl',
            'payor_name': 'payorName',
            'support_contact': 'supportContact'
        }

        self._collective_alias = collective_alias
        self._dba_name = dba_name
        self._logo_url = logo_url
        self._payor_name = payor_name
        self._support_contact = support_contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayorBrandingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayorBrandingResponse of this PayorBrandingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collective_alias(self):
        """Gets the collective_alias of this PayorBrandingResponse.

        How the payor has chosen to refer to payees

        :return: The collective_alias of this PayorBrandingResponse.
        :rtype: str
        """
        return self._collective_alias

    @collective_alias.setter
    def collective_alias(self, collective_alias):
        """Sets the collective_alias of this PayorBrandingResponse.

        How the payor has chosen to refer to payees

        :param collective_alias: The collective_alias of this PayorBrandingResponse.
        :type collective_alias: str
        """

        self._collective_alias = collective_alias

    @property
    def dba_name(self):
        """Gets the dba_name of this PayorBrandingResponse.

        The payor’s 'Doing Business As' name

        :return: The dba_name of this PayorBrandingResponse.
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this PayorBrandingResponse.

        The payor’s 'Doing Business As' name

        :param dba_name: The dba_name of this PayorBrandingResponse.
        :type dba_name: str
        """

        self._dba_name = dba_name

    @property
    def logo_url(self):
        """Gets the logo_url of this PayorBrandingResponse.

        <p>The URL to use for this payor’s logo</p> <p>This will be an immutable system-generated URL</p> 

        :return: The logo_url of this PayorBrandingResponse.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PayorBrandingResponse.

        <p>The URL to use for this payor’s logo</p> <p>This will be an immutable system-generated URL</p> 

        :param logo_url: The logo_url of this PayorBrandingResponse.
        :type logo_url: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")

        self._logo_url = logo_url

    @property
    def payor_name(self):
        """Gets the payor_name of this PayorBrandingResponse.

        The name of the payor

        :return: The payor_name of this PayorBrandingResponse.
        :rtype: str
        """
        return self._payor_name

    @payor_name.setter
    def payor_name(self, payor_name):
        """Sets the payor_name of this PayorBrandingResponse.

        The name of the payor

        :param payor_name: The payor_name of this PayorBrandingResponse.
        :type payor_name: str
        """
        if payor_name is None:
            raise ValueError("Invalid value for `payor_name`, must not be `None`")

        self._payor_name = payor_name

    @property
    def support_contact(self):
        """Gets the support_contact of this PayorBrandingResponse.

        The payor’s support contact address

        :return: The support_contact of this PayorBrandingResponse.
        :rtype: str
        """
        return self._support_contact

    @support_contact.setter
    def support_contact(self, support_contact):
        """Sets the support_contact of this PayorBrandingResponse.

        The payor’s support contact address

        :param support_contact: The support_contact of this PayorBrandingResponse.
        :type support_contact: str
        """

        self._support_contact = support_contact
