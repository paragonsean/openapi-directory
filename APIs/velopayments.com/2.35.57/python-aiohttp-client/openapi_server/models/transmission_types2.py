# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransmissionTypes2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ach: bool=None, same_day_ach: bool=None, wire: bool=None):
        """TransmissionTypes2 - a model defined in OpenAPI

        :param ach: The ach of this TransmissionTypes2.
        :param same_day_ach: The same_day_ach of this TransmissionTypes2.
        :param wire: The wire of this TransmissionTypes2.
        """
        self.openapi_types = {
            'ach': bool,
            'same_day_ach': bool,
            'wire': bool
        }

        self.attribute_map = {
            'ach': 'ACH',
            'same_day_ach': 'SAME_DAY_ACH',
            'wire': 'WIRE'
        }

        self._ach = ach
        self._same_day_ach = same_day_ach
        self._wire = wire

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransmissionTypes2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransmissionTypes_2 of this TransmissionTypes2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ach(self):
        """Gets the ach of this TransmissionTypes2.

        Whether the Payor is allowed to pay via ACH

        :return: The ach of this TransmissionTypes2.
        :rtype: bool
        """
        return self._ach

    @ach.setter
    def ach(self, ach):
        """Sets the ach of this TransmissionTypes2.

        Whether the Payor is allowed to pay via ACH

        :param ach: The ach of this TransmissionTypes2.
        :type ach: bool
        """
        if ach is None:
            raise ValueError("Invalid value for `ach`, must not be `None`")

        self._ach = ach

    @property
    def same_day_ach(self):
        """Gets the same_day_ach of this TransmissionTypes2.

        Whether the Payor is allowed to pay via same day ACH

        :return: The same_day_ach of this TransmissionTypes2.
        :rtype: bool
        """
        return self._same_day_ach

    @same_day_ach.setter
    def same_day_ach(self, same_day_ach):
        """Sets the same_day_ach of this TransmissionTypes2.

        Whether the Payor is allowed to pay via same day ACH

        :param same_day_ach: The same_day_ach of this TransmissionTypes2.
        :type same_day_ach: bool
        """
        if same_day_ach is None:
            raise ValueError("Invalid value for `same_day_ach`, must not be `None`")

        self._same_day_ach = same_day_ach

    @property
    def wire(self):
        """Gets the wire of this TransmissionTypes2.

        Whether the Payor is allowed to pay via wire

        :return: The wire of this TransmissionTypes2.
        :rtype: bool
        """
        return self._wire

    @wire.setter
    def wire(self, wire):
        """Sets the wire of this TransmissionTypes2.

        Whether the Payor is allowed to pay via wire

        :param wire: The wire of this TransmissionTypes2.
        :type wire: bool
        """
        if wire is None:
            raise ValueError("Invalid value for `wire`, must not be `None`")

        self._wire = wire
