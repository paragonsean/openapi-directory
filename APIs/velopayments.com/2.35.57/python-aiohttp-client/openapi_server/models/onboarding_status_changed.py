# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payee_event_all_of_reasons import PayeeEventAllOfReasons
from openapi_server import util


class OnboardingStatusChanged(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, event_id: str=None, source_type: str=None, payee_id: str=None, reasons: List[PayeeEventAllOfReasons]=None):
        """OnboardingStatusChanged - a model defined in OpenAPI

        :param created_at: The created_at of this OnboardingStatusChanged.
        :param event_id: The event_id of this OnboardingStatusChanged.
        :param source_type: The source_type of this OnboardingStatusChanged.
        :param payee_id: The payee_id of this OnboardingStatusChanged.
        :param reasons: The reasons of this OnboardingStatusChanged.
        """
        self.openapi_types = {
            'created_at': datetime,
            'event_id': str,
            'source_type': str,
            'payee_id': str,
            'reasons': List[PayeeEventAllOfReasons]
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'event_id': 'eventId',
            'source_type': 'sourceType',
            'payee_id': 'payeeId',
            'reasons': 'reasons'
        }

        self._created_at = created_at
        self._event_id = event_id
        self._source_type = source_type
        self._payee_id = payee_id
        self._reasons = reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnboardingStatusChanged':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnboardingStatusChanged of this OnboardingStatusChanged.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this OnboardingStatusChanged.

        ISO8601 timestamp indicating when the source event was created

        :return: The created_at of this OnboardingStatusChanged.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OnboardingStatusChanged.

        ISO8601 timestamp indicating when the source event was created

        :param created_at: The created_at of this OnboardingStatusChanged.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event_id(self):
        """Gets the event_id of this OnboardingStatusChanged.

        UUID id of the source event in the Velo platform

        :return: The event_id of this OnboardingStatusChanged.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this OnboardingStatusChanged.

        UUID id of the source event in the Velo platform

        :param event_id: The event_id of this OnboardingStatusChanged.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def source_type(self):
        """Gets the source_type of this OnboardingStatusChanged.

        OA3 Schema type name for the source info which is used as the discriminator value to ensure that data binding works correctly

        :return: The source_type of this OnboardingStatusChanged.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this OnboardingStatusChanged.

        OA3 Schema type name for the source info which is used as the discriminator value to ensure that data binding works correctly

        :param source_type: The source_type of this OnboardingStatusChanged.
        :type source_type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")

        self._source_type = source_type

    @property
    def payee_id(self):
        """Gets the payee_id of this OnboardingStatusChanged.

        ID of this payee within the Velo platform

        :return: The payee_id of this OnboardingStatusChanged.
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this OnboardingStatusChanged.

        ID of this payee within the Velo platform

        :param payee_id: The payee_id of this OnboardingStatusChanged.
        :type payee_id: str
        """
        if payee_id is None:
            raise ValueError("Invalid value for `payee_id`, must not be `None`")

        self._payee_id = payee_id

    @property
    def reasons(self):
        """Gets the reasons of this OnboardingStatusChanged.

        The reasons for the event notification.

        :return: The reasons of this OnboardingStatusChanged.
        :rtype: List[PayeeEventAllOfReasons]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this OnboardingStatusChanged.

        The reasons for the event notification.

        :param reasons: The reasons of this OnboardingStatusChanged.
        :type reasons: List[PayeeEventAllOfReasons]
        """

        self._reasons = reasons
