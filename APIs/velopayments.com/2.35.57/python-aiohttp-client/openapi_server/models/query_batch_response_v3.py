# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failed_submission_v3 import FailedSubmissionV3
from openapi_server import util


class QueryBatchResponseV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_count: int=None, failures: List[FailedSubmissionV3]=None, pending_count: int=None, status: str=None):
        """QueryBatchResponseV3 - a model defined in OpenAPI

        :param failure_count: The failure_count of this QueryBatchResponseV3.
        :param failures: The failures of this QueryBatchResponseV3.
        :param pending_count: The pending_count of this QueryBatchResponseV3.
        :param status: The status of this QueryBatchResponseV3.
        """
        self.openapi_types = {
            'failure_count': int,
            'failures': List[FailedSubmissionV3],
            'pending_count': int,
            'status': str
        }

        self.attribute_map = {
            'failure_count': 'failureCount',
            'failures': 'failures',
            'pending_count': 'pendingCount',
            'status': 'status'
        }

        self._failure_count = failure_count
        self._failures = failures
        self._pending_count = pending_count
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryBatchResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryBatchResponseV3 of this QueryBatchResponseV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_count(self):
        """Gets the failure_count of this QueryBatchResponseV3.


        :return: The failure_count of this QueryBatchResponseV3.
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this QueryBatchResponseV3.


        :param failure_count: The failure_count of this QueryBatchResponseV3.
        :type failure_count: int
        """

        self._failure_count = failure_count

    @property
    def failures(self):
        """Gets the failures of this QueryBatchResponseV3.


        :return: The failures of this QueryBatchResponseV3.
        :rtype: List[FailedSubmissionV3]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this QueryBatchResponseV3.


        :param failures: The failures of this QueryBatchResponseV3.
        :type failures: List[FailedSubmissionV3]
        """

        self._failures = failures

    @property
    def pending_count(self):
        """Gets the pending_count of this QueryBatchResponseV3.


        :return: The pending_count of this QueryBatchResponseV3.
        :rtype: int
        """
        return self._pending_count

    @pending_count.setter
    def pending_count(self, pending_count):
        """Sets the pending_count of this QueryBatchResponseV3.


        :param pending_count: The pending_count of this QueryBatchResponseV3.
        :type pending_count: int
        """

        self._pending_count = pending_count

    @property
    def status(self):
        """Gets the status of this QueryBatchResponseV3.

        Batch Status. One of the following values: SUBMITTED, ACCEPTED

        :return: The status of this QueryBatchResponseV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryBatchResponseV3.

        Batch Status. One of the following values: SUBMITTED, ACCEPTED

        :param status: The status of this QueryBatchResponseV3.
        :type status: str
        """

        self._status = status
