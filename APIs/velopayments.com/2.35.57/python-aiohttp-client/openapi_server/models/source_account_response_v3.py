# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_top_up_config_v3 import AutoTopUpConfigV3
from openapi_server.models.notifications_v3 import NotificationsV3
import re
from openapi_server import util


class SourceAccountResponseV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_top_up_config: AutoTopUpConfigV3=None, balance: int=None, country: str=None, currency: str=None, customer_id: str=None, deleted: bool=None, deleted_at: datetime=None, funding_ref: str=None, id: str=None, name: str=None, notifications: NotificationsV3=None, payor_id: str=None, physical_account_id: str=None, physical_account_name: str=None, pooled: bool=None, rails_id: str=None, type: str=None, user_deleted: bool=None):
        """SourceAccountResponseV3 - a model defined in OpenAPI

        :param auto_top_up_config: The auto_top_up_config of this SourceAccountResponseV3.
        :param balance: The balance of this SourceAccountResponseV3.
        :param country: The country of this SourceAccountResponseV3.
        :param currency: The currency of this SourceAccountResponseV3.
        :param customer_id: The customer_id of this SourceAccountResponseV3.
        :param deleted: The deleted of this SourceAccountResponseV3.
        :param deleted_at: The deleted_at of this SourceAccountResponseV3.
        :param funding_ref: The funding_ref of this SourceAccountResponseV3.
        :param id: The id of this SourceAccountResponseV3.
        :param name: The name of this SourceAccountResponseV3.
        :param notifications: The notifications of this SourceAccountResponseV3.
        :param payor_id: The payor_id of this SourceAccountResponseV3.
        :param physical_account_id: The physical_account_id of this SourceAccountResponseV3.
        :param physical_account_name: The physical_account_name of this SourceAccountResponseV3.
        :param pooled: The pooled of this SourceAccountResponseV3.
        :param rails_id: The rails_id of this SourceAccountResponseV3.
        :param type: The type of this SourceAccountResponseV3.
        :param user_deleted: The user_deleted of this SourceAccountResponseV3.
        """
        self.openapi_types = {
            'auto_top_up_config': AutoTopUpConfigV3,
            'balance': int,
            'country': str,
            'currency': str,
            'customer_id': str,
            'deleted': bool,
            'deleted_at': datetime,
            'funding_ref': str,
            'id': str,
            'name': str,
            'notifications': NotificationsV3,
            'payor_id': str,
            'physical_account_id': str,
            'physical_account_name': str,
            'pooled': bool,
            'rails_id': str,
            'type': str,
            'user_deleted': bool
        }

        self.attribute_map = {
            'auto_top_up_config': 'autoTopUpConfig',
            'balance': 'balance',
            'country': 'country',
            'currency': 'currency',
            'customer_id': 'customerId',
            'deleted': 'deleted',
            'deleted_at': 'deletedAt',
            'funding_ref': 'fundingRef',
            'id': 'id',
            'name': 'name',
            'notifications': 'notifications',
            'payor_id': 'payorId',
            'physical_account_id': 'physicalAccountId',
            'physical_account_name': 'physicalAccountName',
            'pooled': 'pooled',
            'rails_id': 'railsId',
            'type': 'type',
            'user_deleted': 'userDeleted'
        }

        self._auto_top_up_config = auto_top_up_config
        self._balance = balance
        self._country = country
        self._currency = currency
        self._customer_id = customer_id
        self._deleted = deleted
        self._deleted_at = deleted_at
        self._funding_ref = funding_ref
        self._id = id
        self._name = name
        self._notifications = notifications
        self._payor_id = payor_id
        self._physical_account_id = physical_account_id
        self._physical_account_name = physical_account_name
        self._pooled = pooled
        self._rails_id = rails_id
        self._type = type
        self._user_deleted = user_deleted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceAccountResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceAccountResponseV3 of this SourceAccountResponseV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_top_up_config(self):
        """Gets the auto_top_up_config of this SourceAccountResponseV3.


        :return: The auto_top_up_config of this SourceAccountResponseV3.
        :rtype: AutoTopUpConfigV3
        """
        return self._auto_top_up_config

    @auto_top_up_config.setter
    def auto_top_up_config(self, auto_top_up_config):
        """Sets the auto_top_up_config of this SourceAccountResponseV3.


        :param auto_top_up_config: The auto_top_up_config of this SourceAccountResponseV3.
        :type auto_top_up_config: AutoTopUpConfigV3
        """

        self._auto_top_up_config = auto_top_up_config

    @property
    def balance(self):
        """Gets the balance of this SourceAccountResponseV3.

        Decimal implied

        :return: The balance of this SourceAccountResponseV3.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this SourceAccountResponseV3.

        Decimal implied

        :param balance: The balance of this SourceAccountResponseV3.
        :type balance: int
        """

        self._balance = balance

    @property
    def country(self):
        """Gets the country of this SourceAccountResponseV3.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The country of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SourceAccountResponseV3.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param country: The country of this SourceAccountResponseV3.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")
        if country is not None and not re.search(r'^[A-Z]{2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this SourceAccountResponseV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SourceAccountResponseV3.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency: The currency of this SourceAccountResponseV3.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this SourceAccountResponseV3.


        :return: The customer_id of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SourceAccountResponseV3.


        :param customer_id: The customer_id of this SourceAccountResponseV3.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def deleted(self):
        """Gets the deleted of this SourceAccountResponseV3.

        An optional flag for whether the source account has been deleted. Only present in the response if true.

        :return: The deleted of this SourceAccountResponseV3.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SourceAccountResponseV3.

        An optional flag for whether the source account has been deleted. Only present in the response if true.

        :param deleted: The deleted of this SourceAccountResponseV3.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def deleted_at(self):
        """Gets the deleted_at of this SourceAccountResponseV3.

        An optional timestamp when the source account has been deleted. Only present in the response if deleted.

        :return: The deleted_at of this SourceAccountResponseV3.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this SourceAccountResponseV3.

        An optional timestamp when the source account has been deleted. Only present in the response if deleted.

        :param deleted_at: The deleted_at of this SourceAccountResponseV3.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def funding_ref(self):
        """Gets the funding_ref of this SourceAccountResponseV3.

        The funding reference (will not be set for DECOUPLED accounts).

        :return: The funding_ref of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._funding_ref

    @funding_ref.setter
    def funding_ref(self, funding_ref):
        """Sets the funding_ref of this SourceAccountResponseV3.

        The funding reference (will not be set for DECOUPLED accounts).

        :param funding_ref: The funding_ref of this SourceAccountResponseV3.
        :type funding_ref: str
        """

        self._funding_ref = funding_ref

    @property
    def id(self):
        """Gets the id of this SourceAccountResponseV3.

        Source Account Id

        :return: The id of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceAccountResponseV3.

        Source Account Id

        :param id: The id of this SourceAccountResponseV3.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this SourceAccountResponseV3.


        :return: The name of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceAccountResponseV3.


        :param name: The name of this SourceAccountResponseV3.
        :type name: str
        """

        self._name = name

    @property
    def notifications(self):
        """Gets the notifications of this SourceAccountResponseV3.


        :return: The notifications of this SourceAccountResponseV3.
        :rtype: NotificationsV3
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this SourceAccountResponseV3.


        :param notifications: The notifications of this SourceAccountResponseV3.
        :type notifications: NotificationsV3
        """

        self._notifications = notifications

    @property
    def payor_id(self):
        """Gets the payor_id of this SourceAccountResponseV3.


        :return: The payor_id of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this SourceAccountResponseV3.


        :param payor_id: The payor_id of this SourceAccountResponseV3.
        :type payor_id: str
        """

        self._payor_id = payor_id

    @property
    def physical_account_id(self):
        """Gets the physical_account_id of this SourceAccountResponseV3.

        The physical account id (will not be set for DECOUPLED accounts).

        :return: The physical_account_id of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._physical_account_id

    @physical_account_id.setter
    def physical_account_id(self, physical_account_id):
        """Sets the physical_account_id of this SourceAccountResponseV3.

        The physical account id (will not be set for DECOUPLED accounts).

        :param physical_account_id: The physical_account_id of this SourceAccountResponseV3.
        :type physical_account_id: str
        """

        self._physical_account_id = physical_account_id

    @property
    def physical_account_name(self):
        """Gets the physical_account_name of this SourceAccountResponseV3.

        The physical account name (will not be set for DECOUPLED accounts).

        :return: The physical_account_name of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._physical_account_name

    @physical_account_name.setter
    def physical_account_name(self, physical_account_name):
        """Sets the physical_account_name of this SourceAccountResponseV3.

        The physical account name (will not be set for DECOUPLED accounts).

        :param physical_account_name: The physical_account_name of this SourceAccountResponseV3.
        :type physical_account_name: str
        """

        self._physical_account_name = physical_account_name

    @property
    def pooled(self):
        """Gets the pooled of this SourceAccountResponseV3.

        The pooled account flag (will not be set for DECOUPLED accounts).

        :return: The pooled of this SourceAccountResponseV3.
        :rtype: bool
        """
        return self._pooled

    @pooled.setter
    def pooled(self, pooled):
        """Sets the pooled of this SourceAccountResponseV3.

        The pooled account flag (will not be set for DECOUPLED accounts).

        :param pooled: The pooled of this SourceAccountResponseV3.
        :type pooled: bool
        """

        self._pooled = pooled

    @property
    def rails_id(self):
        """Gets the rails_id of this SourceAccountResponseV3.


        :return: The rails_id of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._rails_id

    @rails_id.setter
    def rails_id(self, rails_id):
        """Sets the rails_id of this SourceAccountResponseV3.


        :param rails_id: The rails_id of this SourceAccountResponseV3.
        :type rails_id: str
        """
        if rails_id is None:
            raise ValueError("Invalid value for `rails_id`, must not be `None`")

        self._rails_id = rails_id

    @property
    def type(self):
        """Gets the type of this SourceAccountResponseV3.


        :return: The type of this SourceAccountResponseV3.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SourceAccountResponseV3.


        :param type: The type of this SourceAccountResponseV3.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user_deleted(self):
        """Gets the user_deleted of this SourceAccountResponseV3.

        An optional flag for whether the source account has been deleted by a user. Only present in the response if true.

        :return: The user_deleted of this SourceAccountResponseV3.
        :rtype: bool
        """
        return self._user_deleted

    @user_deleted.setter
    def user_deleted(self, user_deleted):
        """Sets the user_deleted of this SourceAccountResponseV3.

        An optional flag for whether the source account has been deleted by a user. Only present in the response if true.

        :param user_deleted: The user_deleted of this SourceAccountResponseV3.
        :type user_deleted: bool
        """

        self._user_deleted = user_deleted
