# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payout_payee_v3 import PayoutPayeeV3
from openapi_server import util


class PaymentV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, auto_withdrawn_reason_code: str=None, currency: str=None, payee: PayoutPayeeV3=None, payment_id: str=None, payment_memo: str=None, payment_metadata: str=None, payor_payment_id: str=None, rails_id: str=None, remote_id: str=None, remote_system_id: str=None, source_account_name: str=None, status: str=None, transmission_type: str=None, withdrawable: bool=None):
        """PaymentV3 - a model defined in OpenAPI

        :param amount: The amount of this PaymentV3.
        :param auto_withdrawn_reason_code: The auto_withdrawn_reason_code of this PaymentV3.
        :param currency: The currency of this PaymentV3.
        :param payee: The payee of this PaymentV3.
        :param payment_id: The payment_id of this PaymentV3.
        :param payment_memo: The payment_memo of this PaymentV3.
        :param payment_metadata: The payment_metadata of this PaymentV3.
        :param payor_payment_id: The payor_payment_id of this PaymentV3.
        :param rails_id: The rails_id of this PaymentV3.
        :param remote_id: The remote_id of this PaymentV3.
        :param remote_system_id: The remote_system_id of this PaymentV3.
        :param source_account_name: The source_account_name of this PaymentV3.
        :param status: The status of this PaymentV3.
        :param transmission_type: The transmission_type of this PaymentV3.
        :param withdrawable: The withdrawable of this PaymentV3.
        """
        self.openapi_types = {
            'amount': int,
            'auto_withdrawn_reason_code': str,
            'currency': str,
            'payee': PayoutPayeeV3,
            'payment_id': str,
            'payment_memo': str,
            'payment_metadata': str,
            'payor_payment_id': str,
            'rails_id': str,
            'remote_id': str,
            'remote_system_id': str,
            'source_account_name': str,
            'status': str,
            'transmission_type': str,
            'withdrawable': bool
        }

        self.attribute_map = {
            'amount': 'amount',
            'auto_withdrawn_reason_code': 'autoWithdrawnReasonCode',
            'currency': 'currency',
            'payee': 'payee',
            'payment_id': 'paymentId',
            'payment_memo': 'paymentMemo',
            'payment_metadata': 'paymentMetadata',
            'payor_payment_id': 'payorPaymentId',
            'rails_id': 'railsId',
            'remote_id': 'remoteId',
            'remote_system_id': 'remoteSystemId',
            'source_account_name': 'sourceAccountName',
            'status': 'status',
            'transmission_type': 'transmissionType',
            'withdrawable': 'withdrawable'
        }

        self._amount = amount
        self._auto_withdrawn_reason_code = auto_withdrawn_reason_code
        self._currency = currency
        self._payee = payee
        self._payment_id = payment_id
        self._payment_memo = payment_memo
        self._payment_metadata = payment_metadata
        self._payor_payment_id = payor_payment_id
        self._rails_id = rails_id
        self._remote_id = remote_id
        self._remote_system_id = remote_system_id
        self._source_account_name = source_account_name
        self._status = status
        self._transmission_type = transmission_type
        self._withdrawable = withdrawable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentV3 of this PaymentV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentV3.

        The amount of the payment in minor units

        :return: The amount of this PaymentV3.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentV3.

        The amount of the payment in minor units

        :param amount: The amount of this PaymentV3.
        :type amount: int
        """

        self._amount = amount

    @property
    def auto_withdrawn_reason_code(self):
        """Gets the auto_withdrawn_reason_code of this PaymentV3.

        Populated only if the payment was automatically withdrawn during instruction for being invalid

        :return: The auto_withdrawn_reason_code of this PaymentV3.
        :rtype: str
        """
        return self._auto_withdrawn_reason_code

    @auto_withdrawn_reason_code.setter
    def auto_withdrawn_reason_code(self, auto_withdrawn_reason_code):
        """Sets the auto_withdrawn_reason_code of this PaymentV3.

        Populated only if the payment was automatically withdrawn during instruction for being invalid

        :param auto_withdrawn_reason_code: The auto_withdrawn_reason_code of this PaymentV3.
        :type auto_withdrawn_reason_code: str
        """

        self._auto_withdrawn_reason_code = auto_withdrawn_reason_code

    @property
    def currency(self):
        """Gets the currency of this PaymentV3.

        The currency that the payment was made in

        :return: The currency of this PaymentV3.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentV3.

        The currency that the payment was made in

        :param currency: The currency of this PaymentV3.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def payee(self):
        """Gets the payee of this PaymentV3.


        :return: The payee of this PaymentV3.
        :rtype: PayoutPayeeV3
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this PaymentV3.


        :param payee: The payee of this PaymentV3.
        :type payee: PayoutPayeeV3
        """

        self._payee = payee

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentV3.

        The id of the payment

        :return: The payment_id of this PaymentV3.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentV3.

        The id of the payment

        :param payment_id: The payment_id of this PaymentV3.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def payment_memo(self):
        """Gets the payment_memo of this PaymentV3.

        <p>Any value here will override the memo value in the parent payout</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :return: The payment_memo of this PaymentV3.
        :rtype: str
        """
        return self._payment_memo

    @payment_memo.setter
    def payment_memo(self, payment_memo):
        """Sets the payment_memo of this PaymentV3.

        <p>Any value here will override the memo value in the parent payout</p> <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p> 

        :param payment_memo: The payment_memo of this PaymentV3.
        :type payment_memo: str
        """
        if payment_memo is not None and len(payment_memo) > 40:
            raise ValueError("Invalid value for `payment_memo`, length must be less than or equal to `40`")
        if payment_memo is not None and len(payment_memo) < 0:
            raise ValueError("Invalid value for `payment_memo`, length must be greater than or equal to `0`")

        self._payment_memo = payment_memo

    @property
    def payment_metadata(self):
        """Gets the payment_metadata of this PaymentV3.

        <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p> <p>The structure of the data will be dictated by the requirements of the payment rails</p> 

        :return: The payment_metadata of this PaymentV3.
        :rtype: str
        """
        return self._payment_metadata

    @payment_metadata.setter
    def payment_metadata(self, payment_metadata):
        """Sets the payment_metadata of this PaymentV3.

        <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p> <p>The structure of the data will be dictated by the requirements of the payment rails</p> 

        :param payment_metadata: The payment_metadata of this PaymentV3.
        :type payment_metadata: str
        """
        if payment_metadata is not None and len(payment_metadata) > 512:
            raise ValueError("Invalid value for `payment_metadata`, length must be less than or equal to `512`")
        if payment_metadata is not None and len(payment_metadata) < 0:
            raise ValueError("Invalid value for `payment_metadata`, length must be greater than or equal to `0`")

        self._payment_metadata = payment_metadata

    @property
    def payor_payment_id(self):
        """Gets the payor_payment_id of this PaymentV3.

        A reference identifier for the payor for the given payee payment

        :return: The payor_payment_id of this PaymentV3.
        :rtype: str
        """
        return self._payor_payment_id

    @payor_payment_id.setter
    def payor_payment_id(self, payor_payment_id):
        """Sets the payor_payment_id of this PaymentV3.

        A reference identifier for the payor for the given payee payment

        :param payor_payment_id: The payor_payment_id of this PaymentV3.
        :type payor_payment_id: str
        """
        if payor_payment_id is not None and len(payor_payment_id) > 40:
            raise ValueError("Invalid value for `payor_payment_id`, length must be less than or equal to `40`")
        if payor_payment_id is not None and len(payor_payment_id) < 0:
            raise ValueError("Invalid value for `payor_payment_id`, length must be greater than or equal to `0`")

        self._payor_payment_id = payor_payment_id

    @property
    def rails_id(self):
        """Gets the rails_id of this PaymentV3.

        Indicates the 3rd party system involved in making this payment

        :return: The rails_id of this PaymentV3.
        :rtype: str
        """
        return self._rails_id

    @rails_id.setter
    def rails_id(self, rails_id):
        """Sets the rails_id of this PaymentV3.

        Indicates the 3rd party system involved in making this payment

        :param rails_id: The rails_id of this PaymentV3.
        :type rails_id: str
        """

        self._rails_id = rails_id

    @property
    def remote_id(self):
        """Gets the remote_id of this PaymentV3.

        The remoteId supplied by the payor that identifies the payee

        :return: The remote_id of this PaymentV3.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PaymentV3.

        The remoteId supplied by the payor that identifies the payee

        :param remote_id: The remote_id of this PaymentV3.
        :type remote_id: str
        """

        self._remote_id = remote_id

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this PaymentV3.

        <p>The identifier for the remote payments system if not Velo</p> 

        :return: The remote_system_id of this PaymentV3.
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this PaymentV3.

        <p>The identifier for the remote payments system if not Velo</p> 

        :param remote_system_id: The remote_system_id of this PaymentV3.
        :type remote_system_id: str
        """
        if remote_system_id is not None and len(remote_system_id) > 100:
            raise ValueError("Invalid value for `remote_system_id`, length must be less than or equal to `100`")
        if remote_system_id is not None and len(remote_system_id) < 1:
            raise ValueError("Invalid value for `remote_system_id`, length must be greater than or equal to `1`")

        self._remote_system_id = remote_system_id

    @property
    def source_account_name(self):
        """Gets the source_account_name of this PaymentV3.

        The identifier of the source account to debit the payment from

        :return: The source_account_name of this PaymentV3.
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this PaymentV3.

        The identifier of the source account to debit the payment from

        :param source_account_name: The source_account_name of this PaymentV3.
        :type source_account_name: str
        """

        self._source_account_name = source_account_name

    @property
    def status(self):
        """Gets the status of this PaymentV3.

        Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED

        :return: The status of this PaymentV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentV3.

        Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED

        :param status: The status of this PaymentV3.
        :type status: str
        """

        self._status = status

    @property
    def transmission_type(self):
        """Gets the transmission_type of this PaymentV3.

        The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT

        :return: The transmission_type of this PaymentV3.
        :rtype: str
        """
        return self._transmission_type

    @transmission_type.setter
    def transmission_type(self, transmission_type):
        """Sets the transmission_type of this PaymentV3.

        The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT

        :param transmission_type: The transmission_type of this PaymentV3.
        :type transmission_type: str
        """

        self._transmission_type = transmission_type

    @property
    def withdrawable(self):
        """Gets the withdrawable of this PaymentV3.

        Can this paynent be withdrawn

        :return: The withdrawable of this PaymentV3.
        :rtype: bool
        """
        return self._withdrawable

    @withdrawable.setter
    def withdrawable(self, withdrawable):
        """Sets the withdrawable of this PaymentV3.

        Can this paynent be withdrawn

        :param withdrawable: The withdrawable of this PaymentV3.
        :type withdrawable: bool
        """

        self._withdrawable = withdrawable
