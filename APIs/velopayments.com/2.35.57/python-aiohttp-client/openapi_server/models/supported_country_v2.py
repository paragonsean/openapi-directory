# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region_v2 import RegionV2
import re
from openapi_server import util


class SupportedCountryV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currencies: List[str]=None, iso_country_code: str=None, regions: List[RegionV2]=None):
        """SupportedCountryV2 - a model defined in OpenAPI

        :param currencies: The currencies of this SupportedCountryV2.
        :param iso_country_code: The iso_country_code of this SupportedCountryV2.
        :param regions: The regions of this SupportedCountryV2.
        """
        self.openapi_types = {
            'currencies': List[str],
            'iso_country_code': str,
            'regions': List[RegionV2]
        }

        self.attribute_map = {
            'currencies': 'currencies',
            'iso_country_code': 'isoCountryCode',
            'regions': 'regions'
        }

        self._currencies = currencies
        self._iso_country_code = iso_country_code
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedCountryV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedCountryV2 of this SupportedCountryV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currencies(self):
        """Gets the currencies of this SupportedCountryV2.


        :return: The currencies of this SupportedCountryV2.
        :rtype: List[str]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this SupportedCountryV2.


        :param currencies: The currencies of this SupportedCountryV2.
        :type currencies: List[str]
        """

        self._currencies = currencies

    @property
    def iso_country_code(self):
        """Gets the iso_country_code of this SupportedCountryV2.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The iso_country_code of this SupportedCountryV2.
        :rtype: str
        """
        return self._iso_country_code

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code):
        """Sets the iso_country_code of this SupportedCountryV2.

        Valid ISO 3166 2 character country code. See the <a href=\"https://www.iso.org/iso-3166-country-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param iso_country_code: The iso_country_code of this SupportedCountryV2.
        :type iso_country_code: str
        """
        if iso_country_code is not None and len(iso_country_code) > 2:
            raise ValueError("Invalid value for `iso_country_code`, length must be less than or equal to `2`")
        if iso_country_code is not None and len(iso_country_code) < 2:
            raise ValueError("Invalid value for `iso_country_code`, length must be greater than or equal to `2`")
        if iso_country_code is not None and not re.search(r'^[A-Z]{2}$', iso_country_code):
            raise ValueError("Invalid value for `iso_country_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._iso_country_code = iso_country_code

    @property
    def regions(self):
        """Gets the regions of this SupportedCountryV2.


        :return: The regions of this SupportedCountryV2.
        :rtype: List[RegionV2]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this SupportedCountryV2.


        :param regions: The regions of this SupportedCountryV2.
        :type regions: List[RegionV2]
        """

        self._regions = regions
