# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fx_summary_v3 import FxSummaryV3
from openapi_server.models.source_account_summary_v3 import SourceAccountSummaryV3
from openapi_server import util


class PayoutSummaryAuditV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fx_summaries: List[FxSummaryV3]=None, instructed_date_time: str=None, payor_id: str=None, payout_id: str=None, payout_memo: str=None, source_account_summary: List[SourceAccountSummaryV3]=None, status: str=None, submitted_date_time: str=None, total_failed_payments: int=None, total_incomplete_payments: int=None, total_payments: int=None, withdrawn_date_time: str=None):
        """PayoutSummaryAuditV3 - a model defined in OpenAPI

        :param fx_summaries: The fx_summaries of this PayoutSummaryAuditV3.
        :param instructed_date_time: The instructed_date_time of this PayoutSummaryAuditV3.
        :param payor_id: The payor_id of this PayoutSummaryAuditV3.
        :param payout_id: The payout_id of this PayoutSummaryAuditV3.
        :param payout_memo: The payout_memo of this PayoutSummaryAuditV3.
        :param source_account_summary: The source_account_summary of this PayoutSummaryAuditV3.
        :param status: The status of this PayoutSummaryAuditV3.
        :param submitted_date_time: The submitted_date_time of this PayoutSummaryAuditV3.
        :param total_failed_payments: The total_failed_payments of this PayoutSummaryAuditV3.
        :param total_incomplete_payments: The total_incomplete_payments of this PayoutSummaryAuditV3.
        :param total_payments: The total_payments of this PayoutSummaryAuditV3.
        :param withdrawn_date_time: The withdrawn_date_time of this PayoutSummaryAuditV3.
        """
        self.openapi_types = {
            'fx_summaries': List[FxSummaryV3],
            'instructed_date_time': str,
            'payor_id': str,
            'payout_id': str,
            'payout_memo': str,
            'source_account_summary': List[SourceAccountSummaryV3],
            'status': str,
            'submitted_date_time': str,
            'total_failed_payments': int,
            'total_incomplete_payments': int,
            'total_payments': int,
            'withdrawn_date_time': str
        }

        self.attribute_map = {
            'fx_summaries': 'fxSummaries',
            'instructed_date_time': 'instructedDateTime',
            'payor_id': 'payorId',
            'payout_id': 'payoutId',
            'payout_memo': 'payoutMemo',
            'source_account_summary': 'sourceAccountSummary',
            'status': 'status',
            'submitted_date_time': 'submittedDateTime',
            'total_failed_payments': 'totalFailedPayments',
            'total_incomplete_payments': 'totalIncompletePayments',
            'total_payments': 'totalPayments',
            'withdrawn_date_time': 'withdrawnDateTime'
        }

        self._fx_summaries = fx_summaries
        self._instructed_date_time = instructed_date_time
        self._payor_id = payor_id
        self._payout_id = payout_id
        self._payout_memo = payout_memo
        self._source_account_summary = source_account_summary
        self._status = status
        self._submitted_date_time = submitted_date_time
        self._total_failed_payments = total_failed_payments
        self._total_incomplete_payments = total_incomplete_payments
        self._total_payments = total_payments
        self._withdrawn_date_time = withdrawn_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutSummaryAuditV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutSummaryAuditV3 of this PayoutSummaryAuditV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fx_summaries(self):
        """Gets the fx_summaries of this PayoutSummaryAuditV3.


        :return: The fx_summaries of this PayoutSummaryAuditV3.
        :rtype: List[FxSummaryV3]
        """
        return self._fx_summaries

    @fx_summaries.setter
    def fx_summaries(self, fx_summaries):
        """Sets the fx_summaries of this PayoutSummaryAuditV3.


        :param fx_summaries: The fx_summaries of this PayoutSummaryAuditV3.
        :type fx_summaries: List[FxSummaryV3]
        """

        self._fx_summaries = fx_summaries

    @property
    def instructed_date_time(self):
        """Gets the instructed_date_time of this PayoutSummaryAuditV3.


        :return: The instructed_date_time of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._instructed_date_time

    @instructed_date_time.setter
    def instructed_date_time(self, instructed_date_time):
        """Sets the instructed_date_time of this PayoutSummaryAuditV3.


        :param instructed_date_time: The instructed_date_time of this PayoutSummaryAuditV3.
        :type instructed_date_time: str
        """

        self._instructed_date_time = instructed_date_time

    @property
    def payor_id(self):
        """Gets the payor_id of this PayoutSummaryAuditV3.


        :return: The payor_id of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this PayoutSummaryAuditV3.


        :param payor_id: The payor_id of this PayoutSummaryAuditV3.
        :type payor_id: str
        """

        self._payor_id = payor_id

    @property
    def payout_id(self):
        """Gets the payout_id of this PayoutSummaryAuditV3.


        :return: The payout_id of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._payout_id

    @payout_id.setter
    def payout_id(self, payout_id):
        """Sets the payout_id of this PayoutSummaryAuditV3.


        :param payout_id: The payout_id of this PayoutSummaryAuditV3.
        :type payout_id: str
        """
        if payout_id is None:
            raise ValueError("Invalid value for `payout_id`, must not be `None`")

        self._payout_id = payout_id

    @property
    def payout_memo(self):
        """Gets the payout_memo of this PayoutSummaryAuditV3.


        :return: The payout_memo of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._payout_memo

    @payout_memo.setter
    def payout_memo(self, payout_memo):
        """Sets the payout_memo of this PayoutSummaryAuditV3.


        :param payout_memo: The payout_memo of this PayoutSummaryAuditV3.
        :type payout_memo: str
        """

        self._payout_memo = payout_memo

    @property
    def source_account_summary(self):
        """Gets the source_account_summary of this PayoutSummaryAuditV3.


        :return: The source_account_summary of this PayoutSummaryAuditV3.
        :rtype: List[SourceAccountSummaryV3]
        """
        return self._source_account_summary

    @source_account_summary.setter
    def source_account_summary(self, source_account_summary):
        """Sets the source_account_summary of this PayoutSummaryAuditV3.


        :param source_account_summary: The source_account_summary of this PayoutSummaryAuditV3.
        :type source_account_summary: List[SourceAccountSummaryV3]
        """

        self._source_account_summary = source_account_summary

    @property
    def status(self):
        """Gets the status of this PayoutSummaryAuditV3.

        Current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN

        :return: The status of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayoutSummaryAuditV3.

        Current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN

        :param status: The status of this PayoutSummaryAuditV3.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def submitted_date_time(self):
        """Gets the submitted_date_time of this PayoutSummaryAuditV3.


        :return: The submitted_date_time of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._submitted_date_time

    @submitted_date_time.setter
    def submitted_date_time(self, submitted_date_time):
        """Sets the submitted_date_time of this PayoutSummaryAuditV3.


        :param submitted_date_time: The submitted_date_time of this PayoutSummaryAuditV3.
        :type submitted_date_time: str
        """
        if submitted_date_time is None:
            raise ValueError("Invalid value for `submitted_date_time`, must not be `None`")

        self._submitted_date_time = submitted_date_time

    @property
    def total_failed_payments(self):
        """Gets the total_failed_payments of this PayoutSummaryAuditV3.


        :return: The total_failed_payments of this PayoutSummaryAuditV3.
        :rtype: int
        """
        return self._total_failed_payments

    @total_failed_payments.setter
    def total_failed_payments(self, total_failed_payments):
        """Sets the total_failed_payments of this PayoutSummaryAuditV3.


        :param total_failed_payments: The total_failed_payments of this PayoutSummaryAuditV3.
        :type total_failed_payments: int
        """

        self._total_failed_payments = total_failed_payments

    @property
    def total_incomplete_payments(self):
        """Gets the total_incomplete_payments of this PayoutSummaryAuditV3.


        :return: The total_incomplete_payments of this PayoutSummaryAuditV3.
        :rtype: int
        """
        return self._total_incomplete_payments

    @total_incomplete_payments.setter
    def total_incomplete_payments(self, total_incomplete_payments):
        """Sets the total_incomplete_payments of this PayoutSummaryAuditV3.


        :param total_incomplete_payments: The total_incomplete_payments of this PayoutSummaryAuditV3.
        :type total_incomplete_payments: int
        """

        self._total_incomplete_payments = total_incomplete_payments

    @property
    def total_payments(self):
        """Gets the total_payments of this PayoutSummaryAuditV3.


        :return: The total_payments of this PayoutSummaryAuditV3.
        :rtype: int
        """
        return self._total_payments

    @total_payments.setter
    def total_payments(self, total_payments):
        """Sets the total_payments of this PayoutSummaryAuditV3.


        :param total_payments: The total_payments of this PayoutSummaryAuditV3.
        :type total_payments: int
        """

        self._total_payments = total_payments

    @property
    def withdrawn_date_time(self):
        """Gets the withdrawn_date_time of this PayoutSummaryAuditV3.


        :return: The withdrawn_date_time of this PayoutSummaryAuditV3.
        :rtype: str
        """
        return self._withdrawn_date_time

    @withdrawn_date_time.setter
    def withdrawn_date_time(self, withdrawn_date_time):
        """Sets the withdrawn_date_time of this PayoutSummaryAuditV3.


        :param withdrawn_date_time: The withdrawn_date_time of this PayoutSummaryAuditV3.
        :type withdrawn_date_time: str
        """

        self._withdrawn_date_time = withdrawn_date_time
