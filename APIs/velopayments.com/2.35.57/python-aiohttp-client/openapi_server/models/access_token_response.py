# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class AccessTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, entity_ids: List[str]=None, expires_in: int=None, refresh_token: str=None, scope: str=None, token_type: str='bearer', user_info: UserInfo=None):
        """AccessTokenResponse - a model defined in OpenAPI

        :param access_token: The access_token of this AccessTokenResponse.
        :param entity_ids: The entity_ids of this AccessTokenResponse.
        :param expires_in: The expires_in of this AccessTokenResponse.
        :param refresh_token: The refresh_token of this AccessTokenResponse.
        :param scope: The scope of this AccessTokenResponse.
        :param token_type: The token_type of this AccessTokenResponse.
        :param user_info: The user_info of this AccessTokenResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'entity_ids': List[str],
            'expires_in': int,
            'refresh_token': str,
            'scope': str,
            'token_type': str,
            'user_info': UserInfo
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'entity_ids': 'entityIds',
            'expires_in': 'expires_in',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'token_type': 'token_type',
            'user_info': 'user_info'
        }

        self._access_token = access_token
        self._entity_ids = entity_ids
        self._expires_in = expires_in
        self._refresh_token = refresh_token
        self._scope = scope
        self._token_type = token_type
        self._user_info = user_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenResponse of this AccessTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccessTokenResponse.

        Bearer token used in headers to access secure endpoints 

        :return: The access_token of this AccessTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessTokenResponse.

        Bearer token used in headers to access secure endpoints 

        :param access_token: The access_token of this AccessTokenResponse.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def entity_ids(self):
        """Gets the entity_ids of this AccessTokenResponse.

        If the user is a payee then the payeeId<P> If the user is a payor then the payorId 

        :return: The entity_ids of this AccessTokenResponse.
        :rtype: List[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this AccessTokenResponse.

        If the user is a payee then the payeeId<P> If the user is a payor then the payorId 

        :param entity_ids: The entity_ids of this AccessTokenResponse.
        :type entity_ids: List[str]
        """

        self._entity_ids = entity_ids

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessTokenResponse.

        The lifetime in seconds of the access token

        :return: The expires_in of this AccessTokenResponse.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessTokenResponse.

        The lifetime in seconds of the access token

        :param expires_in: The expires_in of this AccessTokenResponse.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AccessTokenResponse.

        can be used to obtain a new access token

        :return: The refresh_token of this AccessTokenResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AccessTokenResponse.

        can be used to obtain a new access token

        :param refresh_token: The refresh_token of this AccessTokenResponse.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this AccessTokenResponse.

        the scope of the access token

        :return: The scope of this AccessTokenResponse.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AccessTokenResponse.

        the scope of the access token

        :param scope: The scope of this AccessTokenResponse.
        :type scope: str
        """

        self._scope = scope

    @property
    def token_type(self):
        """Gets the token_type of this AccessTokenResponse.

        the type of the token

        :return: The token_type of this AccessTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AccessTokenResponse.

        the type of the token

        :param token_type: The token_type of this AccessTokenResponse.
        :type token_type: str
        """

        self._token_type = token_type

    @property
    def user_info(self):
        """Gets the user_info of this AccessTokenResponse.


        :return: The user_info of this AccessTokenResponse.
        :rtype: UserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this AccessTokenResponse.


        :param user_info: The user_info of this AccessTokenResponse.
        :type user_info: UserInfo
        """

        self._user_info = user_info
