# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payout_company_v3 import PayoutCompanyV3
from openapi_server.models.payout_individual_v3 import PayoutIndividualV3
from openapi_server import util


class PayoutPayeeV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company: PayoutCompanyV3=None, individual: PayoutIndividualV3=None, payee_id: str=None):
        """PayoutPayeeV3 - a model defined in OpenAPI

        :param company: The company of this PayoutPayeeV3.
        :param individual: The individual of this PayoutPayeeV3.
        :param payee_id: The payee_id of this PayoutPayeeV3.
        """
        self.openapi_types = {
            'company': PayoutCompanyV3,
            'individual': PayoutIndividualV3,
            'payee_id': str
        }

        self.attribute_map = {
            'company': 'company',
            'individual': 'individual',
            'payee_id': 'payeeId'
        }

        self._company = company
        self._individual = individual
        self._payee_id = payee_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutPayeeV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutPayeeV3 of this PayoutPayeeV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self):
        """Gets the company of this PayoutPayeeV3.


        :return: The company of this PayoutPayeeV3.
        :rtype: PayoutCompanyV3
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this PayoutPayeeV3.


        :param company: The company of this PayoutPayeeV3.
        :type company: PayoutCompanyV3
        """

        self._company = company

    @property
    def individual(self):
        """Gets the individual of this PayoutPayeeV3.


        :return: The individual of this PayoutPayeeV3.
        :rtype: PayoutIndividualV3
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this PayoutPayeeV3.


        :param individual: The individual of this PayoutPayeeV3.
        :type individual: PayoutIndividualV3
        """

        self._individual = individual

    @property
    def payee_id(self):
        """Gets the payee_id of this PayoutPayeeV3.


        :return: The payee_id of this PayoutPayeeV3.
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this PayoutPayeeV3.


        :param payee_id: The payee_id of this PayoutPayeeV3.
        :type payee_id: str
        """
        if payee_id is None:
            raise ValueError("Invalid value for `payee_id`, must not be `None`")

        self._payee_id = payee_id
