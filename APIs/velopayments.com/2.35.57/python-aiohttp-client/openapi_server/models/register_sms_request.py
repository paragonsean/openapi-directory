# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RegisterSmsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sms_number: str=None):
        """RegisterSmsRequest - a model defined in OpenAPI

        :param sms_number: The sms_number of this RegisterSmsRequest.
        """
        self.openapi_types = {
            'sms_number': str
        }

        self.attribute_map = {
            'sms_number': 'smsNumber'
        }

        self._sms_number = sms_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterSmsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterSmsRequest of this RegisterSmsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sms_number(self):
        """Gets the sms_number of this RegisterSmsRequest.

        The phone number of a device that the user can receive sms messages on 

        :return: The sms_number of this RegisterSmsRequest.
        :rtype: str
        """
        return self._sms_number

    @sms_number.setter
    def sms_number(self, sms_number):
        """Sets the sms_number of this RegisterSmsRequest.

        The phone number of a device that the user can receive sms messages on 

        :param sms_number: The sms_number of this RegisterSmsRequest.
        :type sms_number: str
        """
        if sms_number is None:
            raise ValueError("Invalid value for `sms_number`, must not be `None`")
        if sms_number is not None and not re.search(r'^\+[1-9]\d{1,14}$', sms_number):
            raise ValueError("Invalid value for `sms_number`, must be a follow pattern or equal to `/^\+[1-9]\d{1,14}$/`")

        self._sms_number = sms_number
