# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accepted_payment_v3 import AcceptedPaymentV3
from openapi_server.models.payout_schedule_v3 import PayoutScheduleV3
from openapi_server.models.quote_fx_summary_v3 import QuoteFxSummaryV3
from openapi_server.models.rejected_payment_v3 import RejectedPaymentV3
from openapi_server.models.source_account_v3 import SourceAccountV3
from openapi_server import util


class PayoutSummaryResponseV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_payments: List[AcceptedPaymentV3]=None, accounts: List[SourceAccountV3]=None, fx_summaries: List[QuoteFxSummaryV3]=None, payments_accepted: int=None, payments_rejected: int=None, payments_submitted: int=None, payments_withdrawn: int=None, payout_id: str=None, rejected_payments: List[RejectedPaymentV3]=None, schedule: PayoutScheduleV3=None, status: str=None):
        """PayoutSummaryResponseV3 - a model defined in OpenAPI

        :param accepted_payments: The accepted_payments of this PayoutSummaryResponseV3.
        :param accounts: The accounts of this PayoutSummaryResponseV3.
        :param fx_summaries: The fx_summaries of this PayoutSummaryResponseV3.
        :param payments_accepted: The payments_accepted of this PayoutSummaryResponseV3.
        :param payments_rejected: The payments_rejected of this PayoutSummaryResponseV3.
        :param payments_submitted: The payments_submitted of this PayoutSummaryResponseV3.
        :param payments_withdrawn: The payments_withdrawn of this PayoutSummaryResponseV3.
        :param payout_id: The payout_id of this PayoutSummaryResponseV3.
        :param rejected_payments: The rejected_payments of this PayoutSummaryResponseV3.
        :param schedule: The schedule of this PayoutSummaryResponseV3.
        :param status: The status of this PayoutSummaryResponseV3.
        """
        self.openapi_types = {
            'accepted_payments': List[AcceptedPaymentV3],
            'accounts': List[SourceAccountV3],
            'fx_summaries': List[QuoteFxSummaryV3],
            'payments_accepted': int,
            'payments_rejected': int,
            'payments_submitted': int,
            'payments_withdrawn': int,
            'payout_id': str,
            'rejected_payments': List[RejectedPaymentV3],
            'schedule': PayoutScheduleV3,
            'status': str
        }

        self.attribute_map = {
            'accepted_payments': 'acceptedPayments',
            'accounts': 'accounts',
            'fx_summaries': 'fxSummaries',
            'payments_accepted': 'paymentsAccepted',
            'payments_rejected': 'paymentsRejected',
            'payments_submitted': 'paymentsSubmitted',
            'payments_withdrawn': 'paymentsWithdrawn',
            'payout_id': 'payoutId',
            'rejected_payments': 'rejectedPayments',
            'schedule': 'schedule',
            'status': 'status'
        }

        self._accepted_payments = accepted_payments
        self._accounts = accounts
        self._fx_summaries = fx_summaries
        self._payments_accepted = payments_accepted
        self._payments_rejected = payments_rejected
        self._payments_submitted = payments_submitted
        self._payments_withdrawn = payments_withdrawn
        self._payout_id = payout_id
        self._rejected_payments = rejected_payments
        self._schedule = schedule
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutSummaryResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutSummaryResponseV3 of this PayoutSummaryResponseV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_payments(self):
        """Gets the accepted_payments of this PayoutSummaryResponseV3.


        :return: The accepted_payments of this PayoutSummaryResponseV3.
        :rtype: List[AcceptedPaymentV3]
        """
        return self._accepted_payments

    @accepted_payments.setter
    def accepted_payments(self, accepted_payments):
        """Sets the accepted_payments of this PayoutSummaryResponseV3.


        :param accepted_payments: The accepted_payments of this PayoutSummaryResponseV3.
        :type accepted_payments: List[AcceptedPaymentV3]
        """
        if accepted_payments is None:
            raise ValueError("Invalid value for `accepted_payments`, must not be `None`")

        self._accepted_payments = accepted_payments

    @property
    def accounts(self):
        """Gets the accounts of this PayoutSummaryResponseV3.


        :return: The accounts of this PayoutSummaryResponseV3.
        :rtype: List[SourceAccountV3]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this PayoutSummaryResponseV3.


        :param accounts: The accounts of this PayoutSummaryResponseV3.
        :type accounts: List[SourceAccountV3]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")

        self._accounts = accounts

    @property
    def fx_summaries(self):
        """Gets the fx_summaries of this PayoutSummaryResponseV3.


        :return: The fx_summaries of this PayoutSummaryResponseV3.
        :rtype: List[QuoteFxSummaryV3]
        """
        return self._fx_summaries

    @fx_summaries.setter
    def fx_summaries(self, fx_summaries):
        """Sets the fx_summaries of this PayoutSummaryResponseV3.


        :param fx_summaries: The fx_summaries of this PayoutSummaryResponseV3.
        :type fx_summaries: List[QuoteFxSummaryV3]
        """
        if fx_summaries is None:
            raise ValueError("Invalid value for `fx_summaries`, must not be `None`")

        self._fx_summaries = fx_summaries

    @property
    def payments_accepted(self):
        """Gets the payments_accepted of this PayoutSummaryResponseV3.

        The number of payments that were accepted in the payout

        :return: The payments_accepted of this PayoutSummaryResponseV3.
        :rtype: int
        """
        return self._payments_accepted

    @payments_accepted.setter
    def payments_accepted(self, payments_accepted):
        """Sets the payments_accepted of this PayoutSummaryResponseV3.

        The number of payments that were accepted in the payout

        :param payments_accepted: The payments_accepted of this PayoutSummaryResponseV3.
        :type payments_accepted: int
        """

        self._payments_accepted = payments_accepted

    @property
    def payments_rejected(self):
        """Gets the payments_rejected of this PayoutSummaryResponseV3.

        The number of payments that were rejected in the payout

        :return: The payments_rejected of this PayoutSummaryResponseV3.
        :rtype: int
        """
        return self._payments_rejected

    @payments_rejected.setter
    def payments_rejected(self, payments_rejected):
        """Sets the payments_rejected of this PayoutSummaryResponseV3.

        The number of payments that were rejected in the payout

        :param payments_rejected: The payments_rejected of this PayoutSummaryResponseV3.
        :type payments_rejected: int
        """

        self._payments_rejected = payments_rejected

    @property
    def payments_submitted(self):
        """Gets the payments_submitted of this PayoutSummaryResponseV3.

        The number of payments that were submitted in the payout

        :return: The payments_submitted of this PayoutSummaryResponseV3.
        :rtype: int
        """
        return self._payments_submitted

    @payments_submitted.setter
    def payments_submitted(self, payments_submitted):
        """Sets the payments_submitted of this PayoutSummaryResponseV3.

        The number of payments that were submitted in the payout

        :param payments_submitted: The payments_submitted of this PayoutSummaryResponseV3.
        :type payments_submitted: int
        """

        self._payments_submitted = payments_submitted

    @property
    def payments_withdrawn(self):
        """Gets the payments_withdrawn of this PayoutSummaryResponseV3.

        The number of payments that were withdrawn in the payout

        :return: The payments_withdrawn of this PayoutSummaryResponseV3.
        :rtype: int
        """
        return self._payments_withdrawn

    @payments_withdrawn.setter
    def payments_withdrawn(self, payments_withdrawn):
        """Sets the payments_withdrawn of this PayoutSummaryResponseV3.

        The number of payments that were withdrawn in the payout

        :param payments_withdrawn: The payments_withdrawn of this PayoutSummaryResponseV3.
        :type payments_withdrawn: int
        """
        if payments_withdrawn is None:
            raise ValueError("Invalid value for `payments_withdrawn`, must not be `None`")

        self._payments_withdrawn = payments_withdrawn

    @property
    def payout_id(self):
        """Gets the payout_id of this PayoutSummaryResponseV3.

        The id of the payout

        :return: The payout_id of this PayoutSummaryResponseV3.
        :rtype: str
        """
        return self._payout_id

    @payout_id.setter
    def payout_id(self, payout_id):
        """Sets the payout_id of this PayoutSummaryResponseV3.

        The id of the payout

        :param payout_id: The payout_id of this PayoutSummaryResponseV3.
        :type payout_id: str
        """

        self._payout_id = payout_id

    @property
    def rejected_payments(self):
        """Gets the rejected_payments of this PayoutSummaryResponseV3.


        :return: The rejected_payments of this PayoutSummaryResponseV3.
        :rtype: List[RejectedPaymentV3]
        """
        return self._rejected_payments

    @rejected_payments.setter
    def rejected_payments(self, rejected_payments):
        """Sets the rejected_payments of this PayoutSummaryResponseV3.


        :param rejected_payments: The rejected_payments of this PayoutSummaryResponseV3.
        :type rejected_payments: List[RejectedPaymentV3]
        """
        if rejected_payments is None:
            raise ValueError("Invalid value for `rejected_payments`, must not be `None`")

        self._rejected_payments = rejected_payments

    @property
    def schedule(self):
        """Gets the schedule of this PayoutSummaryResponseV3.


        :return: The schedule of this PayoutSummaryResponseV3.
        :rtype: PayoutScheduleV3
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PayoutSummaryResponseV3.


        :param schedule: The schedule of this PayoutSummaryResponseV3.
        :type schedule: PayoutScheduleV3
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this PayoutSummaryResponseV3.

        The status of the payout (one of SUBMITTED, ACCEPTED, REJECTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, WITHDRAWN)

        :return: The status of this PayoutSummaryResponseV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayoutSummaryResponseV3.

        The status of the payout (one of SUBMITTED, ACCEPTED, REJECTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, WITHDRAWN)

        :param status: The status of this PayoutSummaryResponseV3.
        :type status: str
        """

        self._status = status
