# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FundingAccountResponseV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, archived: bool=None, country: str=None, currency: str=None, id: str=None, name: str=None, payor_id: str=None, routing_number: str=None, type: str=None):
        """FundingAccountResponseV2 - a model defined in OpenAPI

        :param account_name: The account_name of this FundingAccountResponseV2.
        :param account_number: The account_number of this FundingAccountResponseV2.
        :param archived: The archived of this FundingAccountResponseV2.
        :param country: The country of this FundingAccountResponseV2.
        :param currency: The currency of this FundingAccountResponseV2.
        :param id: The id of this FundingAccountResponseV2.
        :param name: The name of this FundingAccountResponseV2.
        :param payor_id: The payor_id of this FundingAccountResponseV2.
        :param routing_number: The routing_number of this FundingAccountResponseV2.
        :param type: The type of this FundingAccountResponseV2.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'archived': bool,
            'country': str,
            'currency': str,
            'id': str,
            'name': str,
            'payor_id': str,
            'routing_number': str,
            'type': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'archived': 'archived',
            'country': 'country',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'payor_id': 'payorId',
            'routing_number': 'routingNumber',
            'type': 'type'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._archived = archived
        self._country = country
        self._currency = currency
        self._id = id
        self._name = name
        self._payor_id = payor_id
        self._routing_number = routing_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundingAccountResponseV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundingAccountResponseV2 of this FundingAccountResponseV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this FundingAccountResponseV2.

        name on the bank account

        :return: The account_name of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this FundingAccountResponseV2.

        name on the bank account

        :param account_name: The account_name of this FundingAccountResponseV2.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this FundingAccountResponseV2.

        bank account number

        :return: The account_number of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this FundingAccountResponseV2.

        bank account number

        :param account_number: The account_number of this FundingAccountResponseV2.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def archived(self):
        """Gets the archived of this FundingAccountResponseV2.

        A flag for whether the funding account has been archived.  Only present in the response if true.

        :return: The archived of this FundingAccountResponseV2.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this FundingAccountResponseV2.

        A flag for whether the funding account has been archived.  Only present in the response if true.

        :param archived: The archived of this FundingAccountResponseV2.
        :type archived: bool
        """

        self._archived = archived

    @property
    def country(self):
        """Gets the country of this FundingAccountResponseV2.

        ISO 3166-1 2 letter country code (upper case)

        :return: The country of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FundingAccountResponseV2.

        ISO 3166-1 2 letter country code (upper case)

        :param country: The country of this FundingAccountResponseV2.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this FundingAccountResponseV2.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :return: The currency of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FundingAccountResponseV2.

        Valid ISO 4217 3 letter currency code. See the <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" target=\"_blank\" a>ISO specification</a> for details.

        :param currency: The currency of this FundingAccountResponseV2.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this FundingAccountResponseV2.

        Funding Account Id

        :return: The id of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundingAccountResponseV2.

        Funding Account Id

        :param id: The id of this FundingAccountResponseV2.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FundingAccountResponseV2.

        name of funding account

        :return: The name of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FundingAccountResponseV2.

        name of funding account

        :param name: The name of this FundingAccountResponseV2.
        :type name: str
        """

        self._name = name

    @property
    def payor_id(self):
        """Gets the payor_id of this FundingAccountResponseV2.


        :return: The payor_id of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._payor_id

    @payor_id.setter
    def payor_id(self, payor_id):
        """Sets the payor_id of this FundingAccountResponseV2.


        :param payor_id: The payor_id of this FundingAccountResponseV2.
        :type payor_id: str
        """

        self._payor_id = payor_id

    @property
    def routing_number(self):
        """Gets the routing_number of this FundingAccountResponseV2.

        bank account routing number

        :return: The routing_number of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this FundingAccountResponseV2.

        bank account routing number

        :param routing_number: The routing_number of this FundingAccountResponseV2.
        :type routing_number: str
        """

        self._routing_number = routing_number

    @property
    def type(self):
        """Gets the type of this FundingAccountResponseV2.

        Funding account type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE

        :return: The type of this FundingAccountResponseV2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FundingAccountResponseV2.

        Funding account type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE

        :param type: The type of this FundingAccountResponseV2.
        :type type: str
        """

        self._type = type
