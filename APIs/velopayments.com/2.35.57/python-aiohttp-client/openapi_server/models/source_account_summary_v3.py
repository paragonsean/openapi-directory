# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceAccountSummaryV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, source_account_id: str=None, total_cost: int=None):
        """SourceAccountSummaryV3 - a model defined in OpenAPI

        :param currency: The currency of this SourceAccountSummaryV3.
        :param source_account_id: The source_account_id of this SourceAccountSummaryV3.
        :param total_cost: The total_cost of this SourceAccountSummaryV3.
        """
        self.openapi_types = {
            'currency': str,
            'source_account_id': str,
            'total_cost': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'source_account_id': 'sourceAccountId',
            'total_cost': 'totalCost'
        }

        self._currency = currency
        self._source_account_id = source_account_id
        self._total_cost = total_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceAccountSummaryV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceAccountSummaryV3 of this SourceAccountSummaryV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this SourceAccountSummaryV3.

        ISO 3 character currency code

        :return: The currency of this SourceAccountSummaryV3.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SourceAccountSummaryV3.

        ISO 3 character currency code

        :param currency: The currency of this SourceAccountSummaryV3.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def source_account_id(self):
        """Gets the source_account_id of this SourceAccountSummaryV3.


        :return: The source_account_id of this SourceAccountSummaryV3.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this SourceAccountSummaryV3.


        :param source_account_id: The source_account_id of this SourceAccountSummaryV3.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")

        self._source_account_id = source_account_id

    @property
    def total_cost(self):
        """Gets the total_cost of this SourceAccountSummaryV3.


        :return: The total_cost of this SourceAccountSummaryV3.
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this SourceAccountSummaryV3.


        :param total_cost: The total_cost of this SourceAccountSummaryV3.
        :type total_cost: int
        """
        if total_cost is None:
            raise ValueError("Invalid value for `total_cost`, must not be `None`")

        self._total_cost = total_cost
