# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class InviteUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, entity_id: str=None, first_name: str=None, last_name: str=None, mfa_type: str=None, primary_contact_number: str=None, roles: List[str]=None, secondary_contact_number: str=None, sms_number: str=None, user_type: str=None, verification_code: str=None):
        """InviteUserRequest - a model defined in OpenAPI

        :param email: The email of this InviteUserRequest.
        :param entity_id: The entity_id of this InviteUserRequest.
        :param first_name: The first_name of this InviteUserRequest.
        :param last_name: The last_name of this InviteUserRequest.
        :param mfa_type: The mfa_type of this InviteUserRequest.
        :param primary_contact_number: The primary_contact_number of this InviteUserRequest.
        :param roles: The roles of this InviteUserRequest.
        :param secondary_contact_number: The secondary_contact_number of this InviteUserRequest.
        :param sms_number: The sms_number of this InviteUserRequest.
        :param user_type: The user_type of this InviteUserRequest.
        :param verification_code: The verification_code of this InviteUserRequest.
        """
        self.openapi_types = {
            'email': str,
            'entity_id': str,
            'first_name': str,
            'last_name': str,
            'mfa_type': str,
            'primary_contact_number': str,
            'roles': List[str],
            'secondary_contact_number': str,
            'sms_number': str,
            'user_type': str,
            'verification_code': str
        }

        self.attribute_map = {
            'email': 'email',
            'entity_id': 'entityId',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'mfa_type': 'mfaType',
            'primary_contact_number': 'primaryContactNumber',
            'roles': 'roles',
            'secondary_contact_number': 'secondaryContactNumber',
            'sms_number': 'smsNumber',
            'user_type': 'userType',
            'verification_code': 'verificationCode'
        }

        self._email = email
        self._entity_id = entity_id
        self._first_name = first_name
        self._last_name = last_name
        self._mfa_type = mfa_type
        self._primary_contact_number = primary_contact_number
        self._roles = roles
        self._secondary_contact_number = secondary_contact_number
        self._sms_number = sms_number
        self._user_type = user_type
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InviteUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InviteUserRequest of this InviteUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this InviteUserRequest.

        the email address of the invited user

        :return: The email of this InviteUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InviteUserRequest.

        the email address of the invited user

        :param email: The email of this InviteUserRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def entity_id(self):
        """Gets the entity_id of this InviteUserRequest.

        The payorId or payeeId or null if the user is a backoffice admin 

        :return: The entity_id of this InviteUserRequest.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this InviteUserRequest.

        The payorId or payeeId or null if the user is a backoffice admin 

        :param entity_id: The entity_id of this InviteUserRequest.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def first_name(self):
        """Gets the first_name of this InviteUserRequest.


        :return: The first_name of this InviteUserRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InviteUserRequest.


        :param first_name: The first_name of this InviteUserRequest.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 128:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `128`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InviteUserRequest.


        :return: The last_name of this InviteUserRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InviteUserRequest.


        :param last_name: The last_name of this InviteUserRequest.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 128:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `128`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def mfa_type(self):
        """Gets the mfa_type of this InviteUserRequest.

        <p>The MFA type that the user will use</p> <p>The type may be conditional on the role(s) the user has</p> 

        :return: The mfa_type of this InviteUserRequest.
        :rtype: str
        """
        return self._mfa_type

    @mfa_type.setter
    def mfa_type(self, mfa_type):
        """Sets the mfa_type of this InviteUserRequest.

        <p>The MFA type that the user will use</p> <p>The type may be conditional on the role(s) the user has</p> 

        :param mfa_type: The mfa_type of this InviteUserRequest.
        :type mfa_type: str
        """
        allowed_values = ["SMS", "YUBIKEY", "TOTP"]  # noqa: E501
        if mfa_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mfa_type` ({0}), must be one of {1}"
                .format(mfa_type, allowed_values)
            )

        self._mfa_type = mfa_type

    @property
    def primary_contact_number(self):
        """Gets the primary_contact_number of this InviteUserRequest.

        The main contact number for the user 

        :return: The primary_contact_number of this InviteUserRequest.
        :rtype: str
        """
        return self._primary_contact_number

    @primary_contact_number.setter
    def primary_contact_number(self, primary_contact_number):
        """Sets the primary_contact_number of this InviteUserRequest.

        The main contact number for the user 

        :param primary_contact_number: The primary_contact_number of this InviteUserRequest.
        :type primary_contact_number: str
        """
        if primary_contact_number is None:
            raise ValueError("Invalid value for `primary_contact_number`, must not be `None`")
        if primary_contact_number is not None and not re.search(r'^\+[1-9]\d{1,14}$', primary_contact_number):
            raise ValueError("Invalid value for `primary_contact_number`, must be a follow pattern or equal to `/^\+[1-9]\d{1,14}$/`")

        self._primary_contact_number = primary_contact_number

    @property
    def roles(self):
        """Gets the roles of this InviteUserRequest.

        The role(s) for the user The role must exist The role can be a custom role or a system role but the invoker must have the permissions to assign the role System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support 

        :return: The roles of this InviteUserRequest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InviteUserRequest.

        The role(s) for the user The role must exist The role can be a custom role or a system role but the invoker must have the permissions to assign the role System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support 

        :param roles: The roles of this InviteUserRequest.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def secondary_contact_number(self):
        """Gets the secondary_contact_number of this InviteUserRequest.

        The secondary contact number for the user 

        :return: The secondary_contact_number of this InviteUserRequest.
        :rtype: str
        """
        return self._secondary_contact_number

    @secondary_contact_number.setter
    def secondary_contact_number(self, secondary_contact_number):
        """Sets the secondary_contact_number of this InviteUserRequest.

        The secondary contact number for the user 

        :param secondary_contact_number: The secondary_contact_number of this InviteUserRequest.
        :type secondary_contact_number: str
        """
        if secondary_contact_number is not None and not re.search(r'^\+[1-9]\d{1,14}$', secondary_contact_number):
            raise ValueError("Invalid value for `secondary_contact_number`, must be a follow pattern or equal to `/^\+[1-9]\d{1,14}$/`")

        self._secondary_contact_number = secondary_contact_number

    @property
    def sms_number(self):
        """Gets the sms_number of this InviteUserRequest.

        The phone number of a device that the user can receive sms messages on 

        :return: The sms_number of this InviteUserRequest.
        :rtype: str
        """
        return self._sms_number

    @sms_number.setter
    def sms_number(self, sms_number):
        """Sets the sms_number of this InviteUserRequest.

        The phone number of a device that the user can receive sms messages on 

        :param sms_number: The sms_number of this InviteUserRequest.
        :type sms_number: str
        """
        if sms_number is None:
            raise ValueError("Invalid value for `sms_number`, must not be `None`")
        if sms_number is not None and not re.search(r'^\+[1-9]\d{1,14}$', sms_number):
            raise ValueError("Invalid value for `sms_number`, must be a follow pattern or equal to `/^\+[1-9]\d{1,14}$/`")

        self._sms_number = sms_number

    @property
    def user_type(self):
        """Gets the user_type of this InviteUserRequest.

        Will default to PAYOR if not provided but entityId is provided

        :return: The user_type of this InviteUserRequest.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this InviteUserRequest.

        Will default to PAYOR if not provided but entityId is provided

        :param user_type: The user_type of this InviteUserRequest.
        :type user_type: str
        """
        allowed_values = ["BACKOFFICE", "PAYOR", "PAYEE"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def verification_code(self):
        """Gets the verification_code of this InviteUserRequest.

        Optional property that MUST be suppied when manually verifying a user The user's smsNumber is registered via a separate endpoint and an OTP sent to them 

        :return: The verification_code of this InviteUserRequest.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this InviteUserRequest.

        Optional property that MUST be suppied when manually verifying a user The user's smsNumber is registered via a separate endpoint and an OTP sent to them 

        :param verification_code: The verification_code of this InviteUserRequest.
        :type verification_code: str
        """
        if verification_code is not None and len(verification_code) > 6:
            raise ValueError("Invalid value for `verification_code`, length must be less than or equal to `6`")
        if verification_code is not None and len(verification_code) < 6:
            raise ValueError("Invalid value for `verification_code`, length must be greater than or equal to `6`")

        self._verification_code = verification_code
