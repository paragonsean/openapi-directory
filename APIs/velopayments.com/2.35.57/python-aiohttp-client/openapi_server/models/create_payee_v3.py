# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.challenge_v3 import ChallengeV3
from openapi_server.models.company_v3 import CompanyV3
from openapi_server.models.create_individual_v3 import CreateIndividualV3
from openapi_server.models.create_payee_address_v3 import CreatePayeeAddressV3
from openapi_server.models.create_payment_channel_v3 import CreatePaymentChannelV3
from openapi_server.models.payee_payor_ref_v3 import PayeePayorRefV3
from openapi_server import util


class CreatePayeeV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: CreatePayeeAddressV3=None, challenge: ChallengeV3=None, company: CompanyV3=None, email: str=None, individual: CreateIndividualV3=None, language: str=None, payee_id: str=None, payment_channel: CreatePaymentChannelV3=None, payor_refs: List[PayeePayorRefV3]=None, remote_id: str=None, type: str=None):
        """CreatePayeeV3 - a model defined in OpenAPI

        :param address: The address of this CreatePayeeV3.
        :param challenge: The challenge of this CreatePayeeV3.
        :param company: The company of this CreatePayeeV3.
        :param email: The email of this CreatePayeeV3.
        :param individual: The individual of this CreatePayeeV3.
        :param language: The language of this CreatePayeeV3.
        :param payee_id: The payee_id of this CreatePayeeV3.
        :param payment_channel: The payment_channel of this CreatePayeeV3.
        :param payor_refs: The payor_refs of this CreatePayeeV3.
        :param remote_id: The remote_id of this CreatePayeeV3.
        :param type: The type of this CreatePayeeV3.
        """
        self.openapi_types = {
            'address': CreatePayeeAddressV3,
            'challenge': ChallengeV3,
            'company': CompanyV3,
            'email': str,
            'individual': CreateIndividualV3,
            'language': str,
            'payee_id': str,
            'payment_channel': CreatePaymentChannelV3,
            'payor_refs': List[PayeePayorRefV3],
            'remote_id': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'challenge': 'challenge',
            'company': 'company',
            'email': 'email',
            'individual': 'individual',
            'language': 'language',
            'payee_id': 'payeeId',
            'payment_channel': 'paymentChannel',
            'payor_refs': 'payorRefs',
            'remote_id': 'remoteId',
            'type': 'type'
        }

        self._address = address
        self._challenge = challenge
        self._company = company
        self._email = email
        self._individual = individual
        self._language = language
        self._payee_id = payee_id
        self._payment_channel = payment_channel
        self._payor_refs = payor_refs
        self._remote_id = remote_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePayeeV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePayeeV3 of this CreatePayeeV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CreatePayeeV3.


        :return: The address of this CreatePayeeV3.
        :rtype: CreatePayeeAddressV3
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreatePayeeV3.


        :param address: The address of this CreatePayeeV3.
        :type address: CreatePayeeAddressV3
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def challenge(self):
        """Gets the challenge of this CreatePayeeV3.


        :return: The challenge of this CreatePayeeV3.
        :rtype: ChallengeV3
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this CreatePayeeV3.


        :param challenge: The challenge of this CreatePayeeV3.
        :type challenge: ChallengeV3
        """

        self._challenge = challenge

    @property
    def company(self):
        """Gets the company of this CreatePayeeV3.


        :return: The company of this CreatePayeeV3.
        :rtype: CompanyV3
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CreatePayeeV3.


        :param company: The company of this CreatePayeeV3.
        :type company: CompanyV3
        """

        self._company = company

    @property
    def email(self):
        """Gets the email of this CreatePayeeV3.


        :return: The email of this CreatePayeeV3.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreatePayeeV3.


        :param email: The email of this CreatePayeeV3.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")

        self._email = email

    @property
    def individual(self):
        """Gets the individual of this CreatePayeeV3.


        :return: The individual of this CreatePayeeV3.
        :rtype: CreateIndividualV3
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this CreatePayeeV3.


        :param individual: The individual of this CreatePayeeV3.
        :type individual: CreateIndividualV3
        """

        self._individual = individual

    @property
    def language(self):
        """Gets the language of this CreatePayeeV3.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :return: The language of this CreatePayeeV3.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CreatePayeeV3.

        An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR> See the /v1/supportedLanguages endpoint to list the available codes for an environment. 

        :param language: The language of this CreatePayeeV3.
        :type language: str
        """

        self._language = language

    @property
    def payee_id(self):
        """Gets the payee_id of this CreatePayeeV3.


        :return: The payee_id of this CreatePayeeV3.
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this CreatePayeeV3.


        :param payee_id: The payee_id of this CreatePayeeV3.
        :type payee_id: str
        """

        self._payee_id = payee_id

    @property
    def payment_channel(self):
        """Gets the payment_channel of this CreatePayeeV3.


        :return: The payment_channel of this CreatePayeeV3.
        :rtype: CreatePaymentChannelV3
        """
        return self._payment_channel

    @payment_channel.setter
    def payment_channel(self, payment_channel):
        """Sets the payment_channel of this CreatePayeeV3.


        :param payment_channel: The payment_channel of this CreatePayeeV3.
        :type payment_channel: CreatePaymentChannelV3
        """

        self._payment_channel = payment_channel

    @property
    def payor_refs(self):
        """Gets the payor_refs of this CreatePayeeV3.


        :return: The payor_refs of this CreatePayeeV3.
        :rtype: List[PayeePayorRefV3]
        """
        return self._payor_refs

    @payor_refs.setter
    def payor_refs(self, payor_refs):
        """Sets the payor_refs of this CreatePayeeV3.


        :param payor_refs: The payor_refs of this CreatePayeeV3.
        :type payor_refs: List[PayeePayorRefV3]
        """

        self._payor_refs = payor_refs

    @property
    def remote_id(self):
        """Gets the remote_id of this CreatePayeeV3.


        :return: The remote_id of this CreatePayeeV3.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this CreatePayeeV3.


        :param remote_id: The remote_id of this CreatePayeeV3.
        :type remote_id: str
        """
        if remote_id is None:
            raise ValueError("Invalid value for `remote_id`, must not be `None`")
        if remote_id is not None and len(remote_id) > 100:
            raise ValueError("Invalid value for `remote_id`, length must be less than or equal to `100`")
        if remote_id is not None and len(remote_id) < 1:
            raise ValueError("Invalid value for `remote_id`, length must be greater than or equal to `1`")

        self._remote_id = remote_id

    @property
    def type(self):
        """Gets the type of this CreatePayeeV3.

        Type of Payee. One of the following values: Individual, Company

        :return: The type of this CreatePayeeV3.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePayeeV3.

        Type of Payee. One of the following values: Individual, Company

        :param type: The type of this CreatePayeeV3.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
