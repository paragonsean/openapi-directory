# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentEventResponseV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, event_date_time: datetime=None, event_id: str=None, event_type: str=None, iban: str=None, payment_amount: int=None, payment_currency: str=None, principal: str=None, routing_number: str=None, source_amount: int=None, source_currency: str=None):
        """PaymentEventResponseV3 - a model defined in OpenAPI

        :param account_name: The account_name of this PaymentEventResponseV3.
        :param account_number: The account_number of this PaymentEventResponseV3.
        :param event_date_time: The event_date_time of this PaymentEventResponseV3.
        :param event_id: The event_id of this PaymentEventResponseV3.
        :param event_type: The event_type of this PaymentEventResponseV3.
        :param iban: The iban of this PaymentEventResponseV3.
        :param payment_amount: The payment_amount of this PaymentEventResponseV3.
        :param payment_currency: The payment_currency of this PaymentEventResponseV3.
        :param principal: The principal of this PaymentEventResponseV3.
        :param routing_number: The routing_number of this PaymentEventResponseV3.
        :param source_amount: The source_amount of this PaymentEventResponseV3.
        :param source_currency: The source_currency of this PaymentEventResponseV3.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'event_date_time': datetime,
            'event_id': str,
            'event_type': str,
            'iban': str,
            'payment_amount': int,
            'payment_currency': str,
            'principal': str,
            'routing_number': str,
            'source_amount': int,
            'source_currency': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'event_date_time': 'eventDateTime',
            'event_id': 'eventId',
            'event_type': 'eventType',
            'iban': 'iban',
            'payment_amount': 'paymentAmount',
            'payment_currency': 'paymentCurrency',
            'principal': 'principal',
            'routing_number': 'routingNumber',
            'source_amount': 'sourceAmount',
            'source_currency': 'sourceCurrency'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._event_date_time = event_date_time
        self._event_id = event_id
        self._event_type = event_type
        self._iban = iban
        self._payment_amount = payment_amount
        self._payment_currency = payment_currency
        self._principal = principal
        self._routing_number = routing_number
        self._source_amount = source_amount
        self._source_currency = source_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentEventResponseV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentEventResponseV3 of this PaymentEventResponseV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this PaymentEventResponseV3.


        :return: The account_name of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this PaymentEventResponseV3.


        :param account_name: The account_name of this PaymentEventResponseV3.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this PaymentEventResponseV3.

        The account number attached to the event.

        :return: The account_number of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PaymentEventResponseV3.

        The account number attached to the event.

        :param account_number: The account_number of this PaymentEventResponseV3.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def event_date_time(self):
        """Gets the event_date_time of this PaymentEventResponseV3.

        The date/time at which the event occurred.

        :return: The event_date_time of this PaymentEventResponseV3.
        :rtype: datetime
        """
        return self._event_date_time

    @event_date_time.setter
    def event_date_time(self, event_date_time):
        """Sets the event_date_time of this PaymentEventResponseV3.

        The date/time at which the event occurred.

        :param event_date_time: The event_date_time of this PaymentEventResponseV3.
        :type event_date_time: datetime
        """
        if event_date_time is None:
            raise ValueError("Invalid value for `event_date_time`, must not be `None`")

        self._event_date_time = event_date_time

    @property
    def event_id(self):
        """Gets the event_id of this PaymentEventResponseV3.

        The id of the event.

        :return: The event_id of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PaymentEventResponseV3.

        The id of the event.

        :param event_id: The event_id of this PaymentEventResponseV3.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this PaymentEventResponseV3.

        The type of the event. One of the following values: PAYOUT_SUBMITTED, PAYOUT_COMPLETED, PAYOUT_INSTRUCTED_V3, BANK_PAYMENT_REQUESTED, SOURCE_AMOUNT_CONFIRMED, PAYMENT_SUBMITTED, PAYMENT_SUBMITTED_ACCEPTED, PAYMENT_SUBMITTED_REJECTED, PAYMENT_CONFIRMED, PAYMENT_AWAITING_FUNDS, PAYMENT_FUNDED, PAYMENT_UNFUNDED, PAYMENT_FAILED, ACH_SUBMITTED_TO_ODFI, PAYMENT_ACCEPTED_BY_RAILS, ACH_RETURN_RECEIVED, RETURN_PAYMENT_FUNDING_REQUESTED, PAYOUT_BATCH_EXECUTED, PAYOUT_BATCH_QUOTE_EXPIRED, PAYOUT_BATCH_FUNDED, PAYOUT_BATCH_FUNDS_RETURN_REQUEST, PAYOUT_BATCH_FUNDS_RETURNED, PAYOUT_FUNDS_REQUEST, PAYOUT_FUNDS_GRANTED, PAYOUT_FUNDS_DENIED, PAYOUT_BATCH_QUOTED, PAYOUT_QUOTED, ACH_PAYMENT_RETURN_CANCELLED, RETURN_PAYMENT_CANCELLATION_REQUESTED, PAYOUT_WITHDRAWN

        :return: The event_type of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PaymentEventResponseV3.

        The type of the event. One of the following values: PAYOUT_SUBMITTED, PAYOUT_COMPLETED, PAYOUT_INSTRUCTED_V3, BANK_PAYMENT_REQUESTED, SOURCE_AMOUNT_CONFIRMED, PAYMENT_SUBMITTED, PAYMENT_SUBMITTED_ACCEPTED, PAYMENT_SUBMITTED_REJECTED, PAYMENT_CONFIRMED, PAYMENT_AWAITING_FUNDS, PAYMENT_FUNDED, PAYMENT_UNFUNDED, PAYMENT_FAILED, ACH_SUBMITTED_TO_ODFI, PAYMENT_ACCEPTED_BY_RAILS, ACH_RETURN_RECEIVED, RETURN_PAYMENT_FUNDING_REQUESTED, PAYOUT_BATCH_EXECUTED, PAYOUT_BATCH_QUOTE_EXPIRED, PAYOUT_BATCH_FUNDED, PAYOUT_BATCH_FUNDS_RETURN_REQUEST, PAYOUT_BATCH_FUNDS_RETURNED, PAYOUT_FUNDS_REQUEST, PAYOUT_FUNDS_GRANTED, PAYOUT_FUNDS_DENIED, PAYOUT_BATCH_QUOTED, PAYOUT_QUOTED, ACH_PAYMENT_RETURN_CANCELLED, RETURN_PAYMENT_CANCELLATION_REQUESTED, PAYOUT_WITHDRAWN

        :param event_type: The event_type of this PaymentEventResponseV3.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def iban(self):
        """Gets the iban of this PaymentEventResponseV3.


        :return: The iban of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PaymentEventResponseV3.


        :param iban: The iban of this PaymentEventResponseV3.
        :type iban: str
        """

        self._iban = iban

    @property
    def payment_amount(self):
        """Gets the payment_amount of this PaymentEventResponseV3.

        The destination amount exposed by the event.

        :return: The payment_amount of this PaymentEventResponseV3.
        :rtype: int
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this PaymentEventResponseV3.

        The destination amount exposed by the event.

        :param payment_amount: The payment_amount of this PaymentEventResponseV3.
        :type payment_amount: int
        """

        self._payment_amount = payment_amount

    @property
    def payment_currency(self):
        """Gets the payment_currency of this PaymentEventResponseV3.

        ISO 3 character currency code

        :return: The payment_currency of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this PaymentEventResponseV3.

        ISO 3 character currency code

        :param payment_currency: The payment_currency of this PaymentEventResponseV3.
        :type payment_currency: str
        """
        if payment_currency is not None and len(payment_currency) > 3:
            raise ValueError("Invalid value for `payment_currency`, length must be less than or equal to `3`")
        if payment_currency is not None and len(payment_currency) < 3:
            raise ValueError("Invalid value for `payment_currency`, length must be greater than or equal to `3`")

        self._payment_currency = payment_currency

    @property
    def principal(self):
        """Gets the principal of this PaymentEventResponseV3.


        :return: The principal of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PaymentEventResponseV3.


        :param principal: The principal of this PaymentEventResponseV3.
        :type principal: str
        """

        self._principal = principal

    @property
    def routing_number(self):
        """Gets the routing_number of this PaymentEventResponseV3.

        The routing number attached to the event.

        :return: The routing_number of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PaymentEventResponseV3.

        The routing number attached to the event.

        :param routing_number: The routing_number of this PaymentEventResponseV3.
        :type routing_number: str
        """

        self._routing_number = routing_number

    @property
    def source_amount(self):
        """Gets the source_amount of this PaymentEventResponseV3.

        The source amount exposed by the event.

        :return: The source_amount of this PaymentEventResponseV3.
        :rtype: int
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """Sets the source_amount of this PaymentEventResponseV3.

        The source amount exposed by the event.

        :param source_amount: The source_amount of this PaymentEventResponseV3.
        :type source_amount: int
        """

        self._source_amount = source_amount

    @property
    def source_currency(self):
        """Gets the source_currency of this PaymentEventResponseV3.

        ISO 3 character currency code

        :return: The source_currency of this PaymentEventResponseV3.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this PaymentEventResponseV3.

        ISO 3 character currency code

        :param source_currency: The source_currency of this PaymentEventResponseV3.
        :type source_currency: str
        """
        if source_currency is not None and len(source_currency) > 3:
            raise ValueError("Invalid value for `source_currency`, length must be less than or equal to `3`")
        if source_currency is not None and len(source_currency) < 3:
            raise ValueError("Invalid value for `source_currency`, length must be greater than or equal to `3`")

        self._source_currency = source_currency
