/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayeeDetailResponseV4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayeeDetailResponseV4::OAIPayeeDetailResponseV4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayeeDetailResponseV4::OAIPayeeDetailResponseV4() {
    this->initializeModel();
}

OAIPayeeDetailResponseV4::~OAIPayeeDetailResponseV4() {}

void OAIPayeeDetailResponseV4::initializeModel() {

    m_accept_terms_and_conditions_timestamp_isSet = false;
    m_accept_terms_and_conditions_timestamp_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_cellphone_number_isSet = false;
    m_cellphone_number_isValid = false;

    m_challenge_isSet = false;
    m_challenge_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_disabled_comment_isSet = false;
    m_disabled_comment_isValid = false;

    m_disabled_updated_timestamp_isSet = false;
    m_disabled_updated_timestamp_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_enhanced_kyc_completed_isSet = false;
    m_enhanced_kyc_completed_isValid = false;

    m_grace_period_end_date_isSet = false;
    m_grace_period_end_date_isValid = false;

    m_individual_isSet = false;
    m_individual_isValid = false;

    m_kyc_completed_timestamp_isSet = false;
    m_kyc_completed_timestamp_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_marketing_opt_in_decision_isSet = false;
    m_marketing_opt_in_decision_isValid = false;

    m_marketing_opt_in_timestamp_isSet = false;
    m_marketing_opt_in_timestamp_isValid = false;

    m_onboarded_status_isSet = false;
    m_onboarded_status_isValid = false;

    m_pause_payment_isSet = false;
    m_pause_payment_isValid = false;

    m_pause_payment_timestamp_isSet = false;
    m_pause_payment_timestamp_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_payee_type_isSet = false;
    m_payee_type_isValid = false;

    m_payor_refs_isSet = false;
    m_payor_refs_isValid = false;

    m_watchlist_override_comment_isSet = false;
    m_watchlist_override_comment_isValid = false;

    m_watchlist_override_expires_at_timestamp_isSet = false;
    m_watchlist_override_expires_at_timestamp_isValid = false;

    m_watchlist_status_isSet = false;
    m_watchlist_status_isValid = false;

    m_watchlist_status_updated_timestamp_isSet = false;
    m_watchlist_status_updated_timestamp_isValid = false;
}

void OAIPayeeDetailResponseV4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayeeDetailResponseV4::fromJsonObject(QJsonObject json) {

    m_accept_terms_and_conditions_timestamp_isValid = ::OpenAPI::fromJsonValue(m_accept_terms_and_conditions_timestamp, json[QString("acceptTermsAndConditionsTimestamp")]);
    m_accept_terms_and_conditions_timestamp_isSet = !json[QString("acceptTermsAndConditionsTimestamp")].isNull() && m_accept_terms_and_conditions_timestamp_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_cellphone_number_isValid = ::OpenAPI::fromJsonValue(m_cellphone_number, json[QString("cellphoneNumber")]);
    m_cellphone_number_isSet = !json[QString("cellphoneNumber")].isNull() && m_cellphone_number_isValid;

    m_challenge_isValid = ::OpenAPI::fromJsonValue(m_challenge, json[QString("challenge")]);
    m_challenge_isSet = !json[QString("challenge")].isNull() && m_challenge_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_disabled_comment_isValid = ::OpenAPI::fromJsonValue(m_disabled_comment, json[QString("disabledComment")]);
    m_disabled_comment_isSet = !json[QString("disabledComment")].isNull() && m_disabled_comment_isValid;

    m_disabled_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_disabled_updated_timestamp, json[QString("disabledUpdatedTimestamp")]);
    m_disabled_updated_timestamp_isSet = !json[QString("disabledUpdatedTimestamp")].isNull() && m_disabled_updated_timestamp_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_enhanced_kyc_completed_isValid = ::OpenAPI::fromJsonValue(m_enhanced_kyc_completed, json[QString("enhancedKycCompleted")]);
    m_enhanced_kyc_completed_isSet = !json[QString("enhancedKycCompleted")].isNull() && m_enhanced_kyc_completed_isValid;

    m_grace_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_grace_period_end_date, json[QString("gracePeriodEndDate")]);
    m_grace_period_end_date_isSet = !json[QString("gracePeriodEndDate")].isNull() && m_grace_period_end_date_isValid;

    m_individual_isValid = ::OpenAPI::fromJsonValue(m_individual, json[QString("individual")]);
    m_individual_isSet = !json[QString("individual")].isNull() && m_individual_isValid;

    m_kyc_completed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_kyc_completed_timestamp, json[QString("kycCompletedTimestamp")]);
    m_kyc_completed_timestamp_isSet = !json[QString("kycCompletedTimestamp")].isNull() && m_kyc_completed_timestamp_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_marketing_opt_in_decision_isValid = ::OpenAPI::fromJsonValue(m_marketing_opt_in_decision, json[QString("marketingOptInDecision")]);
    m_marketing_opt_in_decision_isSet = !json[QString("marketingOptInDecision")].isNull() && m_marketing_opt_in_decision_isValid;

    m_marketing_opt_in_timestamp_isValid = ::OpenAPI::fromJsonValue(m_marketing_opt_in_timestamp, json[QString("marketingOptInTimestamp")]);
    m_marketing_opt_in_timestamp_isSet = !json[QString("marketingOptInTimestamp")].isNull() && m_marketing_opt_in_timestamp_isValid;

    m_onboarded_status_isValid = ::OpenAPI::fromJsonValue(m_onboarded_status, json[QString("onboardedStatus")]);
    m_onboarded_status_isSet = !json[QString("onboardedStatus")].isNull() && m_onboarded_status_isValid;

    m_pause_payment_isValid = ::OpenAPI::fromJsonValue(m_pause_payment, json[QString("pausePayment")]);
    m_pause_payment_isSet = !json[QString("pausePayment")].isNull() && m_pause_payment_isValid;

    m_pause_payment_timestamp_isValid = ::OpenAPI::fromJsonValue(m_pause_payment_timestamp, json[QString("pausePaymentTimestamp")]);
    m_pause_payment_timestamp_isSet = !json[QString("pausePaymentTimestamp")].isNull() && m_pause_payment_timestamp_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payeeId")]);
    m_payee_id_isSet = !json[QString("payeeId")].isNull() && m_payee_id_isValid;

    m_payee_type_isValid = ::OpenAPI::fromJsonValue(m_payee_type, json[QString("payeeType")]);
    m_payee_type_isSet = !json[QString("payeeType")].isNull() && m_payee_type_isValid;

    m_payor_refs_isValid = ::OpenAPI::fromJsonValue(m_payor_refs, json[QString("payorRefs")]);
    m_payor_refs_isSet = !json[QString("payorRefs")].isNull() && m_payor_refs_isValid;

    m_watchlist_override_comment_isValid = ::OpenAPI::fromJsonValue(m_watchlist_override_comment, json[QString("watchlistOverrideComment")]);
    m_watchlist_override_comment_isSet = !json[QString("watchlistOverrideComment")].isNull() && m_watchlist_override_comment_isValid;

    m_watchlist_override_expires_at_timestamp_isValid = ::OpenAPI::fromJsonValue(m_watchlist_override_expires_at_timestamp, json[QString("watchlistOverrideExpiresAtTimestamp")]);
    m_watchlist_override_expires_at_timestamp_isSet = !json[QString("watchlistOverrideExpiresAtTimestamp")].isNull() && m_watchlist_override_expires_at_timestamp_isValid;

    m_watchlist_status_isValid = ::OpenAPI::fromJsonValue(m_watchlist_status, json[QString("watchlistStatus")]);
    m_watchlist_status_isSet = !json[QString("watchlistStatus")].isNull() && m_watchlist_status_isValid;

    m_watchlist_status_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_watchlist_status_updated_timestamp, json[QString("watchlistStatusUpdatedTimestamp")]);
    m_watchlist_status_updated_timestamp_isSet = !json[QString("watchlistStatusUpdatedTimestamp")].isNull() && m_watchlist_status_updated_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayeeDetailResponseV4::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_terms_and_conditions_timestamp_isSet) {
        obj.insert(QString("acceptTermsAndConditionsTimestamp"), ::OpenAPI::toJsonValue(m_accept_terms_and_conditions_timestamp));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_cellphone_number_isSet) {
        obj.insert(QString("cellphoneNumber"), ::OpenAPI::toJsonValue(m_cellphone_number));
    }
    if (m_challenge.isSet()) {
        obj.insert(QString("challenge"), ::OpenAPI::toJsonValue(m_challenge));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_disabled_comment_isSet) {
        obj.insert(QString("disabledComment"), ::OpenAPI::toJsonValue(m_disabled_comment));
    }
    if (m_disabled_updated_timestamp_isSet) {
        obj.insert(QString("disabledUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_disabled_updated_timestamp));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_enhanced_kyc_completed_isSet) {
        obj.insert(QString("enhancedKycCompleted"), ::OpenAPI::toJsonValue(m_enhanced_kyc_completed));
    }
    if (m_grace_period_end_date_isSet) {
        obj.insert(QString("gracePeriodEndDate"), ::OpenAPI::toJsonValue(m_grace_period_end_date));
    }
    if (m_individual.isSet()) {
        obj.insert(QString("individual"), ::OpenAPI::toJsonValue(m_individual));
    }
    if (m_kyc_completed_timestamp_isSet) {
        obj.insert(QString("kycCompletedTimestamp"), ::OpenAPI::toJsonValue(m_kyc_completed_timestamp));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_marketing_opt_in_decision_isSet) {
        obj.insert(QString("marketingOptInDecision"), ::OpenAPI::toJsonValue(m_marketing_opt_in_decision));
    }
    if (m_marketing_opt_in_timestamp_isSet) {
        obj.insert(QString("marketingOptInTimestamp"), ::OpenAPI::toJsonValue(m_marketing_opt_in_timestamp));
    }
    if (m_onboarded_status_isSet) {
        obj.insert(QString("onboardedStatus"), ::OpenAPI::toJsonValue(m_onboarded_status));
    }
    if (m_pause_payment_isSet) {
        obj.insert(QString("pausePayment"), ::OpenAPI::toJsonValue(m_pause_payment));
    }
    if (m_pause_payment_timestamp_isSet) {
        obj.insert(QString("pausePaymentTimestamp"), ::OpenAPI::toJsonValue(m_pause_payment_timestamp));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payeeId"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_payee_type_isSet) {
        obj.insert(QString("payeeType"), ::OpenAPI::toJsonValue(m_payee_type));
    }
    if (m_payor_refs.size() > 0) {
        obj.insert(QString("payorRefs"), ::OpenAPI::toJsonValue(m_payor_refs));
    }
    if (m_watchlist_override_comment_isSet) {
        obj.insert(QString("watchlistOverrideComment"), ::OpenAPI::toJsonValue(m_watchlist_override_comment));
    }
    if (m_watchlist_override_expires_at_timestamp_isSet) {
        obj.insert(QString("watchlistOverrideExpiresAtTimestamp"), ::OpenAPI::toJsonValue(m_watchlist_override_expires_at_timestamp));
    }
    if (m_watchlist_status_isSet) {
        obj.insert(QString("watchlistStatus"), ::OpenAPI::toJsonValue(m_watchlist_status));
    }
    if (m_watchlist_status_updated_timestamp_isSet) {
        obj.insert(QString("watchlistStatusUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_watchlist_status_updated_timestamp));
    }
    return obj;
}

QDateTime OAIPayeeDetailResponseV4::getAcceptTermsAndConditionsTimestamp() const {
    return m_accept_terms_and_conditions_timestamp;
}
void OAIPayeeDetailResponseV4::setAcceptTermsAndConditionsTimestamp(const QDateTime &accept_terms_and_conditions_timestamp) {
    m_accept_terms_and_conditions_timestamp = accept_terms_and_conditions_timestamp;
    m_accept_terms_and_conditions_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_accept_terms_and_conditions_timestamp_Set() const{
    return m_accept_terms_and_conditions_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_accept_terms_and_conditions_timestamp_Valid() const{
    return m_accept_terms_and_conditions_timestamp_isValid;
}

OAIPayeeAddressV4 OAIPayeeDetailResponseV4::getAddress() const {
    return m_address;
}
void OAIPayeeDetailResponseV4::setAddress(const OAIPayeeAddressV4 &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPayeeDetailResponseV4::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPayeeDetailResponseV4::getCellphoneNumber() const {
    return m_cellphone_number;
}
void OAIPayeeDetailResponseV4::setCellphoneNumber(const QString &cellphone_number) {
    m_cellphone_number = cellphone_number;
    m_cellphone_number_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_cellphone_number_Set() const{
    return m_cellphone_number_isSet;
}

bool OAIPayeeDetailResponseV4::is_cellphone_number_Valid() const{
    return m_cellphone_number_isValid;
}

OAIChallengeV4 OAIPayeeDetailResponseV4::getChallenge() const {
    return m_challenge;
}
void OAIPayeeDetailResponseV4::setChallenge(const OAIChallengeV4 &challenge) {
    m_challenge = challenge;
    m_challenge_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_challenge_Set() const{
    return m_challenge_isSet;
}

bool OAIPayeeDetailResponseV4::is_challenge_Valid() const{
    return m_challenge_isValid;
}

OAICompanyV4 OAIPayeeDetailResponseV4::getCompany() const {
    return m_company;
}
void OAIPayeeDetailResponseV4::setCompany(const OAICompanyV4 &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_company_Set() const{
    return m_company_isSet;
}

bool OAIPayeeDetailResponseV4::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIPayeeDetailResponseV4::getCountry() const {
    return m_country;
}
void OAIPayeeDetailResponseV4::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPayeeDetailResponseV4::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIPayeeDetailResponseV4::getCreated() const {
    return m_created;
}
void OAIPayeeDetailResponseV4::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPayeeDetailResponseV4::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIPayeeDetailResponseV4::isDisabled() const {
    return m_disabled;
}
void OAIPayeeDetailResponseV4::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIPayeeDetailResponseV4::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIPayeeDetailResponseV4::getDisabledComment() const {
    return m_disabled_comment;
}
void OAIPayeeDetailResponseV4::setDisabledComment(const QString &disabled_comment) {
    m_disabled_comment = disabled_comment;
    m_disabled_comment_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_disabled_comment_Set() const{
    return m_disabled_comment_isSet;
}

bool OAIPayeeDetailResponseV4::is_disabled_comment_Valid() const{
    return m_disabled_comment_isValid;
}

QDateTime OAIPayeeDetailResponseV4::getDisabledUpdatedTimestamp() const {
    return m_disabled_updated_timestamp;
}
void OAIPayeeDetailResponseV4::setDisabledUpdatedTimestamp(const QDateTime &disabled_updated_timestamp) {
    m_disabled_updated_timestamp = disabled_updated_timestamp;
    m_disabled_updated_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_disabled_updated_timestamp_Set() const{
    return m_disabled_updated_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_disabled_updated_timestamp_Valid() const{
    return m_disabled_updated_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::getDisplayName() const {
    return m_display_name;
}
void OAIPayeeDetailResponseV4::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPayeeDetailResponseV4::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPayeeDetailResponseV4::getEmail() const {
    return m_email;
}
void OAIPayeeDetailResponseV4::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPayeeDetailResponseV4::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIPayeeDetailResponseV4::isEnhancedKycCompleted() const {
    return m_enhanced_kyc_completed;
}
void OAIPayeeDetailResponseV4::setEnhancedKycCompleted(const bool &enhanced_kyc_completed) {
    m_enhanced_kyc_completed = enhanced_kyc_completed;
    m_enhanced_kyc_completed_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_enhanced_kyc_completed_Set() const{
    return m_enhanced_kyc_completed_isSet;
}

bool OAIPayeeDetailResponseV4::is_enhanced_kyc_completed_Valid() const{
    return m_enhanced_kyc_completed_isValid;
}

QDate OAIPayeeDetailResponseV4::getGracePeriodEndDate() const {
    return m_grace_period_end_date;
}
void OAIPayeeDetailResponseV4::setGracePeriodEndDate(const QDate &grace_period_end_date) {
    m_grace_period_end_date = grace_period_end_date;
    m_grace_period_end_date_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_grace_period_end_date_Set() const{
    return m_grace_period_end_date_isSet;
}

bool OAIPayeeDetailResponseV4::is_grace_period_end_date_Valid() const{
    return m_grace_period_end_date_isValid;
}

OAIIndividualV4 OAIPayeeDetailResponseV4::getIndividual() const {
    return m_individual;
}
void OAIPayeeDetailResponseV4::setIndividual(const OAIIndividualV4 &individual) {
    m_individual = individual;
    m_individual_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_individual_Set() const{
    return m_individual_isSet;
}

bool OAIPayeeDetailResponseV4::is_individual_Valid() const{
    return m_individual_isValid;
}

QString OAIPayeeDetailResponseV4::getKycCompletedTimestamp() const {
    return m_kyc_completed_timestamp;
}
void OAIPayeeDetailResponseV4::setKycCompletedTimestamp(const QString &kyc_completed_timestamp) {
    m_kyc_completed_timestamp = kyc_completed_timestamp;
    m_kyc_completed_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_kyc_completed_timestamp_Set() const{
    return m_kyc_completed_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_kyc_completed_timestamp_Valid() const{
    return m_kyc_completed_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::getLanguage() const {
    return m_language;
}
void OAIPayeeDetailResponseV4::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPayeeDetailResponseV4::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIPayeeDetailResponseV4::isMarketingOptInDecision() const {
    return m_marketing_opt_in_decision;
}
void OAIPayeeDetailResponseV4::setMarketingOptInDecision(const bool &marketing_opt_in_decision) {
    m_marketing_opt_in_decision = marketing_opt_in_decision;
    m_marketing_opt_in_decision_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_marketing_opt_in_decision_Set() const{
    return m_marketing_opt_in_decision_isSet;
}

bool OAIPayeeDetailResponseV4::is_marketing_opt_in_decision_Valid() const{
    return m_marketing_opt_in_decision_isValid;
}

QString OAIPayeeDetailResponseV4::getMarketingOptInTimestamp() const {
    return m_marketing_opt_in_timestamp;
}
void OAIPayeeDetailResponseV4::setMarketingOptInTimestamp(const QString &marketing_opt_in_timestamp) {
    m_marketing_opt_in_timestamp = marketing_opt_in_timestamp;
    m_marketing_opt_in_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_marketing_opt_in_timestamp_Set() const{
    return m_marketing_opt_in_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_marketing_opt_in_timestamp_Valid() const{
    return m_marketing_opt_in_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::getOnboardedStatus() const {
    return m_onboarded_status;
}
void OAIPayeeDetailResponseV4::setOnboardedStatus(const QString &onboarded_status) {
    m_onboarded_status = onboarded_status;
    m_onboarded_status_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_onboarded_status_Set() const{
    return m_onboarded_status_isSet;
}

bool OAIPayeeDetailResponseV4::is_onboarded_status_Valid() const{
    return m_onboarded_status_isValid;
}

bool OAIPayeeDetailResponseV4::isPausePayment() const {
    return m_pause_payment;
}
void OAIPayeeDetailResponseV4::setPausePayment(const bool &pause_payment) {
    m_pause_payment = pause_payment;
    m_pause_payment_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_pause_payment_Set() const{
    return m_pause_payment_isSet;
}

bool OAIPayeeDetailResponseV4::is_pause_payment_Valid() const{
    return m_pause_payment_isValid;
}

QString OAIPayeeDetailResponseV4::getPausePaymentTimestamp() const {
    return m_pause_payment_timestamp;
}
void OAIPayeeDetailResponseV4::setPausePaymentTimestamp(const QString &pause_payment_timestamp) {
    m_pause_payment_timestamp = pause_payment_timestamp;
    m_pause_payment_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_pause_payment_timestamp_Set() const{
    return m_pause_payment_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_pause_payment_timestamp_Valid() const{
    return m_pause_payment_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::getPayeeId() const {
    return m_payee_id;
}
void OAIPayeeDetailResponseV4::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIPayeeDetailResponseV4::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAIPayeeDetailResponseV4::getPayeeType() const {
    return m_payee_type;
}
void OAIPayeeDetailResponseV4::setPayeeType(const QString &payee_type) {
    m_payee_type = payee_type;
    m_payee_type_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_payee_type_Set() const{
    return m_payee_type_isSet;
}

bool OAIPayeeDetailResponseV4::is_payee_type_Valid() const{
    return m_payee_type_isValid;
}

QList<OAIPayeePayorRefV4> OAIPayeeDetailResponseV4::getPayorRefs() const {
    return m_payor_refs;
}
void OAIPayeeDetailResponseV4::setPayorRefs(const QList<OAIPayeePayorRefV4> &payor_refs) {
    m_payor_refs = payor_refs;
    m_payor_refs_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_payor_refs_Set() const{
    return m_payor_refs_isSet;
}

bool OAIPayeeDetailResponseV4::is_payor_refs_Valid() const{
    return m_payor_refs_isValid;
}

QString OAIPayeeDetailResponseV4::getWatchlistOverrideComment() const {
    return m_watchlist_override_comment;
}
void OAIPayeeDetailResponseV4::setWatchlistOverrideComment(const QString &watchlist_override_comment) {
    m_watchlist_override_comment = watchlist_override_comment;
    m_watchlist_override_comment_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_watchlist_override_comment_Set() const{
    return m_watchlist_override_comment_isSet;
}

bool OAIPayeeDetailResponseV4::is_watchlist_override_comment_Valid() const{
    return m_watchlist_override_comment_isValid;
}

QDateTime OAIPayeeDetailResponseV4::getWatchlistOverrideExpiresAtTimestamp() const {
    return m_watchlist_override_expires_at_timestamp;
}
void OAIPayeeDetailResponseV4::setWatchlistOverrideExpiresAtTimestamp(const QDateTime &watchlist_override_expires_at_timestamp) {
    m_watchlist_override_expires_at_timestamp = watchlist_override_expires_at_timestamp;
    m_watchlist_override_expires_at_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_watchlist_override_expires_at_timestamp_Set() const{
    return m_watchlist_override_expires_at_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_watchlist_override_expires_at_timestamp_Valid() const{
    return m_watchlist_override_expires_at_timestamp_isValid;
}

QString OAIPayeeDetailResponseV4::getWatchlistStatus() const {
    return m_watchlist_status;
}
void OAIPayeeDetailResponseV4::setWatchlistStatus(const QString &watchlist_status) {
    m_watchlist_status = watchlist_status;
    m_watchlist_status_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_watchlist_status_Set() const{
    return m_watchlist_status_isSet;
}

bool OAIPayeeDetailResponseV4::is_watchlist_status_Valid() const{
    return m_watchlist_status_isValid;
}

QString OAIPayeeDetailResponseV4::getWatchlistStatusUpdatedTimestamp() const {
    return m_watchlist_status_updated_timestamp;
}
void OAIPayeeDetailResponseV4::setWatchlistStatusUpdatedTimestamp(const QString &watchlist_status_updated_timestamp) {
    m_watchlist_status_updated_timestamp = watchlist_status_updated_timestamp;
    m_watchlist_status_updated_timestamp_isSet = true;
}

bool OAIPayeeDetailResponseV4::is_watchlist_status_updated_timestamp_Set() const{
    return m_watchlist_status_updated_timestamp_isSet;
}

bool OAIPayeeDetailResponseV4::is_watchlist_status_updated_timestamp_Valid() const{
    return m_watchlist_status_updated_timestamp_isValid;
}

bool OAIPayeeDetailResponseV4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_terms_and_conditions_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cellphone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_kyc_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kyc_completed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_opt_in_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_opt_in_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarded_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_payment_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payor_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_override_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_override_expires_at_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_status_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayeeDetailResponseV4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
