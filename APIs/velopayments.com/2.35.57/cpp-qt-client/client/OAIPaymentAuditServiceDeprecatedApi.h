/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentAuditServiceDeprecatedApi_H
#define OAI_OAIPaymentAuditServiceDeprecatedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetFundingsResponse.h"
#include "OAIGetPaymentsForPayoutResponseV3.h"
#include "OAIGetPayoutStatistics.h"
#include "OAIGetPayoutsResponseV3.h"
#include "OAIInline_response_400.h"
#include "OAIInline_response_401.h"
#include "OAIInline_response_403.h"
#include "OAIInline_response_404.h"
#include "OAIListPaymentsResponseV3.h"
#include "OAIPaymentDeltaResponseV1.h"
#include "OAIPaymentResponseV3.h"
#include "OAIPayorAmlTransactionV3.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentAuditServiceDeprecatedApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentAuditServiceDeprecatedApi(const int timeOut = 0);
    ~OAIPaymentAuditServiceDeprecatedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payor_id QString [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    */
    Q_DECL_DEPRECATED virtual void exportTransactionsCSVV3(const ::OpenAPI::OptionalParam<QString> &payor_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getFundingsV1(const QString &payor_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_id QString [required]
    * @param[in]  sensitive bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getPaymentDetailsV3(const QString &payment_id, const ::OpenAPI::OptionalParam<bool> &sensitive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  payout_id QString [required]
    * @param[in]  remote_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  source_amount_from qint32 [optional]
    * @param[in]  source_amount_to qint32 [optional]
    * @param[in]  payment_amount_from qint32 [optional]
    * @param[in]  payment_amount_to qint32 [optional]
    * @param[in]  submitted_date_from QDate [optional]
    * @param[in]  submitted_date_to QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sensitive bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getPaymentsForPayoutPAV3(const QString &payout_id, const ::OpenAPI::OptionalParam<QString> &remote_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &source_amount_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &source_amount_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &payment_amount_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &payment_amount_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sensitive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  payor_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getPayoutStatsV1(const ::OpenAPI::OptionalParam<QString> &payor_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  payout_memo QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  submitted_date_from QDate [optional]
    * @param[in]  submitted_date_to QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getPayoutsForPayorV3(const QString &payor_id, const ::OpenAPI::OptionalParam<QString> &payout_memo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  updated_since QDateTime [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void listPaymentChanges(const QString &payor_id, const QDateTime &updated_since, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  payee_id QString [optional]
    * @param[in]  payor_id QString [optional]
    * @param[in]  payor_name QString [optional]
    * @param[in]  remote_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  source_account_name QString [optional]
    * @param[in]  source_amount_from qint32 [optional]
    * @param[in]  source_amount_to qint32 [optional]
    * @param[in]  source_currency QString [optional]
    * @param[in]  payment_amount_from qint32 [optional]
    * @param[in]  payment_amount_to qint32 [optional]
    * @param[in]  payment_currency QString [optional]
    * @param[in]  submitted_date_from QDate [optional]
    * @param[in]  submitted_date_to QDate [optional]
    * @param[in]  payment_memo QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sensitive bool [optional]
    */
    Q_DECL_DEPRECATED virtual void listPaymentsAuditV3(const ::OpenAPI::OptionalParam<QString> &payee_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payor_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payor_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remote_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_account_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &source_amount_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &source_amount_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source_currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &payment_amount_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &payment_amount_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &payment_currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &submitted_date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &payment_memo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sensitive = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportTransactionsCSVV3Callback(OAIHttpRequestWorker *worker);
    void getFundingsV1Callback(OAIHttpRequestWorker *worker);
    void getPaymentDetailsV3Callback(OAIHttpRequestWorker *worker);
    void getPaymentsForPayoutPAV3Callback(OAIHttpRequestWorker *worker);
    void getPayoutStatsV1Callback(OAIHttpRequestWorker *worker);
    void getPayoutsForPayorV3Callback(OAIHttpRequestWorker *worker);
    void listPaymentChangesCallback(OAIHttpRequestWorker *worker);
    void listPaymentsAuditV3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportTransactionsCSVV3Signal(OAIPayorAmlTransactionV3 summary);
    void getFundingsV1Signal(OAIGetFundingsResponse summary);
    void getPaymentDetailsV3Signal(OAIPaymentResponseV3 summary);
    void getPaymentsForPayoutPAV3Signal(OAIGetPaymentsForPayoutResponseV3 summary);
    void getPayoutStatsV1Signal(OAIGetPayoutStatistics summary);
    void getPayoutsForPayorV3Signal(OAIGetPayoutsResponseV3 summary);
    void listPaymentChangesSignal(OAIPaymentDeltaResponseV1 summary);
    void listPaymentsAuditV3Signal(OAIListPaymentsResponseV3 summary);


    void exportTransactionsCSVV3SignalFull(OAIHttpRequestWorker *worker, OAIPayorAmlTransactionV3 summary);
    void getFundingsV1SignalFull(OAIHttpRequestWorker *worker, OAIGetFundingsResponse summary);
    void getPaymentDetailsV3SignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponseV3 summary);
    void getPaymentsForPayoutPAV3SignalFull(OAIHttpRequestWorker *worker, OAIGetPaymentsForPayoutResponseV3 summary);
    void getPayoutStatsV1SignalFull(OAIHttpRequestWorker *worker, OAIGetPayoutStatistics summary);
    void getPayoutsForPayorV3SignalFull(OAIHttpRequestWorker *worker, OAIGetPayoutsResponseV3 summary);
    void listPaymentChangesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDeltaResponseV1 summary);
    void listPaymentsAuditV3SignalFull(OAIHttpRequestWorker *worker, OAIListPaymentsResponseV3 summary);

    Q_DECL_DEPRECATED_X("Use exportTransactionsCSVV3SignalError() instead")
    void exportTransactionsCSVV3SignalE(OAIPayorAmlTransactionV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportTransactionsCSVV3SignalError(OAIPayorAmlTransactionV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFundingsV1SignalError() instead")
    void getFundingsV1SignalE(OAIGetFundingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFundingsV1SignalError(OAIGetFundingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDetailsV3SignalError() instead")
    void getPaymentDetailsV3SignalE(OAIPaymentResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDetailsV3SignalError(OAIPaymentResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsForPayoutPAV3SignalError() instead")
    void getPaymentsForPayoutPAV3SignalE(OAIGetPaymentsForPayoutResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsForPayoutPAV3SignalError(OAIGetPaymentsForPayoutResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutStatsV1SignalError() instead")
    void getPayoutStatsV1SignalE(OAIGetPayoutStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutStatsV1SignalError(OAIGetPayoutStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutsForPayorV3SignalError() instead")
    void getPayoutsForPayorV3SignalE(OAIGetPayoutsResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutsForPayorV3SignalError(OAIGetPayoutsResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentChangesSignalError() instead")
    void listPaymentChangesSignalE(OAIPaymentDeltaResponseV1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentChangesSignalError(OAIPaymentDeltaResponseV1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentsAuditV3SignalError() instead")
    void listPaymentsAuditV3SignalE(OAIListPaymentsResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentsAuditV3SignalError(OAIListPaymentsResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportTransactionsCSVV3SignalErrorFull() instead")
    void exportTransactionsCSVV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportTransactionsCSVV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFundingsV1SignalErrorFull() instead")
    void getFundingsV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFundingsV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDetailsV3SignalErrorFull() instead")
    void getPaymentDetailsV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDetailsV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsForPayoutPAV3SignalErrorFull() instead")
    void getPaymentsForPayoutPAV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsForPayoutPAV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutStatsV1SignalErrorFull() instead")
    void getPayoutStatsV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutStatsV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutsForPayorV3SignalErrorFull() instead")
    void getPayoutsForPayorV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutsForPayorV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentChangesSignalErrorFull() instead")
    void listPaymentChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPaymentsAuditV3SignalErrorFull() instead")
    void listPaymentsAuditV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPaymentsAuditV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
