/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceAccountsApi_H
#define OAI_OAISourceAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInline_response_400.h"
#include "OAIInline_response_401.h"
#include "OAIInline_response_403.h"
#include "OAIInline_response_404.h"
#include "OAIListSourceAccountResponseV2.h"
#include "OAIListSourceAccountResponseV3.h"
#include "OAISetNotificationsRequest.h"
#include "OAISetNotificationsRequest_2.h"
#include "OAISourceAccountResponseV2.h"
#include "OAISourceAccountResponseV3.h"
#include "OAITransferRequestV2.h"
#include "OAITransferRequestV3.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceAccountsApi : public QObject {
    Q_OBJECT

public:
    OAISourceAccountsApi(const int timeOut = 0);
    ~OAISourceAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source_account_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getSourceAccountV2(const QString &source_account_id);

    /**
    * @param[in]  source_account_id QString [required]
    */
    virtual void getSourceAccountV3(const QString &source_account_id);

    /**
    * @param[in]  physical_account_name QString [optional]
    * @param[in]  physical_account_id QString [optional]
    * @param[in]  payor_id QString [optional]
    * @param[in]  funding_account_id QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getSourceAccountsV2(const ::OpenAPI::OptionalParam<QString> &physical_account_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &physical_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payor_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &funding_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  physical_account_name QString [optional]
    * @param[in]  physical_account_id QString [optional]
    * @param[in]  payor_id QString [optional]
    * @param[in]  funding_account_id QString [optional]
    * @param[in]  include_user_deleted bool [optional]
    * @param[in]  type QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getSourceAccountsV3(const ::OpenAPI::OptionalParam<QString> &physical_account_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &physical_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payor_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &funding_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_user_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_account_id QString [required]
    * @param[in]  oai_set_notifications_request OAISetNotificationsRequest [required]
    */
    Q_DECL_DEPRECATED virtual void setNotificationsRequest(const QString &source_account_id, const OAISetNotificationsRequest &oai_set_notifications_request);

    /**
    * @param[in]  source_account_id QString [required]
    * @param[in]  oai_set_notifications_request_2 OAISetNotificationsRequest_2 [required]
    */
    virtual void setNotificationsRequestV3(const QString &source_account_id, const OAISetNotificationsRequest_2 &oai_set_notifications_request_2);

    /**
    * @param[in]  source_account_id QString [required]
    * @param[in]  oai_transfer_request_v2 OAITransferRequestV2 [required]
    */
    Q_DECL_DEPRECATED virtual void transferFundsV2(const QString &source_account_id, const OAITransferRequestV2 &oai_transfer_request_v2);

    /**
    * @param[in]  source_account_id QString [required]
    * @param[in]  oai_transfer_request_v3 OAITransferRequestV3 [required]
    */
    virtual void transferFundsV3(const QString &source_account_id, const OAITransferRequestV3 &oai_transfer_request_v3);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSourceAccountV2Callback(OAIHttpRequestWorker *worker);
    void getSourceAccountV3Callback(OAIHttpRequestWorker *worker);
    void getSourceAccountsV2Callback(OAIHttpRequestWorker *worker);
    void getSourceAccountsV3Callback(OAIHttpRequestWorker *worker);
    void setNotificationsRequestCallback(OAIHttpRequestWorker *worker);
    void setNotificationsRequestV3Callback(OAIHttpRequestWorker *worker);
    void transferFundsV2Callback(OAIHttpRequestWorker *worker);
    void transferFundsV3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSourceAccountV2Signal(OAISourceAccountResponseV2 summary);
    void getSourceAccountV3Signal(OAISourceAccountResponseV3 summary);
    void getSourceAccountsV2Signal(OAIListSourceAccountResponseV2 summary);
    void getSourceAccountsV3Signal(OAIListSourceAccountResponseV3 summary);
    void setNotificationsRequestSignal();
    void setNotificationsRequestV3Signal();
    void transferFundsV2Signal();
    void transferFundsV3Signal();


    void getSourceAccountV2SignalFull(OAIHttpRequestWorker *worker, OAISourceAccountResponseV2 summary);
    void getSourceAccountV3SignalFull(OAIHttpRequestWorker *worker, OAISourceAccountResponseV3 summary);
    void getSourceAccountsV2SignalFull(OAIHttpRequestWorker *worker, OAIListSourceAccountResponseV2 summary);
    void getSourceAccountsV3SignalFull(OAIHttpRequestWorker *worker, OAIListSourceAccountResponseV3 summary);
    void setNotificationsRequestSignalFull(OAIHttpRequestWorker *worker);
    void setNotificationsRequestV3SignalFull(OAIHttpRequestWorker *worker);
    void transferFundsV2SignalFull(OAIHttpRequestWorker *worker);
    void transferFundsV3SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getSourceAccountV2SignalError() instead")
    void getSourceAccountV2SignalE(OAISourceAccountResponseV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountV2SignalError(OAISourceAccountResponseV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountV3SignalError() instead")
    void getSourceAccountV3SignalE(OAISourceAccountResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountV3SignalError(OAISourceAccountResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountsV2SignalError() instead")
    void getSourceAccountsV2SignalE(OAIListSourceAccountResponseV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountsV2SignalError(OAIListSourceAccountResponseV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountsV3SignalError() instead")
    void getSourceAccountsV3SignalE(OAIListSourceAccountResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountsV3SignalError(OAIListSourceAccountResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationsRequestSignalError() instead")
    void setNotificationsRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationsRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationsRequestV3SignalError() instead")
    void setNotificationsRequestV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationsRequestV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferFundsV2SignalError() instead")
    void transferFundsV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transferFundsV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferFundsV3SignalError() instead")
    void transferFundsV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transferFundsV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSourceAccountV2SignalErrorFull() instead")
    void getSourceAccountV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountV3SignalErrorFull() instead")
    void getSourceAccountV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountsV2SignalErrorFull() instead")
    void getSourceAccountsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceAccountsV3SignalErrorFull() instead")
    void getSourceAccountsV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceAccountsV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationsRequestSignalErrorFull() instead")
    void setNotificationsRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationsRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNotificationsRequestV3SignalErrorFull() instead")
    void setNotificationsRequestV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setNotificationsRequestV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferFundsV2SignalErrorFull() instead")
    void transferFundsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferFundsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferFundsV3SignalErrorFull() instead")
    void transferFundsV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferFundsV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
