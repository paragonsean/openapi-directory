/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResponseV4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResponseV4::OAIPaymentResponseV4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResponseV4::OAIPaymentResponseV4() {
    this->initializeModel();
}

OAIPaymentResponseV4::~OAIPaymentResponseV4() {}

void OAIPaymentResponseV4::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_auto_withdrawn_reason_code_isSet = false;
    m_auto_withdrawn_reason_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_filename_reference_isSet = false;
    m_filename_reference_isValid = false;

    m_funding_status_isSet = false;
    m_funding_status_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_individual_identification_number_isSet = false;
    m_individual_identification_number_isValid = false;

    m_inverted_rate_isSet = false;
    m_inverted_rate_isValid = false;

    m_is_payment_ccy_base_ccy_isSet = false;
    m_is_payment_ccy_base_ccy_isValid = false;

    m_payee_address_country_code_isSet = false;
    m_payee_address_country_code_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_payment_amount_isSet = false;
    m_payment_amount_isValid = false;

    m_payment_channel_id_isSet = false;
    m_payment_channel_id_isValid = false;

    m_payment_channel_name_isSet = false;
    m_payment_channel_name_isValid = false;

    m_payment_currency_isSet = false;
    m_payment_currency_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_payment_memo_isSet = false;
    m_payment_memo_isValid = false;

    m_payment_metadata_isSet = false;
    m_payment_metadata_isValid = false;

    m_payment_scheme_isSet = false;
    m_payment_scheme_isValid = false;

    m_payment_tracking_reference_isSet = false;
    m_payment_tracking_reference_isValid = false;

    m_payor_id_isSet = false;
    m_payor_id_isValid = false;

    m_payor_name_isSet = false;
    m_payor_name_isValid = false;

    m_payor_payment_id_isSet = false;
    m_payor_payment_id_isValid = false;

    m_payout_isSet = false;
    m_payout_isValid = false;

    m_post_instruct_fx_info_isSet = false;
    m_post_instruct_fx_info_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_rails_batch_id_isSet = false;
    m_rails_batch_id_isValid = false;

    m_rails_id_isSet = false;
    m_rails_id_isValid = false;

    m_rails_payment_id_isSet = false;
    m_rails_payment_id_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_rejection_reason_isSet = false;
    m_rejection_reason_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_remote_system_id_isSet = false;
    m_remote_system_id_isValid = false;

    m_remote_system_payment_id_isSet = false;
    m_remote_system_payment_id_isValid = false;

    m_return_cost_isSet = false;
    m_return_cost_isValid = false;

    m_return_reason_isSet = false;
    m_return_reason_isValid = false;

    m_routing_number_isSet = false;
    m_routing_number_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_source_account_id_isSet = false;
    m_source_account_id_isValid = false;

    m_source_account_name_isSet = false;
    m_source_account_name_isValid = false;

    m_source_amount_isSet = false;
    m_source_amount_isValid = false;

    m_source_currency_isSet = false;
    m_source_currency_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_date_time_isSet = false;
    m_submitted_date_time_isValid = false;

    m_trace_number_isSet = false;
    m_trace_number_isValid = false;

    m_transmission_type_isSet = false;
    m_transmission_type_isValid = false;

    m_withdrawable_isSet = false;
    m_withdrawable_isValid = false;

    m_withdrawn_reason_isSet = false;
    m_withdrawn_reason_isValid = false;
}

void OAIPaymentResponseV4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResponseV4::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_auto_withdrawn_reason_code_isValid = ::OpenAPI::fromJsonValue(m_auto_withdrawn_reason_code, json[QString("autoWithdrawnReasonCode")]);
    m_auto_withdrawn_reason_code_isSet = !json[QString("autoWithdrawnReasonCode")].isNull() && m_auto_withdrawn_reason_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_filename_reference_isValid = ::OpenAPI::fromJsonValue(m_filename_reference, json[QString("filenameReference")]);
    m_filename_reference_isSet = !json[QString("filenameReference")].isNull() && m_filename_reference_isValid;

    m_funding_status_isValid = ::OpenAPI::fromJsonValue(m_funding_status, json[QString("fundingStatus")]);
    m_funding_status_isSet = !json[QString("fundingStatus")].isNull() && m_funding_status_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_individual_identification_number_isValid = ::OpenAPI::fromJsonValue(m_individual_identification_number, json[QString("individualIdentificationNumber")]);
    m_individual_identification_number_isSet = !json[QString("individualIdentificationNumber")].isNull() && m_individual_identification_number_isValid;

    m_inverted_rate_isValid = ::OpenAPI::fromJsonValue(m_inverted_rate, json[QString("invertedRate")]);
    m_inverted_rate_isSet = !json[QString("invertedRate")].isNull() && m_inverted_rate_isValid;

    m_is_payment_ccy_base_ccy_isValid = ::OpenAPI::fromJsonValue(m_is_payment_ccy_base_ccy, json[QString("isPaymentCcyBaseCcy")]);
    m_is_payment_ccy_base_ccy_isSet = !json[QString("isPaymentCcyBaseCcy")].isNull() && m_is_payment_ccy_base_ccy_isValid;

    m_payee_address_country_code_isValid = ::OpenAPI::fromJsonValue(m_payee_address_country_code, json[QString("payeeAddressCountryCode")]);
    m_payee_address_country_code_isSet = !json[QString("payeeAddressCountryCode")].isNull() && m_payee_address_country_code_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payeeId")]);
    m_payee_id_isSet = !json[QString("payeeId")].isNull() && m_payee_id_isValid;

    m_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_payment_amount, json[QString("paymentAmount")]);
    m_payment_amount_isSet = !json[QString("paymentAmount")].isNull() && m_payment_amount_isValid;

    m_payment_channel_id_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_id, json[QString("paymentChannelId")]);
    m_payment_channel_id_isSet = !json[QString("paymentChannelId")].isNull() && m_payment_channel_id_isValid;

    m_payment_channel_name_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_name, json[QString("paymentChannelName")]);
    m_payment_channel_name_isSet = !json[QString("paymentChannelName")].isNull() && m_payment_channel_name_isValid;

    m_payment_currency_isValid = ::OpenAPI::fromJsonValue(m_payment_currency, json[QString("paymentCurrency")]);
    m_payment_currency_isSet = !json[QString("paymentCurrency")].isNull() && m_payment_currency_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("paymentId")]);
    m_payment_id_isSet = !json[QString("paymentId")].isNull() && m_payment_id_isValid;

    m_payment_memo_isValid = ::OpenAPI::fromJsonValue(m_payment_memo, json[QString("paymentMemo")]);
    m_payment_memo_isSet = !json[QString("paymentMemo")].isNull() && m_payment_memo_isValid;

    m_payment_metadata_isValid = ::OpenAPI::fromJsonValue(m_payment_metadata, json[QString("paymentMetadata")]);
    m_payment_metadata_isSet = !json[QString("paymentMetadata")].isNull() && m_payment_metadata_isValid;

    m_payment_scheme_isValid = ::OpenAPI::fromJsonValue(m_payment_scheme, json[QString("paymentScheme")]);
    m_payment_scheme_isSet = !json[QString("paymentScheme")].isNull() && m_payment_scheme_isValid;

    m_payment_tracking_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_tracking_reference, json[QString("paymentTrackingReference")]);
    m_payment_tracking_reference_isSet = !json[QString("paymentTrackingReference")].isNull() && m_payment_tracking_reference_isValid;

    m_payor_id_isValid = ::OpenAPI::fromJsonValue(m_payor_id, json[QString("payorId")]);
    m_payor_id_isSet = !json[QString("payorId")].isNull() && m_payor_id_isValid;

    m_payor_name_isValid = ::OpenAPI::fromJsonValue(m_payor_name, json[QString("payorName")]);
    m_payor_name_isSet = !json[QString("payorName")].isNull() && m_payor_name_isValid;

    m_payor_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payor_payment_id, json[QString("payorPaymentId")]);
    m_payor_payment_id_isSet = !json[QString("payorPaymentId")].isNull() && m_payor_payment_id_isValid;

    m_payout_isValid = ::OpenAPI::fromJsonValue(m_payout, json[QString("payout")]);
    m_payout_isSet = !json[QString("payout")].isNull() && m_payout_isValid;

    m_post_instruct_fx_info_isValid = ::OpenAPI::fromJsonValue(m_post_instruct_fx_info, json[QString("postInstructFxInfo")]);
    m_post_instruct_fx_info_isSet = !json[QString("postInstructFxInfo")].isNull() && m_post_instruct_fx_info_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quoteId")]);
    m_quote_id_isSet = !json[QString("quoteId")].isNull() && m_quote_id_isValid;

    m_rails_batch_id_isValid = ::OpenAPI::fromJsonValue(m_rails_batch_id, json[QString("railsBatchId")]);
    m_rails_batch_id_isSet = !json[QString("railsBatchId")].isNull() && m_rails_batch_id_isValid;

    m_rails_id_isValid = ::OpenAPI::fromJsonValue(m_rails_id, json[QString("railsId")]);
    m_rails_id_isSet = !json[QString("railsId")].isNull() && m_rails_id_isValid;

    m_rails_payment_id_isValid = ::OpenAPI::fromJsonValue(m_rails_payment_id, json[QString("railsPaymentId")]);
    m_rails_payment_id_isSet = !json[QString("railsPaymentId")].isNull() && m_rails_payment_id_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_rejection_reason_isValid = ::OpenAPI::fromJsonValue(m_rejection_reason, json[QString("rejectionReason")]);
    m_rejection_reason_isSet = !json[QString("rejectionReason")].isNull() && m_rejection_reason_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("remoteId")]);
    m_remote_id_isSet = !json[QString("remoteId")].isNull() && m_remote_id_isValid;

    m_remote_system_id_isValid = ::OpenAPI::fromJsonValue(m_remote_system_id, json[QString("remoteSystemId")]);
    m_remote_system_id_isSet = !json[QString("remoteSystemId")].isNull() && m_remote_system_id_isValid;

    m_remote_system_payment_id_isValid = ::OpenAPI::fromJsonValue(m_remote_system_payment_id, json[QString("remoteSystemPaymentId")]);
    m_remote_system_payment_id_isSet = !json[QString("remoteSystemPaymentId")].isNull() && m_remote_system_payment_id_isValid;

    m_return_cost_isValid = ::OpenAPI::fromJsonValue(m_return_cost, json[QString("returnCost")]);
    m_return_cost_isSet = !json[QString("returnCost")].isNull() && m_return_cost_isValid;

    m_return_reason_isValid = ::OpenAPI::fromJsonValue(m_return_reason, json[QString("returnReason")]);
    m_return_reason_isSet = !json[QString("returnReason")].isNull() && m_return_reason_isValid;

    m_routing_number_isValid = ::OpenAPI::fromJsonValue(m_routing_number, json[QString("routingNumber")]);
    m_routing_number_isSet = !json[QString("routingNumber")].isNull() && m_routing_number_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_source_account_id_isValid = ::OpenAPI::fromJsonValue(m_source_account_id, json[QString("sourceAccountId")]);
    m_source_account_id_isSet = !json[QString("sourceAccountId")].isNull() && m_source_account_id_isValid;

    m_source_account_name_isValid = ::OpenAPI::fromJsonValue(m_source_account_name, json[QString("sourceAccountName")]);
    m_source_account_name_isSet = !json[QString("sourceAccountName")].isNull() && m_source_account_name_isValid;

    m_source_amount_isValid = ::OpenAPI::fromJsonValue(m_source_amount, json[QString("sourceAmount")]);
    m_source_amount_isSet = !json[QString("sourceAmount")].isNull() && m_source_amount_isValid;

    m_source_currency_isValid = ::OpenAPI::fromJsonValue(m_source_currency, json[QString("sourceCurrency")]);
    m_source_currency_isSet = !json[QString("sourceCurrency")].isNull() && m_source_currency_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_date_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_date_time, json[QString("submittedDateTime")]);
    m_submitted_date_time_isSet = !json[QString("submittedDateTime")].isNull() && m_submitted_date_time_isValid;

    m_trace_number_isValid = ::OpenAPI::fromJsonValue(m_trace_number, json[QString("traceNumber")]);
    m_trace_number_isSet = !json[QString("traceNumber")].isNull() && m_trace_number_isValid;

    m_transmission_type_isValid = ::OpenAPI::fromJsonValue(m_transmission_type, json[QString("transmissionType")]);
    m_transmission_type_isSet = !json[QString("transmissionType")].isNull() && m_transmission_type_isValid;

    m_withdrawable_isValid = ::OpenAPI::fromJsonValue(m_withdrawable, json[QString("withdrawable")]);
    m_withdrawable_isSet = !json[QString("withdrawable")].isNull() && m_withdrawable_isValid;

    m_withdrawn_reason_isValid = ::OpenAPI::fromJsonValue(m_withdrawn_reason, json[QString("withdrawnReason")]);
    m_withdrawn_reason_isSet = !json[QString("withdrawnReason")].isNull() && m_withdrawn_reason_isValid;
}

QString OAIPaymentResponseV4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResponseV4::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_auto_withdrawn_reason_code_isSet) {
        obj.insert(QString("autoWithdrawnReasonCode"), ::OpenAPI::toJsonValue(m_auto_withdrawn_reason_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_filename_reference_isSet) {
        obj.insert(QString("filenameReference"), ::OpenAPI::toJsonValue(m_filename_reference));
    }
    if (m_funding_status_isSet) {
        obj.insert(QString("fundingStatus"), ::OpenAPI::toJsonValue(m_funding_status));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_individual_identification_number_isSet) {
        obj.insert(QString("individualIdentificationNumber"), ::OpenAPI::toJsonValue(m_individual_identification_number));
    }
    if (m_inverted_rate_isSet) {
        obj.insert(QString("invertedRate"), ::OpenAPI::toJsonValue(m_inverted_rate));
    }
    if (m_is_payment_ccy_base_ccy_isSet) {
        obj.insert(QString("isPaymentCcyBaseCcy"), ::OpenAPI::toJsonValue(m_is_payment_ccy_base_ccy));
    }
    if (m_payee_address_country_code_isSet) {
        obj.insert(QString("payeeAddressCountryCode"), ::OpenAPI::toJsonValue(m_payee_address_country_code));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payeeId"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_payment_amount_isSet) {
        obj.insert(QString("paymentAmount"), ::OpenAPI::toJsonValue(m_payment_amount));
    }
    if (m_payment_channel_id_isSet) {
        obj.insert(QString("paymentChannelId"), ::OpenAPI::toJsonValue(m_payment_channel_id));
    }
    if (m_payment_channel_name_isSet) {
        obj.insert(QString("paymentChannelName"), ::OpenAPI::toJsonValue(m_payment_channel_name));
    }
    if (m_payment_currency_isSet) {
        obj.insert(QString("paymentCurrency"), ::OpenAPI::toJsonValue(m_payment_currency));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("paymentId"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_payment_memo_isSet) {
        obj.insert(QString("paymentMemo"), ::OpenAPI::toJsonValue(m_payment_memo));
    }
    if (m_payment_metadata_isSet) {
        obj.insert(QString("paymentMetadata"), ::OpenAPI::toJsonValue(m_payment_metadata));
    }
    if (m_payment_scheme_isSet) {
        obj.insert(QString("paymentScheme"), ::OpenAPI::toJsonValue(m_payment_scheme));
    }
    if (m_payment_tracking_reference_isSet) {
        obj.insert(QString("paymentTrackingReference"), ::OpenAPI::toJsonValue(m_payment_tracking_reference));
    }
    if (m_payor_id_isSet) {
        obj.insert(QString("payorId"), ::OpenAPI::toJsonValue(m_payor_id));
    }
    if (m_payor_name_isSet) {
        obj.insert(QString("payorName"), ::OpenAPI::toJsonValue(m_payor_name));
    }
    if (m_payor_payment_id_isSet) {
        obj.insert(QString("payorPaymentId"), ::OpenAPI::toJsonValue(m_payor_payment_id));
    }
    if (m_payout.isSet()) {
        obj.insert(QString("payout"), ::OpenAPI::toJsonValue(m_payout));
    }
    if (m_post_instruct_fx_info.isSet()) {
        obj.insert(QString("postInstructFxInfo"), ::OpenAPI::toJsonValue(m_post_instruct_fx_info));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quoteId"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_rails_batch_id_isSet) {
        obj.insert(QString("railsBatchId"), ::OpenAPI::toJsonValue(m_rails_batch_id));
    }
    if (m_rails_id_isSet) {
        obj.insert(QString("railsId"), ::OpenAPI::toJsonValue(m_rails_id));
    }
    if (m_rails_payment_id_isSet) {
        obj.insert(QString("railsPaymentId"), ::OpenAPI::toJsonValue(m_rails_payment_id));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_rejection_reason_isSet) {
        obj.insert(QString("rejectionReason"), ::OpenAPI::toJsonValue(m_rejection_reason));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("remoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_remote_system_id_isSet) {
        obj.insert(QString("remoteSystemId"), ::OpenAPI::toJsonValue(m_remote_system_id));
    }
    if (m_remote_system_payment_id_isSet) {
        obj.insert(QString("remoteSystemPaymentId"), ::OpenAPI::toJsonValue(m_remote_system_payment_id));
    }
    if (m_return_cost_isSet) {
        obj.insert(QString("returnCost"), ::OpenAPI::toJsonValue(m_return_cost));
    }
    if (m_return_reason_isSet) {
        obj.insert(QString("returnReason"), ::OpenAPI::toJsonValue(m_return_reason));
    }
    if (m_routing_number_isSet) {
        obj.insert(QString("routingNumber"), ::OpenAPI::toJsonValue(m_routing_number));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_source_account_id_isSet) {
        obj.insert(QString("sourceAccountId"), ::OpenAPI::toJsonValue(m_source_account_id));
    }
    if (m_source_account_name_isSet) {
        obj.insert(QString("sourceAccountName"), ::OpenAPI::toJsonValue(m_source_account_name));
    }
    if (m_source_amount_isSet) {
        obj.insert(QString("sourceAmount"), ::OpenAPI::toJsonValue(m_source_amount));
    }
    if (m_source_currency_isSet) {
        obj.insert(QString("sourceCurrency"), ::OpenAPI::toJsonValue(m_source_currency));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_date_time_isSet) {
        obj.insert(QString("submittedDateTime"), ::OpenAPI::toJsonValue(m_submitted_date_time));
    }
    if (m_trace_number_isSet) {
        obj.insert(QString("traceNumber"), ::OpenAPI::toJsonValue(m_trace_number));
    }
    if (m_transmission_type_isSet) {
        obj.insert(QString("transmissionType"), ::OpenAPI::toJsonValue(m_transmission_type));
    }
    if (m_withdrawable_isSet) {
        obj.insert(QString("withdrawable"), ::OpenAPI::toJsonValue(m_withdrawable));
    }
    if (m_withdrawn_reason_isSet) {
        obj.insert(QString("withdrawnReason"), ::OpenAPI::toJsonValue(m_withdrawn_reason));
    }
    return obj;
}

QString OAIPaymentResponseV4::getAccountName() const {
    return m_account_name;
}
void OAIPaymentResponseV4::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIPaymentResponseV4::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIPaymentResponseV4::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIPaymentResponseV4::getAccountNumber() const {
    return m_account_number;
}
void OAIPaymentResponseV4::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIPaymentResponseV4::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIPaymentResponseV4::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIPaymentResponseV4::getAutoWithdrawnReasonCode() const {
    return m_auto_withdrawn_reason_code;
}
void OAIPaymentResponseV4::setAutoWithdrawnReasonCode(const QString &auto_withdrawn_reason_code) {
    m_auto_withdrawn_reason_code = auto_withdrawn_reason_code;
    m_auto_withdrawn_reason_code_isSet = true;
}

bool OAIPaymentResponseV4::is_auto_withdrawn_reason_code_Set() const{
    return m_auto_withdrawn_reason_code_isSet;
}

bool OAIPaymentResponseV4::is_auto_withdrawn_reason_code_Valid() const{
    return m_auto_withdrawn_reason_code_isValid;
}

QString OAIPaymentResponseV4::getCountryCode() const {
    return m_country_code;
}
void OAIPaymentResponseV4::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPaymentResponseV4::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPaymentResponseV4::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList<OAIPaymentEventResponse> OAIPaymentResponseV4::getEvents() const {
    return m_events;
}
void OAIPaymentResponseV4::setEvents(const QList<OAIPaymentEventResponse> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIPaymentResponseV4::is_events_Set() const{
    return m_events_isSet;
}

bool OAIPaymentResponseV4::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIPaymentResponseV4::getFilenameReference() const {
    return m_filename_reference;
}
void OAIPaymentResponseV4::setFilenameReference(const QString &filename_reference) {
    m_filename_reference = filename_reference;
    m_filename_reference_isSet = true;
}

bool OAIPaymentResponseV4::is_filename_reference_Set() const{
    return m_filename_reference_isSet;
}

bool OAIPaymentResponseV4::is_filename_reference_Valid() const{
    return m_filename_reference_isValid;
}

QString OAIPaymentResponseV4::getFundingStatus() const {
    return m_funding_status;
}
void OAIPaymentResponseV4::setFundingStatus(const QString &funding_status) {
    m_funding_status = funding_status;
    m_funding_status_isSet = true;
}

bool OAIPaymentResponseV4::is_funding_status_Set() const{
    return m_funding_status_isSet;
}

bool OAIPaymentResponseV4::is_funding_status_Valid() const{
    return m_funding_status_isValid;
}

QString OAIPaymentResponseV4::getIban() const {
    return m_iban;
}
void OAIPaymentResponseV4::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIPaymentResponseV4::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIPaymentResponseV4::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIPaymentResponseV4::getIndividualIdentificationNumber() const {
    return m_individual_identification_number;
}
void OAIPaymentResponseV4::setIndividualIdentificationNumber(const QString &individual_identification_number) {
    m_individual_identification_number = individual_identification_number;
    m_individual_identification_number_isSet = true;
}

bool OAIPaymentResponseV4::is_individual_identification_number_Set() const{
    return m_individual_identification_number_isSet;
}

bool OAIPaymentResponseV4::is_individual_identification_number_Valid() const{
    return m_individual_identification_number_isValid;
}

double OAIPaymentResponseV4::getInvertedRate() const {
    return m_inverted_rate;
}
void OAIPaymentResponseV4::setInvertedRate(const double &inverted_rate) {
    m_inverted_rate = inverted_rate;
    m_inverted_rate_isSet = true;
}

bool OAIPaymentResponseV4::is_inverted_rate_Set() const{
    return m_inverted_rate_isSet;
}

bool OAIPaymentResponseV4::is_inverted_rate_Valid() const{
    return m_inverted_rate_isValid;
}

bool OAIPaymentResponseV4::isIsPaymentCcyBaseCcy() const {
    return m_is_payment_ccy_base_ccy;
}
void OAIPaymentResponseV4::setIsPaymentCcyBaseCcy(const bool &is_payment_ccy_base_ccy) {
    m_is_payment_ccy_base_ccy = is_payment_ccy_base_ccy;
    m_is_payment_ccy_base_ccy_isSet = true;
}

bool OAIPaymentResponseV4::is_is_payment_ccy_base_ccy_Set() const{
    return m_is_payment_ccy_base_ccy_isSet;
}

bool OAIPaymentResponseV4::is_is_payment_ccy_base_ccy_Valid() const{
    return m_is_payment_ccy_base_ccy_isValid;
}

QString OAIPaymentResponseV4::getPayeeAddressCountryCode() const {
    return m_payee_address_country_code;
}
void OAIPaymentResponseV4::setPayeeAddressCountryCode(const QString &payee_address_country_code) {
    m_payee_address_country_code = payee_address_country_code;
    m_payee_address_country_code_isSet = true;
}

bool OAIPaymentResponseV4::is_payee_address_country_code_Set() const{
    return m_payee_address_country_code_isSet;
}

bool OAIPaymentResponseV4::is_payee_address_country_code_Valid() const{
    return m_payee_address_country_code_isValid;
}

QString OAIPaymentResponseV4::getPayeeId() const {
    return m_payee_id;
}
void OAIPaymentResponseV4::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIPaymentResponseV4::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIPaymentResponseV4::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

qint32 OAIPaymentResponseV4::getPaymentAmount() const {
    return m_payment_amount;
}
void OAIPaymentResponseV4::setPaymentAmount(const qint32 &payment_amount) {
    m_payment_amount = payment_amount;
    m_payment_amount_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_amount_Set() const{
    return m_payment_amount_isSet;
}

bool OAIPaymentResponseV4::is_payment_amount_Valid() const{
    return m_payment_amount_isValid;
}

QString OAIPaymentResponseV4::getPaymentChannelId() const {
    return m_payment_channel_id;
}
void OAIPaymentResponseV4::setPaymentChannelId(const QString &payment_channel_id) {
    m_payment_channel_id = payment_channel_id;
    m_payment_channel_id_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_channel_id_Set() const{
    return m_payment_channel_id_isSet;
}

bool OAIPaymentResponseV4::is_payment_channel_id_Valid() const{
    return m_payment_channel_id_isValid;
}

QString OAIPaymentResponseV4::getPaymentChannelName() const {
    return m_payment_channel_name;
}
void OAIPaymentResponseV4::setPaymentChannelName(const QString &payment_channel_name) {
    m_payment_channel_name = payment_channel_name;
    m_payment_channel_name_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_channel_name_Set() const{
    return m_payment_channel_name_isSet;
}

bool OAIPaymentResponseV4::is_payment_channel_name_Valid() const{
    return m_payment_channel_name_isValid;
}

QString OAIPaymentResponseV4::getPaymentCurrency() const {
    return m_payment_currency;
}
void OAIPaymentResponseV4::setPaymentCurrency(const QString &payment_currency) {
    m_payment_currency = payment_currency;
    m_payment_currency_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_currency_Set() const{
    return m_payment_currency_isSet;
}

bool OAIPaymentResponseV4::is_payment_currency_Valid() const{
    return m_payment_currency_isValid;
}

QString OAIPaymentResponseV4::getPaymentId() const {
    return m_payment_id;
}
void OAIPaymentResponseV4::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPaymentResponseV4::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIPaymentResponseV4::getPaymentMemo() const {
    return m_payment_memo;
}
void OAIPaymentResponseV4::setPaymentMemo(const QString &payment_memo) {
    m_payment_memo = payment_memo;
    m_payment_memo_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_memo_Set() const{
    return m_payment_memo_isSet;
}

bool OAIPaymentResponseV4::is_payment_memo_Valid() const{
    return m_payment_memo_isValid;
}

QString OAIPaymentResponseV4::getPaymentMetadata() const {
    return m_payment_metadata;
}
void OAIPaymentResponseV4::setPaymentMetadata(const QString &payment_metadata) {
    m_payment_metadata = payment_metadata;
    m_payment_metadata_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_metadata_Set() const{
    return m_payment_metadata_isSet;
}

bool OAIPaymentResponseV4::is_payment_metadata_Valid() const{
    return m_payment_metadata_isValid;
}

QString OAIPaymentResponseV4::getPaymentScheme() const {
    return m_payment_scheme;
}
void OAIPaymentResponseV4::setPaymentScheme(const QString &payment_scheme) {
    m_payment_scheme = payment_scheme;
    m_payment_scheme_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_scheme_Set() const{
    return m_payment_scheme_isSet;
}

bool OAIPaymentResponseV4::is_payment_scheme_Valid() const{
    return m_payment_scheme_isValid;
}

QString OAIPaymentResponseV4::getPaymentTrackingReference() const {
    return m_payment_tracking_reference;
}
void OAIPaymentResponseV4::setPaymentTrackingReference(const QString &payment_tracking_reference) {
    m_payment_tracking_reference = payment_tracking_reference;
    m_payment_tracking_reference_isSet = true;
}

bool OAIPaymentResponseV4::is_payment_tracking_reference_Set() const{
    return m_payment_tracking_reference_isSet;
}

bool OAIPaymentResponseV4::is_payment_tracking_reference_Valid() const{
    return m_payment_tracking_reference_isValid;
}

QString OAIPaymentResponseV4::getPayorId() const {
    return m_payor_id;
}
void OAIPaymentResponseV4::setPayorId(const QString &payor_id) {
    m_payor_id = payor_id;
    m_payor_id_isSet = true;
}

bool OAIPaymentResponseV4::is_payor_id_Set() const{
    return m_payor_id_isSet;
}

bool OAIPaymentResponseV4::is_payor_id_Valid() const{
    return m_payor_id_isValid;
}

QString OAIPaymentResponseV4::getPayorName() const {
    return m_payor_name;
}
void OAIPaymentResponseV4::setPayorName(const QString &payor_name) {
    m_payor_name = payor_name;
    m_payor_name_isSet = true;
}

bool OAIPaymentResponseV4::is_payor_name_Set() const{
    return m_payor_name_isSet;
}

bool OAIPaymentResponseV4::is_payor_name_Valid() const{
    return m_payor_name_isValid;
}

QString OAIPaymentResponseV4::getPayorPaymentId() const {
    return m_payor_payment_id;
}
void OAIPaymentResponseV4::setPayorPaymentId(const QString &payor_payment_id) {
    m_payor_payment_id = payor_payment_id;
    m_payor_payment_id_isSet = true;
}

bool OAIPaymentResponseV4::is_payor_payment_id_Set() const{
    return m_payor_payment_id_isSet;
}

bool OAIPaymentResponseV4::is_payor_payment_id_Valid() const{
    return m_payor_payment_id_isValid;
}

OAIPaymentResponseV4_payout OAIPaymentResponseV4::getPayout() const {
    return m_payout;
}
void OAIPaymentResponseV4::setPayout(const OAIPaymentResponseV4_payout &payout) {
    m_payout = payout;
    m_payout_isSet = true;
}

bool OAIPaymentResponseV4::is_payout_Set() const{
    return m_payout_isSet;
}

bool OAIPaymentResponseV4::is_payout_Valid() const{
    return m_payout_isValid;
}

OAIPostInstructFxInfo OAIPaymentResponseV4::getPostInstructFxInfo() const {
    return m_post_instruct_fx_info;
}
void OAIPaymentResponseV4::setPostInstructFxInfo(const OAIPostInstructFxInfo &post_instruct_fx_info) {
    m_post_instruct_fx_info = post_instruct_fx_info;
    m_post_instruct_fx_info_isSet = true;
}

bool OAIPaymentResponseV4::is_post_instruct_fx_info_Set() const{
    return m_post_instruct_fx_info_isSet;
}

bool OAIPaymentResponseV4::is_post_instruct_fx_info_Valid() const{
    return m_post_instruct_fx_info_isValid;
}

QString OAIPaymentResponseV4::getQuoteId() const {
    return m_quote_id;
}
void OAIPaymentResponseV4::setQuoteId(const QString &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAIPaymentResponseV4::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAIPaymentResponseV4::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAIPaymentResponseV4::getRailsBatchId() const {
    return m_rails_batch_id;
}
void OAIPaymentResponseV4::setRailsBatchId(const QString &rails_batch_id) {
    m_rails_batch_id = rails_batch_id;
    m_rails_batch_id_isSet = true;
}

bool OAIPaymentResponseV4::is_rails_batch_id_Set() const{
    return m_rails_batch_id_isSet;
}

bool OAIPaymentResponseV4::is_rails_batch_id_Valid() const{
    return m_rails_batch_id_isValid;
}

QString OAIPaymentResponseV4::getRailsId() const {
    return m_rails_id;
}
void OAIPaymentResponseV4::setRailsId(const QString &rails_id) {
    m_rails_id = rails_id;
    m_rails_id_isSet = true;
}

bool OAIPaymentResponseV4::is_rails_id_Set() const{
    return m_rails_id_isSet;
}

bool OAIPaymentResponseV4::is_rails_id_Valid() const{
    return m_rails_id_isValid;
}

QString OAIPaymentResponseV4::getRailsPaymentId() const {
    return m_rails_payment_id;
}
void OAIPaymentResponseV4::setRailsPaymentId(const QString &rails_payment_id) {
    m_rails_payment_id = rails_payment_id;
    m_rails_payment_id_isSet = true;
}

bool OAIPaymentResponseV4::is_rails_payment_id_Set() const{
    return m_rails_payment_id_isSet;
}

bool OAIPaymentResponseV4::is_rails_payment_id_Valid() const{
    return m_rails_payment_id_isValid;
}

double OAIPaymentResponseV4::getRate() const {
    return m_rate;
}
void OAIPaymentResponseV4::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIPaymentResponseV4::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIPaymentResponseV4::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIPaymentResponseV4::getRejectionReason() const {
    return m_rejection_reason;
}
void OAIPaymentResponseV4::setRejectionReason(const QString &rejection_reason) {
    m_rejection_reason = rejection_reason;
    m_rejection_reason_isSet = true;
}

bool OAIPaymentResponseV4::is_rejection_reason_Set() const{
    return m_rejection_reason_isSet;
}

bool OAIPaymentResponseV4::is_rejection_reason_Valid() const{
    return m_rejection_reason_isValid;
}

QString OAIPaymentResponseV4::getRemoteId() const {
    return m_remote_id;
}
void OAIPaymentResponseV4::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAIPaymentResponseV4::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAIPaymentResponseV4::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

QString OAIPaymentResponseV4::getRemoteSystemId() const {
    return m_remote_system_id;
}
void OAIPaymentResponseV4::setRemoteSystemId(const QString &remote_system_id) {
    m_remote_system_id = remote_system_id;
    m_remote_system_id_isSet = true;
}

bool OAIPaymentResponseV4::is_remote_system_id_Set() const{
    return m_remote_system_id_isSet;
}

bool OAIPaymentResponseV4::is_remote_system_id_Valid() const{
    return m_remote_system_id_isValid;
}

QString OAIPaymentResponseV4::getRemoteSystemPaymentId() const {
    return m_remote_system_payment_id;
}
void OAIPaymentResponseV4::setRemoteSystemPaymentId(const QString &remote_system_payment_id) {
    m_remote_system_payment_id = remote_system_payment_id;
    m_remote_system_payment_id_isSet = true;
}

bool OAIPaymentResponseV4::is_remote_system_payment_id_Set() const{
    return m_remote_system_payment_id_isSet;
}

bool OAIPaymentResponseV4::is_remote_system_payment_id_Valid() const{
    return m_remote_system_payment_id_isValid;
}

qint32 OAIPaymentResponseV4::getReturnCost() const {
    return m_return_cost;
}
void OAIPaymentResponseV4::setReturnCost(const qint32 &return_cost) {
    m_return_cost = return_cost;
    m_return_cost_isSet = true;
}

bool OAIPaymentResponseV4::is_return_cost_Set() const{
    return m_return_cost_isSet;
}

bool OAIPaymentResponseV4::is_return_cost_Valid() const{
    return m_return_cost_isValid;
}

QString OAIPaymentResponseV4::getReturnReason() const {
    return m_return_reason;
}
void OAIPaymentResponseV4::setReturnReason(const QString &return_reason) {
    m_return_reason = return_reason;
    m_return_reason_isSet = true;
}

bool OAIPaymentResponseV4::is_return_reason_Set() const{
    return m_return_reason_isSet;
}

bool OAIPaymentResponseV4::is_return_reason_Valid() const{
    return m_return_reason_isValid;
}

QString OAIPaymentResponseV4::getRoutingNumber() const {
    return m_routing_number;
}
void OAIPaymentResponseV4::setRoutingNumber(const QString &routing_number) {
    m_routing_number = routing_number;
    m_routing_number_isSet = true;
}

bool OAIPaymentResponseV4::is_routing_number_Set() const{
    return m_routing_number_isSet;
}

bool OAIPaymentResponseV4::is_routing_number_Valid() const{
    return m_routing_number_isValid;
}

OAIPayoutSchedule OAIPaymentResponseV4::getSchedule() const {
    return m_schedule;
}
void OAIPaymentResponseV4::setSchedule(const OAIPayoutSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIPaymentResponseV4::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIPaymentResponseV4::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIPaymentResponseV4::getSourceAccountId() const {
    return m_source_account_id;
}
void OAIPaymentResponseV4::setSourceAccountId(const QString &source_account_id) {
    m_source_account_id = source_account_id;
    m_source_account_id_isSet = true;
}

bool OAIPaymentResponseV4::is_source_account_id_Set() const{
    return m_source_account_id_isSet;
}

bool OAIPaymentResponseV4::is_source_account_id_Valid() const{
    return m_source_account_id_isValid;
}

QString OAIPaymentResponseV4::getSourceAccountName() const {
    return m_source_account_name;
}
void OAIPaymentResponseV4::setSourceAccountName(const QString &source_account_name) {
    m_source_account_name = source_account_name;
    m_source_account_name_isSet = true;
}

bool OAIPaymentResponseV4::is_source_account_name_Set() const{
    return m_source_account_name_isSet;
}

bool OAIPaymentResponseV4::is_source_account_name_Valid() const{
    return m_source_account_name_isValid;
}

qint32 OAIPaymentResponseV4::getSourceAmount() const {
    return m_source_amount;
}
void OAIPaymentResponseV4::setSourceAmount(const qint32 &source_amount) {
    m_source_amount = source_amount;
    m_source_amount_isSet = true;
}

bool OAIPaymentResponseV4::is_source_amount_Set() const{
    return m_source_amount_isSet;
}

bool OAIPaymentResponseV4::is_source_amount_Valid() const{
    return m_source_amount_isValid;
}

QString OAIPaymentResponseV4::getSourceCurrency() const {
    return m_source_currency;
}
void OAIPaymentResponseV4::setSourceCurrency(const QString &source_currency) {
    m_source_currency = source_currency;
    m_source_currency_isSet = true;
}

bool OAIPaymentResponseV4::is_source_currency_Set() const{
    return m_source_currency_isSet;
}

bool OAIPaymentResponseV4::is_source_currency_Valid() const{
    return m_source_currency_isValid;
}

QString OAIPaymentResponseV4::getStatus() const {
    return m_status;
}
void OAIPaymentResponseV4::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentResponseV4::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentResponseV4::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIPaymentResponseV4::getSubmittedDateTime() const {
    return m_submitted_date_time;
}
void OAIPaymentResponseV4::setSubmittedDateTime(const QDateTime &submitted_date_time) {
    m_submitted_date_time = submitted_date_time;
    m_submitted_date_time_isSet = true;
}

bool OAIPaymentResponseV4::is_submitted_date_time_Set() const{
    return m_submitted_date_time_isSet;
}

bool OAIPaymentResponseV4::is_submitted_date_time_Valid() const{
    return m_submitted_date_time_isValid;
}

QString OAIPaymentResponseV4::getTraceNumber() const {
    return m_trace_number;
}
void OAIPaymentResponseV4::setTraceNumber(const QString &trace_number) {
    m_trace_number = trace_number;
    m_trace_number_isSet = true;
}

bool OAIPaymentResponseV4::is_trace_number_Set() const{
    return m_trace_number_isSet;
}

bool OAIPaymentResponseV4::is_trace_number_Valid() const{
    return m_trace_number_isValid;
}

QString OAIPaymentResponseV4::getTransmissionType() const {
    return m_transmission_type;
}
void OAIPaymentResponseV4::setTransmissionType(const QString &transmission_type) {
    m_transmission_type = transmission_type;
    m_transmission_type_isSet = true;
}

bool OAIPaymentResponseV4::is_transmission_type_Set() const{
    return m_transmission_type_isSet;
}

bool OAIPaymentResponseV4::is_transmission_type_Valid() const{
    return m_transmission_type_isValid;
}

bool OAIPaymentResponseV4::isWithdrawable() const {
    return m_withdrawable;
}
void OAIPaymentResponseV4::setWithdrawable(const bool &withdrawable) {
    m_withdrawable = withdrawable;
    m_withdrawable_isSet = true;
}

bool OAIPaymentResponseV4::is_withdrawable_Set() const{
    return m_withdrawable_isSet;
}

bool OAIPaymentResponseV4::is_withdrawable_Valid() const{
    return m_withdrawable_isValid;
}

QString OAIPaymentResponseV4::getWithdrawnReason() const {
    return m_withdrawn_reason;
}
void OAIPaymentResponseV4::setWithdrawnReason(const QString &withdrawn_reason) {
    m_withdrawn_reason = withdrawn_reason;
    m_withdrawn_reason_isSet = true;
}

bool OAIPaymentResponseV4::is_withdrawn_reason_Set() const{
    return m_withdrawn_reason_isSet;
}

bool OAIPaymentResponseV4::is_withdrawn_reason_Valid() const{
    return m_withdrawn_reason_isValid;
}

bool OAIPaymentResponseV4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_withdrawn_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inverted_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_payment_ccy_base_ccy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_address_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_tracking_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payor_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_instruct_fx_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rails_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rails_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rails_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_system_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawn_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResponseV4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && m_funding_status_isValid && m_payee_id_isValid && m_payment_amount_isValid && m_payment_id_isValid && m_payor_id_isValid && m_quote_id_isValid && m_rails_id_isValid && m_source_account_id_isValid && m_status_isValid && m_submitted_date_time_isValid && true;
}

} // namespace OpenAPI
