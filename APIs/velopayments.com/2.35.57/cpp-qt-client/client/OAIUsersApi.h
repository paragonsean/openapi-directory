/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInline_response_400.h"
#include "OAIInline_response_401.h"
#include "OAIInline_response_403.h"
#include "OAIInline_response_404.h"
#include "OAIInline_response_409.h"
#include "OAIInline_response_412.h"
#include "OAIInviteUserRequest.h"
#include "OAIPagedUserResponse.h"
#include "OAIPasswordRequest.h"
#include "OAIPayeeType.h"
#include "OAIPayeeUserSelfUpdateRequest.h"
#include "OAIRegisterSmsRequest.h"
#include "OAIResendTokenRequest.h"
#include "OAIRoleUpdateRequest.h"
#include "OAISelfMFATypeUnregisterRequest.h"
#include "OAISelfUpdatePasswordRequest.h"
#include "OAIUnregisterMFARequest.h"
#include "OAIUserDetailsUpdateRequest.h"
#include "OAIUserResponse.h"
#include "OAIUserStatus.h"
#include "OAIUserType.h"
#include "OAIValidatePasswordResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void deleteUserByIdV2(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void disableUserV2(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void enableUserV2(const QString &user_id);


    virtual void getSelf();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUserByIdV2(const QString &user_id);

    /**
    * @param[in]  oai_invite_user_request OAIInviteUserRequest [required]
    */
    virtual void inviteUser(const OAIInviteUserRequest &oai_invite_user_request);

    /**
    * @param[in]  type OAIUserType [optional]
    * @param[in]  status OAIUserStatus [optional]
    * @param[in]  entity_id QString [optional]
    * @param[in]  payee_type OAIPayeeType [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void listUsers(const ::OpenAPI::OptionalParam<OAIUserType> &type = ::OpenAPI::OptionalParam<OAIUserType>(), const ::OpenAPI::OptionalParam<OAIUserStatus> &status = ::OpenAPI::OptionalParam<OAIUserStatus>(), const ::OpenAPI::OptionalParam<QString> &entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPayeeType> &payee_type = ::OpenAPI::OptionalParam<OAIPayeeType>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_register_sms_request OAIRegisterSmsRequest [required]
    */
    virtual void registerSms(const OAIRegisterSmsRequest &oai_register_sms_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_resend_token_request OAIResendTokenRequest [required]
    */
    virtual void resendToken(const QString &user_id, const OAIResendTokenRequest &oai_resend_token_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_role_update_request OAIRoleUpdateRequest [required]
    */
    virtual void roleUpdate(const QString &user_id, const OAIRoleUpdateRequest &oai_role_update_request);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void unlockUserV2(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_unregister_mfa_request OAIUnregisterMFARequest [required]
    */
    virtual void unregisterMFA(const QString &user_id, const OAIUnregisterMFARequest &oai_unregister_mfa_request);

    /**
    * @param[in]  oai_self_mfa_type_unregister_request OAISelfMFATypeUnregisterRequest [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void unregisterMFAForSelf(const OAISelfMFATypeUnregisterRequest &oai_self_mfa_type_unregister_request, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_self_update_password_request OAISelfUpdatePasswordRequest [required]
    */
    virtual void updatePasswordSelf(const OAISelfUpdatePasswordRequest &oai_self_update_password_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_details_update_request OAIUserDetailsUpdateRequest [required]
    */
    virtual void userDetailsUpdate(const QString &user_id, const OAIUserDetailsUpdateRequest &oai_user_details_update_request);

    /**
    * @param[in]  oai_payee_user_self_update_request OAIPayeeUserSelfUpdateRequest [required]
    */
    virtual void userDetailsUpdateForSelf(const OAIPayeeUserSelfUpdateRequest &oai_payee_user_self_update_request);

    /**
    * @param[in]  oai_password_request OAIPasswordRequest [required]
    */
    virtual void validatePasswordSelf(const OAIPasswordRequest &oai_password_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserByIdV2Callback(OAIHttpRequestWorker *worker);
    void disableUserV2Callback(OAIHttpRequestWorker *worker);
    void enableUserV2Callback(OAIHttpRequestWorker *worker);
    void getSelfCallback(OAIHttpRequestWorker *worker);
    void getUserByIdV2Callback(OAIHttpRequestWorker *worker);
    void inviteUserCallback(OAIHttpRequestWorker *worker);
    void listUsersCallback(OAIHttpRequestWorker *worker);
    void registerSmsCallback(OAIHttpRequestWorker *worker);
    void resendTokenCallback(OAIHttpRequestWorker *worker);
    void roleUpdateCallback(OAIHttpRequestWorker *worker);
    void unlockUserV2Callback(OAIHttpRequestWorker *worker);
    void unregisterMFACallback(OAIHttpRequestWorker *worker);
    void unregisterMFAForSelfCallback(OAIHttpRequestWorker *worker);
    void updatePasswordSelfCallback(OAIHttpRequestWorker *worker);
    void userDetailsUpdateCallback(OAIHttpRequestWorker *worker);
    void userDetailsUpdateForSelfCallback(OAIHttpRequestWorker *worker);
    void validatePasswordSelfCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserByIdV2Signal();
    void disableUserV2Signal();
    void enableUserV2Signal();
    void getSelfSignal(OAIUserResponse summary);
    void getUserByIdV2Signal(OAIUserResponse summary);
    void inviteUserSignal();
    void listUsersSignal(OAIPagedUserResponse summary);
    void registerSmsSignal();
    void resendTokenSignal();
    void roleUpdateSignal();
    void unlockUserV2Signal();
    void unregisterMFASignal();
    void unregisterMFAForSelfSignal();
    void updatePasswordSelfSignal();
    void userDetailsUpdateSignal();
    void userDetailsUpdateForSelfSignal();
    void validatePasswordSelfSignal(OAIValidatePasswordResponse summary);


    void deleteUserByIdV2SignalFull(OAIHttpRequestWorker *worker);
    void disableUserV2SignalFull(OAIHttpRequestWorker *worker);
    void enableUserV2SignalFull(OAIHttpRequestWorker *worker);
    void getSelfSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void getUserByIdV2SignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void inviteUserSignalFull(OAIHttpRequestWorker *worker);
    void listUsersSignalFull(OAIHttpRequestWorker *worker, OAIPagedUserResponse summary);
    void registerSmsSignalFull(OAIHttpRequestWorker *worker);
    void resendTokenSignalFull(OAIHttpRequestWorker *worker);
    void roleUpdateSignalFull(OAIHttpRequestWorker *worker);
    void unlockUserV2SignalFull(OAIHttpRequestWorker *worker);
    void unregisterMFASignalFull(OAIHttpRequestWorker *worker);
    void unregisterMFAForSelfSignalFull(OAIHttpRequestWorker *worker);
    void updatePasswordSelfSignalFull(OAIHttpRequestWorker *worker);
    void userDetailsUpdateSignalFull(OAIHttpRequestWorker *worker);
    void userDetailsUpdateForSelfSignalFull(OAIHttpRequestWorker *worker);
    void validatePasswordSelfSignalFull(OAIHttpRequestWorker *worker, OAIValidatePasswordResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteUserByIdV2SignalError() instead")
    void deleteUserByIdV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserByIdV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableUserV2SignalError() instead")
    void disableUserV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableUserV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUserV2SignalError() instead")
    void enableUserV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableUserV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfSignalError() instead")
    void getSelfSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdV2SignalError() instead")
    void getUserByIdV2SignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdV2SignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUserSignalError() instead")
    void inviteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalError() instead")
    void listUsersSignalE(OAIPagedUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalError(OAIPagedUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerSmsSignalError() instead")
    void registerSmsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registerSmsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendTokenSignalError() instead")
    void resendTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleUpdateSignalError() instead")
    void roleUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void roleUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockUserV2SignalError() instead")
    void unlockUserV2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlockUserV2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterMFASignalError() instead")
    void unregisterMFASignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterMFASignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterMFAForSelfSignalError() instead")
    void unregisterMFAForSelfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterMFAForSelfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePasswordSelfSignalError() instead")
    void updatePasswordSelfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePasswordSelfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDetailsUpdateSignalError() instead")
    void userDetailsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDetailsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDetailsUpdateForSelfSignalError() instead")
    void userDetailsUpdateForSelfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userDetailsUpdateForSelfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePasswordSelfSignalError() instead")
    void validatePasswordSelfSignalE(OAIValidatePasswordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePasswordSelfSignalError(OAIValidatePasswordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserByIdV2SignalErrorFull() instead")
    void deleteUserByIdV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserByIdV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableUserV2SignalErrorFull() instead")
    void disableUserV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableUserV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUserV2SignalErrorFull() instead")
    void enableUserV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableUserV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfSignalErrorFull() instead")
    void getSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdV2SignalErrorFull() instead")
    void getUserByIdV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUserSignalErrorFull() instead")
    void inviteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalErrorFull() instead")
    void listUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerSmsSignalErrorFull() instead")
    void registerSmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerSmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendTokenSignalErrorFull() instead")
    void resendTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleUpdateSignalErrorFull() instead")
    void roleUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockUserV2SignalErrorFull() instead")
    void unlockUserV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockUserV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterMFASignalErrorFull() instead")
    void unregisterMFASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterMFASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterMFAForSelfSignalErrorFull() instead")
    void unregisterMFAForSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterMFAForSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePasswordSelfSignalErrorFull() instead")
    void updatePasswordSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePasswordSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDetailsUpdateSignalErrorFull() instead")
    void userDetailsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDetailsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userDetailsUpdateForSelfSignalErrorFull() instead")
    void userDetailsUpdateForSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userDetailsUpdateForSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePasswordSelfSignalErrorFull() instead")
    void validatePasswordSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePasswordSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
