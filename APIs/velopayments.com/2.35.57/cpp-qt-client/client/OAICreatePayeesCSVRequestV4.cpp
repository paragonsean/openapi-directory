/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePayeesCSVRequestV4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePayeesCSVRequestV4::OAICreatePayeesCSVRequestV4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePayeesCSVRequestV4::OAICreatePayeesCSVRequestV4() {
    this->initializeModel();
}

OAICreatePayeesCSVRequestV4::~OAICreatePayeesCSVRequestV4() {}

void OAICreatePayeesCSVRequestV4::initializeModel() {

    m_address_city_isSet = false;
    m_address_city_isValid = false;

    m_address_country_isSet = false;
    m_address_country_isValid = false;

    m_address_county_or_province_isSet = false;
    m_address_county_or_province_isValid = false;

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_address_line4_isSet = false;
    m_address_line4_isValid = false;

    m_address_zip_or_postcode_isSet = false;
    m_address_zip_or_postcode_isValid = false;

    m_challenge_description_isSet = false;
    m_challenge_description_isValid = false;

    m_challenge_value_isSet = false;
    m_challenge_value_isValid = false;

    m_company_ein_isSet = false;
    m_company_ein_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_company_operating_name_isSet = false;
    m_company_operating_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_individual_date_of_birth_isSet = false;
    m_individual_date_of_birth_isValid = false;

    m_individual_first_name_isSet = false;
    m_individual_first_name_isValid = false;

    m_individual_last_name_isSet = false;
    m_individual_last_name_isValid = false;

    m_individual_national_identification_isSet = false;
    m_individual_national_identification_isValid = false;

    m_individual_other_names_isSet = false;
    m_individual_other_names_isValid = false;

    m_individual_title_isSet = false;
    m_individual_title_isValid = false;

    m_payee_language_isSet = false;
    m_payee_language_isValid = false;

    m_payment_channel_account_name_isSet = false;
    m_payment_channel_account_name_isValid = false;

    m_payment_channel_account_number_isSet = false;
    m_payment_channel_account_number_isValid = false;

    m_payment_channel_country_code_isSet = false;
    m_payment_channel_country_code_isValid = false;

    m_payment_channel_currency_isSet = false;
    m_payment_channel_currency_isValid = false;

    m_payment_channel_iban_isSet = false;
    m_payment_channel_iban_isValid = false;

    m_payment_channel_routing_number_isSet = false;
    m_payment_channel_routing_number_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreatePayeesCSVRequestV4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePayeesCSVRequestV4::fromJsonObject(QJsonObject json) {

    m_address_city_isValid = ::OpenAPI::fromJsonValue(m_address_city, json[QString("addressCity")]);
    m_address_city_isSet = !json[QString("addressCity")].isNull() && m_address_city_isValid;

    m_address_country_isValid = ::OpenAPI::fromJsonValue(m_address_country, json[QString("addressCountry")]);
    m_address_country_isSet = !json[QString("addressCountry")].isNull() && m_address_country_isValid;

    m_address_county_or_province_isValid = ::OpenAPI::fromJsonValue(m_address_county_or_province, json[QString("addressCountyOrProvince")]);
    m_address_county_or_province_isSet = !json[QString("addressCountyOrProvince")].isNull() && m_address_county_or_province_isValid;

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("addressLine3")]);
    m_address_line3_isSet = !json[QString("addressLine3")].isNull() && m_address_line3_isValid;

    m_address_line4_isValid = ::OpenAPI::fromJsonValue(m_address_line4, json[QString("addressLine4")]);
    m_address_line4_isSet = !json[QString("addressLine4")].isNull() && m_address_line4_isValid;

    m_address_zip_or_postcode_isValid = ::OpenAPI::fromJsonValue(m_address_zip_or_postcode, json[QString("addressZipOrPostcode")]);
    m_address_zip_or_postcode_isSet = !json[QString("addressZipOrPostcode")].isNull() && m_address_zip_or_postcode_isValid;

    m_challenge_description_isValid = ::OpenAPI::fromJsonValue(m_challenge_description, json[QString("challengeDescription")]);
    m_challenge_description_isSet = !json[QString("challengeDescription")].isNull() && m_challenge_description_isValid;

    m_challenge_value_isValid = ::OpenAPI::fromJsonValue(m_challenge_value, json[QString("challengeValue")]);
    m_challenge_value_isSet = !json[QString("challengeValue")].isNull() && m_challenge_value_isValid;

    m_company_ein_isValid = ::OpenAPI::fromJsonValue(m_company_ein, json[QString("companyEIN")]);
    m_company_ein_isSet = !json[QString("companyEIN")].isNull() && m_company_ein_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_company_operating_name_isValid = ::OpenAPI::fromJsonValue(m_company_operating_name, json[QString("companyOperatingName")]);
    m_company_operating_name_isSet = !json[QString("companyOperatingName")].isNull() && m_company_operating_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_individual_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_individual_date_of_birth, json[QString("individualDateOfBirth")]);
    m_individual_date_of_birth_isSet = !json[QString("individualDateOfBirth")].isNull() && m_individual_date_of_birth_isValid;

    m_individual_first_name_isValid = ::OpenAPI::fromJsonValue(m_individual_first_name, json[QString("individualFirstName")]);
    m_individual_first_name_isSet = !json[QString("individualFirstName")].isNull() && m_individual_first_name_isValid;

    m_individual_last_name_isValid = ::OpenAPI::fromJsonValue(m_individual_last_name, json[QString("individualLastName")]);
    m_individual_last_name_isSet = !json[QString("individualLastName")].isNull() && m_individual_last_name_isValid;

    m_individual_national_identification_isValid = ::OpenAPI::fromJsonValue(m_individual_national_identification, json[QString("individualNationalIdentification")]);
    m_individual_national_identification_isSet = !json[QString("individualNationalIdentification")].isNull() && m_individual_national_identification_isValid;

    m_individual_other_names_isValid = ::OpenAPI::fromJsonValue(m_individual_other_names, json[QString("individualOtherNames")]);
    m_individual_other_names_isSet = !json[QString("individualOtherNames")].isNull() && m_individual_other_names_isValid;

    m_individual_title_isValid = ::OpenAPI::fromJsonValue(m_individual_title, json[QString("individualTitle")]);
    m_individual_title_isSet = !json[QString("individualTitle")].isNull() && m_individual_title_isValid;

    m_payee_language_isValid = ::OpenAPI::fromJsonValue(m_payee_language, json[QString("payeeLanguage")]);
    m_payee_language_isSet = !json[QString("payeeLanguage")].isNull() && m_payee_language_isValid;

    m_payment_channel_account_name_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_account_name, json[QString("paymentChannelAccountName")]);
    m_payment_channel_account_name_isSet = !json[QString("paymentChannelAccountName")].isNull() && m_payment_channel_account_name_isValid;

    m_payment_channel_account_number_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_account_number, json[QString("paymentChannelAccountNumber")]);
    m_payment_channel_account_number_isSet = !json[QString("paymentChannelAccountNumber")].isNull() && m_payment_channel_account_number_isValid;

    m_payment_channel_country_code_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_country_code, json[QString("paymentChannelCountryCode")]);
    m_payment_channel_country_code_isSet = !json[QString("paymentChannelCountryCode")].isNull() && m_payment_channel_country_code_isValid;

    m_payment_channel_currency_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_currency, json[QString("paymentChannelCurrency")]);
    m_payment_channel_currency_isSet = !json[QString("paymentChannelCurrency")].isNull() && m_payment_channel_currency_isValid;

    m_payment_channel_iban_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_iban, json[QString("paymentChannelIban")]);
    m_payment_channel_iban_isSet = !json[QString("paymentChannelIban")].isNull() && m_payment_channel_iban_isValid;

    m_payment_channel_routing_number_isValid = ::OpenAPI::fromJsonValue(m_payment_channel_routing_number, json[QString("paymentChannelRoutingNumber")]);
    m_payment_channel_routing_number_isSet = !json[QString("paymentChannelRoutingNumber")].isNull() && m_payment_channel_routing_number_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("remoteId")]);
    m_remote_id_isSet = !json[QString("remoteId")].isNull() && m_remote_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreatePayeesCSVRequestV4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePayeesCSVRequestV4::asJsonObject() const {
    QJsonObject obj;
    if (m_address_city_isSet) {
        obj.insert(QString("addressCity"), ::OpenAPI::toJsonValue(m_address_city));
    }
    if (m_address_country_isSet) {
        obj.insert(QString("addressCountry"), ::OpenAPI::toJsonValue(m_address_country));
    }
    if (m_address_county_or_province_isSet) {
        obj.insert(QString("addressCountyOrProvince"), ::OpenAPI::toJsonValue(m_address_county_or_province));
    }
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3_isSet) {
        obj.insert(QString("addressLine3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_address_line4_isSet) {
        obj.insert(QString("addressLine4"), ::OpenAPI::toJsonValue(m_address_line4));
    }
    if (m_address_zip_or_postcode_isSet) {
        obj.insert(QString("addressZipOrPostcode"), ::OpenAPI::toJsonValue(m_address_zip_or_postcode));
    }
    if (m_challenge_description_isSet) {
        obj.insert(QString("challengeDescription"), ::OpenAPI::toJsonValue(m_challenge_description));
    }
    if (m_challenge_value_isSet) {
        obj.insert(QString("challengeValue"), ::OpenAPI::toJsonValue(m_challenge_value));
    }
    if (m_company_ein_isSet) {
        obj.insert(QString("companyEIN"), ::OpenAPI::toJsonValue(m_company_ein));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_company_operating_name_isSet) {
        obj.insert(QString("companyOperatingName"), ::OpenAPI::toJsonValue(m_company_operating_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_individual_date_of_birth_isSet) {
        obj.insert(QString("individualDateOfBirth"), ::OpenAPI::toJsonValue(m_individual_date_of_birth));
    }
    if (m_individual_first_name_isSet) {
        obj.insert(QString("individualFirstName"), ::OpenAPI::toJsonValue(m_individual_first_name));
    }
    if (m_individual_last_name_isSet) {
        obj.insert(QString("individualLastName"), ::OpenAPI::toJsonValue(m_individual_last_name));
    }
    if (m_individual_national_identification_isSet) {
        obj.insert(QString("individualNationalIdentification"), ::OpenAPI::toJsonValue(m_individual_national_identification));
    }
    if (m_individual_other_names_isSet) {
        obj.insert(QString("individualOtherNames"), ::OpenAPI::toJsonValue(m_individual_other_names));
    }
    if (m_individual_title_isSet) {
        obj.insert(QString("individualTitle"), ::OpenAPI::toJsonValue(m_individual_title));
    }
    if (m_payee_language_isSet) {
        obj.insert(QString("payeeLanguage"), ::OpenAPI::toJsonValue(m_payee_language));
    }
    if (m_payment_channel_account_name_isSet) {
        obj.insert(QString("paymentChannelAccountName"), ::OpenAPI::toJsonValue(m_payment_channel_account_name));
    }
    if (m_payment_channel_account_number_isSet) {
        obj.insert(QString("paymentChannelAccountNumber"), ::OpenAPI::toJsonValue(m_payment_channel_account_number));
    }
    if (m_payment_channel_country_code_isSet) {
        obj.insert(QString("paymentChannelCountryCode"), ::OpenAPI::toJsonValue(m_payment_channel_country_code));
    }
    if (m_payment_channel_currency_isSet) {
        obj.insert(QString("paymentChannelCurrency"), ::OpenAPI::toJsonValue(m_payment_channel_currency));
    }
    if (m_payment_channel_iban_isSet) {
        obj.insert(QString("paymentChannelIban"), ::OpenAPI::toJsonValue(m_payment_channel_iban));
    }
    if (m_payment_channel_routing_number_isSet) {
        obj.insert(QString("paymentChannelRoutingNumber"), ::OpenAPI::toJsonValue(m_payment_channel_routing_number));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("remoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreatePayeesCSVRequestV4::getAddressCity() const {
    return m_address_city;
}
void OAICreatePayeesCSVRequestV4::setAddressCity(const QString &address_city) {
    m_address_city = address_city;
    m_address_city_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_city_Set() const{
    return m_address_city_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_city_Valid() const{
    return m_address_city_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressCountry() const {
    return m_address_country;
}
void OAICreatePayeesCSVRequestV4::setAddressCountry(const QString &address_country) {
    m_address_country = address_country;
    m_address_country_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_country_Set() const{
    return m_address_country_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_country_Valid() const{
    return m_address_country_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressCountyOrProvince() const {
    return m_address_county_or_province;
}
void OAICreatePayeesCSVRequestV4::setAddressCountyOrProvince(const QString &address_county_or_province) {
    m_address_county_or_province = address_county_or_province;
    m_address_county_or_province_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_county_or_province_Set() const{
    return m_address_county_or_province_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_county_or_province_Valid() const{
    return m_address_county_or_province_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressLine1() const {
    return m_address_line1;
}
void OAICreatePayeesCSVRequestV4::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressLine2() const {
    return m_address_line2;
}
void OAICreatePayeesCSVRequestV4::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressLine3() const {
    return m_address_line3;
}
void OAICreatePayeesCSVRequestV4::setAddressLine3(const QString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressLine4() const {
    return m_address_line4;
}
void OAICreatePayeesCSVRequestV4::setAddressLine4(const QString &address_line4) {
    m_address_line4 = address_line4;
    m_address_line4_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_line4_Set() const{
    return m_address_line4_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_line4_Valid() const{
    return m_address_line4_isValid;
}

QString OAICreatePayeesCSVRequestV4::getAddressZipOrPostcode() const {
    return m_address_zip_or_postcode;
}
void OAICreatePayeesCSVRequestV4::setAddressZipOrPostcode(const QString &address_zip_or_postcode) {
    m_address_zip_or_postcode = address_zip_or_postcode;
    m_address_zip_or_postcode_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_address_zip_or_postcode_Set() const{
    return m_address_zip_or_postcode_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_address_zip_or_postcode_Valid() const{
    return m_address_zip_or_postcode_isValid;
}

QString OAICreatePayeesCSVRequestV4::getChallengeDescription() const {
    return m_challenge_description;
}
void OAICreatePayeesCSVRequestV4::setChallengeDescription(const QString &challenge_description) {
    m_challenge_description = challenge_description;
    m_challenge_description_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_challenge_description_Set() const{
    return m_challenge_description_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_challenge_description_Valid() const{
    return m_challenge_description_isValid;
}

QString OAICreatePayeesCSVRequestV4::getChallengeValue() const {
    return m_challenge_value;
}
void OAICreatePayeesCSVRequestV4::setChallengeValue(const QString &challenge_value) {
    m_challenge_value = challenge_value;
    m_challenge_value_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_challenge_value_Set() const{
    return m_challenge_value_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_challenge_value_Valid() const{
    return m_challenge_value_isValid;
}

QString OAICreatePayeesCSVRequestV4::getCompanyEin() const {
    return m_company_ein;
}
void OAICreatePayeesCSVRequestV4::setCompanyEin(const QString &company_ein) {
    m_company_ein = company_ein;
    m_company_ein_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_company_ein_Set() const{
    return m_company_ein_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_company_ein_Valid() const{
    return m_company_ein_isValid;
}

QString OAICreatePayeesCSVRequestV4::getCompanyName() const {
    return m_company_name;
}
void OAICreatePayeesCSVRequestV4::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAICreatePayeesCSVRequestV4::getCompanyOperatingName() const {
    return m_company_operating_name;
}
void OAICreatePayeesCSVRequestV4::setCompanyOperatingName(const QString &company_operating_name) {
    m_company_operating_name = company_operating_name;
    m_company_operating_name_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_company_operating_name_Set() const{
    return m_company_operating_name_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_company_operating_name_Valid() const{
    return m_company_operating_name_isValid;
}

QString OAICreatePayeesCSVRequestV4::getEmail() const {
    return m_email;
}
void OAICreatePayeesCSVRequestV4::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_email_Valid() const{
    return m_email_isValid;
}

QDate OAICreatePayeesCSVRequestV4::getIndividualDateOfBirth() const {
    return m_individual_date_of_birth;
}
void OAICreatePayeesCSVRequestV4::setIndividualDateOfBirth(const QDate &individual_date_of_birth) {
    m_individual_date_of_birth = individual_date_of_birth;
    m_individual_date_of_birth_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_date_of_birth_Set() const{
    return m_individual_date_of_birth_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_date_of_birth_Valid() const{
    return m_individual_date_of_birth_isValid;
}

QString OAICreatePayeesCSVRequestV4::getIndividualFirstName() const {
    return m_individual_first_name;
}
void OAICreatePayeesCSVRequestV4::setIndividualFirstName(const QString &individual_first_name) {
    m_individual_first_name = individual_first_name;
    m_individual_first_name_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_first_name_Set() const{
    return m_individual_first_name_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_first_name_Valid() const{
    return m_individual_first_name_isValid;
}

QString OAICreatePayeesCSVRequestV4::getIndividualLastName() const {
    return m_individual_last_name;
}
void OAICreatePayeesCSVRequestV4::setIndividualLastName(const QString &individual_last_name) {
    m_individual_last_name = individual_last_name;
    m_individual_last_name_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_last_name_Set() const{
    return m_individual_last_name_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_last_name_Valid() const{
    return m_individual_last_name_isValid;
}

QString OAICreatePayeesCSVRequestV4::getIndividualNationalIdentification() const {
    return m_individual_national_identification;
}
void OAICreatePayeesCSVRequestV4::setIndividualNationalIdentification(const QString &individual_national_identification) {
    m_individual_national_identification = individual_national_identification;
    m_individual_national_identification_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_national_identification_Set() const{
    return m_individual_national_identification_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_national_identification_Valid() const{
    return m_individual_national_identification_isValid;
}

QString OAICreatePayeesCSVRequestV4::getIndividualOtherNames() const {
    return m_individual_other_names;
}
void OAICreatePayeesCSVRequestV4::setIndividualOtherNames(const QString &individual_other_names) {
    m_individual_other_names = individual_other_names;
    m_individual_other_names_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_other_names_Set() const{
    return m_individual_other_names_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_other_names_Valid() const{
    return m_individual_other_names_isValid;
}

QString OAICreatePayeesCSVRequestV4::getIndividualTitle() const {
    return m_individual_title;
}
void OAICreatePayeesCSVRequestV4::setIndividualTitle(const QString &individual_title) {
    m_individual_title = individual_title;
    m_individual_title_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_individual_title_Set() const{
    return m_individual_title_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_individual_title_Valid() const{
    return m_individual_title_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPayeeLanguage() const {
    return m_payee_language;
}
void OAICreatePayeesCSVRequestV4::setPayeeLanguage(const QString &payee_language) {
    m_payee_language = payee_language;
    m_payee_language_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payee_language_Set() const{
    return m_payee_language_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payee_language_Valid() const{
    return m_payee_language_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelAccountName() const {
    return m_payment_channel_account_name;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelAccountName(const QString &payment_channel_account_name) {
    m_payment_channel_account_name = payment_channel_account_name;
    m_payment_channel_account_name_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_account_name_Set() const{
    return m_payment_channel_account_name_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_account_name_Valid() const{
    return m_payment_channel_account_name_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelAccountNumber() const {
    return m_payment_channel_account_number;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelAccountNumber(const QString &payment_channel_account_number) {
    m_payment_channel_account_number = payment_channel_account_number;
    m_payment_channel_account_number_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_account_number_Set() const{
    return m_payment_channel_account_number_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_account_number_Valid() const{
    return m_payment_channel_account_number_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelCountryCode() const {
    return m_payment_channel_country_code;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelCountryCode(const QString &payment_channel_country_code) {
    m_payment_channel_country_code = payment_channel_country_code;
    m_payment_channel_country_code_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_country_code_Set() const{
    return m_payment_channel_country_code_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_country_code_Valid() const{
    return m_payment_channel_country_code_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelCurrency() const {
    return m_payment_channel_currency;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelCurrency(const QString &payment_channel_currency) {
    m_payment_channel_currency = payment_channel_currency;
    m_payment_channel_currency_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_currency_Set() const{
    return m_payment_channel_currency_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_currency_Valid() const{
    return m_payment_channel_currency_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelIban() const {
    return m_payment_channel_iban;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelIban(const QString &payment_channel_iban) {
    m_payment_channel_iban = payment_channel_iban;
    m_payment_channel_iban_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_iban_Set() const{
    return m_payment_channel_iban_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_iban_Valid() const{
    return m_payment_channel_iban_isValid;
}

QString OAICreatePayeesCSVRequestV4::getPaymentChannelRoutingNumber() const {
    return m_payment_channel_routing_number;
}
void OAICreatePayeesCSVRequestV4::setPaymentChannelRoutingNumber(const QString &payment_channel_routing_number) {
    m_payment_channel_routing_number = payment_channel_routing_number;
    m_payment_channel_routing_number_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_routing_number_Set() const{
    return m_payment_channel_routing_number_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_payment_channel_routing_number_Valid() const{
    return m_payment_channel_routing_number_isValid;
}

QString OAICreatePayeesCSVRequestV4::getRemoteId() const {
    return m_remote_id;
}
void OAICreatePayeesCSVRequestV4::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

OAIPayeeTypeEnum OAICreatePayeesCSVRequestV4::getType() const {
    return m_type;
}
void OAICreatePayeesCSVRequestV4::setType(const OAIPayeeTypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreatePayeesCSVRequestV4::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreatePayeesCSVRequestV4::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreatePayeesCSVRequestV4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_county_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_zip_or_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_ein_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_operating_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_national_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_other_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePayeesCSVRequestV4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_city_isValid && m_address_country_isValid && m_address_line1_isValid && m_address_zip_or_postcode_isValid && m_email_isValid && m_remote_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
