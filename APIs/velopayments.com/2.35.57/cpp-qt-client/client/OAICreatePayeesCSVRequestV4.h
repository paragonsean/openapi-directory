/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreatePayeesCSVRequestV4.h
 *
 * 
 */

#ifndef OAICreatePayeesCSVRequestV4_H
#define OAICreatePayeesCSVRequestV4_H

#include <QJsonObject>

#include "OAIPayeeTypeEnum.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreatePayeesCSVRequestV4 : public OAIObject {
public:
    OAICreatePayeesCSVRequestV4();
    OAICreatePayeesCSVRequestV4(QString json);
    ~OAICreatePayeesCSVRequestV4() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressCity() const;
    void setAddressCity(const QString &address_city);
    bool is_address_city_Set() const;
    bool is_address_city_Valid() const;

    QString getAddressCountry() const;
    void setAddressCountry(const QString &address_country);
    bool is_address_country_Set() const;
    bool is_address_country_Valid() const;

    QString getAddressCountyOrProvince() const;
    void setAddressCountyOrProvince(const QString &address_county_or_province);
    bool is_address_county_or_province_Set() const;
    bool is_address_county_or_province_Valid() const;

    QString getAddressLine1() const;
    void setAddressLine1(const QString &address_line1);
    bool is_address_line1_Set() const;
    bool is_address_line1_Valid() const;

    QString getAddressLine2() const;
    void setAddressLine2(const QString &address_line2);
    bool is_address_line2_Set() const;
    bool is_address_line2_Valid() const;

    QString getAddressLine3() const;
    void setAddressLine3(const QString &address_line3);
    bool is_address_line3_Set() const;
    bool is_address_line3_Valid() const;

    QString getAddressLine4() const;
    void setAddressLine4(const QString &address_line4);
    bool is_address_line4_Set() const;
    bool is_address_line4_Valid() const;

    QString getAddressZipOrPostcode() const;
    void setAddressZipOrPostcode(const QString &address_zip_or_postcode);
    bool is_address_zip_or_postcode_Set() const;
    bool is_address_zip_or_postcode_Valid() const;

    QString getChallengeDescription() const;
    void setChallengeDescription(const QString &challenge_description);
    bool is_challenge_description_Set() const;
    bool is_challenge_description_Valid() const;

    QString getChallengeValue() const;
    void setChallengeValue(const QString &challenge_value);
    bool is_challenge_value_Set() const;
    bool is_challenge_value_Valid() const;

    QString getCompanyEin() const;
    void setCompanyEin(const QString &company_ein);
    bool is_company_ein_Set() const;
    bool is_company_ein_Valid() const;

    QString getCompanyName() const;
    void setCompanyName(const QString &company_name);
    bool is_company_name_Set() const;
    bool is_company_name_Valid() const;

    QString getCompanyOperatingName() const;
    void setCompanyOperatingName(const QString &company_operating_name);
    bool is_company_operating_name_Set() const;
    bool is_company_operating_name_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QDate getIndividualDateOfBirth() const;
    void setIndividualDateOfBirth(const QDate &individual_date_of_birth);
    bool is_individual_date_of_birth_Set() const;
    bool is_individual_date_of_birth_Valid() const;

    QString getIndividualFirstName() const;
    void setIndividualFirstName(const QString &individual_first_name);
    bool is_individual_first_name_Set() const;
    bool is_individual_first_name_Valid() const;

    QString getIndividualLastName() const;
    void setIndividualLastName(const QString &individual_last_name);
    bool is_individual_last_name_Set() const;
    bool is_individual_last_name_Valid() const;

    QString getIndividualNationalIdentification() const;
    void setIndividualNationalIdentification(const QString &individual_national_identification);
    bool is_individual_national_identification_Set() const;
    bool is_individual_national_identification_Valid() const;

    QString getIndividualOtherNames() const;
    void setIndividualOtherNames(const QString &individual_other_names);
    bool is_individual_other_names_Set() const;
    bool is_individual_other_names_Valid() const;

    QString getIndividualTitle() const;
    void setIndividualTitle(const QString &individual_title);
    bool is_individual_title_Set() const;
    bool is_individual_title_Valid() const;

    QString getPayeeLanguage() const;
    void setPayeeLanguage(const QString &payee_language);
    bool is_payee_language_Set() const;
    bool is_payee_language_Valid() const;

    QString getPaymentChannelAccountName() const;
    void setPaymentChannelAccountName(const QString &payment_channel_account_name);
    bool is_payment_channel_account_name_Set() const;
    bool is_payment_channel_account_name_Valid() const;

    QString getPaymentChannelAccountNumber() const;
    void setPaymentChannelAccountNumber(const QString &payment_channel_account_number);
    bool is_payment_channel_account_number_Set() const;
    bool is_payment_channel_account_number_Valid() const;

    QString getPaymentChannelCountryCode() const;
    void setPaymentChannelCountryCode(const QString &payment_channel_country_code);
    bool is_payment_channel_country_code_Set() const;
    bool is_payment_channel_country_code_Valid() const;

    QString getPaymentChannelCurrency() const;
    void setPaymentChannelCurrency(const QString &payment_channel_currency);
    bool is_payment_channel_currency_Set() const;
    bool is_payment_channel_currency_Valid() const;

    QString getPaymentChannelIban() const;
    void setPaymentChannelIban(const QString &payment_channel_iban);
    bool is_payment_channel_iban_Set() const;
    bool is_payment_channel_iban_Valid() const;

    QString getPaymentChannelRoutingNumber() const;
    void setPaymentChannelRoutingNumber(const QString &payment_channel_routing_number);
    bool is_payment_channel_routing_number_Set() const;
    bool is_payment_channel_routing_number_Valid() const;

    QString getRemoteId() const;
    void setRemoteId(const QString &remote_id);
    bool is_remote_id_Set() const;
    bool is_remote_id_Valid() const;

    OAIPayeeTypeEnum getType() const;
    void setType(const OAIPayeeTypeEnum &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_city;
    bool m_address_city_isSet;
    bool m_address_city_isValid;

    QString m_address_country;
    bool m_address_country_isSet;
    bool m_address_country_isValid;

    QString m_address_county_or_province;
    bool m_address_county_or_province_isSet;
    bool m_address_county_or_province_isValid;

    QString m_address_line1;
    bool m_address_line1_isSet;
    bool m_address_line1_isValid;

    QString m_address_line2;
    bool m_address_line2_isSet;
    bool m_address_line2_isValid;

    QString m_address_line3;
    bool m_address_line3_isSet;
    bool m_address_line3_isValid;

    QString m_address_line4;
    bool m_address_line4_isSet;
    bool m_address_line4_isValid;

    QString m_address_zip_or_postcode;
    bool m_address_zip_or_postcode_isSet;
    bool m_address_zip_or_postcode_isValid;

    QString m_challenge_description;
    bool m_challenge_description_isSet;
    bool m_challenge_description_isValid;

    QString m_challenge_value;
    bool m_challenge_value_isSet;
    bool m_challenge_value_isValid;

    QString m_company_ein;
    bool m_company_ein_isSet;
    bool m_company_ein_isValid;

    QString m_company_name;
    bool m_company_name_isSet;
    bool m_company_name_isValid;

    QString m_company_operating_name;
    bool m_company_operating_name_isSet;
    bool m_company_operating_name_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QDate m_individual_date_of_birth;
    bool m_individual_date_of_birth_isSet;
    bool m_individual_date_of_birth_isValid;

    QString m_individual_first_name;
    bool m_individual_first_name_isSet;
    bool m_individual_first_name_isValid;

    QString m_individual_last_name;
    bool m_individual_last_name_isSet;
    bool m_individual_last_name_isValid;

    QString m_individual_national_identification;
    bool m_individual_national_identification_isSet;
    bool m_individual_national_identification_isValid;

    QString m_individual_other_names;
    bool m_individual_other_names_isSet;
    bool m_individual_other_names_isValid;

    QString m_individual_title;
    bool m_individual_title_isSet;
    bool m_individual_title_isValid;

    QString m_payee_language;
    bool m_payee_language_isSet;
    bool m_payee_language_isValid;

    QString m_payment_channel_account_name;
    bool m_payment_channel_account_name_isSet;
    bool m_payment_channel_account_name_isValid;

    QString m_payment_channel_account_number;
    bool m_payment_channel_account_number_isSet;
    bool m_payment_channel_account_number_isValid;

    QString m_payment_channel_country_code;
    bool m_payment_channel_country_code_isSet;
    bool m_payment_channel_country_code_isValid;

    QString m_payment_channel_currency;
    bool m_payment_channel_currency_isSet;
    bool m_payment_channel_currency_isValid;

    QString m_payment_channel_iban;
    bool m_payment_channel_iban_isSet;
    bool m_payment_channel_iban_isValid;

    QString m_payment_channel_routing_number;
    bool m_payment_channel_routing_number_isSet;
    bool m_payment_channel_routing_number_isValid;

    QString m_remote_id;
    bool m_remote_id_isSet;
    bool m_remote_id_isValid;

    OAIPayeeTypeEnum m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreatePayeesCSVRequestV4)

#endif // OAICreatePayeesCSVRequestV4_H
