/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayoutsApi_H
#define OAI_OAIPayoutsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatePayoutRequestV3.h"
#include "OAIInline_response_400.h"
#include "OAIInline_response_401.h"
#include "OAIInline_response_403.h"
#include "OAIInline_response_404.h"
#include "OAIInline_response_409.h"
#include "OAIInstructPayoutRequestV3.h"
#include "OAIPagedPaymentsResponseV3.h"
#include "OAIPayoutSummaryResponseV3.h"
#include "OAIQuoteResponseV3.h"
#include "OAISchedulePayoutRequestV3.h"
#include "OAISubmitPayoutV3_request.h"
#include "OAIWithdrawPaymentRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayoutsApi : public QObject {
    Q_OBJECT

public:
    OAIPayoutsApi(const int timeOut = 0);
    ~OAIPayoutsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payout_id QString [required]
    */
    virtual void createQuoteForPayoutV3(const QString &payout_id);

    /**
    * @param[in]  payout_id QString [required]
    */
    virtual void deschedulePayout(const QString &payout_id);

    /**
    * @param[in]  payout_id QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  remote_id QString [optional]
    * @param[in]  payor_payment_id QString [optional]
    * @param[in]  source_account_name QString [optional]
    * @param[in]  transmission_type QString [optional]
    * @param[in]  payment_memo QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPaymentsForPayoutV3(const QString &payout_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remote_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payor_payment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_account_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transmission_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_memo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  payout_id QString [required]
    */
    virtual void getPayoutSummaryV3(const QString &payout_id);

    /**
    * @param[in]  payout_id QString [required]
    * @param[in]  oai_instruct_payout_request_v3 OAIInstructPayoutRequestV3 [optional]
    */
    virtual void instructPayoutV3(const QString &payout_id, const ::OpenAPI::OptionalParam<OAIInstructPayoutRequestV3> &oai_instruct_payout_request_v3 = ::OpenAPI::OptionalParam<OAIInstructPayoutRequestV3>());

    /**
    * @param[in]  payout_id QString [required]
    * @param[in]  oai_schedule_payout_request_v3 OAISchedulePayoutRequestV3 [optional]
    */
    virtual void scheduleForPayout(const QString &payout_id, const ::OpenAPI::OptionalParam<OAISchedulePayoutRequestV3> &oai_schedule_payout_request_v3 = ::OpenAPI::OptionalParam<OAISchedulePayoutRequestV3>());

    /**
    * @param[in]  oai_create_payout_request_v3 OAICreatePayoutRequestV3 [required]
    */
    virtual void submitPayoutV3(const OAICreatePayoutRequestV3 &oai_create_payout_request_v3);

    /**
    * @param[in]  payment_id QString [required]
    * @param[in]  oai_withdraw_payment_request OAIWithdrawPaymentRequest [required]
    */
    virtual void withdrawPayment(const QString &payment_id, const OAIWithdrawPaymentRequest &oai_withdraw_payment_request);

    /**
    * @param[in]  payout_id QString [required]
    */
    virtual void withdrawPayoutV3(const QString &payout_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createQuoteForPayoutV3Callback(OAIHttpRequestWorker *worker);
    void deschedulePayoutCallback(OAIHttpRequestWorker *worker);
    void getPaymentsForPayoutV3Callback(OAIHttpRequestWorker *worker);
    void getPayoutSummaryV3Callback(OAIHttpRequestWorker *worker);
    void instructPayoutV3Callback(OAIHttpRequestWorker *worker);
    void scheduleForPayoutCallback(OAIHttpRequestWorker *worker);
    void submitPayoutV3Callback(OAIHttpRequestWorker *worker);
    void withdrawPaymentCallback(OAIHttpRequestWorker *worker);
    void withdrawPayoutV3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createQuoteForPayoutV3Signal(OAIQuoteResponseV3 summary);
    void deschedulePayoutSignal();
    void getPaymentsForPayoutV3Signal(OAIPagedPaymentsResponseV3 summary);
    void getPayoutSummaryV3Signal(OAIPayoutSummaryResponseV3 summary);
    void instructPayoutV3Signal();
    void scheduleForPayoutSignal();
    void submitPayoutV3Signal();
    void withdrawPaymentSignal();
    void withdrawPayoutV3Signal();


    void createQuoteForPayoutV3SignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponseV3 summary);
    void deschedulePayoutSignalFull(OAIHttpRequestWorker *worker);
    void getPaymentsForPayoutV3SignalFull(OAIHttpRequestWorker *worker, OAIPagedPaymentsResponseV3 summary);
    void getPayoutSummaryV3SignalFull(OAIHttpRequestWorker *worker, OAIPayoutSummaryResponseV3 summary);
    void instructPayoutV3SignalFull(OAIHttpRequestWorker *worker);
    void scheduleForPayoutSignalFull(OAIHttpRequestWorker *worker);
    void submitPayoutV3SignalFull(OAIHttpRequestWorker *worker);
    void withdrawPaymentSignalFull(OAIHttpRequestWorker *worker);
    void withdrawPayoutV3SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createQuoteForPayoutV3SignalError() instead")
    void createQuoteForPayoutV3SignalE(OAIQuoteResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteForPayoutV3SignalError(OAIQuoteResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deschedulePayoutSignalError() instead")
    void deschedulePayoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deschedulePayoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsForPayoutV3SignalError() instead")
    void getPaymentsForPayoutV3SignalE(OAIPagedPaymentsResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsForPayoutV3SignalError(OAIPagedPaymentsResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutSummaryV3SignalError() instead")
    void getPayoutSummaryV3SignalE(OAIPayoutSummaryResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutSummaryV3SignalError(OAIPayoutSummaryResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instructPayoutV3SignalError() instead")
    void instructPayoutV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void instructPayoutV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleForPayoutSignalError() instead")
    void scheduleForPayoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleForPayoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitPayoutV3SignalError() instead")
    void submitPayoutV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void submitPayoutV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use withdrawPaymentSignalError() instead")
    void withdrawPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void withdrawPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use withdrawPayoutV3SignalError() instead")
    void withdrawPayoutV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void withdrawPayoutV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createQuoteForPayoutV3SignalErrorFull() instead")
    void createQuoteForPayoutV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQuoteForPayoutV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deschedulePayoutSignalErrorFull() instead")
    void deschedulePayoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deschedulePayoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsForPayoutV3SignalErrorFull() instead")
    void getPaymentsForPayoutV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsForPayoutV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayoutSummaryV3SignalErrorFull() instead")
    void getPayoutSummaryV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayoutSummaryV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instructPayoutV3SignalErrorFull() instead")
    void instructPayoutV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instructPayoutV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleForPayoutSignalErrorFull() instead")
    void scheduleForPayoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleForPayoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitPayoutV3SignalErrorFull() instead")
    void submitPayoutV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitPayoutV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use withdrawPaymentSignalErrorFull() instead")
    void withdrawPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void withdrawPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use withdrawPayoutV3SignalErrorFull() instead")
    void withdrawPayoutV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void withdrawPayoutV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
