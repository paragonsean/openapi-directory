/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayeesApi_H
#define OAI_OAIPayeesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInline_response_400.h"
#include "OAIInline_response_401.h"
#include "OAIInline_response_403.h"
#include "OAIInline_response_404.h"
#include "OAIInline_response_409.h"
#include "OAIPagedPayeeResponseV3.h"
#include "OAIPagedPayeeResponseV4.h"
#include "OAIPayeeDeltaResponseV3.h"
#include "OAIPayeeDeltaResponseV4.h"
#include "OAIPayeeDetailResponseV3.h"
#include "OAIPayeeDetailResponseV4.h"
#include "OAIUpdatePayeeDetailsRequestV3.h"
#include "OAIUpdatePayeeDetailsRequestV4.h"
#include "OAIUpdateRemoteIdRequestV3.h"
#include "OAIUpdateRemoteIdRequestV4.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayeesApi : public QObject {
    Q_OBJECT

public:
    OAIPayeesApi(const int timeOut = 0);
    ~OAIPayeesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payee_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deletePayeeByIdV3(const QString &payee_id);

    /**
    * @param[in]  payee_id QString [required]
    */
    virtual void deletePayeeByIdV4(const QString &payee_id);

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  sensitive bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getPayeeByIdV3(const QString &payee_id, const ::OpenAPI::OptionalParam<bool> &sensitive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  sensitive bool [optional]
    */
    virtual void getPayeeByIdV4(const QString &payee_id, const ::OpenAPI::OptionalParam<bool> &sensitive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  updated_since QDateTime [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void listPayeeChangesV3(const QString &payor_id, const QDateTime &updated_since, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  updated_since QDateTime [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void listPayeeChangesV4(const QString &payor_id, const QDateTime &updated_since, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  watchlist_status QString [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  onboarded_status QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  display_name QString [optional]
    * @param[in]  remote_id QString [optional]
    * @param[in]  payee_type QString [optional]
    * @param[in]  payee_country QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listPayeesV3(const QString &payor_id, const ::OpenAPI::OptionalParam<QString> &watchlist_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &onboarded_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remote_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payee_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payee_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payor_id QString [required]
    * @param[in]  watchlist_status QString [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  onboarded_status QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  display_name QString [optional]
    * @param[in]  remote_id QString [optional]
    * @param[in]  payee_type QString [optional]
    * @param[in]  payee_country QString [optional]
    * @param[in]  ofac_status QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void listPayeesV4(const QString &payor_id, const ::OpenAPI::OptionalParam<QString> &watchlist_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &onboarded_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remote_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payee_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payee_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ofac_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  oai_update_payee_details_request_v3 OAIUpdatePayeeDetailsRequestV3 [required]
    */
    Q_DECL_DEPRECATED virtual void payeeDetailsUpdateV3(const QString &payee_id, const OAIUpdatePayeeDetailsRequestV3 &oai_update_payee_details_request_v3);

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  oai_update_payee_details_request_v4 OAIUpdatePayeeDetailsRequestV4 [required]
    */
    virtual void payeeDetailsUpdateV4(const QString &payee_id, const OAIUpdatePayeeDetailsRequestV4 &oai_update_payee_details_request_v4);

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  oai_update_remote_id_request_v3 OAIUpdateRemoteIdRequestV3 [required]
    */
    Q_DECL_DEPRECATED virtual void v3PayeesPayeeIdRemoteIdUpdatePost(const QString &payee_id, const OAIUpdateRemoteIdRequestV3 &oai_update_remote_id_request_v3);

    /**
    * @param[in]  payee_id QString [required]
    * @param[in]  oai_update_remote_id_request_v4 OAIUpdateRemoteIdRequestV4 [required]
    */
    virtual void v4PayeesPayeeIdRemoteIdUpdatePost(const QString &payee_id, const OAIUpdateRemoteIdRequestV4 &oai_update_remote_id_request_v4);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePayeeByIdV3Callback(OAIHttpRequestWorker *worker);
    void deletePayeeByIdV4Callback(OAIHttpRequestWorker *worker);
    void getPayeeByIdV3Callback(OAIHttpRequestWorker *worker);
    void getPayeeByIdV4Callback(OAIHttpRequestWorker *worker);
    void listPayeeChangesV3Callback(OAIHttpRequestWorker *worker);
    void listPayeeChangesV4Callback(OAIHttpRequestWorker *worker);
    void listPayeesV3Callback(OAIHttpRequestWorker *worker);
    void listPayeesV4Callback(OAIHttpRequestWorker *worker);
    void payeeDetailsUpdateV3Callback(OAIHttpRequestWorker *worker);
    void payeeDetailsUpdateV4Callback(OAIHttpRequestWorker *worker);
    void v3PayeesPayeeIdRemoteIdUpdatePostCallback(OAIHttpRequestWorker *worker);
    void v4PayeesPayeeIdRemoteIdUpdatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePayeeByIdV3Signal();
    void deletePayeeByIdV4Signal();
    void getPayeeByIdV3Signal(OAIPayeeDetailResponseV3 summary);
    void getPayeeByIdV4Signal(OAIPayeeDetailResponseV4 summary);
    void listPayeeChangesV3Signal(OAIPayeeDeltaResponseV3 summary);
    void listPayeeChangesV4Signal(OAIPayeeDeltaResponseV4 summary);
    void listPayeesV3Signal(OAIPagedPayeeResponseV3 summary);
    void listPayeesV4Signal(OAIPagedPayeeResponseV4 summary);
    void payeeDetailsUpdateV3Signal();
    void payeeDetailsUpdateV4Signal();
    void v3PayeesPayeeIdRemoteIdUpdatePostSignal();
    void v4PayeesPayeeIdRemoteIdUpdatePostSignal();


    void deletePayeeByIdV3SignalFull(OAIHttpRequestWorker *worker);
    void deletePayeeByIdV4SignalFull(OAIHttpRequestWorker *worker);
    void getPayeeByIdV3SignalFull(OAIHttpRequestWorker *worker, OAIPayeeDetailResponseV3 summary);
    void getPayeeByIdV4SignalFull(OAIHttpRequestWorker *worker, OAIPayeeDetailResponseV4 summary);
    void listPayeeChangesV3SignalFull(OAIHttpRequestWorker *worker, OAIPayeeDeltaResponseV3 summary);
    void listPayeeChangesV4SignalFull(OAIHttpRequestWorker *worker, OAIPayeeDeltaResponseV4 summary);
    void listPayeesV3SignalFull(OAIHttpRequestWorker *worker, OAIPagedPayeeResponseV3 summary);
    void listPayeesV4SignalFull(OAIHttpRequestWorker *worker, OAIPagedPayeeResponseV4 summary);
    void payeeDetailsUpdateV3SignalFull(OAIHttpRequestWorker *worker);
    void payeeDetailsUpdateV4SignalFull(OAIHttpRequestWorker *worker);
    void v3PayeesPayeeIdRemoteIdUpdatePostSignalFull(OAIHttpRequestWorker *worker);
    void v4PayeesPayeeIdRemoteIdUpdatePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deletePayeeByIdV3SignalError() instead")
    void deletePayeeByIdV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayeeByIdV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayeeByIdV4SignalError() instead")
    void deletePayeeByIdV4SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayeeByIdV4SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeByIdV3SignalError() instead")
    void getPayeeByIdV3SignalE(OAIPayeeDetailResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeByIdV3SignalError(OAIPayeeDetailResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeByIdV4SignalError() instead")
    void getPayeeByIdV4SignalE(OAIPayeeDetailResponseV4 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeByIdV4SignalError(OAIPayeeDetailResponseV4 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeeChangesV3SignalError() instead")
    void listPayeeChangesV3SignalE(OAIPayeeDeltaResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeeChangesV3SignalError(OAIPayeeDeltaResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeeChangesV4SignalError() instead")
    void listPayeeChangesV4SignalE(OAIPayeeDeltaResponseV4 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeeChangesV4SignalError(OAIPayeeDeltaResponseV4 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeesV3SignalError() instead")
    void listPayeesV3SignalE(OAIPagedPayeeResponseV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeesV3SignalError(OAIPagedPayeeResponseV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeesV4SignalError() instead")
    void listPayeesV4SignalE(OAIPagedPayeeResponseV4 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeesV4SignalError(OAIPagedPayeeResponseV4 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payeeDetailsUpdateV3SignalError() instead")
    void payeeDetailsUpdateV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void payeeDetailsUpdateV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payeeDetailsUpdateV4SignalError() instead")
    void payeeDetailsUpdateV4SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void payeeDetailsUpdateV4SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3PayeesPayeeIdRemoteIdUpdatePostSignalError() instead")
    void v3PayeesPayeeIdRemoteIdUpdatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3PayeesPayeeIdRemoteIdUpdatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v4PayeesPayeeIdRemoteIdUpdatePostSignalError() instead")
    void v4PayeesPayeeIdRemoteIdUpdatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v4PayeesPayeeIdRemoteIdUpdatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePayeeByIdV3SignalErrorFull() instead")
    void deletePayeeByIdV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayeeByIdV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayeeByIdV4SignalErrorFull() instead")
    void deletePayeeByIdV4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayeeByIdV4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeByIdV3SignalErrorFull() instead")
    void getPayeeByIdV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeByIdV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeByIdV4SignalErrorFull() instead")
    void getPayeeByIdV4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeByIdV4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeeChangesV3SignalErrorFull() instead")
    void listPayeeChangesV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeeChangesV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeeChangesV4SignalErrorFull() instead")
    void listPayeeChangesV4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeeChangesV4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeesV3SignalErrorFull() instead")
    void listPayeesV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeesV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPayeesV4SignalErrorFull() instead")
    void listPayeesV4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPayeesV4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payeeDetailsUpdateV3SignalErrorFull() instead")
    void payeeDetailsUpdateV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void payeeDetailsUpdateV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use payeeDetailsUpdateV4SignalErrorFull() instead")
    void payeeDetailsUpdateV4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void payeeDetailsUpdateV4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3PayeesPayeeIdRemoteIdUpdatePostSignalErrorFull() instead")
    void v3PayeesPayeeIdRemoteIdUpdatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3PayeesPayeeIdRemoteIdUpdatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v4PayeesPayeeIdRemoteIdUpdatePostSignalErrorFull() instead")
    void v4PayeesPayeeIdRemoteIdUpdatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v4PayeesPayeeIdRemoteIdUpdatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
