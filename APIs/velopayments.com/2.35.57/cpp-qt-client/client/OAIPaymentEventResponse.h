/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentEventResponse.h
 *
 * 
 */

#ifndef OAIPaymentEventResponse_H
#define OAIPaymentEventResponse_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPaymentEventResponse : public OAIObject {
public:
    OAIPaymentEventResponse();
    OAIPaymentEventResponse(QString json);
    ~OAIPaymentEventResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getAccountNumber() const;
    void setAccountNumber(const QString &account_number);
    bool is_account_number_Set() const;
    bool is_account_number_Valid() const;

    QDateTime getEventDateTime() const;
    void setEventDateTime(const QDateTime &event_date_time);
    bool is_event_date_time_Set() const;
    bool is_event_date_time_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getEventType() const;
    void setEventType(const QString &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    qint64 getPaymentAmount() const;
    void setPaymentAmount(const qint64 &payment_amount);
    bool is_payment_amount_Set() const;
    bool is_payment_amount_Valid() const;

    QString getPaymentCurrency() const;
    void setPaymentCurrency(const QString &payment_currency);
    bool is_payment_currency_Set() const;
    bool is_payment_currency_Valid() const;

    QString getPrincipal() const;
    void setPrincipal(const QString &principal);
    bool is_principal_Set() const;
    bool is_principal_Valid() const;

    QString getRoutingNumber() const;
    void setRoutingNumber(const QString &routing_number);
    bool is_routing_number_Set() const;
    bool is_routing_number_Valid() const;

    QDateTime getScheduledAt() const;
    void setScheduledAt(const QDateTime &scheduled_at);
    bool is_scheduled_at_Set() const;
    bool is_scheduled_at_Valid() const;

    QString getScheduledBy() const;
    void setScheduledBy(const QString &scheduled_by);
    bool is_scheduled_by_Set() const;
    bool is_scheduled_by_Valid() const;

    QDateTime getScheduledFor() const;
    void setScheduledFor(const QDateTime &scheduled_for);
    bool is_scheduled_for_Set() const;
    bool is_scheduled_for_Valid() const;

    qint64 getSourceAmount() const;
    void setSourceAmount(const qint64 &source_amount);
    bool is_source_amount_Set() const;
    bool is_source_amount_Valid() const;

    QString getSourceCurrency() const;
    void setSourceCurrency(const QString &source_currency);
    bool is_source_currency_Set() const;
    bool is_source_currency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_account_number;
    bool m_account_number_isSet;
    bool m_account_number_isValid;

    QDateTime m_event_date_time;
    bool m_event_date_time_isSet;
    bool m_event_date_time_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    qint64 m_payment_amount;
    bool m_payment_amount_isSet;
    bool m_payment_amount_isValid;

    QString m_payment_currency;
    bool m_payment_currency_isSet;
    bool m_payment_currency_isValid;

    QString m_principal;
    bool m_principal_isSet;
    bool m_principal_isValid;

    QString m_routing_number;
    bool m_routing_number_isSet;
    bool m_routing_number_isValid;

    QDateTime m_scheduled_at;
    bool m_scheduled_at_isSet;
    bool m_scheduled_at_isValid;

    QString m_scheduled_by;
    bool m_scheduled_by_isSet;
    bool m_scheduled_by_isValid;

    QDateTime m_scheduled_for;
    bool m_scheduled_for_isSet;
    bool m_scheduled_for_isValid;

    qint64 m_source_amount;
    bool m_source_amount_isSet;
    bool m_source_amount_isValid;

    QString m_source_currency;
    bool m_source_currency_isSet;
    bool m_source_currency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentEventResponse)

#endif // OAIPaymentEventResponse_H
