/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPayorV2.h
 *
 * 
 */

#ifndef OAIPayorV2_H
#define OAIPayorV2_H

#include <QJsonObject>

#include "OAIPayorAddressV2.h"
#include "OAITransmissionTypes_2.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPayorAddressV2;
class OAITransmissionTypes_2;

class OAIPayorV2 : public OAIObject {
public:
    OAIPayorV2();
    OAIPayorV2(QString json);
    ~OAIPayorV2() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPayorAddressV2 getAddress() const;
    void setAddress(const OAIPayorAddressV2 &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    bool isAllowsLanguageChoice() const;
    void setAllowsLanguageChoice(const bool &allows_language_choice);
    bool is_allows_language_choice_Set() const;
    bool is_allows_language_choice_Valid() const;

    QString getCollectiveAlias() const;
    void setCollectiveAlias(const QString &collective_alias);
    bool is_collective_alias_Set() const;
    bool is_collective_alias_Valid() const;

    QString getDbaName() const;
    void setDbaName(const QString &dba_name);
    bool is_dba_name_Set() const;
    bool is_dba_name_Valid() const;

    bool isIncludesReports() const;
    void setIncludesReports(const bool &includes_reports);
    bool is_includes_reports_Set() const;
    bool is_includes_reports_Valid() const;

    QString getKycState() const;
    void setKycState(const QString &kyc_state);
    bool is_kyc_state_Set() const;
    bool is_kyc_state_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    bool isManagingPayees() const;
    void setManagingPayees(const bool &managing_payees);
    bool is_managing_payees_Set() const;
    bool is_managing_payees_Valid() const;

    bool isManualLockout() const;
    void setManualLockout(const bool &manual_lockout);
    bool is_manual_lockout_Set() const;
    bool is_manual_lockout_Valid() const;

    qint32 getMaxMasterPayorAdmins() const;
    void setMaxMasterPayorAdmins(const qint32 &max_master_payor_admins);
    bool is_max_master_payor_admins_Set() const;
    bool is_max_master_payor_admins_Valid() const;

    bool isOpenBankingEnabled() const;
    void setOpenBankingEnabled(const bool &open_banking_enabled);
    bool is_open_banking_enabled_Set() const;
    bool is_open_banking_enabled_Valid() const;

    qint32 getPayeeGracePeriodDays() const;
    void setPayeeGracePeriodDays(const qint32 &payee_grace_period_days);
    bool is_payee_grace_period_days_Set() const;
    bool is_payee_grace_period_days_Valid() const;

    bool isPayeeGracePeriodProcessingEnabled() const;
    void setPayeeGracePeriodProcessingEnabled(const bool &payee_grace_period_processing_enabled);
    bool is_payee_grace_period_processing_enabled_Set() const;
    bool is_payee_grace_period_processing_enabled_Valid() const;

    QString getPaymentRails() const;
    void setPaymentRails(const QString &payment_rails);
    bool is_payment_rails_Set() const;
    bool is_payment_rails_Valid() const;

    QString getPayorId() const;
    void setPayorId(const QString &payor_id);
    bool is_payor_id_Set() const;
    bool is_payor_id_Valid() const;

    QString getPayorName() const;
    void setPayorName(const QString &payor_name);
    bool is_payor_name_Set() const;
    bool is_payor_name_Valid() const;

    QString getPayorXid() const;
    void setPayorXid(const QString &payor_xid);
    bool is_payor_xid_Set() const;
    bool is_payor_xid_Valid() const;

    QString getPrimaryContactEmail() const;
    void setPrimaryContactEmail(const QString &primary_contact_email);
    bool is_primary_contact_email_Set() const;
    bool is_primary_contact_email_Valid() const;

    QString getPrimaryContactName() const;
    void setPrimaryContactName(const QString &primary_contact_name);
    bool is_primary_contact_name_Set() const;
    bool is_primary_contact_name_Valid() const;

    QString getPrimaryContactPhone() const;
    void setPrimaryContactPhone(const QString &primary_contact_phone);
    bool is_primary_contact_phone_Set() const;
    bool is_primary_contact_phone_Valid() const;

    QString getProvider() const;
    void setProvider(const QString &provider);
    bool is_provider_Set() const;
    bool is_provider_Valid() const;

    bool isReminderEmailsOptOut() const;
    void setReminderEmailsOptOut(const bool &reminder_emails_opt_out);
    bool is_reminder_emails_opt_out_Set() const;
    bool is_reminder_emails_opt_out_Valid() const;

    QList<QString> getRemoteSystemIds() const;
    void setRemoteSystemIds(const QList<QString> &remote_system_ids);
    bool is_remote_system_ids_Set() const;
    bool is_remote_system_ids_Valid() const;

    QString getSupportContact() const;
    void setSupportContact(const QString &support_contact);
    bool is_support_contact_Set() const;
    bool is_support_contact_Valid() const;

    OAITransmissionTypes_2 getTransmissionTypes() const;
    void setTransmissionTypes(const OAITransmissionTypes_2 &transmission_types);
    bool is_transmission_types_Set() const;
    bool is_transmission_types_Valid() const;

    qint32 getUsdTxnValueReportingThreshold() const;
    void setUsdTxnValueReportingThreshold(const qint32 &usd_txn_value_reporting_threshold);
    bool is_usd_txn_value_reporting_threshold_Set() const;
    bool is_usd_txn_value_reporting_threshold_Valid() const;

    QString getWuCustomerId() const;
    void setWuCustomerId(const QString &wu_customer_id);
    bool is_wu_customer_id_Set() const;
    bool is_wu_customer_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPayorAddressV2 m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    bool m_allows_language_choice;
    bool m_allows_language_choice_isSet;
    bool m_allows_language_choice_isValid;

    QString m_collective_alias;
    bool m_collective_alias_isSet;
    bool m_collective_alias_isValid;

    QString m_dba_name;
    bool m_dba_name_isSet;
    bool m_dba_name_isValid;

    bool m_includes_reports;
    bool m_includes_reports_isSet;
    bool m_includes_reports_isValid;

    QString m_kyc_state;
    bool m_kyc_state_isSet;
    bool m_kyc_state_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    bool m_managing_payees;
    bool m_managing_payees_isSet;
    bool m_managing_payees_isValid;

    bool m_manual_lockout;
    bool m_manual_lockout_isSet;
    bool m_manual_lockout_isValid;

    qint32 m_max_master_payor_admins;
    bool m_max_master_payor_admins_isSet;
    bool m_max_master_payor_admins_isValid;

    bool m_open_banking_enabled;
    bool m_open_banking_enabled_isSet;
    bool m_open_banking_enabled_isValid;

    qint32 m_payee_grace_period_days;
    bool m_payee_grace_period_days_isSet;
    bool m_payee_grace_period_days_isValid;

    bool m_payee_grace_period_processing_enabled;
    bool m_payee_grace_period_processing_enabled_isSet;
    bool m_payee_grace_period_processing_enabled_isValid;

    QString m_payment_rails;
    bool m_payment_rails_isSet;
    bool m_payment_rails_isValid;

    QString m_payor_id;
    bool m_payor_id_isSet;
    bool m_payor_id_isValid;

    QString m_payor_name;
    bool m_payor_name_isSet;
    bool m_payor_name_isValid;

    QString m_payor_xid;
    bool m_payor_xid_isSet;
    bool m_payor_xid_isValid;

    QString m_primary_contact_email;
    bool m_primary_contact_email_isSet;
    bool m_primary_contact_email_isValid;

    QString m_primary_contact_name;
    bool m_primary_contact_name_isSet;
    bool m_primary_contact_name_isValid;

    QString m_primary_contact_phone;
    bool m_primary_contact_phone_isSet;
    bool m_primary_contact_phone_isValid;

    QString m_provider;
    bool m_provider_isSet;
    bool m_provider_isValid;

    bool m_reminder_emails_opt_out;
    bool m_reminder_emails_opt_out_isSet;
    bool m_reminder_emails_opt_out_isValid;

    QList<QString> m_remote_system_ids;
    bool m_remote_system_ids_isSet;
    bool m_remote_system_ids_isValid;

    QString m_support_contact;
    bool m_support_contact_isSet;
    bool m_support_contact_isValid;

    OAITransmissionTypes_2 m_transmission_types;
    bool m_transmission_types_isSet;
    bool m_transmission_types_isValid;

    qint32 m_usd_txn_value_reporting_threshold;
    bool m_usd_txn_value_reporting_threshold_isSet;
    bool m_usd_txn_value_reporting_threshold_isValid;

    QString m_wu_customer_id;
    bool m_wu_customer_id_isSet;
    bool m_wu_customer_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPayorV2)

#endif // OAIPayorV2_H
