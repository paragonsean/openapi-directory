/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetPaymentsForPayoutResponseV4_summary.h
 *
 * 
 */

#ifndef OAIGetPaymentsForPayoutResponseV4_summary_H
#define OAIGetPaymentsForPayoutResponseV4_summary_H

#include <QJsonObject>

#include "OAIPayoutPayor.h"
#include "OAIPayoutPrincipal.h"
#include "OAIPayoutSchedule.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPayoutPrincipal;
class OAIPayoutPayor;
class OAIPayoutSchedule;

class OAIGetPaymentsForPayoutResponseV4_summary : public OAIObject {
public:
    OAIGetPaymentsForPayoutResponseV4_summary();
    OAIGetPaymentsForPayoutResponseV4_summary(QString json);
    ~OAIGetPaymentsForPayoutResponseV4_summary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getConfirmedPayments() const;
    void setConfirmedPayments(const qint32 &confirmed_payments);
    bool is_confirmed_payments_Set() const;
    bool is_confirmed_payments_Valid() const;

    qint32 getIncompletePayments() const;
    void setIncompletePayments(const qint32 &incomplete_payments);
    bool is_incomplete_payments_Set() const;
    bool is_incomplete_payments_Valid() const;

    OAIPayoutPrincipal getInstructed() const;
    void setInstructed(const OAIPayoutPrincipal &instructed);
    bool is_instructed_Set() const;
    bool is_instructed_Valid() const;

    QDateTime getInstructedDateTime() const;
    void setInstructedDateTime(const QDateTime &instructed_date_time);
    bool is_instructed_date_time_Set() const;
    bool is_instructed_date_time_Valid() const;

    OAIPayoutPayor getPayoutFrom() const;
    void setPayoutFrom(const OAIPayoutPayor &payout_from);
    bool is_payout_from_Set() const;
    bool is_payout_from_Valid() const;

    QString getPayoutMemo() const;
    void setPayoutMemo(const QString &payout_memo);
    bool is_payout_memo_Set() const;
    bool is_payout_memo_Valid() const;

    QString getPayoutStatus() const;
    void setPayoutStatus(const QString &payout_status);
    bool is_payout_status_Set() const;
    bool is_payout_status_Valid() const;

    OAIPayoutPayor getPayoutTo() const;
    void setPayoutTo(const OAIPayoutPayor &payout_to);
    bool is_payout_to_Set() const;
    bool is_payout_to_Valid() const;

    QString getPayoutType() const;
    void setPayoutType(const QString &payout_type);
    bool is_payout_type_Set() const;
    bool is_payout_type_Valid() const;

    OAIPayoutPrincipal getQuoted() const;
    void setQuoted(const OAIPayoutPrincipal &quoted);
    bool is_quoted_Set() const;
    bool is_quoted_Valid() const;

    QDateTime getQuotedDateTime() const;
    void setQuotedDateTime(const QDateTime &quoted_date_time);
    bool is_quoted_date_time_Set() const;
    bool is_quoted_date_time_Valid() const;

    qint32 getReleasedPayments() const;
    void setReleasedPayments(const qint32 &released_payments);
    bool is_released_payments_Set() const;
    bool is_released_payments_Valid() const;

    qint32 getReturnedPayments() const;
    void setReturnedPayments(const qint32 &returned_payments);
    bool is_returned_payments_Set() const;
    bool is_returned_payments_Valid() const;

    OAIPayoutSchedule getSchedule() const;
    void setSchedule(const OAIPayoutSchedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QDateTime getSubmittedDateTime() const;
    void setSubmittedDateTime(const QDateTime &submitted_date_time);
    bool is_submitted_date_time_Set() const;
    bool is_submitted_date_time_Valid() const;

    OAIPayoutPayor getSubmitting() const;
    void setSubmitting(const OAIPayoutPayor &submitting);
    bool is_submitting_Set() const;
    bool is_submitting_Valid() const;

    qint32 getTotalPayments() const;
    void setTotalPayments(const qint32 &total_payments);
    bool is_total_payments_Set() const;
    bool is_total_payments_Valid() const;

    OAIPayoutPrincipal getWithdrawn() const;
    void setWithdrawn(const OAIPayoutPrincipal &withdrawn);
    bool is_withdrawn_Set() const;
    bool is_withdrawn_Valid() const;

    QDateTime getWithdrawnDateTime() const;
    void setWithdrawnDateTime(const QDateTime &withdrawn_date_time);
    bool is_withdrawn_date_time_Set() const;
    bool is_withdrawn_date_time_Valid() const;

    qint32 getWithdrawnPayments() const;
    void setWithdrawnPayments(const qint32 &withdrawn_payments);
    bool is_withdrawn_payments_Set() const;
    bool is_withdrawn_payments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_confirmed_payments;
    bool m_confirmed_payments_isSet;
    bool m_confirmed_payments_isValid;

    qint32 m_incomplete_payments;
    bool m_incomplete_payments_isSet;
    bool m_incomplete_payments_isValid;

    OAIPayoutPrincipal m_instructed;
    bool m_instructed_isSet;
    bool m_instructed_isValid;

    QDateTime m_instructed_date_time;
    bool m_instructed_date_time_isSet;
    bool m_instructed_date_time_isValid;

    OAIPayoutPayor m_payout_from;
    bool m_payout_from_isSet;
    bool m_payout_from_isValid;

    QString m_payout_memo;
    bool m_payout_memo_isSet;
    bool m_payout_memo_isValid;

    QString m_payout_status;
    bool m_payout_status_isSet;
    bool m_payout_status_isValid;

    OAIPayoutPayor m_payout_to;
    bool m_payout_to_isSet;
    bool m_payout_to_isValid;

    QString m_payout_type;
    bool m_payout_type_isSet;
    bool m_payout_type_isValid;

    OAIPayoutPrincipal m_quoted;
    bool m_quoted_isSet;
    bool m_quoted_isValid;

    QDateTime m_quoted_date_time;
    bool m_quoted_date_time_isSet;
    bool m_quoted_date_time_isValid;

    qint32 m_released_payments;
    bool m_released_payments_isSet;
    bool m_released_payments_isValid;

    qint32 m_returned_payments;
    bool m_returned_payments_isSet;
    bool m_returned_payments_isValid;

    OAIPayoutSchedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QDateTime m_submitted_date_time;
    bool m_submitted_date_time_isSet;
    bool m_submitted_date_time_isValid;

    OAIPayoutPayor m_submitting;
    bool m_submitting_isSet;
    bool m_submitting_isValid;

    qint32 m_total_payments;
    bool m_total_payments_isSet;
    bool m_total_payments_isValid;

    OAIPayoutPrincipal m_withdrawn;
    bool m_withdrawn_isSet;
    bool m_withdrawn_isValid;

    QDateTime m_withdrawn_date_time;
    bool m_withdrawn_date_time_isSet;
    bool m_withdrawn_date_time_isValid;

    qint32 m_withdrawn_payments;
    bool m_withdrawn_payments_isSet;
    bool m_withdrawn_payments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetPaymentsForPayoutResponseV4_summary)

#endif // OAIGetPaymentsForPayoutResponseV4_summary_H
