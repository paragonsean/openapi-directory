/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentResponseV4.h
 *
 * 
 */

#ifndef OAIPaymentResponseV4_H
#define OAIPaymentResponseV4_H

#include <QJsonObject>

#include "OAIPaymentEventResponse.h"
#include "OAIPaymentResponseV4_payout.h"
#include "OAIPayoutSchedule.h"
#include "OAIPostInstructFxInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPaymentEventResponse;
class OAIPaymentResponseV4_payout;
class OAIPostInstructFxInfo;
class OAIPayoutSchedule;

class OAIPaymentResponseV4 : public OAIObject {
public:
    OAIPaymentResponseV4();
    OAIPaymentResponseV4(QString json);
    ~OAIPaymentResponseV4() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getAccountNumber() const;
    void setAccountNumber(const QString &account_number);
    bool is_account_number_Set() const;
    bool is_account_number_Valid() const;

    QString getAutoWithdrawnReasonCode() const;
    void setAutoWithdrawnReasonCode(const QString &auto_withdrawn_reason_code);
    bool is_auto_withdrawn_reason_code_Set() const;
    bool is_auto_withdrawn_reason_code_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QList<OAIPaymentEventResponse> getEvents() const;
    void setEvents(const QList<OAIPaymentEventResponse> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getFilenameReference() const;
    void setFilenameReference(const QString &filename_reference);
    bool is_filename_reference_Set() const;
    bool is_filename_reference_Valid() const;

    QString getFundingStatus() const;
    void setFundingStatus(const QString &funding_status);
    bool is_funding_status_Set() const;
    bool is_funding_status_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    QString getIndividualIdentificationNumber() const;
    void setIndividualIdentificationNumber(const QString &individual_identification_number);
    bool is_individual_identification_number_Set() const;
    bool is_individual_identification_number_Valid() const;

    double getInvertedRate() const;
    void setInvertedRate(const double &inverted_rate);
    bool is_inverted_rate_Set() const;
    bool is_inverted_rate_Valid() const;

    bool isIsPaymentCcyBaseCcy() const;
    void setIsPaymentCcyBaseCcy(const bool &is_payment_ccy_base_ccy);
    bool is_is_payment_ccy_base_ccy_Set() const;
    bool is_is_payment_ccy_base_ccy_Valid() const;

    QString getPayeeAddressCountryCode() const;
    void setPayeeAddressCountryCode(const QString &payee_address_country_code);
    bool is_payee_address_country_code_Set() const;
    bool is_payee_address_country_code_Valid() const;

    QString getPayeeId() const;
    void setPayeeId(const QString &payee_id);
    bool is_payee_id_Set() const;
    bool is_payee_id_Valid() const;

    qint32 getPaymentAmount() const;
    void setPaymentAmount(const qint32 &payment_amount);
    bool is_payment_amount_Set() const;
    bool is_payment_amount_Valid() const;

    QString getPaymentChannelId() const;
    void setPaymentChannelId(const QString &payment_channel_id);
    bool is_payment_channel_id_Set() const;
    bool is_payment_channel_id_Valid() const;

    QString getPaymentChannelName() const;
    void setPaymentChannelName(const QString &payment_channel_name);
    bool is_payment_channel_name_Set() const;
    bool is_payment_channel_name_Valid() const;

    QString getPaymentCurrency() const;
    void setPaymentCurrency(const QString &payment_currency);
    bool is_payment_currency_Set() const;
    bool is_payment_currency_Valid() const;

    QString getPaymentId() const;
    void setPaymentId(const QString &payment_id);
    bool is_payment_id_Set() const;
    bool is_payment_id_Valid() const;

    QString getPaymentMemo() const;
    void setPaymentMemo(const QString &payment_memo);
    bool is_payment_memo_Set() const;
    bool is_payment_memo_Valid() const;

    QString getPaymentMetadata() const;
    void setPaymentMetadata(const QString &payment_metadata);
    bool is_payment_metadata_Set() const;
    bool is_payment_metadata_Valid() const;

    QString getPaymentScheme() const;
    void setPaymentScheme(const QString &payment_scheme);
    bool is_payment_scheme_Set() const;
    bool is_payment_scheme_Valid() const;

    QString getPaymentTrackingReference() const;
    void setPaymentTrackingReference(const QString &payment_tracking_reference);
    bool is_payment_tracking_reference_Set() const;
    bool is_payment_tracking_reference_Valid() const;

    QString getPayorId() const;
    void setPayorId(const QString &payor_id);
    bool is_payor_id_Set() const;
    bool is_payor_id_Valid() const;

    QString getPayorName() const;
    void setPayorName(const QString &payor_name);
    bool is_payor_name_Set() const;
    bool is_payor_name_Valid() const;

    QString getPayorPaymentId() const;
    void setPayorPaymentId(const QString &payor_payment_id);
    bool is_payor_payment_id_Set() const;
    bool is_payor_payment_id_Valid() const;

    OAIPaymentResponseV4_payout getPayout() const;
    void setPayout(const OAIPaymentResponseV4_payout &payout);
    bool is_payout_Set() const;
    bool is_payout_Valid() const;

    OAIPostInstructFxInfo getPostInstructFxInfo() const;
    void setPostInstructFxInfo(const OAIPostInstructFxInfo &post_instruct_fx_info);
    bool is_post_instruct_fx_info_Set() const;
    bool is_post_instruct_fx_info_Valid() const;

    QString getQuoteId() const;
    void setQuoteId(const QString &quote_id);
    bool is_quote_id_Set() const;
    bool is_quote_id_Valid() const;

    QString getRailsBatchId() const;
    void setRailsBatchId(const QString &rails_batch_id);
    bool is_rails_batch_id_Set() const;
    bool is_rails_batch_id_Valid() const;

    QString getRailsId() const;
    void setRailsId(const QString &rails_id);
    bool is_rails_id_Set() const;
    bool is_rails_id_Valid() const;

    QString getRailsPaymentId() const;
    void setRailsPaymentId(const QString &rails_payment_id);
    bool is_rails_payment_id_Set() const;
    bool is_rails_payment_id_Valid() const;

    double getRate() const;
    void setRate(const double &rate);
    bool is_rate_Set() const;
    bool is_rate_Valid() const;

    QString getRejectionReason() const;
    void setRejectionReason(const QString &rejection_reason);
    bool is_rejection_reason_Set() const;
    bool is_rejection_reason_Valid() const;

    QString getRemoteId() const;
    void setRemoteId(const QString &remote_id);
    bool is_remote_id_Set() const;
    bool is_remote_id_Valid() const;

    QString getRemoteSystemId() const;
    void setRemoteSystemId(const QString &remote_system_id);
    bool is_remote_system_id_Set() const;
    bool is_remote_system_id_Valid() const;

    QString getRemoteSystemPaymentId() const;
    void setRemoteSystemPaymentId(const QString &remote_system_payment_id);
    bool is_remote_system_payment_id_Set() const;
    bool is_remote_system_payment_id_Valid() const;

    qint32 getReturnCost() const;
    void setReturnCost(const qint32 &return_cost);
    bool is_return_cost_Set() const;
    bool is_return_cost_Valid() const;

    QString getReturnReason() const;
    void setReturnReason(const QString &return_reason);
    bool is_return_reason_Set() const;
    bool is_return_reason_Valid() const;

    QString getRoutingNumber() const;
    void setRoutingNumber(const QString &routing_number);
    bool is_routing_number_Set() const;
    bool is_routing_number_Valid() const;

    OAIPayoutSchedule getSchedule() const;
    void setSchedule(const OAIPayoutSchedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QString getSourceAccountId() const;
    void setSourceAccountId(const QString &source_account_id);
    bool is_source_account_id_Set() const;
    bool is_source_account_id_Valid() const;

    QString getSourceAccountName() const;
    void setSourceAccountName(const QString &source_account_name);
    bool is_source_account_name_Set() const;
    bool is_source_account_name_Valid() const;

    qint32 getSourceAmount() const;
    void setSourceAmount(const qint32 &source_amount);
    bool is_source_amount_Set() const;
    bool is_source_amount_Valid() const;

    QString getSourceCurrency() const;
    void setSourceCurrency(const QString &source_currency);
    bool is_source_currency_Set() const;
    bool is_source_currency_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getSubmittedDateTime() const;
    void setSubmittedDateTime(const QDateTime &submitted_date_time);
    bool is_submitted_date_time_Set() const;
    bool is_submitted_date_time_Valid() const;

    QString getTraceNumber() const;
    void setTraceNumber(const QString &trace_number);
    bool is_trace_number_Set() const;
    bool is_trace_number_Valid() const;

    QString getTransmissionType() const;
    void setTransmissionType(const QString &transmission_type);
    bool is_transmission_type_Set() const;
    bool is_transmission_type_Valid() const;

    bool isWithdrawable() const;
    void setWithdrawable(const bool &withdrawable);
    bool is_withdrawable_Set() const;
    bool is_withdrawable_Valid() const;

    QString getWithdrawnReason() const;
    void setWithdrawnReason(const QString &withdrawn_reason);
    bool is_withdrawn_reason_Set() const;
    bool is_withdrawn_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_account_number;
    bool m_account_number_isSet;
    bool m_account_number_isValid;

    QString m_auto_withdrawn_reason_code;
    bool m_auto_withdrawn_reason_code_isSet;
    bool m_auto_withdrawn_reason_code_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QList<OAIPaymentEventResponse> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_filename_reference;
    bool m_filename_reference_isSet;
    bool m_filename_reference_isValid;

    QString m_funding_status;
    bool m_funding_status_isSet;
    bool m_funding_status_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    QString m_individual_identification_number;
    bool m_individual_identification_number_isSet;
    bool m_individual_identification_number_isValid;

    double m_inverted_rate;
    bool m_inverted_rate_isSet;
    bool m_inverted_rate_isValid;

    bool m_is_payment_ccy_base_ccy;
    bool m_is_payment_ccy_base_ccy_isSet;
    bool m_is_payment_ccy_base_ccy_isValid;

    QString m_payee_address_country_code;
    bool m_payee_address_country_code_isSet;
    bool m_payee_address_country_code_isValid;

    QString m_payee_id;
    bool m_payee_id_isSet;
    bool m_payee_id_isValid;

    qint32 m_payment_amount;
    bool m_payment_amount_isSet;
    bool m_payment_amount_isValid;

    QString m_payment_channel_id;
    bool m_payment_channel_id_isSet;
    bool m_payment_channel_id_isValid;

    QString m_payment_channel_name;
    bool m_payment_channel_name_isSet;
    bool m_payment_channel_name_isValid;

    QString m_payment_currency;
    bool m_payment_currency_isSet;
    bool m_payment_currency_isValid;

    QString m_payment_id;
    bool m_payment_id_isSet;
    bool m_payment_id_isValid;

    QString m_payment_memo;
    bool m_payment_memo_isSet;
    bool m_payment_memo_isValid;

    QString m_payment_metadata;
    bool m_payment_metadata_isSet;
    bool m_payment_metadata_isValid;

    QString m_payment_scheme;
    bool m_payment_scheme_isSet;
    bool m_payment_scheme_isValid;

    QString m_payment_tracking_reference;
    bool m_payment_tracking_reference_isSet;
    bool m_payment_tracking_reference_isValid;

    QString m_payor_id;
    bool m_payor_id_isSet;
    bool m_payor_id_isValid;

    QString m_payor_name;
    bool m_payor_name_isSet;
    bool m_payor_name_isValid;

    QString m_payor_payment_id;
    bool m_payor_payment_id_isSet;
    bool m_payor_payment_id_isValid;

    OAIPaymentResponseV4_payout m_payout;
    bool m_payout_isSet;
    bool m_payout_isValid;

    OAIPostInstructFxInfo m_post_instruct_fx_info;
    bool m_post_instruct_fx_info_isSet;
    bool m_post_instruct_fx_info_isValid;

    QString m_quote_id;
    bool m_quote_id_isSet;
    bool m_quote_id_isValid;

    QString m_rails_batch_id;
    bool m_rails_batch_id_isSet;
    bool m_rails_batch_id_isValid;

    QString m_rails_id;
    bool m_rails_id_isSet;
    bool m_rails_id_isValid;

    QString m_rails_payment_id;
    bool m_rails_payment_id_isSet;
    bool m_rails_payment_id_isValid;

    double m_rate;
    bool m_rate_isSet;
    bool m_rate_isValid;

    QString m_rejection_reason;
    bool m_rejection_reason_isSet;
    bool m_rejection_reason_isValid;

    QString m_remote_id;
    bool m_remote_id_isSet;
    bool m_remote_id_isValid;

    QString m_remote_system_id;
    bool m_remote_system_id_isSet;
    bool m_remote_system_id_isValid;

    QString m_remote_system_payment_id;
    bool m_remote_system_payment_id_isSet;
    bool m_remote_system_payment_id_isValid;

    qint32 m_return_cost;
    bool m_return_cost_isSet;
    bool m_return_cost_isValid;

    QString m_return_reason;
    bool m_return_reason_isSet;
    bool m_return_reason_isValid;

    QString m_routing_number;
    bool m_routing_number_isSet;
    bool m_routing_number_isValid;

    OAIPayoutSchedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QString m_source_account_id;
    bool m_source_account_id_isSet;
    bool m_source_account_id_isValid;

    QString m_source_account_name;
    bool m_source_account_name_isSet;
    bool m_source_account_name_isValid;

    qint32 m_source_amount;
    bool m_source_amount_isSet;
    bool m_source_amount_isValid;

    QString m_source_currency;
    bool m_source_currency_isSet;
    bool m_source_currency_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_submitted_date_time;
    bool m_submitted_date_time_isSet;
    bool m_submitted_date_time_isValid;

    QString m_trace_number;
    bool m_trace_number_isSet;
    bool m_trace_number_isValid;

    QString m_transmission_type;
    bool m_transmission_type_isSet;
    bool m_transmission_type_isValid;

    bool m_withdrawable;
    bool m_withdrawable_isSet;
    bool m_withdrawable_isValid;

    QString m_withdrawn_reason;
    bool m_withdrawn_reason_isSet;
    bool m_withdrawn_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentResponseV4)

#endif // OAIPaymentResponseV4_H
