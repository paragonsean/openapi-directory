/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PaymentEventResponseV3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentResponseV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentResponseV3 {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<PaymentEventResponseV3> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILENAME_REFERENCE = "filenameReference";
  @SerializedName(SERIALIZED_NAME_FILENAME_REFERENCE)
  private String filenameReference;

  public static final String SERIALIZED_NAME_FUNDING_STATUS = "fundingStatus";
  @SerializedName(SERIALIZED_NAME_FUNDING_STATUS)
  private String fundingStatus;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_INDIVIDUAL_IDENTIFICATION_NUMBER = "individualIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_IDENTIFICATION_NUMBER)
  private String individualIdentificationNumber;

  public static final String SERIALIZED_NAME_INVERTED_RATE = "invertedRate";
  @SerializedName(SERIALIZED_NAME_INVERTED_RATE)
  private Float invertedRate;

  public static final String SERIALIZED_NAME_PAYEE_ID = "payeeId";
  @SerializedName(SERIALIZED_NAME_PAYEE_ID)
  private UUID payeeId;

  public static final String SERIALIZED_NAME_PAYMENT_AMOUNT = "paymentAmount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AMOUNT)
  private Integer paymentAmount;

  public static final String SERIALIZED_NAME_PAYMENT_CHANNEL_ID = "paymentChannelId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CHANNEL_ID)
  private String paymentChannelId;

  public static final String SERIALIZED_NAME_PAYMENT_CHANNEL_NAME = "paymentChannelName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CHANNEL_NAME)
  private String paymentChannelName;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "paymentCurrency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private UUID paymentId;

  public static final String SERIALIZED_NAME_PAYMENT_MEMO = "paymentMemo";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEMO)
  private String paymentMemo;

  public static final String SERIALIZED_NAME_PAYMENT_SCHEME = "paymentScheme";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SCHEME)
  private String paymentScheme;

  public static final String SERIALIZED_NAME_PAYOR_ID = "payorId";
  @SerializedName(SERIALIZED_NAME_PAYOR_ID)
  private UUID payorId;

  public static final String SERIALIZED_NAME_PAYOR_NAME = "payorName";
  @SerializedName(SERIALIZED_NAME_PAYOR_NAME)
  private String payorName;

  public static final String SERIALIZED_NAME_PAYOR_PAYMENT_ID = "payorPaymentId";
  @SerializedName(SERIALIZED_NAME_PAYOR_PAYMENT_ID)
  private String payorPaymentId;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private UUID quoteId;

  public static final String SERIALIZED_NAME_RAILS_BATCH_ID = "railsBatchId";
  @SerializedName(SERIALIZED_NAME_RAILS_BATCH_ID)
  private String railsBatchId;

  public static final String SERIALIZED_NAME_RAILS_ID = "railsId";
  @SerializedName(SERIALIZED_NAME_RAILS_ID)
  private String railsId = "RAILS ID UNAVAILABLE";

  public static final String SERIALIZED_NAME_RAILS_PAYMENT_ID = "railsPaymentId";
  @SerializedName(SERIALIZED_NAME_RAILS_PAYMENT_ID)
  private String railsPaymentId;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Float rate;

  public static final String SERIALIZED_NAME_REJECTION_REASON = "rejectionReason";
  @SerializedName(SERIALIZED_NAME_REJECTION_REASON)
  private String rejectionReason;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_RETURN_COST = "returnCost";
  @SerializedName(SERIALIZED_NAME_RETURN_COST)
  private Integer returnCost;

  public static final String SERIALIZED_NAME_RETURN_REASON = "returnReason";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON)
  private String returnReason;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_ID = "sourceAccountId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_ID)
  private UUID sourceAccountId;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_NAME = "sourceAccountName";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_NAME)
  private String sourceAccountName;

  public static final String SERIALIZED_NAME_SOURCE_AMOUNT = "sourceAmount";
  @SerializedName(SERIALIZED_NAME_SOURCE_AMOUNT)
  private Integer sourceAmount;

  public static final String SERIALIZED_NAME_SOURCE_CURRENCY = "sourceCurrency";
  @SerializedName(SERIALIZED_NAME_SOURCE_CURRENCY)
  private String sourceCurrency;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE_TIME = "submittedDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE_TIME)
  private OffsetDateTime submittedDateTime;

  public static final String SERIALIZED_NAME_TRACE_NUMBER = "traceNumber";
  @SerializedName(SERIALIZED_NAME_TRACE_NUMBER)
  private String traceNumber;

  public PaymentResponseV3() {
  }

  public PaymentResponseV3 accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public PaymentResponseV3 accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the account which will receive the payment.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public PaymentResponseV3 countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country code of the payment channel.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PaymentResponseV3 events(List<PaymentEventResponseV3> events) {
    this.events = events;
    return this;
  }

  public PaymentResponseV3 addEventsItem(PaymentEventResponseV3 eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nonnull
  public List<PaymentEventResponseV3> getEvents() {
    return events;
  }

  public void setEvents(List<PaymentEventResponseV3> events) {
    this.events = events;
  }


  public PaymentResponseV3 filenameReference(String filenameReference) {
    this.filenameReference = filenameReference;
    return this;
  }

  /**
   * ACH file payment was submitted in, if applicable
   * @return filenameReference
   */
  @javax.annotation.Nullable
  public String getFilenameReference() {
    return filenameReference;
  }

  public void setFilenameReference(String filenameReference) {
    this.filenameReference = filenameReference;
  }


  public PaymentResponseV3 fundingStatus(String fundingStatus) {
    this.fundingStatus = fundingStatus;
    return this;
  }

  /**
   * The funding status of the payment. One of the following values: [FUNDED, INSTRUCTED, UNFUNDED
   * @return fundingStatus
   */
  @javax.annotation.Nonnull
  public String getFundingStatus() {
    return fundingStatus;
  }

  public void setFundingStatus(String fundingStatus) {
    this.fundingStatus = fundingStatus;
  }


  public PaymentResponseV3 iban(String iban) {
    this.iban = iban;
    return this;
  }

  /**
   * The iban for the payment.
   * @return iban
   */
  @javax.annotation.Nullable
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }


  public PaymentResponseV3 individualIdentificationNumber(String individualIdentificationNumber) {
    this.individualIdentificationNumber = individualIdentificationNumber;
    return this;
  }

  /**
   * Individual Identification Number assigned to the payment in the ACH file, if applicable
   * @return individualIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getIndividualIdentificationNumber() {
    return individualIdentificationNumber;
  }

  public void setIndividualIdentificationNumber(String individualIdentificationNumber) {
    this.individualIdentificationNumber = individualIdentificationNumber;
  }


  public PaymentResponseV3 invertedRate(Float invertedRate) {
    this.invertedRate = invertedRate;
    return this;
  }

  /**
   * The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
   * @return invertedRate
   */
  @javax.annotation.Nullable
  public Float getInvertedRate() {
    return invertedRate;
  }

  public void setInvertedRate(Float invertedRate) {
    this.invertedRate = invertedRate;
  }


  public PaymentResponseV3 payeeId(UUID payeeId) {
    this.payeeId = payeeId;
    return this;
  }

  /**
   * The id of the paymeee
   * @return payeeId
   */
  @javax.annotation.Nonnull
  public UUID getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }


  public PaymentResponseV3 paymentAmount(Integer paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * The amount which the payee will receive
   * @return paymentAmount
   */
  @javax.annotation.Nonnull
  public Integer getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(Integer paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public PaymentResponseV3 paymentChannelId(String paymentChannelId) {
    this.paymentChannelId = paymentChannelId;
    return this;
  }

  /**
   * Get paymentChannelId
   * @return paymentChannelId
   */
  @javax.annotation.Nullable
  public String getPaymentChannelId() {
    return paymentChannelId;
  }

  public void setPaymentChannelId(String paymentChannelId) {
    this.paymentChannelId = paymentChannelId;
  }


  public PaymentResponseV3 paymentChannelName(String paymentChannelName) {
    this.paymentChannelName = paymentChannelName;
    return this;
  }

  /**
   * Get paymentChannelName
   * @return paymentChannelName
   */
  @javax.annotation.Nullable
  public String getPaymentChannelName() {
    return paymentChannelName;
  }

  public void setPaymentChannelName(String paymentChannelName) {
    this.paymentChannelName = paymentChannelName;
  }


  public PaymentResponseV3 paymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * ISO 3 character currency code
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public PaymentResponseV3 paymentId(UUID paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The id of the payment
   * @return paymentId
   */
  @javax.annotation.Nonnull
  public UUID getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(UUID paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentResponseV3 paymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
    return this;
  }

  /**
   * The payment memo set by the payor
   * @return paymentMemo
   */
  @javax.annotation.Nullable
  public String getPaymentMemo() {
    return paymentMemo;
  }

  public void setPaymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
  }


  public PaymentResponseV3 paymentScheme(String paymentScheme) {
    this.paymentScheme = paymentScheme;
    return this;
  }

  /**
   * Get paymentScheme
   * @return paymentScheme
   */
  @javax.annotation.Nullable
  public String getPaymentScheme() {
    return paymentScheme;
  }

  public void setPaymentScheme(String paymentScheme) {
    this.paymentScheme = paymentScheme;
  }


  public PaymentResponseV3 payorId(UUID payorId) {
    this.payorId = payorId;
    return this;
  }

  /**
   * The id of the payor
   * @return payorId
   */
  @javax.annotation.Nonnull
  public UUID getPayorId() {
    return payorId;
  }

  public void setPayorId(UUID payorId) {
    this.payorId = payorId;
  }


  public PaymentResponseV3 payorName(String payorName) {
    this.payorName = payorName;
    return this;
  }

  /**
   * The name of the payor
   * @return payorName
   */
  @javax.annotation.Nullable
  public String getPayorName() {
    return payorName;
  }

  public void setPayorName(String payorName) {
    this.payorName = payorName;
  }


  public PaymentResponseV3 payorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
    return this;
  }

  /**
   * Get payorPaymentId
   * @return payorPaymentId
   */
  @javax.annotation.Nullable
  public String getPayorPaymentId() {
    return payorPaymentId;
  }

  public void setPayorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
  }


  public PaymentResponseV3 quoteId(UUID quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * The quote Id used for the FX
   * @return quoteId
   */
  @javax.annotation.Nonnull
  public UUID getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(UUID quoteId) {
    this.quoteId = quoteId;
  }


  public PaymentResponseV3 railsBatchId(String railsBatchId) {
    this.railsBatchId = railsBatchId;
    return this;
  }

  /**
   * Get railsBatchId
   * @return railsBatchId
   */
  @javax.annotation.Nullable
  public String getRailsBatchId() {
    return railsBatchId;
  }

  public void setRailsBatchId(String railsBatchId) {
    this.railsBatchId = railsBatchId;
  }


  public PaymentResponseV3 railsId(String railsId) {
    this.railsId = railsId;
    return this;
  }

  /**
   * The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.
   * @return railsId
   */
  @javax.annotation.Nonnull
  public String getRailsId() {
    return railsId;
  }

  public void setRailsId(String railsId) {
    this.railsId = railsId;
  }


  public PaymentResponseV3 railsPaymentId(String railsPaymentId) {
    this.railsPaymentId = railsPaymentId;
    return this;
  }

  /**
   * Get railsPaymentId
   * @return railsPaymentId
   */
  @javax.annotation.Nullable
  public String getRailsPaymentId() {
    return railsPaymentId;
  }

  public void setRailsPaymentId(String railsPaymentId) {
    this.railsPaymentId = railsPaymentId;
  }


  public PaymentResponseV3 rate(Float rate) {
    this.rate = rate;
    return this;
  }

  /**
   * The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
   * @return rate
   */
  @javax.annotation.Nullable
  public Float getRate() {
    return rate;
  }

  public void setRate(Float rate) {
    this.rate = rate;
  }


  public PaymentResponseV3 rejectionReason(String rejectionReason) {
    this.rejectionReason = rejectionReason;
    return this;
  }

  /**
   * Get rejectionReason
   * @return rejectionReason
   */
  @javax.annotation.Nullable
  public String getRejectionReason() {
    return rejectionReason;
  }

  public void setRejectionReason(String rejectionReason) {
    this.rejectionReason = rejectionReason;
  }


  public PaymentResponseV3 remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * The remote id by which the payor refers to the payee. Only populated once payment is confirmed
   * @return remoteId
   */
  @javax.annotation.Nullable
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public PaymentResponseV3 returnCost(Integer returnCost) {
    this.returnCost = returnCost;
    return this;
  }

  /**
   * The return cost if a returned payment.
   * @return returnCost
   */
  @javax.annotation.Nullable
  public Integer getReturnCost() {
    return returnCost;
  }

  public void setReturnCost(Integer returnCost) {
    this.returnCost = returnCost;
  }


  public PaymentResponseV3 returnReason(String returnReason) {
    this.returnReason = returnReason;
    return this;
  }

  /**
   * Get returnReason
   * @return returnReason
   */
  @javax.annotation.Nullable
  public String getReturnReason() {
    return returnReason;
  }

  public void setReturnReason(String returnReason) {
    this.returnReason = returnReason;
  }


  public PaymentResponseV3 routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The routing number for the payment.
   * @return routingNumber
   */
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public PaymentResponseV3 sourceAccountId(UUID sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
    return this;
  }

  /**
   * The id of the source account from which the payment was taken
   * @return sourceAccountId
   */
  @javax.annotation.Nonnull
  public UUID getSourceAccountId() {
    return sourceAccountId;
  }

  public void setSourceAccountId(UUID sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
  }


  public PaymentResponseV3 sourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
    return this;
  }

  /**
   * The name of the source account from which the payment was taken
   * @return sourceAccountName
   */
  @javax.annotation.Nullable
  public String getSourceAccountName() {
    return sourceAccountName;
  }

  public void setSourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
  }


  public PaymentResponseV3 sourceAmount(Integer sourceAmount) {
    this.sourceAmount = sourceAmount;
    return this;
  }

  /**
   * The source amount for the payment (amount debited to make the payment)
   * @return sourceAmount
   */
  @javax.annotation.Nullable
  public Integer getSourceAmount() {
    return sourceAmount;
  }

  public void setSourceAmount(Integer sourceAmount) {
    this.sourceAmount = sourceAmount;
  }


  public PaymentResponseV3 sourceCurrency(String sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
    return this;
  }

  /**
   * ISO 3 character currency code
   * @return sourceCurrency
   */
  @javax.annotation.Nullable
  public String getSourceCurrency() {
    return sourceCurrency;
  }

  public void setSourceCurrency(String sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }


  public PaymentResponseV3 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, FAILED, WITHDRAWN
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentResponseV3 submittedDateTime(OffsetDateTime submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
    return this;
  }

  /**
   * Get submittedDateTime
   * @return submittedDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSubmittedDateTime() {
    return submittedDateTime;
  }

  public void setSubmittedDateTime(OffsetDateTime submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
  }


  public PaymentResponseV3 traceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
    return this;
  }

  /**
   * Trace Number assigned to the payment in the ACH file, if applicable
   * @return traceNumber
   */
  @javax.annotation.Nullable
  public String getTraceNumber() {
    return traceNumber;
  }

  public void setTraceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentResponseV3 paymentResponseV3 = (PaymentResponseV3) o;
    return Objects.equals(this.accountName, paymentResponseV3.accountName) &&
        Objects.equals(this.accountNumber, paymentResponseV3.accountNumber) &&
        Objects.equals(this.countryCode, paymentResponseV3.countryCode) &&
        Objects.equals(this.events, paymentResponseV3.events) &&
        Objects.equals(this.filenameReference, paymentResponseV3.filenameReference) &&
        Objects.equals(this.fundingStatus, paymentResponseV3.fundingStatus) &&
        Objects.equals(this.iban, paymentResponseV3.iban) &&
        Objects.equals(this.individualIdentificationNumber, paymentResponseV3.individualIdentificationNumber) &&
        Objects.equals(this.invertedRate, paymentResponseV3.invertedRate) &&
        Objects.equals(this.payeeId, paymentResponseV3.payeeId) &&
        Objects.equals(this.paymentAmount, paymentResponseV3.paymentAmount) &&
        Objects.equals(this.paymentChannelId, paymentResponseV3.paymentChannelId) &&
        Objects.equals(this.paymentChannelName, paymentResponseV3.paymentChannelName) &&
        Objects.equals(this.paymentCurrency, paymentResponseV3.paymentCurrency) &&
        Objects.equals(this.paymentId, paymentResponseV3.paymentId) &&
        Objects.equals(this.paymentMemo, paymentResponseV3.paymentMemo) &&
        Objects.equals(this.paymentScheme, paymentResponseV3.paymentScheme) &&
        Objects.equals(this.payorId, paymentResponseV3.payorId) &&
        Objects.equals(this.payorName, paymentResponseV3.payorName) &&
        Objects.equals(this.payorPaymentId, paymentResponseV3.payorPaymentId) &&
        Objects.equals(this.quoteId, paymentResponseV3.quoteId) &&
        Objects.equals(this.railsBatchId, paymentResponseV3.railsBatchId) &&
        Objects.equals(this.railsId, paymentResponseV3.railsId) &&
        Objects.equals(this.railsPaymentId, paymentResponseV3.railsPaymentId) &&
        Objects.equals(this.rate, paymentResponseV3.rate) &&
        Objects.equals(this.rejectionReason, paymentResponseV3.rejectionReason) &&
        Objects.equals(this.remoteId, paymentResponseV3.remoteId) &&
        Objects.equals(this.returnCost, paymentResponseV3.returnCost) &&
        Objects.equals(this.returnReason, paymentResponseV3.returnReason) &&
        Objects.equals(this.routingNumber, paymentResponseV3.routingNumber) &&
        Objects.equals(this.sourceAccountId, paymentResponseV3.sourceAccountId) &&
        Objects.equals(this.sourceAccountName, paymentResponseV3.sourceAccountName) &&
        Objects.equals(this.sourceAmount, paymentResponseV3.sourceAmount) &&
        Objects.equals(this.sourceCurrency, paymentResponseV3.sourceCurrency) &&
        Objects.equals(this.status, paymentResponseV3.status) &&
        Objects.equals(this.submittedDateTime, paymentResponseV3.submittedDateTime) &&
        Objects.equals(this.traceNumber, paymentResponseV3.traceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountNumber, countryCode, events, filenameReference, fundingStatus, iban, individualIdentificationNumber, invertedRate, payeeId, paymentAmount, paymentChannelId, paymentChannelName, paymentCurrency, paymentId, paymentMemo, paymentScheme, payorId, payorName, payorPaymentId, quoteId, railsBatchId, railsId, railsPaymentId, rate, rejectionReason, remoteId, returnCost, returnReason, routingNumber, sourceAccountId, sourceAccountName, sourceAmount, sourceCurrency, status, submittedDateTime, traceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentResponseV3 {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filenameReference: ").append(toIndentedString(filenameReference)).append("\n");
    sb.append("    fundingStatus: ").append(toIndentedString(fundingStatus)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    individualIdentificationNumber: ").append(toIndentedString(individualIdentificationNumber)).append("\n");
    sb.append("    invertedRate: ").append(toIndentedString(invertedRate)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentChannelId: ").append(toIndentedString(paymentChannelId)).append("\n");
    sb.append("    paymentChannelName: ").append(toIndentedString(paymentChannelName)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentMemo: ").append(toIndentedString(paymentMemo)).append("\n");
    sb.append("    paymentScheme: ").append(toIndentedString(paymentScheme)).append("\n");
    sb.append("    payorId: ").append(toIndentedString(payorId)).append("\n");
    sb.append("    payorName: ").append(toIndentedString(payorName)).append("\n");
    sb.append("    payorPaymentId: ").append(toIndentedString(payorPaymentId)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    railsBatchId: ").append(toIndentedString(railsBatchId)).append("\n");
    sb.append("    railsId: ").append(toIndentedString(railsId)).append("\n");
    sb.append("    railsPaymentId: ").append(toIndentedString(railsPaymentId)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rejectionReason: ").append(toIndentedString(rejectionReason)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    returnCost: ").append(toIndentedString(returnCost)).append("\n");
    sb.append("    returnReason: ").append(toIndentedString(returnReason)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    sourceAccountId: ").append(toIndentedString(sourceAccountId)).append("\n");
    sb.append("    sourceAccountName: ").append(toIndentedString(sourceAccountName)).append("\n");
    sb.append("    sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedDateTime: ").append(toIndentedString(submittedDateTime)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountNumber");
    openapiFields.add("countryCode");
    openapiFields.add("events");
    openapiFields.add("filenameReference");
    openapiFields.add("fundingStatus");
    openapiFields.add("iban");
    openapiFields.add("individualIdentificationNumber");
    openapiFields.add("invertedRate");
    openapiFields.add("payeeId");
    openapiFields.add("paymentAmount");
    openapiFields.add("paymentChannelId");
    openapiFields.add("paymentChannelName");
    openapiFields.add("paymentCurrency");
    openapiFields.add("paymentId");
    openapiFields.add("paymentMemo");
    openapiFields.add("paymentScheme");
    openapiFields.add("payorId");
    openapiFields.add("payorName");
    openapiFields.add("payorPaymentId");
    openapiFields.add("quoteId");
    openapiFields.add("railsBatchId");
    openapiFields.add("railsId");
    openapiFields.add("railsPaymentId");
    openapiFields.add("rate");
    openapiFields.add("rejectionReason");
    openapiFields.add("remoteId");
    openapiFields.add("returnCost");
    openapiFields.add("returnReason");
    openapiFields.add("routingNumber");
    openapiFields.add("sourceAccountId");
    openapiFields.add("sourceAccountName");
    openapiFields.add("sourceAmount");
    openapiFields.add("sourceCurrency");
    openapiFields.add("status");
    openapiFields.add("submittedDateTime");
    openapiFields.add("traceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("fundingStatus");
    openapiRequiredFields.add("payeeId");
    openapiRequiredFields.add("paymentAmount");
    openapiRequiredFields.add("paymentId");
    openapiRequiredFields.add("payorId");
    openapiRequiredFields.add("quoteId");
    openapiRequiredFields.add("railsId");
    openapiRequiredFields.add("sourceAccountId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submittedDateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentResponseV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentResponseV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentResponseV3 is not found in the empty JSON string", PaymentResponseV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentResponseV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentResponseV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentResponseV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }

      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      // validate the required field `events` (array)
      for (int i = 0; i < jsonArrayevents.size(); i++) {
        PaymentEventResponseV3.validateJsonElement(jsonArrayevents.get(i));
      };
      if ((jsonObj.get("filenameReference") != null && !jsonObj.get("filenameReference").isJsonNull()) && !jsonObj.get("filenameReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filenameReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filenameReference").toString()));
      }
      if (!jsonObj.get("fundingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingStatus").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("individualIdentificationNumber") != null && !jsonObj.get("individualIdentificationNumber").isJsonNull()) && !jsonObj.get("individualIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individualIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individualIdentificationNumber").toString()));
      }
      if (!jsonObj.get("payeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeId").toString()));
      }
      if ((jsonObj.get("paymentChannelId") != null && !jsonObj.get("paymentChannelId").isJsonNull()) && !jsonObj.get("paymentChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentChannelId").toString()));
      }
      if ((jsonObj.get("paymentChannelName") != null && !jsonObj.get("paymentChannelName").isJsonNull()) && !jsonObj.get("paymentChannelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentChannelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentChannelName").toString()));
      }
      if ((jsonObj.get("paymentCurrency") != null && !jsonObj.get("paymentCurrency").isJsonNull()) && !jsonObj.get("paymentCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCurrency").toString()));
      }
      if (!jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
      if ((jsonObj.get("paymentMemo") != null && !jsonObj.get("paymentMemo").isJsonNull()) && !jsonObj.get("paymentMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMemo").toString()));
      }
      if ((jsonObj.get("paymentScheme") != null && !jsonObj.get("paymentScheme").isJsonNull()) && !jsonObj.get("paymentScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentScheme").toString()));
      }
      if (!jsonObj.get("payorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorId").toString()));
      }
      if ((jsonObj.get("payorName") != null && !jsonObj.get("payorName").isJsonNull()) && !jsonObj.get("payorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorName").toString()));
      }
      if ((jsonObj.get("payorPaymentId") != null && !jsonObj.get("payorPaymentId").isJsonNull()) && !jsonObj.get("payorPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorPaymentId").toString()));
      }
      if (!jsonObj.get("quoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteId").toString()));
      }
      if ((jsonObj.get("railsBatchId") != null && !jsonObj.get("railsBatchId").isJsonNull()) && !jsonObj.get("railsBatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `railsBatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("railsBatchId").toString()));
      }
      if (!jsonObj.get("railsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `railsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("railsId").toString()));
      }
      if ((jsonObj.get("railsPaymentId") != null && !jsonObj.get("railsPaymentId").isJsonNull()) && !jsonObj.get("railsPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `railsPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("railsPaymentId").toString()));
      }
      if ((jsonObj.get("rejectionReason") != null && !jsonObj.get("rejectionReason").isJsonNull()) && !jsonObj.get("rejectionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectionReason").toString()));
      }
      if ((jsonObj.get("remoteId") != null && !jsonObj.get("remoteId").isJsonNull()) && !jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("returnReason") != null && !jsonObj.get("returnReason").isJsonNull()) && !jsonObj.get("returnReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnReason").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if (!jsonObj.get("sourceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountId").toString()));
      }
      if ((jsonObj.get("sourceAccountName") != null && !jsonObj.get("sourceAccountName").isJsonNull()) && !jsonObj.get("sourceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountName").toString()));
      }
      if ((jsonObj.get("sourceCurrency") != null && !jsonObj.get("sourceCurrency").isJsonNull()) && !jsonObj.get("sourceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCurrency").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("traceNumber") != null && !jsonObj.get("traceNumber").isJsonNull()) && !jsonObj.get("traceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentResponseV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentResponseV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentResponseV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentResponseV3.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentResponseV3>() {
           @Override
           public void write(JsonWriter out, PaymentResponseV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentResponseV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentResponseV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentResponseV3
   * @throws IOException if the JSON string is invalid with respect to PaymentResponseV3
   */
  public static PaymentResponseV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentResponseV3.class);
  }

  /**
   * Convert an instance of PaymentResponseV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

