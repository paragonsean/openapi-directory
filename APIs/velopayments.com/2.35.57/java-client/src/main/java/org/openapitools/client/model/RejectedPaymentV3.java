/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RejectedPaymentV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RejectedPaymentV3 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CURRENCY_TYPE = "currencyType";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TYPE)
  private String currencyType;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private Integer lineNumber;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAYMENT_METADATA = "paymentMetadata";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METADATA)
  private String paymentMetadata;

  public static final String SERIALIZED_NAME_PAYOR_PAYMENT_ID = "payorPaymentId";
  @SerializedName(SERIALIZED_NAME_PAYOR_PAYMENT_ID)
  private String payorPaymentId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_REMOTE_SYSTEM_ID = "remoteSystemId";
  @SerializedName(SERIALIZED_NAME_REMOTE_SYSTEM_ID)
  private String remoteSystemId;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_NAME = "sourceAccountName";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_NAME)
  private String sourceAccountName;

  public RejectedPaymentV3() {
  }

  public RejectedPaymentV3 amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payment in minor units
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public RejectedPaymentV3 currencyType(String currencyType) {
    this.currencyType = currencyType;
    return this;
  }

  /**
   * Valid ISO 4217 3 letter currency code. See the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-4217-currency-codes.html\&quot; target&#x3D;\&quot;_blank\&quot; a&gt;ISO specification&lt;/a&gt; for details.
   * @return currencyType
   */
  @javax.annotation.Nonnull
  public String getCurrencyType() {
    return currencyType;
  }

  public void setCurrencyType(String currencyType) {
    this.currencyType = currencyType;
  }


  public RejectedPaymentV3 lineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * If the payment was submitted in a csv payout then this will be the line number of the payment in the file
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
  }


  public RejectedPaymentV3 message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A more general rejection message than the reason property
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public RejectedPaymentV3 paymentMetadata(String paymentMetadata) {
    this.paymentMetadata = paymentMetadata;
    return this;
  }

  /**
   * &lt;p&gt;Metadata about the payment that may be relevant to the specific rails or remote system making the payout&lt;/p&gt; &lt;p&gt;The structure of the data will be dictated by the requirements of the payment rails&lt;/p&gt; 
   * @return paymentMetadata
   */
  @javax.annotation.Nullable
  public String getPaymentMetadata() {
    return paymentMetadata;
  }

  public void setPaymentMetadata(String paymentMetadata) {
    this.paymentMetadata = paymentMetadata;
  }


  public RejectedPaymentV3 payorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
    return this;
  }

  /**
   * A reference identifier for the payor for the given payee payment
   * @return payorPaymentId
   */
  @javax.annotation.Nonnull
  public String getPayorPaymentId() {
    return payorPaymentId;
  }

  public void setPayorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
  }


  public RejectedPaymentV3 reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the payment being rejected
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public RejectedPaymentV3 reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * The reason code as determined by Velo
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public RejectedPaymentV3 remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * The remoteId supplied by the payor that identifies the payee
   * @return remoteId
   */
  @javax.annotation.Nonnull
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public RejectedPaymentV3 remoteSystemId(String remoteSystemId) {
    this.remoteSystemId = remoteSystemId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier for the remote payments system if not Velo&lt;/p&gt; 
   * @return remoteSystemId
   */
  @javax.annotation.Nullable
  public String getRemoteSystemId() {
    return remoteSystemId;
  }

  public void setRemoteSystemId(String remoteSystemId) {
    this.remoteSystemId = remoteSystemId;
  }


  public RejectedPaymentV3 sourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
    return this;
  }

  /**
   * The identifier of the source account to debit the payment from
   * @return sourceAccountName
   */
  @javax.annotation.Nonnull
  public String getSourceAccountName() {
    return sourceAccountName;
  }

  public void setSourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RejectedPaymentV3 rejectedPaymentV3 = (RejectedPaymentV3) o;
    return Objects.equals(this.amount, rejectedPaymentV3.amount) &&
        Objects.equals(this.currencyType, rejectedPaymentV3.currencyType) &&
        Objects.equals(this.lineNumber, rejectedPaymentV3.lineNumber) &&
        Objects.equals(this.message, rejectedPaymentV3.message) &&
        Objects.equals(this.paymentMetadata, rejectedPaymentV3.paymentMetadata) &&
        Objects.equals(this.payorPaymentId, rejectedPaymentV3.payorPaymentId) &&
        Objects.equals(this.reason, rejectedPaymentV3.reason) &&
        Objects.equals(this.reasonCode, rejectedPaymentV3.reasonCode) &&
        Objects.equals(this.remoteId, rejectedPaymentV3.remoteId) &&
        Objects.equals(this.remoteSystemId, rejectedPaymentV3.remoteSystemId) &&
        Objects.equals(this.sourceAccountName, rejectedPaymentV3.sourceAccountName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currencyType, lineNumber, message, paymentMetadata, payorPaymentId, reason, reasonCode, remoteId, remoteSystemId, sourceAccountName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RejectedPaymentV3 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    paymentMetadata: ").append(toIndentedString(paymentMetadata)).append("\n");
    sb.append("    payorPaymentId: ").append(toIndentedString(payorPaymentId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    remoteSystemId: ").append(toIndentedString(remoteSystemId)).append("\n");
    sb.append("    sourceAccountName: ").append(toIndentedString(sourceAccountName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currencyType");
    openapiFields.add("lineNumber");
    openapiFields.add("message");
    openapiFields.add("paymentMetadata");
    openapiFields.add("payorPaymentId");
    openapiFields.add("reason");
    openapiFields.add("reasonCode");
    openapiFields.add("remoteId");
    openapiFields.add("remoteSystemId");
    openapiFields.add("sourceAccountName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currencyType");
    openapiRequiredFields.add("payorPaymentId");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("remoteId");
    openapiRequiredFields.add("sourceAccountName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RejectedPaymentV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RejectedPaymentV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RejectedPaymentV3 is not found in the empty JSON string", RejectedPaymentV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RejectedPaymentV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RejectedPaymentV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RejectedPaymentV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currencyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyType").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("paymentMetadata") != null && !jsonObj.get("paymentMetadata").isJsonNull()) && !jsonObj.get("paymentMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMetadata").toString()));
      }
      if (!jsonObj.get("payorPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorPaymentId").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if (!jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("remoteSystemId") != null && !jsonObj.get("remoteSystemId").isJsonNull()) && !jsonObj.get("remoteSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteSystemId").toString()));
      }
      if (!jsonObj.get("sourceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RejectedPaymentV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RejectedPaymentV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RejectedPaymentV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RejectedPaymentV3.class));

       return (TypeAdapter<T>) new TypeAdapter<RejectedPaymentV3>() {
           @Override
           public void write(JsonWriter out, RejectedPaymentV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RejectedPaymentV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RejectedPaymentV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RejectedPaymentV3
   * @throws IOException if the JSON string is invalid with respect to RejectedPaymentV3
   */
  public static RejectedPaymentV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RejectedPaymentV3.class);
  }

  /**
   * Convert an instance of RejectedPaymentV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

