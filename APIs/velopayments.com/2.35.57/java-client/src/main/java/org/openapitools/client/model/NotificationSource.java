/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DebitStatusChanged;
import org.openapitools.client.model.OnboardingStatusChanged;
import org.openapitools.client.model.PayableStatusChanged;
import org.openapitools.client.model.PayeeDetailsChanged;
import org.openapitools.client.model.PayeeEventAllOfReasons;
import org.openapitools.client.model.PaymentRejectedOrReturned;
import org.openapitools.client.model.PaymentStatusChanged;
import org.openapitools.client.model.PayoutPayorIds;
import org.openapitools.client.model.Ping;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationSource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NotificationSource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotificationSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotificationSource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Ping> adapterPing = gson.getDelegateAdapter(this, TypeToken.get(Ping.class));
            final TypeAdapter<PaymentStatusChanged> adapterPaymentStatusChanged = gson.getDelegateAdapter(this, TypeToken.get(PaymentStatusChanged.class));
            final TypeAdapter<PaymentRejectedOrReturned> adapterPaymentRejectedOrReturned = gson.getDelegateAdapter(this, TypeToken.get(PaymentRejectedOrReturned.class));
            final TypeAdapter<OnboardingStatusChanged> adapterOnboardingStatusChanged = gson.getDelegateAdapter(this, TypeToken.get(OnboardingStatusChanged.class));
            final TypeAdapter<PayableStatusChanged> adapterPayableStatusChanged = gson.getDelegateAdapter(this, TypeToken.get(PayableStatusChanged.class));
            final TypeAdapter<PayeeDetailsChanged> adapterPayeeDetailsChanged = gson.getDelegateAdapter(this, TypeToken.get(PayeeDetailsChanged.class));
            final TypeAdapter<DebitStatusChanged> adapterDebitStatusChanged = gson.getDelegateAdapter(this, TypeToken.get(DebitStatusChanged.class));

            return (TypeAdapter<T>) new TypeAdapter<NotificationSource>() {
                @Override
                public void write(JsonWriter out, NotificationSource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Ping`
                    if (value.getActualInstance() instanceof Ping) {
                        JsonElement element = adapterPing.toJsonTree((Ping)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentStatusChanged`
                    if (value.getActualInstance() instanceof PaymentStatusChanged) {
                        JsonElement element = adapterPaymentStatusChanged.toJsonTree((PaymentStatusChanged)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentRejectedOrReturned`
                    if (value.getActualInstance() instanceof PaymentRejectedOrReturned) {
                        JsonElement element = adapterPaymentRejectedOrReturned.toJsonTree((PaymentRejectedOrReturned)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OnboardingStatusChanged`
                    if (value.getActualInstance() instanceof OnboardingStatusChanged) {
                        JsonElement element = adapterOnboardingStatusChanged.toJsonTree((OnboardingStatusChanged)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PayableStatusChanged`
                    if (value.getActualInstance() instanceof PayableStatusChanged) {
                        JsonElement element = adapterPayableStatusChanged.toJsonTree((PayableStatusChanged)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PayeeDetailsChanged`
                    if (value.getActualInstance() instanceof PayeeDetailsChanged) {
                        JsonElement element = adapterPayeeDetailsChanged.toJsonTree((PayeeDetailsChanged)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DebitStatusChanged`
                    if (value.getActualInstance() instanceof DebitStatusChanged) {
                        JsonElement element = adapterDebitStatusChanged.toJsonTree((DebitStatusChanged)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping");
                }

                @Override
                public NotificationSource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Ping
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Ping.validateJsonElement(jsonElement);
                        actualAdapter = adapterPing;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Ping'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Ping failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Ping'", e);
                    }
                    // deserialize PaymentStatusChanged
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentStatusChanged.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentStatusChanged;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentStatusChanged'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentStatusChanged failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentStatusChanged'", e);
                    }
                    // deserialize PaymentRejectedOrReturned
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentRejectedOrReturned.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentRejectedOrReturned;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentRejectedOrReturned'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentRejectedOrReturned failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentRejectedOrReturned'", e);
                    }
                    // deserialize OnboardingStatusChanged
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OnboardingStatusChanged.validateJsonElement(jsonElement);
                        actualAdapter = adapterOnboardingStatusChanged;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OnboardingStatusChanged'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OnboardingStatusChanged failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OnboardingStatusChanged'", e);
                    }
                    // deserialize PayableStatusChanged
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayableStatusChanged.validateJsonElement(jsonElement);
                        actualAdapter = adapterPayableStatusChanged;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayableStatusChanged'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayableStatusChanged failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayableStatusChanged'", e);
                    }
                    // deserialize PayeeDetailsChanged
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayeeDetailsChanged.validateJsonElement(jsonElement);
                        actualAdapter = adapterPayeeDetailsChanged;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayeeDetailsChanged'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayeeDetailsChanged failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayeeDetailsChanged'", e);
                    }
                    // deserialize DebitStatusChanged
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DebitStatusChanged.validateJsonElement(jsonElement);
                        actualAdapter = adapterDebitStatusChanged;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DebitStatusChanged'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DebitStatusChanged failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DebitStatusChanged'", e);
                    }

                    if (match == 1) {
                        NotificationSource ret = new NotificationSource();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NotificationSource: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NotificationSource() {
        super("oneOf", Boolean.FALSE);
    }

    public NotificationSource(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Ping", Ping.class);
        schemas.put("PaymentStatusChanged", PaymentStatusChanged.class);
        schemas.put("PaymentRejectedOrReturned", PaymentRejectedOrReturned.class);
        schemas.put("OnboardingStatusChanged", OnboardingStatusChanged.class);
        schemas.put("PayableStatusChanged", PayableStatusChanged.class);
        schemas.put("PayeeDetailsChanged", PayeeDetailsChanged.class);
        schemas.put("DebitStatusChanged", DebitStatusChanged.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NotificationSource.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Ping) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentStatusChanged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentRejectedOrReturned) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OnboardingStatusChanged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayableStatusChanged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayeeDetailsChanged) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DebitStatusChanged) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping");
    }

    /**
     * Get the actual instance, which can be the following:
     * DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping
     *
     * @return The actual instance (DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Ping`. If the actual instance is not `Ping`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Ping`
     * @throws ClassCastException if the instance is not `Ping`
     */
    public Ping getPing() throws ClassCastException {
        return (Ping)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentStatusChanged`. If the actual instance is not `PaymentStatusChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentStatusChanged`
     * @throws ClassCastException if the instance is not `PaymentStatusChanged`
     */
    public PaymentStatusChanged getPaymentStatusChanged() throws ClassCastException {
        return (PaymentStatusChanged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentRejectedOrReturned`. If the actual instance is not `PaymentRejectedOrReturned`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentRejectedOrReturned`
     * @throws ClassCastException if the instance is not `PaymentRejectedOrReturned`
     */
    public PaymentRejectedOrReturned getPaymentRejectedOrReturned() throws ClassCastException {
        return (PaymentRejectedOrReturned)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OnboardingStatusChanged`. If the actual instance is not `OnboardingStatusChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OnboardingStatusChanged`
     * @throws ClassCastException if the instance is not `OnboardingStatusChanged`
     */
    public OnboardingStatusChanged getOnboardingStatusChanged() throws ClassCastException {
        return (OnboardingStatusChanged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PayableStatusChanged`. If the actual instance is not `PayableStatusChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayableStatusChanged`
     * @throws ClassCastException if the instance is not `PayableStatusChanged`
     */
    public PayableStatusChanged getPayableStatusChanged() throws ClassCastException {
        return (PayableStatusChanged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PayeeDetailsChanged`. If the actual instance is not `PayeeDetailsChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayeeDetailsChanged`
     * @throws ClassCastException if the instance is not `PayeeDetailsChanged`
     */
    public PayeeDetailsChanged getPayeeDetailsChanged() throws ClassCastException {
        return (PayeeDetailsChanged)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DebitStatusChanged`. If the actual instance is not `DebitStatusChanged`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DebitStatusChanged`
     * @throws ClassCastException if the instance is not `DebitStatusChanged`
     */
    public DebitStatusChanged getDebitStatusChanged() throws ClassCastException {
        return (DebitStatusChanged)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NotificationSource
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Ping
        try {
            Ping.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Ping failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentStatusChanged
        try {
            PaymentStatusChanged.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentStatusChanged failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentRejectedOrReturned
        try {
            PaymentRejectedOrReturned.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentRejectedOrReturned failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OnboardingStatusChanged
        try {
            OnboardingStatusChanged.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OnboardingStatusChanged failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PayableStatusChanged
        try {
            PayableStatusChanged.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PayableStatusChanged failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PayeeDetailsChanged
        try {
            PayeeDetailsChanged.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PayeeDetailsChanged failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DebitStatusChanged
        try {
            DebitStatusChanged.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DebitStatusChanged failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NotificationSource with oneOf schemas: DebitStatusChanged, OnboardingStatusChanged, PayableStatusChanged, PayeeDetailsChanged, PaymentRejectedOrReturned, PaymentStatusChanged, Ping. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NotificationSource given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotificationSource
     * @throws IOException if the JSON string is invalid with respect to NotificationSource
     */
    public static NotificationSource fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NotificationSource.class);
    }

    /**
     * Convert an instance of NotificationSource to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

