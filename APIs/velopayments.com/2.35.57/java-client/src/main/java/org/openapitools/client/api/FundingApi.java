/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FundingAccountResponseV2;
import org.openapitools.client.model.FundingRequestV2;
import org.openapitools.client.model.FundingRequestV3;
import org.openapitools.client.model.FundingResponse;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.ListFundingAccountsResponseV2;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FundingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFundingRequestV2
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV2 Body to included amount to be funded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createFundingRequestV2Call(UUID sourceAccountId, FundingRequestV2 fundingRequestV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fundingRequestV2;

        // create path and map variables
        String localVarPath = "/v2/sourceAccounts/{sourceAccountId}/fundingRequest"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFundingRequestV2ValidateBeforeCall(UUID sourceAccountId, FundingRequestV2 fundingRequestV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling createFundingRequestV2(Async)");
        }

        // verify the required parameter 'fundingRequestV2' is set
        if (fundingRequestV2 == null) {
            throw new ApiException("Missing the required parameter 'fundingRequestV2' when calling createFundingRequestV2(Async)");
        }

        return createFundingRequestV2Call(sourceAccountId, fundingRequestV2, _callback);

    }

    /**
     * Create Funding Request
     * Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV2 Body to included amount to be funded (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void createFundingRequestV2(UUID sourceAccountId, FundingRequestV2 fundingRequestV2) throws ApiException {
        createFundingRequestV2WithHttpInfo(sourceAccountId, fundingRequestV2);
    }

    /**
     * Create Funding Request
     * Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV2 Body to included amount to be funded (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> createFundingRequestV2WithHttpInfo(UUID sourceAccountId, FundingRequestV2 fundingRequestV2) throws ApiException {
        okhttp3.Call localVarCall = createFundingRequestV2ValidateBeforeCall(sourceAccountId, fundingRequestV2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Funding Request (asynchronously)
     * Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV2 Body to included amount to be funded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createFundingRequestV2Async(UUID sourceAccountId, FundingRequestV2 fundingRequestV2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFundingRequestV2ValidateBeforeCall(sourceAccountId, fundingRequestV2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFundingRequestV3
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV3 Body to included amount to be funded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  * Location - Reference to created Funding Request <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFundingRequestV3Call(UUID sourceAccountId, FundingRequestV3 fundingRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fundingRequestV3;

        // create path and map variables
        String localVarPath = "/v3/sourceAccounts/{sourceAccountId}/fundingRequest"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFundingRequestV3ValidateBeforeCall(UUID sourceAccountId, FundingRequestV3 fundingRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling createFundingRequestV3(Async)");
        }

        // verify the required parameter 'fundingRequestV3' is set
        if (fundingRequestV3 == null) {
            throw new ApiException("Missing the required parameter 'fundingRequestV3' when calling createFundingRequestV3(Async)");
        }

        return createFundingRequestV3Call(sourceAccountId, fundingRequestV3, _callback);

    }

    /**
     * Create Funding Request
     * &lt;p&gt;Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV3 Body to included amount to be funded (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  * Location - Reference to created Funding Request <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void createFundingRequestV3(UUID sourceAccountId, FundingRequestV3 fundingRequestV3) throws ApiException {
        createFundingRequestV3WithHttpInfo(sourceAccountId, fundingRequestV3);
    }

    /**
     * Create Funding Request
     * &lt;p&gt;Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV3 Body to included amount to be funded (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  * Location - Reference to created Funding Request <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createFundingRequestV3WithHttpInfo(UUID sourceAccountId, FundingRequestV3 fundingRequestV3) throws ApiException {
        okhttp3.Call localVarCall = createFundingRequestV3ValidateBeforeCall(sourceAccountId, fundingRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Funding Request (asynchronously)
     * &lt;p&gt;Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param fundingRequestV3 Body to included amount to be funded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted </td><td>  * Location - Reference to created Funding Request <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFundingRequestV3Async(UUID sourceAccountId, FundingRequestV3 fundingRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFundingRequestV3ValidateBeforeCall(sourceAccountId, fundingRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFundingAccountV2
     * @param fundingAccountId  (required)
     * @param sensitive  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingAccountV2Call(UUID fundingAccountId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/fundingAccounts/{fundingAccountId}"
            .replace("{" + "fundingAccountId" + "}", localVarApiClient.escapeString(fundingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundingAccountV2ValidateBeforeCall(UUID fundingAccountId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fundingAccountId' is set
        if (fundingAccountId == null) {
            throw new ApiException("Missing the required parameter 'fundingAccountId' when calling getFundingAccountV2(Async)");
        }

        return getFundingAccountV2Call(fundingAccountId, sensitive, _callback);

    }

    /**
     * Get Funding Account
     * Get Funding Account by ID
     * @param fundingAccountId  (required)
     * @param sensitive  (optional, default to false)
     * @return FundingAccountResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public FundingAccountResponseV2 getFundingAccountV2(UUID fundingAccountId, Boolean sensitive) throws ApiException {
        ApiResponse<FundingAccountResponseV2> localVarResp = getFundingAccountV2WithHttpInfo(fundingAccountId, sensitive);
        return localVarResp.getData();
    }

    /**
     * Get Funding Account
     * Get Funding Account by ID
     * @param fundingAccountId  (required)
     * @param sensitive  (optional, default to false)
     * @return ApiResponse&lt;FundingAccountResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FundingAccountResponseV2> getFundingAccountV2WithHttpInfo(UUID fundingAccountId, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getFundingAccountV2ValidateBeforeCall(fundingAccountId, sensitive, null);
        Type localVarReturnType = new TypeToken<FundingAccountResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Funding Account (asynchronously)
     * Get Funding Account by ID
     * @param fundingAccountId  (required)
     * @param sensitive  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingAccountV2Async(UUID fundingAccountId, Boolean sensitive, final ApiCallback<FundingAccountResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundingAccountV2ValidateBeforeCall(fundingAccountId, sensitive, _callback);
        Type localVarReturnType = new TypeToken<FundingAccountResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFundingAccountsV2
     * @param payorId  (optional)
     * @param name The descriptive funding account name (optional)
     * @param country The 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param currency The ISO 4217 currency code (optional)
     * @param type The type of funding account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name. (optional, default to accountName:asc)
     * @param sensitive  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Funding Accounts Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingAccountsV2Call(UUID payorId, String name, String country, String currency, String type, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/fundingAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundingAccountsV2ValidateBeforeCall(UUID payorId, String name, String country, String currency, String type, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        return getFundingAccountsV2Call(payorId, name, country, currency, type, page, pageSize, sort, sensitive, _callback);

    }

    /**
     * Get Funding Accounts
     * Get the funding accounts.
     * @param payorId  (optional)
     * @param name The descriptive funding account name (optional)
     * @param country The 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param currency The ISO 4217 currency code (optional)
     * @param type The type of funding account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name. (optional, default to accountName:asc)
     * @param sensitive  (optional, default to false)
     * @return ListFundingAccountsResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Funding Accounts Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public ListFundingAccountsResponseV2 getFundingAccountsV2(UUID payorId, String name, String country, String currency, String type, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        ApiResponse<ListFundingAccountsResponseV2> localVarResp = getFundingAccountsV2WithHttpInfo(payorId, name, country, currency, type, page, pageSize, sort, sensitive);
        return localVarResp.getData();
    }

    /**
     * Get Funding Accounts
     * Get the funding accounts.
     * @param payorId  (optional)
     * @param name The descriptive funding account name (optional)
     * @param country The 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param currency The ISO 4217 currency code (optional)
     * @param type The type of funding account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name. (optional, default to accountName:asc)
     * @param sensitive  (optional, default to false)
     * @return ApiResponse&lt;ListFundingAccountsResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Funding Accounts Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFundingAccountsResponseV2> getFundingAccountsV2WithHttpInfo(UUID payorId, String name, String country, String currency, String type, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getFundingAccountsV2ValidateBeforeCall(payorId, name, country, currency, type, page, pageSize, sort, sensitive, null);
        Type localVarReturnType = new TypeToken<ListFundingAccountsResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Funding Accounts (asynchronously)
     * Get the funding accounts.
     * @param payorId  (optional)
     * @param name The descriptive funding account name (optional)
     * @param country The 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param currency The ISO 4217 currency code (optional)
     * @param type The type of funding account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name. (optional, default to accountName:asc)
     * @param sensitive  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Funding Accounts Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingAccountsV2Async(UUID payorId, String name, String country, String currency, String type, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback<ListFundingAccountsResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundingAccountsV2ValidateBeforeCall(payorId, name, country, currency, type, page, pageSize, sort, sensitive, _callback);
        Type localVarReturnType = new TypeToken<ListFundingAccountsResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFundingByIdV1
     * @param fundingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingByIdV1Call(UUID fundingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/fundings/{fundingId}"
            .replace("{" + "fundingId" + "}", localVarApiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundingByIdV1ValidateBeforeCall(UUID fundingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling getFundingByIdV1(Async)");
        }

        return getFundingByIdV1Call(fundingId, _callback);

    }

    /**
     * Get Funding
     * Get Funding by Id
     * @param fundingId  (required)
     * @return FundingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public FundingResponse getFundingByIdV1(UUID fundingId) throws ApiException {
        ApiResponse<FundingResponse> localVarResp = getFundingByIdV1WithHttpInfo(fundingId);
        return localVarResp.getData();
    }

    /**
     * Get Funding
     * Get Funding by Id
     * @param fundingId  (required)
     * @return ApiResponse&lt;FundingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FundingResponse> getFundingByIdV1WithHttpInfo(UUID fundingId) throws ApiException {
        okhttp3.Call localVarCall = getFundingByIdV1ValidateBeforeCall(fundingId, null);
        Type localVarReturnType = new TypeToken<FundingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Funding (asynchronously)
     * Get Funding by Id
     * @param fundingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFundingByIdV1Async(UUID fundingId, final ApiCallback<FundingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundingByIdV1ValidateBeforeCall(fundingId, _callback);
        Type localVarReturnType = new TypeToken<FundingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFundingAuditDeltas
     * @param payorId  (required)
     * @param updatedSince  (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Deltas </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFundingAuditDeltasCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deltas/fundings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFundingAuditDeltasValidateBeforeCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listFundingAuditDeltas(Async)");
        }

        // verify the required parameter 'updatedSince' is set
        if (updatedSince == null) {
            throw new ApiException("Missing the required parameter 'updatedSince' when calling listFundingAuditDeltas(Async)");
        }

        return listFundingAuditDeltasCall(payorId, updatedSince, page, pageSize, _callback);

    }

    /**
     * Get Funding Audit Delta
     * Get funding audit deltas for a payor
     * @param payorId  (required)
     * @param updatedSince  (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @return PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Deltas </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse listFundingAuditDeltas(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse> localVarResp = listFundingAuditDeltasWithHttpInfo(payorId, updatedSince, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Funding Audit Delta
     * Get funding audit deltas for a payor
     * @param payorId  (required)
     * @param updatedSince  (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @return ApiResponse&lt;PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Deltas </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse> listFundingAuditDeltasWithHttpInfo(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listFundingAuditDeltasValidateBeforeCall(payorId, updatedSince, page, pageSize, null);
        Type localVarReturnType = new TypeToken<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Funding Audit Delta (asynchronously)
     * Get funding audit deltas for a payor
     * @param payorId  (required)
     * @param updatedSince  (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Funding Account Deltas </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFundingAuditDeltasAsync(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFundingAuditDeltasValidateBeforeCall(payorId, updatedSince, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
