/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AutoTopUpConfigV3;
import org.openapitools.client.model.NotificationsV3;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SourceAccountResponseV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceAccountResponseV3 {
  public static final String SERIALIZED_NAME_AUTO_TOP_UP_CONFIG = "autoTopUpConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_TOP_UP_CONFIG)
  private AutoTopUpConfigV3 autoTopUpConfig;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Long balance;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_FUNDING_REF = "fundingRef";
  @SerializedName(SERIALIZED_NAME_FUNDING_REF)
  private String fundingRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private NotificationsV3 notifications;

  public static final String SERIALIZED_NAME_PAYOR_ID = "payorId";
  @SerializedName(SERIALIZED_NAME_PAYOR_ID)
  private UUID payorId;

  public static final String SERIALIZED_NAME_PHYSICAL_ACCOUNT_ID = "physicalAccountId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_ACCOUNT_ID)
  private UUID physicalAccountId;

  public static final String SERIALIZED_NAME_PHYSICAL_ACCOUNT_NAME = "physicalAccountName";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_ACCOUNT_NAME)
  private String physicalAccountName;

  public static final String SERIALIZED_NAME_POOLED = "pooled";
  @SerializedName(SERIALIZED_NAME_POOLED)
  private Boolean pooled;

  public static final String SERIALIZED_NAME_RAILS_ID = "railsId";
  @SerializedName(SERIALIZED_NAME_RAILS_ID)
  private String railsId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_DELETED = "userDeleted";
  @SerializedName(SERIALIZED_NAME_USER_DELETED)
  private Boolean userDeleted;

  public SourceAccountResponseV3() {
  }

  public SourceAccountResponseV3 autoTopUpConfig(AutoTopUpConfigV3 autoTopUpConfig) {
    this.autoTopUpConfig = autoTopUpConfig;
    return this;
  }

  /**
   * Get autoTopUpConfig
   * @return autoTopUpConfig
   */
  @javax.annotation.Nullable
  public AutoTopUpConfigV3 getAutoTopUpConfig() {
    return autoTopUpConfig;
  }

  public void setAutoTopUpConfig(AutoTopUpConfigV3 autoTopUpConfig) {
    this.autoTopUpConfig = autoTopUpConfig;
  }


  public SourceAccountResponseV3 balance(Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Decimal implied
   * @return balance
   */
  @javax.annotation.Nullable
  public Long getBalance() {
    return balance;
  }

  public void setBalance(Long balance) {
    this.balance = balance;
  }


  public SourceAccountResponseV3 country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Valid ISO 3166 2 character country code. See the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-3166-country-codes.html\&quot; target&#x3D;\&quot;_blank\&quot; a&gt;ISO specification&lt;/a&gt; for details.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SourceAccountResponseV3 currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Valid ISO 4217 3 letter currency code. See the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-4217-currency-codes.html\&quot; target&#x3D;\&quot;_blank\&quot; a&gt;ISO specification&lt;/a&gt; for details.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SourceAccountResponseV3 customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public SourceAccountResponseV3 deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * An optional flag for whether the source account has been deleted. Only present in the response if true.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public SourceAccountResponseV3 deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * An optional timestamp when the source account has been deleted. Only present in the response if deleted.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public SourceAccountResponseV3 fundingRef(String fundingRef) {
    this.fundingRef = fundingRef;
    return this;
  }

  /**
   * The funding reference (will not be set for DECOUPLED accounts).
   * @return fundingRef
   */
  @javax.annotation.Nullable
  public String getFundingRef() {
    return fundingRef;
  }

  public void setFundingRef(String fundingRef) {
    this.fundingRef = fundingRef;
  }


  public SourceAccountResponseV3 id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Source Account Id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SourceAccountResponseV3 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SourceAccountResponseV3 notifications(NotificationsV3 notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public NotificationsV3 getNotifications() {
    return notifications;
  }

  public void setNotifications(NotificationsV3 notifications) {
    this.notifications = notifications;
  }


  public SourceAccountResponseV3 payorId(UUID payorId) {
    this.payorId = payorId;
    return this;
  }

  /**
   * Get payorId
   * @return payorId
   */
  @javax.annotation.Nullable
  public UUID getPayorId() {
    return payorId;
  }

  public void setPayorId(UUID payorId) {
    this.payorId = payorId;
  }


  public SourceAccountResponseV3 physicalAccountId(UUID physicalAccountId) {
    this.physicalAccountId = physicalAccountId;
    return this;
  }

  /**
   * The physical account id (will not be set for DECOUPLED accounts).
   * @return physicalAccountId
   */
  @javax.annotation.Nullable
  public UUID getPhysicalAccountId() {
    return physicalAccountId;
  }

  public void setPhysicalAccountId(UUID physicalAccountId) {
    this.physicalAccountId = physicalAccountId;
  }


  public SourceAccountResponseV3 physicalAccountName(String physicalAccountName) {
    this.physicalAccountName = physicalAccountName;
    return this;
  }

  /**
   * The physical account name (will not be set for DECOUPLED accounts).
   * @return physicalAccountName
   */
  @javax.annotation.Nullable
  public String getPhysicalAccountName() {
    return physicalAccountName;
  }

  public void setPhysicalAccountName(String physicalAccountName) {
    this.physicalAccountName = physicalAccountName;
  }


  public SourceAccountResponseV3 pooled(Boolean pooled) {
    this.pooled = pooled;
    return this;
  }

  /**
   * The pooled account flag (will not be set for DECOUPLED accounts).
   * @return pooled
   */
  @javax.annotation.Nullable
  public Boolean getPooled() {
    return pooled;
  }

  public void setPooled(Boolean pooled) {
    this.pooled = pooled;
  }


  public SourceAccountResponseV3 railsId(String railsId) {
    this.railsId = railsId;
    return this;
  }

  /**
   * Get railsId
   * @return railsId
   */
  @javax.annotation.Nonnull
  public String getRailsId() {
    return railsId;
  }

  public void setRailsId(String railsId) {
    this.railsId = railsId;
  }


  public SourceAccountResponseV3 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SourceAccountResponseV3 userDeleted(Boolean userDeleted) {
    this.userDeleted = userDeleted;
    return this;
  }

  /**
   * An optional flag for whether the source account has been deleted by a user. Only present in the response if true.
   * @return userDeleted
   */
  @javax.annotation.Nullable
  public Boolean getUserDeleted() {
    return userDeleted;
  }

  public void setUserDeleted(Boolean userDeleted) {
    this.userDeleted = userDeleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceAccountResponseV3 sourceAccountResponseV3 = (SourceAccountResponseV3) o;
    return Objects.equals(this.autoTopUpConfig, sourceAccountResponseV3.autoTopUpConfig) &&
        Objects.equals(this.balance, sourceAccountResponseV3.balance) &&
        Objects.equals(this.country, sourceAccountResponseV3.country) &&
        Objects.equals(this.currency, sourceAccountResponseV3.currency) &&
        Objects.equals(this.customerId, sourceAccountResponseV3.customerId) &&
        Objects.equals(this.deleted, sourceAccountResponseV3.deleted) &&
        Objects.equals(this.deletedAt, sourceAccountResponseV3.deletedAt) &&
        Objects.equals(this.fundingRef, sourceAccountResponseV3.fundingRef) &&
        Objects.equals(this.id, sourceAccountResponseV3.id) &&
        Objects.equals(this.name, sourceAccountResponseV3.name) &&
        Objects.equals(this.notifications, sourceAccountResponseV3.notifications) &&
        Objects.equals(this.payorId, sourceAccountResponseV3.payorId) &&
        Objects.equals(this.physicalAccountId, sourceAccountResponseV3.physicalAccountId) &&
        Objects.equals(this.physicalAccountName, sourceAccountResponseV3.physicalAccountName) &&
        Objects.equals(this.pooled, sourceAccountResponseV3.pooled) &&
        Objects.equals(this.railsId, sourceAccountResponseV3.railsId) &&
        Objects.equals(this.type, sourceAccountResponseV3.type) &&
        Objects.equals(this.userDeleted, sourceAccountResponseV3.userDeleted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoTopUpConfig, balance, country, currency, customerId, deleted, deletedAt, fundingRef, id, name, notifications, payorId, physicalAccountId, physicalAccountName, pooled, railsId, type, userDeleted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceAccountResponseV3 {\n");
    sb.append("    autoTopUpConfig: ").append(toIndentedString(autoTopUpConfig)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    fundingRef: ").append(toIndentedString(fundingRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    payorId: ").append(toIndentedString(payorId)).append("\n");
    sb.append("    physicalAccountId: ").append(toIndentedString(physicalAccountId)).append("\n");
    sb.append("    physicalAccountName: ").append(toIndentedString(physicalAccountName)).append("\n");
    sb.append("    pooled: ").append(toIndentedString(pooled)).append("\n");
    sb.append("    railsId: ").append(toIndentedString(railsId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userDeleted: ").append(toIndentedString(userDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoTopUpConfig");
    openapiFields.add("balance");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("customerId");
    openapiFields.add("deleted");
    openapiFields.add("deletedAt");
    openapiFields.add("fundingRef");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("notifications");
    openapiFields.add("payorId");
    openapiFields.add("physicalAccountId");
    openapiFields.add("physicalAccountName");
    openapiFields.add("pooled");
    openapiFields.add("railsId");
    openapiFields.add("type");
    openapiFields.add("userDeleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("railsId");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceAccountResponseV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceAccountResponseV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceAccountResponseV3 is not found in the empty JSON string", SourceAccountResponseV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceAccountResponseV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceAccountResponseV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceAccountResponseV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoTopUpConfig`
      if (jsonObj.get("autoTopUpConfig") != null && !jsonObj.get("autoTopUpConfig").isJsonNull()) {
        AutoTopUpConfigV3.validateJsonElement(jsonObj.get("autoTopUpConfig"));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("fundingRef") != null && !jsonObj.get("fundingRef").isJsonNull()) && !jsonObj.get("fundingRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingRef").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notifications`
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        NotificationsV3.validateJsonElement(jsonObj.get("notifications"));
      }
      if ((jsonObj.get("payorId") != null && !jsonObj.get("payorId").isJsonNull()) && !jsonObj.get("payorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorId").toString()));
      }
      if ((jsonObj.get("physicalAccountId") != null && !jsonObj.get("physicalAccountId").isJsonNull()) && !jsonObj.get("physicalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalAccountId").toString()));
      }
      if ((jsonObj.get("physicalAccountName") != null && !jsonObj.get("physicalAccountName").isJsonNull()) && !jsonObj.get("physicalAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalAccountName").toString()));
      }
      if (!jsonObj.get("railsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `railsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("railsId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceAccountResponseV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceAccountResponseV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceAccountResponseV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceAccountResponseV3.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceAccountResponseV3>() {
           @Override
           public void write(JsonWriter out, SourceAccountResponseV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceAccountResponseV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceAccountResponseV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceAccountResponseV3
   * @throws IOException if the JSON string is invalid with respect to SourceAccountResponseV3
   */
  public static SourceAccountResponseV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceAccountResponseV3.class);
  }

  /**
   * Convert an instance of SourceAccountResponseV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

