/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatePayoutRequestV3;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse409;
import org.openapitools.client.model.InstructPayoutRequestV3;
import org.openapitools.client.model.PagedPaymentsResponseV3;
import org.openapitools.client.model.PayoutSummaryResponseV3;
import org.openapitools.client.model.QuoteResponseV3;
import org.openapitools.client.model.SchedulePayoutRequestV3;
import org.openapitools.client.model.SubmitPayoutV3Request;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.WithdrawPaymentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayoutsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createQuoteForPayoutV3
     * @param payoutId Id of the payout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteForPayoutV3Call(UUID payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}/quote"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuoteForPayoutV3ValidateBeforeCall(UUID payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling createQuoteForPayoutV3(Async)");
        }

        return createQuoteForPayoutV3Call(payoutId, _callback);

    }

    /**
     * Create a quote for the payout
     * Create quote for a payout
     * @param payoutId Id of the payout (required)
     * @return QuoteResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public QuoteResponseV3 createQuoteForPayoutV3(UUID payoutId) throws ApiException {
        ApiResponse<QuoteResponseV3> localVarResp = createQuoteForPayoutV3WithHttpInfo(payoutId);
        return localVarResp.getData();
    }

    /**
     * Create a quote for the payout
     * Create quote for a payout
     * @param payoutId Id of the payout (required)
     * @return ApiResponse&lt;QuoteResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteResponseV3> createQuoteForPayoutV3WithHttpInfo(UUID payoutId) throws ApiException {
        okhttp3.Call localVarCall = createQuoteForPayoutV3ValidateBeforeCall(payoutId, null);
        Type localVarReturnType = new TypeToken<QuoteResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a quote for the payout (asynchronously)
     * Create quote for a payout
     * @param payoutId Id of the payout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quote for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteForPayoutV3Async(UUID payoutId, final ApiCallback<QuoteResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuoteForPayoutV3ValidateBeforeCall(payoutId, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deschedulePayout
     * @param payoutId Id of the payout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Descheduled payout successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deschedulePayoutCall(UUID payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}/schedule"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deschedulePayoutValidateBeforeCall(UUID payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling deschedulePayout(Async)");
        }

        return deschedulePayoutCall(payoutId, _callback);

    }

    /**
     * Deschedule a payout
     * Remove the schedule for a scheduled payout
     * @param payoutId Id of the payout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Descheduled payout successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public void deschedulePayout(UUID payoutId) throws ApiException {
        deschedulePayoutWithHttpInfo(payoutId);
    }

    /**
     * Deschedule a payout
     * Remove the schedule for a scheduled payout
     * @param payoutId Id of the payout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Descheduled payout successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deschedulePayoutWithHttpInfo(UUID payoutId) throws ApiException {
        okhttp3.Call localVarCall = deschedulePayoutValidateBeforeCall(payoutId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deschedule a payout (asynchronously)
     * Remove the schedule for a scheduled payout
     * @param payoutId Id of the payout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Descheduled payout successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deschedulePayoutAsync(UUID payoutId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deschedulePayoutValidateBeforeCall(payoutId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentsForPayoutV3
     * @param payoutId Id of the payout (required)
     * @param status Payment Status * ACCEPTED: any payment which was accepted at submission time (status may have changed since) * REJECTED: any payment rejected by initial submission processing * WITHDRAWN: any payment which has been withdrawn * WITHDRAWABLE: any payment eligible for withdrawal  (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payorPaymentId Payor&#39;s Id of the Payment (optional)
     * @param sourceAccountName Physical Account Name (optional)
     * @param transmissionType Transmission Type * ACH * SAME_DAY_ACH * WIRE  (optional)
     * @param paymentMemo Payment Memo of the Payment (optional)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payments for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsForPayoutV3Call(UUID payoutId, String status, String remoteId, String payorPaymentId, String sourceAccountName, String transmissionType, String paymentMemo, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}/payments"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (remoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remoteId", remoteId));
        }

        if (payorPaymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorPaymentId", payorPaymentId));
        }

        if (sourceAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAccountName", sourceAccountName));
        }

        if (transmissionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transmissionType", transmissionType));
        }

        if (paymentMemo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMemo", paymentMemo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsForPayoutV3ValidateBeforeCall(UUID payoutId, String status, String remoteId, String payorPaymentId, String sourceAccountName, String transmissionType, String paymentMemo, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPaymentsForPayoutV3(Async)");
        }

        return getPaymentsForPayoutV3Call(payoutId, status, remoteId, payorPaymentId, sourceAccountName, transmissionType, paymentMemo, pageSize, page, _callback);

    }

    /**
     * Retrieve payments for a payout
     * Retrieve payments for a payout
     * @param payoutId Id of the payout (required)
     * @param status Payment Status * ACCEPTED: any payment which was accepted at submission time (status may have changed since) * REJECTED: any payment rejected by initial submission processing * WITHDRAWN: any payment which has been withdrawn * WITHDRAWABLE: any payment eligible for withdrawal  (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payorPaymentId Payor&#39;s Id of the Payment (optional)
     * @param sourceAccountName Physical Account Name (optional)
     * @param transmissionType Transmission Type * ACH * SAME_DAY_ACH * WIRE  (optional)
     * @param paymentMemo Payment Memo of the Payment (optional)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @return PagedPaymentsResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payments for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public PagedPaymentsResponseV3 getPaymentsForPayoutV3(UUID payoutId, String status, String remoteId, String payorPaymentId, String sourceAccountName, String transmissionType, String paymentMemo, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<PagedPaymentsResponseV3> localVarResp = getPaymentsForPayoutV3WithHttpInfo(payoutId, status, remoteId, payorPaymentId, sourceAccountName, transmissionType, paymentMemo, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Retrieve payments for a payout
     * Retrieve payments for a payout
     * @param payoutId Id of the payout (required)
     * @param status Payment Status * ACCEPTED: any payment which was accepted at submission time (status may have changed since) * REJECTED: any payment rejected by initial submission processing * WITHDRAWN: any payment which has been withdrawn * WITHDRAWABLE: any payment eligible for withdrawal  (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payorPaymentId Payor&#39;s Id of the Payment (optional)
     * @param sourceAccountName Physical Account Name (optional)
     * @param transmissionType Transmission Type * ACH * SAME_DAY_ACH * WIRE  (optional)
     * @param paymentMemo Payment Memo of the Payment (optional)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @return ApiResponse&lt;PagedPaymentsResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payments for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedPaymentsResponseV3> getPaymentsForPayoutV3WithHttpInfo(UUID payoutId, String status, String remoteId, String payorPaymentId, String sourceAccountName, String transmissionType, String paymentMemo, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsForPayoutV3ValidateBeforeCall(payoutId, status, remoteId, payorPaymentId, sourceAccountName, transmissionType, paymentMemo, pageSize, page, null);
        Type localVarReturnType = new TypeToken<PagedPaymentsResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve payments for a payout (asynchronously)
     * Retrieve payments for a payout
     * @param payoutId Id of the payout (required)
     * @param status Payment Status * ACCEPTED: any payment which was accepted at submission time (status may have changed since) * REJECTED: any payment rejected by initial submission processing * WITHDRAWN: any payment which has been withdrawn * WITHDRAWABLE: any payment eligible for withdrawal  (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payorPaymentId Payor&#39;s Id of the Payment (optional)
     * @param sourceAccountName Physical Account Name (optional)
     * @param transmissionType Transmission Type * ACH * SAME_DAY_ACH * WIRE  (optional)
     * @param paymentMemo Payment Memo of the Payment (optional)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payments for payout </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsForPayoutV3Async(UUID payoutId, String status, String remoteId, String payorPaymentId, String sourceAccountName, String transmissionType, String paymentMemo, Integer pageSize, Integer page, final ApiCallback<PagedPaymentsResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsForPayoutV3ValidateBeforeCall(payoutId, status, remoteId, payorPaymentId, sourceAccountName, transmissionType, paymentMemo, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<PagedPaymentsResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayoutSummaryV3
     * @param payoutId Id of the payout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payout </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutSummaryV3Call(UUID payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutSummaryV3ValidateBeforeCall(UUID payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutSummaryV3(Async)");
        }

        return getPayoutSummaryV3Call(payoutId, _callback);

    }

    /**
     * Get Payout Summary
     * Get payout summary - returns the current state of the payout.
     * @param payoutId Id of the payout (required)
     * @return PayoutSummaryResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payout </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public PayoutSummaryResponseV3 getPayoutSummaryV3(UUID payoutId) throws ApiException {
        ApiResponse<PayoutSummaryResponseV3> localVarResp = getPayoutSummaryV3WithHttpInfo(payoutId);
        return localVarResp.getData();
    }

    /**
     * Get Payout Summary
     * Get payout summary - returns the current state of the payout.
     * @param payoutId Id of the payout (required)
     * @return ApiResponse&lt;PayoutSummaryResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payout </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayoutSummaryResponseV3> getPayoutSummaryV3WithHttpInfo(UUID payoutId) throws ApiException {
        okhttp3.Call localVarCall = getPayoutSummaryV3ValidateBeforeCall(payoutId, null);
        Type localVarReturnType = new TypeToken<PayoutSummaryResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payout Summary (asynchronously)
     * Get payout summary - returns the current state of the payout.
     * @param payoutId Id of the payout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payout </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayoutSummaryV3Async(UUID payoutId, final ApiCallback<PayoutSummaryResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutSummaryV3ValidateBeforeCall(payoutId, _callback);
        Type localVarReturnType = new TypeToken<PayoutSummaryResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instructPayoutV3
     * @param payoutId Id of the payout (required)
     * @param instructPayoutRequestV3 Additional instruct payout parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instructPayoutV3Call(UUID payoutId, InstructPayoutRequestV3 instructPayoutRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instructPayoutRequestV3;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instructPayoutV3ValidateBeforeCall(UUID payoutId, InstructPayoutRequestV3 instructPayoutRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling instructPayoutV3(Async)");
        }

        return instructPayoutV3Call(payoutId, instructPayoutRequestV3, _callback);

    }

    /**
     * Instruct Payout
     * Instruct a payout to be made for the specified payoutId.
     * @param payoutId Id of the payout (required)
     * @param instructPayoutRequestV3 Additional instruct payout parameters (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public void instructPayoutV3(UUID payoutId, InstructPayoutRequestV3 instructPayoutRequestV3) throws ApiException {
        instructPayoutV3WithHttpInfo(payoutId, instructPayoutRequestV3);
    }

    /**
     * Instruct Payout
     * Instruct a payout to be made for the specified payoutId.
     * @param payoutId Id of the payout (required)
     * @param instructPayoutRequestV3 Additional instruct payout parameters (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> instructPayoutV3WithHttpInfo(UUID payoutId, InstructPayoutRequestV3 instructPayoutRequestV3) throws ApiException {
        okhttp3.Call localVarCall = instructPayoutV3ValidateBeforeCall(payoutId, instructPayoutRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Instruct Payout (asynchronously)
     * Instruct a payout to be made for the specified payoutId.
     * @param payoutId Id of the payout (required)
     * @param instructPayoutRequestV3 Additional instruct payout parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instructPayoutV3Async(UUID payoutId, InstructPayoutRequestV3 instructPayoutRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = instructPayoutV3ValidateBeforeCall(payoutId, instructPayoutRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleForPayout
     * @param payoutId Id of the payout (required)
     * @param schedulePayoutRequestV3 schedule payout parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payout is scheduled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleForPayoutCall(UUID payoutId, SchedulePayoutRequestV3 schedulePayoutRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulePayoutRequestV3;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}/schedule"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleForPayoutValidateBeforeCall(UUID payoutId, SchedulePayoutRequestV3 schedulePayoutRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling scheduleForPayout(Async)");
        }

        return scheduleForPayoutCall(payoutId, schedulePayoutRequestV3, _callback);

    }

    /**
     * Schedule a payout
     * &lt;p&gt;Schedule a payout for auto-instruction in the future or update existing payout schedule if the payout has been scheduled before.&lt;/p&gt; 
     * @param payoutId Id of the payout (required)
     * @param schedulePayoutRequestV3 schedule payout parameters (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payout is scheduled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public void scheduleForPayout(UUID payoutId, SchedulePayoutRequestV3 schedulePayoutRequestV3) throws ApiException {
        scheduleForPayoutWithHttpInfo(payoutId, schedulePayoutRequestV3);
    }

    /**
     * Schedule a payout
     * &lt;p&gt;Schedule a payout for auto-instruction in the future or update existing payout schedule if the payout has been scheduled before.&lt;/p&gt; 
     * @param payoutId Id of the payout (required)
     * @param schedulePayoutRequestV3 schedule payout parameters (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payout is scheduled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduleForPayoutWithHttpInfo(UUID payoutId, SchedulePayoutRequestV3 schedulePayoutRequestV3) throws ApiException {
        okhttp3.Call localVarCall = scheduleForPayoutValidateBeforeCall(payoutId, schedulePayoutRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Schedule a payout (asynchronously)
     * &lt;p&gt;Schedule a payout for auto-instruction in the future or update existing payout schedule if the payout has been scheduled before.&lt;/p&gt; 
     * @param payoutId Id of the payout (required)
     * @param schedulePayoutRequestV3 schedule payout parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payout is scheduled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleForPayoutAsync(UUID payoutId, SchedulePayoutRequestV3 schedulePayoutRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleForPayoutValidateBeforeCall(payoutId, schedulePayoutRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitPayoutV3
     * @param createPayoutRequestV3 Post amount to transfer using stored funding account details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful submission of the payout </td><td>  * Location - Reference to created payout <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPayoutV3Call(CreatePayoutRequestV3 createPayoutRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPayoutRequestV3;

        // create path and map variables
        String localVarPath = "/v3/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPayoutV3ValidateBeforeCall(CreatePayoutRequestV3 createPayoutRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPayoutRequestV3' is set
        if (createPayoutRequestV3 == null) {
            throw new ApiException("Missing the required parameter 'createPayoutRequestV3' when calling submitPayoutV3(Async)");
        }

        return submitPayoutV3Call(createPayoutRequestV3, _callback);

    }

    /**
     * Submit Payout
     * &lt;p&gt;Create a new payout and return a location header with a link to the payout&lt;/p&gt; &lt;p&gt;Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously&lt;/p&gt; &lt;p&gt;The results can be obtained by issuing a HTTP GET to the URL returned in the location header&lt;/p&gt; &lt;p&gt;**NOTE:** amount values in payments must be in &#39;minor units&#39; format. E.g. cents for USD, pence for GBP etc with no decimal places&lt;/p&gt; 
     * @param createPayoutRequestV3 Post amount to transfer using stored funding account details. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful submission of the payout </td><td>  * Location - Reference to created payout <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public void submitPayoutV3(CreatePayoutRequestV3 createPayoutRequestV3) throws ApiException {
        submitPayoutV3WithHttpInfo(createPayoutRequestV3);
    }

    /**
     * Submit Payout
     * &lt;p&gt;Create a new payout and return a location header with a link to the payout&lt;/p&gt; &lt;p&gt;Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously&lt;/p&gt; &lt;p&gt;The results can be obtained by issuing a HTTP GET to the URL returned in the location header&lt;/p&gt; &lt;p&gt;**NOTE:** amount values in payments must be in &#39;minor units&#39; format. E.g. cents for USD, pence for GBP etc with no decimal places&lt;/p&gt; 
     * @param createPayoutRequestV3 Post amount to transfer using stored funding account details. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful submission of the payout </td><td>  * Location - Reference to created payout <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitPayoutV3WithHttpInfo(CreatePayoutRequestV3 createPayoutRequestV3) throws ApiException {
        okhttp3.Call localVarCall = submitPayoutV3ValidateBeforeCall(createPayoutRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Submit Payout (asynchronously)
     * &lt;p&gt;Create a new payout and return a location header with a link to the payout&lt;/p&gt; &lt;p&gt;Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously&lt;/p&gt; &lt;p&gt;The results can be obtained by issuing a HTTP GET to the URL returned in the location header&lt;/p&gt; &lt;p&gt;**NOTE:** amount values in payments must be in &#39;minor units&#39; format. E.g. cents for USD, pence for GBP etc with no decimal places&lt;/p&gt; 
     * @param createPayoutRequestV3 Post amount to transfer using stored funding account details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful submission of the payout </td><td>  * Location - Reference to created payout <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPayoutV3Async(CreatePayoutRequestV3 createPayoutRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPayoutV3ValidateBeforeCall(createPayoutRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawPayment
     * @param paymentId Id of the Payment (required)
     * @param withdrawPaymentRequest details for withdrawal (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment was withdrawn </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawPaymentCall(UUID paymentId, WithdrawPaymentRequest withdrawPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = withdrawPaymentRequest;

        // create path and map variables
        String localVarPath = "/v1/payments/{paymentId}/withdraw"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawPaymentValidateBeforeCall(UUID paymentId, WithdrawPaymentRequest withdrawPaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling withdrawPayment(Async)");
        }

        // verify the required parameter 'withdrawPaymentRequest' is set
        if (withdrawPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'withdrawPaymentRequest' when calling withdrawPayment(Async)");
        }

        return withdrawPaymentCall(paymentId, withdrawPaymentRequest, _callback);

    }

    /**
     * Withdraw a Payment
     * &lt;p&gt;withdraw a payment &lt;/p&gt; &lt;p&gt;There are a variety of reasons why this can fail&lt;/p&gt; &lt;ul&gt;     &lt;li&gt;the payment must be in a state of &#39;accepted&#39; or &#39;unfunded&#39;&lt;/li&gt;     &lt;li&gt;the payout must not be in a state of &#39;instructed&#39;&lt;/li&gt; &lt;/ul&gt; 
     * @param paymentId Id of the Payment (required)
     * @param withdrawPaymentRequest details for withdrawal (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment was withdrawn </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void withdrawPayment(UUID paymentId, WithdrawPaymentRequest withdrawPaymentRequest) throws ApiException {
        withdrawPaymentWithHttpInfo(paymentId, withdrawPaymentRequest);
    }

    /**
     * Withdraw a Payment
     * &lt;p&gt;withdraw a payment &lt;/p&gt; &lt;p&gt;There are a variety of reasons why this can fail&lt;/p&gt; &lt;ul&gt;     &lt;li&gt;the payment must be in a state of &#39;accepted&#39; or &#39;unfunded&#39;&lt;/li&gt;     &lt;li&gt;the payout must not be in a state of &#39;instructed&#39;&lt;/li&gt; &lt;/ul&gt; 
     * @param paymentId Id of the Payment (required)
     * @param withdrawPaymentRequest details for withdrawal (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment was withdrawn </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> withdrawPaymentWithHttpInfo(UUID paymentId, WithdrawPaymentRequest withdrawPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawPaymentValidateBeforeCall(paymentId, withdrawPaymentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Withdraw a Payment (asynchronously)
     * &lt;p&gt;withdraw a payment &lt;/p&gt; &lt;p&gt;There are a variety of reasons why this can fail&lt;/p&gt; &lt;ul&gt;     &lt;li&gt;the payment must be in a state of &#39;accepted&#39; or &#39;unfunded&#39;&lt;/li&gt;     &lt;li&gt;the payout must not be in a state of &#39;instructed&#39;&lt;/li&gt; &lt;/ul&gt; 
     * @param paymentId Id of the Payment (required)
     * @param withdrawPaymentRequest details for withdrawal (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment was withdrawn </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawPaymentAsync(UUID paymentId, WithdrawPaymentRequest withdrawPaymentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawPaymentValidateBeforeCall(paymentId, withdrawPaymentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for withdrawPayoutV3
     * @param payoutId Id of the payout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawPayoutV3Call(UUID payoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawPayoutV3ValidateBeforeCall(UUID payoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling withdrawPayoutV3(Async)");
        }

        return withdrawPayoutV3Call(payoutId, _callback);

    }

    /**
     * Withdraw Payout
     * Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
     * @param payoutId Id of the payout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void withdrawPayoutV3(UUID payoutId) throws ApiException {
        withdrawPayoutV3WithHttpInfo(payoutId);
    }

    /**
     * Withdraw Payout
     * Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
     * @param payoutId Id of the payout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> withdrawPayoutV3WithHttpInfo(UUID payoutId) throws ApiException {
        okhttp3.Call localVarCall = withdrawPayoutV3ValidateBeforeCall(payoutId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Withdraw Payout (asynchronously)
     * Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
     * @param payoutId Id of the payout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call withdrawPayoutV3Async(UUID payoutId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawPayoutV3ValidateBeforeCall(payoutId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
