/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.ListSourceAccountResponseV2;
import org.openapitools.client.model.ListSourceAccountResponseV3;
import org.openapitools.client.model.SetNotificationsRequest;
import org.openapitools.client.model.SetNotificationsRequest2;
import org.openapitools.client.model.SourceAccountResponseV2;
import org.openapitools.client.model.SourceAccountResponseV3;
import org.openapitools.client.model.TransferRequestV2;
import org.openapitools.client.model.TransferRequestV3;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourceAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SourceAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourceAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSourceAccountV2
     * @param sourceAccountId Source account id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSourceAccountV2Call(UUID sourceAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sourceAccounts/{sourceAccountId}"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceAccountV2ValidateBeforeCall(UUID sourceAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling getSourceAccountV2(Async)");
        }

        return getSourceAccountV2Call(sourceAccountId, _callback);

    }

    /**
     * Get Source Account
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @return SourceAccountResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SourceAccountResponseV2 getSourceAccountV2(UUID sourceAccountId) throws ApiException {
        ApiResponse<SourceAccountResponseV2> localVarResp = getSourceAccountV2WithHttpInfo(sourceAccountId);
        return localVarResp.getData();
    }

    /**
     * Get Source Account
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @return ApiResponse&lt;SourceAccountResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SourceAccountResponseV2> getSourceAccountV2WithHttpInfo(UUID sourceAccountId) throws ApiException {
        okhttp3.Call localVarCall = getSourceAccountV2ValidateBeforeCall(sourceAccountId, null);
        Type localVarReturnType = new TypeToken<SourceAccountResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Source Account (asynchronously)
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSourceAccountV2Async(UUID sourceAccountId, final ApiCallback<SourceAccountResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceAccountV2ValidateBeforeCall(sourceAccountId, _callback);
        Type localVarReturnType = new TypeToken<SourceAccountResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceAccountV3
     * @param sourceAccountId Source account id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceAccountV3Call(UUID sourceAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/sourceAccounts/{sourceAccountId}"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceAccountV3ValidateBeforeCall(UUID sourceAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling getSourceAccountV3(Async)");
        }

        return getSourceAccountV3Call(sourceAccountId, _callback);

    }

    /**
     * Get details about given source account.
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @return SourceAccountResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public SourceAccountResponseV3 getSourceAccountV3(UUID sourceAccountId) throws ApiException {
        ApiResponse<SourceAccountResponseV3> localVarResp = getSourceAccountV3WithHttpInfo(sourceAccountId);
        return localVarResp.getData();
    }

    /**
     * Get details about given source account.
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @return ApiResponse&lt;SourceAccountResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceAccountResponseV3> getSourceAccountV3WithHttpInfo(UUID sourceAccountId) throws ApiException {
        okhttp3.Call localVarCall = getSourceAccountV3ValidateBeforeCall(sourceAccountId, null);
        Type localVarReturnType = new TypeToken<SourceAccountResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about given source account. (asynchronously)
     * Get details about given source account.
     * @param sourceAccountId Source account id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Source account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceAccountV3Async(UUID sourceAccountId, final ApiCallback<SourceAccountResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceAccountV3ValidateBeforeCall(sourceAccountId, _callback);
        Type localVarReturnType = new TypeToken<SourceAccountResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceAccountsV2
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSourceAccountsV2Call(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sourceAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (physicalAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("physicalAccountName", physicalAccountName));
        }

        if (physicalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("physicalAccountId", physicalAccountId));
        }

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (fundingAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fundingAccountId", fundingAccountId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceAccountsV2ValidateBeforeCall(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        return getSourceAccountsV2Call(physicalAccountName, physicalAccountId, payorId, fundingAccountId, page, pageSize, sort, _callback);

    }

    /**
     * Get list of source accounts
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @return ListSourceAccountResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListSourceAccountResponseV2 getSourceAccountsV2(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<ListSourceAccountResponseV2> localVarResp = getSourceAccountsV2WithHttpInfo(physicalAccountName, physicalAccountId, payorId, fundingAccountId, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * Get list of source accounts
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @return ApiResponse&lt;ListSourceAccountResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListSourceAccountResponseV2> getSourceAccountsV2WithHttpInfo(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = getSourceAccountsV2ValidateBeforeCall(physicalAccountName, physicalAccountId, payorId, fundingAccountId, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<ListSourceAccountResponseV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of source accounts (asynchronously)
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSourceAccountsV2Async(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Integer page, Integer pageSize, String sort, final ApiCallback<ListSourceAccountResponseV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceAccountsV2ValidateBeforeCall(physicalAccountName, physicalAccountId, payorId, fundingAccountId, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<ListSourceAccountResponseV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourceAccountsV3
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param includeUserDeleted A filter for retrieving both active accounts and user deleted ones (optional)
     * @param type The type of source account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceAccountsV3Call(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Boolean includeUserDeleted, String type, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/sourceAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (physicalAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("physicalAccountName", physicalAccountName));
        }

        if (physicalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("physicalAccountId", physicalAccountId));
        }

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (fundingAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fundingAccountId", fundingAccountId));
        }

        if (includeUserDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUserDeleted", includeUserDeleted));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourceAccountsV3ValidateBeforeCall(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Boolean includeUserDeleted, String type, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        return getSourceAccountsV3Call(physicalAccountName, physicalAccountId, payorId, fundingAccountId, includeUserDeleted, type, page, pageSize, sort, _callback);

    }

    /**
     * Get list of source accounts
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param includeUserDeleted A filter for retrieving both active accounts and user deleted ones (optional)
     * @param type The type of source account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @return ListSourceAccountResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ListSourceAccountResponseV3 getSourceAccountsV3(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Boolean includeUserDeleted, String type, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<ListSourceAccountResponseV3> localVarResp = getSourceAccountsV3WithHttpInfo(physicalAccountName, physicalAccountId, payorId, fundingAccountId, includeUserDeleted, type, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * Get list of source accounts
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param includeUserDeleted A filter for retrieving both active accounts and user deleted ones (optional)
     * @param type The type of source account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @return ApiResponse&lt;ListSourceAccountResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSourceAccountResponseV3> getSourceAccountsV3WithHttpInfo(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Boolean includeUserDeleted, String type, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = getSourceAccountsV3ValidateBeforeCall(physicalAccountName, physicalAccountId, payorId, fundingAccountId, includeUserDeleted, type, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<ListSourceAccountResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of source accounts (asynchronously)
     * List source accounts.
     * @param physicalAccountName Physical Account Name (optional)
     * @param physicalAccountId The physical account ID (optional)
     * @param payorId The account owner Payor ID (optional)
     * @param fundingAccountId The funding account ID (optional)
     * @param includeUserDeleted A filter for retrieving both active accounts and user deleted ones (optional)
     * @param type The type of source account. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (optional, default to fundingRef:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Source Account response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourceAccountsV3Async(String physicalAccountName, UUID physicalAccountId, UUID payorId, UUID fundingAccountId, Boolean includeUserDeleted, String type, Integer page, Integer pageSize, String sort, final ApiCallback<ListSourceAccountResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourceAccountsV3ValidateBeforeCall(physicalAccountName, physicalAccountId, payorId, fundingAccountId, includeUserDeleted, type, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<ListSourceAccountResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setNotificationsRequest
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest Body to included minimum balance to set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setNotificationsRequestCall(UUID sourceAccountId, SetNotificationsRequest setNotificationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setNotificationsRequest;

        // create path and map variables
        String localVarPath = "/v1/sourceAccounts/{sourceAccountId}/notifications"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNotificationsRequestValidateBeforeCall(UUID sourceAccountId, SetNotificationsRequest setNotificationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling setNotificationsRequest(Async)");
        }

        // verify the required parameter 'setNotificationsRequest' is set
        if (setNotificationsRequest == null) {
            throw new ApiException("Missing the required parameter 'setNotificationsRequest' when calling setNotificationsRequest(Async)");
        }

        return setNotificationsRequestCall(sourceAccountId, setNotificationsRequest, _callback);

    }

    /**
     * Set notifications
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;deprecated since 2.34 (use v3 version)&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest Body to included minimum balance to set (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void setNotificationsRequest(UUID sourceAccountId, SetNotificationsRequest setNotificationsRequest) throws ApiException {
        setNotificationsRequestWithHttpInfo(sourceAccountId, setNotificationsRequest);
    }

    /**
     * Set notifications
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;deprecated since 2.34 (use v3 version)&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest Body to included minimum balance to set (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> setNotificationsRequestWithHttpInfo(UUID sourceAccountId, SetNotificationsRequest setNotificationsRequest) throws ApiException {
        okhttp3.Call localVarCall = setNotificationsRequestValidateBeforeCall(sourceAccountId, setNotificationsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set notifications (asynchronously)
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;deprecated since 2.34 (use v3 version)&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest Body to included minimum balance to set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setNotificationsRequestAsync(UUID sourceAccountId, SetNotificationsRequest setNotificationsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNotificationsRequestValidateBeforeCall(sourceAccountId, setNotificationsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setNotificationsRequestV3
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest2 Body to included minimum balance to set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setNotificationsRequestV3Call(UUID sourceAccountId, SetNotificationsRequest2 setNotificationsRequest2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setNotificationsRequest2;

        // create path and map variables
        String localVarPath = "/v3/sourceAccounts/{sourceAccountId}/notifications"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNotificationsRequestV3ValidateBeforeCall(UUID sourceAccountId, SetNotificationsRequest2 setNotificationsRequest2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling setNotificationsRequestV3(Async)");
        }

        // verify the required parameter 'setNotificationsRequest2' is set
        if (setNotificationsRequest2 == null) {
            throw new ApiException("Missing the required parameter 'setNotificationsRequest2' when calling setNotificationsRequestV3(Async)");
        }

        return setNotificationsRequestV3Call(sourceAccountId, setNotificationsRequest2, _callback);

    }

    /**
     * Set notifications
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;If the balance falls below the amount set in the request an email notification will be sent to the email address registered in the payor profile&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest2 Body to included minimum balance to set (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void setNotificationsRequestV3(UUID sourceAccountId, SetNotificationsRequest2 setNotificationsRequest2) throws ApiException {
        setNotificationsRequestV3WithHttpInfo(sourceAccountId, setNotificationsRequest2);
    }

    /**
     * Set notifications
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;If the balance falls below the amount set in the request an email notification will be sent to the email address registered in the payor profile&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest2 Body to included minimum balance to set (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setNotificationsRequestV3WithHttpInfo(UUID sourceAccountId, SetNotificationsRequest2 setNotificationsRequest2) throws ApiException {
        okhttp3.Call localVarCall = setNotificationsRequestV3ValidateBeforeCall(sourceAccountId, setNotificationsRequest2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set notifications (asynchronously)
     * &lt;p&gt;Set notifications for a given source account&lt;/p&gt; &lt;p&gt;If the balance falls below the amount set in the request an email notification will be sent to the email address registered in the payor profile&lt;/p&gt; 
     * @param sourceAccountId Source account id (required)
     * @param setNotificationsRequest2 Body to included minimum balance to set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Fulfilled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setNotificationsRequestV3Async(UUID sourceAccountId, SetNotificationsRequest2 setNotificationsRequest2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNotificationsRequestV3ValidateBeforeCall(sourceAccountId, setNotificationsRequest2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferFundsV2
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV2 Body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call transferFundsV2Call(UUID sourceAccountId, TransferRequestV2 transferRequestV2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRequestV2;

        // create path and map variables
        String localVarPath = "/v2/sourceAccounts/{sourceAccountId}/transfers"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferFundsV2ValidateBeforeCall(UUID sourceAccountId, TransferRequestV2 transferRequestV2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling transferFundsV2(Async)");
        }

        // verify the required parameter 'transferRequestV2' is set
        if (transferRequestV2 == null) {
            throw new ApiException("Missing the required parameter 'transferRequestV2' when calling transferFundsV2(Async)");
        }

        return transferFundsV2Call(sourceAccountId, transferRequestV2, _callback);

    }

    /**
     * Transfer Funds between source accounts
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV2 Body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void transferFundsV2(UUID sourceAccountId, TransferRequestV2 transferRequestV2) throws ApiException {
        transferFundsV2WithHttpInfo(sourceAccountId, transferRequestV2);
    }

    /**
     * Transfer Funds between source accounts
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV2 Body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> transferFundsV2WithHttpInfo(UUID sourceAccountId, TransferRequestV2 transferRequestV2) throws ApiException {
        okhttp3.Call localVarCall = transferFundsV2ValidateBeforeCall(sourceAccountId, transferRequestV2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transfer Funds between source accounts (asynchronously)
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV2 Body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call transferFundsV2Async(UUID sourceAccountId, TransferRequestV2 transferRequestV2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferFundsV2ValidateBeforeCall(sourceAccountId, transferRequestV2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferFundsV3
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV3 Body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferFundsV3Call(UUID sourceAccountId, TransferRequestV3 transferRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRequestV3;

        // create path and map variables
        String localVarPath = "/v3/sourceAccounts/{sourceAccountId}/transfers"
            .replace("{" + "sourceAccountId" + "}", localVarApiClient.escapeString(sourceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferFundsV3ValidateBeforeCall(UUID sourceAccountId, TransferRequestV3 transferRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling transferFundsV3(Async)");
        }

        // verify the required parameter 'transferRequestV3' is set
        if (transferRequestV3 == null) {
            throw new ApiException("Missing the required parameter 'transferRequestV3' when calling transferFundsV3(Async)");
        }

        return transferFundsV3Call(sourceAccountId, transferRequestV3, _callback);

    }

    /**
     * Transfer Funds between source accounts
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV3 Body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void transferFundsV3(UUID sourceAccountId, TransferRequestV3 transferRequestV3) throws ApiException {
        transferFundsV3WithHttpInfo(sourceAccountId, transferRequestV3);
    }

    /**
     * Transfer Funds between source accounts
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV3 Body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transferFundsV3WithHttpInfo(UUID sourceAccountId, TransferRequestV3 transferRequestV3) throws ApiException {
        okhttp3.Call localVarCall = transferFundsV3ValidateBeforeCall(sourceAccountId, transferRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transfer Funds between source accounts (asynchronously)
     * Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
     * @param sourceAccountId The &#39;from&#39; source account id, which will be debited (required)
     * @param transferRequestV3 Body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request Processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferFundsV3Async(UUID sourceAccountId, TransferRequestV3 transferRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferFundsV3ValidateBeforeCall(sourceAccountId, transferRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
