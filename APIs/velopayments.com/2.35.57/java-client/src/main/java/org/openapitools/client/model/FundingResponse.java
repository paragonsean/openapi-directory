/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FundingResponse {
  public static final String SERIALIZED_NAME_ALLOCATION_DATE = "allocationDate";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_DATE)
  private OffsetDateTime allocationDate;

  public static final String SERIALIZED_NAME_ALLOCATION_TYPE = "allocationType";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_TYPE)
  private String allocationType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DETECTED_FUNDING_REF = "detectedFundingRef";
  @SerializedName(SERIALIZED_NAME_DETECTED_FUNDING_REF)
  private String detectedFundingRef;

  public static final String SERIALIZED_NAME_FUNDING_ACCOUNT_TYPE = "fundingAccountType";
  @SerializedName(SERIALIZED_NAME_FUNDING_ACCOUNT_TYPE)
  private String fundingAccountType;

  public static final String SERIALIZED_NAME_FUNDING_ID = "fundingId";
  @SerializedName(SERIALIZED_NAME_FUNDING_ID)
  private UUID fundingId;

  public static final String SERIALIZED_NAME_HIDDEN_DATE = "hiddenDate";
  @SerializedName(SERIALIZED_NAME_HIDDEN_DATE)
  private OffsetDateTime hiddenDate;

  public static final String SERIALIZED_NAME_PAYOR_ID = "payorId";
  @SerializedName(SERIALIZED_NAME_PAYOR_ID)
  private UUID payorId;

  public static final String SERIALIZED_NAME_PHYSICAL_ACCOUNT_NAME = "physicalAccountName";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_ACCOUNT_NAME)
  private String physicalAccountName;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_ID = "sourceAccountId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_ID)
  private UUID sourceAccountId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public FundingResponse() {
  }

  public FundingResponse allocationDate(OffsetDateTime allocationDate) {
    this.allocationDate = allocationDate;
    return this;
  }

  /**
   * Get allocationDate
   * @return allocationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAllocationDate() {
    return allocationDate;
  }

  public void setAllocationDate(OffsetDateTime allocationDate) {
    this.allocationDate = allocationDate;
  }


  public FundingResponse allocationType(String allocationType) {
    this.allocationType = allocationType;
    return this;
  }

  /**
   * Funding Allocation Type. One of the following values: AUTOMATIC, MANUAL
   * @return allocationType
   */
  @javax.annotation.Nullable
  public String getAllocationType() {
    return allocationType;
  }

  public void setAllocationType(String allocationType) {
    this.allocationType = allocationType;
  }


  public FundingResponse amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public FundingResponse currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Valid ISO 4217 3 letter currency code. See the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-4217-currency-codes.html\&quot; target&#x3D;\&quot;_blank\&quot; a&gt;ISO specification&lt;/a&gt; for details.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public FundingResponse detectedFundingRef(String detectedFundingRef) {
    this.detectedFundingRef = detectedFundingRef;
    return this;
  }

  /**
   * Get detectedFundingRef
   * @return detectedFundingRef
   */
  @javax.annotation.Nullable
  public String getDetectedFundingRef() {
    return detectedFundingRef;
  }

  public void setDetectedFundingRef(String detectedFundingRef) {
    this.detectedFundingRef = detectedFundingRef;
  }


  public FundingResponse fundingAccountType(String fundingAccountType) {
    this.fundingAccountType = fundingAccountType;
    return this;
  }

  /**
   * Funding Account Type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE
   * @return fundingAccountType
   */
  @javax.annotation.Nonnull
  public String getFundingAccountType() {
    return fundingAccountType;
  }

  public void setFundingAccountType(String fundingAccountType) {
    this.fundingAccountType = fundingAccountType;
  }


  public FundingResponse fundingId(UUID fundingId) {
    this.fundingId = fundingId;
    return this;
  }

  /**
   * Get fundingId
   * @return fundingId
   */
  @javax.annotation.Nonnull
  public UUID getFundingId() {
    return fundingId;
  }

  public void setFundingId(UUID fundingId) {
    this.fundingId = fundingId;
  }


  public FundingResponse hiddenDate(OffsetDateTime hiddenDate) {
    this.hiddenDate = hiddenDate;
    return this;
  }

  /**
   * Get hiddenDate
   * @return hiddenDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHiddenDate() {
    return hiddenDate;
  }

  public void setHiddenDate(OffsetDateTime hiddenDate) {
    this.hiddenDate = hiddenDate;
  }


  public FundingResponse payorId(UUID payorId) {
    this.payorId = payorId;
    return this;
  }

  /**
   * Get payorId
   * @return payorId
   */
  @javax.annotation.Nonnull
  public UUID getPayorId() {
    return payorId;
  }

  public void setPayorId(UUID payorId) {
    this.payorId = payorId;
  }


  public FundingResponse physicalAccountName(String physicalAccountName) {
    this.physicalAccountName = physicalAccountName;
    return this;
  }

  /**
   * Get physicalAccountName
   * @return physicalAccountName
   */
  @javax.annotation.Nullable
  public String getPhysicalAccountName() {
    return physicalAccountName;
  }

  public void setPhysicalAccountName(String physicalAccountName) {
    this.physicalAccountName = physicalAccountName;
  }


  public FundingResponse reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public FundingResponse sourceAccountId(UUID sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
    return this;
  }

  /**
   * Get sourceAccountId
   * @return sourceAccountId
   */
  @javax.annotation.Nullable
  public UUID getSourceAccountId() {
    return sourceAccountId;
  }

  public void setSourceAccountId(UUID sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
  }


  public FundingResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the funding. One of the follwing values: PENDING, UNALLOCATED, ALLOCATED, HIDDEN, RETURNED, RETURNING, BULK_RETURN, OTHER
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public FundingResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingResponse fundingResponse = (FundingResponse) o;
    return Objects.equals(this.allocationDate, fundingResponse.allocationDate) &&
        Objects.equals(this.allocationType, fundingResponse.allocationType) &&
        Objects.equals(this.amount, fundingResponse.amount) &&
        Objects.equals(this.currency, fundingResponse.currency) &&
        Objects.equals(this.detectedFundingRef, fundingResponse.detectedFundingRef) &&
        Objects.equals(this.fundingAccountType, fundingResponse.fundingAccountType) &&
        Objects.equals(this.fundingId, fundingResponse.fundingId) &&
        Objects.equals(this.hiddenDate, fundingResponse.hiddenDate) &&
        Objects.equals(this.payorId, fundingResponse.payorId) &&
        Objects.equals(this.physicalAccountName, fundingResponse.physicalAccountName) &&
        Objects.equals(this.reason, fundingResponse.reason) &&
        Objects.equals(this.sourceAccountId, fundingResponse.sourceAccountId) &&
        Objects.equals(this.status, fundingResponse.status) &&
        Objects.equals(this.text, fundingResponse.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationDate, allocationType, amount, currency, detectedFundingRef, fundingAccountType, fundingId, hiddenDate, payorId, physicalAccountName, reason, sourceAccountId, status, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingResponse {\n");
    sb.append("    allocationDate: ").append(toIndentedString(allocationDate)).append("\n");
    sb.append("    allocationType: ").append(toIndentedString(allocationType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    detectedFundingRef: ").append(toIndentedString(detectedFundingRef)).append("\n");
    sb.append("    fundingAccountType: ").append(toIndentedString(fundingAccountType)).append("\n");
    sb.append("    fundingId: ").append(toIndentedString(fundingId)).append("\n");
    sb.append("    hiddenDate: ").append(toIndentedString(hiddenDate)).append("\n");
    sb.append("    payorId: ").append(toIndentedString(payorId)).append("\n");
    sb.append("    physicalAccountName: ").append(toIndentedString(physicalAccountName)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    sourceAccountId: ").append(toIndentedString(sourceAccountId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationDate");
    openapiFields.add("allocationType");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("detectedFundingRef");
    openapiFields.add("fundingAccountType");
    openapiFields.add("fundingId");
    openapiFields.add("hiddenDate");
    openapiFields.add("payorId");
    openapiFields.add("physicalAccountName");
    openapiFields.add("reason");
    openapiFields.add("sourceAccountId");
    openapiFields.add("status");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allocationDate");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("fundingAccountType");
    openapiRequiredFields.add("fundingId");
    openapiRequiredFields.add("payorId");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundingResponse is not found in the empty JSON string", FundingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundingResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocationType") != null && !jsonObj.get("allocationType").isJsonNull()) && !jsonObj.get("allocationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocationType").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("detectedFundingRef") != null && !jsonObj.get("detectedFundingRef").isJsonNull()) && !jsonObj.get("detectedFundingRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedFundingRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectedFundingRef").toString()));
      }
      if (!jsonObj.get("fundingAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingAccountType").toString()));
      }
      if (!jsonObj.get("fundingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingId").toString()));
      }
      if (!jsonObj.get("payorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorId").toString()));
      }
      if ((jsonObj.get("physicalAccountName") != null && !jsonObj.get("physicalAccountName").isJsonNull()) && !jsonObj.get("physicalAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalAccountName").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("sourceAccountId") != null && !jsonObj.get("sourceAccountId").isJsonNull()) && !jsonObj.get("sourceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FundingResponse>() {
           @Override
           public void write(JsonWriter out, FundingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundingResponse
   * @throws IOException if the JSON string is invalid with respect to FundingResponse
   */
  public static FundingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundingResponse.class);
  }

  /**
   * Convert an instance of FundingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

