/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InviteUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InviteUserRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * &lt;p&gt;The MFA type that the user will use&lt;/p&gt; &lt;p&gt;The type may be conditional on the role(s) the user has&lt;/p&gt; 
   */
  @JsonAdapter(MfaTypeEnum.Adapter.class)
  public enum MfaTypeEnum {
    SMS("SMS"),
    
    YUBIKEY("YUBIKEY"),
    
    TOTP("TOTP");

    private String value;

    MfaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MfaTypeEnum fromValue(String value) {
      for (MfaTypeEnum b : MfaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MfaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MfaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MfaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MfaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MfaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MFA_TYPE = "mfaType";
  @SerializedName(SERIALIZED_NAME_MFA_TYPE)
  private MfaTypeEnum mfaType;

  public static final String SERIALIZED_NAME_PRIMARY_CONTACT_NUMBER = "primaryContactNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONTACT_NUMBER)
  private String primaryContactNumber;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<String> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_CONTACT_NUMBER = "secondaryContactNumber";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CONTACT_NUMBER)
  private String secondaryContactNumber;

  public static final String SERIALIZED_NAME_SMS_NUMBER = "smsNumber";
  @SerializedName(SERIALIZED_NAME_SMS_NUMBER)
  private String smsNumber;

  /**
   * Will default to PAYOR if not provided but entityId is provided
   */
  @JsonAdapter(UserTypeEnum.Adapter.class)
  public enum UserTypeEnum {
    BACKOFFICE("BACKOFFICE"),
    
    PAYOR("PAYOR"),
    
    PAYEE("PAYEE");

    private String value;

    UserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserTypeEnum fromValue(String value) {
      for (UserTypeEnum b : UserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private UserTypeEnum userType;

  public static final String SERIALIZED_NAME_VERIFICATION_CODE = "verificationCode";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_CODE)
  private String verificationCode;

  public InviteUserRequest() {
  }

  public InviteUserRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * the email address of the invited user
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public InviteUserRequest entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The payorId or payeeId or null if the user is a backoffice admin 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public InviteUserRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public InviteUserRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public InviteUserRequest mfaType(MfaTypeEnum mfaType) {
    this.mfaType = mfaType;
    return this;
  }

  /**
   * &lt;p&gt;The MFA type that the user will use&lt;/p&gt; &lt;p&gt;The type may be conditional on the role(s) the user has&lt;/p&gt; 
   * @return mfaType
   */
  @javax.annotation.Nonnull
  public MfaTypeEnum getMfaType() {
    return mfaType;
  }

  public void setMfaType(MfaTypeEnum mfaType) {
    this.mfaType = mfaType;
  }


  public InviteUserRequest primaryContactNumber(String primaryContactNumber) {
    this.primaryContactNumber = primaryContactNumber;
    return this;
  }

  /**
   * The main contact number for the user 
   * @return primaryContactNumber
   */
  @javax.annotation.Nonnull
  public String getPrimaryContactNumber() {
    return primaryContactNumber;
  }

  public void setPrimaryContactNumber(String primaryContactNumber) {
    this.primaryContactNumber = primaryContactNumber;
  }


  public InviteUserRequest roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public InviteUserRequest addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The role(s) for the user The role must exist The role can be a custom role or a system role but the invoker must have the permissions to assign the role System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support 
   * @return roles
   */
  @javax.annotation.Nonnull
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }


  public InviteUserRequest secondaryContactNumber(String secondaryContactNumber) {
    this.secondaryContactNumber = secondaryContactNumber;
    return this;
  }

  /**
   * The secondary contact number for the user 
   * @return secondaryContactNumber
   */
  @javax.annotation.Nullable
  public String getSecondaryContactNumber() {
    return secondaryContactNumber;
  }

  public void setSecondaryContactNumber(String secondaryContactNumber) {
    this.secondaryContactNumber = secondaryContactNumber;
  }


  public InviteUserRequest smsNumber(String smsNumber) {
    this.smsNumber = smsNumber;
    return this;
  }

  /**
   * The phone number of a device that the user can receive sms messages on 
   * @return smsNumber
   */
  @javax.annotation.Nonnull
  public String getSmsNumber() {
    return smsNumber;
  }

  public void setSmsNumber(String smsNumber) {
    this.smsNumber = smsNumber;
  }


  public InviteUserRequest userType(UserTypeEnum userType) {
    this.userType = userType;
    return this;
  }

  /**
   * Will default to PAYOR if not provided but entityId is provided
   * @return userType
   */
  @javax.annotation.Nullable
  public UserTypeEnum getUserType() {
    return userType;
  }

  public void setUserType(UserTypeEnum userType) {
    this.userType = userType;
  }


  public InviteUserRequest verificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
    return this;
  }

  /**
   * Optional property that MUST be suppied when manually verifying a user The user&#39;s smsNumber is registered via a separate endpoint and an OTP sent to them 
   * @return verificationCode
   */
  @javax.annotation.Nullable
  public String getVerificationCode() {
    return verificationCode;
  }

  public void setVerificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InviteUserRequest inviteUserRequest = (InviteUserRequest) o;
    return Objects.equals(this.email, inviteUserRequest.email) &&
        Objects.equals(this.entityId, inviteUserRequest.entityId) &&
        Objects.equals(this.firstName, inviteUserRequest.firstName) &&
        Objects.equals(this.lastName, inviteUserRequest.lastName) &&
        Objects.equals(this.mfaType, inviteUserRequest.mfaType) &&
        Objects.equals(this.primaryContactNumber, inviteUserRequest.primaryContactNumber) &&
        Objects.equals(this.roles, inviteUserRequest.roles) &&
        Objects.equals(this.secondaryContactNumber, inviteUserRequest.secondaryContactNumber) &&
        Objects.equals(this.smsNumber, inviteUserRequest.smsNumber) &&
        Objects.equals(this.userType, inviteUserRequest.userType) &&
        Objects.equals(this.verificationCode, inviteUserRequest.verificationCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, entityId, firstName, lastName, mfaType, primaryContactNumber, roles, secondaryContactNumber, smsNumber, userType, verificationCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InviteUserRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    mfaType: ").append(toIndentedString(mfaType)).append("\n");
    sb.append("    primaryContactNumber: ").append(toIndentedString(primaryContactNumber)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    secondaryContactNumber: ").append(toIndentedString(secondaryContactNumber)).append("\n");
    sb.append("    smsNumber: ").append(toIndentedString(smsNumber)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("entityId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("mfaType");
    openapiFields.add("primaryContactNumber");
    openapiFields.add("roles");
    openapiFields.add("secondaryContactNumber");
    openapiFields.add("smsNumber");
    openapiFields.add("userType");
    openapiFields.add("verificationCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("mfaType");
    openapiRequiredFields.add("primaryContactNumber");
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("smsNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InviteUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InviteUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InviteUserRequest is not found in the empty JSON string", InviteUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InviteUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InviteUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InviteUserRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("mfaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaType").toString()));
      }
      // validate the required field `mfaType`
      MfaTypeEnum.validateJsonElement(jsonObj.get("mfaType"));
      if (!jsonObj.get("primaryContactNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryContactNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryContactNumber").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if ((jsonObj.get("secondaryContactNumber") != null && !jsonObj.get("secondaryContactNumber").isJsonNull()) && !jsonObj.get("secondaryContactNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryContactNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryContactNumber").toString()));
      }
      if (!jsonObj.get("smsNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsNumber").toString()));
      }
      if ((jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) && !jsonObj.get("userType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userType").toString()));
      }
      // validate the optional field `userType`
      if (jsonObj.get("userType") != null && !jsonObj.get("userType").isJsonNull()) {
        UserTypeEnum.validateJsonElement(jsonObj.get("userType"));
      }
      if ((jsonObj.get("verificationCode") != null && !jsonObj.get("verificationCode").isJsonNull()) && !jsonObj.get("verificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InviteUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InviteUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InviteUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InviteUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InviteUserRequest>() {
           @Override
           public void write(JsonWriter out, InviteUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InviteUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InviteUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InviteUserRequest
   * @throws IOException if the JSON string is invalid with respect to InviteUserRequest
   */
  public static InviteUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InviteUserRequest.class);
  }

  /**
   * Convert an instance of InviteUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

