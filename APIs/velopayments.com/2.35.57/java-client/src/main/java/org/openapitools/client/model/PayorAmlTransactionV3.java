/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayorAmlTransactionV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayorAmlTransactionV3 {
  public static final String SERIALIZED_NAME_CREDIT = "credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private Long credit;

  public static final String SERIALIZED_NAME_CREDIT_CURRENCY = "creditCurrency";
  @SerializedName(SERIALIZED_NAME_CREDIT_CURRENCY)
  private String creditCurrency;

  public static final String SERIALIZED_NAME_DATE_FUNDING_REQUESTED = "dateFundingRequested";
  @SerializedName(SERIALIZED_NAME_DATE_FUNDING_REQUESTED)
  private String dateFundingRequested;

  public static final String SERIALIZED_NAME_DEBIT = "debit";
  @SerializedName(SERIALIZED_NAME_DEBIT)
  private Long debit;

  public static final String SERIALIZED_NAME_DEBIT_CURRENCY = "debitCurrency";
  @SerializedName(SERIALIZED_NAME_DEBIT_CURRENCY)
  private String debitCurrency;

  public static final String SERIALIZED_NAME_FUNDING_TYPE = "fundingType";
  @SerializedName(SERIALIZED_NAME_FUNDING_TYPE)
  private String fundingType;

  public static final String SERIALIZED_NAME_FX_APPLIED = "fxApplied";
  @SerializedName(SERIALIZED_NAME_FX_APPLIED)
  private Double fxApplied;

  public static final String SERIALIZED_NAME_PAYEE_TYPE = "payeeType";
  @SerializedName(SERIALIZED_NAME_PAYEE_TYPE)
  private String payeeType;

  public static final String SERIALIZED_NAME_PAYMENT_AMOUNT = "paymentAmount";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AMOUNT)
  private Long paymentAmount;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "paymentCurrency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_PAYMENT_MEMO = "paymentMemo";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEMO)
  private String paymentMemo;

  public static final String SERIALIZED_NAME_PAYMENT_RAILS = "paymentRails";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RAILS)
  private String paymentRails;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_PAYOR_PAYMENT_ID = "payorPaymentId";
  @SerializedName(SERIALIZED_NAME_PAYOR_PAYMENT_ID)
  private String payorPaymentId;

  public static final String SERIALIZED_NAME_REJECT_REASON = "rejectReason";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON)
  private String rejectReason;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_REPORT_TRANSACTION_TYPE = "reportTransactionType";
  @SerializedName(SERIALIZED_NAME_REPORT_TRANSACTION_TYPE)
  private String reportTransactionType;

  public static final String SERIALIZED_NAME_RETURN_CODE = "returnCode";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  private String returnCode;

  public static final String SERIALIZED_NAME_RETURN_DESCRIPTION = "returnDescription";
  @SerializedName(SERIALIZED_NAME_RETURN_DESCRIPTION)
  private String returnDescription;

  public static final String SERIALIZED_NAME_RETURN_FEE = "returnFee";
  @SerializedName(SERIALIZED_NAME_RETURN_FEE)
  private String returnFee;

  public static final String SERIALIZED_NAME_RETURN_FEE_CURRENCY = "returnFeeCurrency";
  @SerializedName(SERIALIZED_NAME_RETURN_FEE_CURRENCY)
  private String returnFeeCurrency;

  public static final String SERIALIZED_NAME_RETURN_FEE_DESCRIPTION = "returnFeeDescription";
  @SerializedName(SERIALIZED_NAME_RETURN_FEE_DESCRIPTION)
  private String returnFeeDescription;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT = "sourceAccount";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT)
  private String sourceAccount;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private LocalDate transactionDate;

  public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
  private String transactionTime;

  public PayorAmlTransactionV3() {
  }

  public PayorAmlTransactionV3 credit(Long credit) {
    this.credit = credit;
    return this;
  }

  /**
   * Get credit
   * @return credit
   */
  @javax.annotation.Nullable
  public Long getCredit() {
    return credit;
  }

  public void setCredit(Long credit) {
    this.credit = credit;
  }


  public PayorAmlTransactionV3 creditCurrency(String creditCurrency) {
    this.creditCurrency = creditCurrency;
    return this;
  }

  /**
   * ISO 4217 3 character currency code
   * @return creditCurrency
   */
  @javax.annotation.Nullable
  public String getCreditCurrency() {
    return creditCurrency;
  }

  public void setCreditCurrency(String creditCurrency) {
    this.creditCurrency = creditCurrency;
  }


  public PayorAmlTransactionV3 dateFundingRequested(String dateFundingRequested) {
    this.dateFundingRequested = dateFundingRequested;
    return this;
  }

  /**
   * Get dateFundingRequested
   * @return dateFundingRequested
   */
  @javax.annotation.Nullable
  public String getDateFundingRequested() {
    return dateFundingRequested;
  }

  public void setDateFundingRequested(String dateFundingRequested) {
    this.dateFundingRequested = dateFundingRequested;
  }


  public PayorAmlTransactionV3 debit(Long debit) {
    this.debit = debit;
    return this;
  }

  /**
   * Get debit
   * @return debit
   */
  @javax.annotation.Nullable
  public Long getDebit() {
    return debit;
  }

  public void setDebit(Long debit) {
    this.debit = debit;
  }


  public PayorAmlTransactionV3 debitCurrency(String debitCurrency) {
    this.debitCurrency = debitCurrency;
    return this;
  }

  /**
   * ISO 4217 3 character currency code
   * @return debitCurrency
   */
  @javax.annotation.Nullable
  public String getDebitCurrency() {
    return debitCurrency;
  }

  public void setDebitCurrency(String debitCurrency) {
    this.debitCurrency = debitCurrency;
  }


  public PayorAmlTransactionV3 fundingType(String fundingType) {
    this.fundingType = fundingType;
    return this;
  }

  /**
   * Get fundingType
   * @return fundingType
   */
  @javax.annotation.Nullable
  public String getFundingType() {
    return fundingType;
  }

  public void setFundingType(String fundingType) {
    this.fundingType = fundingType;
  }


  public PayorAmlTransactionV3 fxApplied(Double fxApplied) {
    this.fxApplied = fxApplied;
    return this;
  }

  /**
   * Get fxApplied
   * @return fxApplied
   */
  @javax.annotation.Nullable
  public Double getFxApplied() {
    return fxApplied;
  }

  public void setFxApplied(Double fxApplied) {
    this.fxApplied = fxApplied;
  }


  public PayorAmlTransactionV3 payeeType(String payeeType) {
    this.payeeType = payeeType;
    return this;
  }

  /**
   * Get payeeType
   * @return payeeType
   */
  @javax.annotation.Nullable
  public String getPayeeType() {
    return payeeType;
  }

  public void setPayeeType(String payeeType) {
    this.payeeType = payeeType;
  }


  public PayorAmlTransactionV3 paymentAmount(Long paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * Get paymentAmount
   * @return paymentAmount
   */
  @javax.annotation.Nullable
  public Long getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(Long paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public PayorAmlTransactionV3 paymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * ISO 4217 3 character currency code
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public PayorAmlTransactionV3 paymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
    return this;
  }

  /**
   * Get paymentMemo
   * @return paymentMemo
   */
  @javax.annotation.Nullable
  public String getPaymentMemo() {
    return paymentMemo;
  }

  public void setPaymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
  }


  public PayorAmlTransactionV3 paymentRails(String paymentRails) {
    this.paymentRails = paymentRails;
    return this;
  }

  /**
   * Get paymentRails
   * @return paymentRails
   */
  @javax.annotation.Nullable
  public String getPaymentRails() {
    return paymentRails;
  }

  public void setPaymentRails(String paymentRails) {
    this.paymentRails = paymentRails;
  }


  public PayorAmlTransactionV3 paymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * Get paymentStatus
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public PayorAmlTransactionV3 payorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
    return this;
  }

  /**
   * Get payorPaymentId
   * @return payorPaymentId
   */
  @javax.annotation.Nullable
  public String getPayorPaymentId() {
    return payorPaymentId;
  }

  public void setPayorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
  }


  public PayorAmlTransactionV3 rejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
    return this;
  }

  /**
   * Get rejectReason
   * @return rejectReason
   */
  @javax.annotation.Nullable
  public String getRejectReason() {
    return rejectReason;
  }

  public void setRejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
  }


  public PayorAmlTransactionV3 remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * Remote ID of the Payee, set by Payor
   * @return remoteId
   */
  @javax.annotation.Nullable
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public PayorAmlTransactionV3 reportTransactionType(String reportTransactionType) {
    this.reportTransactionType = reportTransactionType;
    return this;
  }

  /**
   * Get reportTransactionType
   * @return reportTransactionType
   */
  @javax.annotation.Nullable
  public String getReportTransactionType() {
    return reportTransactionType;
  }

  public void setReportTransactionType(String reportTransactionType) {
    this.reportTransactionType = reportTransactionType;
  }


  public PayorAmlTransactionV3 returnCode(String returnCode) {
    this.returnCode = returnCode;
    return this;
  }

  /**
   * Get returnCode
   * @return returnCode
   */
  @javax.annotation.Nullable
  public String getReturnCode() {
    return returnCode;
  }

  public void setReturnCode(String returnCode) {
    this.returnCode = returnCode;
  }


  public PayorAmlTransactionV3 returnDescription(String returnDescription) {
    this.returnDescription = returnDescription;
    return this;
  }

  /**
   * Get returnDescription
   * @return returnDescription
   */
  @javax.annotation.Nullable
  public String getReturnDescription() {
    return returnDescription;
  }

  public void setReturnDescription(String returnDescription) {
    this.returnDescription = returnDescription;
  }


  public PayorAmlTransactionV3 returnFee(String returnFee) {
    this.returnFee = returnFee;
    return this;
  }

  /**
   * Get returnFee
   * @return returnFee
   */
  @javax.annotation.Nullable
  public String getReturnFee() {
    return returnFee;
  }

  public void setReturnFee(String returnFee) {
    this.returnFee = returnFee;
  }


  public PayorAmlTransactionV3 returnFeeCurrency(String returnFeeCurrency) {
    this.returnFeeCurrency = returnFeeCurrency;
    return this;
  }

  /**
   * ISO 4217 3 character currency code
   * @return returnFeeCurrency
   */
  @javax.annotation.Nullable
  public String getReturnFeeCurrency() {
    return returnFeeCurrency;
  }

  public void setReturnFeeCurrency(String returnFeeCurrency) {
    this.returnFeeCurrency = returnFeeCurrency;
  }


  public PayorAmlTransactionV3 returnFeeDescription(String returnFeeDescription) {
    this.returnFeeDescription = returnFeeDescription;
    return this;
  }

  /**
   * Get returnFeeDescription
   * @return returnFeeDescription
   */
  @javax.annotation.Nullable
  public String getReturnFeeDescription() {
    return returnFeeDescription;
  }

  public void setReturnFeeDescription(String returnFeeDescription) {
    this.returnFeeDescription = returnFeeDescription;
  }


  public PayorAmlTransactionV3 sourceAccount(String sourceAccount) {
    this.sourceAccount = sourceAccount;
    return this;
  }

  /**
   * Get sourceAccount
   * @return sourceAccount
   */
  @javax.annotation.Nullable
  public String getSourceAccount() {
    return sourceAccount;
  }

  public void setSourceAccount(String sourceAccount) {
    this.sourceAccount = sourceAccount;
  }


  public PayorAmlTransactionV3 transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

  /**
   * Get transactionDate
   * @return transactionDate
   */
  @javax.annotation.Nullable
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }


  public PayorAmlTransactionV3 transactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
    return this;
  }

  /**
   * Get transactionTime
   * @return transactionTime
   */
  @javax.annotation.Nullable
  public String getTransactionTime() {
    return transactionTime;
  }

  public void setTransactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayorAmlTransactionV3 payorAmlTransactionV3 = (PayorAmlTransactionV3) o;
    return Objects.equals(this.credit, payorAmlTransactionV3.credit) &&
        Objects.equals(this.creditCurrency, payorAmlTransactionV3.creditCurrency) &&
        Objects.equals(this.dateFundingRequested, payorAmlTransactionV3.dateFundingRequested) &&
        Objects.equals(this.debit, payorAmlTransactionV3.debit) &&
        Objects.equals(this.debitCurrency, payorAmlTransactionV3.debitCurrency) &&
        Objects.equals(this.fundingType, payorAmlTransactionV3.fundingType) &&
        Objects.equals(this.fxApplied, payorAmlTransactionV3.fxApplied) &&
        Objects.equals(this.payeeType, payorAmlTransactionV3.payeeType) &&
        Objects.equals(this.paymentAmount, payorAmlTransactionV3.paymentAmount) &&
        Objects.equals(this.paymentCurrency, payorAmlTransactionV3.paymentCurrency) &&
        Objects.equals(this.paymentMemo, payorAmlTransactionV3.paymentMemo) &&
        Objects.equals(this.paymentRails, payorAmlTransactionV3.paymentRails) &&
        Objects.equals(this.paymentStatus, payorAmlTransactionV3.paymentStatus) &&
        Objects.equals(this.payorPaymentId, payorAmlTransactionV3.payorPaymentId) &&
        Objects.equals(this.rejectReason, payorAmlTransactionV3.rejectReason) &&
        Objects.equals(this.remoteId, payorAmlTransactionV3.remoteId) &&
        Objects.equals(this.reportTransactionType, payorAmlTransactionV3.reportTransactionType) &&
        Objects.equals(this.returnCode, payorAmlTransactionV3.returnCode) &&
        Objects.equals(this.returnDescription, payorAmlTransactionV3.returnDescription) &&
        Objects.equals(this.returnFee, payorAmlTransactionV3.returnFee) &&
        Objects.equals(this.returnFeeCurrency, payorAmlTransactionV3.returnFeeCurrency) &&
        Objects.equals(this.returnFeeDescription, payorAmlTransactionV3.returnFeeDescription) &&
        Objects.equals(this.sourceAccount, payorAmlTransactionV3.sourceAccount) &&
        Objects.equals(this.transactionDate, payorAmlTransactionV3.transactionDate) &&
        Objects.equals(this.transactionTime, payorAmlTransactionV3.transactionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credit, creditCurrency, dateFundingRequested, debit, debitCurrency, fundingType, fxApplied, payeeType, paymentAmount, paymentCurrency, paymentMemo, paymentRails, paymentStatus, payorPaymentId, rejectReason, remoteId, reportTransactionType, returnCode, returnDescription, returnFee, returnFeeCurrency, returnFeeDescription, sourceAccount, transactionDate, transactionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayorAmlTransactionV3 {\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    creditCurrency: ").append(toIndentedString(creditCurrency)).append("\n");
    sb.append("    dateFundingRequested: ").append(toIndentedString(dateFundingRequested)).append("\n");
    sb.append("    debit: ").append(toIndentedString(debit)).append("\n");
    sb.append("    debitCurrency: ").append(toIndentedString(debitCurrency)).append("\n");
    sb.append("    fundingType: ").append(toIndentedString(fundingType)).append("\n");
    sb.append("    fxApplied: ").append(toIndentedString(fxApplied)).append("\n");
    sb.append("    payeeType: ").append(toIndentedString(payeeType)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    paymentMemo: ").append(toIndentedString(paymentMemo)).append("\n");
    sb.append("    paymentRails: ").append(toIndentedString(paymentRails)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    payorPaymentId: ").append(toIndentedString(payorPaymentId)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    reportTransactionType: ").append(toIndentedString(reportTransactionType)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    returnDescription: ").append(toIndentedString(returnDescription)).append("\n");
    sb.append("    returnFee: ").append(toIndentedString(returnFee)).append("\n");
    sb.append("    returnFeeCurrency: ").append(toIndentedString(returnFeeCurrency)).append("\n");
    sb.append("    returnFeeDescription: ").append(toIndentedString(returnFeeDescription)).append("\n");
    sb.append("    sourceAccount: ").append(toIndentedString(sourceAccount)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credit");
    openapiFields.add("creditCurrency");
    openapiFields.add("dateFundingRequested");
    openapiFields.add("debit");
    openapiFields.add("debitCurrency");
    openapiFields.add("fundingType");
    openapiFields.add("fxApplied");
    openapiFields.add("payeeType");
    openapiFields.add("paymentAmount");
    openapiFields.add("paymentCurrency");
    openapiFields.add("paymentMemo");
    openapiFields.add("paymentRails");
    openapiFields.add("paymentStatus");
    openapiFields.add("payorPaymentId");
    openapiFields.add("rejectReason");
    openapiFields.add("remoteId");
    openapiFields.add("reportTransactionType");
    openapiFields.add("returnCode");
    openapiFields.add("returnDescription");
    openapiFields.add("returnFee");
    openapiFields.add("returnFeeCurrency");
    openapiFields.add("returnFeeDescription");
    openapiFields.add("sourceAccount");
    openapiFields.add("transactionDate");
    openapiFields.add("transactionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayorAmlTransactionV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayorAmlTransactionV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayorAmlTransactionV3 is not found in the empty JSON string", PayorAmlTransactionV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayorAmlTransactionV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayorAmlTransactionV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creditCurrency") != null && !jsonObj.get("creditCurrency").isJsonNull()) && !jsonObj.get("creditCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditCurrency").toString()));
      }
      if ((jsonObj.get("dateFundingRequested") != null && !jsonObj.get("dateFundingRequested").isJsonNull()) && !jsonObj.get("dateFundingRequested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFundingRequested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFundingRequested").toString()));
      }
      if ((jsonObj.get("debitCurrency") != null && !jsonObj.get("debitCurrency").isJsonNull()) && !jsonObj.get("debitCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitCurrency").toString()));
      }
      if ((jsonObj.get("fundingType") != null && !jsonObj.get("fundingType").isJsonNull()) && !jsonObj.get("fundingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingType").toString()));
      }
      if ((jsonObj.get("payeeType") != null && !jsonObj.get("payeeType").isJsonNull()) && !jsonObj.get("payeeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeType").toString()));
      }
      if ((jsonObj.get("paymentCurrency") != null && !jsonObj.get("paymentCurrency").isJsonNull()) && !jsonObj.get("paymentCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCurrency").toString()));
      }
      if ((jsonObj.get("paymentMemo") != null && !jsonObj.get("paymentMemo").isJsonNull()) && !jsonObj.get("paymentMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMemo").toString()));
      }
      if ((jsonObj.get("paymentRails") != null && !jsonObj.get("paymentRails").isJsonNull()) && !jsonObj.get("paymentRails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentRails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentRails").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("payorPaymentId") != null && !jsonObj.get("payorPaymentId").isJsonNull()) && !jsonObj.get("payorPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorPaymentId").toString()));
      }
      if ((jsonObj.get("rejectReason") != null && !jsonObj.get("rejectReason").isJsonNull()) && !jsonObj.get("rejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectReason").toString()));
      }
      if ((jsonObj.get("remoteId") != null && !jsonObj.get("remoteId").isJsonNull()) && !jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("reportTransactionType") != null && !jsonObj.get("reportTransactionType").isJsonNull()) && !jsonObj.get("reportTransactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTransactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTransactionType").toString()));
      }
      if ((jsonObj.get("returnCode") != null && !jsonObj.get("returnCode").isJsonNull()) && !jsonObj.get("returnCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnCode").toString()));
      }
      if ((jsonObj.get("returnDescription") != null && !jsonObj.get("returnDescription").isJsonNull()) && !jsonObj.get("returnDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnDescription").toString()));
      }
      if ((jsonObj.get("returnFee") != null && !jsonObj.get("returnFee").isJsonNull()) && !jsonObj.get("returnFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnFee").toString()));
      }
      if ((jsonObj.get("returnFeeCurrency") != null && !jsonObj.get("returnFeeCurrency").isJsonNull()) && !jsonObj.get("returnFeeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnFeeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnFeeCurrency").toString()));
      }
      if ((jsonObj.get("returnFeeDescription") != null && !jsonObj.get("returnFeeDescription").isJsonNull()) && !jsonObj.get("returnFeeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnFeeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnFeeDescription").toString()));
      }
      if ((jsonObj.get("sourceAccount") != null && !jsonObj.get("sourceAccount").isJsonNull()) && !jsonObj.get("sourceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccount").toString()));
      }
      if ((jsonObj.get("transactionTime") != null && !jsonObj.get("transactionTime").isJsonNull()) && !jsonObj.get("transactionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayorAmlTransactionV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayorAmlTransactionV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayorAmlTransactionV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayorAmlTransactionV3.class));

       return (TypeAdapter<T>) new TypeAdapter<PayorAmlTransactionV3>() {
           @Override
           public void write(JsonWriter out, PayorAmlTransactionV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayorAmlTransactionV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayorAmlTransactionV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayorAmlTransactionV3
   * @throws IOException if the JSON string is invalid with respect to PayorAmlTransactionV3
   */
  public static PayorAmlTransactionV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayorAmlTransactionV3.class);
  }

  /**
   * Convert an instance of PayorAmlTransactionV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

