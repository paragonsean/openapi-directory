/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetFundingsResponse;
import org.openapitools.client.model.GetPaymentsForPayoutResponseV3;
import org.openapitools.client.model.GetPayoutStatistics;
import org.openapitools.client.model.GetPayoutsResponseV3;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.ListPaymentsResponseV3;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaymentDeltaResponseV1;
import org.openapitools.client.model.PaymentResponseV3;
import org.openapitools.client.model.PayorAmlTransactionV3;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentAuditServiceDeprecatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentAuditServiceDeprecatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentAuditServiceDeprecatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportTransactionsCSVV3
     * @param payorId The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.  (optional)
     * @param startDate Start date, inclusive. Format is YYYY-MM-DD (optional)
     * @param endDate End date, inclusive. Format is YYYY-MM-DD (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export Transactions response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call exportTransactionsCSVV3Call(UUID payorId, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/paymentaudit/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportTransactionsCSVV3ValidateBeforeCall(UUID payorId, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        return exportTransactionsCSVV3Call(payorId, startDate, endDate, _callback);

    }

    /**
     * V3 Export Transactions
     * Deprecated (use /v4/paymentaudit/transactions instead)
     * @param payorId The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.  (optional)
     * @param startDate Start date, inclusive. Format is YYYY-MM-DD (optional)
     * @param endDate End date, inclusive. Format is YYYY-MM-DD (optional)
     * @return PayorAmlTransactionV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export Transactions response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PayorAmlTransactionV3 exportTransactionsCSVV3(UUID payorId, LocalDate startDate, LocalDate endDate) throws ApiException {
        ApiResponse<PayorAmlTransactionV3> localVarResp = exportTransactionsCSVV3WithHttpInfo(payorId, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * V3 Export Transactions
     * Deprecated (use /v4/paymentaudit/transactions instead)
     * @param payorId The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.  (optional)
     * @param startDate Start date, inclusive. Format is YYYY-MM-DD (optional)
     * @param endDate End date, inclusive. Format is YYYY-MM-DD (optional)
     * @return ApiResponse&lt;PayorAmlTransactionV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export Transactions response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PayorAmlTransactionV3> exportTransactionsCSVV3WithHttpInfo(UUID payorId, LocalDate startDate, LocalDate endDate) throws ApiException {
        okhttp3.Call localVarCall = exportTransactionsCSVV3ValidateBeforeCall(payorId, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<PayorAmlTransactionV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V3 Export Transactions (asynchronously)
     * Deprecated (use /v4/paymentaudit/transactions instead)
     * @param payorId The Payor ID for whom you wish to run the report. For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.  (optional)
     * @param startDate Start date, inclusive. Format is YYYY-MM-DD (optional)
     * @param endDate End date, inclusive. Format is YYYY-MM-DD (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export Transactions response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call exportTransactionsCSVV3Async(UUID payorId, LocalDate startDate, LocalDate endDate, final ApiCallback<PayorAmlTransactionV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportTransactionsCSVV3ValidateBeforeCall(payorId, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<PayorAmlTransactionV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFundingsV1
     * @param payorId The account owner Payor ID (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields. Example: &#x60;&#x60;&#x60;?sort&#x3D;destinationCurrency:asc,destinationAmount:asc&#x60;&#x60;&#x60; Default is no sort. The supported sort fields are: dateTime and amount.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Fundings normal response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getFundingsV1Call(UUID payorId, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/paymentaudit/fundings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFundingsV1ValidateBeforeCall(UUID payorId, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling getFundingsV1(Async)");
        }

        return getFundingsV1Call(payorId, page, pageSize, sort, _callback);

    }

    /**
     * V1 Get Fundings for Payor
     * Deprecated (use /v4/paymentaudit/fundings)
     * @param payorId The account owner Payor ID (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields. Example: &#x60;&#x60;&#x60;?sort&#x3D;destinationCurrency:asc,destinationAmount:asc&#x60;&#x60;&#x60; Default is no sort. The supported sort fields are: dateTime and amount.  (optional)
     * @return GetFundingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Fundings normal response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetFundingsResponse getFundingsV1(UUID payorId, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<GetFundingsResponse> localVarResp = getFundingsV1WithHttpInfo(payorId, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * V1 Get Fundings for Payor
     * Deprecated (use /v4/paymentaudit/fundings)
     * @param payorId The account owner Payor ID (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields. Example: &#x60;&#x60;&#x60;?sort&#x3D;destinationCurrency:asc,destinationAmount:asc&#x60;&#x60;&#x60; Default is no sort. The supported sort fields are: dateTime and amount.  (optional)
     * @return ApiResponse&lt;GetFundingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Fundings normal response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetFundingsResponse> getFundingsV1WithHttpInfo(UUID payorId, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFundingsV1ValidateBeforeCall(payorId, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<GetFundingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V1 Get Fundings for Payor (asynchronously)
     * Deprecated (use /v4/paymentaudit/fundings)
     * @param payorId The account owner Payor ID (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields. Example: &#x60;&#x60;&#x60;?sort&#x3D;destinationCurrency:asc,destinationAmount:asc&#x60;&#x60;&#x60; Default is no sort. The supported sort fields are: dateTime and amount.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Fundings normal response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getFundingsV1Async(UUID payorId, Integer page, Integer pageSize, String sort, final ApiCallback<GetFundingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFundingsV1ValidateBeforeCall(payorId, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<GetFundingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentDetailsV3
     * @param paymentId Payment Id (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPaymentDetailsV3Call(UUID paymentId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/paymentaudit/payments/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentDetailsV3ValidateBeforeCall(UUID paymentId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentDetailsV3(Async)");
        }

        return getPaymentDetailsV3Call(paymentId, sensitive, _callback);

    }

    /**
     * V3 Get Payment
     * Deprecated (use /v4/paymentaudit/payments/&lt;paymentId&gt; instead)
     * @param paymentId Payment Id (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return PaymentResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PaymentResponseV3 getPaymentDetailsV3(UUID paymentId, Boolean sensitive) throws ApiException {
        ApiResponse<PaymentResponseV3> localVarResp = getPaymentDetailsV3WithHttpInfo(paymentId, sensitive);
        return localVarResp.getData();
    }

    /**
     * V3 Get Payment
     * Deprecated (use /v4/paymentaudit/payments/&lt;paymentId&gt; instead)
     * @param paymentId Payment Id (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ApiResponse&lt;PaymentResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PaymentResponseV3> getPaymentDetailsV3WithHttpInfo(UUID paymentId, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getPaymentDetailsV3ValidateBeforeCall(paymentId, sensitive, null);
        Type localVarReturnType = new TypeToken<PaymentResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V3 Get Payment (asynchronously)
     * Deprecated (use /v4/paymentaudit/payments/&lt;paymentId&gt; instead)
     * @param paymentId Payment Id (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPaymentDetailsV3Async(UUID paymentId, Boolean sensitive, final ApiCallback<PaymentResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentDetailsV3ValidateBeforeCall(paymentId, sensitive, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentsForPayoutPAV3
     * @param payoutId The id (UUID) of the payout. (required)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort &lt;p&gt;List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId&lt;/p&gt; &lt;p&gt;The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status&lt;/p&gt;  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, data found okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPaymentsForPayoutPAV3Call(UUID payoutId, String remoteId, String status, Integer sourceAmountFrom, Integer sourceAmountTo, Integer paymentAmountFrom, Integer paymentAmountTo, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/paymentaudit/payouts/{payoutId}"
            .replace("{" + "payoutId" + "}", localVarApiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (remoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remoteId", remoteId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sourceAmountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmountFrom", sourceAmountFrom));
        }

        if (sourceAmountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmountTo", sourceAmountTo));
        }

        if (paymentAmountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentAmountFrom", paymentAmountFrom));
        }

        if (paymentAmountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentAmountTo", paymentAmountTo));
        }

        if (submittedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateFrom", submittedDateFrom));
        }

        if (submittedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateTo", submittedDateTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsForPayoutPAV3ValidateBeforeCall(UUID payoutId, String remoteId, String status, Integer sourceAmountFrom, Integer sourceAmountTo, Integer paymentAmountFrom, Integer paymentAmountTo, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPaymentsForPayoutPAV3(Async)");
        }

        return getPaymentsForPayoutPAV3Call(payoutId, remoteId, status, sourceAmountFrom, sourceAmountTo, paymentAmountFrom, paymentAmountTo, submittedDateFrom, submittedDateTo, page, pageSize, sort, sensitive, _callback);

    }

    /**
     * V3 Get Payments for Payout
     * Deprecated (use /v4/paymentaudit/payouts/&lt;payoutId&gt; instead)
     * @param payoutId The id (UUID) of the payout. (required)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort &lt;p&gt;List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId&lt;/p&gt; &lt;p&gt;The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status&lt;/p&gt;  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return GetPaymentsForPayoutResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, data found okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetPaymentsForPayoutResponseV3 getPaymentsForPayoutPAV3(UUID payoutId, String remoteId, String status, Integer sourceAmountFrom, Integer sourceAmountTo, Integer paymentAmountFrom, Integer paymentAmountTo, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        ApiResponse<GetPaymentsForPayoutResponseV3> localVarResp = getPaymentsForPayoutPAV3WithHttpInfo(payoutId, remoteId, status, sourceAmountFrom, sourceAmountTo, paymentAmountFrom, paymentAmountTo, submittedDateFrom, submittedDateTo, page, pageSize, sort, sensitive);
        return localVarResp.getData();
    }

    /**
     * V3 Get Payments for Payout
     * Deprecated (use /v4/paymentaudit/payouts/&lt;payoutId&gt; instead)
     * @param payoutId The id (UUID) of the payout. (required)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort &lt;p&gt;List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId&lt;/p&gt; &lt;p&gt;The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status&lt;/p&gt;  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ApiResponse&lt;GetPaymentsForPayoutResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, data found okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetPaymentsForPayoutResponseV3> getPaymentsForPayoutPAV3WithHttpInfo(UUID payoutId, String remoteId, String status, Integer sourceAmountFrom, Integer sourceAmountTo, Integer paymentAmountFrom, Integer paymentAmountTo, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsForPayoutPAV3ValidateBeforeCall(payoutId, remoteId, status, sourceAmountFrom, sourceAmountTo, paymentAmountFrom, paymentAmountTo, submittedDateFrom, submittedDateTo, page, pageSize, sort, sensitive, null);
        Type localVarReturnType = new TypeToken<GetPaymentsForPayoutResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V3 Get Payments for Payout (asynchronously)
     * Deprecated (use /v4/paymentaudit/payouts/&lt;payoutId&gt; instead)
     * @param payoutId The id (UUID) of the payout. (required)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort &lt;p&gt;List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId&lt;/p&gt; &lt;p&gt;The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status&lt;/p&gt;  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response, data found okay </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPaymentsForPayoutPAV3Async(UUID payoutId, String remoteId, String status, Integer sourceAmountFrom, Integer sourceAmountTo, Integer paymentAmountFrom, Integer paymentAmountTo, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback<GetPaymentsForPayoutResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsForPayoutPAV3ValidateBeforeCall(payoutId, remoteId, status, sourceAmountFrom, sourceAmountTo, paymentAmountFrom, paymentAmountTo, submittedDateFrom, submittedDateTo, page, pageSize, sort, sensitive, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentsForPayoutResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayoutStatsV1
     * @param payorId The account owner Payor ID. Required for external users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payout Statistics response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayoutStatsV1Call(UUID payorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/paymentaudit/payoutStatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutStatsV1ValidateBeforeCall(UUID payorId, final ApiCallback _callback) throws ApiException {
        return getPayoutStatsV1Call(payorId, _callback);

    }

    /**
     * V1 Get Payout Statistics
     * Deprecated (Use /v4/paymentaudit/payoutStatistics)
     * @param payorId The account owner Payor ID. Required for external users. (optional)
     * @return GetPayoutStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payout Statistics response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetPayoutStatistics getPayoutStatsV1(UUID payorId) throws ApiException {
        ApiResponse<GetPayoutStatistics> localVarResp = getPayoutStatsV1WithHttpInfo(payorId);
        return localVarResp.getData();
    }

    /**
     * V1 Get Payout Statistics
     * Deprecated (Use /v4/paymentaudit/payoutStatistics)
     * @param payorId The account owner Payor ID. Required for external users. (optional)
     * @return ApiResponse&lt;GetPayoutStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payout Statistics response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetPayoutStatistics> getPayoutStatsV1WithHttpInfo(UUID payorId) throws ApiException {
        okhttp3.Call localVarCall = getPayoutStatsV1ValidateBeforeCall(payorId, null);
        Type localVarReturnType = new TypeToken<GetPayoutStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V1 Get Payout Statistics (asynchronously)
     * Deprecated (Use /v4/paymentaudit/payoutStatistics)
     * @param payorId The account owner Payor ID. Required for external users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payout Statistics response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayoutStatsV1Async(UUID payorId, final ApiCallback<GetPayoutStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutStatsV1ValidateBeforeCall(payorId, _callback);
        Type localVarReturnType = new TypeToken<GetPayoutStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayoutsForPayorV3
     * @param payorId The account owner Payor ID (required)
     * @param payoutMemo Payout Memo filter - case insensitive sub-string match (optional)
     * @param status Payout Status (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payor data found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayoutsForPayorV3Call(UUID payorId, String payoutMemo, String status, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/paymentaudit/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (payoutMemo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payoutMemo", payoutMemo));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (submittedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateFrom", submittedDateFrom));
        }

        if (submittedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateTo", submittedDateTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutsForPayorV3ValidateBeforeCall(UUID payorId, String payoutMemo, String status, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling getPayoutsForPayorV3(Async)");
        }

        return getPayoutsForPayorV3Call(payorId, payoutMemo, status, submittedDateFrom, submittedDateTo, page, pageSize, sort, _callback);

    }

    /**
     * V3 Get Payouts for Payor
     * Deprecated (use /v4/paymentaudit/payouts instead)
     * @param payorId The account owner Payor ID (required)
     * @param payoutMemo Payout Memo filter - case insensitive sub-string match (optional)
     * @param status Payout Status (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status.  (optional)
     * @return GetPayoutsResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payor data found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetPayoutsResponseV3 getPayoutsForPayorV3(UUID payorId, String payoutMemo, String status, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<GetPayoutsResponseV3> localVarResp = getPayoutsForPayorV3WithHttpInfo(payorId, payoutMemo, status, submittedDateFrom, submittedDateTo, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * V3 Get Payouts for Payor
     * Deprecated (use /v4/paymentaudit/payouts instead)
     * @param payorId The account owner Payor ID (required)
     * @param payoutMemo Payout Memo filter - case insensitive sub-string match (optional)
     * @param status Payout Status (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status.  (optional)
     * @return ApiResponse&lt;GetPayoutsResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payor data found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetPayoutsResponseV3> getPayoutsForPayorV3WithHttpInfo(UUID payorId, String payoutMemo, String status, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = getPayoutsForPayorV3ValidateBeforeCall(payorId, payoutMemo, status, submittedDateFrom, submittedDateTo, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<GetPayoutsResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V3 Get Payouts for Payor (asynchronously)
     * Deprecated (use /v4/paymentaudit/payouts instead)
     * @param payorId The account owner Payor ID (required)
     * @param payoutMemo Payout Memo filter - case insensitive sub-string match (optional)
     * @param status Payout Status (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,instructedDateTime:asc,status:asc) Default is submittedDateTime:asc The supported sort fields are: submittedDateTime, instructedDateTime, status.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payor data found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayoutsForPayorV3Async(UUID payorId, String payoutMemo, String status, LocalDate submittedDateFrom, LocalDate submittedDateTo, Integer page, Integer pageSize, String sort, final ApiCallback<GetPayoutsResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutsForPayorV3ValidateBeforeCall(payorId, payoutMemo, status, submittedDateFrom, submittedDateTo, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<GetPayoutsResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPaymentChanges
     * @param payorId The Payor ID to find associated Payments (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payment Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPaymentChangesCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/deltas/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentChangesValidateBeforeCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listPaymentChanges(Async)");
        }

        // verify the required parameter 'updatedSince' is set
        if (updatedSince == null) {
            throw new ApiException("Missing the required parameter 'updatedSince' when calling listPaymentChanges(Async)");
        }

        return listPaymentChangesCall(payorId, updatedSince, page, pageSize, _callback);

    }

    /**
     * V1 List Payment Changes
     * Deprecated (use /v4/payments/deltas instead)
     * @param payorId The Payor ID to find associated Payments (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 100)
     * @return PaymentDeltaResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payment Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PaymentDeltaResponseV1 listPaymentChanges(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<PaymentDeltaResponseV1> localVarResp = listPaymentChangesWithHttpInfo(payorId, updatedSince, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * V1 List Payment Changes
     * Deprecated (use /v4/payments/deltas instead)
     * @param payorId The Payor ID to find associated Payments (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 100)
     * @return ApiResponse&lt;PaymentDeltaResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payment Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PaymentDeltaResponseV1> listPaymentChangesWithHttpInfo(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPaymentChangesValidateBeforeCall(payorId, updatedSince, page, pageSize, null);
        Type localVarReturnType = new TypeToken<PaymentDeltaResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V1 List Payment Changes (asynchronously)
     * Deprecated (use /v4/payments/deltas instead)
     * @param payorId The Payor ID to find associated Payments (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payment Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPaymentChangesAsync(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback<PaymentDeltaResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentChangesValidateBeforeCall(payorId, updatedSince, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaymentDeltaResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPaymentsAuditV3
     * @param payeeId The UUID of the payee. (optional)
     * @param payorId The account owner Payor Id. Required for external users. (optional)
     * @param payorName The payor’s name. This filters via a case insensitive substring match. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAccountName The source account name filter. This filters via a case insensitive substring match. (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param sourceCurrency The source currency filter. Filters based on an exact match on the currency. (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param paymentCurrency The payment currency filter. Filters based on an exact match on the currency. (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param paymentMemo The payment memo filter. This filters via a case insensitive substring match. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPaymentsAuditV3Call(UUID payeeId, UUID payorId, String payorName, String remoteId, String status, String sourceAccountName, Integer sourceAmountFrom, Integer sourceAmountTo, String sourceCurrency, Integer paymentAmountFrom, Integer paymentAmountTo, String paymentCurrency, LocalDate submittedDateFrom, LocalDate submittedDateTo, String paymentMemo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/paymentaudit/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeId", payeeId));
        }

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (payorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorName", payorName));
        }

        if (remoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remoteId", remoteId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sourceAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAccountName", sourceAccountName));
        }

        if (sourceAmountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmountFrom", sourceAmountFrom));
        }

        if (sourceAmountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmountTo", sourceAmountTo));
        }

        if (sourceCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceCurrency", sourceCurrency));
        }

        if (paymentAmountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentAmountFrom", paymentAmountFrom));
        }

        if (paymentAmountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentAmountTo", paymentAmountTo));
        }

        if (paymentCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentCurrency", paymentCurrency));
        }

        if (submittedDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateFrom", submittedDateFrom));
        }

        if (submittedDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submittedDateTo", submittedDateTo));
        }

        if (paymentMemo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMemo", paymentMemo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentsAuditV3ValidateBeforeCall(UUID payeeId, UUID payorId, String payorName, String remoteId, String status, String sourceAccountName, Integer sourceAmountFrom, Integer sourceAmountTo, String sourceCurrency, Integer paymentAmountFrom, Integer paymentAmountTo, String paymentCurrency, LocalDate submittedDateFrom, LocalDate submittedDateTo, String paymentMemo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        return listPaymentsAuditV3Call(payeeId, payorId, payorName, remoteId, status, sourceAccountName, sourceAmountFrom, sourceAmountTo, sourceCurrency, paymentAmountFrom, paymentAmountTo, paymentCurrency, submittedDateFrom, submittedDateTo, paymentMemo, page, pageSize, sort, sensitive, _callback);

    }

    /**
     * V3 Get List of Payments
     * Deprecated (use /v4/paymentaudit/payments instead)
     * @param payeeId The UUID of the payee. (optional)
     * @param payorId The account owner Payor Id. Required for external users. (optional)
     * @param payorName The payor’s name. This filters via a case insensitive substring match. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAccountName The source account name filter. This filters via a case insensitive substring match. (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param sourceCurrency The source currency filter. Filters based on an exact match on the currency. (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param paymentCurrency The payment currency filter. Filters based on an exact match on the currency. (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param paymentMemo The payment memo filter. This filters via a case insensitive substring match. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ListPaymentsResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListPaymentsResponseV3 listPaymentsAuditV3(UUID payeeId, UUID payorId, String payorName, String remoteId, String status, String sourceAccountName, Integer sourceAmountFrom, Integer sourceAmountTo, String sourceCurrency, Integer paymentAmountFrom, Integer paymentAmountTo, String paymentCurrency, LocalDate submittedDateFrom, LocalDate submittedDateTo, String paymentMemo, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        ApiResponse<ListPaymentsResponseV3> localVarResp = listPaymentsAuditV3WithHttpInfo(payeeId, payorId, payorName, remoteId, status, sourceAccountName, sourceAmountFrom, sourceAmountTo, sourceCurrency, paymentAmountFrom, paymentAmountTo, paymentCurrency, submittedDateFrom, submittedDateTo, paymentMemo, page, pageSize, sort, sensitive);
        return localVarResp.getData();
    }

    /**
     * V3 Get List of Payments
     * Deprecated (use /v4/paymentaudit/payments instead)
     * @param payeeId The UUID of the payee. (optional)
     * @param payorId The account owner Payor Id. Required for external users. (optional)
     * @param payorName The payor’s name. This filters via a case insensitive substring match. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAccountName The source account name filter. This filters via a case insensitive substring match. (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param sourceCurrency The source currency filter. Filters based on an exact match on the currency. (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param paymentCurrency The payment currency filter. Filters based on an exact match on the currency. (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param paymentMemo The payment memo filter. This filters via a case insensitive substring match. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ApiResponse&lt;ListPaymentsResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListPaymentsResponseV3> listPaymentsAuditV3WithHttpInfo(UUID payeeId, UUID payorId, String payorName, String remoteId, String status, String sourceAccountName, Integer sourceAmountFrom, Integer sourceAmountTo, String sourceCurrency, Integer paymentAmountFrom, Integer paymentAmountTo, String paymentCurrency, LocalDate submittedDateFrom, LocalDate submittedDateTo, String paymentMemo, Integer page, Integer pageSize, String sort, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = listPaymentsAuditV3ValidateBeforeCall(payeeId, payorId, payorName, remoteId, status, sourceAccountName, sourceAmountFrom, sourceAmountTo, sourceCurrency, paymentAmountFrom, paymentAmountTo, paymentCurrency, submittedDateFrom, submittedDateTo, paymentMemo, page, pageSize, sort, sensitive, null);
        Type localVarReturnType = new TypeToken<ListPaymentsResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * V3 Get List of Payments (asynchronously)
     * Deprecated (use /v4/paymentaudit/payments instead)
     * @param payeeId The UUID of the payee. (optional)
     * @param payorId The account owner Payor Id. Required for external users. (optional)
     * @param payorName The payor’s name. This filters via a case insensitive substring match. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param status Payment Status (optional)
     * @param sourceAccountName The source account name filter. This filters via a case insensitive substring match. (optional)
     * @param sourceAmountFrom The source amount from range filter. Filters for sourceAmount &gt;&#x3D; sourceAmountFrom (optional)
     * @param sourceAmountTo The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo (optional)
     * @param sourceCurrency The source currency filter. Filters based on an exact match on the currency. (optional)
     * @param paymentAmountFrom The payment amount from range filter. Filters for paymentAmount &gt;&#x3D; paymentAmountFrom (optional)
     * @param paymentAmountTo The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo (optional)
     * @param paymentCurrency The payment currency filter. Filters based on an exact match on the currency. (optional)
     * @param submittedDateFrom The submitted date from range filter. Format is yyyy-MM-dd. (optional)
     * @param submittedDateTo The submitted date to range filter. Format is yyyy-MM-dd. (optional)
     * @param paymentMemo The payment memo filter. This filters via a case insensitive substring match. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize The number of results to return in a page (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;submittedDateTime:asc,status:asc). Default is sort by remoteId The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency, routingNumber, accountNumber, remoteId, submittedDateTime and status  (optional)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPaymentsAuditV3Async(UUID payeeId, UUID payorId, String payorName, String remoteId, String status, String sourceAccountName, Integer sourceAmountFrom, Integer sourceAmountTo, String sourceCurrency, Integer paymentAmountFrom, Integer paymentAmountTo, String paymentCurrency, LocalDate submittedDateFrom, LocalDate submittedDateTo, String paymentMemo, Integer page, Integer pageSize, String sort, Boolean sensitive, final ApiCallback<ListPaymentsResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentsAuditV3ValidateBeforeCall(payeeId, payorId, payorName, remoteId, status, sourceAccountName, sourceAmountFrom, sourceAmountTo, sourceCurrency, paymentAmountFrom, paymentAmountTo, paymentCurrency, submittedDateFrom, submittedDateTo, paymentMemo, page, pageSize, sort, sensitive, _callback);
        Type localVarReturnType = new TypeToken<ListPaymentsResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
