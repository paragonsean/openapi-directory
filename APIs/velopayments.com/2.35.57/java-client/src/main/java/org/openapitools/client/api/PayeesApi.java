/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse409;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PagedPayeeResponseV3;
import org.openapitools.client.model.PagedPayeeResponseV4;
import org.openapitools.client.model.PayeeDeltaResponseV3;
import org.openapitools.client.model.PayeeDeltaResponseV4;
import org.openapitools.client.model.PayeeDetailResponseV3;
import org.openapitools.client.model.PayeeDetailResponseV4;
import java.util.UUID;
import org.openapitools.client.model.UpdatePayeeDetailsRequestV3;
import org.openapitools.client.model.UpdatePayeeDetailsRequestV4;
import org.openapitools.client.model.UpdateRemoteIdRequestV3;
import org.openapitools.client.model.UpdateRemoteIdRequestV4;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayeesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayeesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayeesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePayeeByIdV3
     * @param payeeId The UUID of the payee. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePayeeByIdV3Call(UUID payeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payees/{payeeId}"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayeeByIdV3ValidateBeforeCall(UUID payeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling deletePayeeByIdV3(Async)");
        }

        return deletePayeeByIdV3Call(payeeId, _callback);

    }

    /**
     * Delete Payee by Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deletePayeeByIdV3(UUID payeeId) throws ApiException {
        deletePayeeByIdV3WithHttpInfo(payeeId);
    }

    /**
     * Delete Payee by Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deletePayeeByIdV3WithHttpInfo(UUID payeeId) throws ApiException {
        okhttp3.Call localVarCall = deletePayeeByIdV3ValidateBeforeCall(payeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payee by Id (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePayeeByIdV3Async(UUID payeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayeeByIdV3ValidateBeforeCall(payeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayeeByIdV4
     * @param payeeId The UUID of the payee. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayeeByIdV4Call(UUID payeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/payees/{payeeId}"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayeeByIdV4ValidateBeforeCall(UUID payeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling deletePayeeByIdV4(Async)");
        }

        return deletePayeeByIdV4Call(payeeId, _callback);

    }

    /**
     * Delete Payee by Id
     * &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayeeByIdV4(UUID payeeId) throws ApiException {
        deletePayeeByIdV4WithHttpInfo(payeeId);
    }

    /**
     * Delete Payee by Id
     * &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayeeByIdV4WithHttpInfo(UUID payeeId) throws ApiException {
        okhttp3.Call localVarCall = deletePayeeByIdV4ValidateBeforeCall(payeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payee by Id (asynchronously)
     * &lt;p&gt;This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:&lt;/p&gt; &lt;p&gt;* Payee ID is not found&lt;/p&gt; &lt;p&gt;* If Payee has not been on-boarded&lt;/p&gt; &lt;p&gt;* If Payee is in grace period&lt;/p&gt; &lt;p&gt;* If Payee has existing payments&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. Payee Id accepted for deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Payee Id failed validation for deletion. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Id not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayeeByIdV4Async(UUID payeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayeeByIdV4ValidateBeforeCall(payeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayeeByIdV3
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayeeByIdV3Call(UUID payeeId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payees/{payeeId}"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayeeByIdV3ValidateBeforeCall(UUID payeeId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling getPayeeByIdV3(Async)");
        }

        return getPayeeByIdV3Call(payeeId, sensitive, _callback);

    }

    /**
     * Get Payee by Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get Payee by Id&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return PayeeDetailResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PayeeDetailResponseV3 getPayeeByIdV3(UUID payeeId, Boolean sensitive) throws ApiException {
        ApiResponse<PayeeDetailResponseV3> localVarResp = getPayeeByIdV3WithHttpInfo(payeeId, sensitive);
        return localVarResp.getData();
    }

    /**
     * Get Payee by Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get Payee by Id&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ApiResponse&lt;PayeeDetailResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PayeeDetailResponseV3> getPayeeByIdV3WithHttpInfo(UUID payeeId, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getPayeeByIdV3ValidateBeforeCall(payeeId, sensitive, null);
        Type localVarReturnType = new TypeToken<PayeeDetailResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payee by Id (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get Payee by Id&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayeeByIdV3Async(UUID payeeId, Boolean sensitive, final ApiCallback<PayeeDetailResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayeeByIdV3ValidateBeforeCall(payeeId, sensitive, _callback);
        Type localVarReturnType = new TypeToken<PayeeDetailResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayeeByIdV4
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayeeByIdV4Call(UUID payeeId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/payees/{payeeId}"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayeeByIdV4ValidateBeforeCall(UUID payeeId, Boolean sensitive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling getPayeeByIdV4(Async)");
        }

        return getPayeeByIdV4Call(payeeId, sensitive, _callback);

    }

    /**
     * Get Payee by Id
     * Get Payee by Id
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return PayeeDetailResponseV4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     */
    public PayeeDetailResponseV4 getPayeeByIdV4(UUID payeeId, Boolean sensitive) throws ApiException {
        ApiResponse<PayeeDetailResponseV4> localVarResp = getPayeeByIdV4WithHttpInfo(payeeId, sensitive);
        return localVarResp.getData();
    }

    /**
     * Get Payee by Id
     * Get Payee by Id
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @return ApiResponse&lt;PayeeDetailResponseV4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayeeDetailResponseV4> getPayeeByIdV4WithHttpInfo(UUID payeeId, Boolean sensitive) throws ApiException {
        okhttp3.Call localVarCall = getPayeeByIdV4ValidateBeforeCall(payeeId, sensitive, null);
        Type localVarReturnType = new TypeToken<PayeeDetailResponseV4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payee by Id (asynchronously)
     * Get Payee by Id
     * @param payeeId The UUID of the payee. (required)
     * @param sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response, request completed okay </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayeeByIdV4Async(UUID payeeId, Boolean sensitive, final ApiCallback<PayeeDetailResponseV4> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayeeByIdV4ValidateBeforeCall(payeeId, sensitive, _callback);
        Type localVarReturnType = new TypeToken<PayeeDetailResponseV4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPayeeChangesV3
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPayeeChangesV3Call(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payees/deltas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayeeChangesV3ValidateBeforeCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listPayeeChangesV3(Async)");
        }

        // verify the required parameter 'updatedSince' is set
        if (updatedSince == null) {
            throw new ApiException("Missing the required parameter 'updatedSince' when calling listPayeeChangesV3(Async)");
        }

        return listPayeeChangesV3Call(payorId, updatedSince, page, pageSize, _callback);

    }

    /**
     * List Payee Changes
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get a paginated response listing payee changes.&lt;/p&gt; 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @return PayeeDeltaResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PayeeDeltaResponseV3 listPayeeChangesV3(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<PayeeDeltaResponseV3> localVarResp = listPayeeChangesV3WithHttpInfo(payorId, updatedSince, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List Payee Changes
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get a paginated response listing payee changes.&lt;/p&gt; 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @return ApiResponse&lt;PayeeDeltaResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PayeeDeltaResponseV3> listPayeeChangesV3WithHttpInfo(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPayeeChangesV3ValidateBeforeCall(payorId, updatedSince, page, pageSize, null);
        Type localVarReturnType = new TypeToken<PayeeDeltaResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payee Changes (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Get a paginated response listing payee changes.&lt;/p&gt; 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPayeeChangesV3Async(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback<PayeeDeltaResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayeeChangesV3ValidateBeforeCall(payorId, updatedSince, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PayeeDeltaResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPayeeChangesV4
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPayeeChangesV4Call(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/payees/deltas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayeeChangesV4ValidateBeforeCall(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listPayeeChangesV4(Async)");
        }

        // verify the required parameter 'updatedSince' is set
        if (updatedSince == null) {
            throw new ApiException("Missing the required parameter 'updatedSince' when calling listPayeeChangesV4(Async)");
        }

        return listPayeeChangesV4Call(payorId, updatedSince, page, pageSize, _callback);

    }

    /**
     * List Payee Changes
     * Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields: - dbaName - displayName - email - onboardedStatus - payeeCountry - payeeId - remoteId 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @return PayeeDeltaResponseV4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PayeeDeltaResponseV4 listPayeeChangesV4(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<PayeeDeltaResponseV4> localVarResp = listPayeeChangesV4WithHttpInfo(payorId, updatedSince, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List Payee Changes
     * Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields: - dbaName - displayName - email - onboardedStatus - payeeCountry - payeeId - remoteId 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @return ApiResponse&lt;PayeeDeltaResponseV4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayeeDeltaResponseV4> listPayeeChangesV4WithHttpInfo(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPayeeChangesV4ValidateBeforeCall(payorId, updatedSince, page, pageSize, null);
        Type localVarReturnType = new TypeToken<PayeeDeltaResponseV4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payee Changes (asynchronously)
     * Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields: - dbaName - displayName - email - onboardedStatus - payeeCountry - payeeId - remoteId 
     * @param payorId The Payor ID to find associated Payees (required)
     * @param updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm (required)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 100. Max allowable is 1000. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee Changes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPayeeChangesV4Async(UUID payorId, OffsetDateTime updatedSince, Integer page, Integer pageSize, final ApiCallback<PayeeDeltaResponseV4> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayeeChangesV4ValidateBeforeCall(payorId, updatedSince, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PayeeDeltaResponseV4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPayeesV3
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPayeesV3Call(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/payees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (watchlistStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("watchlistStatus", watchlistStatus));
        }

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disabled", disabled));
        }

        if (onboardedStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onboardedStatus", onboardedStatus));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayName", displayName));
        }

        if (remoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remoteId", remoteId));
        }

        if (payeeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeType", payeeType));
        }

        if (payeeCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeCountry", payeeCountry));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayeesV3ValidateBeforeCall(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listPayeesV3(Async)");
        }

        return listPayeesV3Call(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, page, pageSize, sort, _callback);

    }

    /**
     * List Payees
     * &lt;p&gt;Use v4 instead&lt;/p&gt; Get a paginated response listing the payees for a payor. 
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @return PagedPayeeResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PagedPayeeResponseV3 listPayeesV3(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<PagedPayeeResponseV3> localVarResp = listPayeesV3WithHttpInfo(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * List Payees
     * &lt;p&gt;Use v4 instead&lt;/p&gt; Get a paginated response listing the payees for a payor. 
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @return ApiResponse&lt;PagedPayeeResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PagedPayeeResponseV3> listPayeesV3WithHttpInfo(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = listPayeesV3ValidateBeforeCall(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<PagedPayeeResponseV3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payees (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; Get a paginated response listing the payees for a payor. 
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPayeesV3Async(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, Integer page, Integer pageSize, String sort, final ApiCallback<PagedPayeeResponseV3> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayeesV3ValidateBeforeCall(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<PagedPayeeResponseV3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPayeesV4
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param ofacStatus The ofacStatus of the payees. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPayeesV4Call(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, String ofacStatus, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/payees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payorId", payorId));
        }

        if (watchlistStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("watchlistStatus", watchlistStatus));
        }

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disabled", disabled));
        }

        if (onboardedStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onboardedStatus", onboardedStatus));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayName", displayName));
        }

        if (remoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remoteId", remoteId));
        }

        if (payeeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeType", payeeType));
        }

        if (payeeCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeCountry", payeeCountry));
        }

        if (ofacStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofacStatus", ofacStatus));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayeesV4ValidateBeforeCall(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, String ofacStatus, Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling listPayeesV4(Async)");
        }

        return listPayeesV4Call(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, ofacStatus, page, pageSize, sort, _callback);

    }

    /**
     * List Payees
     * Get a paginated response listing the payees for a payor.
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param ofacStatus The ofacStatus of the payees. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @return PagedPayeeResponseV4
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public PagedPayeeResponseV4 listPayeesV4(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, String ofacStatus, Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<PagedPayeeResponseV4> localVarResp = listPayeesV4WithHttpInfo(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, ofacStatus, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * List Payees
     * Get a paginated response listing the payees for a payor.
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param ofacStatus The ofacStatus of the payees. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @return ApiResponse&lt;PagedPayeeResponseV4&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedPayeeResponseV4> listPayeesV4WithHttpInfo(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, String ofacStatus, Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = listPayeesV4ValidateBeforeCall(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, ofacStatus, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<PagedPayeeResponseV4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payees (asynchronously)
     * Get a paginated response listing the payees for a payor.
     * @param payorId The account owner Payor ID (required)
     * @param watchlistStatus The watchlistStatus of the payees. (optional)
     * @param disabled Payee disabled (optional)
     * @param onboardedStatus The onboarded status of the payees. (optional)
     * @param email Email address (optional)
     * @param displayName The display name of the payees. (optional)
     * @param remoteId The remote id of the payees. (optional)
     * @param payeeType The onboarded status of the payees. (optional)
     * @param payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
     * @param ofacStatus The ofacStatus of the payees. (optional)
     * @param page Page number. Default is 1. (optional, default to 1)
     * @param pageSize Page size. Default is 25. Max allowable is 100. (optional, default to 25)
     * @param sort List of sort fields (e.g. ?sort&#x3D;onboardedStatus:asc,name:asc) Default is name:asc &#39;name&#39; is treated as company name for companies - last name + &#39;,&#39; + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional, default to displayName:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of Payee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPayeesV4Async(UUID payorId, String watchlistStatus, Boolean disabled, String onboardedStatus, String email, String displayName, String remoteId, String payeeType, String payeeCountry, String ofacStatus, Integer page, Integer pageSize, String sort, final ApiCallback<PagedPayeeResponseV4> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayeesV4ValidateBeforeCall(payorId, watchlistStatus, disabled, onboardedStatus, email, displayName, remoteId, payeeType, payeeCountry, ofacStatus, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<PagedPayeeResponseV4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payeeDetailsUpdateV3
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV3 Request to update payee details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call payeeDetailsUpdateV3Call(UUID payeeId, UpdatePayeeDetailsRequestV3 updatePayeeDetailsRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePayeeDetailsRequestV3;

        // create path and map variables
        String localVarPath = "/v3/payees/{payeeId}/payeeDetailsUpdate"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call payeeDetailsUpdateV3ValidateBeforeCall(UUID payeeId, UpdatePayeeDetailsRequestV3 updatePayeeDetailsRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling payeeDetailsUpdateV3(Async)");
        }

        // verify the required parameter 'updatePayeeDetailsRequestV3' is set
        if (updatePayeeDetailsRequestV3 == null) {
            throw new ApiException("Missing the required parameter 'updatePayeeDetailsRequestV3' when calling payeeDetailsUpdateV3(Async)");
        }

        return payeeDetailsUpdateV3Call(payeeId, updatePayeeDetailsRequestV3, _callback);

    }

    /**
     * Update Payee Details
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update payee details for the given Payee Id.&lt;p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV3 Request to update payee details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void payeeDetailsUpdateV3(UUID payeeId, UpdatePayeeDetailsRequestV3 updatePayeeDetailsRequestV3) throws ApiException {
        payeeDetailsUpdateV3WithHttpInfo(payeeId, updatePayeeDetailsRequestV3);
    }

    /**
     * Update Payee Details
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update payee details for the given Payee Id.&lt;p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV3 Request to update payee details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> payeeDetailsUpdateV3WithHttpInfo(UUID payeeId, UpdatePayeeDetailsRequestV3 updatePayeeDetailsRequestV3) throws ApiException {
        okhttp3.Call localVarCall = payeeDetailsUpdateV3ValidateBeforeCall(payeeId, updatePayeeDetailsRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payee Details (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update payee details for the given Payee Id.&lt;p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV3 Request to update payee details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call payeeDetailsUpdateV3Async(UUID payeeId, UpdatePayeeDetailsRequestV3 updatePayeeDetailsRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = payeeDetailsUpdateV3ValidateBeforeCall(payeeId, updatePayeeDetailsRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for payeeDetailsUpdateV4
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV4 Request to update payee details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payeeDetailsUpdateV4Call(UUID payeeId, UpdatePayeeDetailsRequestV4 updatePayeeDetailsRequestV4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePayeeDetailsRequestV4;

        // create path and map variables
        String localVarPath = "/v4/payees/{payeeId}/payeeDetailsUpdate"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payeeDetailsUpdateV4ValidateBeforeCall(UUID payeeId, UpdatePayeeDetailsRequestV4 updatePayeeDetailsRequestV4, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling payeeDetailsUpdateV4(Async)");
        }

        // verify the required parameter 'updatePayeeDetailsRequestV4' is set
        if (updatePayeeDetailsRequestV4 == null) {
            throw new ApiException("Missing the required parameter 'updatePayeeDetailsRequestV4' when calling payeeDetailsUpdateV4(Async)");
        }

        return payeeDetailsUpdateV4Call(payeeId, updatePayeeDetailsRequestV4, _callback);

    }

    /**
     * Update Payee Details
     * &lt;p&gt;Update payee details for the given Payee Id.&lt;/p&gt; &lt;p&gt;Payors may only update the payee details if the payee has not yet onboarded&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV4 Request to update payee details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void payeeDetailsUpdateV4(UUID payeeId, UpdatePayeeDetailsRequestV4 updatePayeeDetailsRequestV4) throws ApiException {
        payeeDetailsUpdateV4WithHttpInfo(payeeId, updatePayeeDetailsRequestV4);
    }

    /**
     * Update Payee Details
     * &lt;p&gt;Update payee details for the given Payee Id.&lt;/p&gt; &lt;p&gt;Payors may only update the payee details if the payee has not yet onboarded&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV4 Request to update payee details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> payeeDetailsUpdateV4WithHttpInfo(UUID payeeId, UpdatePayeeDetailsRequestV4 updatePayeeDetailsRequestV4) throws ApiException {
        okhttp3.Call localVarCall = payeeDetailsUpdateV4ValidateBeforeCall(payeeId, updatePayeeDetailsRequestV4, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payee Details (asynchronously)
     * &lt;p&gt;Update payee details for the given Payee Id.&lt;/p&gt; &lt;p&gt;Payors may only update the payee details if the payee has not yet onboarded&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updatePayeeDetailsRequestV4 Request to update payee details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payeeDetailsUpdateV4Async(UUID payeeId, UpdatePayeeDetailsRequestV4 updatePayeeDetailsRequestV4, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = payeeDetailsUpdateV4ValidateBeforeCall(payeeId, updatePayeeDetailsRequestV4, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3PayeesPayeeIdRemoteIdUpdatePost
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV3 Request to update payee remote id v3 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v3PayeesPayeeIdRemoteIdUpdatePostCall(UUID payeeId, UpdateRemoteIdRequestV3 updateRemoteIdRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRemoteIdRequestV3;

        // create path and map variables
        String localVarPath = "/v3/payees/{payeeId}/remoteIdUpdate"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(UUID payeeId, UpdateRemoteIdRequestV3 updateRemoteIdRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling v3PayeesPayeeIdRemoteIdUpdatePost(Async)");
        }

        // verify the required parameter 'updateRemoteIdRequestV3' is set
        if (updateRemoteIdRequestV3 == null) {
            throw new ApiException("Missing the required parameter 'updateRemoteIdRequestV3' when calling v3PayeesPayeeIdRemoteIdUpdatePost(Async)");
        }

        return v3PayeesPayeeIdRemoteIdUpdatePostCall(payeeId, updateRemoteIdRequestV3, _callback);

    }

    /**
     * Update Payee Remote Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV3 Request to update payee remote id v3 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void v3PayeesPayeeIdRemoteIdUpdatePost(UUID payeeId, UpdateRemoteIdRequestV3 updateRemoteIdRequestV3) throws ApiException {
        v3PayeesPayeeIdRemoteIdUpdatePostWithHttpInfo(payeeId, updateRemoteIdRequestV3);
    }

    /**
     * Update Payee Remote Id
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV3 Request to update payee remote id v3 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> v3PayeesPayeeIdRemoteIdUpdatePostWithHttpInfo(UUID payeeId, UpdateRemoteIdRequestV3 updateRemoteIdRequestV3) throws ApiException {
        okhttp3.Call localVarCall = v3PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(payeeId, updateRemoteIdRequestV3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payee Remote Id (asynchronously)
     * &lt;p&gt;Use v4 instead&lt;/p&gt; &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV3 Request to update payee remote id v3 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v3PayeesPayeeIdRemoteIdUpdatePostAsync(UUID payeeId, UpdateRemoteIdRequestV3 updateRemoteIdRequestV3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(payeeId, updateRemoteIdRequestV3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v4PayeesPayeeIdRemoteIdUpdatePost
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV4 Request to update payee remote id v4 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4PayeesPayeeIdRemoteIdUpdatePostCall(UUID payeeId, UpdateRemoteIdRequestV4 updateRemoteIdRequestV4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRemoteIdRequestV4;

        // create path and map variables
        String localVarPath = "/v4/payees/{payeeId}/remoteIdUpdate"
            .replace("{" + "payeeId" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v4PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(UUID payeeId, UpdateRemoteIdRequestV4 updateRemoteIdRequestV4, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling v4PayeesPayeeIdRemoteIdUpdatePost(Async)");
        }

        // verify the required parameter 'updateRemoteIdRequestV4' is set
        if (updateRemoteIdRequestV4 == null) {
            throw new ApiException("Missing the required parameter 'updateRemoteIdRequestV4' when calling v4PayeesPayeeIdRemoteIdUpdatePost(Async)");
        }

        return v4PayeesPayeeIdRemoteIdUpdatePostCall(payeeId, updateRemoteIdRequestV4, _callback);

    }

    /**
     * Update Payee Remote Id
     * &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV4 Request to update payee remote id v4 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public void v4PayeesPayeeIdRemoteIdUpdatePost(UUID payeeId, UpdateRemoteIdRequestV4 updateRemoteIdRequestV4) throws ApiException {
        v4PayeesPayeeIdRemoteIdUpdatePostWithHttpInfo(payeeId, updateRemoteIdRequestV4);
    }

    /**
     * Update Payee Remote Id
     * &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV4 Request to update payee remote id v4 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v4PayeesPayeeIdRemoteIdUpdatePostWithHttpInfo(UUID payeeId, UpdateRemoteIdRequestV4 updateRemoteIdRequestV4) throws ApiException {
        okhttp3.Call localVarCall = v4PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(payeeId, updateRemoteIdRequestV4, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payee Remote Id (asynchronously)
     * &lt;p&gt;Update the remote Id for the given Payee Id.&lt;/p&gt; 
     * @param payeeId The UUID of the payee. (required)
     * @param updateRemoteIdRequestV4 Request to update payee remote id v4 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Accepted, No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token. May be expired or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v4PayeesPayeeIdRemoteIdUpdatePostAsync(UUID payeeId, UpdateRemoteIdRequestV4 updateRemoteIdRequestV4, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v4PayeesPayeeIdRemoteIdUpdatePostValidateBeforeCall(payeeId, updateRemoteIdRequestV4, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
