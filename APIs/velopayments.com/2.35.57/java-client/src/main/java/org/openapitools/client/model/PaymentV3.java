/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PayoutPayeeV3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentV3 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_AUTO_WITHDRAWN_REASON_CODE = "autoWithdrawnReasonCode";
  @SerializedName(SERIALIZED_NAME_AUTO_WITHDRAWN_REASON_CODE)
  private String autoWithdrawnReasonCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAYEE = "payee";
  @SerializedName(SERIALIZED_NAME_PAYEE)
  private PayoutPayeeV3 payee;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private UUID paymentId;

  public static final String SERIALIZED_NAME_PAYMENT_MEMO = "paymentMemo";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEMO)
  private String paymentMemo;

  public static final String SERIALIZED_NAME_PAYMENT_METADATA = "paymentMetadata";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METADATA)
  private String paymentMetadata;

  public static final String SERIALIZED_NAME_PAYOR_PAYMENT_ID = "payorPaymentId";
  @SerializedName(SERIALIZED_NAME_PAYOR_PAYMENT_ID)
  private String payorPaymentId;

  public static final String SERIALIZED_NAME_RAILS_ID = "railsId";
  @SerializedName(SERIALIZED_NAME_RAILS_ID)
  private String railsId;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_REMOTE_SYSTEM_ID = "remoteSystemId";
  @SerializedName(SERIALIZED_NAME_REMOTE_SYSTEM_ID)
  private String remoteSystemId;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_NAME = "sourceAccountName";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_NAME)
  private String sourceAccountName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TRANSMISSION_TYPE = "transmissionType";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_TYPE)
  private String transmissionType;

  public static final String SERIALIZED_NAME_WITHDRAWABLE = "withdrawable";
  @SerializedName(SERIALIZED_NAME_WITHDRAWABLE)
  private Boolean withdrawable;

  public PaymentV3() {
  }

  public PaymentV3 amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the payment in minor units
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public PaymentV3 autoWithdrawnReasonCode(String autoWithdrawnReasonCode) {
    this.autoWithdrawnReasonCode = autoWithdrawnReasonCode;
    return this;
  }

  /**
   * Populated only if the payment was automatically withdrawn during instruction for being invalid
   * @return autoWithdrawnReasonCode
   */
  @javax.annotation.Nullable
  public String getAutoWithdrawnReasonCode() {
    return autoWithdrawnReasonCode;
  }

  public void setAutoWithdrawnReasonCode(String autoWithdrawnReasonCode) {
    this.autoWithdrawnReasonCode = autoWithdrawnReasonCode;
  }


  public PaymentV3 currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency that the payment was made in
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaymentV3 payee(PayoutPayeeV3 payee) {
    this.payee = payee;
    return this;
  }

  /**
   * Get payee
   * @return payee
   */
  @javax.annotation.Nullable
  public PayoutPayeeV3 getPayee() {
    return payee;
  }

  public void setPayee(PayoutPayeeV3 payee) {
    this.payee = payee;
  }


  public PaymentV3 paymentId(UUID paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The id of the payment
   * @return paymentId
   */
  @javax.annotation.Nonnull
  public UUID getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(UUID paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentV3 paymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
    return this;
  }

  /**
   * &lt;p&gt;Any value here will override the memo value in the parent payout&lt;/p&gt; &lt;p&gt;This should be the reference field on the statement seen by the payee (but not via ACH)&lt;/p&gt; 
   * @return paymentMemo
   */
  @javax.annotation.Nullable
  public String getPaymentMemo() {
    return paymentMemo;
  }

  public void setPaymentMemo(String paymentMemo) {
    this.paymentMemo = paymentMemo;
  }


  public PaymentV3 paymentMetadata(String paymentMetadata) {
    this.paymentMetadata = paymentMetadata;
    return this;
  }

  /**
   * &lt;p&gt;Metadata about the payment that may be relevant to the specific rails or remote system making the payout&lt;/p&gt; &lt;p&gt;The structure of the data will be dictated by the requirements of the payment rails&lt;/p&gt; 
   * @return paymentMetadata
   */
  @javax.annotation.Nullable
  public String getPaymentMetadata() {
    return paymentMetadata;
  }

  public void setPaymentMetadata(String paymentMetadata) {
    this.paymentMetadata = paymentMetadata;
  }


  public PaymentV3 payorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
    return this;
  }

  /**
   * A reference identifier for the payor for the given payee payment
   * @return payorPaymentId
   */
  @javax.annotation.Nullable
  public String getPayorPaymentId() {
    return payorPaymentId;
  }

  public void setPayorPaymentId(String payorPaymentId) {
    this.payorPaymentId = payorPaymentId;
  }


  public PaymentV3 railsId(String railsId) {
    this.railsId = railsId;
    return this;
  }

  /**
   * Indicates the 3rd party system involved in making this payment
   * @return railsId
   */
  @javax.annotation.Nullable
  public String getRailsId() {
    return railsId;
  }

  public void setRailsId(String railsId) {
    this.railsId = railsId;
  }


  public PaymentV3 remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * The remoteId supplied by the payor that identifies the payee
   * @return remoteId
   */
  @javax.annotation.Nullable
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public PaymentV3 remoteSystemId(String remoteSystemId) {
    this.remoteSystemId = remoteSystemId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier for the remote payments system if not Velo&lt;/p&gt; 
   * @return remoteSystemId
   */
  @javax.annotation.Nullable
  public String getRemoteSystemId() {
    return remoteSystemId;
  }

  public void setRemoteSystemId(String remoteSystemId) {
    this.remoteSystemId = remoteSystemId;
  }


  public PaymentV3 sourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
    return this;
  }

  /**
   * The identifier of the source account to debit the payment from
   * @return sourceAccountName
   */
  @javax.annotation.Nullable
  public String getSourceAccountName() {
    return sourceAccountName;
  }

  public void setSourceAccountName(String sourceAccountName) {
    this.sourceAccountName = sourceAccountName;
  }


  public PaymentV3 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentV3 transmissionType(String transmissionType) {
    this.transmissionType = transmissionType;
    return this;
  }

  /**
   * The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT
   * @return transmissionType
   */
  @javax.annotation.Nullable
  public String getTransmissionType() {
    return transmissionType;
  }

  public void setTransmissionType(String transmissionType) {
    this.transmissionType = transmissionType;
  }


  public PaymentV3 withdrawable(Boolean withdrawable) {
    this.withdrawable = withdrawable;
    return this;
  }

  /**
   * Can this paynent be withdrawn
   * @return withdrawable
   */
  @javax.annotation.Nullable
  public Boolean getWithdrawable() {
    return withdrawable;
  }

  public void setWithdrawable(Boolean withdrawable) {
    this.withdrawable = withdrawable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentV3 paymentV3 = (PaymentV3) o;
    return Objects.equals(this.amount, paymentV3.amount) &&
        Objects.equals(this.autoWithdrawnReasonCode, paymentV3.autoWithdrawnReasonCode) &&
        Objects.equals(this.currency, paymentV3.currency) &&
        Objects.equals(this.payee, paymentV3.payee) &&
        Objects.equals(this.paymentId, paymentV3.paymentId) &&
        Objects.equals(this.paymentMemo, paymentV3.paymentMemo) &&
        Objects.equals(this.paymentMetadata, paymentV3.paymentMetadata) &&
        Objects.equals(this.payorPaymentId, paymentV3.payorPaymentId) &&
        Objects.equals(this.railsId, paymentV3.railsId) &&
        Objects.equals(this.remoteId, paymentV3.remoteId) &&
        Objects.equals(this.remoteSystemId, paymentV3.remoteSystemId) &&
        Objects.equals(this.sourceAccountName, paymentV3.sourceAccountName) &&
        Objects.equals(this.status, paymentV3.status) &&
        Objects.equals(this.transmissionType, paymentV3.transmissionType) &&
        Objects.equals(this.withdrawable, paymentV3.withdrawable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, autoWithdrawnReasonCode, currency, payee, paymentId, paymentMemo, paymentMetadata, payorPaymentId, railsId, remoteId, remoteSystemId, sourceAccountName, status, transmissionType, withdrawable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentV3 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    autoWithdrawnReasonCode: ").append(toIndentedString(autoWithdrawnReasonCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    paymentMemo: ").append(toIndentedString(paymentMemo)).append("\n");
    sb.append("    paymentMetadata: ").append(toIndentedString(paymentMetadata)).append("\n");
    sb.append("    payorPaymentId: ").append(toIndentedString(payorPaymentId)).append("\n");
    sb.append("    railsId: ").append(toIndentedString(railsId)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    remoteSystemId: ").append(toIndentedString(remoteSystemId)).append("\n");
    sb.append("    sourceAccountName: ").append(toIndentedString(sourceAccountName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transmissionType: ").append(toIndentedString(transmissionType)).append("\n");
    sb.append("    withdrawable: ").append(toIndentedString(withdrawable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("autoWithdrawnReasonCode");
    openapiFields.add("currency");
    openapiFields.add("payee");
    openapiFields.add("paymentId");
    openapiFields.add("paymentMemo");
    openapiFields.add("paymentMetadata");
    openapiFields.add("payorPaymentId");
    openapiFields.add("railsId");
    openapiFields.add("remoteId");
    openapiFields.add("remoteSystemId");
    openapiFields.add("sourceAccountName");
    openapiFields.add("status");
    openapiFields.add("transmissionType");
    openapiFields.add("withdrawable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentV3 is not found in the empty JSON string", PaymentV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoWithdrawnReasonCode") != null && !jsonObj.get("autoWithdrawnReasonCode").isJsonNull()) && !jsonObj.get("autoWithdrawnReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoWithdrawnReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoWithdrawnReasonCode").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `payee`
      if (jsonObj.get("payee") != null && !jsonObj.get("payee").isJsonNull()) {
        PayoutPayeeV3.validateJsonElement(jsonObj.get("payee"));
      }
      if (!jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
      if ((jsonObj.get("paymentMemo") != null && !jsonObj.get("paymentMemo").isJsonNull()) && !jsonObj.get("paymentMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMemo").toString()));
      }
      if ((jsonObj.get("paymentMetadata") != null && !jsonObj.get("paymentMetadata").isJsonNull()) && !jsonObj.get("paymentMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMetadata").toString()));
      }
      if ((jsonObj.get("payorPaymentId") != null && !jsonObj.get("payorPaymentId").isJsonNull()) && !jsonObj.get("payorPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorPaymentId").toString()));
      }
      if ((jsonObj.get("railsId") != null && !jsonObj.get("railsId").isJsonNull()) && !jsonObj.get("railsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `railsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("railsId").toString()));
      }
      if ((jsonObj.get("remoteId") != null && !jsonObj.get("remoteId").isJsonNull()) && !jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("remoteSystemId") != null && !jsonObj.get("remoteSystemId").isJsonNull()) && !jsonObj.get("remoteSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteSystemId").toString()));
      }
      if ((jsonObj.get("sourceAccountName") != null && !jsonObj.get("sourceAccountName").isJsonNull()) && !jsonObj.get("sourceAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("transmissionType") != null && !jsonObj.get("transmissionType").isJsonNull()) && !jsonObj.get("transmissionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmissionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmissionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentV3.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentV3>() {
           @Override
           public void write(JsonWriter out, PaymentV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentV3
   * @throws IOException if the JSON string is invalid with respect to PaymentV3
   */
  public static PaymentV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentV3.class);
  }

  /**
   * Convert an instance of PaymentV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

