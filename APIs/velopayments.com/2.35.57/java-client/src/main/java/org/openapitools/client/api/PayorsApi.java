/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse409;
import org.openapitools.client.model.PayorBrandingResponse;
import org.openapitools.client.model.PayorCreateApiKeyRequest;
import org.openapitools.client.model.PayorCreateApiKeyResponse;
import org.openapitools.client.model.PayorCreateApplicationRequest;
import org.openapitools.client.model.PayorEmailOptOutRequest;
import org.openapitools.client.model.PayorV1;
import org.openapitools.client.model.PayorV2;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPayorByIdV1
     * @param payorId The Payor Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayorByIdV1Call(UUID payorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayorByIdV1ValidateBeforeCall(UUID payorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling getPayorByIdV1(Async)");
        }

        return getPayorByIdV1Call(payorId, _callback);

    }

    /**
     * Get Payor
     * &lt;p&gt;Get a Single Payor by Id.&lt;/p&gt; &lt;p&gt;deprecated since v2.10 - Use /v2/payors 
     * @param payorId The Payor Id (required)
     * @return PayorV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PayorV1 getPayorByIdV1(UUID payorId) throws ApiException {
        ApiResponse<PayorV1> localVarResp = getPayorByIdV1WithHttpInfo(payorId);
        return localVarResp.getData();
    }

    /**
     * Get Payor
     * &lt;p&gt;Get a Single Payor by Id.&lt;/p&gt; &lt;p&gt;deprecated since v2.10 - Use /v2/payors 
     * @param payorId The Payor Id (required)
     * @return ApiResponse&lt;PayorV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PayorV1> getPayorByIdV1WithHttpInfo(UUID payorId) throws ApiException {
        okhttp3.Call localVarCall = getPayorByIdV1ValidateBeforeCall(payorId, null);
        Type localVarReturnType = new TypeToken<PayorV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payor (asynchronously)
     * &lt;p&gt;Get a Single Payor by Id.&lt;/p&gt; &lt;p&gt;deprecated since v2.10 - Use /v2/payors 
     * @param payorId The Payor Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPayorByIdV1Async(UUID payorId, final ApiCallback<PayorV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayorByIdV1ValidateBeforeCall(payorId, _callback);
        Type localVarReturnType = new TypeToken<PayorV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayorByIdV2
     * @param payorId The Payor Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayorByIdV2Call(UUID payorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payors/{payorId}"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayorByIdV2ValidateBeforeCall(UUID payorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling getPayorByIdV2(Async)");
        }

        return getPayorByIdV2Call(payorId, _callback);

    }

    /**
     * Get Payor
     * Get a Single Payor by Id. 
     * @param payorId The Payor Id (required)
     * @return PayorV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PayorV2 getPayorByIdV2(UUID payorId) throws ApiException {
        ApiResponse<PayorV2> localVarResp = getPayorByIdV2WithHttpInfo(payorId);
        return localVarResp.getData();
    }

    /**
     * Get Payor
     * Get a Single Payor by Id. 
     * @param payorId The Payor Id (required)
     * @return ApiResponse&lt;PayorV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayorV2> getPayorByIdV2WithHttpInfo(UUID payorId) throws ApiException {
        okhttp3.Call localVarCall = getPayorByIdV2ValidateBeforeCall(payorId, null);
        Type localVarReturnType = new TypeToken<PayorV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payor (asynchronously)
     * Get a Single Payor by Id. 
     * @param payorId The Payor Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Payor Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayorByIdV2Async(UUID payorId, final ApiCallback<PayorV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayorByIdV2ValidateBeforeCall(payorId, _callback);
        Type localVarReturnType = new TypeToken<PayorV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payorAddPayorLogoV1
     * @param payorId The Payor Id (required)
     * @param logo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorAddPayorLogoV1Call(UUID payorId, File logo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}/branding/logos"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logo != null) {
            localVarFormParams.put("logo", logo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payorAddPayorLogoV1ValidateBeforeCall(UUID payorId, File logo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling payorAddPayorLogoV1(Async)");
        }

        return payorAddPayorLogoV1Call(payorId, logo, _callback);

    }

    /**
     * Add Logo
     * &lt;p&gt;Add Payor Logo&lt;/p&gt; &lt;p&gt;Logo file is used in your branding and emails sent to payees&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param logo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public void payorAddPayorLogoV1(UUID payorId, File logo) throws ApiException {
        payorAddPayorLogoV1WithHttpInfo(payorId, logo);
    }

    /**
     * Add Logo
     * &lt;p&gt;Add Payor Logo&lt;/p&gt; &lt;p&gt;Logo file is used in your branding and emails sent to payees&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param logo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> payorAddPayorLogoV1WithHttpInfo(UUID payorId, File logo) throws ApiException {
        okhttp3.Call localVarCall = payorAddPayorLogoV1ValidateBeforeCall(payorId, logo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Logo (asynchronously)
     * &lt;p&gt;Add Payor Logo&lt;/p&gt; &lt;p&gt;Logo file is used in your branding and emails sent to payees&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param logo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorAddPayorLogoV1Async(UUID payorId, File logo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = payorAddPayorLogoV1ValidateBeforeCall(payorId, logo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for payorCreateApiKeyV1
     * @param payorId The Payor Id (required)
     * @param applicationId Application ID (required)
     * @param payorCreateApiKeyRequest Details of application API key to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorCreateApiKeyV1Call(UUID payorId, UUID applicationId, PayorCreateApiKeyRequest payorCreateApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payorCreateApiKeyRequest;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}/applications/{applicationId}/keys"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payorCreateApiKeyV1ValidateBeforeCall(UUID payorId, UUID applicationId, PayorCreateApiKeyRequest payorCreateApiKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling payorCreateApiKeyV1(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling payorCreateApiKeyV1(Async)");
        }

        // verify the required parameter 'payorCreateApiKeyRequest' is set
        if (payorCreateApiKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'payorCreateApiKeyRequest' when calling payorCreateApiKeyV1(Async)");
        }

        return payorCreateApiKeyV1Call(payorId, applicationId, payorCreateApiKeyRequest, _callback);

    }

    /**
     * Create API Key
     * &lt;p&gt;Create an an API key for the given payor Id and application Id&lt;/p&gt; &lt;p&gt;You can create multiple API Keys for a given application&lt;/p&gt; &lt;p&gt;API Keys are programmatic users for integrating your application with the Velo platform&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param applicationId Application ID (required)
     * @param payorCreateApiKeyRequest Details of application API key to create (required)
     * @return PayorCreateApiKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public PayorCreateApiKeyResponse payorCreateApiKeyV1(UUID payorId, UUID applicationId, PayorCreateApiKeyRequest payorCreateApiKeyRequest) throws ApiException {
        ApiResponse<PayorCreateApiKeyResponse> localVarResp = payorCreateApiKeyV1WithHttpInfo(payorId, applicationId, payorCreateApiKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create API Key
     * &lt;p&gt;Create an an API key for the given payor Id and application Id&lt;/p&gt; &lt;p&gt;You can create multiple API Keys for a given application&lt;/p&gt; &lt;p&gt;API Keys are programmatic users for integrating your application with the Velo platform&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param applicationId Application ID (required)
     * @param payorCreateApiKeyRequest Details of application API key to create (required)
     * @return ApiResponse&lt;PayorCreateApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayorCreateApiKeyResponse> payorCreateApiKeyV1WithHttpInfo(UUID payorId, UUID applicationId, PayorCreateApiKeyRequest payorCreateApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = payorCreateApiKeyV1ValidateBeforeCall(payorId, applicationId, payorCreateApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<PayorCreateApiKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create API Key (asynchronously)
     * &lt;p&gt;Create an an API key for the given payor Id and application Id&lt;/p&gt; &lt;p&gt;You can create multiple API Keys for a given application&lt;/p&gt; &lt;p&gt;API Keys are programmatic users for integrating your application with the Velo platform&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param applicationId Application ID (required)
     * @param payorCreateApiKeyRequest Details of application API key to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorCreateApiKeyV1Async(UUID payorId, UUID applicationId, PayorCreateApiKeyRequest payorCreateApiKeyRequest, final ApiCallback<PayorCreateApiKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = payorCreateApiKeyV1ValidateBeforeCall(payorId, applicationId, payorCreateApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<PayorCreateApiKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payorCreateApplicationV1
     * @param payorId The Payor Id (required)
     * @param payorCreateApplicationRequest Details of application to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Location - location <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorCreateApplicationV1Call(UUID payorId, PayorCreateApplicationRequest payorCreateApplicationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payorCreateApplicationRequest;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}/applications"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payorCreateApplicationV1ValidateBeforeCall(UUID payorId, PayorCreateApplicationRequest payorCreateApplicationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling payorCreateApplicationV1(Async)");
        }

        // verify the required parameter 'payorCreateApplicationRequest' is set
        if (payorCreateApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'payorCreateApplicationRequest' when calling payorCreateApplicationV1(Async)");
        }

        return payorCreateApplicationV1Call(payorId, payorCreateApplicationRequest, _callback);

    }

    /**
     * Create Application
     * &lt;p&gt;Create an application for the given Payor ID.&lt;/p&gt; &lt;p&gt;Applications provide a means to group your API Keys&lt;/p&gt; &lt;p&gt;For example you might have an SAP application that you wish to integrate with Velo&lt;/p&gt; &lt;p&gt;You can create an application and then create one or more API keys for the application&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param payorCreateApplicationRequest Details of application to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Location - location <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public void payorCreateApplicationV1(UUID payorId, PayorCreateApplicationRequest payorCreateApplicationRequest) throws ApiException {
        payorCreateApplicationV1WithHttpInfo(payorId, payorCreateApplicationRequest);
    }

    /**
     * Create Application
     * &lt;p&gt;Create an application for the given Payor ID.&lt;/p&gt; &lt;p&gt;Applications provide a means to group your API Keys&lt;/p&gt; &lt;p&gt;For example you might have an SAP application that you wish to integrate with Velo&lt;/p&gt; &lt;p&gt;You can create an application and then create one or more API keys for the application&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param payorCreateApplicationRequest Details of application to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Location - location <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> payorCreateApplicationV1WithHttpInfo(UUID payorId, PayorCreateApplicationRequest payorCreateApplicationRequest) throws ApiException {
        okhttp3.Call localVarCall = payorCreateApplicationV1ValidateBeforeCall(payorId, payorCreateApplicationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Application (asynchronously)
     * &lt;p&gt;Create an application for the given Payor ID.&lt;/p&gt; &lt;p&gt;Applications provide a means to group your API Keys&lt;/p&gt; &lt;p&gt;For example you might have an SAP application that you wish to integrate with Velo&lt;/p&gt; &lt;p&gt;You can create an application and then create one or more API keys for the application&lt;/p&gt; 
     * @param payorId The Payor Id (required)
     * @param payorCreateApplicationRequest Details of application to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Location - location <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found or is no longer available  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request contained data that would result in a duplicate value  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorCreateApplicationV1Async(UUID payorId, PayorCreateApplicationRequest payorCreateApplicationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = payorCreateApplicationV1ValidateBeforeCall(payorId, payorCreateApplicationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for payorEmailOptOut
     * @param payorId The Payor Id (required)
     * @param payorEmailOptOutRequest Reminder Emails Opt-Out Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorEmailOptOutCall(UUID payorId, PayorEmailOptOutRequest payorEmailOptOutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payorEmailOptOutRequest;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}/reminderEmailsUpdate"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payorEmailOptOutValidateBeforeCall(UUID payorId, PayorEmailOptOutRequest payorEmailOptOutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling payorEmailOptOut(Async)");
        }

        // verify the required parameter 'payorEmailOptOutRequest' is set
        if (payorEmailOptOutRequest == null) {
            throw new ApiException("Missing the required parameter 'payorEmailOptOutRequest' when calling payorEmailOptOut(Async)");
        }

        return payorEmailOptOutCall(payorId, payorEmailOptOutRequest, _callback);

    }

    /**
     * Reminder Email Opt-Out
     * Update the emailRemindersOptOut field for a Payor. This API can be used to opt out or opt into Payor Reminder emails. These emails are typically around payee events such as payees registering and onboarding. 
     * @param payorId The Payor Id (required)
     * @param payorEmailOptOutRequest Reminder Emails Opt-Out Request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void payorEmailOptOut(UUID payorId, PayorEmailOptOutRequest payorEmailOptOutRequest) throws ApiException {
        payorEmailOptOutWithHttpInfo(payorId, payorEmailOptOutRequest);
    }

    /**
     * Reminder Email Opt-Out
     * Update the emailRemindersOptOut field for a Payor. This API can be used to opt out or opt into Payor Reminder emails. These emails are typically around payee events such as payees registering and onboarding. 
     * @param payorId The Payor Id (required)
     * @param payorEmailOptOutRequest Reminder Emails Opt-Out Request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> payorEmailOptOutWithHttpInfo(UUID payorId, PayorEmailOptOutRequest payorEmailOptOutRequest) throws ApiException {
        okhttp3.Call localVarCall = payorEmailOptOutValidateBeforeCall(payorId, payorEmailOptOutRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reminder Email Opt-Out (asynchronously)
     * Update the emailRemindersOptOut field for a Payor. This API can be used to opt out or opt into Payor Reminder emails. These emails are typically around payee events such as payees registering and onboarding. 
     * @param payorId The Payor Id (required)
     * @param payorEmailOptOutRequest Reminder Emails Opt-Out Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorEmailOptOutAsync(UUID payorId, PayorEmailOptOutRequest payorEmailOptOutRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = payorEmailOptOutValidateBeforeCall(payorId, payorEmailOptOutRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for payorGetBranding
     * @param payorId The Payor Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorGetBrandingCall(UUID payorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payors/{payorId}/branding"
            .replace("{" + "payorId" + "}", localVarApiClient.escapeString(payorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payorGetBrandingValidateBeforeCall(UUID payorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payorId' is set
        if (payorId == null) {
            throw new ApiException("Missing the required parameter 'payorId' when calling payorGetBranding(Async)");
        }

        return payorGetBrandingCall(payorId, _callback);

    }

    /**
     * Get Branding
     * Get the payor branding details.
     * @param payorId The Payor Id (required)
     * @return PayorBrandingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PayorBrandingResponse payorGetBranding(UUID payorId) throws ApiException {
        ApiResponse<PayorBrandingResponse> localVarResp = payorGetBrandingWithHttpInfo(payorId);
        return localVarResp.getData();
    }

    /**
     * Get Branding
     * Get the payor branding details.
     * @param payorId The Payor Id (required)
     * @return ApiResponse&lt;PayorBrandingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayorBrandingResponse> payorGetBrandingWithHttpInfo(UUID payorId) throws ApiException {
        okhttp3.Call localVarCall = payorGetBrandingValidateBeforeCall(payorId, null);
        Type localVarReturnType = new TypeToken<PayorBrandingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Branding (asynchronously)
     * Get the payor branding details.
     * @param payorId The Payor Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP Ok, key created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. See Error message payload for details of failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication does not have permissions to access the resource This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payor Id Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payorGetBrandingAsync(UUID payorId, final ApiCallback<PayorBrandingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = payorGetBrandingValidateBeforeCall(payorId, _callback);
        Type localVarReturnType = new TypeToken<PayorBrandingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
