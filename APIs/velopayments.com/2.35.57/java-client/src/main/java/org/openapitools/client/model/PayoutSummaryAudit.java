/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.FxSummary;
import org.openapitools.client.model.PayoutSchedule;
import org.openapitools.client.model.SourceAccountSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayoutSummaryAudit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayoutSummaryAudit {
  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public static final String SERIALIZED_NAME_FX_SUMMARIES = "fxSummaries";
  @SerializedName(SERIALIZED_NAME_FX_SUMMARIES)
  private List<FxSummary> fxSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTED_DATE_TIME = "instructedDateTime";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_DATE_TIME)
  private String instructedDateTime;

  public static final String SERIALIZED_NAME_PAYOR_ID = "payorId";
  @SerializedName(SERIALIZED_NAME_PAYOR_ID)
  private UUID payorId;

  public static final String SERIALIZED_NAME_PAYOR_NAME = "payorName";
  @SerializedName(SERIALIZED_NAME_PAYOR_NAME)
  private String payorName;

  public static final String SERIALIZED_NAME_PAYOUT_ID = "payoutId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_ID)
  private UUID payoutId;

  public static final String SERIALIZED_NAME_PAYOUT_MEMO = "payoutMemo";
  @SerializedName(SERIALIZED_NAME_PAYOUT_MEMO)
  private String payoutMemo;

  public static final String SERIALIZED_NAME_PAYOUT_TYPE = "payoutType";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TYPE)
  private String payoutType;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private PayoutSchedule schedule;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_SUMMARY = "sourceAccountSummary";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_SUMMARY)
  private List<SourceAccountSummary> sourceAccountSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE_TIME = "submittedDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE_TIME)
  private String submittedDateTime;

  public static final String SERIALIZED_NAME_TOTAL_INCOMPLETE_PAYMENTS = "totalIncompletePayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_INCOMPLETE_PAYMENTS)
  private Integer totalIncompletePayments;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENTS = "totalPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENTS)
  private Integer totalPayments;

  public static final String SERIALIZED_NAME_TOTAL_RETURNED_PAYMENTS = "totalReturnedPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_RETURNED_PAYMENTS)
  private Integer totalReturnedPayments;

  public static final String SERIALIZED_NAME_TOTAL_WITHDRAWN_PAYMENTS = "totalWithdrawnPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_WITHDRAWN_PAYMENTS)
  private Integer totalWithdrawnPayments;

  public static final String SERIALIZED_NAME_WITHDRAWN_DATE_TIME = "withdrawnDateTime";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_DATE_TIME)
  private OffsetDateTime withdrawnDateTime;

  public PayoutSummaryAudit() {
  }

  public PayoutSummaryAudit dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public PayoutSummaryAudit fxSummaries(List<FxSummary> fxSummaries) {
    this.fxSummaries = fxSummaries;
    return this;
  }

  public PayoutSummaryAudit addFxSummariesItem(FxSummary fxSummariesItem) {
    if (this.fxSummaries == null) {
      this.fxSummaries = new ArrayList<>();
    }
    this.fxSummaries.add(fxSummariesItem);
    return this;
  }

  /**
   * Get fxSummaries
   * @return fxSummaries
   */
  @javax.annotation.Nullable
  public List<FxSummary> getFxSummaries() {
    return fxSummaries;
  }

  public void setFxSummaries(List<FxSummary> fxSummaries) {
    this.fxSummaries = fxSummaries;
  }


  public PayoutSummaryAudit instructedDateTime(String instructedDateTime) {
    this.instructedDateTime = instructedDateTime;
    return this;
  }

  /**
   * Get instructedDateTime
   * @return instructedDateTime
   */
  @javax.annotation.Nullable
  public String getInstructedDateTime() {
    return instructedDateTime;
  }

  public void setInstructedDateTime(String instructedDateTime) {
    this.instructedDateTime = instructedDateTime;
  }


  public PayoutSummaryAudit payorId(UUID payorId) {
    this.payorId = payorId;
    return this;
  }

  /**
   * Get payorId
   * @return payorId
   */
  @javax.annotation.Nullable
  public UUID getPayorId() {
    return payorId;
  }

  public void setPayorId(UUID payorId) {
    this.payorId = payorId;
  }


  public PayoutSummaryAudit payorName(String payorName) {
    this.payorName = payorName;
    return this;
  }

  /**
   * Get payorName
   * @return payorName
   */
  @javax.annotation.Nonnull
  public String getPayorName() {
    return payorName;
  }

  public void setPayorName(String payorName) {
    this.payorName = payorName;
  }


  public PayoutSummaryAudit payoutId(UUID payoutId) {
    this.payoutId = payoutId;
    return this;
  }

  /**
   * Get payoutId
   * @return payoutId
   */
  @javax.annotation.Nullable
  public UUID getPayoutId() {
    return payoutId;
  }

  public void setPayoutId(UUID payoutId) {
    this.payoutId = payoutId;
  }


  public PayoutSummaryAudit payoutMemo(String payoutMemo) {
    this.payoutMemo = payoutMemo;
    return this;
  }

  /**
   * Get payoutMemo
   * @return payoutMemo
   */
  @javax.annotation.Nullable
  public String getPayoutMemo() {
    return payoutMemo;
  }

  public void setPayoutMemo(String payoutMemo) {
    this.payoutMemo = payoutMemo;
  }


  public PayoutSummaryAudit payoutType(String payoutType) {
    this.payoutType = payoutType;
    return this;
  }

  /**
   * The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF
   * @return payoutType
   */
  @javax.annotation.Nonnull
  public String getPayoutType() {
    return payoutType;
  }

  public void setPayoutType(String payoutType) {
    this.payoutType = payoutType;
  }


  public PayoutSummaryAudit schedule(PayoutSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public PayoutSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(PayoutSchedule schedule) {
    this.schedule = schedule;
  }


  public PayoutSummaryAudit sourceAccountSummary(List<SourceAccountSummary> sourceAccountSummary) {
    this.sourceAccountSummary = sourceAccountSummary;
    return this;
  }

  public PayoutSummaryAudit addSourceAccountSummaryItem(SourceAccountSummary sourceAccountSummaryItem) {
    if (this.sourceAccountSummary == null) {
      this.sourceAccountSummary = new ArrayList<>();
    }
    this.sourceAccountSummary.add(sourceAccountSummaryItem);
    return this;
  }

  /**
   * Get sourceAccountSummary
   * @return sourceAccountSummary
   */
  @javax.annotation.Nullable
  public List<SourceAccountSummary> getSourceAccountSummary() {
    return sourceAccountSummary;
  }

  public void setSourceAccountSummary(List<SourceAccountSummary> sourceAccountSummary) {
    this.sourceAccountSummary = sourceAccountSummary;
  }


  public PayoutSummaryAudit status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PayoutSummaryAudit submittedDateTime(String submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
    return this;
  }

  /**
   * Get submittedDateTime
   * @return submittedDateTime
   */
  @javax.annotation.Nonnull
  public String getSubmittedDateTime() {
    return submittedDateTime;
  }

  public void setSubmittedDateTime(String submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
  }


  public PayoutSummaryAudit totalIncompletePayments(Integer totalIncompletePayments) {
    this.totalIncompletePayments = totalIncompletePayments;
    return this;
  }

  /**
   * Get totalIncompletePayments
   * @return totalIncompletePayments
   */
  @javax.annotation.Nullable
  public Integer getTotalIncompletePayments() {
    return totalIncompletePayments;
  }

  public void setTotalIncompletePayments(Integer totalIncompletePayments) {
    this.totalIncompletePayments = totalIncompletePayments;
  }


  public PayoutSummaryAudit totalPayments(Integer totalPayments) {
    this.totalPayments = totalPayments;
    return this;
  }

  /**
   * Get totalPayments
   * @return totalPayments
   */
  @javax.annotation.Nullable
  public Integer getTotalPayments() {
    return totalPayments;
  }

  public void setTotalPayments(Integer totalPayments) {
    this.totalPayments = totalPayments;
  }


  public PayoutSummaryAudit totalReturnedPayments(Integer totalReturnedPayments) {
    this.totalReturnedPayments = totalReturnedPayments;
    return this;
  }

  /**
   * Get totalReturnedPayments
   * @return totalReturnedPayments
   */
  @javax.annotation.Nullable
  public Integer getTotalReturnedPayments() {
    return totalReturnedPayments;
  }

  public void setTotalReturnedPayments(Integer totalReturnedPayments) {
    this.totalReturnedPayments = totalReturnedPayments;
  }


  public PayoutSummaryAudit totalWithdrawnPayments(Integer totalWithdrawnPayments) {
    this.totalWithdrawnPayments = totalWithdrawnPayments;
    return this;
  }

  /**
   * Get totalWithdrawnPayments
   * @return totalWithdrawnPayments
   */
  @javax.annotation.Nullable
  public Integer getTotalWithdrawnPayments() {
    return totalWithdrawnPayments;
  }

  public void setTotalWithdrawnPayments(Integer totalWithdrawnPayments) {
    this.totalWithdrawnPayments = totalWithdrawnPayments;
  }


  public PayoutSummaryAudit withdrawnDateTime(OffsetDateTime withdrawnDateTime) {
    this.withdrawnDateTime = withdrawnDateTime;
    return this;
  }

  /**
   * Get withdrawnDateTime
   * @return withdrawnDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWithdrawnDateTime() {
    return withdrawnDateTime;
  }

  public void setWithdrawnDateTime(OffsetDateTime withdrawnDateTime) {
    this.withdrawnDateTime = withdrawnDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutSummaryAudit payoutSummaryAudit = (PayoutSummaryAudit) o;
    return Objects.equals(this.dateTime, payoutSummaryAudit.dateTime) &&
        Objects.equals(this.fxSummaries, payoutSummaryAudit.fxSummaries) &&
        Objects.equals(this.instructedDateTime, payoutSummaryAudit.instructedDateTime) &&
        Objects.equals(this.payorId, payoutSummaryAudit.payorId) &&
        Objects.equals(this.payorName, payoutSummaryAudit.payorName) &&
        Objects.equals(this.payoutId, payoutSummaryAudit.payoutId) &&
        Objects.equals(this.payoutMemo, payoutSummaryAudit.payoutMemo) &&
        Objects.equals(this.payoutType, payoutSummaryAudit.payoutType) &&
        Objects.equals(this.schedule, payoutSummaryAudit.schedule) &&
        Objects.equals(this.sourceAccountSummary, payoutSummaryAudit.sourceAccountSummary) &&
        Objects.equals(this.status, payoutSummaryAudit.status) &&
        Objects.equals(this.submittedDateTime, payoutSummaryAudit.submittedDateTime) &&
        Objects.equals(this.totalIncompletePayments, payoutSummaryAudit.totalIncompletePayments) &&
        Objects.equals(this.totalPayments, payoutSummaryAudit.totalPayments) &&
        Objects.equals(this.totalReturnedPayments, payoutSummaryAudit.totalReturnedPayments) &&
        Objects.equals(this.totalWithdrawnPayments, payoutSummaryAudit.totalWithdrawnPayments) &&
        Objects.equals(this.withdrawnDateTime, payoutSummaryAudit.withdrawnDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTime, fxSummaries, instructedDateTime, payorId, payorName, payoutId, payoutMemo, payoutType, schedule, sourceAccountSummary, status, submittedDateTime, totalIncompletePayments, totalPayments, totalReturnedPayments, totalWithdrawnPayments, withdrawnDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutSummaryAudit {\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    fxSummaries: ").append(toIndentedString(fxSummaries)).append("\n");
    sb.append("    instructedDateTime: ").append(toIndentedString(instructedDateTime)).append("\n");
    sb.append("    payorId: ").append(toIndentedString(payorId)).append("\n");
    sb.append("    payorName: ").append(toIndentedString(payorName)).append("\n");
    sb.append("    payoutId: ").append(toIndentedString(payoutId)).append("\n");
    sb.append("    payoutMemo: ").append(toIndentedString(payoutMemo)).append("\n");
    sb.append("    payoutType: ").append(toIndentedString(payoutType)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    sourceAccountSummary: ").append(toIndentedString(sourceAccountSummary)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedDateTime: ").append(toIndentedString(submittedDateTime)).append("\n");
    sb.append("    totalIncompletePayments: ").append(toIndentedString(totalIncompletePayments)).append("\n");
    sb.append("    totalPayments: ").append(toIndentedString(totalPayments)).append("\n");
    sb.append("    totalReturnedPayments: ").append(toIndentedString(totalReturnedPayments)).append("\n");
    sb.append("    totalWithdrawnPayments: ").append(toIndentedString(totalWithdrawnPayments)).append("\n");
    sb.append("    withdrawnDateTime: ").append(toIndentedString(withdrawnDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateTime");
    openapiFields.add("fxSummaries");
    openapiFields.add("instructedDateTime");
    openapiFields.add("payorId");
    openapiFields.add("payorName");
    openapiFields.add("payoutId");
    openapiFields.add("payoutMemo");
    openapiFields.add("payoutType");
    openapiFields.add("schedule");
    openapiFields.add("sourceAccountSummary");
    openapiFields.add("status");
    openapiFields.add("submittedDateTime");
    openapiFields.add("totalIncompletePayments");
    openapiFields.add("totalPayments");
    openapiFields.add("totalReturnedPayments");
    openapiFields.add("totalWithdrawnPayments");
    openapiFields.add("withdrawnDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payorName");
    openapiRequiredFields.add("payoutType");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submittedDateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayoutSummaryAudit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayoutSummaryAudit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayoutSummaryAudit is not found in the empty JSON string", PayoutSummaryAudit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayoutSummaryAudit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayoutSummaryAudit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayoutSummaryAudit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fxSummaries") != null && !jsonObj.get("fxSummaries").isJsonNull()) {
        JsonArray jsonArrayfxSummaries = jsonObj.getAsJsonArray("fxSummaries");
        if (jsonArrayfxSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fxSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fxSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("fxSummaries").toString()));
          }

          // validate the optional field `fxSummaries` (array)
          for (int i = 0; i < jsonArrayfxSummaries.size(); i++) {
            FxSummary.validateJsonElement(jsonArrayfxSummaries.get(i));
          };
        }
      }
      if ((jsonObj.get("instructedDateTime") != null && !jsonObj.get("instructedDateTime").isJsonNull()) && !jsonObj.get("instructedDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructedDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructedDateTime").toString()));
      }
      if ((jsonObj.get("payorId") != null && !jsonObj.get("payorId").isJsonNull()) && !jsonObj.get("payorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorId").toString()));
      }
      if (!jsonObj.get("payorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorName").toString()));
      }
      if ((jsonObj.get("payoutId") != null && !jsonObj.get("payoutId").isJsonNull()) && !jsonObj.get("payoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutId").toString()));
      }
      if ((jsonObj.get("payoutMemo") != null && !jsonObj.get("payoutMemo").isJsonNull()) && !jsonObj.get("payoutMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutMemo").toString()));
      }
      if (!jsonObj.get("payoutType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutType").toString()));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        PayoutSchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      if (jsonObj.get("sourceAccountSummary") != null && !jsonObj.get("sourceAccountSummary").isJsonNull()) {
        JsonArray jsonArraysourceAccountSummary = jsonObj.getAsJsonArray("sourceAccountSummary");
        if (jsonArraysourceAccountSummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceAccountSummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceAccountSummary` to be an array in the JSON string but got `%s`", jsonObj.get("sourceAccountSummary").toString()));
          }

          // validate the optional field `sourceAccountSummary` (array)
          for (int i = 0; i < jsonArraysourceAccountSummary.size(); i++) {
            SourceAccountSummary.validateJsonElement(jsonArraysourceAccountSummary.get(i));
          };
        }
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("submittedDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submittedDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submittedDateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayoutSummaryAudit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayoutSummaryAudit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayoutSummaryAudit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayoutSummaryAudit.class));

       return (TypeAdapter<T>) new TypeAdapter<PayoutSummaryAudit>() {
           @Override
           public void write(JsonWriter out, PayoutSummaryAudit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayoutSummaryAudit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayoutSummaryAudit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayoutSummaryAudit
   * @throws IOException if the JSON string is invalid with respect to PayoutSummaryAudit
   */
  public static PayoutSummaryAudit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayoutSummaryAudit.class);
  }

  /**
   * Convert an instance of PayoutSummaryAudit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

