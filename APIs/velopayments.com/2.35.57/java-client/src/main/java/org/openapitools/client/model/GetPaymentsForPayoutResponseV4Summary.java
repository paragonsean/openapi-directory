/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PayoutPayor;
import org.openapitools.client.model.PayoutPrincipal;
import org.openapitools.client.model.PayoutSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPaymentsForPayoutResponseV4Summary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:55.204956-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPaymentsForPayoutResponseV4Summary {
  public static final String SERIALIZED_NAME_CONFIRMED_PAYMENTS = "confirmedPayments";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_PAYMENTS)
  private Integer confirmedPayments;

  public static final String SERIALIZED_NAME_INCOMPLETE_PAYMENTS = "incompletePayments";
  @SerializedName(SERIALIZED_NAME_INCOMPLETE_PAYMENTS)
  private Integer incompletePayments;

  public static final String SERIALIZED_NAME_INSTRUCTED = "instructed";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED)
  private PayoutPrincipal instructed;

  public static final String SERIALIZED_NAME_INSTRUCTED_DATE_TIME = "instructedDateTime";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_DATE_TIME)
  private OffsetDateTime instructedDateTime;

  public static final String SERIALIZED_NAME_PAYOUT_FROM = "payoutFrom";
  @SerializedName(SERIALIZED_NAME_PAYOUT_FROM)
  private PayoutPayor payoutFrom;

  public static final String SERIALIZED_NAME_PAYOUT_MEMO = "payoutMemo";
  @SerializedName(SERIALIZED_NAME_PAYOUT_MEMO)
  private String payoutMemo;

  public static final String SERIALIZED_NAME_PAYOUT_STATUS = "payoutStatus";
  @SerializedName(SERIALIZED_NAME_PAYOUT_STATUS)
  private String payoutStatus;

  public static final String SERIALIZED_NAME_PAYOUT_TO = "payoutTo";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TO)
  private PayoutPayor payoutTo;

  public static final String SERIALIZED_NAME_PAYOUT_TYPE = "payoutType";
  @SerializedName(SERIALIZED_NAME_PAYOUT_TYPE)
  private String payoutType;

  public static final String SERIALIZED_NAME_QUOTED = "quoted";
  @SerializedName(SERIALIZED_NAME_QUOTED)
  private PayoutPrincipal quoted;

  public static final String SERIALIZED_NAME_QUOTED_DATE_TIME = "quotedDateTime";
  @SerializedName(SERIALIZED_NAME_QUOTED_DATE_TIME)
  private OffsetDateTime quotedDateTime;

  public static final String SERIALIZED_NAME_RELEASED_PAYMENTS = "releasedPayments";
  @SerializedName(SERIALIZED_NAME_RELEASED_PAYMENTS)
  private Integer releasedPayments;

  public static final String SERIALIZED_NAME_RETURNED_PAYMENTS = "returnedPayments";
  @SerializedName(SERIALIZED_NAME_RETURNED_PAYMENTS)
  private Integer returnedPayments;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private PayoutSchedule schedule;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE_TIME = "submittedDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE_TIME)
  private OffsetDateTime submittedDateTime;

  public static final String SERIALIZED_NAME_SUBMITTING = "submitting";
  @SerializedName(SERIALIZED_NAME_SUBMITTING)
  private PayoutPayor submitting;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENTS = "totalPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENTS)
  private Integer totalPayments;

  public static final String SERIALIZED_NAME_WITHDRAWN = "withdrawn";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN)
  private PayoutPrincipal withdrawn;

  public static final String SERIALIZED_NAME_WITHDRAWN_DATE_TIME = "withdrawnDateTime";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_DATE_TIME)
  private OffsetDateTime withdrawnDateTime;

  public static final String SERIALIZED_NAME_WITHDRAWN_PAYMENTS = "withdrawnPayments";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_PAYMENTS)
  private Integer withdrawnPayments;

  public GetPaymentsForPayoutResponseV4Summary() {
  }

  public GetPaymentsForPayoutResponseV4Summary confirmedPayments(Integer confirmedPayments) {
    this.confirmedPayments = confirmedPayments;
    return this;
  }

  /**
   * The count of payments within the payout which have been confirmed.
   * @return confirmedPayments
   */
  @javax.annotation.Nullable
  public Integer getConfirmedPayments() {
    return confirmedPayments;
  }

  public void setConfirmedPayments(Integer confirmedPayments) {
    this.confirmedPayments = confirmedPayments;
  }


  public GetPaymentsForPayoutResponseV4Summary incompletePayments(Integer incompletePayments) {
    this.incompletePayments = incompletePayments;
    return this;
  }

  /**
   * The count of payments within the payout which are incomplete.
   * @return incompletePayments
   */
  @javax.annotation.Nullable
  public Integer getIncompletePayments() {
    return incompletePayments;
  }

  public void setIncompletePayments(Integer incompletePayments) {
    this.incompletePayments = incompletePayments;
  }


  public GetPaymentsForPayoutResponseV4Summary instructed(PayoutPrincipal instructed) {
    this.instructed = instructed;
    return this;
  }

  /**
   * Get instructed
   * @return instructed
   */
  @javax.annotation.Nullable
  public PayoutPrincipal getInstructed() {
    return instructed;
  }

  public void setInstructed(PayoutPrincipal instructed) {
    this.instructed = instructed;
  }


  public GetPaymentsForPayoutResponseV4Summary instructedDateTime(OffsetDateTime instructedDateTime) {
    this.instructedDateTime = instructedDateTime;
    return this;
  }

  /**
   * The date/time at which the payout was instructed.
   * @return instructedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInstructedDateTime() {
    return instructedDateTime;
  }

  public void setInstructedDateTime(OffsetDateTime instructedDateTime) {
    this.instructedDateTime = instructedDateTime;
  }


  public GetPaymentsForPayoutResponseV4Summary payoutFrom(PayoutPayor payoutFrom) {
    this.payoutFrom = payoutFrom;
    return this;
  }

  /**
   * Get payoutFrom
   * @return payoutFrom
   */
  @javax.annotation.Nullable
  public PayoutPayor getPayoutFrom() {
    return payoutFrom;
  }

  public void setPayoutFrom(PayoutPayor payoutFrom) {
    this.payoutFrom = payoutFrom;
  }


  public GetPaymentsForPayoutResponseV4Summary payoutMemo(String payoutMemo) {
    this.payoutMemo = payoutMemo;
    return this;
  }

  /**
   * The memo attached to the payout.
   * @return payoutMemo
   */
  @javax.annotation.Nullable
  public String getPayoutMemo() {
    return payoutMemo;
  }

  public void setPayoutMemo(String payoutMemo) {
    this.payoutMemo = payoutMemo;
  }


  public GetPaymentsForPayoutResponseV4Summary payoutStatus(String payoutStatus) {
    this.payoutStatus = payoutStatus;
    return this;
  }

  /**
   * Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
   * @return payoutStatus
   */
  @javax.annotation.Nullable
  public String getPayoutStatus() {
    return payoutStatus;
  }

  public void setPayoutStatus(String payoutStatus) {
    this.payoutStatus = payoutStatus;
  }


  public GetPaymentsForPayoutResponseV4Summary payoutTo(PayoutPayor payoutTo) {
    this.payoutTo = payoutTo;
    return this;
  }

  /**
   * Get payoutTo
   * @return payoutTo
   */
  @javax.annotation.Nullable
  public PayoutPayor getPayoutTo() {
    return payoutTo;
  }

  public void setPayoutTo(PayoutPayor payoutTo) {
    this.payoutTo = payoutTo;
  }


  public GetPaymentsForPayoutResponseV4Summary payoutType(String payoutType) {
    this.payoutType = payoutType;
    return this;
  }

  /**
   * The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF
   * @return payoutType
   */
  @javax.annotation.Nullable
  public String getPayoutType() {
    return payoutType;
  }

  public void setPayoutType(String payoutType) {
    this.payoutType = payoutType;
  }


  public GetPaymentsForPayoutResponseV4Summary quoted(PayoutPrincipal quoted) {
    this.quoted = quoted;
    return this;
  }

  /**
   * Get quoted
   * @return quoted
   */
  @javax.annotation.Nullable
  public PayoutPrincipal getQuoted() {
    return quoted;
  }

  public void setQuoted(PayoutPrincipal quoted) {
    this.quoted = quoted;
  }


  public GetPaymentsForPayoutResponseV4Summary quotedDateTime(OffsetDateTime quotedDateTime) {
    this.quotedDateTime = quotedDateTime;
    return this;
  }

  /**
   * The date/time at which the payout was quoted.
   * @return quotedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getQuotedDateTime() {
    return quotedDateTime;
  }

  public void setQuotedDateTime(OffsetDateTime quotedDateTime) {
    this.quotedDateTime = quotedDateTime;
  }


  public GetPaymentsForPayoutResponseV4Summary releasedPayments(Integer releasedPayments) {
    this.releasedPayments = releasedPayments;
    return this;
  }

  /**
   * The count of payments within the payout which have been released.
   * @return releasedPayments
   */
  @javax.annotation.Nullable
  public Integer getReleasedPayments() {
    return releasedPayments;
  }

  public void setReleasedPayments(Integer releasedPayments) {
    this.releasedPayments = releasedPayments;
  }


  public GetPaymentsForPayoutResponseV4Summary returnedPayments(Integer returnedPayments) {
    this.returnedPayments = returnedPayments;
    return this;
  }

  /**
   * The count of payments within the payout which have been returned.
   * @return returnedPayments
   */
  @javax.annotation.Nullable
  public Integer getReturnedPayments() {
    return returnedPayments;
  }

  public void setReturnedPayments(Integer returnedPayments) {
    this.returnedPayments = returnedPayments;
  }


  public GetPaymentsForPayoutResponseV4Summary schedule(PayoutSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public PayoutSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(PayoutSchedule schedule) {
    this.schedule = schedule;
  }


  public GetPaymentsForPayoutResponseV4Summary submittedDateTime(OffsetDateTime submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
    return this;
  }

  /**
   * The date/time at which the payout was submitted.
   * @return submittedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedDateTime() {
    return submittedDateTime;
  }

  public void setSubmittedDateTime(OffsetDateTime submittedDateTime) {
    this.submittedDateTime = submittedDateTime;
  }


  public GetPaymentsForPayoutResponseV4Summary submitting(PayoutPayor submitting) {
    this.submitting = submitting;
    return this;
  }

  /**
   * Get submitting
   * @return submitting
   */
  @javax.annotation.Nullable
  public PayoutPayor getSubmitting() {
    return submitting;
  }

  public void setSubmitting(PayoutPayor submitting) {
    this.submitting = submitting;
  }


  public GetPaymentsForPayoutResponseV4Summary totalPayments(Integer totalPayments) {
    this.totalPayments = totalPayments;
    return this;
  }

  /**
   * The count of payments within the payout.
   * @return totalPayments
   */
  @javax.annotation.Nullable
  public Integer getTotalPayments() {
    return totalPayments;
  }

  public void setTotalPayments(Integer totalPayments) {
    this.totalPayments = totalPayments;
  }


  public GetPaymentsForPayoutResponseV4Summary withdrawn(PayoutPrincipal withdrawn) {
    this.withdrawn = withdrawn;
    return this;
  }

  /**
   * Get withdrawn
   * @return withdrawn
   */
  @javax.annotation.Nullable
  public PayoutPrincipal getWithdrawn() {
    return withdrawn;
  }

  public void setWithdrawn(PayoutPrincipal withdrawn) {
    this.withdrawn = withdrawn;
  }


  public GetPaymentsForPayoutResponseV4Summary withdrawnDateTime(OffsetDateTime withdrawnDateTime) {
    this.withdrawnDateTime = withdrawnDateTime;
    return this;
  }

  /**
   * Get withdrawnDateTime
   * @return withdrawnDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWithdrawnDateTime() {
    return withdrawnDateTime;
  }

  public void setWithdrawnDateTime(OffsetDateTime withdrawnDateTime) {
    this.withdrawnDateTime = withdrawnDateTime;
  }


  public GetPaymentsForPayoutResponseV4Summary withdrawnPayments(Integer withdrawnPayments) {
    this.withdrawnPayments = withdrawnPayments;
    return this;
  }

  /**
   * The count of payments within the payout which have been withdrawn.
   * @return withdrawnPayments
   */
  @javax.annotation.Nullable
  public Integer getWithdrawnPayments() {
    return withdrawnPayments;
  }

  public void setWithdrawnPayments(Integer withdrawnPayments) {
    this.withdrawnPayments = withdrawnPayments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPaymentsForPayoutResponseV4Summary getPaymentsForPayoutResponseV4Summary = (GetPaymentsForPayoutResponseV4Summary) o;
    return Objects.equals(this.confirmedPayments, getPaymentsForPayoutResponseV4Summary.confirmedPayments) &&
        Objects.equals(this.incompletePayments, getPaymentsForPayoutResponseV4Summary.incompletePayments) &&
        Objects.equals(this.instructed, getPaymentsForPayoutResponseV4Summary.instructed) &&
        Objects.equals(this.instructedDateTime, getPaymentsForPayoutResponseV4Summary.instructedDateTime) &&
        Objects.equals(this.payoutFrom, getPaymentsForPayoutResponseV4Summary.payoutFrom) &&
        Objects.equals(this.payoutMemo, getPaymentsForPayoutResponseV4Summary.payoutMemo) &&
        Objects.equals(this.payoutStatus, getPaymentsForPayoutResponseV4Summary.payoutStatus) &&
        Objects.equals(this.payoutTo, getPaymentsForPayoutResponseV4Summary.payoutTo) &&
        Objects.equals(this.payoutType, getPaymentsForPayoutResponseV4Summary.payoutType) &&
        Objects.equals(this.quoted, getPaymentsForPayoutResponseV4Summary.quoted) &&
        Objects.equals(this.quotedDateTime, getPaymentsForPayoutResponseV4Summary.quotedDateTime) &&
        Objects.equals(this.releasedPayments, getPaymentsForPayoutResponseV4Summary.releasedPayments) &&
        Objects.equals(this.returnedPayments, getPaymentsForPayoutResponseV4Summary.returnedPayments) &&
        Objects.equals(this.schedule, getPaymentsForPayoutResponseV4Summary.schedule) &&
        Objects.equals(this.submittedDateTime, getPaymentsForPayoutResponseV4Summary.submittedDateTime) &&
        Objects.equals(this.submitting, getPaymentsForPayoutResponseV4Summary.submitting) &&
        Objects.equals(this.totalPayments, getPaymentsForPayoutResponseV4Summary.totalPayments) &&
        Objects.equals(this.withdrawn, getPaymentsForPayoutResponseV4Summary.withdrawn) &&
        Objects.equals(this.withdrawnDateTime, getPaymentsForPayoutResponseV4Summary.withdrawnDateTime) &&
        Objects.equals(this.withdrawnPayments, getPaymentsForPayoutResponseV4Summary.withdrawnPayments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmedPayments, incompletePayments, instructed, instructedDateTime, payoutFrom, payoutMemo, payoutStatus, payoutTo, payoutType, quoted, quotedDateTime, releasedPayments, returnedPayments, schedule, submittedDateTime, submitting, totalPayments, withdrawn, withdrawnDateTime, withdrawnPayments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPaymentsForPayoutResponseV4Summary {\n");
    sb.append("    confirmedPayments: ").append(toIndentedString(confirmedPayments)).append("\n");
    sb.append("    incompletePayments: ").append(toIndentedString(incompletePayments)).append("\n");
    sb.append("    instructed: ").append(toIndentedString(instructed)).append("\n");
    sb.append("    instructedDateTime: ").append(toIndentedString(instructedDateTime)).append("\n");
    sb.append("    payoutFrom: ").append(toIndentedString(payoutFrom)).append("\n");
    sb.append("    payoutMemo: ").append(toIndentedString(payoutMemo)).append("\n");
    sb.append("    payoutStatus: ").append(toIndentedString(payoutStatus)).append("\n");
    sb.append("    payoutTo: ").append(toIndentedString(payoutTo)).append("\n");
    sb.append("    payoutType: ").append(toIndentedString(payoutType)).append("\n");
    sb.append("    quoted: ").append(toIndentedString(quoted)).append("\n");
    sb.append("    quotedDateTime: ").append(toIndentedString(quotedDateTime)).append("\n");
    sb.append("    releasedPayments: ").append(toIndentedString(releasedPayments)).append("\n");
    sb.append("    returnedPayments: ").append(toIndentedString(returnedPayments)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    submittedDateTime: ").append(toIndentedString(submittedDateTime)).append("\n");
    sb.append("    submitting: ").append(toIndentedString(submitting)).append("\n");
    sb.append("    totalPayments: ").append(toIndentedString(totalPayments)).append("\n");
    sb.append("    withdrawn: ").append(toIndentedString(withdrawn)).append("\n");
    sb.append("    withdrawnDateTime: ").append(toIndentedString(withdrawnDateTime)).append("\n");
    sb.append("    withdrawnPayments: ").append(toIndentedString(withdrawnPayments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmedPayments");
    openapiFields.add("incompletePayments");
    openapiFields.add("instructed");
    openapiFields.add("instructedDateTime");
    openapiFields.add("payoutFrom");
    openapiFields.add("payoutMemo");
    openapiFields.add("payoutStatus");
    openapiFields.add("payoutTo");
    openapiFields.add("payoutType");
    openapiFields.add("quoted");
    openapiFields.add("quotedDateTime");
    openapiFields.add("releasedPayments");
    openapiFields.add("returnedPayments");
    openapiFields.add("schedule");
    openapiFields.add("submittedDateTime");
    openapiFields.add("submitting");
    openapiFields.add("totalPayments");
    openapiFields.add("withdrawn");
    openapiFields.add("withdrawnDateTime");
    openapiFields.add("withdrawnPayments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPaymentsForPayoutResponseV4Summary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPaymentsForPayoutResponseV4Summary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPaymentsForPayoutResponseV4Summary is not found in the empty JSON string", GetPaymentsForPayoutResponseV4Summary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPaymentsForPayoutResponseV4Summary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPaymentsForPayoutResponseV4Summary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `instructed`
      if (jsonObj.get("instructed") != null && !jsonObj.get("instructed").isJsonNull()) {
        PayoutPrincipal.validateJsonElement(jsonObj.get("instructed"));
      }
      // validate the optional field `payoutFrom`
      if (jsonObj.get("payoutFrom") != null && !jsonObj.get("payoutFrom").isJsonNull()) {
        PayoutPayor.validateJsonElement(jsonObj.get("payoutFrom"));
      }
      if ((jsonObj.get("payoutMemo") != null && !jsonObj.get("payoutMemo").isJsonNull()) && !jsonObj.get("payoutMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutMemo").toString()));
      }
      if ((jsonObj.get("payoutStatus") != null && !jsonObj.get("payoutStatus").isJsonNull()) && !jsonObj.get("payoutStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutStatus").toString()));
      }
      // validate the optional field `payoutTo`
      if (jsonObj.get("payoutTo") != null && !jsonObj.get("payoutTo").isJsonNull()) {
        PayoutPayor.validateJsonElement(jsonObj.get("payoutTo"));
      }
      if ((jsonObj.get("payoutType") != null && !jsonObj.get("payoutType").isJsonNull()) && !jsonObj.get("payoutType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutType").toString()));
      }
      // validate the optional field `quoted`
      if (jsonObj.get("quoted") != null && !jsonObj.get("quoted").isJsonNull()) {
        PayoutPrincipal.validateJsonElement(jsonObj.get("quoted"));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        PayoutSchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      // validate the optional field `submitting`
      if (jsonObj.get("submitting") != null && !jsonObj.get("submitting").isJsonNull()) {
        PayoutPayor.validateJsonElement(jsonObj.get("submitting"));
      }
      // validate the optional field `withdrawn`
      if (jsonObj.get("withdrawn") != null && !jsonObj.get("withdrawn").isJsonNull()) {
        PayoutPrincipal.validateJsonElement(jsonObj.get("withdrawn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPaymentsForPayoutResponseV4Summary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPaymentsForPayoutResponseV4Summary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPaymentsForPayoutResponseV4Summary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPaymentsForPayoutResponseV4Summary.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPaymentsForPayoutResponseV4Summary>() {
           @Override
           public void write(JsonWriter out, GetPaymentsForPayoutResponseV4Summary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPaymentsForPayoutResponseV4Summary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPaymentsForPayoutResponseV4Summary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPaymentsForPayoutResponseV4Summary
   * @throws IOException if the JSON string is invalid with respect to GetPaymentsForPayoutResponseV4Summary
   */
  public static GetPaymentsForPayoutResponseV4Summary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPaymentsForPayoutResponseV4Summary.class);
  }

  /**
   * Convert an instance of GetPaymentsForPayoutResponseV4Summary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

