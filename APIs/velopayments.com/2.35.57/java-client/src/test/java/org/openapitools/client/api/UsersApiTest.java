/*
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.35.57
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse409;
import org.openapitools.client.model.InlineResponse412;
import org.openapitools.client.model.InviteUserRequest;
import org.openapitools.client.model.PagedUserResponse;
import org.openapitools.client.model.PasswordRequest;
import org.openapitools.client.model.PayeeType;
import org.openapitools.client.model.PayeeUserSelfUpdateRequest;
import org.openapitools.client.model.RegisterSmsRequest;
import org.openapitools.client.model.ResendTokenRequest;
import org.openapitools.client.model.RoleUpdateRequest;
import org.openapitools.client.model.SelfMFATypeUnregisterRequest;
import org.openapitools.client.model.SelfUpdatePasswordRequest;
import java.util.UUID;
import org.openapitools.client.model.UnregisterMFARequest;
import org.openapitools.client.model.UserDetailsUpdateRequest;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.UserStatus;
import org.openapitools.client.model.UserType;
import org.openapitools.client.model.ValidatePasswordResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete a User
     *
     * Delete User by Id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserByIdV2Test() throws ApiException {
        UUID userId = null;
        api.deleteUserByIdV2(userId);
        // TODO: test validations
    }

    /**
     * Disable a User
     *
     * &lt;p&gt;If a user is enabled this endpoint will disable them &lt;/p&gt; &lt;p&gt;The invoker must have the appropriate permission &lt;/p&gt; &lt;p&gt;A user cannot disable themself &lt;/p&gt; &lt;p&gt;When a user is disabled any active access tokens will be revoked and the user will not be able to log in&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUserV2Test() throws ApiException {
        UUID userId = null;
        api.disableUserV2(userId);
        // TODO: test validations
    }

    /**
     * Enable a User
     *
     * &lt;p&gt;If a user has been disabled this endpoints will enable them &lt;/p&gt; &lt;p&gt;The invoker must have the appropriate permission &lt;/p&gt; &lt;p&gt;A user cannot enable themself &lt;/p&gt; &lt;p&gt;If the user is a payor user and the payor is disabled this operation is not allowed&lt;/p&gt; &lt;p&gt;If enabling a payor user would breach the limit for master admin payor users the request will be rejected &lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUserV2Test() throws ApiException {
        UUID userId = null;
        api.enableUserV2(userId);
        // TODO: test validations
    }

    /**
     * Get Self
     *
     * Get the user&#39;s details 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfTest() throws ApiException {
        UserResponse response = api.getSelf();
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Get a Single User by Id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdV2Test() throws ApiException {
        UUID userId = null;
        UserResponse response = api.getUserByIdV2(userId);
        // TODO: test validations
    }

    /**
     * Invite a User
     *
     * Create a User and invite them to the system 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserTest() throws ApiException {
        InviteUserRequest inviteUserRequest = null;
        api.inviteUser(inviteUserRequest);
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Get a paginated response listing the Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        UserType type = null;
        UserStatus status = null;
        UUID entityId = null;
        PayeeType payeeType = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        PagedUserResponse response = api.listUsers(type, status, entityId, payeeType, page, pageSize, sort);
        // TODO: test validations
    }

    /**
     * Register SMS Number
     *
     * &lt;p&gt;Register an Sms number and send an OTP to it &lt;/p&gt; &lt;p&gt;Used for manual verification of a user &lt;/p&gt; &lt;p&gt;The backoffice user initiates the request to send the OTP to the user&#39;s sms &lt;/p&gt; &lt;p&gt;The user then reads back the OTP which the backoffice user enters in the verifactionCode property for requests that require it&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerSmsTest() throws ApiException {
        RegisterSmsRequest registerSmsRequest = null;
        api.registerSms(registerSmsRequest);
        // TODO: test validations
    }

    /**
     * Resend a token
     *
     * &lt;p&gt;Resend the specified token &lt;/p&gt; &lt;p&gt;The token to resend must already exist for the user &lt;/p&gt; &lt;p&gt;It will be revoked and a new one issued&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendToken_0Test() throws ApiException {
        UUID userId = null;
        ResendTokenRequest resendTokenRequest = null;
        api.resendToken_0(userId, resendTokenRequest);
        // TODO: test validations
    }

    /**
     * Update User Role
     *
     * &lt;p&gt;Update the user&#39;s Role&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleUpdateTest() throws ApiException {
        UUID userId = null;
        RoleUpdateRequest roleUpdateRequest = null;
        api.roleUpdate(userId, roleUpdateRequest);
        // TODO: test validations
    }

    /**
     * Unlock a User
     *
     * If a user is locked this endpoint will unlock them 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockUserV2Test() throws ApiException {
        UUID userId = null;
        api.unlockUserV2(userId);
        // TODO: test validations
    }

    /**
     * Unregister MFA for the user
     *
     * &lt;p&gt;Unregister the MFA device for the user &lt;/p&gt; &lt;p&gt;If the user does not require further verification then a register new MFA device token will be sent to them via their email address&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterMFATest() throws ApiException {
        UUID userId = null;
        UnregisterMFARequest unregisterMFARequest = null;
        api.unregisterMFA(userId, unregisterMFARequest);
        // TODO: test validations
    }

    /**
     * Unregister MFA for Self
     *
     * &lt;p&gt;Unregister the MFA device for the user &lt;/p&gt; &lt;p&gt;If the user does not require further verification then a register new MFA device token will be sent to them via their email address&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterMFAForSelfTest() throws ApiException {
        SelfMFATypeUnregisterRequest selfMFATypeUnregisterRequest = null;
        String authorization = null;
        api.unregisterMFAForSelf(selfMFATypeUnregisterRequest, authorization);
        // TODO: test validations
    }

    /**
     * Update Password for self
     *
     * Update password for self 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePasswordSelfTest() throws ApiException {
        SelfUpdatePasswordRequest selfUpdatePasswordRequest = null;
        api.updatePasswordSelf(selfUpdatePasswordRequest);
        // TODO: test validations
    }

    /**
     * Update User Details
     *
     * &lt;p&gt;Update the profile details for the given user&lt;/p&gt; &lt;p&gt;When updating Payor users with the role of payor.master_admin a verificationCode is required&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDetailsUpdateTest() throws ApiException {
        UUID userId = null;
        UserDetailsUpdateRequest userDetailsUpdateRequest = null;
        api.userDetailsUpdate(userId, userDetailsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update User Details for self
     *
     * &lt;p&gt;Update the profile details for the given user&lt;/p&gt; &lt;p&gt;Only Payee user types are supported&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDetailsUpdateForSelfTest() throws ApiException {
        PayeeUserSelfUpdateRequest payeeUserSelfUpdateRequest = null;
        api.userDetailsUpdateForSelf(payeeUserSelfUpdateRequest);
        // TODO: test validations
    }

    /**
     * Validate the proposed password
     *
     * validate the password and return a score 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validatePasswordSelfTest() throws ApiException {
        PasswordRequest passwordRequest = null;
        ValidatePasswordResponse response = api.validatePasswordSelf(passwordRequest);
        // TODO: test validations
    }

}
