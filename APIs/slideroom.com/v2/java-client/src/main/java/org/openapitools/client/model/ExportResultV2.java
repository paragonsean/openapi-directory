/*
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportResultV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:10.117188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportResultV2 {
  public static final String SERIALIZED_NAME_COMPLETED_FILES = "completed_files";
  @SerializedName(SERIALIZED_NAME_COMPLETED_FILES)
  private Integer completedFiles;

  public static final String SERIALIZED_NAME_FILE_URLS = "file_urls";
  @SerializedName(SERIALIZED_NAME_FILE_URLS)
  private List<String> fileUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_FILES = "total_files";
  @SerializedName(SERIALIZED_NAME_TOTAL_FILES)
  private Integer totalFiles;

  public ExportResultV2() {
  }

  public ExportResultV2 completedFiles(Integer completedFiles) {
    this.completedFiles = completedFiles;
    return this;
  }

  /**
   * Get completedFiles
   * @return completedFiles
   */
  @javax.annotation.Nullable
  public Integer getCompletedFiles() {
    return completedFiles;
  }

  public void setCompletedFiles(Integer completedFiles) {
    this.completedFiles = completedFiles;
  }


  public ExportResultV2 fileUrls(List<String> fileUrls) {
    this.fileUrls = fileUrls;
    return this;
  }

  public ExportResultV2 addFileUrlsItem(String fileUrlsItem) {
    if (this.fileUrls == null) {
      this.fileUrls = new ArrayList<>();
    }
    this.fileUrls.add(fileUrlsItem);
    return this;
  }

  /**
   * Get fileUrls
   * @return fileUrls
   */
  @javax.annotation.Nullable
  public List<String> getFileUrls() {
    return fileUrls;
  }

  public void setFileUrls(List<String> fileUrls) {
    this.fileUrls = fileUrls;
  }


  public ExportResultV2 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ExportResultV2 totalFiles(Integer totalFiles) {
    this.totalFiles = totalFiles;
    return this;
  }

  /**
   * Get totalFiles
   * @return totalFiles
   */
  @javax.annotation.Nullable
  public Integer getTotalFiles() {
    return totalFiles;
  }

  public void setTotalFiles(Integer totalFiles) {
    this.totalFiles = totalFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportResultV2 exportResultV2 = (ExportResultV2) o;
    return Objects.equals(this.completedFiles, exportResultV2.completedFiles) &&
        Objects.equals(this.fileUrls, exportResultV2.fileUrls) &&
        Objects.equals(this.status, exportResultV2.status) &&
        Objects.equals(this.totalFiles, exportResultV2.totalFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedFiles, fileUrls, status, totalFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportResultV2 {\n");
    sb.append("    completedFiles: ").append(toIndentedString(completedFiles)).append("\n");
    sb.append("    fileUrls: ").append(toIndentedString(fileUrls)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalFiles: ").append(toIndentedString(totalFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed_files");
    openapiFields.add("file_urls");
    openapiFields.add("status");
    openapiFields.add("total_files");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportResultV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportResultV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportResultV2 is not found in the empty JSON string", ExportResultV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportResultV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportResultV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("file_urls") != null && !jsonObj.get("file_urls").isJsonNull() && !jsonObj.get("file_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_urls` to be an array in the JSON string but got `%s`", jsonObj.get("file_urls").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportResultV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportResultV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportResultV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportResultV2.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportResultV2>() {
           @Override
           public void write(JsonWriter out, ExportResultV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportResultV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportResultV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportResultV2
   * @throws IOException if the JSON string is invalid with respect to ExportResultV2
   */
  public static ExportResultV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportResultV2.class);
  }

  /**
   * Convert an instance of ExportResultV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

