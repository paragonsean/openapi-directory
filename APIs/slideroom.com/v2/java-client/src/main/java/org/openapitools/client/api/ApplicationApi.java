/*
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestApplicationExportResultV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationDeleteAttributesV2
     * @param applicationId The ID of the application. (required)
     * @param name The name of the attribute to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationDeleteAttributesV2Call(String applicationId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/application/{applicationId}/attributes"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationDeleteAttributesV2ValidateBeforeCall(String applicationId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationDeleteAttributesV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling applicationDeleteAttributesV2(Async)");
        }

        return applicationDeleteAttributesV2Call(applicationId, name, _callback);

    }

    /**
     * Deletes a custom attribute for an application.
     * 
     * @param applicationId The ID of the application. (required)
     * @param name The name of the attribute to be deleted. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String applicationDeleteAttributesV2(String applicationId, String name) throws ApiException {
        ApiResponse<String> localVarResp = applicationDeleteAttributesV2WithHttpInfo(applicationId, name);
        return localVarResp.getData();
    }

    /**
     * Deletes a custom attribute for an application.
     * 
     * @param applicationId The ID of the application. (required)
     * @param name The name of the attribute to be deleted. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationDeleteAttributesV2WithHttpInfo(String applicationId, String name) throws ApiException {
        okhttp3.Call localVarCall = applicationDeleteAttributesV2ValidateBeforeCall(applicationId, name, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a custom attribute for an application. (asynchronously)
     * 
     * @param applicationId The ID of the application. (required)
     * @param name The name of the attribute to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationDeleteAttributesV2Async(String applicationId, String name, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationDeleteAttributesV2ValidateBeforeCall(applicationId, name, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGetAttributeNamesV2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAttributeNamesV2Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/application/attributes/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGetAttributeNamesV2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return applicationGetAttributeNamesV2Call(_callback);

    }

    /**
     * Gets the custom application attributes used by the organization.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> applicationGetAttributeNamesV2() throws ApiException {
        ApiResponse<List<String>> localVarResp = applicationGetAttributeNamesV2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the custom application attributes used by the organization.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> applicationGetAttributeNamesV2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = applicationGetAttributeNamesV2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the custom application attributes used by the organization. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAttributeNamesV2Async(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGetAttributeNamesV2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGetAttributesV2
     * @param applicationId The ID of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAttributesV2Call(String applicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/application/{applicationId}/attributes"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGetAttributesV2ValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationGetAttributesV2(Async)");
        }

        return applicationGetAttributesV2Call(applicationId, _callback);

    }

    /**
     * Gets the custom attributes for an application.
     * 
     * @param applicationId The ID of the application. (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> applicationGetAttributesV2(String applicationId) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = applicationGetAttributesV2WithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * Gets the custom attributes for an application.
     * 
     * @param applicationId The ID of the application. (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> applicationGetAttributesV2WithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = applicationGetAttributesV2ValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the custom attributes for an application. (asynchronously)
     * 
     * @param applicationId The ID of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAttributesV2Async(String applicationId, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGetAttributesV2ValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationPostAttributesV2
     * @param applicationId The ID of the application. (required)
     * @param data The name/value pairs of the attributes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationPostAttributesV2Call(String applicationId, Map<String, String> data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/api/v2/application/{applicationId}/attributes"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationPostAttributesV2ValidateBeforeCall(String applicationId, Map<String, String> data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationPostAttributesV2(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling applicationPostAttributesV2(Async)");
        }

        return applicationPostAttributesV2Call(applicationId, data, _callback);

    }

    /**
     * Updates the custom attributes for an application. API Import is available in the Advanced Plan.
     * This method only adds or updates attributes. Null values will be updated as nulls, but not deleted.
     * @param applicationId The ID of the application. (required)
     * @param data The name/value pairs of the attributes. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String applicationPostAttributesV2(String applicationId, Map<String, String> data) throws ApiException {
        ApiResponse<String> localVarResp = applicationPostAttributesV2WithHttpInfo(applicationId, data);
        return localVarResp.getData();
    }

    /**
     * Updates the custom attributes for an application. API Import is available in the Advanced Plan.
     * This method only adds or updates attributes. Null values will be updated as nulls, but not deleted.
     * @param applicationId The ID of the application. (required)
     * @param data The name/value pairs of the attributes. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationPostAttributesV2WithHttpInfo(String applicationId, Map<String, String> data) throws ApiException {
        okhttp3.Call localVarCall = applicationPostAttributesV2ValidateBeforeCall(applicationId, data, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the custom attributes for an application. API Import is available in the Advanced Plan. (asynchronously)
     * This method only adds or updates attributes. Null values will be updated as nulls, but not deleted.
     * @param applicationId The ID of the application. (required)
     * @param data The name/value pairs of the attributes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationPostAttributesV2Async(String applicationId, Map<String, String> data, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationPostAttributesV2ValidateBeforeCall(applicationId, data, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationRequestExportByApplicationIdV2
     * @param applicationId The id of the application to export (required)
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationRequestExportByApplicationIdV2Call(String applicationId, String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/application/{applicationId}/request-export"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (roundType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundType", roundType));
        }

        if (roundName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundName", roundName));
        }

        if (tabExport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tab.export", tabExport));
        }

        if (pdfIncludeForms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeForms", pdfIncludeForms));
        }

        if (pdfIncludeReferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeReferences", pdfIncludeReferences));
        }

        if (pdfIncludeMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeMedia", pdfIncludeMedia));
        }

        if (pdfIncludeApplicantAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeApplicantAttachments", pdfIncludeApplicantAttachments));
        }

        if (pdfIncludeOrganizationAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeOrganizationAttachments", pdfIncludeOrganizationAttachments));
        }

        if (pdfIncludeRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeRatings", pdfIncludeRatings));
        }

        if (pdfIncludeFullPageMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeFullPageMedia", pdfIncludeFullPageMedia));
        }

        if (pdfIncludeHighlights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeHighlights", pdfIncludeHighlights));
        }

        if (pdfIncludeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeComments", pdfIncludeComments));
        }

        if (pdfIncludeCommonApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeCommonApp", pdfIncludeCommonApp));
        }

        if (zipOriginalMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.originalMedia", zipOriginalMedia));
        }

        if (zipIncludeForms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeForms", zipIncludeForms));
        }

        if (zipIncludeReferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeReferences", zipIncludeReferences));
        }

        if (zipIncludeMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeMedia", zipIncludeMedia));
        }

        if (zipIncludeApplicantAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeApplicantAttachments", zipIncludeApplicantAttachments));
        }

        if (zipIncludeOrganizationAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeOrganizationAttachments", zipIncludeOrganizationAttachments));
        }

        if (zipIncludeRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeRatings", zipIncludeRatings));
        }

        if (zipIncludeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeComments", zipIncludeComments));
        }

        if (zipIncludeCommonApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeCommonApp", zipIncludeCommonApp));
        }

        if (deliveryAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.account", deliveryAccount));
        }

        if (deliveryFolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.folder", deliveryFolder));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationRequestExportByApplicationIdV2ValidateBeforeCall(String applicationId, String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationRequestExportByApplicationIdV2(Async)");
        }

        return applicationRequestExportByApplicationIdV2Call(applicationId, format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, _callback);

    }

    /**
     * Requests the generation of a single application export file (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.
     * @param applicationId The id of the application to export (required)
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @return RequestApplicationExportResultV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RequestApplicationExportResultV2 applicationRequestExportByApplicationIdV2(String applicationId, String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder) throws ApiException {
        ApiResponse<RequestApplicationExportResultV2> localVarResp = applicationRequestExportByApplicationIdV2WithHttpInfo(applicationId, format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder);
        return localVarResp.getData();
    }

    /**
     * Requests the generation of a single application export file (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.
     * @param applicationId The id of the application to export (required)
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @return ApiResponse&lt;RequestApplicationExportResultV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestApplicationExportResultV2> applicationRequestExportByApplicationIdV2WithHttpInfo(String applicationId, String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder) throws ApiException {
        okhttp3.Call localVarCall = applicationRequestExportByApplicationIdV2ValidateBeforeCall(applicationId, format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, null);
        Type localVarReturnType = new TypeToken<RequestApplicationExportResultV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests the generation of a single application export file (tabular, pdf, zip). (asynchronously)
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.
     * @param applicationId The id of the application to export (required)
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationRequestExportByApplicationIdV2Async(String applicationId, String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, final ApiCallback<RequestApplicationExportResultV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationRequestExportByApplicationIdV2ValidateBeforeCall(applicationId, format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, _callback);
        Type localVarReturnType = new TypeToken<RequestApplicationExportResultV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationRequestExportV2
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param since  (optional)
     * @param pool  (optional)
     * @param status  (optional)
     * @param searchName  (optional)
     * @param email  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationRequestExportV2Call(String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, Integer since, String pool, String status, String searchName, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/application/request-export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (roundType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundType", roundType));
        }

        if (roundName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundName", roundName));
        }

        if (tabExport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tab.export", tabExport));
        }

        if (pdfIncludeForms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeForms", pdfIncludeForms));
        }

        if (pdfIncludeReferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeReferences", pdfIncludeReferences));
        }

        if (pdfIncludeMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeMedia", pdfIncludeMedia));
        }

        if (pdfIncludeApplicantAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeApplicantAttachments", pdfIncludeApplicantAttachments));
        }

        if (pdfIncludeOrganizationAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeOrganizationAttachments", pdfIncludeOrganizationAttachments));
        }

        if (pdfIncludeRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeRatings", pdfIncludeRatings));
        }

        if (pdfIncludeFullPageMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeFullPageMedia", pdfIncludeFullPageMedia));
        }

        if (pdfIncludeHighlights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeHighlights", pdfIncludeHighlights));
        }

        if (pdfIncludeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeComments", pdfIncludeComments));
        }

        if (pdfIncludeCommonApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf.includeCommonApp", pdfIncludeCommonApp));
        }

        if (zipOriginalMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.originalMedia", zipOriginalMedia));
        }

        if (zipIncludeForms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeForms", zipIncludeForms));
        }

        if (zipIncludeReferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeReferences", zipIncludeReferences));
        }

        if (zipIncludeMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeMedia", zipIncludeMedia));
        }

        if (zipIncludeApplicantAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeApplicantAttachments", zipIncludeApplicantAttachments));
        }

        if (zipIncludeOrganizationAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeOrganizationAttachments", zipIncludeOrganizationAttachments));
        }

        if (zipIncludeRatings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeRatings", zipIncludeRatings));
        }

        if (zipIncludeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeComments", zipIncludeComments));
        }

        if (zipIncludeCommonApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip.includeCommonApp", zipIncludeCommonApp));
        }

        if (deliveryAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.account", deliveryAccount));
        }

        if (deliveryFolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery.folder", deliveryFolder));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (pool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool", pool));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (searchName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchName", searchName));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationRequestExportV2ValidateBeforeCall(String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, Integer since, String pool, String status, String searchName, String email, final ApiCallback _callback) throws ApiException {
        return applicationRequestExportV2Call(format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, since, pool, status, searchName, email, _callback);

    }

    /**
     * Requests the generation of application export files (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.  PDF and ZIP exports are available in the Advanced Plan.
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param since  (optional)
     * @param pool  (optional)
     * @param status  (optional)
     * @param searchName  (optional)
     * @param email  (optional)
     * @return RequestApplicationExportResultV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RequestApplicationExportResultV2 applicationRequestExportV2(String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, Integer since, String pool, String status, String searchName, String email) throws ApiException {
        ApiResponse<RequestApplicationExportResultV2> localVarResp = applicationRequestExportV2WithHttpInfo(format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, since, pool, status, searchName, email);
        return localVarResp.getData();
    }

    /**
     * Requests the generation of application export files (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.  PDF and ZIP exports are available in the Advanced Plan.
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param since  (optional)
     * @param pool  (optional)
     * @param status  (optional)
     * @param searchName  (optional)
     * @param email  (optional)
     * @return ApiResponse&lt;RequestApplicationExportResultV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestApplicationExportResultV2> applicationRequestExportV2WithHttpInfo(String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, Integer since, String pool, String status, String searchName, String email) throws ApiException {
        okhttp3.Call localVarCall = applicationRequestExportV2ValidateBeforeCall(format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, since, pool, status, searchName, email, null);
        Type localVarReturnType = new TypeToken<RequestApplicationExportResultV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests the generation of application export files (tabular, pdf, zip). (asynchronously)
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.  PDF and ZIP exports are available in the Advanced Plan.
     * @param format  (optional)
     * @param roundType  (optional)
     * @param roundName  (optional)
     * @param tabExport  (optional)
     * @param pdfIncludeForms  (optional)
     * @param pdfIncludeReferences  (optional)
     * @param pdfIncludeMedia  (optional)
     * @param pdfIncludeApplicantAttachments  (optional)
     * @param pdfIncludeOrganizationAttachments  (optional)
     * @param pdfIncludeRatings  (optional)
     * @param pdfIncludeFullPageMedia  (optional)
     * @param pdfIncludeHighlights  (optional)
     * @param pdfIncludeComments  (optional)
     * @param pdfIncludeCommonApp  (optional)
     * @param zipOriginalMedia  (optional)
     * @param zipIncludeForms  (optional)
     * @param zipIncludeReferences  (optional)
     * @param zipIncludeMedia  (optional)
     * @param zipIncludeApplicantAttachments  (optional)
     * @param zipIncludeOrganizationAttachments  (optional)
     * @param zipIncludeRatings  (optional)
     * @param zipIncludeComments  (optional)
     * @param zipIncludeCommonApp  (optional)
     * @param deliveryAccount  (optional)
     * @param deliveryFolder  (optional)
     * @param since  (optional)
     * @param pool  (optional)
     * @param status  (optional)
     * @param searchName  (optional)
     * @param email  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationRequestExportV2Async(String format, String roundType, String roundName, String tabExport, Boolean pdfIncludeForms, Boolean pdfIncludeReferences, Boolean pdfIncludeMedia, Boolean pdfIncludeApplicantAttachments, Boolean pdfIncludeOrganizationAttachments, Boolean pdfIncludeRatings, Boolean pdfIncludeFullPageMedia, Boolean pdfIncludeHighlights, Boolean pdfIncludeComments, Boolean pdfIncludeCommonApp, Boolean zipOriginalMedia, Boolean zipIncludeForms, Boolean zipIncludeReferences, Boolean zipIncludeMedia, Boolean zipIncludeApplicantAttachments, Boolean zipIncludeOrganizationAttachments, Boolean zipIncludeRatings, Boolean zipIncludeComments, Boolean zipIncludeCommonApp, String deliveryAccount, String deliveryFolder, Integer since, String pool, String status, String searchName, String email, final ApiCallback<RequestApplicationExportResultV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationRequestExportV2ValidateBeforeCall(format, roundType, roundName, tabExport, pdfIncludeForms, pdfIncludeReferences, pdfIncludeMedia, pdfIncludeApplicantAttachments, pdfIncludeOrganizationAttachments, pdfIncludeRatings, pdfIncludeFullPageMedia, pdfIncludeHighlights, pdfIncludeComments, pdfIncludeCommonApp, zipOriginalMedia, zipIncludeForms, zipIncludeReferences, zipIncludeMedia, zipIncludeApplicantAttachments, zipIncludeOrganizationAttachments, zipIncludeRatings, zipIncludeComments, zipIncludeCommonApp, deliveryAccount, deliveryFolder, since, pool, status, searchName, email, _callback);
        Type localVarReturnType = new TypeToken<RequestApplicationExportResultV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
