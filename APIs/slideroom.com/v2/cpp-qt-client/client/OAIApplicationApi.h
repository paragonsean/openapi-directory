/**
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationApi_H
#define OAI_OAIApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRequestApplicationExportResultV2.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationApi(const int timeOut = 0);
    ~OAIApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void applicationDeleteAttributesV2(const QString &application_id, const QString &name);


    virtual void applicationGetAttributeNamesV2();

    /**
    * @param[in]  application_id QString [required]
    */
    virtual void applicationGetAttributesV2(const QString &application_id);

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  data QMap<QString, QString> [required]
    */
    virtual void applicationPostAttributesV2(const QString &application_id, const QMap<QString, QString> &data);

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  round_type QString [optional]
    * @param[in]  round_name QString [optional]
    * @param[in]  tab_export QString [optional]
    * @param[in]  pdf_include_forms bool [optional]
    * @param[in]  pdf_include_references bool [optional]
    * @param[in]  pdf_include_media bool [optional]
    * @param[in]  pdf_include_applicant_attachments bool [optional]
    * @param[in]  pdf_include_organization_attachments bool [optional]
    * @param[in]  pdf_include_ratings bool [optional]
    * @param[in]  pdf_include_full_page_media bool [optional]
    * @param[in]  pdf_include_highlights bool [optional]
    * @param[in]  pdf_include_comments bool [optional]
    * @param[in]  pdf_include_common_app bool [optional]
    * @param[in]  zip_original_media bool [optional]
    * @param[in]  zip_include_forms bool [optional]
    * @param[in]  zip_include_references bool [optional]
    * @param[in]  zip_include_media bool [optional]
    * @param[in]  zip_include_applicant_attachments bool [optional]
    * @param[in]  zip_include_organization_attachments bool [optional]
    * @param[in]  zip_include_ratings bool [optional]
    * @param[in]  zip_include_comments bool [optional]
    * @param[in]  zip_include_common_app bool [optional]
    * @param[in]  delivery_account QString [optional]
    * @param[in]  delivery_folder QString [optional]
    */
    virtual void applicationRequestExportByApplicationIdV2(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &round_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &round_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tab_export = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_forms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_references = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_applicant_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_organization_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_ratings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_full_page_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_highlights = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_common_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_original_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_forms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_references = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_applicant_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_organization_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_ratings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_common_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &delivery_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delivery_folder = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  round_type QString [optional]
    * @param[in]  round_name QString [optional]
    * @param[in]  tab_export QString [optional]
    * @param[in]  pdf_include_forms bool [optional]
    * @param[in]  pdf_include_references bool [optional]
    * @param[in]  pdf_include_media bool [optional]
    * @param[in]  pdf_include_applicant_attachments bool [optional]
    * @param[in]  pdf_include_organization_attachments bool [optional]
    * @param[in]  pdf_include_ratings bool [optional]
    * @param[in]  pdf_include_full_page_media bool [optional]
    * @param[in]  pdf_include_highlights bool [optional]
    * @param[in]  pdf_include_comments bool [optional]
    * @param[in]  pdf_include_common_app bool [optional]
    * @param[in]  zip_original_media bool [optional]
    * @param[in]  zip_include_forms bool [optional]
    * @param[in]  zip_include_references bool [optional]
    * @param[in]  zip_include_media bool [optional]
    * @param[in]  zip_include_applicant_attachments bool [optional]
    * @param[in]  zip_include_organization_attachments bool [optional]
    * @param[in]  zip_include_ratings bool [optional]
    * @param[in]  zip_include_comments bool [optional]
    * @param[in]  zip_include_common_app bool [optional]
    * @param[in]  delivery_account QString [optional]
    * @param[in]  delivery_folder QString [optional]
    * @param[in]  since qint32 [optional]
    * @param[in]  pool QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  search_name QString [optional]
    * @param[in]  email QString [optional]
    */
    virtual void applicationRequestExportV2(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &round_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &round_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tab_export = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_forms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_references = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_applicant_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_organization_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_ratings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_full_page_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_highlights = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pdf_include_common_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_original_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_forms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_references = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_applicant_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_organization_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_ratings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &zip_include_common_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &delivery_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delivery_folder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationDeleteAttributesV2Callback(OAIHttpRequestWorker *worker);
    void applicationGetAttributeNamesV2Callback(OAIHttpRequestWorker *worker);
    void applicationGetAttributesV2Callback(OAIHttpRequestWorker *worker);
    void applicationPostAttributesV2Callback(OAIHttpRequestWorker *worker);
    void applicationRequestExportByApplicationIdV2Callback(OAIHttpRequestWorker *worker);
    void applicationRequestExportV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationDeleteAttributesV2Signal(QString summary);
    void applicationGetAttributeNamesV2Signal(QList<QString> summary);
    void applicationGetAttributesV2Signal(QMap<QString, QString> summary);
    void applicationPostAttributesV2Signal(QString summary);
    void applicationRequestExportByApplicationIdV2Signal(OAIRequestApplicationExportResultV2 summary);
    void applicationRequestExportV2Signal(OAIRequestApplicationExportResultV2 summary);


    void applicationDeleteAttributesV2SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationGetAttributeNamesV2SignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void applicationGetAttributesV2SignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void applicationPostAttributesV2SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationRequestExportByApplicationIdV2SignalFull(OAIHttpRequestWorker *worker, OAIRequestApplicationExportResultV2 summary);
    void applicationRequestExportV2SignalFull(OAIHttpRequestWorker *worker, OAIRequestApplicationExportResultV2 summary);

    Q_DECL_DEPRECATED_X("Use applicationDeleteAttributesV2SignalError() instead")
    void applicationDeleteAttributesV2SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationDeleteAttributesV2SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetAttributeNamesV2SignalError() instead")
    void applicationGetAttributeNamesV2SignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetAttributeNamesV2SignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetAttributesV2SignalError() instead")
    void applicationGetAttributesV2SignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetAttributesV2SignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationPostAttributesV2SignalError() instead")
    void applicationPostAttributesV2SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationPostAttributesV2SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationRequestExportByApplicationIdV2SignalError() instead")
    void applicationRequestExportByApplicationIdV2SignalE(OAIRequestApplicationExportResultV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationRequestExportByApplicationIdV2SignalError(OAIRequestApplicationExportResultV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationRequestExportV2SignalError() instead")
    void applicationRequestExportV2SignalE(OAIRequestApplicationExportResultV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationRequestExportV2SignalError(OAIRequestApplicationExportResultV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationDeleteAttributesV2SignalErrorFull() instead")
    void applicationDeleteAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationDeleteAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetAttributeNamesV2SignalErrorFull() instead")
    void applicationGetAttributeNamesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetAttributeNamesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetAttributesV2SignalErrorFull() instead")
    void applicationGetAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationPostAttributesV2SignalErrorFull() instead")
    void applicationPostAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationPostAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationRequestExportByApplicationIdV2SignalErrorFull() instead")
    void applicationRequestExportByApplicationIdV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationRequestExportByApplicationIdV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationRequestExportV2SignalErrorFull() instead")
    void applicationRequestExportV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationRequestExportV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
