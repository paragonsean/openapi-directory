/**
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicantApi_H
#define OAI_OAIApplicantApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicantApi : public QObject {
    Q_OBJECT

public:
    OAIApplicantApi(const int timeOut = 0);
    ~OAIApplicantApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email QString [required]
    * @param[in]  name QString [required]
    * @param[in]  pool QString [optional]
    * @param[in]  common_app_year qint32 [optional]
    */
    virtual void applicantDeleteAttributesV2(const QString &email, const QString &name, const ::OpenAPI::OptionalParam<QString> &pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &common_app_year = ::OpenAPI::OptionalParam<qint32>());


    virtual void applicantGetAttributeNamesV2();

    /**
    * @param[in]  email QString [required]
    * @param[in]  pool QString [optional]
    * @param[in]  common_app_year qint32 [optional]
    */
    virtual void applicantGetAttributesV2(const QString &email, const ::OpenAPI::OptionalParam<QString> &pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &common_app_year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  data QMap<QString, QString> [required]
    * @param[in]  pool QString [optional]
    * @param[in]  common_app_year qint32 [optional]
    */
    virtual void applicantPostAttributesV2(const QString &email, const QMap<QString, QString> &data, const ::OpenAPI::OptionalParam<QString> &pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &common_app_year = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicantDeleteAttributesV2Callback(OAIHttpRequestWorker *worker);
    void applicantGetAttributeNamesV2Callback(OAIHttpRequestWorker *worker);
    void applicantGetAttributesV2Callback(OAIHttpRequestWorker *worker);
    void applicantPostAttributesV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicantDeleteAttributesV2Signal(QString summary);
    void applicantGetAttributeNamesV2Signal(QList<QString> summary);
    void applicantGetAttributesV2Signal(QMap<QString, QString> summary);
    void applicantPostAttributesV2Signal(QString summary);


    void applicantDeleteAttributesV2SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicantGetAttributeNamesV2SignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void applicantGetAttributesV2SignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void applicantPostAttributesV2SignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use applicantDeleteAttributesV2SignalError() instead")
    void applicantDeleteAttributesV2SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantDeleteAttributesV2SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantGetAttributeNamesV2SignalError() instead")
    void applicantGetAttributeNamesV2SignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantGetAttributeNamesV2SignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantGetAttributesV2SignalError() instead")
    void applicantGetAttributesV2SignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantGetAttributesV2SignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantPostAttributesV2SignalError() instead")
    void applicantPostAttributesV2SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantPostAttributesV2SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicantDeleteAttributesV2SignalErrorFull() instead")
    void applicantDeleteAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantDeleteAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantGetAttributeNamesV2SignalErrorFull() instead")
    void applicantGetAttributeNamesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantGetAttributeNamesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantGetAttributesV2SignalErrorFull() instead")
    void applicantGetAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantGetAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicantPostAttributesV2SignalErrorFull() instead")
    void applicantPostAttributesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicantPostAttributesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
