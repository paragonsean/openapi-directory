/**
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RequestApplicationExportResultV2 from '../model/RequestApplicationExportResultV2';

/**
* Application service.
* @module api/ApplicationApi
* @version v2
*/
export default class ApplicationApi {

    /**
    * Constructs a new ApplicationApi. 
    * @alias module:api/ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationDeleteAttributesV2 operation.
     * @callback module:api/ApplicationApi~applicationDeleteAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom attribute for an application.
     * @param {String} applicationId The ID of the application.
     * @param {String} name The name of the attribute to be deleted.
     * @param {module:api/ApplicationApi~applicationDeleteAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationDeleteAttributesV2(applicationId, name, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationDeleteAttributesV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling applicationDeleteAttributesV2");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/application/{applicationId}/attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationGetAttributeNamesV2 operation.
     * @callback module:api/ApplicationApi~applicationGetAttributeNamesV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the custom application attributes used by the organization.
     * @param {module:api/ApplicationApi~applicationGetAttributeNamesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    applicationGetAttributeNamesV2(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/application/attributes/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationGetAttributesV2 operation.
     * @callback module:api/ApplicationApi~applicationGetAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the custom attributes for an application.
     * @param {String} applicationId The ID of the application.
     * @param {module:api/ApplicationApi~applicationGetAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    applicationGetAttributesV2(applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationGetAttributesV2");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v2/application/{applicationId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPostAttributesV2 operation.
     * @callback module:api/ApplicationApi~applicationPostAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the custom attributes for an application. API Import is available in the Advanced Plan.
     * This method only adds or updates attributes. Null values will be updated as nulls, but not deleted.
     * @param {String} applicationId The ID of the application.
     * @param {Object.<String, {String: String}>} data The name/value pairs of the attributes.
     * @param {module:api/ApplicationApi~applicationPostAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationPostAttributesV2(applicationId, data, callback) {
      let postBody = data;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationPostAttributesV2");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling applicationPostAttributesV2");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/application/{applicationId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationRequestExportByApplicationIdV2 operation.
     * @callback module:api/ApplicationApi~applicationRequestExportByApplicationIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestApplicationExportResultV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests the generation of a single application export file (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.
     * @param {String} applicationId The id of the application to export
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {module:model/String} [roundType] 
     * @param {String} [roundName] 
     * @param {String} [tabExport] 
     * @param {Boolean} [pdfIncludeForms] 
     * @param {Boolean} [pdfIncludeReferences] 
     * @param {Boolean} [pdfIncludeMedia] 
     * @param {Boolean} [pdfIncludeApplicantAttachments] 
     * @param {Boolean} [pdfIncludeOrganizationAttachments] 
     * @param {Boolean} [pdfIncludeRatings] 
     * @param {Boolean} [pdfIncludeFullPageMedia] 
     * @param {Boolean} [pdfIncludeHighlights] 
     * @param {Boolean} [pdfIncludeComments] 
     * @param {Boolean} [pdfIncludeCommonApp] 
     * @param {Boolean} [zipOriginalMedia] 
     * @param {Boolean} [zipIncludeForms] 
     * @param {Boolean} [zipIncludeReferences] 
     * @param {Boolean} [zipIncludeMedia] 
     * @param {Boolean} [zipIncludeApplicantAttachments] 
     * @param {Boolean} [zipIncludeOrganizationAttachments] 
     * @param {Boolean} [zipIncludeRatings] 
     * @param {Boolean} [zipIncludeComments] 
     * @param {Boolean} [zipIncludeCommonApp] 
     * @param {String} [deliveryAccount] 
     * @param {String} [deliveryFolder] 
     * @param {module:api/ApplicationApi~applicationRequestExportByApplicationIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestApplicationExportResultV2}
     */
    applicationRequestExportByApplicationIdV2(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling applicationRequestExportByApplicationIdV2");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'format': opts['format'],
        'roundType': opts['roundType'],
        'roundName': opts['roundName'],
        'tab.export': opts['tabExport'],
        'pdf.includeForms': opts['pdfIncludeForms'],
        'pdf.includeReferences': opts['pdfIncludeReferences'],
        'pdf.includeMedia': opts['pdfIncludeMedia'],
        'pdf.includeApplicantAttachments': opts['pdfIncludeApplicantAttachments'],
        'pdf.includeOrganizationAttachments': opts['pdfIncludeOrganizationAttachments'],
        'pdf.includeRatings': opts['pdfIncludeRatings'],
        'pdf.includeFullPageMedia': opts['pdfIncludeFullPageMedia'],
        'pdf.includeHighlights': opts['pdfIncludeHighlights'],
        'pdf.includeComments': opts['pdfIncludeComments'],
        'pdf.includeCommonApp': opts['pdfIncludeCommonApp'],
        'zip.originalMedia': opts['zipOriginalMedia'],
        'zip.includeForms': opts['zipIncludeForms'],
        'zip.includeReferences': opts['zipIncludeReferences'],
        'zip.includeMedia': opts['zipIncludeMedia'],
        'zip.includeApplicantAttachments': opts['zipIncludeApplicantAttachments'],
        'zip.includeOrganizationAttachments': opts['zipIncludeOrganizationAttachments'],
        'zip.includeRatings': opts['zipIncludeRatings'],
        'zip.includeComments': opts['zipIncludeComments'],
        'zip.includeCommonApp': opts['zipIncludeCommonApp'],
        'delivery.account': opts['deliveryAccount'],
        'delivery.folder': opts['deliveryFolder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RequestApplicationExportResultV2;
      return this.apiClient.callApi(
        '/api/v2/application/{applicationId}/request-export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationRequestExportV2 operation.
     * @callback module:api/ApplicationApi~applicationRequestExportV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestApplicationExportResultV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests the generation of application export files (tabular, pdf, zip).
     * Exports are generated asynchronously within SlideRoom.  To retrieve the export file generated by this request, use the api/v#/export/{token} endpoint to check the progress/result of the generation process.  PDF and ZIP exports are available in the Advanced Plan.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {module:model/String} [roundType] 
     * @param {String} [roundName] 
     * @param {String} [tabExport] 
     * @param {Boolean} [pdfIncludeForms] 
     * @param {Boolean} [pdfIncludeReferences] 
     * @param {Boolean} [pdfIncludeMedia] 
     * @param {Boolean} [pdfIncludeApplicantAttachments] 
     * @param {Boolean} [pdfIncludeOrganizationAttachments] 
     * @param {Boolean} [pdfIncludeRatings] 
     * @param {Boolean} [pdfIncludeFullPageMedia] 
     * @param {Boolean} [pdfIncludeHighlights] 
     * @param {Boolean} [pdfIncludeComments] 
     * @param {Boolean} [pdfIncludeCommonApp] 
     * @param {Boolean} [zipOriginalMedia] 
     * @param {Boolean} [zipIncludeForms] 
     * @param {Boolean} [zipIncludeReferences] 
     * @param {Boolean} [zipIncludeMedia] 
     * @param {Boolean} [zipIncludeApplicantAttachments] 
     * @param {Boolean} [zipIncludeOrganizationAttachments] 
     * @param {Boolean} [zipIncludeRatings] 
     * @param {Boolean} [zipIncludeComments] 
     * @param {Boolean} [zipIncludeCommonApp] 
     * @param {String} [deliveryAccount] 
     * @param {String} [deliveryFolder] 
     * @param {Number} [since] 
     * @param {module:model/String} [pool] 
     * @param {module:model/String} [status] 
     * @param {String} [searchName] 
     * @param {String} [email] 
     * @param {module:api/ApplicationApi~applicationRequestExportV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestApplicationExportResultV2}
     */
    applicationRequestExportV2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'roundType': opts['roundType'],
        'roundName': opts['roundName'],
        'tab.export': opts['tabExport'],
        'pdf.includeForms': opts['pdfIncludeForms'],
        'pdf.includeReferences': opts['pdfIncludeReferences'],
        'pdf.includeMedia': opts['pdfIncludeMedia'],
        'pdf.includeApplicantAttachments': opts['pdfIncludeApplicantAttachments'],
        'pdf.includeOrganizationAttachments': opts['pdfIncludeOrganizationAttachments'],
        'pdf.includeRatings': opts['pdfIncludeRatings'],
        'pdf.includeFullPageMedia': opts['pdfIncludeFullPageMedia'],
        'pdf.includeHighlights': opts['pdfIncludeHighlights'],
        'pdf.includeComments': opts['pdfIncludeComments'],
        'pdf.includeCommonApp': opts['pdfIncludeCommonApp'],
        'zip.originalMedia': opts['zipOriginalMedia'],
        'zip.includeForms': opts['zipIncludeForms'],
        'zip.includeReferences': opts['zipIncludeReferences'],
        'zip.includeMedia': opts['zipIncludeMedia'],
        'zip.includeApplicantAttachments': opts['zipIncludeApplicantAttachments'],
        'zip.includeOrganizationAttachments': opts['zipIncludeOrganizationAttachments'],
        'zip.includeRatings': opts['zipIncludeRatings'],
        'zip.includeComments': opts['zipIncludeComments'],
        'zip.includeCommonApp': opts['zipIncludeCommonApp'],
        'delivery.account': opts['deliveryAccount'],
        'delivery.folder': opts['deliveryFolder'],
        'since': opts['since'],
        'pool': opts['pool'],
        'status': opts['status'],
        'searchName': opts['searchName'],
        'email': opts['email']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RequestApplicationExportResultV2;
      return this.apiClient.callApi(
        '/api/v2/application/request-export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
