/**
 * SlideRoom API V2
 * SlideRoom provides a RESTful API for exporting data out of your organizations SlideRoom account.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Applicant service.
* @module api/ApplicantApi
* @version v2
*/
export default class ApplicantApi {

    /**
    * Constructs a new ApplicantApi. 
    * @alias module:api/ApplicantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicantDeleteAttributesV2 operation.
     * @callback module:api/ApplicantApi~applicantDeleteAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom attribute for an applicant.
     * @param {String} email The email address of the applicant.
     * @param {String} name The name of the attribute to be deleted.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [pool] 
     * @param {Number} [commonAppYear] 
     * @param {module:api/ApplicantApi~applicantDeleteAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicantDeleteAttributesV2(email, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling applicantDeleteAttributesV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling applicantDeleteAttributesV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'name': name,
        'pool': opts['pool'],
        'commonAppYear': opts['commonAppYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/applicant/attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicantGetAttributeNamesV2 operation.
     * @callback module:api/ApplicantApi~applicantGetAttributeNamesV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the custom applicant attributes used by the organization.
     * @param {module:api/ApplicantApi~applicantGetAttributeNamesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    applicantGetAttributeNamesV2(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/applicant/attributes/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicantGetAttributesV2 operation.
     * @callback module:api/ApplicantApi~applicantGetAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the custom attributes for an applicant.
     * @param {String} email The email address of the applicant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [pool] 
     * @param {Number} [commonAppYear] 
     * @param {module:api/ApplicantApi~applicantGetAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    applicantGetAttributesV2(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling applicantGetAttributesV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'pool': opts['pool'],
        'commonAppYear': opts['commonAppYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v2/applicant/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicantPostAttributesV2 operation.
     * @callback module:api/ApplicantApi~applicantPostAttributesV2Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the custom attributes for an applicant.
     * This method only adds or updates attributes. Null values will be updated as nulls, but not deleted. API Import is available in the Advanced Plan.
     * @param {String} email The email address of the applicant.
     * @param {Object.<String, {String: String}>} data The name/value pairs of the attributes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [pool] 
     * @param {Number} [commonAppYear] 
     * @param {module:api/ApplicantApi~applicantPostAttributesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicantPostAttributesV2(email, data, opts, callback) {
      opts = opts || {};
      let postBody = data;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling applicantPostAttributesV2");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling applicantPostAttributesV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'pool': opts['pool'],
        'commonAppYear': opts['commonAppYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/applicant/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
