/*
 * High Performance Building Database
 * The Buildings Database is a shared resource for the building industry. The Database, developed by the U.S. Department of Energy and the National Renewable Energy Laboratory (NREL), is a unique central repository of in-depth information and data on high-performance, green building projects across the United States and abroad.  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectJsonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectJsonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectJsonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for document
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentCall(String outputFormat, String apiKey, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{project_id}.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentValidateBeforeCall(String outputFormat, String apiKey, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling document(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling document(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling document(Async)");
        }

        return documentCall(outputFormat, apiKey, projectId, _callback);

    }

    /**
     * Project Details
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param projectId Project ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public void document(String outputFormat, String apiKey, Integer projectId) throws ApiException {
        documentWithHttpInfo(outputFormat, apiKey, projectId);
    }

    /**
     * Project Details
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentWithHttpInfo(String outputFormat, String apiKey, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = documentValidateBeforeCall(outputFormat, apiKey, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Project Details (asynchronously)
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAsync(String outputFormat, String apiKey, Integer projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentValidateBeforeCall(outputFormat, apiKey, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for project
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param search Search Text (optional)
     * @param portal Portal ID (optional)
     * @param page Page Number (optional)
     * @param city City (optional)
     * @param province State or Province (ex: &#39;CO&#39;, &#39;AZ&#39;) (optional)
     * @param region Climate Region.  Use integer from mapping (256: &#39;1A: Very Hot - Humid&#39;, 257: &#39;1B: Very Hot - Dry&#39;, 258: &#39;2A: Hot - Humid&#39;, 259: &#39;2B: Hot - Dry&#39;, 260: &#39;3A: Warm - Humid&#39;, 261: &#39;3B: Warm - Dry&#39;, 262: &#39;3C: Warm - Marine&#39;, 263: &#39;4A: Mixed - Humid&#39;, 264: &#39;4B: Mixed - Dry&#39;, 265: &#39;4C: Mixed - Marine&#39;, 266: &#39;5A: Cool - Humid&#39;, 267: &#39;5B: Cool - Dry&#39;, 268: &#39;5C: Cool - Marine&#39;, 269: &#39;6A: Cold - Humid&#39;, 270: &#39;6B: Cold - Dry&#39;, 271: &#39;7: Very Cold&#39;, 272: &#39;8: Subarctic&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCall(String outputFormat, String apiKey, String search, String portal, Integer page, String city, String province, String region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (portal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portal", portal));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (province != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("province", province));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectValidateBeforeCall(String outputFormat, String apiKey, String search, String portal, Integer page, String city, String province, String region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling project(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling project(Async)");
        }

        return projectCall(outputFormat, apiKey, search, portal, page, city, province, region, _callback);

    }

    /**
     * A filterable list of projects.
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param search Search Text (optional)
     * @param portal Portal ID (optional)
     * @param page Page Number (optional)
     * @param city City (optional)
     * @param province State or Province (ex: &#39;CO&#39;, &#39;AZ&#39;) (optional)
     * @param region Climate Region.  Use integer from mapping (256: &#39;1A: Very Hot - Humid&#39;, 257: &#39;1B: Very Hot - Dry&#39;, 258: &#39;2A: Hot - Humid&#39;, 259: &#39;2B: Hot - Dry&#39;, 260: &#39;3A: Warm - Humid&#39;, 261: &#39;3B: Warm - Dry&#39;, 262: &#39;3C: Warm - Marine&#39;, 263: &#39;4A: Mixed - Humid&#39;, 264: &#39;4B: Mixed - Dry&#39;, 265: &#39;4C: Mixed - Marine&#39;, 266: &#39;5A: Cool - Humid&#39;, 267: &#39;5B: Cool - Dry&#39;, 268: &#39;5C: Cool - Marine&#39;, 269: &#39;6A: Cold - Humid&#39;, 270: &#39;6B: Cold - Dry&#39;, 271: &#39;7: Very Cold&#39;, 272: &#39;8: Subarctic&#39;) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public void project(String outputFormat, String apiKey, String search, String portal, Integer page, String city, String province, String region) throws ApiException {
        projectWithHttpInfo(outputFormat, apiKey, search, portal, page, city, province, region);
    }

    /**
     * A filterable list of projects.
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param search Search Text (optional)
     * @param portal Portal ID (optional)
     * @param page Page Number (optional)
     * @param city City (optional)
     * @param province State or Province (ex: &#39;CO&#39;, &#39;AZ&#39;) (optional)
     * @param region Climate Region.  Use integer from mapping (256: &#39;1A: Very Hot - Humid&#39;, 257: &#39;1B: Very Hot - Dry&#39;, 258: &#39;2A: Hot - Humid&#39;, 259: &#39;2B: Hot - Dry&#39;, 260: &#39;3A: Warm - Humid&#39;, 261: &#39;3B: Warm - Dry&#39;, 262: &#39;3C: Warm - Marine&#39;, 263: &#39;4A: Mixed - Humid&#39;, 264: &#39;4B: Mixed - Dry&#39;, 265: &#39;4C: Mixed - Marine&#39;, 266: &#39;5A: Cool - Humid&#39;, 267: &#39;5B: Cool - Dry&#39;, 268: &#39;5C: Cool - Marine&#39;, 269: &#39;6A: Cold - Humid&#39;, 270: &#39;6B: Cold - Dry&#39;, 271: &#39;7: Very Cold&#39;, 272: &#39;8: Subarctic&#39;) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectWithHttpInfo(String outputFormat, String apiKey, String search, String portal, Integer page, String city, String province, String region) throws ApiException {
        okhttp3.Call localVarCall = projectValidateBeforeCall(outputFormat, apiKey, search, portal, page, city, province, region, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * A filterable list of projects. (asynchronously)
     * 
     * @param outputFormat Response Format (required)
     * @param apiKey API Key (required)
     * @param search Search Text (optional)
     * @param portal Portal ID (optional)
     * @param page Page Number (optional)
     * @param city City (optional)
     * @param province State or Province (ex: &#39;CO&#39;, &#39;AZ&#39;) (optional)
     * @param region Climate Region.  Use integer from mapping (256: &#39;1A: Very Hot - Humid&#39;, 257: &#39;1B: Very Hot - Dry&#39;, 258: &#39;2A: Hot - Humid&#39;, 259: &#39;2B: Hot - Dry&#39;, 260: &#39;3A: Warm - Humid&#39;, 261: &#39;3B: Warm - Dry&#39;, 262: &#39;3C: Warm - Marine&#39;, 263: &#39;4A: Mixed - Humid&#39;, 264: &#39;4B: Mixed - Dry&#39;, 265: &#39;4C: Mixed - Marine&#39;, 266: &#39;5A: Cool - Humid&#39;, 267: &#39;5B: Cool - Dry&#39;, 268: &#39;5C: Cool - Marine&#39;, 269: &#39;6A: Cold - Humid&#39;, 270: &#39;6B: Cold - Dry&#39;, 271: &#39;7: Very Cold&#39;, 272: &#39;8: Subarctic&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAsync(String outputFormat, String apiKey, String search, String portal, Integer page, String city, String province, String region, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectValidateBeforeCall(outputFormat, apiKey, search, portal, page, city, province, region, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
