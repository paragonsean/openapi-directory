/**
 * High Performance Building Database
 * The Buildings Database is a shared resource for the building industry. The Database, developed by the U.S. Department of Energy and the National Renewable Energy Laboratory (NREL), is a unique central repository of in-depth information and data on high-performance, green building projects across the United States and abroad.  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ProjectJson service.
* @module api/ProjectJsonApi
* @version 1.0
*/
export default class ProjectJsonApi {

    /**
    * Constructs a new ProjectJsonApi. 
    * @alias module:api/ProjectJsonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the document operation.
     * @callback module:api/ProjectJsonApi~documentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project Details
     * @param {module:model/String} outputFormat Response Format
     * @param {String} apiKey API Key
     * @param {Number} projectId Project ID
     * @param {module:api/ProjectJsonApi~documentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    document(outputFormat, apiKey, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling document");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling document");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling document");
      }

      let pathParams = {
        'output_format': outputFormat,
        'project_id': projectId
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{project_id}.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the project operation.
     * @callback module:api/ProjectJsonApi~projectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A filterable list of projects.
     * @param {module:model/String} outputFormat Response Format
     * @param {String} apiKey API Key
     * @param {Object} opts Optional parameters
     * @param {String} [search] Search Text
     * @param {String} [portal] Portal ID
     * @param {Number} [page] Page Number
     * @param {String} [city] City
     * @param {String} [province] State or Province (ex: 'CO', 'AZ')
     * @param {String} [region] Climate Region.  Use integer from mapping (256: '1A: Very Hot - Humid', 257: '1B: Very Hot - Dry', 258: '2A: Hot - Humid', 259: '2B: Hot - Dry', 260: '3A: Warm - Humid', 261: '3B: Warm - Dry', 262: '3C: Warm - Marine', 263: '4A: Mixed - Humid', 264: '4B: Mixed - Dry', 265: '4C: Mixed - Marine', 266: '5A: Cool - Humid', 267: '5B: Cool - Dry', 268: '5C: Cool - Marine', 269: '6A: Cold - Humid', 270: '6B: Cold - Dry', 271: '7: Very Cold', 272: '8: Subarctic')
     * @param {module:api/ProjectJsonApi~projectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    project(outputFormat, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling project");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling project");
      }

      let pathParams = {
        'output_format': outputFormat
      };
      let queryParams = {
        'api_key': apiKey,
        'search': opts['search'],
        'portal': opts['portal'],
        'page': opts['page'],
        'city': opts['city'],
        'province': opts['province'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
