/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategoryResults.h"
#include "OAILawResult.h"
#include "OAILawsResponse.h"
#include "OAIPocResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  jurisdiction QString [optional]
    * @param[in]  technology QString [optional]
    * @param[in]  incentive_type QString [optional]
    * @param[in]  regulation_type QString [optional]
    * @param[in]  user_type QString [optional]
    * @param[in]  poc bool [optional]
    * @param[in]  recent bool [optional]
    * @param[in]  expired bool [optional]
    * @param[in]  law_type QString [optional]
    * @param[in]  keyword QString [optional]
    * @param[in]  local bool [optional]
    */
    virtual void transportationIncentivesLawsAll(const QString &output_format, const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &jurisdiction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &technology = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incentive_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regulation_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &poc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expired = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &law_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &keyword = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  type QString [optional]
    */
    virtual void transportationIncentivesLawsCategories(const QString &output_format, const QString &api_key, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  id qint32 [required]
    * @param[in]  poc bool [optional]
    * @param[in]  expired bool [optional]
    */
    virtual void transportationIncentivesLawsId(const QString &output_format, const QString &api_key, const qint32 &id, const ::OpenAPI::OptionalParam<bool> &poc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expired = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  jurisdiction QString [required]
    */
    virtual void transportationIncentivesLawsPocs(const QString &output_format, const QString &api_key, const QString &jurisdiction);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transportationIncentivesLawsAllCallback(OAIHttpRequestWorker *worker);
    void transportationIncentivesLawsCategoriesCallback(OAIHttpRequestWorker *worker);
    void transportationIncentivesLawsIdCallback(OAIHttpRequestWorker *worker);
    void transportationIncentivesLawsPocsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transportationIncentivesLawsAllSignal(OAILawsResponse summary);
    void transportationIncentivesLawsCategoriesSignal(OAICategoryResults summary);
    void transportationIncentivesLawsIdSignal(OAILawResult summary);
    void transportationIncentivesLawsPocsSignal(OAIPocResults summary);


    void transportationIncentivesLawsAllSignalFull(OAIHttpRequestWorker *worker, OAILawsResponse summary);
    void transportationIncentivesLawsCategoriesSignalFull(OAIHttpRequestWorker *worker, OAICategoryResults summary);
    void transportationIncentivesLawsIdSignalFull(OAIHttpRequestWorker *worker, OAILawResult summary);
    void transportationIncentivesLawsPocsSignalFull(OAIHttpRequestWorker *worker, OAIPocResults summary);

    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsAllSignalError() instead")
    void transportationIncentivesLawsAllSignalE(OAILawsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsAllSignalError(OAILawsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsCategoriesSignalError() instead")
    void transportationIncentivesLawsCategoriesSignalE(OAICategoryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsCategoriesSignalError(OAICategoryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsIdSignalError() instead")
    void transportationIncentivesLawsIdSignalE(OAILawResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsIdSignalError(OAILawResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsPocsSignalError() instead")
    void transportationIncentivesLawsPocsSignalE(OAIPocResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsPocsSignalError(OAIPocResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsAllSignalErrorFull() instead")
    void transportationIncentivesLawsAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsCategoriesSignalErrorFull() instead")
    void transportationIncentivesLawsCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsIdSignalErrorFull() instead")
    void transportationIncentivesLawsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transportationIncentivesLawsPocsSignalErrorFull() instead")
    void transportationIncentivesLawsPocsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transportationIncentivesLawsPocsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
