/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaw.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaw::OAILaw(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaw::OAILaw() {
    this->initializeModel();
}

OAILaw::~OAILaw() {}

void OAILaw::initializeModel() {

    m_agency_isSet = false;
    m_agency_isValid = false;

    m_amended_date_isSet = false;
    m_amended_date_isValid = false;

    m_archived_date_isSet = false;
    m_archived_date_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_enacted_date_isSet = false;
    m_enacted_date_isValid = false;

    m_expired_date_isSet = false;
    m_expired_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_recent_isSet = false;
    m_is_recent_isValid = false;

    m_plaintext_isSet = false;
    m_plaintext_isValid = false;

    m_recent_update_or_new_isSet = false;
    m_recent_update_or_new_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_repealed_date_isSet = false;
    m_repealed_date_isValid = false;

    m_seq_num_isSet = false;
    m_seq_num_isValid = false;

    m_significant_update_date_isSet = false;
    m_significant_update_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAILaw::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaw::fromJsonObject(QJsonObject json) {

    m_agency_isValid = ::OpenAPI::fromJsonValue(m_agency, json[QString("agency")]);
    m_agency_isSet = !json[QString("agency")].isNull() && m_agency_isValid;

    m_amended_date_isValid = ::OpenAPI::fromJsonValue(m_amended_date, json[QString("amended_date")]);
    m_amended_date_isSet = !json[QString("amended_date")].isNull() && m_amended_date_isValid;

    m_archived_date_isValid = ::OpenAPI::fromJsonValue(m_archived_date, json[QString("archived_date")]);
    m_archived_date_isSet = !json[QString("archived_date")].isNull() && m_archived_date_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_enacted_date_isValid = ::OpenAPI::fromJsonValue(m_enacted_date, json[QString("enacted_date")]);
    m_enacted_date_isSet = !json[QString("enacted_date")].isNull() && m_enacted_date_isValid;

    m_expired_date_isValid = ::OpenAPI::fromJsonValue(m_expired_date, json[QString("expired_date")]);
    m_expired_date_isSet = !json[QString("expired_date")].isNull() && m_expired_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_recent_isValid = ::OpenAPI::fromJsonValue(m_is_recent, json[QString("is_recent")]);
    m_is_recent_isSet = !json[QString("is_recent")].isNull() && m_is_recent_isValid;

    m_plaintext_isValid = ::OpenAPI::fromJsonValue(m_plaintext, json[QString("plaintext")]);
    m_plaintext_isSet = !json[QString("plaintext")].isNull() && m_plaintext_isValid;

    m_recent_update_or_new_isValid = ::OpenAPI::fromJsonValue(m_recent_update_or_new, json[QString("recent_update_or_new")]);
    m_recent_update_or_new_isSet = !json[QString("recent_update_or_new")].isNull() && m_recent_update_or_new_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_repealed_date_isValid = ::OpenAPI::fromJsonValue(m_repealed_date, json[QString("repealed_date")]);
    m_repealed_date_isSet = !json[QString("repealed_date")].isNull() && m_repealed_date_isValid;

    m_seq_num_isValid = ::OpenAPI::fromJsonValue(m_seq_num, json[QString("seq_num")]);
    m_seq_num_isSet = !json[QString("seq_num")].isNull() && m_seq_num_isValid;

    m_significant_update_date_isValid = ::OpenAPI::fromJsonValue(m_significant_update_date, json[QString("significant_update_date")]);
    m_significant_update_date_isSet = !json[QString("significant_update_date")].isNull() && m_significant_update_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAILaw::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaw::asJsonObject() const {
    QJsonObject obj;
    if (m_agency_isSet) {
        obj.insert(QString("agency"), ::OpenAPI::toJsonValue(m_agency));
    }
    if (m_amended_date_isSet) {
        obj.insert(QString("amended_date"), ::OpenAPI::toJsonValue(m_amended_date));
    }
    if (m_archived_date_isSet) {
        obj.insert(QString("archived_date"), ::OpenAPI::toJsonValue(m_archived_date));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_enacted_date_isSet) {
        obj.insert(QString("enacted_date"), ::OpenAPI::toJsonValue(m_enacted_date));
    }
    if (m_expired_date_isSet) {
        obj.insert(QString("expired_date"), ::OpenAPI::toJsonValue(m_expired_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_recent_isSet) {
        obj.insert(QString("is_recent"), ::OpenAPI::toJsonValue(m_is_recent));
    }
    if (m_plaintext_isSet) {
        obj.insert(QString("plaintext"), ::OpenAPI::toJsonValue(m_plaintext));
    }
    if (m_recent_update_or_new_isSet) {
        obj.insert(QString("recent_update_or_new"), ::OpenAPI::toJsonValue(m_recent_update_or_new));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_repealed_date_isSet) {
        obj.insert(QString("repealed_date"), ::OpenAPI::toJsonValue(m_repealed_date));
    }
    if (m_seq_num_isSet) {
        obj.insert(QString("seq_num"), ::OpenAPI::toJsonValue(m_seq_num));
    }
    if (m_significant_update_date_isSet) {
        obj.insert(QString("significant_update_date"), ::OpenAPI::toJsonValue(m_significant_update_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAILaw::getAgency() const {
    return m_agency;
}
void OAILaw::setAgency(const QString &agency) {
    m_agency = agency;
    m_agency_isSet = true;
}

bool OAILaw::is_agency_Set() const{
    return m_agency_isSet;
}

bool OAILaw::is_agency_Valid() const{
    return m_agency_isValid;
}

QDateTime OAILaw::getAmendedDate() const {
    return m_amended_date;
}
void OAILaw::setAmendedDate(const QDateTime &amended_date) {
    m_amended_date = amended_date;
    m_amended_date_isSet = true;
}

bool OAILaw::is_amended_date_Set() const{
    return m_amended_date_isSet;
}

bool OAILaw::is_amended_date_Valid() const{
    return m_amended_date_isValid;
}

QDateTime OAILaw::getArchivedDate() const {
    return m_archived_date;
}
void OAILaw::setArchivedDate(const QDateTime &archived_date) {
    m_archived_date = archived_date;
    m_archived_date_isSet = true;
}

bool OAILaw::is_archived_date_Set() const{
    return m_archived_date_isSet;
}

bool OAILaw::is_archived_date_Valid() const{
    return m_archived_date_isValid;
}

QList<OAICategory> OAILaw::getCategories() const {
    return m_categories;
}
void OAILaw::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAILaw::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAILaw::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<OAIPoc> OAILaw::getContacts() const {
    return m_contacts;
}
void OAILaw::setContacts(const QList<OAIPoc> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAILaw::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAILaw::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QDateTime OAILaw::getEnactedDate() const {
    return m_enacted_date;
}
void OAILaw::setEnactedDate(const QDateTime &enacted_date) {
    m_enacted_date = enacted_date;
    m_enacted_date_isSet = true;
}

bool OAILaw::is_enacted_date_Set() const{
    return m_enacted_date_isSet;
}

bool OAILaw::is_enacted_date_Valid() const{
    return m_enacted_date_isValid;
}

QDateTime OAILaw::getExpiredDate() const {
    return m_expired_date;
}
void OAILaw::setExpiredDate(const QDateTime &expired_date) {
    m_expired_date = expired_date;
    m_expired_date_isSet = true;
}

bool OAILaw::is_expired_date_Set() const{
    return m_expired_date_isSet;
}

bool OAILaw::is_expired_date_Valid() const{
    return m_expired_date_isValid;
}

qint32 OAILaw::getId() const {
    return m_id;
}
void OAILaw::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILaw::is_id_Set() const{
    return m_id_isSet;
}

bool OAILaw::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILaw::isIsRecent() const {
    return m_is_recent;
}
void OAILaw::setIsRecent(const bool &is_recent) {
    m_is_recent = is_recent;
    m_is_recent_isSet = true;
}

bool OAILaw::is_is_recent_Set() const{
    return m_is_recent_isSet;
}

bool OAILaw::is_is_recent_Valid() const{
    return m_is_recent_isValid;
}

QString OAILaw::getPlaintext() const {
    return m_plaintext;
}
void OAILaw::setPlaintext(const QString &plaintext) {
    m_plaintext = plaintext;
    m_plaintext_isSet = true;
}

bool OAILaw::is_plaintext_Set() const{
    return m_plaintext_isSet;
}

bool OAILaw::is_plaintext_Valid() const{
    return m_plaintext_isValid;
}

QString OAILaw::getRecentUpdateOrNew() const {
    return m_recent_update_or_new;
}
void OAILaw::setRecentUpdateOrNew(const QString &recent_update_or_new) {
    m_recent_update_or_new = recent_update_or_new;
    m_recent_update_or_new_isSet = true;
}

bool OAILaw::is_recent_update_or_new_Set() const{
    return m_recent_update_or_new_isSet;
}

bool OAILaw::is_recent_update_or_new_Valid() const{
    return m_recent_update_or_new_isValid;
}

QList<OAILawReference> OAILaw::getReferences() const {
    return m_references;
}
void OAILaw::setReferences(const QList<OAILawReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAILaw::is_references_Set() const{
    return m_references_isSet;
}

bool OAILaw::is_references_Valid() const{
    return m_references_isValid;
}

QDateTime OAILaw::getRepealedDate() const {
    return m_repealed_date;
}
void OAILaw::setRepealedDate(const QDateTime &repealed_date) {
    m_repealed_date = repealed_date;
    m_repealed_date_isSet = true;
}

bool OAILaw::is_repealed_date_Set() const{
    return m_repealed_date_isSet;
}

bool OAILaw::is_repealed_date_Valid() const{
    return m_repealed_date_isValid;
}

qint32 OAILaw::getSeqNum() const {
    return m_seq_num;
}
void OAILaw::setSeqNum(const qint32 &seq_num) {
    m_seq_num = seq_num;
    m_seq_num_isSet = true;
}

bool OAILaw::is_seq_num_Set() const{
    return m_seq_num_isSet;
}

bool OAILaw::is_seq_num_Valid() const{
    return m_seq_num_isValid;
}

QDateTime OAILaw::getSignificantUpdateDate() const {
    return m_significant_update_date;
}
void OAILaw::setSignificantUpdateDate(const QDateTime &significant_update_date) {
    m_significant_update_date = significant_update_date;
    m_significant_update_date_isSet = true;
}

bool OAILaw::is_significant_update_date_Set() const{
    return m_significant_update_date_isSet;
}

bool OAILaw::is_significant_update_date_Valid() const{
    return m_significant_update_date_isValid;
}

QString OAILaw::getState() const {
    return m_state;
}
void OAILaw::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILaw::is_state_Set() const{
    return m_state_isSet;
}

bool OAILaw::is_state_Valid() const{
    return m_state_isValid;
}

QString OAILaw::getText() const {
    return m_text;
}
void OAILaw::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILaw::is_text_Set() const{
    return m_text_isSet;
}

bool OAILaw::is_text_Valid() const{
    return m_text_isValid;
}

QString OAILaw::getTitle() const {
    return m_title;
}
void OAILaw::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILaw::is_title_Set() const{
    return m_title_isSet;
}

bool OAILaw::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAILawTopics> OAILaw::getTopics() const {
    return m_topics;
}
void OAILaw::setTopics(const QList<OAILawTopics> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAILaw::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAILaw::is_topics_Valid() const{
    return m_topics_isValid;
}

QString OAILaw::getType() const {
    return m_type;
}
void OAILaw::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILaw::is_type_Set() const{
    return m_type_isSet;
}

bool OAILaw::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAILawType> OAILaw::getTypes() const {
    return m_types;
}
void OAILaw::setTypes(const QList<OAILawType> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAILaw::is_types_Set() const{
    return m_types_isSet;
}

bool OAILaw::is_types_Valid() const{
    return m_types_isValid;
}

bool OAILaw::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amended_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enacted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaintext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_update_or_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repealed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_significant_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaw::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_id_isValid && m_plaintext_isValid && m_references_isValid && m_state_isValid && m_text_isValid && m_title_isValid && m_topics_isValid && m_type_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
