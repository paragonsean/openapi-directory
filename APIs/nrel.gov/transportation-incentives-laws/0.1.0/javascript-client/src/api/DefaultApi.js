/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryResults from '../model/CategoryResults';
import LawResult from '../model/LawResult';
import LawsResponse from '../model/LawsResponse';
import PocResults from '../model/PocResults';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transportationIncentivesLawsAll operation.
     * @callback module:api/DefaultApi~transportationIncentivesLawsAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LawsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a full list of laws and incentives that match your query.
     * 
     * @param {module:model/String} outputFormat Response format
     * @param {String} apiKey API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Limit the number of laws returned
     * @param {String} [jurisdiction] Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, 'CO' for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code 'US' for federal laws and the code 'DC' for Washington D.C.
     * @param {String} [technology] Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'BIOD' for Biodiesel, 'ETH' for Ethanol / Flexible Fuel Vehicles, 'NG' for Natural Gas / Natural Gas Vehicles, 'LPG' for Liquefied Petroleum Gas (Propane) / Propane Vehicles, 'HY' for Hydrogen / Fuel Cell Electric Vehicles, 'ELEC' for All-Electric Vehicles (EVs), 'PHEV' for Plug-In Hybrid Electric Vehicles (PHEVs), 'HEV' for Hybrid Electric Vehicles (HEVs), 'NEVS' for Neighborhood Electric Vehicles (NEVs), 'RD' for Renewable Diesel, 'AFTMKTCONV' for Aftermarket Conversions, 'EFFEC' for Fuel Economy / Efficiency, 'IR' for Idle Reduction, 'AUTONOMOUS' for Connected and Autonomous Vehicles, and 'OTHER' for Other.
     * @param {String} [incentiveType] Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'GNT' for Grants, 'TAX' for Tax Incentives, 'LOANS' for Loans and Leases, 'RBATE' for Rebates, 'EXEM' for Exemptions, 'TOU' for Time-of-Use Rate, and 'OTHER' for Other.
     * @param {String} [regulationType] Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'REQ' for Acquisition / Fuel Use, 'DREST' for Driving / Idling, 'REGIS' for Registration / Licensing, 'EVFEE' for EV Registration Fee, 'FUEL' for Fuel Taxes, 'STD' for Fuel Production / Quality, 'RFS' for Renewable Fuel Standard / Mandate, 'AIRQEMISSIONS' for Air Quality / Emissions, 'CCEINIT' for Climate Change / Energy Initiatives, 'UTILITY' for Utility Definition, 'BUILD' for Building Codes, 'RTC' for Right-to-Charge, and 'OTHER' for Other.
     * @param {String} [userType] Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'FLEET' for Commercial, 'GOV' for Government Entity, 'TRIBAL' for Tribal Government, 'IND' for Personal Vehicle Owner or Driver, 'STATION' for Alternative Fuel Infrastructure Operator, 'AFP' for Alternative Fuel Producer, 'PURCH' for Alternative Fuel Purchaser, 'MAN' for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, 'MUD' for Multi-Unit Dwelling, 'TRANS' for Transit, and 'OTHER' for Other.
     * @param {Boolean} [poc = false)] Include points of contacts in the return value.
     * @param {Boolean} [recent = false)] Return only recently added or updated laws and incentives
     * @param {Boolean} [expired = false)] The 'true' value returns only expired, repealed, or archived laws and incentives. The default 'false' value returns only current laws and incentives.
     * @param {String} [lawType] Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: 'STATEINC' for State Incentives, 'UPINC ' for Utility/Private Incentives, 'LAWREG' for Laws and Regulations, 'INC' for Incentives, 'PROG' for Programs, 'LUP' for Last Updated, 'OVIEW' for Overview, and 'HILITE' for Highlights.
     * @param {String} [keyword] Search laws by keyword in title or text.
     * @param {Boolean} [local = false)] Show only local examples of laws and incentives.
     * @param {module:api/DefaultApi~transportationIncentivesLawsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LawsResponse}
     */
    transportationIncentivesLawsAll(outputFormat, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsAll");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsAll");
      }

      let pathParams = {
        'output_format': outputFormat
      };
      let queryParams = {
        'api_key': apiKey,
        'limit': opts['limit'],
        'jurisdiction': opts['jurisdiction'],
        'technology': opts['technology'],
        'incentive_type': opts['incentiveType'],
        'regulation_type': opts['regulationType'],
        'user_type': opts['userType'],
        'poc': opts['poc'],
        'recent': opts['recent'],
        'expired': opts['expired'],
        'law_type': opts['lawType'],
        'keyword': opts['keyword'],
        'local': opts['local']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LawsResponse;
      return this.apiClient.callApi(
        '/v1.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transportationIncentivesLawsCategories operation.
     * @callback module:api/DefaultApi~transportationIncentivesLawsCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the law categories for a given category type.
     * 
     * @param {module:model/String} outputFormat Response format
     * @param {String} apiKey API Key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Search by the category type.
     * @param {module:api/DefaultApi~transportationIncentivesLawsCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResults}
     */
    transportationIncentivesLawsCategories(outputFormat, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsCategories");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsCategories");
      }

      let pathParams = {
        'output_format': outputFormat
      };
      let queryParams = {
        'api_key': apiKey,
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryResults;
      return this.apiClient.callApi(
        '/v1/category-list.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transportationIncentivesLawsId operation.
     * @callback module:api/DefaultApi~transportationIncentivesLawsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LawResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the details of a specific law given the law's ID.
     * 
     * @param {module:model/String} outputFormat Response format
     * @param {String} apiKey API Key
     * @param {Number} id The id of the law that you are searching
     * @param {Object} opts Optional parameters
     * @param {Boolean} [poc = false)] Include points of contacts in the return value.
     * @param {Boolean} [expired = false)] The 'true' value returns a record no matter its status (current, expired, archived, or repealed). The default 'false' value returns only current laws and incentives.
     * @param {module:api/DefaultApi~transportationIncentivesLawsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LawResult}
     */
    transportationIncentivesLawsId(outputFormat, apiKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsId");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transportationIncentivesLawsId");
      }

      let pathParams = {
        'output_format': outputFormat,
        'id': id
      };
      let queryParams = {
        'api_key': apiKey,
        'poc': opts['poc'],
        'expired': opts['expired']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LawResult;
      return this.apiClient.callApi(
        '/v1/{id}.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transportationIncentivesLawsPocs operation.
     * @callback module:api/DefaultApi~transportationIncentivesLawsPocsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PocResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the points of contact for a given jurisdiction.
     * 
     * @param {module:model/String} outputFormat Response format
     * @param {String} apiKey API Key
     * @param {String} jurisdiction Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, 'CO' for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code 'US' for federal laws and the code 'DC' for Washington D.C.
     * @param {module:api/DefaultApi~transportationIncentivesLawsPocsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PocResults}
     */
    transportationIncentivesLawsPocs(outputFormat, apiKey, jurisdiction, callback) {
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsPocs");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsPocs");
      }
      // verify the required parameter 'jurisdiction' is set
      if (jurisdiction === undefined || jurisdiction === null) {
        throw new Error("Missing the required parameter 'jurisdiction' when calling transportationIncentivesLawsPocs");
      }

      let pathParams = {
        'output_format': outputFormat
      };
      let queryParams = {
        'api_key': apiKey,
        'jurisdiction': jurisdiction
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PocResults;
      return this.apiClient.callApi(
        '/v1/pocs.{output_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
