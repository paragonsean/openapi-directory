/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LawTopics model module.
 * @module model/LawTopics
 * @version 0.1.0
 */
class LawTopics {
    /**
     * Constructs a new <code>LawTopics</code>.
     * For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
     * @alias module:model/LawTopics
     * @param id {Number} The database id of the law topic
     * @param sortOrder {Number} The sort order of the law topic
     * @param title {String} The name of the law topic
     */
    constructor(id, sortOrder, title) { 
        
        LawTopics.initialize(this, id, sortOrder, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, sortOrder, title) { 
        obj['id'] = id;
        obj['sort_order'] = sortOrder;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>LawTopics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LawTopics} obj Optional instance to populate.
     * @return {module:model/LawTopics} The populated <code>LawTopics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LawTopics();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LawTopics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LawTopics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LawTopics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

LawTopics.RequiredProperties = ["id", "sort_order", "title"];

/**
 * The database id of the law topic
 * @member {Number} id
 */
LawTopics.prototype['id'] = undefined;

/**
 * The sort order of the law topic
 * @member {Number} sort_order
 */
LawTopics.prototype['sort_order'] = undefined;

/**
 * The name of the law topic
 * @member {String} title
 */
LawTopics.prototype['title'] = undefined;






export default LawTopics;

