/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 0.1.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * A category that the law applies to
     * @alias module:model/Category
     * @param categoryType {String} The type of category. (E.g. tech, incentive, regulation, user)
     * @param code {String} The code used to identify the category
     * @param title {String} The full name of the category
     */
    constructor(categoryType, code, title) { 
        
        Category.initialize(this, categoryType, code, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categoryType, code, title) { 
        obj['category_type'] = categoryType;
        obj['code'] = code;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('category_type')) {
                obj['category_type'] = ApiClient.convertToType(data['category_type'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category_type'] && !(typeof data['category_type'] === 'string' || data['category_type'] instanceof String)) {
            throw new Error("Expected the field `category_type` to be a primitive type in the JSON string but got " + data['category_type']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Category.RequiredProperties = ["category_type", "code", "title"];

/**
 * The type of category. (E.g. tech, incentive, regulation, user)
 * @member {String} category_type
 */
Category.prototype['category_type'] = undefined;

/**
 * The code used to identify the category
 * @member {String} code
 */
Category.prototype['code'] = undefined;

/**
 * The full name of the category
 * @member {String} title
 */
Category.prototype['title'] = undefined;






export default Category;

