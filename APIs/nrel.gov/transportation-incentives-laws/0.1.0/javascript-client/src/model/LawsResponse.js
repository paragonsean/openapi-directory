/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Law from './Law';
import Metadata from './Metadata';

/**
 * The LawsResponse model module.
 * @module model/LawsResponse
 * @version 0.1.0
 */
class LawsResponse {
    /**
     * Constructs a new <code>LawsResponse</code>.
     * @alias module:model/LawsResponse
     * @param inputs {Object} The parameters that were passed to the API
     * @param metadata {module:model/Metadata} 
     * @param result {Array.<module:model/Law>} The array of laws returned
     */
    constructor(inputs, metadata, result) { 
        
        LawsResponse.initialize(this, inputs, metadata, result);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputs, metadata, result) { 
        obj['inputs'] = inputs;
        obj['metadata'] = metadata;
        obj['result'] = result;
    }

    /**
     * Constructs a <code>LawsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LawsResponse} obj Optional instance to populate.
     * @return {module:model/LawsResponse} The populated <code>LawsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LawsResponse();

            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], [Law]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LawsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LawsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LawsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        if (data['result']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['result'])) {
                throw new Error("Expected the field `result` to be an array in the JSON data but got " + data['result']);
            }
            // validate the optional field `result` (array)
            for (const item of data['result']) {
                Law.validateJSON(item);
            };
        }

        return true;
    }


}

LawsResponse.RequiredProperties = ["inputs", "metadata", "result"];

/**
 * The parameters that were passed to the API
 * @member {Object} inputs
 */
LawsResponse.prototype['inputs'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
LawsResponse.prototype['metadata'] = undefined;

/**
 * The array of laws returned
 * @member {Array.<module:model/Law>} result
 */
LawsResponse.prototype['result'] = undefined;






export default LawsResponse;

