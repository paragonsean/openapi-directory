/**
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import LawReference from './LawReference';
import LawTopics from './LawTopics';
import LawType from './LawType';
import Poc from './Poc';

/**
 * The Law model module.
 * @module model/Law
 * @version 0.1.0
 */
class Law {
    /**
     * Constructs a new <code>Law</code>.
     * This is a Law
     * @alias module:model/Law
     * @param categories {Array.<module:model/Category>} The various law categories that apply to this law
     * @param id {Number} A unique identifier for this specific incentive/law/regulation.
     * @param plaintext {String} Description of the incentive/law/regulation, including applicable legislative references, in <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown formatting</a>
     * @param references {Array.<module:model/LawReference>} The URL associated with any bill or legislative reference included in the description.
     * @param state {String} The state in which the incentive/law/regulation was enacted and is active.
     * @param text {String} Description of the incentive/law/regulation, including applicable legislative references, html formated.
     * @param title {String} The brief title assigned to the incentive/law/regulation description.
     * @param topics {Array.<module:model/LawTopics>} For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
     * @param type {String} The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives
     * @param types {Array.<module:model/LawType>} The types that apply to this law
     */
    constructor(categories, id, plaintext, references, state, text, title, topics, type, types) { 
        
        Law.initialize(this, categories, id, plaintext, references, state, text, title, topics, type, types);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, id, plaintext, references, state, text, title, topics, type, types) { 
        obj['categories'] = categories;
        obj['id'] = id;
        obj['plaintext'] = plaintext;
        obj['references'] = references;
        obj['state'] = state;
        obj['text'] = text;
        obj['title'] = title;
        obj['topics'] = topics;
        obj['type'] = type;
        obj['types'] = types;
    }

    /**
     * Constructs a <code>Law</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Law} obj Optional instance to populate.
     * @return {module:model/Law} The populated <code>Law</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Law();

            if (data.hasOwnProperty('agency')) {
                obj['agency'] = ApiClient.convertToType(data['agency'], 'String');
            }
            if (data.hasOwnProperty('amended_date')) {
                obj['amended_date'] = ApiClient.convertToType(data['amended_date'], 'Date');
            }
            if (data.hasOwnProperty('archived_date')) {
                obj['archived_date'] = ApiClient.convertToType(data['archived_date'], 'Date');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Poc]);
            }
            if (data.hasOwnProperty('enacted_date')) {
                obj['enacted_date'] = ApiClient.convertToType(data['enacted_date'], 'Date');
            }
            if (data.hasOwnProperty('expired_date')) {
                obj['expired_date'] = ApiClient.convertToType(data['expired_date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_recent')) {
                obj['is_recent'] = ApiClient.convertToType(data['is_recent'], 'Boolean');
            }
            if (data.hasOwnProperty('plaintext')) {
                obj['plaintext'] = ApiClient.convertToType(data['plaintext'], 'String');
            }
            if (data.hasOwnProperty('recent_update_or_new')) {
                obj['recent_update_or_new'] = ApiClient.convertToType(data['recent_update_or_new'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], [LawReference]);
            }
            if (data.hasOwnProperty('repealed_date')) {
                obj['repealed_date'] = ApiClient.convertToType(data['repealed_date'], 'Date');
            }
            if (data.hasOwnProperty('seq_num')) {
                obj['seq_num'] = ApiClient.convertToType(data['seq_num'], 'Number');
            }
            if (data.hasOwnProperty('significant_update_date')) {
                obj['significant_update_date'] = ApiClient.convertToType(data['significant_update_date'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [LawTopics]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [LawType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Law</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Law</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Law.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['agency'] && !(typeof data['agency'] === 'string' || data['agency'] instanceof String)) {
            throw new Error("Expected the field `agency` to be a primitive type in the JSON string but got " + data['agency']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Poc.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['plaintext'] && !(typeof data['plaintext'] === 'string' || data['plaintext'] instanceof String)) {
            throw new Error("Expected the field `plaintext` to be a primitive type in the JSON string but got " + data['plaintext']);
        }
        // ensure the json data is a string
        if (data['recent_update_or_new'] && !(typeof data['recent_update_or_new'] === 'string' || data['recent_update_or_new'] instanceof String)) {
            throw new Error("Expected the field `recent_update_or_new` to be a primitive type in the JSON string but got " + data['recent_update_or_new']);
        }
        if (data['references']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['references'])) {
                throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
            }
            // validate the optional field `references` (array)
            for (const item of data['references']) {
                LawReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                LawTopics.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['types'])) {
                throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
            }
            // validate the optional field `types` (array)
            for (const item of data['types']) {
                LawType.validateJSON(item);
            };
        }

        return true;
    }


}

Law.RequiredProperties = ["categories", "id", "plaintext", "references", "state", "text", "title", "topics", "type", "types"];

/**
 * The agency with primary responsibility for federal incentives/regulations.
 * @member {String} agency
 */
Law.prototype['agency'] = undefined;

/**
 * The date the incentive/law/regulation was updated through new legislation or rulemaking.
 * @member {Date} amended_date
 */
Law.prototype['amended_date'] = undefined;

/**
 * The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.
 * @member {Date} archived_date
 */
Law.prototype['archived_date'] = undefined;

/**
 * The various law categories that apply to this law
 * @member {Array.<module:model/Category>} categories
 */
Law.prototype['categories'] = undefined;

/**
 * The contacts for the given law, returned only if the parameter poc is true
 * @member {Array.<module:model/Poc>} contacts
 */
Law.prototype['contacts'] = undefined;

/**
 * The date the enacting legislation (if applicable) was signed into law.
 * @member {Date} enacted_date
 */
Law.prototype['enacted_date'] = undefined;

/**
 * The date the incentive/law/regulation is set to end.
 * @member {Date} expired_date
 */
Law.prototype['expired_date'] = undefined;

/**
 * A unique identifier for this specific incentive/law/regulation.
 * @member {Number} id
 */
Law.prototype['id'] = undefined;

/**
 * The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).
 * @member {Boolean} is_recent
 */
Law.prototype['is_recent'] = undefined;

/**
 * Description of the incentive/law/regulation, including applicable legislative references, in <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown formatting</a>
 * @member {String} plaintext
 */
Law.prototype['plaintext'] = undefined;

/**
 * An indicator if the last significant update was an update or the laws creation.
 * @member {String} recent_update_or_new
 */
Law.prototype['recent_update_or_new'] = undefined;

/**
 * The URL associated with any bill or legislative reference included in the description.
 * @member {Array.<module:model/LawReference>} references
 */
Law.prototype['references'] = undefined;

/**
 * The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.
 * @member {Date} repealed_date
 */
Law.prototype['repealed_date'] = undefined;

/**
 * The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).
 * @member {Number} seq_num
 */
Law.prototype['seq_num'] = undefined;

/**
 * When the last significant update to the law was made.
 * @member {Date} significant_update_date
 */
Law.prototype['significant_update_date'] = undefined;

/**
 * The state in which the incentive/law/regulation was enacted and is active.
 * @member {String} state
 */
Law.prototype['state'] = undefined;

/**
 * Description of the incentive/law/regulation, including applicable legislative references, html formated.
 * @member {String} text
 */
Law.prototype['text'] = undefined;

/**
 * The brief title assigned to the incentive/law/regulation description.
 * @member {String} title
 */
Law.prototype['title'] = undefined;

/**
 * For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
 * @member {Array.<module:model/LawTopics>} topics
 */
Law.prototype['topics'] = undefined;

/**
 * The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives
 * @member {String} type
 */
Law.prototype['type'] = undefined;

/**
 * The types that apply to this law
 * @member {Array.<module:model/LawType>} types
 */
Law.prototype['types'] = undefined;






export default Law;

