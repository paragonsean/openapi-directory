# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Poc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agency: str=None, email: str=None, fax: str=None, name: str=None, state: str=None, telephone: str=None, title: str=None, web_page: str=None):
        """Poc - a model defined in OpenAPI

        :param agency: The agency of this Poc.
        :param email: The email of this Poc.
        :param fax: The fax of this Poc.
        :param name: The name of this Poc.
        :param state: The state of this Poc.
        :param telephone: The telephone of this Poc.
        :param title: The title of this Poc.
        :param web_page: The web_page of this Poc.
        """
        self.openapi_types = {
            'agency': str,
            'email': str,
            'fax': str,
            'name': str,
            'state': str,
            'telephone': str,
            'title': str,
            'web_page': str
        }

        self.attribute_map = {
            'agency': 'agency',
            'email': 'email',
            'fax': 'fax',
            'name': 'name',
            'state': 'state',
            'telephone': 'telephone',
            'title': 'title',
            'web_page': 'web_page'
        }

        self._agency = agency
        self._email = email
        self._fax = fax
        self._name = name
        self._state = state
        self._telephone = telephone
        self._title = title
        self._web_page = web_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Poc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Poc of this Poc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agency(self):
        """Gets the agency of this Poc.

        The agency that the contact represents

        :return: The agency of this Poc.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Poc.

        The agency that the contact represents

        :param agency: The agency of this Poc.
        :type agency: str
        """

        self._agency = agency

    @property
    def email(self):
        """Gets the email of this Poc.

        The contacts email address

        :return: The email of this Poc.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Poc.

        The contacts email address

        :param email: The email of this Poc.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this Poc.

        The contacts fax number

        :return: The fax of this Poc.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Poc.

        The contacts fax number

        :param fax: The fax of this Poc.
        :type fax: str
        """

        self._fax = fax

    @property
    def name(self):
        """Gets the name of this Poc.

        The name of the contact

        :return: The name of this Poc.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Poc.

        The name of the contact

        :param name: The name of this Poc.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this Poc.

        The state in which the contact is based ('US' for Federal laws and 'DC' for the District of Columbia)

        :return: The state of this Poc.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Poc.

        The state in which the contact is based ('US' for Federal laws and 'DC' for the District of Columbia)

        :param state: The state of this Poc.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def telephone(self):
        """Gets the telephone of this Poc.

        The contacts phone number

        :return: The telephone of this Poc.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Poc.

        The contacts phone number

        :param telephone: The telephone of this Poc.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def title(self):
        """Gets the title of this Poc.

        The job title of the contact

        :return: The title of this Poc.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Poc.

        The job title of the contact

        :param title: The title of this Poc.
        :type title: str
        """

        self._title = title

    @property
    def web_page(self):
        """Gets the web_page of this Poc.

        The contacts webpage

        :return: The web_page of this Poc.
        :rtype: str
        """
        return self._web_page

    @web_page.setter
    def web_page(self, web_page):
        """Sets the web_page of this Poc.

        The contacts webpage

        :param web_page: The web_page of this Poc.
        :type web_page: str
        """

        self._web_page = web_page
