# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.law import Law
from openapi_server.models.metadata import Metadata
from openapi_server import util


class LawResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inputs: object=None, metadata: Metadata=None, result: Law=None):
        """LawResult - a model defined in OpenAPI

        :param inputs: The inputs of this LawResult.
        :param metadata: The metadata of this LawResult.
        :param result: The result of this LawResult.
        """
        self.openapi_types = {
            'inputs': object,
            'metadata': Metadata,
            'result': Law
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'metadata': 'metadata',
            'result': 'result'
        }

        self._inputs = inputs
        self._metadata = metadata
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LawResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LawResult of this LawResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """Gets the inputs of this LawResult.

        The parameters that were passed to the API

        :return: The inputs of this LawResult.
        :rtype: object
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this LawResult.

        The parameters that were passed to the API

        :param inputs: The inputs of this LawResult.
        :type inputs: object
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")

        self._inputs = inputs

    @property
    def metadata(self):
        """Gets the metadata of this LawResult.


        :return: The metadata of this LawResult.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LawResult.


        :param metadata: The metadata of this LawResult.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def result(self):
        """Gets the result of this LawResult.


        :return: The result of this LawResult.
        :rtype: Law
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this LawResult.


        :param result: The result of this LawResult.
        :type result: Law
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result
