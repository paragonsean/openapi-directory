# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.law_reference import LawReference
from openapi_server.models.law_topics import LawTopics
from openapi_server.models.law_type import LawType
from openapi_server.models.poc import Poc
from openapi_server import util


class Law(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agency: str=None, amended_date: datetime=None, archived_date: datetime=None, categories: List[Category]=None, contacts: List[Poc]=None, enacted_date: datetime=None, expired_date: datetime=None, id: int=None, is_recent: bool=None, plaintext: str=None, recent_update_or_new: str=None, references: List[LawReference]=None, repealed_date: datetime=None, seq_num: int=None, significant_update_date: datetime=None, state: str=None, text: str=None, title: str=None, topics: List[LawTopics]=None, type: str=None, types: List[LawType]=None):
        """Law - a model defined in OpenAPI

        :param agency: The agency of this Law.
        :param amended_date: The amended_date of this Law.
        :param archived_date: The archived_date of this Law.
        :param categories: The categories of this Law.
        :param contacts: The contacts of this Law.
        :param enacted_date: The enacted_date of this Law.
        :param expired_date: The expired_date of this Law.
        :param id: The id of this Law.
        :param is_recent: The is_recent of this Law.
        :param plaintext: The plaintext of this Law.
        :param recent_update_or_new: The recent_update_or_new of this Law.
        :param references: The references of this Law.
        :param repealed_date: The repealed_date of this Law.
        :param seq_num: The seq_num of this Law.
        :param significant_update_date: The significant_update_date of this Law.
        :param state: The state of this Law.
        :param text: The text of this Law.
        :param title: The title of this Law.
        :param topics: The topics of this Law.
        :param type: The type of this Law.
        :param types: The types of this Law.
        """
        self.openapi_types = {
            'agency': str,
            'amended_date': datetime,
            'archived_date': datetime,
            'categories': List[Category],
            'contacts': List[Poc],
            'enacted_date': datetime,
            'expired_date': datetime,
            'id': int,
            'is_recent': bool,
            'plaintext': str,
            'recent_update_or_new': str,
            'references': List[LawReference],
            'repealed_date': datetime,
            'seq_num': int,
            'significant_update_date': datetime,
            'state': str,
            'text': str,
            'title': str,
            'topics': List[LawTopics],
            'type': str,
            'types': List[LawType]
        }

        self.attribute_map = {
            'agency': 'agency',
            'amended_date': 'amended_date',
            'archived_date': 'archived_date',
            'categories': 'categories',
            'contacts': 'contacts',
            'enacted_date': 'enacted_date',
            'expired_date': 'expired_date',
            'id': 'id',
            'is_recent': 'is_recent',
            'plaintext': 'plaintext',
            'recent_update_or_new': 'recent_update_or_new',
            'references': 'references',
            'repealed_date': 'repealed_date',
            'seq_num': 'seq_num',
            'significant_update_date': 'significant_update_date',
            'state': 'state',
            'text': 'text',
            'title': 'title',
            'topics': 'topics',
            'type': 'type',
            'types': 'types'
        }

        self._agency = agency
        self._amended_date = amended_date
        self._archived_date = archived_date
        self._categories = categories
        self._contacts = contacts
        self._enacted_date = enacted_date
        self._expired_date = expired_date
        self._id = id
        self._is_recent = is_recent
        self._plaintext = plaintext
        self._recent_update_or_new = recent_update_or_new
        self._references = references
        self._repealed_date = repealed_date
        self._seq_num = seq_num
        self._significant_update_date = significant_update_date
        self._state = state
        self._text = text
        self._title = title
        self._topics = topics
        self._type = type
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Law':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Law of this Law.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agency(self):
        """Gets the agency of this Law.

        The agency with primary responsibility for federal incentives/regulations.

        :return: The agency of this Law.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Law.

        The agency with primary responsibility for federal incentives/regulations.

        :param agency: The agency of this Law.
        :type agency: str
        """

        self._agency = agency

    @property
    def amended_date(self):
        """Gets the amended_date of this Law.

        The date the incentive/law/regulation was updated through new legislation or rulemaking.

        :return: The amended_date of this Law.
        :rtype: datetime
        """
        return self._amended_date

    @amended_date.setter
    def amended_date(self, amended_date):
        """Sets the amended_date of this Law.

        The date the incentive/law/regulation was updated through new legislation or rulemaking.

        :param amended_date: The amended_date of this Law.
        :type amended_date: datetime
        """

        self._amended_date = amended_date

    @property
    def archived_date(self):
        """Gets the archived_date of this Law.

        The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.

        :return: The archived_date of this Law.
        :rtype: datetime
        """
        return self._archived_date

    @archived_date.setter
    def archived_date(self, archived_date):
        """Sets the archived_date of this Law.

        The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.

        :param archived_date: The archived_date of this Law.
        :type archived_date: datetime
        """

        self._archived_date = archived_date

    @property
    def categories(self):
        """Gets the categories of this Law.

        The various law categories that apply to this law

        :return: The categories of this Law.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Law.

        The various law categories that apply to this law

        :param categories: The categories of this Law.
        :type categories: List[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def contacts(self):
        """Gets the contacts of this Law.

        The contacts for the given law, returned only if the parameter poc is true

        :return: The contacts of this Law.
        :rtype: List[Poc]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Law.

        The contacts for the given law, returned only if the parameter poc is true

        :param contacts: The contacts of this Law.
        :type contacts: List[Poc]
        """

        self._contacts = contacts

    @property
    def enacted_date(self):
        """Gets the enacted_date of this Law.

        The date the enacting legislation (if applicable) was signed into law.

        :return: The enacted_date of this Law.
        :rtype: datetime
        """
        return self._enacted_date

    @enacted_date.setter
    def enacted_date(self, enacted_date):
        """Sets the enacted_date of this Law.

        The date the enacting legislation (if applicable) was signed into law.

        :param enacted_date: The enacted_date of this Law.
        :type enacted_date: datetime
        """

        self._enacted_date = enacted_date

    @property
    def expired_date(self):
        """Gets the expired_date of this Law.

        The date the incentive/law/regulation is set to end.

        :return: The expired_date of this Law.
        :rtype: datetime
        """
        return self._expired_date

    @expired_date.setter
    def expired_date(self, expired_date):
        """Sets the expired_date of this Law.

        The date the incentive/law/regulation is set to end.

        :param expired_date: The expired_date of this Law.
        :type expired_date: datetime
        """

        self._expired_date = expired_date

    @property
    def id(self):
        """Gets the id of this Law.

        A unique identifier for this specific incentive/law/regulation.

        :return: The id of this Law.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Law.

        A unique identifier for this specific incentive/law/regulation.

        :param id: The id of this Law.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_recent(self):
        """Gets the is_recent of this Law.

        The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).

        :return: The is_recent of this Law.
        :rtype: bool
        """
        return self._is_recent

    @is_recent.setter
    def is_recent(self, is_recent):
        """Sets the is_recent of this Law.

        The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).

        :param is_recent: The is_recent of this Law.
        :type is_recent: bool
        """

        self._is_recent = is_recent

    @property
    def plaintext(self):
        """Gets the plaintext of this Law.

        Description of the incentive/law/regulation, including applicable legislative references, in <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown formatting</a>

        :return: The plaintext of this Law.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this Law.

        Description of the incentive/law/regulation, including applicable legislative references, in <a href=\"https://guides.github.com/features/mastering-markdown/\">markdown formatting</a>

        :param plaintext: The plaintext of this Law.
        :type plaintext: str
        """
        if plaintext is None:
            raise ValueError("Invalid value for `plaintext`, must not be `None`")

        self._plaintext = plaintext

    @property
    def recent_update_or_new(self):
        """Gets the recent_update_or_new of this Law.

        An indicator if the last significant update was an update or the laws creation.

        :return: The recent_update_or_new of this Law.
        :rtype: str
        """
        return self._recent_update_or_new

    @recent_update_or_new.setter
    def recent_update_or_new(self, recent_update_or_new):
        """Sets the recent_update_or_new of this Law.

        An indicator if the last significant update was an update or the laws creation.

        :param recent_update_or_new: The recent_update_or_new of this Law.
        :type recent_update_or_new: str
        """

        self._recent_update_or_new = recent_update_or_new

    @property
    def references(self):
        """Gets the references of this Law.

        The URL associated with any bill or legislative reference included in the description.

        :return: The references of this Law.
        :rtype: List[LawReference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Law.

        The URL associated with any bill or legislative reference included in the description.

        :param references: The references of this Law.
        :type references: List[LawReference]
        """
        if references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")

        self._references = references

    @property
    def repealed_date(self):
        """Gets the repealed_date of this Law.

        The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.

        :return: The repealed_date of this Law.
        :rtype: datetime
        """
        return self._repealed_date

    @repealed_date.setter
    def repealed_date(self, repealed_date):
        """Sets the repealed_date of this Law.

        The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.

        :param repealed_date: The repealed_date of this Law.
        :type repealed_date: datetime
        """

        self._repealed_date = repealed_date

    @property
    def seq_num(self):
        """Gets the seq_num of this Law.

        The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).

        :return: The seq_num of this Law.
        :rtype: int
        """
        return self._seq_num

    @seq_num.setter
    def seq_num(self, seq_num):
        """Sets the seq_num of this Law.

        The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).

        :param seq_num: The seq_num of this Law.
        :type seq_num: int
        """

        self._seq_num = seq_num

    @property
    def significant_update_date(self):
        """Gets the significant_update_date of this Law.

        When the last significant update to the law was made.

        :return: The significant_update_date of this Law.
        :rtype: datetime
        """
        return self._significant_update_date

    @significant_update_date.setter
    def significant_update_date(self, significant_update_date):
        """Sets the significant_update_date of this Law.

        When the last significant update to the law was made.

        :param significant_update_date: The significant_update_date of this Law.
        :type significant_update_date: datetime
        """

        self._significant_update_date = significant_update_date

    @property
    def state(self):
        """Gets the state of this Law.

        The state in which the incentive/law/regulation was enacted and is active.

        :return: The state of this Law.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Law.

        The state in which the incentive/law/regulation was enacted and is active.

        :param state: The state of this Law.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def text(self):
        """Gets the text of this Law.

        Description of the incentive/law/regulation, including applicable legislative references, html formated.

        :return: The text of this Law.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Law.

        Description of the incentive/law/regulation, including applicable legislative references, html formated.

        :param text: The text of this Law.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def title(self):
        """Gets the title of this Law.

        The brief title assigned to the incentive/law/regulation description.

        :return: The title of this Law.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Law.

        The brief title assigned to the incentive/law/regulation description.

        :param title: The title of this Law.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def topics(self):
        """Gets the topics of this Law.

        For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards

        :return: The topics of this Law.
        :rtype: List[LawTopics]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Law.

        For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards

        :param topics: The topics of this Law.
        :type topics: List[LawTopics]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")

        self._topics = topics

    @property
    def type(self):
        """Gets the type of this Law.

        The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives

        :return: The type of this Law.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Law.

        The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives

        :param type: The type of this Law.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def types(self):
        """Gets the types of this Law.

        The types that apply to this law

        :return: The types of this Law.
        :rtype: List[LawType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Law.

        The types that apply to this law

        :param types: The types of this Law.
        :type types: List[LawType]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
