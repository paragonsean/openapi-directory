# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LawTopics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, sort_order: int=None, title: str=None):
        """LawTopics - a model defined in OpenAPI

        :param id: The id of this LawTopics.
        :param sort_order: The sort_order of this LawTopics.
        :param title: The title of this LawTopics.
        """
        self.openapi_types = {
            'id': int,
            'sort_order': int,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'sort_order': 'sort_order',
            'title': 'title'
        }

        self._id = id
        self._sort_order = sort_order
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LawTopics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LawTopics of this LawTopics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LawTopics.

        The database id of the law topic

        :return: The id of this LawTopics.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LawTopics.

        The database id of the law topic

        :param id: The id of this LawTopics.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sort_order(self):
        """Gets the sort_order of this LawTopics.

        The sort order of the law topic

        :return: The sort_order of this LawTopics.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this LawTopics.

        The sort order of the law topic

        :param sort_order: The sort_order of this LawTopics.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def title(self):
        """Gets the title of this LawTopics.

        The name of the law topic

        :return: The title of this LawTopics.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LawTopics.

        The name of the law topic

        :param title: The title of this LawTopics.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
