# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, version: str=None):
        """Metadata - a model defined in OpenAPI

        :param count: The count of this Metadata.
        :param version: The version of this Metadata.
        """
        self.openapi_types = {
            'count': int,
            'version': str
        }

        self.attribute_map = {
            'count': 'count',
            'version': 'version'
        }

        self._count = count
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Metadata.

        If the request returns an array of results, this is the number of results returned in the array

        :return: The count of this Metadata.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Metadata.

        If the request returns an array of results, this is the number of results returned in the array

        :param count: The count of this Metadata.
        :type count: int
        """

        self._count = count

    @property
    def version(self):
        """Gets the version of this Metadata.

        This is the version of the api

        :return: The version of this Metadata.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Metadata.

        This is the version of the api

        :param version: The version of this Metadata.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
