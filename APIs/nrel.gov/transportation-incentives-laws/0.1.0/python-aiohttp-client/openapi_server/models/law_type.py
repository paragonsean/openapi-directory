# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LawType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, id: int=None, title: str=None):
        """LawType - a model defined in OpenAPI

        :param code: The code of this LawType.
        :param id: The id of this LawType.
        :param title: The title of this LawType.
        """
        self.openapi_types = {
            'code': str,
            'id': int,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'id': 'id',
            'title': 'title'
        }

        self._code = code
        self._id = id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LawType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LawType of this LawType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this LawType.

        The code used to identify the law type

        :return: The code of this LawType.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LawType.

        The code used to identify the law type

        :param code: The code of this LawType.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def id(self):
        """Gets the id of this LawType.

        The id of the law type

        :return: The id of this LawType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LawType.

        The id of the law type

        :param id: The id of this LawType.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this LawType.

        The name of the law type

        :return: The title of this LawType.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LawType.

        The name of the law type

        :param title: The title of this LawType.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
