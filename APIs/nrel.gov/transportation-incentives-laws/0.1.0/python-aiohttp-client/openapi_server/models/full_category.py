# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FullCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_type: str=None, code: str=None, help_text: str=None, sort_order: str=None, title: str=None):
        """FullCategory - a model defined in OpenAPI

        :param category_type: The category_type of this FullCategory.
        :param code: The code of this FullCategory.
        :param help_text: The help_text of this FullCategory.
        :param sort_order: The sort_order of this FullCategory.
        :param title: The title of this FullCategory.
        """
        self.openapi_types = {
            'category_type': str,
            'code': str,
            'help_text': str,
            'sort_order': str,
            'title': str
        }

        self.attribute_map = {
            'category_type': 'category_type',
            'code': 'code',
            'help_text': 'help_text',
            'sort_order': 'sort_order',
            'title': 'title'
        }

        self._category_type = category_type
        self._code = code
        self._help_text = help_text
        self._sort_order = sort_order
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullCategory of this FullCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_type(self):
        """Gets the category_type of this FullCategory.

        The type of category. (E.g. tech, incentive, regulation, user)

        :return: The category_type of this FullCategory.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this FullCategory.

        The type of category. (E.g. tech, incentive, regulation, user)

        :param category_type: The category_type of this FullCategory.
        :type category_type: str
        """
        if category_type is None:
            raise ValueError("Invalid value for `category_type`, must not be `None`")

        self._category_type = category_type

    @property
    def code(self):
        """Gets the code of this FullCategory.

        The code used to identify the category

        :return: The code of this FullCategory.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FullCategory.

        The code used to identify the category

        :param code: The code of this FullCategory.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def help_text(self):
        """Gets the help_text of this FullCategory.

        A short description of what the law category encompasses

        :return: The help_text of this FullCategory.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this FullCategory.

        A short description of what the law category encompasses

        :param help_text: The help_text of this FullCategory.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def sort_order(self):
        """Gets the sort_order of this FullCategory.

        The sort order for the categories

        :return: The sort_order of this FullCategory.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FullCategory.

        The sort order for the categories

        :param sort_order: The sort_order of this FullCategory.
        :type sort_order: str
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def title(self):
        """Gets the title of this FullCategory.

        The full name of the category

        :return: The title of this FullCategory.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FullCategory.

        The full name of the category

        :param title: The title of this FullCategory.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
