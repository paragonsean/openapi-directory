/*
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.LawReference;
import org.openapitools.client.model.LawTopics;
import org.openapitools.client.model.LawType;
import org.openapitools.client.model.Poc;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a Law
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:50.620299-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Law {
  public static final String SERIALIZED_NAME_AGENCY = "agency";
  @SerializedName(SERIALIZED_NAME_AGENCY)
  private String agency;

  public static final String SERIALIZED_NAME_AMENDED_DATE = "amended_date";
  @SerializedName(SERIALIZED_NAME_AMENDED_DATE)
  private OffsetDateTime amendedDate;

  public static final String SERIALIZED_NAME_ARCHIVED_DATE = "archived_date";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_DATE)
  private OffsetDateTime archivedDate;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<Poc> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENACTED_DATE = "enacted_date";
  @SerializedName(SERIALIZED_NAME_ENACTED_DATE)
  private OffsetDateTime enactedDate;

  public static final String SERIALIZED_NAME_EXPIRED_DATE = "expired_date";
  @SerializedName(SERIALIZED_NAME_EXPIRED_DATE)
  private OffsetDateTime expiredDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_RECENT = "is_recent";
  @SerializedName(SERIALIZED_NAME_IS_RECENT)
  private Boolean isRecent;

  public static final String SERIALIZED_NAME_PLAINTEXT = "plaintext";
  @SerializedName(SERIALIZED_NAME_PLAINTEXT)
  private String plaintext;

  public static final String SERIALIZED_NAME_RECENT_UPDATE_OR_NEW = "recent_update_or_new";
  @SerializedName(SERIALIZED_NAME_RECENT_UPDATE_OR_NEW)
  private String recentUpdateOrNew;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<LawReference> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPEALED_DATE = "repealed_date";
  @SerializedName(SERIALIZED_NAME_REPEALED_DATE)
  private OffsetDateTime repealedDate;

  public static final String SERIALIZED_NAME_SEQ_NUM = "seq_num";
  @SerializedName(SERIALIZED_NAME_SEQ_NUM)
  private Integer seqNum;

  public static final String SERIALIZED_NAME_SIGNIFICANT_UPDATE_DATE = "significant_update_date";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANT_UPDATE_DATE)
  private OffsetDateTime significantUpdateDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<LawTopics> topics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<LawType> types = new ArrayList<>();

  public Law() {
  }

  public Law agency(String agency) {
    this.agency = agency;
    return this;
  }

  /**
   * The agency with primary responsibility for federal incentives/regulations.
   * @return agency
   */
  @javax.annotation.Nullable
  public String getAgency() {
    return agency;
  }

  public void setAgency(String agency) {
    this.agency = agency;
  }


  public Law amendedDate(OffsetDateTime amendedDate) {
    this.amendedDate = amendedDate;
    return this;
  }

  /**
   * The date the incentive/law/regulation was updated through new legislation or rulemaking.
   * @return amendedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAmendedDate() {
    return amendedDate;
  }

  public void setAmendedDate(OffsetDateTime amendedDate) {
    this.amendedDate = amendedDate;
  }


  public Law archivedDate(OffsetDateTime archivedDate) {
    this.archivedDate = archivedDate;
    return this;
  }

  /**
   * The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.
   * @return archivedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedDate() {
    return archivedDate;
  }

  public void setArchivedDate(OffsetDateTime archivedDate) {
    this.archivedDate = archivedDate;
  }


  public Law categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public Law addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The various law categories that apply to this law
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public Law contacts(List<Poc> contacts) {
    this.contacts = contacts;
    return this;
  }

  public Law addContactsItem(Poc contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * The contacts for the given law, returned only if the parameter poc is true
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<Poc> getContacts() {
    return contacts;
  }

  public void setContacts(List<Poc> contacts) {
    this.contacts = contacts;
  }


  public Law enactedDate(OffsetDateTime enactedDate) {
    this.enactedDate = enactedDate;
    return this;
  }

  /**
   * The date the enacting legislation (if applicable) was signed into law.
   * @return enactedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnactedDate() {
    return enactedDate;
  }

  public void setEnactedDate(OffsetDateTime enactedDate) {
    this.enactedDate = enactedDate;
  }


  public Law expiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
    return this;
  }

  /**
   * The date the incentive/law/regulation is set to end.
   * @return expiredDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiredDate() {
    return expiredDate;
  }

  public void setExpiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
  }


  public Law id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * A unique identifier for this specific incentive/law/regulation.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Law isRecent(Boolean isRecent) {
    this.isRecent = isRecent;
    return this;
  }

  /**
   * The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).
   * @return isRecent
   */
  @javax.annotation.Nullable
  public Boolean getIsRecent() {
    return isRecent;
  }

  public void setIsRecent(Boolean isRecent) {
    this.isRecent = isRecent;
  }


  public Law plaintext(String plaintext) {
    this.plaintext = plaintext;
    return this;
  }

  /**
   * Description of the incentive/law/regulation, including applicable legislative references, in &lt;a href&#x3D;\&quot;https://guides.github.com/features/mastering-markdown/\&quot;&gt;markdown formatting&lt;/a&gt;
   * @return plaintext
   */
  @javax.annotation.Nonnull
  public String getPlaintext() {
    return plaintext;
  }

  public void setPlaintext(String plaintext) {
    this.plaintext = plaintext;
  }


  public Law recentUpdateOrNew(String recentUpdateOrNew) {
    this.recentUpdateOrNew = recentUpdateOrNew;
    return this;
  }

  /**
   * An indicator if the last significant update was an update or the laws creation.
   * @return recentUpdateOrNew
   */
  @javax.annotation.Nullable
  public String getRecentUpdateOrNew() {
    return recentUpdateOrNew;
  }

  public void setRecentUpdateOrNew(String recentUpdateOrNew) {
    this.recentUpdateOrNew = recentUpdateOrNew;
  }


  public Law references(List<LawReference> references) {
    this.references = references;
    return this;
  }

  public Law addReferencesItem(LawReference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * The URL associated with any bill or legislative reference included in the description.
   * @return references
   */
  @javax.annotation.Nonnull
  public List<LawReference> getReferences() {
    return references;
  }

  public void setReferences(List<LawReference> references) {
    this.references = references;
  }


  public Law repealedDate(OffsetDateTime repealedDate) {
    this.repealedDate = repealedDate;
    return this;
  }

  /**
   * The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.
   * @return repealedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRepealedDate() {
    return repealedDate;
  }

  public void setRepealedDate(OffsetDateTime repealedDate) {
    this.repealedDate = repealedDate;
  }


  public Law seqNum(Integer seqNum) {
    this.seqNum = seqNum;
    return this;
  }

  /**
   * The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).
   * @return seqNum
   */
  @javax.annotation.Nullable
  public Integer getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(Integer seqNum) {
    this.seqNum = seqNum;
  }


  public Law significantUpdateDate(OffsetDateTime significantUpdateDate) {
    this.significantUpdateDate = significantUpdateDate;
    return this;
  }

  /**
   * When the last significant update to the law was made.
   * @return significantUpdateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignificantUpdateDate() {
    return significantUpdateDate;
  }

  public void setSignificantUpdateDate(OffsetDateTime significantUpdateDate) {
    this.significantUpdateDate = significantUpdateDate;
  }


  public Law state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state in which the incentive/law/regulation was enacted and is active.
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Law text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Description of the incentive/law/regulation, including applicable legislative references, html formated.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Law title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The brief title assigned to the incentive/law/regulation description.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Law topics(List<LawTopics> topics) {
    this.topics = topics;
    return this;
  }

  public Law addTopicsItem(LawTopics topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
   * @return topics
   */
  @javax.annotation.Nonnull
  public List<LawTopics> getTopics() {
    return topics;
  }

  public void setTopics(List<LawTopics> topics) {
    this.topics = topics;
  }


  public Law type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Law types(List<LawType> types) {
    this.types = types;
    return this;
  }

  public Law addTypesItem(LawType typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * The types that apply to this law
   * @return types
   */
  @javax.annotation.Nonnull
  public List<LawType> getTypes() {
    return types;
  }

  public void setTypes(List<LawType> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Law law = (Law) o;
    return Objects.equals(this.agency, law.agency) &&
        Objects.equals(this.amendedDate, law.amendedDate) &&
        Objects.equals(this.archivedDate, law.archivedDate) &&
        Objects.equals(this.categories, law.categories) &&
        Objects.equals(this.contacts, law.contacts) &&
        Objects.equals(this.enactedDate, law.enactedDate) &&
        Objects.equals(this.expiredDate, law.expiredDate) &&
        Objects.equals(this.id, law.id) &&
        Objects.equals(this.isRecent, law.isRecent) &&
        Objects.equals(this.plaintext, law.plaintext) &&
        Objects.equals(this.recentUpdateOrNew, law.recentUpdateOrNew) &&
        Objects.equals(this.references, law.references) &&
        Objects.equals(this.repealedDate, law.repealedDate) &&
        Objects.equals(this.seqNum, law.seqNum) &&
        Objects.equals(this.significantUpdateDate, law.significantUpdateDate) &&
        Objects.equals(this.state, law.state) &&
        Objects.equals(this.text, law.text) &&
        Objects.equals(this.title, law.title) &&
        Objects.equals(this.topics, law.topics) &&
        Objects.equals(this.type, law.type) &&
        Objects.equals(this.types, law.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agency, amendedDate, archivedDate, categories, contacts, enactedDate, expiredDate, id, isRecent, plaintext, recentUpdateOrNew, references, repealedDate, seqNum, significantUpdateDate, state, text, title, topics, type, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Law {\n");
    sb.append("    agency: ").append(toIndentedString(agency)).append("\n");
    sb.append("    amendedDate: ").append(toIndentedString(amendedDate)).append("\n");
    sb.append("    archivedDate: ").append(toIndentedString(archivedDate)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    enactedDate: ").append(toIndentedString(enactedDate)).append("\n");
    sb.append("    expiredDate: ").append(toIndentedString(expiredDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isRecent: ").append(toIndentedString(isRecent)).append("\n");
    sb.append("    plaintext: ").append(toIndentedString(plaintext)).append("\n");
    sb.append("    recentUpdateOrNew: ").append(toIndentedString(recentUpdateOrNew)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    repealedDate: ").append(toIndentedString(repealedDate)).append("\n");
    sb.append("    seqNum: ").append(toIndentedString(seqNum)).append("\n");
    sb.append("    significantUpdateDate: ").append(toIndentedString(significantUpdateDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agency");
    openapiFields.add("amended_date");
    openapiFields.add("archived_date");
    openapiFields.add("categories");
    openapiFields.add("contacts");
    openapiFields.add("enacted_date");
    openapiFields.add("expired_date");
    openapiFields.add("id");
    openapiFields.add("is_recent");
    openapiFields.add("plaintext");
    openapiFields.add("recent_update_or_new");
    openapiFields.add("references");
    openapiFields.add("repealed_date");
    openapiFields.add("seq_num");
    openapiFields.add("significant_update_date");
    openapiFields.add("state");
    openapiFields.add("text");
    openapiFields.add("title");
    openapiFields.add("topics");
    openapiFields.add("type");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("plaintext");
    openapiRequiredFields.add("references");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("topics");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Law
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Law.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Law is not found in the empty JSON string", Law.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Law.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Law` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Law.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agency") != null && !jsonObj.get("agency").isJsonNull()) && !jsonObj.get("agency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agency").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonElement(jsonArraycategories.get(i));
      };
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            Poc.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if (!jsonObj.get("plaintext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaintext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaintext").toString()));
      }
      if ((jsonObj.get("recent_update_or_new") != null && !jsonObj.get("recent_update_or_new").isJsonNull()) && !jsonObj.get("recent_update_or_new").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recent_update_or_new` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recent_update_or_new").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("references").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }

      JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
      // validate the required field `references` (array)
      for (int i = 0; i < jsonArrayreferences.size(); i++) {
        LawReference.validateJsonElement(jsonArrayreferences.get(i));
      };
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }

      JsonArray jsonArraytopics = jsonObj.getAsJsonArray("topics");
      // validate the required field `topics` (array)
      for (int i = 0; i < jsonArraytopics.size(); i++) {
        LawTopics.validateJsonElement(jsonArraytopics.get(i));
      };
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }

      JsonArray jsonArraytypes = jsonObj.getAsJsonArray("types");
      // validate the required field `types` (array)
      for (int i = 0; i < jsonArraytypes.size(); i++) {
        LawType.validateJsonElement(jsonArraytypes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Law.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Law' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Law> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Law.class));

       return (TypeAdapter<T>) new TypeAdapter<Law>() {
           @Override
           public void write(JsonWriter out, Law value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Law read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Law given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Law
   * @throws IOException if the JSON string is invalid with respect to Law
   */
  public static Law fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Law.class);
  }

  /**
   * Convert an instance of Law to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

