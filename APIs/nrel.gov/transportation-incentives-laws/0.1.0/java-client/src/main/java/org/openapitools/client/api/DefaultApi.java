/*
 * Transportation Laws and Incentives
 * Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href=\"https://afdc.energy.gov/laws\">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CategoryResults;
import org.openapitools.client.model.LawResult;
import org.openapitools.client.model.LawsResponse;
import org.openapitools.client.model.PocResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transportationIncentivesLawsAll
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param limit Limit the number of laws returned (optional, default to 10)
     * @param jurisdiction Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (optional)
     * @param technology Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;BIOD&#39; for Biodiesel, &#39;ETH&#39; for Ethanol / Flexible Fuel Vehicles, &#39;NG&#39; for Natural Gas / Natural Gas Vehicles, &#39;LPG&#39; for Liquefied Petroleum Gas (Propane) / Propane Vehicles, &#39;HY&#39; for Hydrogen / Fuel Cell Electric Vehicles, &#39;ELEC&#39; for All-Electric Vehicles (EVs), &#39;PHEV&#39; for Plug-In Hybrid Electric Vehicles (PHEVs), &#39;HEV&#39; for Hybrid Electric Vehicles (HEVs), &#39;NEVS&#39; for Neighborhood Electric Vehicles (NEVs), &#39;RD&#39; for Renewable Diesel, &#39;AFTMKTCONV&#39; for Aftermarket Conversions, &#39;EFFEC&#39; for Fuel Economy / Efficiency, &#39;IR&#39; for Idle Reduction, &#39;AUTONOMOUS&#39; for Connected and Autonomous Vehicles, and &#39;OTHER&#39; for Other. (optional)
     * @param incentiveType Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;GNT&#39; for Grants, &#39;TAX&#39; for Tax Incentives, &#39;LOANS&#39; for Loans and Leases, &#39;RBATE&#39; for Rebates, &#39;EXEM&#39; for Exemptions, &#39;TOU&#39; for Time-of-Use Rate, and &#39;OTHER&#39; for Other. (optional)
     * @param regulationType Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;REQ&#39; for Acquisition / Fuel Use, &#39;DREST&#39; for Driving / Idling, &#39;REGIS&#39; for Registration / Licensing, &#39;EVFEE&#39; for EV Registration Fee, &#39;FUEL&#39; for Fuel Taxes, &#39;STD&#39; for Fuel Production / Quality, &#39;RFS&#39; for Renewable Fuel Standard / Mandate, &#39;AIRQEMISSIONS&#39; for Air Quality / Emissions, &#39;CCEINIT&#39; for Climate Change / Energy Initiatives, &#39;UTILITY&#39; for Utility Definition, &#39;BUILD&#39; for Building Codes, &#39;RTC&#39; for Right-to-Charge, and &#39;OTHER&#39; for Other. (optional)
     * @param userType Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;FLEET&#39; for Commercial, &#39;GOV&#39; for Government Entity, &#39;TRIBAL&#39; for Tribal Government, &#39;IND&#39; for Personal Vehicle Owner or Driver, &#39;STATION&#39; for Alternative Fuel Infrastructure Operator, &#39;AFP&#39; for Alternative Fuel Producer, &#39;PURCH&#39; for Alternative Fuel Purchaser, &#39;MAN&#39; for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, &#39;MUD&#39; for Multi-Unit Dwelling, &#39;TRANS&#39; for Transit, and &#39;OTHER&#39; for Other. (optional)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param recent Return only recently added or updated laws and incentives (optional, default to false)
     * @param expired The &#39;true&#39; value returns only expired, repealed, or archived laws and incentives. The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param lawType Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: &#39;STATEINC&#39; for State Incentives, &#39;UPINC &#39; for Utility/Private Incentives, &#39;LAWREG&#39; for Laws and Regulations, &#39;INC&#39; for Incentives, &#39;PROG&#39; for Programs, &#39;LUP&#39; for Last Updated, &#39;OVIEW&#39; for Overview, and &#39;HILITE&#39; for Highlights. (optional)
     * @param keyword Search laws by keyword in title or text. (optional)
     * @param local Show only local examples of laws and incentives. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsAllCall(String outputFormat, String apiKey, Integer limit, String jurisdiction, String technology, String incentiveType, String regulationType, String userType, Boolean poc, Boolean recent, Boolean expired, String lawType, String keyword, Boolean local, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (technology != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("technology", technology));
        }

        if (incentiveType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incentive_type", incentiveType));
        }

        if (regulationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regulation_type", regulationType));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_type", userType));
        }

        if (poc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poc", poc));
        }

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        if (lawType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("law_type", lawType));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transportationIncentivesLawsAllValidateBeforeCall(String outputFormat, String apiKey, Integer limit, String jurisdiction, String technology, String incentiveType, String regulationType, String userType, Boolean poc, Boolean recent, Boolean expired, String lawType, String keyword, Boolean local, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsAll(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsAll(Async)");
        }

        return transportationIncentivesLawsAllCall(outputFormat, apiKey, limit, jurisdiction, technology, incentiveType, regulationType, userType, poc, recent, expired, lawType, keyword, local, _callback);

    }

    /**
     * Return a full list of laws and incentives that match your query.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param limit Limit the number of laws returned (optional, default to 10)
     * @param jurisdiction Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (optional)
     * @param technology Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;BIOD&#39; for Biodiesel, &#39;ETH&#39; for Ethanol / Flexible Fuel Vehicles, &#39;NG&#39; for Natural Gas / Natural Gas Vehicles, &#39;LPG&#39; for Liquefied Petroleum Gas (Propane) / Propane Vehicles, &#39;HY&#39; for Hydrogen / Fuel Cell Electric Vehicles, &#39;ELEC&#39; for All-Electric Vehicles (EVs), &#39;PHEV&#39; for Plug-In Hybrid Electric Vehicles (PHEVs), &#39;HEV&#39; for Hybrid Electric Vehicles (HEVs), &#39;NEVS&#39; for Neighborhood Electric Vehicles (NEVs), &#39;RD&#39; for Renewable Diesel, &#39;AFTMKTCONV&#39; for Aftermarket Conversions, &#39;EFFEC&#39; for Fuel Economy / Efficiency, &#39;IR&#39; for Idle Reduction, &#39;AUTONOMOUS&#39; for Connected and Autonomous Vehicles, and &#39;OTHER&#39; for Other. (optional)
     * @param incentiveType Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;GNT&#39; for Grants, &#39;TAX&#39; for Tax Incentives, &#39;LOANS&#39; for Loans and Leases, &#39;RBATE&#39; for Rebates, &#39;EXEM&#39; for Exemptions, &#39;TOU&#39; for Time-of-Use Rate, and &#39;OTHER&#39; for Other. (optional)
     * @param regulationType Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;REQ&#39; for Acquisition / Fuel Use, &#39;DREST&#39; for Driving / Idling, &#39;REGIS&#39; for Registration / Licensing, &#39;EVFEE&#39; for EV Registration Fee, &#39;FUEL&#39; for Fuel Taxes, &#39;STD&#39; for Fuel Production / Quality, &#39;RFS&#39; for Renewable Fuel Standard / Mandate, &#39;AIRQEMISSIONS&#39; for Air Quality / Emissions, &#39;CCEINIT&#39; for Climate Change / Energy Initiatives, &#39;UTILITY&#39; for Utility Definition, &#39;BUILD&#39; for Building Codes, &#39;RTC&#39; for Right-to-Charge, and &#39;OTHER&#39; for Other. (optional)
     * @param userType Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;FLEET&#39; for Commercial, &#39;GOV&#39; for Government Entity, &#39;TRIBAL&#39; for Tribal Government, &#39;IND&#39; for Personal Vehicle Owner or Driver, &#39;STATION&#39; for Alternative Fuel Infrastructure Operator, &#39;AFP&#39; for Alternative Fuel Producer, &#39;PURCH&#39; for Alternative Fuel Purchaser, &#39;MAN&#39; for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, &#39;MUD&#39; for Multi-Unit Dwelling, &#39;TRANS&#39; for Transit, and &#39;OTHER&#39; for Other. (optional)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param recent Return only recently added or updated laws and incentives (optional, default to false)
     * @param expired The &#39;true&#39; value returns only expired, repealed, or archived laws and incentives. The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param lawType Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: &#39;STATEINC&#39; for State Incentives, &#39;UPINC &#39; for Utility/Private Incentives, &#39;LAWREG&#39; for Laws and Regulations, &#39;INC&#39; for Incentives, &#39;PROG&#39; for Programs, &#39;LUP&#39; for Last Updated, &#39;OVIEW&#39; for Overview, and &#39;HILITE&#39; for Highlights. (optional)
     * @param keyword Search laws by keyword in title or text. (optional)
     * @param local Show only local examples of laws and incentives. (optional, default to false)
     * @return LawsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public LawsResponse transportationIncentivesLawsAll(String outputFormat, String apiKey, Integer limit, String jurisdiction, String technology, String incentiveType, String regulationType, String userType, Boolean poc, Boolean recent, Boolean expired, String lawType, String keyword, Boolean local) throws ApiException {
        ApiResponse<LawsResponse> localVarResp = transportationIncentivesLawsAllWithHttpInfo(outputFormat, apiKey, limit, jurisdiction, technology, incentiveType, regulationType, userType, poc, recent, expired, lawType, keyword, local);
        return localVarResp.getData();
    }

    /**
     * Return a full list of laws and incentives that match your query.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param limit Limit the number of laws returned (optional, default to 10)
     * @param jurisdiction Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (optional)
     * @param technology Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;BIOD&#39; for Biodiesel, &#39;ETH&#39; for Ethanol / Flexible Fuel Vehicles, &#39;NG&#39; for Natural Gas / Natural Gas Vehicles, &#39;LPG&#39; for Liquefied Petroleum Gas (Propane) / Propane Vehicles, &#39;HY&#39; for Hydrogen / Fuel Cell Electric Vehicles, &#39;ELEC&#39; for All-Electric Vehicles (EVs), &#39;PHEV&#39; for Plug-In Hybrid Electric Vehicles (PHEVs), &#39;HEV&#39; for Hybrid Electric Vehicles (HEVs), &#39;NEVS&#39; for Neighborhood Electric Vehicles (NEVs), &#39;RD&#39; for Renewable Diesel, &#39;AFTMKTCONV&#39; for Aftermarket Conversions, &#39;EFFEC&#39; for Fuel Economy / Efficiency, &#39;IR&#39; for Idle Reduction, &#39;AUTONOMOUS&#39; for Connected and Autonomous Vehicles, and &#39;OTHER&#39; for Other. (optional)
     * @param incentiveType Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;GNT&#39; for Grants, &#39;TAX&#39; for Tax Incentives, &#39;LOANS&#39; for Loans and Leases, &#39;RBATE&#39; for Rebates, &#39;EXEM&#39; for Exemptions, &#39;TOU&#39; for Time-of-Use Rate, and &#39;OTHER&#39; for Other. (optional)
     * @param regulationType Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;REQ&#39; for Acquisition / Fuel Use, &#39;DREST&#39; for Driving / Idling, &#39;REGIS&#39; for Registration / Licensing, &#39;EVFEE&#39; for EV Registration Fee, &#39;FUEL&#39; for Fuel Taxes, &#39;STD&#39; for Fuel Production / Quality, &#39;RFS&#39; for Renewable Fuel Standard / Mandate, &#39;AIRQEMISSIONS&#39; for Air Quality / Emissions, &#39;CCEINIT&#39; for Climate Change / Energy Initiatives, &#39;UTILITY&#39; for Utility Definition, &#39;BUILD&#39; for Building Codes, &#39;RTC&#39; for Right-to-Charge, and &#39;OTHER&#39; for Other. (optional)
     * @param userType Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;FLEET&#39; for Commercial, &#39;GOV&#39; for Government Entity, &#39;TRIBAL&#39; for Tribal Government, &#39;IND&#39; for Personal Vehicle Owner or Driver, &#39;STATION&#39; for Alternative Fuel Infrastructure Operator, &#39;AFP&#39; for Alternative Fuel Producer, &#39;PURCH&#39; for Alternative Fuel Purchaser, &#39;MAN&#39; for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, &#39;MUD&#39; for Multi-Unit Dwelling, &#39;TRANS&#39; for Transit, and &#39;OTHER&#39; for Other. (optional)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param recent Return only recently added or updated laws and incentives (optional, default to false)
     * @param expired The &#39;true&#39; value returns only expired, repealed, or archived laws and incentives. The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param lawType Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: &#39;STATEINC&#39; for State Incentives, &#39;UPINC &#39; for Utility/Private Incentives, &#39;LAWREG&#39; for Laws and Regulations, &#39;INC&#39; for Incentives, &#39;PROG&#39; for Programs, &#39;LUP&#39; for Last Updated, &#39;OVIEW&#39; for Overview, and &#39;HILITE&#39; for Highlights. (optional)
     * @param keyword Search laws by keyword in title or text. (optional)
     * @param local Show only local examples of laws and incentives. (optional, default to false)
     * @return ApiResponse&lt;LawsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LawsResponse> transportationIncentivesLawsAllWithHttpInfo(String outputFormat, String apiKey, Integer limit, String jurisdiction, String technology, String incentiveType, String regulationType, String userType, Boolean poc, Boolean recent, Boolean expired, String lawType, String keyword, Boolean local) throws ApiException {
        okhttp3.Call localVarCall = transportationIncentivesLawsAllValidateBeforeCall(outputFormat, apiKey, limit, jurisdiction, technology, incentiveType, regulationType, userType, poc, recent, expired, lawType, keyword, local, null);
        Type localVarReturnType = new TypeToken<LawsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a full list of laws and incentives that match your query. (asynchronously)
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param limit Limit the number of laws returned (optional, default to 10)
     * @param jurisdiction Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (optional)
     * @param technology Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;BIOD&#39; for Biodiesel, &#39;ETH&#39; for Ethanol / Flexible Fuel Vehicles, &#39;NG&#39; for Natural Gas / Natural Gas Vehicles, &#39;LPG&#39; for Liquefied Petroleum Gas (Propane) / Propane Vehicles, &#39;HY&#39; for Hydrogen / Fuel Cell Electric Vehicles, &#39;ELEC&#39; for All-Electric Vehicles (EVs), &#39;PHEV&#39; for Plug-In Hybrid Electric Vehicles (PHEVs), &#39;HEV&#39; for Hybrid Electric Vehicles (HEVs), &#39;NEVS&#39; for Neighborhood Electric Vehicles (NEVs), &#39;RD&#39; for Renewable Diesel, &#39;AFTMKTCONV&#39; for Aftermarket Conversions, &#39;EFFEC&#39; for Fuel Economy / Efficiency, &#39;IR&#39; for Idle Reduction, &#39;AUTONOMOUS&#39; for Connected and Autonomous Vehicles, and &#39;OTHER&#39; for Other. (optional)
     * @param incentiveType Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;GNT&#39; for Grants, &#39;TAX&#39; for Tax Incentives, &#39;LOANS&#39; for Loans and Leases, &#39;RBATE&#39; for Rebates, &#39;EXEM&#39; for Exemptions, &#39;TOU&#39; for Time-of-Use Rate, and &#39;OTHER&#39; for Other. (optional)
     * @param regulationType Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;REQ&#39; for Acquisition / Fuel Use, &#39;DREST&#39; for Driving / Idling, &#39;REGIS&#39; for Registration / Licensing, &#39;EVFEE&#39; for EV Registration Fee, &#39;FUEL&#39; for Fuel Taxes, &#39;STD&#39; for Fuel Production / Quality, &#39;RFS&#39; for Renewable Fuel Standard / Mandate, &#39;AIRQEMISSIONS&#39; for Air Quality / Emissions, &#39;CCEINIT&#39; for Climate Change / Energy Initiatives, &#39;UTILITY&#39; for Utility Definition, &#39;BUILD&#39; for Building Codes, &#39;RTC&#39; for Right-to-Charge, and &#39;OTHER&#39; for Other. (optional)
     * @param userType Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: &#39;FLEET&#39; for Commercial, &#39;GOV&#39; for Government Entity, &#39;TRIBAL&#39; for Tribal Government, &#39;IND&#39; for Personal Vehicle Owner or Driver, &#39;STATION&#39; for Alternative Fuel Infrastructure Operator, &#39;AFP&#39; for Alternative Fuel Producer, &#39;PURCH&#39; for Alternative Fuel Purchaser, &#39;MAN&#39; for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, &#39;MUD&#39; for Multi-Unit Dwelling, &#39;TRANS&#39; for Transit, and &#39;OTHER&#39; for Other. (optional)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param recent Return only recently added or updated laws and incentives (optional, default to false)
     * @param expired The &#39;true&#39; value returns only expired, repealed, or archived laws and incentives. The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param lawType Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: &#39;STATEINC&#39; for State Incentives, &#39;UPINC &#39; for Utility/Private Incentives, &#39;LAWREG&#39; for Laws and Regulations, &#39;INC&#39; for Incentives, &#39;PROG&#39; for Programs, &#39;LUP&#39; for Last Updated, &#39;OVIEW&#39; for Overview, and &#39;HILITE&#39; for Highlights. (optional)
     * @param keyword Search laws by keyword in title or text. (optional)
     * @param local Show only local examples of laws and incentives. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsAllAsync(String outputFormat, String apiKey, Integer limit, String jurisdiction, String technology, String incentiveType, String regulationType, String userType, Boolean poc, Boolean recent, Boolean expired, String lawType, String keyword, Boolean local, final ApiCallback<LawsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transportationIncentivesLawsAllValidateBeforeCall(outputFormat, apiKey, limit, jurisdiction, technology, incentiveType, regulationType, userType, poc, recent, expired, lawType, keyword, local, _callback);
        Type localVarReturnType = new TypeToken<LawsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transportationIncentivesLawsCategories
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param type Search by the category type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsCategoriesCall(String outputFormat, String apiKey, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/category-list.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transportationIncentivesLawsCategoriesValidateBeforeCall(String outputFormat, String apiKey, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsCategories(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsCategories(Async)");
        }

        return transportationIncentivesLawsCategoriesCall(outputFormat, apiKey, type, _callback);

    }

    /**
     * Return the law categories for a given category type.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param type Search by the category type. (optional)
     * @return CategoryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public CategoryResults transportationIncentivesLawsCategories(String outputFormat, String apiKey, String type) throws ApiException {
        ApiResponse<CategoryResults> localVarResp = transportationIncentivesLawsCategoriesWithHttpInfo(outputFormat, apiKey, type);
        return localVarResp.getData();
    }

    /**
     * Return the law categories for a given category type.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param type Search by the category type. (optional)
     * @return ApiResponse&lt;CategoryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryResults> transportationIncentivesLawsCategoriesWithHttpInfo(String outputFormat, String apiKey, String type) throws ApiException {
        okhttp3.Call localVarCall = transportationIncentivesLawsCategoriesValidateBeforeCall(outputFormat, apiKey, type, null);
        Type localVarReturnType = new TypeToken<CategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the law categories for a given category type. (asynchronously)
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param type Search by the category type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsCategoriesAsync(String outputFormat, String apiKey, String type, final ApiCallback<CategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = transportationIncentivesLawsCategoriesValidateBeforeCall(outputFormat, apiKey, type, _callback);
        Type localVarReturnType = new TypeToken<CategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transportationIncentivesLawsId
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param id The id of the law that you are searching (required)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param expired The &#39;true&#39; value returns a record no matter its status (current, expired, archived, or repealed). The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsIdCall(String outputFormat, String apiKey, Integer id, Boolean poc, Boolean expired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{id}.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (poc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poc", poc));
        }

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expired", expired));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transportationIncentivesLawsIdValidateBeforeCall(String outputFormat, String apiKey, Integer id, Boolean poc, Boolean expired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsId(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transportationIncentivesLawsId(Async)");
        }

        return transportationIncentivesLawsIdCall(outputFormat, apiKey, id, poc, expired, _callback);

    }

    /**
     * Fetch the details of a specific law given the law&#39;s ID.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param id The id of the law that you are searching (required)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param expired The &#39;true&#39; value returns a record no matter its status (current, expired, archived, or repealed). The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @return LawResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public LawResult transportationIncentivesLawsId(String outputFormat, String apiKey, Integer id, Boolean poc, Boolean expired) throws ApiException {
        ApiResponse<LawResult> localVarResp = transportationIncentivesLawsIdWithHttpInfo(outputFormat, apiKey, id, poc, expired);
        return localVarResp.getData();
    }

    /**
     * Fetch the details of a specific law given the law&#39;s ID.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param id The id of the law that you are searching (required)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param expired The &#39;true&#39; value returns a record no matter its status (current, expired, archived, or repealed). The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @return ApiResponse&lt;LawResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LawResult> transportationIncentivesLawsIdWithHttpInfo(String outputFormat, String apiKey, Integer id, Boolean poc, Boolean expired) throws ApiException {
        okhttp3.Call localVarCall = transportationIncentivesLawsIdValidateBeforeCall(outputFormat, apiKey, id, poc, expired, null);
        Type localVarReturnType = new TypeToken<LawResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the details of a specific law given the law&#39;s ID. (asynchronously)
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param id The id of the law that you are searching (required)
     * @param poc Include points of contacts in the return value. (optional, default to false)
     * @param expired The &#39;true&#39; value returns a record no matter its status (current, expired, archived, or repealed). The default &#39;false&#39; value returns only current laws and incentives. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsIdAsync(String outputFormat, String apiKey, Integer id, Boolean poc, Boolean expired, final ApiCallback<LawResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transportationIncentivesLawsIdValidateBeforeCall(outputFormat, apiKey, id, poc, expired, _callback);
        Type localVarReturnType = new TypeToken<LawResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transportationIncentivesLawsPocs
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param jurisdiction Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsPocsCall(String outputFormat, String apiKey, String jurisdiction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pocs.{output_format}"
            .replace("{" + "output_format" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transportationIncentivesLawsPocsValidateBeforeCall(String outputFormat, String apiKey, String jurisdiction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling transportationIncentivesLawsPocs(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling transportationIncentivesLawsPocs(Async)");
        }

        // verify the required parameter 'jurisdiction' is set
        if (jurisdiction == null) {
            throw new ApiException("Missing the required parameter 'jurisdiction' when calling transportationIncentivesLawsPocs(Async)");
        }

        return transportationIncentivesLawsPocsCall(outputFormat, apiKey, jurisdiction, _callback);

    }

    /**
     * Get the points of contact for a given jurisdiction.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param jurisdiction Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (required)
     * @return PocResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public PocResults transportationIncentivesLawsPocs(String outputFormat, String apiKey, String jurisdiction) throws ApiException {
        ApiResponse<PocResults> localVarResp = transportationIncentivesLawsPocsWithHttpInfo(outputFormat, apiKey, jurisdiction);
        return localVarResp.getData();
    }

    /**
     * Get the points of contact for a given jurisdiction.
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param jurisdiction Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (required)
     * @return ApiResponse&lt;PocResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PocResults> transportationIncentivesLawsPocsWithHttpInfo(String outputFormat, String apiKey, String jurisdiction) throws ApiException {
        okhttp3.Call localVarCall = transportationIncentivesLawsPocsValidateBeforeCall(outputFormat, apiKey, jurisdiction, null);
        Type localVarReturnType = new TypeToken<PocResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the points of contact for a given jurisdiction. (asynchronously)
     * 
     * @param outputFormat Response format (required)
     * @param apiKey API Key (required)
     * @param jurisdiction Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, &#39;CO&#39; for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code &#39;US&#39; for federal laws and the code &#39;DC&#39; for Washington D.C. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transportationIncentivesLawsPocsAsync(String outputFormat, String apiKey, String jurisdiction, final ApiCallback<PocResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = transportationIncentivesLawsPocsValidateBeforeCall(outputFormat, apiKey, jurisdiction, _callback);
        Type localVarReturnType = new TypeToken<PocResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
