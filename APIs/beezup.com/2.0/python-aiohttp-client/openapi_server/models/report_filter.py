# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_filter_links import ReportFilterLinks
from openapi_server.models.report_filter_parameters import ReportFilterParameters
from openapi_server import util


class ReportFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ReportFilterLinks=None, parameters: ReportFilterParameters=None, report_filter_id: str=None, report_filter_name: str=None):
        """ReportFilter - a model defined in OpenAPI

        :param links: The links of this ReportFilter.
        :param parameters: The parameters of this ReportFilter.
        :param report_filter_id: The report_filter_id of this ReportFilter.
        :param report_filter_name: The report_filter_name of this ReportFilter.
        """
        self.openapi_types = {
            'links': ReportFilterLinks,
            'parameters': ReportFilterParameters,
            'report_filter_id': str,
            'report_filter_name': str
        }

        self.attribute_map = {
            'links': 'links',
            'parameters': 'parameters',
            'report_filter_id': 'reportFilterId',
            'report_filter_name': 'reportFilterName'
        }

        self._links = links
        self._parameters = parameters
        self._report_filter_id = report_filter_id
        self._report_filter_name = report_filter_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportFilter of this ReportFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ReportFilter.


        :return: The links of this ReportFilter.
        :rtype: ReportFilterLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportFilter.


        :param links: The links of this ReportFilter.
        :type links: ReportFilterLinks
        """

        self._links = links

    @property
    def parameters(self):
        """Gets the parameters of this ReportFilter.


        :return: The parameters of this ReportFilter.
        :rtype: ReportFilterParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ReportFilter.


        :param parameters: The parameters of this ReportFilter.
        :type parameters: ReportFilterParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def report_filter_id(self):
        """Gets the report_filter_id of this ReportFilter.

        Report filter identifier

        :return: The report_filter_id of this ReportFilter.
        :rtype: str
        """
        return self._report_filter_id

    @report_filter_id.setter
    def report_filter_id(self, report_filter_id):
        """Sets the report_filter_id of this ReportFilter.

        Report filter identifier

        :param report_filter_id: The report_filter_id of this ReportFilter.
        :type report_filter_id: str
        """
        if report_filter_id is None:
            raise ValueError("Invalid value for `report_filter_id`, must not be `None`")

        self._report_filter_id = report_filter_id

    @property
    def report_filter_name(self):
        """Gets the report_filter_name of this ReportFilter.

        Report filter name

        :return: The report_filter_name of this ReportFilter.
        :rtype: str
        """
        return self._report_filter_name

    @report_filter_name.setter
    def report_filter_name(self, report_filter_name):
        """Sets the report_filter_name of this ReportFilter.

        Report filter name

        :param report_filter_name: The report_filter_name of this ReportFilter.
        :type report_filter_name: str
        """
        if report_filter_name is None:
            raise ValueError("Invalid value for `report_filter_name`, must not be `None`")

        self._report_filter_name = report_filter_name
