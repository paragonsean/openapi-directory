# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_catalog_get_beez_up_columns_link import LinksCatalogGetBeezUPColumnsLink
from openapi_server.models.links_catalog_index_link import LinksCatalogIndexLink
from openapi_server import util


class CatalogIndexLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_columns: LinksCatalogGetBeezUPColumnsLink=None, _self: LinksCatalogIndexLink=None):
        """CatalogIndexLinks - a model defined in OpenAPI

        :param beez_up_columns: The beez_up_columns of this CatalogIndexLinks.
        :param _self: The _self of this CatalogIndexLinks.
        """
        self.openapi_types = {
            'beez_up_columns': LinksCatalogGetBeezUPColumnsLink,
            '_self': LinksCatalogIndexLink
        }

        self.attribute_map = {
            'beez_up_columns': 'beezUPColumns',
            '_self': 'self'
        }

        self._beez_up_columns = beez_up_columns
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogIndexLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogIndexLinks of this CatalogIndexLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_columns(self):
        """Gets the beez_up_columns of this CatalogIndexLinks.


        :return: The beez_up_columns of this CatalogIndexLinks.
        :rtype: LinksCatalogGetBeezUPColumnsLink
        """
        return self._beez_up_columns

    @beez_up_columns.setter
    def beez_up_columns(self, beez_up_columns):
        """Sets the beez_up_columns of this CatalogIndexLinks.


        :param beez_up_columns: The beez_up_columns of this CatalogIndexLinks.
        :type beez_up_columns: LinksCatalogGetBeezUPColumnsLink
        """
        if beez_up_columns is None:
            raise ValueError("Invalid value for `beez_up_columns`, must not be `None`")

        self._beez_up_columns = beez_up_columns

    @property
    def _self(self):
        """Gets the _self of this CatalogIndexLinks.


        :return: The _self of this CatalogIndexLinks.
        :rtype: LinksCatalogIndexLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CatalogIndexLinks.


        :param _self: The _self of this CatalogIndexLinks.
        :type _self: LinksCatalogIndexLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
