# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.optimisation_action_name import OptimisationActionName
from openapi_server.models.rule_last_execution_status import RuleLastExecutionStatus
from openapi_server.models.rule_links import RuleLinks
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: OptimisationActionName=None, enabled: bool=None, last_execution_status: RuleLastExecutionStatus=None, last_execution_utc_date: datetime=None, links: RuleLinks=None, position: int=None, report_filter_id: str=None, rule_id: str=None, rule_name: str=None, validity_end_utc_date: datetime=None, validity_start_utc_date: datetime=None):
        """Rule - a model defined in OpenAPI

        :param action_name: The action_name of this Rule.
        :param enabled: The enabled of this Rule.
        :param last_execution_status: The last_execution_status of this Rule.
        :param last_execution_utc_date: The last_execution_utc_date of this Rule.
        :param links: The links of this Rule.
        :param position: The position of this Rule.
        :param report_filter_id: The report_filter_id of this Rule.
        :param rule_id: The rule_id of this Rule.
        :param rule_name: The rule_name of this Rule.
        :param validity_end_utc_date: The validity_end_utc_date of this Rule.
        :param validity_start_utc_date: The validity_start_utc_date of this Rule.
        """
        self.openapi_types = {
            'action_name': OptimisationActionName,
            'enabled': bool,
            'last_execution_status': RuleLastExecutionStatus,
            'last_execution_utc_date': datetime,
            'links': RuleLinks,
            'position': int,
            'report_filter_id': str,
            'rule_id': str,
            'rule_name': str,
            'validity_end_utc_date': datetime,
            'validity_start_utc_date': datetime
        }

        self.attribute_map = {
            'action_name': 'actionName',
            'enabled': 'enabled',
            'last_execution_status': 'lastExecutionStatus',
            'last_execution_utc_date': 'lastExecutionUtcDate',
            'links': 'links',
            'position': 'position',
            'report_filter_id': 'reportFilterId',
            'rule_id': 'ruleId',
            'rule_name': 'ruleName',
            'validity_end_utc_date': 'validityEndUtcDate',
            'validity_start_utc_date': 'validityStartUtcDate'
        }

        self._action_name = action_name
        self._enabled = enabled
        self._last_execution_status = last_execution_status
        self._last_execution_utc_date = last_execution_utc_date
        self._links = links
        self._position = position
        self._report_filter_id = report_filter_id
        self._rule_id = rule_id
        self._rule_name = rule_name
        self._validity_end_utc_date = validity_end_utc_date
        self._validity_start_utc_date = validity_start_utc_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this Rule.


        :return: The action_name of this Rule.
        :rtype: OptimisationActionName
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this Rule.


        :param action_name: The action_name of this Rule.
        :type action_name: OptimisationActionName
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")

        self._action_name = action_name

    @property
    def enabled(self):
        """Gets the enabled of this Rule.

        Is the rule enabled

        :return: The enabled of this Rule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Rule.

        Is the rule enabled

        :param enabled: The enabled of this Rule.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def last_execution_status(self):
        """Gets the last_execution_status of this Rule.


        :return: The last_execution_status of this Rule.
        :rtype: RuleLastExecutionStatus
        """
        return self._last_execution_status

    @last_execution_status.setter
    def last_execution_status(self, last_execution_status):
        """Sets the last_execution_status of this Rule.


        :param last_execution_status: The last_execution_status of this Rule.
        :type last_execution_status: RuleLastExecutionStatus
        """

        self._last_execution_status = last_execution_status

    @property
    def last_execution_utc_date(self):
        """Gets the last_execution_utc_date of this Rule.

        The utc date of the last execution

        :return: The last_execution_utc_date of this Rule.
        :rtype: datetime
        """
        return self._last_execution_utc_date

    @last_execution_utc_date.setter
    def last_execution_utc_date(self, last_execution_utc_date):
        """Sets the last_execution_utc_date of this Rule.

        The utc date of the last execution

        :param last_execution_utc_date: The last_execution_utc_date of this Rule.
        :type last_execution_utc_date: datetime
        """

        self._last_execution_utc_date = last_execution_utc_date

    @property
    def links(self):
        """Gets the links of this Rule.


        :return: The links of this Rule.
        :rtype: RuleLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Rule.


        :param links: The links of this Rule.
        :type links: RuleLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def position(self):
        """Gets the position of this Rule.

        Rule execution position

        :return: The position of this Rule.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Rule.

        Rule execution position

        :param position: The position of this Rule.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def report_filter_id(self):
        """Gets the report_filter_id of this Rule.

        Report filter identifier linked to the rule

        :return: The report_filter_id of this Rule.
        :rtype: str
        """
        return self._report_filter_id

    @report_filter_id.setter
    def report_filter_id(self, report_filter_id):
        """Sets the report_filter_id of this Rule.

        Report filter identifier linked to the rule

        :param report_filter_id: The report_filter_id of this Rule.
        :type report_filter_id: str
        """
        if report_filter_id is None:
            raise ValueError("Invalid value for `report_filter_id`, must not be `None`")

        self._report_filter_id = report_filter_id

    @property
    def rule_id(self):
        """Gets the rule_id of this Rule.

        The identifier of the rule

        :return: The rule_id of this Rule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this Rule.

        The identifier of the rule

        :param rule_id: The rule_id of this Rule.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this Rule.

        The name of the rule

        :return: The rule_name of this Rule.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this Rule.

        The name of the rule

        :param rule_name: The rule_name of this Rule.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def validity_end_utc_date(self):
        """Gets the validity_end_utc_date of this Rule.

        Rule validity end utc date

        :return: The validity_end_utc_date of this Rule.
        :rtype: datetime
        """
        return self._validity_end_utc_date

    @validity_end_utc_date.setter
    def validity_end_utc_date(self, validity_end_utc_date):
        """Sets the validity_end_utc_date of this Rule.

        Rule validity end utc date

        :param validity_end_utc_date: The validity_end_utc_date of this Rule.
        :type validity_end_utc_date: datetime
        """

        self._validity_end_utc_date = validity_end_utc_date

    @property
    def validity_start_utc_date(self):
        """Gets the validity_start_utc_date of this Rule.

        Rule validity start utc date

        :return: The validity_start_utc_date of this Rule.
        :rtype: datetime
        """
        return self._validity_start_utc_date

    @validity_start_utc_date.setter
    def validity_start_utc_date(self, validity_start_utc_date):
        """Sets the validity_start_utc_date of this Rule.

        Rule validity start utc date

        :param validity_start_utc_date: The validity_start_utc_date of this Rule.
        :type validity_start_utc_date: datetime
        """

        self._validity_start_utc_date = validity_start_utc_date
