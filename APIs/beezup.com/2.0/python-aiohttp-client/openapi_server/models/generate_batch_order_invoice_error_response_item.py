# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generate_batch_order_invoice_error_response_item_detail import GenerateBatchOrderInvoiceErrorResponseItemDetail
from openapi_server import util


class GenerateBatchOrderInvoiceErrorResponseItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, error_type: str=None, errors: List[GenerateBatchOrderInvoiceErrorResponseItemDetail]=None):
        """GenerateBatchOrderInvoiceErrorResponseItem - a model defined in OpenAPI

        :param count: The count of this GenerateBatchOrderInvoiceErrorResponseItem.
        :param error_type: The error_type of this GenerateBatchOrderInvoiceErrorResponseItem.
        :param errors: The errors of this GenerateBatchOrderInvoiceErrorResponseItem.
        """
        self.openapi_types = {
            'count': int,
            'error_type': str,
            'errors': List[GenerateBatchOrderInvoiceErrorResponseItemDetail]
        }

        self.attribute_map = {
            'count': 'count',
            'error_type': 'errorType',
            'errors': 'errors'
        }

        self._count = count
        self._error_type = error_type
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateBatchOrderInvoiceErrorResponseItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generateBatchOrderInvoiceErrorResponseItem of this GenerateBatchOrderInvoiceErrorResponseItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GenerateBatchOrderInvoiceErrorResponseItem.


        :return: The count of this GenerateBatchOrderInvoiceErrorResponseItem.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GenerateBatchOrderInvoiceErrorResponseItem.


        :param count: The count of this GenerateBatchOrderInvoiceErrorResponseItem.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def error_type(self):
        """Gets the error_type of this GenerateBatchOrderInvoiceErrorResponseItem.


        :return: The error_type of this GenerateBatchOrderInvoiceErrorResponseItem.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this GenerateBatchOrderInvoiceErrorResponseItem.


        :param error_type: The error_type of this GenerateBatchOrderInvoiceErrorResponseItem.
        :type error_type: str
        """
        if error_type is None:
            raise ValueError("Invalid value for `error_type`, must not be `None`")

        self._error_type = error_type

    @property
    def errors(self):
        """Gets the errors of this GenerateBatchOrderInvoiceErrorResponseItem.


        :return: The errors of this GenerateBatchOrderInvoiceErrorResponseItem.
        :rtype: List[GenerateBatchOrderInvoiceErrorResponseItemDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GenerateBatchOrderInvoiceErrorResponseItem.


        :param errors: The errors of this GenerateBatchOrderInvoiceErrorResponseItem.
        :type errors: List[GenerateBatchOrderInvoiceErrorResponseItemDetail]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
