# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_pagination_result import BeezUPCommonPaginationResult
from openapi_server.models.order import Order
from openapi_server.models.order_list_full_links import OrderListFullLinks
from openapi_server import util


class OrderListFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: OrderListFullLinks=None, orders: List[Order]=None, pagination_result: BeezUPCommonPaginationResult=None):
        """OrderListFull - a model defined in OpenAPI

        :param links: The links of this OrderListFull.
        :param orders: The orders of this OrderListFull.
        :param pagination_result: The pagination_result of this OrderListFull.
        """
        self.openapi_types = {
            'links': OrderListFullLinks,
            'orders': List[Order],
            'pagination_result': BeezUPCommonPaginationResult
        }

        self.attribute_map = {
            'links': 'links',
            'orders': 'orders',
            'pagination_result': 'paginationResult'
        }

        self._links = links
        self._orders = orders
        self._pagination_result = pagination_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderListFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderListFull of this OrderListFull.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this OrderListFull.


        :return: The links of this OrderListFull.
        :rtype: OrderListFullLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OrderListFull.


        :param links: The links of this OrderListFull.
        :type links: OrderListFullLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def orders(self):
        """Gets the orders of this OrderListFull.


        :return: The orders of this OrderListFull.
        :rtype: List[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this OrderListFull.


        :param orders: The orders of this OrderListFull.
        :type orders: List[Order]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")

        self._orders = orders

    @property
    def pagination_result(self):
        """Gets the pagination_result of this OrderListFull.


        :return: The pagination_result of this OrderListFull.
        :rtype: BeezUPCommonPaginationResult
        """
        return self._pagination_result

    @pagination_result.setter
    def pagination_result(self, pagination_result):
        """Sets the pagination_result of this OrderListFull.


        :param pagination_result: The pagination_result of this OrderListFull.
        :type pagination_result: BeezUPCommonPaginationResult
        """

        self._pagination_result = pagination_result
