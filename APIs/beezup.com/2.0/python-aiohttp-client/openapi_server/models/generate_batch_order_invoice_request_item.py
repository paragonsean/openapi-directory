# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateBatchOrderInvoiceRequestItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, beez_up_order_uuid: str=None, invoice_sequence_number: int=None, marketplace_technical_code: str=None):
        """GenerateBatchOrderInvoiceRequestItem - a model defined in OpenAPI

        :param account_id: The account_id of this GenerateBatchOrderInvoiceRequestItem.
        :param beez_up_order_uuid: The beez_up_order_uuid of this GenerateBatchOrderInvoiceRequestItem.
        :param invoice_sequence_number: The invoice_sequence_number of this GenerateBatchOrderInvoiceRequestItem.
        :param marketplace_technical_code: The marketplace_technical_code of this GenerateBatchOrderInvoiceRequestItem.
        """
        self.openapi_types = {
            'account_id': int,
            'beez_up_order_uuid': str,
            'invoice_sequence_number': int,
            'marketplace_technical_code': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'beez_up_order_uuid': 'beezUPOrderUUID',
            'invoice_sequence_number': 'invoiceSequenceNumber',
            'marketplace_technical_code': 'marketplaceTechnicalCode'
        }

        self._account_id = account_id
        self._beez_up_order_uuid = beez_up_order_uuid
        self._invoice_sequence_number = invoice_sequence_number
        self._marketplace_technical_code = marketplace_technical_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateBatchOrderInvoiceRequestItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generateBatchOrderInvoiceRequestItem of this GenerateBatchOrderInvoiceRequestItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this GenerateBatchOrderInvoiceRequestItem.

        Marketplace Account Identifier

        :return: The account_id of this GenerateBatchOrderInvoiceRequestItem.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GenerateBatchOrderInvoiceRequestItem.

        Marketplace Account Identifier

        :param account_id: The account_id of this GenerateBatchOrderInvoiceRequestItem.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def beez_up_order_uuid(self):
        """Gets the beez_up_order_uuid of this GenerateBatchOrderInvoiceRequestItem.

        beezUPOrderUUID

        :return: The beez_up_order_uuid of this GenerateBatchOrderInvoiceRequestItem.
        :rtype: str
        """
        return self._beez_up_order_uuid

    @beez_up_order_uuid.setter
    def beez_up_order_uuid(self, beez_up_order_uuid):
        """Sets the beez_up_order_uuid of this GenerateBatchOrderInvoiceRequestItem.

        beezUPOrderUUID

        :param beez_up_order_uuid: The beez_up_order_uuid of this GenerateBatchOrderInvoiceRequestItem.
        :type beez_up_order_uuid: str
        """
        if beez_up_order_uuid is None:
            raise ValueError("Invalid value for `beez_up_order_uuid`, must not be `None`")

        self._beez_up_order_uuid = beez_up_order_uuid

    @property
    def invoice_sequence_number(self):
        """Gets the invoice_sequence_number of this GenerateBatchOrderInvoiceRequestItem.

        Invoice Sequence Number

        :return: The invoice_sequence_number of this GenerateBatchOrderInvoiceRequestItem.
        :rtype: int
        """
        return self._invoice_sequence_number

    @invoice_sequence_number.setter
    def invoice_sequence_number(self, invoice_sequence_number):
        """Sets the invoice_sequence_number of this GenerateBatchOrderInvoiceRequestItem.

        Invoice Sequence Number

        :param invoice_sequence_number: The invoice_sequence_number of this GenerateBatchOrderInvoiceRequestItem.
        :type invoice_sequence_number: int
        """
        if invoice_sequence_number is None:
            raise ValueError("Invalid value for `invoice_sequence_number`, must not be `None`")
        if invoice_sequence_number is not None and invoice_sequence_number < 0:
            raise ValueError("Invalid value for `invoice_sequence_number`, must be a value greater than or equal to `0`")

        self._invoice_sequence_number = invoice_sequence_number

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this GenerateBatchOrderInvoiceRequestItem.

        Marketplace Technical Code

        :return: The marketplace_technical_code of this GenerateBatchOrderInvoiceRequestItem.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this GenerateBatchOrderInvoiceRequestItem.

        Marketplace Technical Code

        :param marketplace_technical_code: The marketplace_technical_code of this GenerateBatchOrderInvoiceRequestItem.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code
