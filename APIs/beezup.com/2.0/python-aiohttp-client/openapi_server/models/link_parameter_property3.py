# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lov_link3 import LOVLink3
from openapi_server.models.parameter_type import ParameterType
from openapi_server import util


class LinkParameterProperty3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, label: str=None, lov_link: LOVLink3=None, lov_required: bool=None, pattern: str=None, required: bool=None, _schema: str=None, type: ParameterType=ParameterType.STRING, value: object=None):
        """LinkParameterProperty3 - a model defined in OpenAPI

        :param description: The description of this LinkParameterProperty3.
        :param label: The label of this LinkParameterProperty3.
        :param lov_link: The lov_link of this LinkParameterProperty3.
        :param lov_required: The lov_required of this LinkParameterProperty3.
        :param pattern: The pattern of this LinkParameterProperty3.
        :param required: The required of this LinkParameterProperty3.
        :param _schema: The _schema of this LinkParameterProperty3.
        :param type: The type of this LinkParameterProperty3.
        :param value: The value of this LinkParameterProperty3.
        """
        self.openapi_types = {
            'description': str,
            'label': str,
            'lov_link': LOVLink3,
            'lov_required': bool,
            'pattern': str,
            'required': bool,
            '_schema': str,
            'type': ParameterType,
            'value': object
        }

        self.attribute_map = {
            'description': 'description',
            'label': 'label',
            'lov_link': 'lovLink',
            'lov_required': 'lovRequired',
            'pattern': 'pattern',
            'required': 'required',
            '_schema': 'schema',
            'type': 'type',
            'value': 'value'
        }

        self._description = description
        self._label = label
        self._lov_link = lov_link
        self._lov_required = lov_required
        self._pattern = pattern
        self._required = required
        self.__schema = _schema
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkParameterProperty3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The linkParameterProperty3 of this LinkParameterProperty3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LinkParameterProperty3.

        description of the parameter

        :return: The description of this LinkParameterProperty3.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinkParameterProperty3.

        description of the parameter

        :param description: The description of this LinkParameterProperty3.
        :type description: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this LinkParameterProperty3.

        The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.

        :return: The label of this LinkParameterProperty3.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LinkParameterProperty3.

        The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.

        :param label: The label of this LinkParameterProperty3.
        :type label: str
        """

        self._label = label

    @property
    def lov_link(self):
        """Gets the lov_link of this LinkParameterProperty3.


        :return: The lov_link of this LinkParameterProperty3.
        :rtype: LOVLink3
        """
        return self._lov_link

    @lov_link.setter
    def lov_link(self, lov_link):
        """Sets the lov_link of this LinkParameterProperty3.


        :param lov_link: The lov_link of this LinkParameterProperty3.
        :type lov_link: LOVLink3
        """

        self._lov_link = lov_link

    @property
    def lov_required(self):
        """Gets the lov_required of this LinkParameterProperty3.

        If true, you MUST use indicate a value from the list of values otherwise it's a freetext

        :return: The lov_required of this LinkParameterProperty3.
        :rtype: bool
        """
        return self._lov_required

    @lov_required.setter
    def lov_required(self, lov_required):
        """Sets the lov_required of this LinkParameterProperty3.

        If true, you MUST use indicate a value from the list of values otherwise it's a freetext

        :param lov_required: The lov_required of this LinkParameterProperty3.
        :type lov_required: bool
        """

        self._lov_required = lov_required

    @property
    def pattern(self):
        """Gets the pattern of this LinkParameterProperty3.

        The regular expression to validate the value

        :return: The pattern of this LinkParameterProperty3.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this LinkParameterProperty3.

        The regular expression to validate the value

        :param pattern: The pattern of this LinkParameterProperty3.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def required(self):
        """Gets the required of this LinkParameterProperty3.


        :return: The required of this LinkParameterProperty3.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this LinkParameterProperty3.


        :param required: The required of this LinkParameterProperty3.
        :type required: bool
        """

        self._required = required

    @property
    def _schema(self):
        """Gets the _schema of this LinkParameterProperty3.

        schema of the parameter

        :return: The _schema of this LinkParameterProperty3.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this LinkParameterProperty3.

        schema of the parameter

        :param _schema: The _schema of this LinkParameterProperty3.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def type(self):
        """Gets the type of this LinkParameterProperty3.


        :return: The type of this LinkParameterProperty3.
        :rtype: ParameterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinkParameterProperty3.


        :param type: The type of this LinkParameterProperty3.
        :type type: ParameterType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def value(self):
        """Gets the value of this LinkParameterProperty3.

        The value of the parameter. It can be an integer a string or an object.

        :return: The value of this LinkParameterProperty3.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LinkParameterProperty3.

        The value of the parameter. It can be an integer a string or an object.

        :param value: The value of this LinkParameterProperty3.
        :type value: object
        """

        self._value = value
