# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_product_column_filters import AnalyticsProductColumnFilters
from openapi_server.models.beez_up_common_catalog_category_filter import BeezUPCommonCatalogCategoryFilter
from openapi_server.models.order_by_direction import OrderByDirection
from openapi_server.models.performance_indicator_filter import PerformanceIndicatorFilter
from openapi_server.models.performance_indicator_type import PerformanceIndicatorType
from openapi_server.models.product_state_filter import ProductStateFilter
from openapi_server.models.report_advanced_filters import ReportAdvancedFilters
from openapi_server.models.report_filter_period_type import ReportFilterPeriodType
from openapi_server import util


class ReportByProductRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_filters: ReportAdvancedFilters=None, begin_period_utc_date: datetime=None, category_filter: BeezUPCommonCatalogCategoryFilter=None, channel_id: str=None, end_period_utc_date: datetime=None, performance_indicator_filters: List[PerformanceIndicatorFilter]=None, period_type: ReportFilterPeriodType=None, order_by: PerformanceIndicatorType=None, order_by_direction: OrderByDirection=None, page_number: int=None, page_size: int=None, analytics_product_column_filters: AnalyticsProductColumnFilters=None, product_columns_to_display: List[str]=None, product_state: ProductStateFilter=ProductStateFilter.ALL):
        """ReportByProductRequest - a model defined in OpenAPI

        :param advanced_filters: The advanced_filters of this ReportByProductRequest.
        :param begin_period_utc_date: The begin_period_utc_date of this ReportByProductRequest.
        :param category_filter: The category_filter of this ReportByProductRequest.
        :param channel_id: The channel_id of this ReportByProductRequest.
        :param end_period_utc_date: The end_period_utc_date of this ReportByProductRequest.
        :param performance_indicator_filters: The performance_indicator_filters of this ReportByProductRequest.
        :param period_type: The period_type of this ReportByProductRequest.
        :param order_by: The order_by of this ReportByProductRequest.
        :param order_by_direction: The order_by_direction of this ReportByProductRequest.
        :param page_number: The page_number of this ReportByProductRequest.
        :param page_size: The page_size of this ReportByProductRequest.
        :param analytics_product_column_filters: The analytics_product_column_filters of this ReportByProductRequest.
        :param product_columns_to_display: The product_columns_to_display of this ReportByProductRequest.
        :param product_state: The product_state of this ReportByProductRequest.
        """
        self.openapi_types = {
            'advanced_filters': ReportAdvancedFilters,
            'begin_period_utc_date': datetime,
            'category_filter': BeezUPCommonCatalogCategoryFilter,
            'channel_id': str,
            'end_period_utc_date': datetime,
            'performance_indicator_filters': List[PerformanceIndicatorFilter],
            'period_type': ReportFilterPeriodType,
            'order_by': PerformanceIndicatorType,
            'order_by_direction': OrderByDirection,
            'page_number': int,
            'page_size': int,
            'analytics_product_column_filters': AnalyticsProductColumnFilters,
            'product_columns_to_display': List[str],
            'product_state': ProductStateFilter
        }

        self.attribute_map = {
            'advanced_filters': 'advancedFilters',
            'begin_period_utc_date': 'beginPeriodUtcDate',
            'category_filter': 'categoryFilter',
            'channel_id': 'channelId',
            'end_period_utc_date': 'endPeriodUtcDate',
            'performance_indicator_filters': 'performanceIndicatorFilters',
            'period_type': 'periodType',
            'order_by': 'orderBy',
            'order_by_direction': 'orderByDirection',
            'page_number': 'pageNumber',
            'page_size': 'pageSize',
            'analytics_product_column_filters': 'analyticsProductColumnFilters',
            'product_columns_to_display': 'productColumnsToDisplay',
            'product_state': 'productState'
        }

        self._advanced_filters = advanced_filters
        self._begin_period_utc_date = begin_period_utc_date
        self._category_filter = category_filter
        self._channel_id = channel_id
        self._end_period_utc_date = end_period_utc_date
        self._performance_indicator_filters = performance_indicator_filters
        self._period_type = period_type
        self._order_by = order_by
        self._order_by_direction = order_by_direction
        self._page_number = page_number
        self._page_size = page_size
        self._analytics_product_column_filters = analytics_product_column_filters
        self._product_columns_to_display = product_columns_to_display
        self._product_state = product_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByProductRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByProductRequest of this ReportByProductRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_filters(self):
        """Gets the advanced_filters of this ReportByProductRequest.


        :return: The advanced_filters of this ReportByProductRequest.
        :rtype: ReportAdvancedFilters
        """
        return self._advanced_filters

    @advanced_filters.setter
    def advanced_filters(self, advanced_filters):
        """Sets the advanced_filters of this ReportByProductRequest.


        :param advanced_filters: The advanced_filters of this ReportByProductRequest.
        :type advanced_filters: ReportAdvancedFilters
        """
        if advanced_filters is None:
            raise ValueError("Invalid value for `advanced_filters`, must not be `None`")

        self._advanced_filters = advanced_filters

    @property
    def begin_period_utc_date(self):
        """Gets the begin_period_utc_date of this ReportByProductRequest.

        The begin date period you want to get the report. It's required only in case of custom period type !

        :return: The begin_period_utc_date of this ReportByProductRequest.
        :rtype: datetime
        """
        return self._begin_period_utc_date

    @begin_period_utc_date.setter
    def begin_period_utc_date(self, begin_period_utc_date):
        """Sets the begin_period_utc_date of this ReportByProductRequest.

        The begin date period you want to get the report. It's required only in case of custom period type !

        :param begin_period_utc_date: The begin_period_utc_date of this ReportByProductRequest.
        :type begin_period_utc_date: datetime
        """
        if begin_period_utc_date is None:
            raise ValueError("Invalid value for `begin_period_utc_date`, must not be `None`")

        self._begin_period_utc_date = begin_period_utc_date

    @property
    def category_filter(self):
        """Gets the category_filter of this ReportByProductRequest.


        :return: The category_filter of this ReportByProductRequest.
        :rtype: BeezUPCommonCatalogCategoryFilter
        """
        return self._category_filter

    @category_filter.setter
    def category_filter(self, category_filter):
        """Sets the category_filter of this ReportByProductRequest.


        :param category_filter: The category_filter of this ReportByProductRequest.
        :type category_filter: BeezUPCommonCatalogCategoryFilter
        """

        self._category_filter = category_filter

    @property
    def channel_id(self):
        """Gets the channel_id of this ReportByProductRequest.

        The channel identifier

        :return: The channel_id of this ReportByProductRequest.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ReportByProductRequest.

        The channel identifier

        :param channel_id: The channel_id of this ReportByProductRequest.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def end_period_utc_date(self):
        """Gets the end_period_utc_date of this ReportByProductRequest.

        The end date period you want to get the report. It's required only in case of custom period type !

        :return: The end_period_utc_date of this ReportByProductRequest.
        :rtype: datetime
        """
        return self._end_period_utc_date

    @end_period_utc_date.setter
    def end_period_utc_date(self, end_period_utc_date):
        """Sets the end_period_utc_date of this ReportByProductRequest.

        The end date period you want to get the report. It's required only in case of custom period type !

        :param end_period_utc_date: The end_period_utc_date of this ReportByProductRequest.
        :type end_period_utc_date: datetime
        """
        if end_period_utc_date is None:
            raise ValueError("Invalid value for `end_period_utc_date`, must not be `None`")

        self._end_period_utc_date = end_period_utc_date

    @property
    def performance_indicator_filters(self):
        """Gets the performance_indicator_filters of this ReportByProductRequest.


        :return: The performance_indicator_filters of this ReportByProductRequest.
        :rtype: List[PerformanceIndicatorFilter]
        """
        return self._performance_indicator_filters

    @performance_indicator_filters.setter
    def performance_indicator_filters(self, performance_indicator_filters):
        """Sets the performance_indicator_filters of this ReportByProductRequest.


        :param performance_indicator_filters: The performance_indicator_filters of this ReportByProductRequest.
        :type performance_indicator_filters: List[PerformanceIndicatorFilter]
        """

        self._performance_indicator_filters = performance_indicator_filters

    @property
    def period_type(self):
        """Gets the period_type of this ReportByProductRequest.


        :return: The period_type of this ReportByProductRequest.
        :rtype: ReportFilterPeriodType
        """
        return self._period_type

    @period_type.setter
    def period_type(self, period_type):
        """Sets the period_type of this ReportByProductRequest.


        :param period_type: The period_type of this ReportByProductRequest.
        :type period_type: ReportFilterPeriodType
        """
        if period_type is None:
            raise ValueError("Invalid value for `period_type`, must not be `None`")

        self._period_type = period_type

    @property
    def order_by(self):
        """Gets the order_by of this ReportByProductRequest.


        :return: The order_by of this ReportByProductRequest.
        :rtype: PerformanceIndicatorType
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ReportByProductRequest.


        :param order_by: The order_by of this ReportByProductRequest.
        :type order_by: PerformanceIndicatorType
        """

        self._order_by = order_by

    @property
    def order_by_direction(self):
        """Gets the order_by_direction of this ReportByProductRequest.


        :return: The order_by_direction of this ReportByProductRequest.
        :rtype: OrderByDirection
        """
        return self._order_by_direction

    @order_by_direction.setter
    def order_by_direction(self, order_by_direction):
        """Sets the order_by_direction of this ReportByProductRequest.


        :param order_by_direction: The order_by_direction of this ReportByProductRequest.
        :type order_by_direction: OrderByDirection
        """

        self._order_by_direction = order_by_direction

    @property
    def page_number(self):
        """Gets the page_number of this ReportByProductRequest.

        Indicates the page number

        :return: The page_number of this ReportByProductRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ReportByProductRequest.

        Indicates the page number

        :param page_number: The page_number of this ReportByProductRequest.
        :type page_number: int
        """
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this ReportByProductRequest.

        Indicate the item count per page

        :return: The page_size of this ReportByProductRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ReportByProductRequest.

        Indicate the item count per page

        :param page_size: The page_size of this ReportByProductRequest.
        :type page_size: int
        """
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 25:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `25`")

        self._page_size = page_size

    @property
    def analytics_product_column_filters(self):
        """Gets the analytics_product_column_filters of this ReportByProductRequest.


        :return: The analytics_product_column_filters of this ReportByProductRequest.
        :rtype: AnalyticsProductColumnFilters
        """
        return self._analytics_product_column_filters

    @analytics_product_column_filters.setter
    def analytics_product_column_filters(self, analytics_product_column_filters):
        """Sets the analytics_product_column_filters of this ReportByProductRequest.


        :param analytics_product_column_filters: The analytics_product_column_filters of this ReportByProductRequest.
        :type analytics_product_column_filters: AnalyticsProductColumnFilters
        """

        self._analytics_product_column_filters = analytics_product_column_filters

    @property
    def product_columns_to_display(self):
        """Gets the product_columns_to_display of this ReportByProductRequest.


        :return: The product_columns_to_display of this ReportByProductRequest.
        :rtype: List[str]
        """
        return self._product_columns_to_display

    @product_columns_to_display.setter
    def product_columns_to_display(self, product_columns_to_display):
        """Sets the product_columns_to_display of this ReportByProductRequest.


        :param product_columns_to_display: The product_columns_to_display of this ReportByProductRequest.
        :type product_columns_to_display: List[str]
        """
        if product_columns_to_display is not None and len(product_columns_to_display) > 1:
            raise ValueError("Invalid value for `product_columns_to_display`, number of items must be less than or equal to `1`")
        if product_columns_to_display is not None and len(product_columns_to_display) < 0:
            raise ValueError("Invalid value for `product_columns_to_display`, number of items must be greater than or equal to `0`")

        self._product_columns_to_display = product_columns_to_display

    @property
    def product_state(self):
        """Gets the product_state of this ReportByProductRequest.


        :return: The product_state of this ReportByProductRequest.
        :rtype: ProductStateFilter
        """
        return self._product_state

    @product_state.setter
    def product_state(self, product_state):
        """Sets the product_state of this ReportByProductRequest.


        :param product_state: The product_state of this ReportByProductRequest.
        :type product_state: ProductStateFilter
        """
        if product_state is None:
            raise ValueError("Invalid value for `product_state`, must not be `None`")

        self._product_state = product_state
