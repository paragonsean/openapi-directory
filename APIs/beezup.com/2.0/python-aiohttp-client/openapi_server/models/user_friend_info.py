# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserFriendInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company: str=None, country_iso_code_alpha3: str=None, email: str=None, first_name: str=None, last_name: str=None, profile_picture_url: str=None, user_id: str=None, what_ido: str=None):
        """UserFriendInfo - a model defined in OpenAPI

        :param company: The company of this UserFriendInfo.
        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this UserFriendInfo.
        :param email: The email of this UserFriendInfo.
        :param first_name: The first_name of this UserFriendInfo.
        :param last_name: The last_name of this UserFriendInfo.
        :param profile_picture_url: The profile_picture_url of this UserFriendInfo.
        :param user_id: The user_id of this UserFriendInfo.
        :param what_ido: The what_ido of this UserFriendInfo.
        """
        self.openapi_types = {
            'company': str,
            'country_iso_code_alpha3': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'profile_picture_url': str,
            'user_id': str,
            'what_ido': str
        }

        self.attribute_map = {
            'company': 'company',
            'country_iso_code_alpha3': 'countryIsoCodeAlpha3',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'profile_picture_url': 'profilePictureUrl',
            'user_id': 'userId',
            'what_ido': 'whatIDo'
        }

        self._company = company
        self._country_iso_code_alpha3 = country_iso_code_alpha3
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._profile_picture_url = profile_picture_url
        self._user_id = user_id
        self._what_ido = what_ido

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserFriendInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The userFriendInfo of this UserFriendInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self):
        """Gets the company of this UserFriendInfo.

        Your friend's user company name

        :return: The company of this UserFriendInfo.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserFriendInfo.

        Your friend's user company name

        :param company: The company of this UserFriendInfo.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def country_iso_code_alpha3(self):
        """Gets the country_iso_code_alpha3 of this UserFriendInfo.

        Your friend's user country iso code alpha 3

        :return: The country_iso_code_alpha3 of this UserFriendInfo.
        :rtype: str
        """
        return self._country_iso_code_alpha3

    @country_iso_code_alpha3.setter
    def country_iso_code_alpha3(self, country_iso_code_alpha3):
        """Sets the country_iso_code_alpha3 of this UserFriendInfo.

        Your friend's user country iso code alpha 3

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this UserFriendInfo.
        :type country_iso_code_alpha3: str
        """
        if country_iso_code_alpha3 is None:
            raise ValueError("Invalid value for `country_iso_code_alpha3`, must not be `None`")

        self._country_iso_code_alpha3 = country_iso_code_alpha3

    @property
    def email(self):
        """Gets the email of this UserFriendInfo.

        Your friend's user email

        :return: The email of this UserFriendInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserFriendInfo.

        Your friend's user email

        :param email: The email of this UserFriendInfo.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and not re.search(r'^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserFriendInfo.

        Your friend's user first name

        :return: The first_name of this UserFriendInfo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserFriendInfo.

        Your friend's user first name

        :param first_name: The first_name of this UserFriendInfo.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserFriendInfo.

        Your friend's user last name

        :return: The last_name of this UserFriendInfo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserFriendInfo.

        Your friend's user last name

        :param last_name: The last_name of this UserFriendInfo.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def profile_picture_url(self):
        """Gets the profile_picture_url of this UserFriendInfo.

        Your friend's user profile picture url

        :return: The profile_picture_url of this UserFriendInfo.
        :rtype: str
        """
        return self._profile_picture_url

    @profile_picture_url.setter
    def profile_picture_url(self, profile_picture_url):
        """Sets the profile_picture_url of this UserFriendInfo.

        Your friend's user profile picture url

        :param profile_picture_url: The profile_picture_url of this UserFriendInfo.
        :type profile_picture_url: str
        """
        if profile_picture_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', profile_picture_url):
            raise ValueError("Invalid value for `profile_picture_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._profile_picture_url = profile_picture_url

    @property
    def user_id(self):
        """Gets the user_id of this UserFriendInfo.

        Your friend's user id

        :return: The user_id of this UserFriendInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserFriendInfo.

        Your friend's user id

        :param user_id: The user_id of this UserFriendInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def what_ido(self):
        """Gets the what_ido of this UserFriendInfo.

        Your friend's user occupation in his company

        :return: The what_ido of this UserFriendInfo.
        :rtype: str
        """
        return self._what_ido

    @what_ido.setter
    def what_ido(self, what_ido):
        """Sets the what_ido of this UserFriendInfo.

        Your friend's user occupation in his company

        :param what_ido: The what_ido of this UserFriendInfo.
        :type what_ido: str
        """

        self._what_ido = what_ido
