# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_share import StoreShare
from openapi_server.models.store_shares_links import StoreSharesLinks
from openapi_server import util


class StoreShares(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: StoreSharesLinks=None, shares: List[StoreShare]=None):
        """StoreShares - a model defined in OpenAPI

        :param links: The links of this StoreShares.
        :param shares: The shares of this StoreShares.
        """
        self.openapi_types = {
            'links': StoreSharesLinks,
            'shares': List[StoreShare]
        }

        self.attribute_map = {
            'links': 'links',
            'shares': 'shares'
        }

        self._links = links
        self._shares = shares

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreShares':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeShares of this StoreShares.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this StoreShares.


        :return: The links of this StoreShares.
        :rtype: StoreSharesLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StoreShares.


        :param links: The links of this StoreShares.
        :type links: StoreSharesLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def shares(self):
        """Gets the shares of this StoreShares.


        :return: The shares of this StoreShares.
        :rtype: List[StoreShare]
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this StoreShares.


        :param shares: The shares of this StoreShares.
        :type shares: List[StoreShare]
        """
        if shares is None:
            raise ValueError("Invalid value for `shares`, must not be `None`")

        self._shares = shares
