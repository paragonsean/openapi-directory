# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_user_error_message import BeezUPCommonUserErrorMessage
from openapi_server.models.importation_monitoring_links import ImportationMonitoringLinks
from openapi_server import util


class ImportationMonitoring(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_utc_date: datetime=None, errors: List[BeezUPCommonUserErrorMessage]=None, execution_id: str=None, last_update_utc_date: datetime=None, links: ImportationMonitoringLinks=None, steps: Dict[str, bool]=None, success: bool=None, user_id: str=None):
        """ImportationMonitoring - a model defined in OpenAPI

        :param begin_utc_date: The begin_utc_date of this ImportationMonitoring.
        :param errors: The errors of this ImportationMonitoring.
        :param execution_id: The execution_id of this ImportationMonitoring.
        :param last_update_utc_date: The last_update_utc_date of this ImportationMonitoring.
        :param links: The links of this ImportationMonitoring.
        :param steps: The steps of this ImportationMonitoring.
        :param success: The success of this ImportationMonitoring.
        :param user_id: The user_id of this ImportationMonitoring.
        """
        self.openapi_types = {
            'begin_utc_date': datetime,
            'errors': List[BeezUPCommonUserErrorMessage],
            'execution_id': str,
            'last_update_utc_date': datetime,
            'links': ImportationMonitoringLinks,
            'steps': Dict[str, bool],
            'success': bool,
            'user_id': str
        }

        self.attribute_map = {
            'begin_utc_date': 'beginUtcDate',
            'errors': 'errors',
            'execution_id': 'executionId',
            'last_update_utc_date': 'lastUpdateUtcDate',
            'links': 'links',
            'steps': 'steps',
            'success': 'success',
            'user_id': 'userId'
        }

        self._begin_utc_date = begin_utc_date
        self._errors = errors
        self._execution_id = execution_id
        self._last_update_utc_date = last_update_utc_date
        self._links = links
        self._steps = steps
        self._success = success
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportationMonitoring':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importationMonitoring of this ImportationMonitoring.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_utc_date(self):
        """Gets the begin_utc_date of this ImportationMonitoring.

        The start date of the importation

        :return: The begin_utc_date of this ImportationMonitoring.
        :rtype: datetime
        """
        return self._begin_utc_date

    @begin_utc_date.setter
    def begin_utc_date(self, begin_utc_date):
        """Sets the begin_utc_date of this ImportationMonitoring.

        The start date of the importation

        :param begin_utc_date: The begin_utc_date of this ImportationMonitoring.
        :type begin_utc_date: datetime
        """
        if begin_utc_date is None:
            raise ValueError("Invalid value for `begin_utc_date`, must not be `None`")

        self._begin_utc_date = begin_utc_date

    @property
    def errors(self):
        """Gets the errors of this ImportationMonitoring.

        In case of error a description will be indicated

        :return: The errors of this ImportationMonitoring.
        :rtype: List[BeezUPCommonUserErrorMessage]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ImportationMonitoring.

        In case of error a description will be indicated

        :param errors: The errors of this ImportationMonitoring.
        :type errors: List[BeezUPCommonUserErrorMessage]
        """

        self._errors = errors

    @property
    def execution_id(self):
        """Gets the execution_id of this ImportationMonitoring.

        The execution identifier of the catalog importation

        :return: The execution_id of this ImportationMonitoring.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ImportationMonitoring.

        The execution identifier of the catalog importation

        :param execution_id: The execution_id of this ImportationMonitoring.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")

        self._execution_id = execution_id

    @property
    def last_update_utc_date(self):
        """Gets the last_update_utc_date of this ImportationMonitoring.

        The last update of the reporting

        :return: The last_update_utc_date of this ImportationMonitoring.
        :rtype: datetime
        """
        return self._last_update_utc_date

    @last_update_utc_date.setter
    def last_update_utc_date(self, last_update_utc_date):
        """Sets the last_update_utc_date of this ImportationMonitoring.

        The last update of the reporting

        :param last_update_utc_date: The last_update_utc_date of this ImportationMonitoring.
        :type last_update_utc_date: datetime
        """
        if last_update_utc_date is None:
            raise ValueError("Invalid value for `last_update_utc_date`, must not be `None`")

        self._last_update_utc_date = last_update_utc_date

    @property
    def links(self):
        """Gets the links of this ImportationMonitoring.


        :return: The links of this ImportationMonitoring.
        :rtype: ImportationMonitoringLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ImportationMonitoring.


        :param links: The links of this ImportationMonitoring.
        :type links: ImportationMonitoringLinks
        """

        self._links = links

    @property
    def steps(self):
        """Gets the steps of this ImportationMonitoring.

        Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete

        :return: The steps of this ImportationMonitoring.
        :rtype: Dict[str, bool]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ImportationMonitoring.

        Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete

        :param steps: The steps of this ImportationMonitoring.
        :type steps: Dict[str, bool]
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")

        self._steps = steps

    @property
    def success(self):
        """Gets the success of this ImportationMonitoring.

        Indicates if the importation was successfully completed or not

        :return: The success of this ImportationMonitoring.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ImportationMonitoring.

        Indicates if the importation was successfully completed or not

        :param success: The success of this ImportationMonitoring.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def user_id(self):
        """Gets the user_id of this ImportationMonitoring.

        The user identifier

        :return: The user_id of this ImportationMonitoring.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ImportationMonitoring.

        The user identifier

        :param user_id: The user_id of this ImportationMonitoring.
        :type user_id: str
        """

        self._user_id = user_id
