# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contract_billing_period_info import ContractBillingPeriodInfo
from openapi_server.models.contract_bonus_info import ContractBonusInfo
from openapi_server.models.contract_click_info import ContractClickInfo
from openapi_server.models.contract_commitment_info import ContractCommitmentInfo
from openapi_server.models.contract_discount_info import ContractDiscountInfo
from openapi_server.models.contract_money_info import ContractMoneyInfo
from openapi_server.models.contract_store_info import ContractStoreInfo
from openapi_server.models.previous_fix_period_invoice_prorata_info import PreviousFixPeriodInvoiceProrataInfo
from openapi_server import util


class OfferContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_billing_period_info: ContractBillingPeriodInfo=None, contract_bonus_info: ContractBonusInfo=None, contract_click_info: ContractClickInfo=None, contract_commitment_info: ContractCommitmentInfo=None, contract_discount_info: ContractDiscountInfo=None, contract_money_info: ContractMoneyInfo=None, contract_store_info: ContractStoreInfo=None, contract_termination_reason: str=None, contract_termination_reason_type: int=None, notify_vat_exemption: bool=None, previous_fix_period_invoice_prorata_info: PreviousFixPeriodInvoiceProrataInfo=None):
        """OfferContent - a model defined in OpenAPI

        :param contract_billing_period_info: The contract_billing_period_info of this OfferContent.
        :param contract_bonus_info: The contract_bonus_info of this OfferContent.
        :param contract_click_info: The contract_click_info of this OfferContent.
        :param contract_commitment_info: The contract_commitment_info of this OfferContent.
        :param contract_discount_info: The contract_discount_info of this OfferContent.
        :param contract_money_info: The contract_money_info of this OfferContent.
        :param contract_store_info: The contract_store_info of this OfferContent.
        :param contract_termination_reason: The contract_termination_reason of this OfferContent.
        :param contract_termination_reason_type: The contract_termination_reason_type of this OfferContent.
        :param notify_vat_exemption: The notify_vat_exemption of this OfferContent.
        :param previous_fix_period_invoice_prorata_info: The previous_fix_period_invoice_prorata_info of this OfferContent.
        """
        self.openapi_types = {
            'contract_billing_period_info': ContractBillingPeriodInfo,
            'contract_bonus_info': ContractBonusInfo,
            'contract_click_info': ContractClickInfo,
            'contract_commitment_info': ContractCommitmentInfo,
            'contract_discount_info': ContractDiscountInfo,
            'contract_money_info': ContractMoneyInfo,
            'contract_store_info': ContractStoreInfo,
            'contract_termination_reason': str,
            'contract_termination_reason_type': int,
            'notify_vat_exemption': bool,
            'previous_fix_period_invoice_prorata_info': PreviousFixPeriodInvoiceProrataInfo
        }

        self.attribute_map = {
            'contract_billing_period_info': 'contractBillingPeriodInfo',
            'contract_bonus_info': 'contractBonusInfo',
            'contract_click_info': 'contractClickInfo',
            'contract_commitment_info': 'contractCommitmentInfo',
            'contract_discount_info': 'contractDiscountInfo',
            'contract_money_info': 'contractMoneyInfo',
            'contract_store_info': 'contractStoreInfo',
            'contract_termination_reason': 'contractTerminationReason',
            'contract_termination_reason_type': 'contractTerminationReasonType',
            'notify_vat_exemption': 'notifyVatExemption',
            'previous_fix_period_invoice_prorata_info': 'previousFixPeriodInvoiceProrataInfo'
        }

        self._contract_billing_period_info = contract_billing_period_info
        self._contract_bonus_info = contract_bonus_info
        self._contract_click_info = contract_click_info
        self._contract_commitment_info = contract_commitment_info
        self._contract_discount_info = contract_discount_info
        self._contract_money_info = contract_money_info
        self._contract_store_info = contract_store_info
        self._contract_termination_reason = contract_termination_reason
        self._contract_termination_reason_type = contract_termination_reason_type
        self._notify_vat_exemption = notify_vat_exemption
        self._previous_fix_period_invoice_prorata_info = previous_fix_period_invoice_prorata_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The offerContent of this OfferContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_billing_period_info(self):
        """Gets the contract_billing_period_info of this OfferContent.


        :return: The contract_billing_period_info of this OfferContent.
        :rtype: ContractBillingPeriodInfo
        """
        return self._contract_billing_period_info

    @contract_billing_period_info.setter
    def contract_billing_period_info(self, contract_billing_period_info):
        """Sets the contract_billing_period_info of this OfferContent.


        :param contract_billing_period_info: The contract_billing_period_info of this OfferContent.
        :type contract_billing_period_info: ContractBillingPeriodInfo
        """
        if contract_billing_period_info is None:
            raise ValueError("Invalid value for `contract_billing_period_info`, must not be `None`")

        self._contract_billing_period_info = contract_billing_period_info

    @property
    def contract_bonus_info(self):
        """Gets the contract_bonus_info of this OfferContent.


        :return: The contract_bonus_info of this OfferContent.
        :rtype: ContractBonusInfo
        """
        return self._contract_bonus_info

    @contract_bonus_info.setter
    def contract_bonus_info(self, contract_bonus_info):
        """Sets the contract_bonus_info of this OfferContent.


        :param contract_bonus_info: The contract_bonus_info of this OfferContent.
        :type contract_bonus_info: ContractBonusInfo
        """
        if contract_bonus_info is None:
            raise ValueError("Invalid value for `contract_bonus_info`, must not be `None`")

        self._contract_bonus_info = contract_bonus_info

    @property
    def contract_click_info(self):
        """Gets the contract_click_info of this OfferContent.


        :return: The contract_click_info of this OfferContent.
        :rtype: ContractClickInfo
        """
        return self._contract_click_info

    @contract_click_info.setter
    def contract_click_info(self, contract_click_info):
        """Sets the contract_click_info of this OfferContent.


        :param contract_click_info: The contract_click_info of this OfferContent.
        :type contract_click_info: ContractClickInfo
        """
        if contract_click_info is None:
            raise ValueError("Invalid value for `contract_click_info`, must not be `None`")

        self._contract_click_info = contract_click_info

    @property
    def contract_commitment_info(self):
        """Gets the contract_commitment_info of this OfferContent.


        :return: The contract_commitment_info of this OfferContent.
        :rtype: ContractCommitmentInfo
        """
        return self._contract_commitment_info

    @contract_commitment_info.setter
    def contract_commitment_info(self, contract_commitment_info):
        """Sets the contract_commitment_info of this OfferContent.


        :param contract_commitment_info: The contract_commitment_info of this OfferContent.
        :type contract_commitment_info: ContractCommitmentInfo
        """
        if contract_commitment_info is None:
            raise ValueError("Invalid value for `contract_commitment_info`, must not be `None`")

        self._contract_commitment_info = contract_commitment_info

    @property
    def contract_discount_info(self):
        """Gets the contract_discount_info of this OfferContent.


        :return: The contract_discount_info of this OfferContent.
        :rtype: ContractDiscountInfo
        """
        return self._contract_discount_info

    @contract_discount_info.setter
    def contract_discount_info(self, contract_discount_info):
        """Sets the contract_discount_info of this OfferContent.


        :param contract_discount_info: The contract_discount_info of this OfferContent.
        :type contract_discount_info: ContractDiscountInfo
        """
        if contract_discount_info is None:
            raise ValueError("Invalid value for `contract_discount_info`, must not be `None`")

        self._contract_discount_info = contract_discount_info

    @property
    def contract_money_info(self):
        """Gets the contract_money_info of this OfferContent.


        :return: The contract_money_info of this OfferContent.
        :rtype: ContractMoneyInfo
        """
        return self._contract_money_info

    @contract_money_info.setter
    def contract_money_info(self, contract_money_info):
        """Sets the contract_money_info of this OfferContent.


        :param contract_money_info: The contract_money_info of this OfferContent.
        :type contract_money_info: ContractMoneyInfo
        """
        if contract_money_info is None:
            raise ValueError("Invalid value for `contract_money_info`, must not be `None`")

        self._contract_money_info = contract_money_info

    @property
    def contract_store_info(self):
        """Gets the contract_store_info of this OfferContent.


        :return: The contract_store_info of this OfferContent.
        :rtype: ContractStoreInfo
        """
        return self._contract_store_info

    @contract_store_info.setter
    def contract_store_info(self, contract_store_info):
        """Sets the contract_store_info of this OfferContent.


        :param contract_store_info: The contract_store_info of this OfferContent.
        :type contract_store_info: ContractStoreInfo
        """
        if contract_store_info is None:
            raise ValueError("Invalid value for `contract_store_info`, must not be `None`")

        self._contract_store_info = contract_store_info

    @property
    def contract_termination_reason(self):
        """Gets the contract_termination_reason of this OfferContent.

        The termination reason, if your current contract is scheduled to be terminated.

        :return: The contract_termination_reason of this OfferContent.
        :rtype: str
        """
        return self._contract_termination_reason

    @contract_termination_reason.setter
    def contract_termination_reason(self, contract_termination_reason):
        """Sets the contract_termination_reason of this OfferContent.

        The termination reason, if your current contract is scheduled to be terminated.

        :param contract_termination_reason: The contract_termination_reason of this OfferContent.
        :type contract_termination_reason: str
        """

        self._contract_termination_reason = contract_termination_reason

    @property
    def contract_termination_reason_type(self):
        """Gets the contract_termination_reason_type of this OfferContent.

        The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason

        :return: The contract_termination_reason_type of this OfferContent.
        :rtype: int
        """
        return self._contract_termination_reason_type

    @contract_termination_reason_type.setter
    def contract_termination_reason_type(self, contract_termination_reason_type):
        """Sets the contract_termination_reason_type of this OfferContent.

        The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason

        :param contract_termination_reason_type: The contract_termination_reason_type of this OfferContent.
        :type contract_termination_reason_type: int
        """

        self._contract_termination_reason_type = contract_termination_reason_type

    @property
    def notify_vat_exemption(self):
        """Gets the notify_vat_exemption of this OfferContent.

        Internal usage: Indicates if we have to notify you about VAT exemption.

        :return: The notify_vat_exemption of this OfferContent.
        :rtype: bool
        """
        return self._notify_vat_exemption

    @notify_vat_exemption.setter
    def notify_vat_exemption(self, notify_vat_exemption):
        """Sets the notify_vat_exemption of this OfferContent.

        Internal usage: Indicates if we have to notify you about VAT exemption.

        :param notify_vat_exemption: The notify_vat_exemption of this OfferContent.
        :type notify_vat_exemption: bool
        """
        if notify_vat_exemption is None:
            raise ValueError("Invalid value for `notify_vat_exemption`, must not be `None`")

        self._notify_vat_exemption = notify_vat_exemption

    @property
    def previous_fix_period_invoice_prorata_info(self):
        """Gets the previous_fix_period_invoice_prorata_info of this OfferContent.


        :return: The previous_fix_period_invoice_prorata_info of this OfferContent.
        :rtype: PreviousFixPeriodInvoiceProrataInfo
        """
        return self._previous_fix_period_invoice_prorata_info

    @previous_fix_period_invoice_prorata_info.setter
    def previous_fix_period_invoice_prorata_info(self, previous_fix_period_invoice_prorata_info):
        """Sets the previous_fix_period_invoice_prorata_info of this OfferContent.


        :param previous_fix_period_invoice_prorata_info: The previous_fix_period_invoice_prorata_info of this OfferContent.
        :type previous_fix_period_invoice_prorata_info: PreviousFixPeriodInvoiceProrataInfo
        """
        if previous_fix_period_invoice_prorata_info is None:
            raise ValueError("Invalid value for `previous_fix_period_invoice_prorata_info`, must not be `None`")

        self._previous_fix_period_invoice_prorata_info = previous_fix_period_invoice_prorata_info
