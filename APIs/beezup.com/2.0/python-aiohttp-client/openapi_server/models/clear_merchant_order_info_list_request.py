# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_identifier import OrderIdentifier
from openapi_server import util


class ClearMerchantOrderInfoListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orders: list[OrderIdentifier]=None):
        """ClearMerchantOrderInfoListRequest - a model defined in OpenAPI

        :param orders: The orders of this ClearMerchantOrderInfoListRequest.
        """
        self.openapi_types = {
            'orders': list[OrderIdentifier]
        }

        self.attribute_map = {
            'orders': 'orders'
        }

        self._orders = orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClearMerchantOrderInfoListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The clearMerchantOrderInfoListRequest of this ClearMerchantOrderInfoListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orders(self):
        """Gets the orders of this ClearMerchantOrderInfoListRequest.


        :return: The orders of this ClearMerchantOrderInfoListRequest.
        :rtype: list[OrderIdentifier]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this ClearMerchantOrderInfoListRequest.


        :param orders: The orders of this ClearMerchantOrderInfoListRequest.
        :type orders: list[OrderIdentifier]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")
        if orders is not None and len(orders) > 100:
            raise ValueError("Invalid value for `orders`, number of items must be less than or equal to `100`")
        if orders is not None and len(orders) < 1:
            raise ValueError("Invalid value for `orders`, number of items must be greater than or equal to `1`")

        self._orders = orders
