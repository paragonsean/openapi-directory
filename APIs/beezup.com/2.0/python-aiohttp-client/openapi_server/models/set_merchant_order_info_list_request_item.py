# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetMerchantOrderInfoListRequestItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, beez_up_order_id: str=None, marketplace_technical_code: str=None, order_merchant_order_id: str=None):
        """SetMerchantOrderInfoListRequestItem - a model defined in OpenAPI

        :param account_id: The account_id of this SetMerchantOrderInfoListRequestItem.
        :param beez_up_order_id: The beez_up_order_id of this SetMerchantOrderInfoListRequestItem.
        :param marketplace_technical_code: The marketplace_technical_code of this SetMerchantOrderInfoListRequestItem.
        :param order_merchant_order_id: The order_merchant_order_id of this SetMerchantOrderInfoListRequestItem.
        """
        self.openapi_types = {
            'account_id': int,
            'beez_up_order_id': str,
            'marketplace_technical_code': str,
            'order_merchant_order_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'beez_up_order_id': 'beezUPOrderId',
            'marketplace_technical_code': 'marketplaceTechnicalCode',
            'order_merchant_order_id': 'order_MerchantOrderId'
        }

        self._account_id = account_id
        self._beez_up_order_id = beez_up_order_id
        self._marketplace_technical_code = marketplace_technical_code
        self._order_merchant_order_id = order_merchant_order_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetMerchantOrderInfoListRequestItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The setMerchantOrderInfoListRequestItem of this SetMerchantOrderInfoListRequestItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this SetMerchantOrderInfoListRequestItem.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The account_id of this SetMerchantOrderInfoListRequestItem.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SetMerchantOrderInfoListRequestItem.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param account_id: The account_id of this SetMerchantOrderInfoListRequestItem.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def beez_up_order_id(self):
        """Gets the beez_up_order_id of this SetMerchantOrderInfoListRequestItem.

        The BeezUP Order identifier

        :return: The beez_up_order_id of this SetMerchantOrderInfoListRequestItem.
        :rtype: str
        """
        return self._beez_up_order_id

    @beez_up_order_id.setter
    def beez_up_order_id(self, beez_up_order_id):
        """Sets the beez_up_order_id of this SetMerchantOrderInfoListRequestItem.

        The BeezUP Order identifier

        :param beez_up_order_id: The beez_up_order_id of this SetMerchantOrderInfoListRequestItem.
        :type beez_up_order_id: str
        """
        if beez_up_order_id is None:
            raise ValueError("Invalid value for `beez_up_order_id`, must not be `None`")

        self._beez_up_order_id = beez_up_order_id

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this SetMerchantOrderInfoListRequestItem.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this SetMerchantOrderInfoListRequestItem.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this SetMerchantOrderInfoListRequestItem.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this SetMerchantOrderInfoListRequestItem.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code

    @property
    def order_merchant_order_id(self):
        """Gets the order_merchant_order_id of this SetMerchantOrderInfoListRequestItem.

        The order merchant identifier

        :return: The order_merchant_order_id of this SetMerchantOrderInfoListRequestItem.
        :rtype: str
        """
        return self._order_merchant_order_id

    @order_merchant_order_id.setter
    def order_merchant_order_id(self, order_merchant_order_id):
        """Sets the order_merchant_order_id of this SetMerchantOrderInfoListRequestItem.

        The order merchant identifier

        :param order_merchant_order_id: The order_merchant_order_id of this SetMerchantOrderInfoListRequestItem.
        :type order_merchant_order_id: str
        """
        if order_merchant_order_id is None:
            raise ValueError("Invalid value for `order_merchant_order_id`, must not be `None`")

        self._order_merchant_order_id = order_merchant_order_id
