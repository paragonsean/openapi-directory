# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_category_column_override import ChannelCategoryColumnOverride
from openapi_server import util


class ChannelCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_category_channel_code: str=None, channel_category_column_overrides: Dict[str, ChannelCategoryColumnOverride]=None, channel_category_default_cost: float=None, channel_category_id: str=None, channel_category_level: int=None, channel_category_path: List[str]=None):
        """ChannelCategory - a model defined in OpenAPI

        :param channel_category_channel_code: The channel_category_channel_code of this ChannelCategory.
        :param channel_category_column_overrides: The channel_category_column_overrides of this ChannelCategory.
        :param channel_category_default_cost: The channel_category_default_cost of this ChannelCategory.
        :param channel_category_id: The channel_category_id of this ChannelCategory.
        :param channel_category_level: The channel_category_level of this ChannelCategory.
        :param channel_category_path: The channel_category_path of this ChannelCategory.
        """
        self.openapi_types = {
            'channel_category_channel_code': str,
            'channel_category_column_overrides': Dict[str, ChannelCategoryColumnOverride],
            'channel_category_default_cost': float,
            'channel_category_id': str,
            'channel_category_level': int,
            'channel_category_path': List[str]
        }

        self.attribute_map = {
            'channel_category_channel_code': 'channelCategoryChannelCode',
            'channel_category_column_overrides': 'channelCategoryColumnOverrides',
            'channel_category_default_cost': 'channelCategoryDefaultCost',
            'channel_category_id': 'channelCategoryId',
            'channel_category_level': 'channelCategoryLevel',
            'channel_category_path': 'channelCategoryPath'
        }

        self._channel_category_channel_code = channel_category_channel_code
        self._channel_category_column_overrides = channel_category_column_overrides
        self._channel_category_default_cost = channel_category_default_cost
        self._channel_category_id = channel_category_id
        self._channel_category_level = channel_category_level
        self._channel_category_path = channel_category_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCategory of this ChannelCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_category_channel_code(self):
        """Gets the channel_category_channel_code of this ChannelCategory.

        The channel category channel code identifier

        :return: The channel_category_channel_code of this ChannelCategory.
        :rtype: str
        """
        return self._channel_category_channel_code

    @channel_category_channel_code.setter
    def channel_category_channel_code(self, channel_category_channel_code):
        """Sets the channel_category_channel_code of this ChannelCategory.

        The channel category channel code identifier

        :param channel_category_channel_code: The channel_category_channel_code of this ChannelCategory.
        :type channel_category_channel_code: str
        """

        self._channel_category_channel_code = channel_category_channel_code

    @property
    def channel_category_column_overrides(self):
        """Gets the channel_category_column_overrides of this ChannelCategory.

        The channel category column overrides

        :return: The channel_category_column_overrides of this ChannelCategory.
        :rtype: Dict[str, ChannelCategoryColumnOverride]
        """
        return self._channel_category_column_overrides

    @channel_category_column_overrides.setter
    def channel_category_column_overrides(self, channel_category_column_overrides):
        """Sets the channel_category_column_overrides of this ChannelCategory.

        The channel category column overrides

        :param channel_category_column_overrides: The channel_category_column_overrides of this ChannelCategory.
        :type channel_category_column_overrides: Dict[str, ChannelCategoryColumnOverride]
        """

        self._channel_category_column_overrides = channel_category_column_overrides

    @property
    def channel_category_default_cost(self):
        """Gets the channel_category_default_cost of this ChannelCategory.

        The default cost on this channel category

        :return: The channel_category_default_cost of this ChannelCategory.
        :rtype: float
        """
        return self._channel_category_default_cost

    @channel_category_default_cost.setter
    def channel_category_default_cost(self, channel_category_default_cost):
        """Sets the channel_category_default_cost of this ChannelCategory.

        The default cost on this channel category

        :param channel_category_default_cost: The channel_category_default_cost of this ChannelCategory.
        :type channel_category_default_cost: float
        """

        self._channel_category_default_cost = channel_category_default_cost

    @property
    def channel_category_id(self):
        """Gets the channel_category_id of this ChannelCategory.


        :return: The channel_category_id of this ChannelCategory.
        :rtype: str
        """
        return self._channel_category_id

    @channel_category_id.setter
    def channel_category_id(self, channel_category_id):
        """Sets the channel_category_id of this ChannelCategory.


        :param channel_category_id: The channel_category_id of this ChannelCategory.
        :type channel_category_id: str
        """
        if channel_category_id is None:
            raise ValueError("Invalid value for `channel_category_id`, must not be `None`")

        self._channel_category_id = channel_category_id

    @property
    def channel_category_level(self):
        """Gets the channel_category_level of this ChannelCategory.

        The channel category level starting from 1

        :return: The channel_category_level of this ChannelCategory.
        :rtype: int
        """
        return self._channel_category_level

    @channel_category_level.setter
    def channel_category_level(self, channel_category_level):
        """Sets the channel_category_level of this ChannelCategory.

        The channel category level starting from 1

        :param channel_category_level: The channel_category_level of this ChannelCategory.
        :type channel_category_level: int
        """
        if channel_category_level is None:
            raise ValueError("Invalid value for `channel_category_level`, must not be `None`")
        if channel_category_level is not None and channel_category_level > 9:
            raise ValueError("Invalid value for `channel_category_level`, must be a value less than or equal to `9`")
        if channel_category_level is not None and channel_category_level < 1:
            raise ValueError("Invalid value for `channel_category_level`, must be a value greater than or equal to `1`")

        self._channel_category_level = channel_category_level

    @property
    def channel_category_path(self):
        """Gets the channel_category_path of this ChannelCategory.

        The channel category path

        :return: The channel_category_path of this ChannelCategory.
        :rtype: List[str]
        """
        return self._channel_category_path

    @channel_category_path.setter
    def channel_category_path(self, channel_category_path):
        """Sets the channel_category_path of this ChannelCategory.

        The channel category path

        :param channel_category_path: The channel_category_path of this ChannelCategory.
        :type channel_category_path: List[str]
        """
        if channel_category_path is None:
            raise ValueError("Invalid value for `channel_category_path`, must not be `None`")

        self._channel_category_path = channel_category_path
