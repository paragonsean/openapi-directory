# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_pagination_result import BeezUPCommonPaginationResult
from openapi_server.models.channel_catalog_product_info import ChannelCatalogProductInfo
from openapi_server.models.channel_catalog_product_info_list_links import ChannelCatalogProductInfoListLinks
from openapi_server import util


class ChannelCatalogProductInfoList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ChannelCatalogProductInfoListLinks=None, pagination_result: BeezUPCommonPaginationResult=None, product_infos: List[ChannelCatalogProductInfo]=None):
        """ChannelCatalogProductInfoList - a model defined in OpenAPI

        :param links: The links of this ChannelCatalogProductInfoList.
        :param pagination_result: The pagination_result of this ChannelCatalogProductInfoList.
        :param product_infos: The product_infos of this ChannelCatalogProductInfoList.
        """
        self.openapi_types = {
            'links': ChannelCatalogProductInfoListLinks,
            'pagination_result': BeezUPCommonPaginationResult,
            'product_infos': List[ChannelCatalogProductInfo]
        }

        self.attribute_map = {
            'links': 'links',
            'pagination_result': 'paginationResult',
            'product_infos': 'productInfos'
        }

        self._links = links
        self._pagination_result = pagination_result
        self._product_infos = product_infos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductInfoList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductInfoList of this ChannelCatalogProductInfoList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ChannelCatalogProductInfoList.


        :return: The links of this ChannelCatalogProductInfoList.
        :rtype: ChannelCatalogProductInfoListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogProductInfoList.


        :param links: The links of this ChannelCatalogProductInfoList.
        :type links: ChannelCatalogProductInfoListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def pagination_result(self):
        """Gets the pagination_result of this ChannelCatalogProductInfoList.


        :return: The pagination_result of this ChannelCatalogProductInfoList.
        :rtype: BeezUPCommonPaginationResult
        """
        return self._pagination_result

    @pagination_result.setter
    def pagination_result(self, pagination_result):
        """Sets the pagination_result of this ChannelCatalogProductInfoList.


        :param pagination_result: The pagination_result of this ChannelCatalogProductInfoList.
        :type pagination_result: BeezUPCommonPaginationResult
        """
        if pagination_result is None:
            raise ValueError("Invalid value for `pagination_result`, must not be `None`")

        self._pagination_result = pagination_result

    @property
    def product_infos(self):
        """Gets the product_infos of this ChannelCatalogProductInfoList.


        :return: The product_infos of this ChannelCatalogProductInfoList.
        :rtype: List[ChannelCatalogProductInfo]
        """
        return self._product_infos

    @product_infos.setter
    def product_infos(self, product_infos):
        """Sets the product_infos of this ChannelCatalogProductInfoList.


        :param product_infos: The product_infos of this ChannelCatalogProductInfoList.
        :type product_infos: List[ChannelCatalogProductInfo]
        """
        if product_infos is None:
            raise ValueError("Invalid value for `product_infos`, must not be `None`")

        self._product_infos = product_infos
