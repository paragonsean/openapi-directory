# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_response_message import ErrorResponseMessage
import re
from openapi_server import util


class SubscriptionPushReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, error_message: ErrorResponseMessage=None, event_id: str=None, http_status: int=None, last_order_modification_utc_date: datetime=None, max_retry_count: int=None, next_scheduled_retry_utc_date: datetime=None, order_count: int=None, request_uri: str=None, response_uri: str=None, retry_count: int=None, subscription_id: str=None, succeed: bool=None):
        """SubscriptionPushReporting - a model defined in OpenAPI

        :param duration: The duration of this SubscriptionPushReporting.
        :param error_message: The error_message of this SubscriptionPushReporting.
        :param event_id: The event_id of this SubscriptionPushReporting.
        :param http_status: The http_status of this SubscriptionPushReporting.
        :param last_order_modification_utc_date: The last_order_modification_utc_date of this SubscriptionPushReporting.
        :param max_retry_count: The max_retry_count of this SubscriptionPushReporting.
        :param next_scheduled_retry_utc_date: The next_scheduled_retry_utc_date of this SubscriptionPushReporting.
        :param order_count: The order_count of this SubscriptionPushReporting.
        :param request_uri: The request_uri of this SubscriptionPushReporting.
        :param response_uri: The response_uri of this SubscriptionPushReporting.
        :param retry_count: The retry_count of this SubscriptionPushReporting.
        :param subscription_id: The subscription_id of this SubscriptionPushReporting.
        :param succeed: The succeed of this SubscriptionPushReporting.
        """
        self.openapi_types = {
            'duration': str,
            'error_message': ErrorResponseMessage,
            'event_id': str,
            'http_status': int,
            'last_order_modification_utc_date': datetime,
            'max_retry_count': int,
            'next_scheduled_retry_utc_date': datetime,
            'order_count': int,
            'request_uri': str,
            'response_uri': str,
            'retry_count': int,
            'subscription_id': str,
            'succeed': bool
        }

        self.attribute_map = {
            'duration': 'duration',
            'error_message': 'errorMessage',
            'event_id': 'eventId',
            'http_status': 'httpStatus',
            'last_order_modification_utc_date': 'lastOrderModificationUtcDate',
            'max_retry_count': 'maxRetryCount',
            'next_scheduled_retry_utc_date': 'nextScheduledRetryUtcDate',
            'order_count': 'orderCount',
            'request_uri': 'requestUri',
            'response_uri': 'responseUri',
            'retry_count': 'retryCount',
            'subscription_id': 'subscriptionId',
            'succeed': 'succeed'
        }

        self._duration = duration
        self._error_message = error_message
        self._event_id = event_id
        self._http_status = http_status
        self._last_order_modification_utc_date = last_order_modification_utc_date
        self._max_retry_count = max_retry_count
        self._next_scheduled_retry_utc_date = next_scheduled_retry_utc_date
        self._order_count = order_count
        self._request_uri = request_uri
        self._response_uri = response_uri
        self._retry_count = retry_count
        self._subscription_id = subscription_id
        self._succeed = succeed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPushReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The subscriptionPushReporting of this SubscriptionPushReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SubscriptionPushReporting.

        The duration of the push operation

        :return: The duration of this SubscriptionPushReporting.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SubscriptionPushReporting.

        The duration of the push operation

        :param duration: The duration of this SubscriptionPushReporting.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def error_message(self):
        """Gets the error_message of this SubscriptionPushReporting.


        :return: The error_message of this SubscriptionPushReporting.
        :rtype: ErrorResponseMessage
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SubscriptionPushReporting.


        :param error_message: The error_message of this SubscriptionPushReporting.
        :type error_message: ErrorResponseMessage
        """

        self._error_message = error_message

    @property
    def event_id(self):
        """Gets the event_id of this SubscriptionPushReporting.

        The message identifier. It's a guid.

        :return: The event_id of this SubscriptionPushReporting.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this SubscriptionPushReporting.

        The message identifier. It's a guid.

        :param event_id: The event_id of this SubscriptionPushReporting.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def http_status(self):
        """Gets the http_status of this SubscriptionPushReporting.

        The HTTP status received from the consumer

        :return: The http_status of this SubscriptionPushReporting.
        :rtype: int
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this SubscriptionPushReporting.

        The HTTP status received from the consumer

        :param http_status: The http_status of this SubscriptionPushReporting.
        :type http_status: int
        """

        self._http_status = http_status

    @property
    def last_order_modification_utc_date(self):
        """Gets the last_order_modification_utc_date of this SubscriptionPushReporting.

        This modification date correspond to the last order pushed by your subscription consumer

        :return: The last_order_modification_utc_date of this SubscriptionPushReporting.
        :rtype: datetime
        """
        return self._last_order_modification_utc_date

    @last_order_modification_utc_date.setter
    def last_order_modification_utc_date(self, last_order_modification_utc_date):
        """Sets the last_order_modification_utc_date of this SubscriptionPushReporting.

        This modification date correspond to the last order pushed by your subscription consumer

        :param last_order_modification_utc_date: The last_order_modification_utc_date of this SubscriptionPushReporting.
        :type last_order_modification_utc_date: datetime
        """
        if last_order_modification_utc_date is None:
            raise ValueError("Invalid value for `last_order_modification_utc_date`, must not be `None`")

        self._last_order_modification_utc_date = last_order_modification_utc_date

    @property
    def max_retry_count(self):
        """Gets the max_retry_count of this SubscriptionPushReporting.

        The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :return: The max_retry_count of this SubscriptionPushReporting.
        :rtype: int
        """
        return self._max_retry_count

    @max_retry_count.setter
    def max_retry_count(self, max_retry_count):
        """Sets the max_retry_count of this SubscriptionPushReporting.

        The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :param max_retry_count: The max_retry_count of this SubscriptionPushReporting.
        :type max_retry_count: int
        """

        self._max_retry_count = max_retry_count

    @property
    def next_scheduled_retry_utc_date(self):
        """Gets the next_scheduled_retry_utc_date of this SubscriptionPushReporting.

        The next scheduled  date we retry to send orders

        :return: The next_scheduled_retry_utc_date of this SubscriptionPushReporting.
        :rtype: datetime
        """
        return self._next_scheduled_retry_utc_date

    @next_scheduled_retry_utc_date.setter
    def next_scheduled_retry_utc_date(self, next_scheduled_retry_utc_date):
        """Sets the next_scheduled_retry_utc_date of this SubscriptionPushReporting.

        The next scheduled  date we retry to send orders

        :param next_scheduled_retry_utc_date: The next_scheduled_retry_utc_date of this SubscriptionPushReporting.
        :type next_scheduled_retry_utc_date: datetime
        """

        self._next_scheduled_retry_utc_date = next_scheduled_retry_utc_date

    @property
    def order_count(self):
        """Gets the order_count of this SubscriptionPushReporting.

        The order count sent

        :return: The order_count of this SubscriptionPushReporting.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this SubscriptionPushReporting.

        The order count sent

        :param order_count: The order_count of this SubscriptionPushReporting.
        :type order_count: int
        """
        if order_count is None:
            raise ValueError("Invalid value for `order_count`, must not be `None`")

        self._order_count = order_count

    @property
    def request_uri(self):
        """Gets the request_uri of this SubscriptionPushReporting.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The request_uri of this SubscriptionPushReporting.
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this SubscriptionPushReporting.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param request_uri: The request_uri of this SubscriptionPushReporting.
        :type request_uri: str
        """
        if request_uri is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', request_uri):
            raise ValueError("Invalid value for `request_uri`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._request_uri = request_uri

    @property
    def response_uri(self):
        """Gets the response_uri of this SubscriptionPushReporting.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The response_uri of this SubscriptionPushReporting.
        :rtype: str
        """
        return self._response_uri

    @response_uri.setter
    def response_uri(self, response_uri):
        """Sets the response_uri of this SubscriptionPushReporting.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param response_uri: The response_uri of this SubscriptionPushReporting.
        :type response_uri: str
        """
        if response_uri is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', response_uri):
            raise ValueError("Invalid value for `response_uri`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._response_uri = response_uri

    @property
    def retry_count(self):
        """Gets the retry_count of this SubscriptionPushReporting.

        The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :return: The retry_count of this SubscriptionPushReporting.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this SubscriptionPushReporting.

        The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :param retry_count: The retry_count of this SubscriptionPushReporting.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionPushReporting.

        The identifier of the subscription to the orders for a merchant

        :return: The subscription_id of this SubscriptionPushReporting.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionPushReporting.

        The identifier of the subscription to the orders for a merchant

        :param subscription_id: The subscription_id of this SubscriptionPushReporting.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id

    @property
    def succeed(self):
        """Gets the succeed of this SubscriptionPushReporting.

        Indicates if the push operation has succeed

        :return: The succeed of this SubscriptionPushReporting.
        :rtype: bool
        """
        return self._succeed

    @succeed.setter
    def succeed(self, succeed):
        """Sets the succeed of this SubscriptionPushReporting.

        Indicates if the push operation has succeed

        :param succeed: The succeed of this SubscriptionPushReporting.
        :type succeed: bool
        """
        if succeed is None:
            raise ValueError("Invalid value for `succeed`, must not be `None`")

        self._succeed = succeed
