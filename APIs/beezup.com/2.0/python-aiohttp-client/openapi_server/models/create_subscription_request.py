# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_application_name: str=None, merchant_application_version: str='1.0', merchant_email_alert: str=None, name: str=None, target_url: str=None):
        """CreateSubscriptionRequest - a model defined in OpenAPI

        :param merchant_application_name: The merchant_application_name of this CreateSubscriptionRequest.
        :param merchant_application_version: The merchant_application_version of this CreateSubscriptionRequest.
        :param merchant_email_alert: The merchant_email_alert of this CreateSubscriptionRequest.
        :param name: The name of this CreateSubscriptionRequest.
        :param target_url: The target_url of this CreateSubscriptionRequest.
        """
        self.openapi_types = {
            'merchant_application_name': str,
            'merchant_application_version': str,
            'merchant_email_alert': str,
            'name': str,
            'target_url': str
        }

        self.attribute_map = {
            'merchant_application_name': 'merchantApplicationName',
            'merchant_application_version': 'merchantApplicationVersion',
            'merchant_email_alert': 'merchantEmailAlert',
            'name': 'name',
            'target_url': 'targetUrl'
        }

        self._merchant_application_name = merchant_application_name
        self._merchant_application_version = merchant_application_version
        self._merchant_email_alert = merchant_email_alert
        self._name = name
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createSubscriptionRequest of this CreateSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_application_name(self):
        """Gets the merchant_application_name of this CreateSubscriptionRequest.

        The name of your application

        :return: The merchant_application_name of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._merchant_application_name

    @merchant_application_name.setter
    def merchant_application_name(self, merchant_application_name):
        """Sets the merchant_application_name of this CreateSubscriptionRequest.

        The name of your application

        :param merchant_application_name: The merchant_application_name of this CreateSubscriptionRequest.
        :type merchant_application_name: str
        """
        if merchant_application_name is None:
            raise ValueError("Invalid value for `merchant_application_name`, must not be `None`")

        self._merchant_application_name = merchant_application_name

    @property
    def merchant_application_version(self):
        """Gets the merchant_application_version of this CreateSubscriptionRequest.

        The version of your application

        :return: The merchant_application_version of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._merchant_application_version

    @merchant_application_version.setter
    def merchant_application_version(self, merchant_application_version):
        """Sets the merchant_application_version of this CreateSubscriptionRequest.

        The version of your application

        :param merchant_application_version: The merchant_application_version of this CreateSubscriptionRequest.
        :type merchant_application_version: str
        """
        if merchant_application_version is None:
            raise ValueError("Invalid value for `merchant_application_version`, must not be `None`")

        self._merchant_application_version = merchant_application_version

    @property
    def merchant_email_alert(self):
        """Gets the merchant_email_alert of this CreateSubscriptionRequest.

        The email

        :return: The merchant_email_alert of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._merchant_email_alert

    @merchant_email_alert.setter
    def merchant_email_alert(self, merchant_email_alert):
        """Sets the merchant_email_alert of this CreateSubscriptionRequest.

        The email

        :param merchant_email_alert: The merchant_email_alert of this CreateSubscriptionRequest.
        :type merchant_email_alert: str
        """
        if merchant_email_alert is not None and not re.search(r'^(.+)@(.+)$', merchant_email_alert):
            raise ValueError("Invalid value for `merchant_email_alert`, must be a follow pattern or equal to `/^(.+)@(.+)$/`")

        self._merchant_email_alert = merchant_email_alert

    @property
    def name(self):
        """Gets the name of this CreateSubscriptionRequest.

        The subscription name you want to use

        :return: The name of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubscriptionRequest.

        The subscription name you want to use

        :param name: The name of this CreateSubscriptionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def target_url(self):
        """Gets the target_url of this CreateSubscriptionRequest.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The target_url of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this CreateSubscriptionRequest.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param target_url: The target_url of this CreateSubscriptionRequest.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")
        if target_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', target_url):
            raise ValueError("Invalid value for `target_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._target_url = target_url
