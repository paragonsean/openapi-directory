# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compression_format_strategy import CompressionFormatStrategy
from openapi_server.models.credential import Credential
from openapi_server.models.download_catalog_strategy import DownloadCatalogStrategy
from openapi_server import util


class InputFileFetchConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compressed_relative_path: str=None, compression_format_strategy: CompressionFormatStrategy=None, credential: Credential=None, download_catalog_strategy: DownloadCatalogStrategy=None, download_timeout: int=None, uri: str=None):
        """InputFileFetchConfiguration - a model defined in OpenAPI

        :param compressed_relative_path: The compressed_relative_path of this InputFileFetchConfiguration.
        :param compression_format_strategy: The compression_format_strategy of this InputFileFetchConfiguration.
        :param credential: The credential of this InputFileFetchConfiguration.
        :param download_catalog_strategy: The download_catalog_strategy of this InputFileFetchConfiguration.
        :param download_timeout: The download_timeout of this InputFileFetchConfiguration.
        :param uri: The uri of this InputFileFetchConfiguration.
        """
        self.openapi_types = {
            'compressed_relative_path': str,
            'compression_format_strategy': CompressionFormatStrategy,
            'credential': Credential,
            'download_catalog_strategy': DownloadCatalogStrategy,
            'download_timeout': int,
            'uri': str
        }

        self.attribute_map = {
            'compressed_relative_path': 'compressedRelativePath',
            'compression_format_strategy': 'compressionFormatStrategy',
            'credential': 'credential',
            'download_catalog_strategy': 'downloadCatalogStrategy',
            'download_timeout': 'downloadTimeout',
            'uri': 'uri'
        }

        self._compressed_relative_path = compressed_relative_path
        self._compression_format_strategy = compression_format_strategy
        self._credential = credential
        self._download_catalog_strategy = download_catalog_strategy
        self._download_timeout = download_timeout
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputFileFetchConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputFileFetchConfiguration of this InputFileFetchConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compressed_relative_path(self):
        """Gets the compressed_relative_path of this InputFileFetchConfiguration.

        Indicate the relative path in the compressed file

        :return: The compressed_relative_path of this InputFileFetchConfiguration.
        :rtype: str
        """
        return self._compressed_relative_path

    @compressed_relative_path.setter
    def compressed_relative_path(self, compressed_relative_path):
        """Sets the compressed_relative_path of this InputFileFetchConfiguration.

        Indicate the relative path in the compressed file

        :param compressed_relative_path: The compressed_relative_path of this InputFileFetchConfiguration.
        :type compressed_relative_path: str
        """

        self._compressed_relative_path = compressed_relative_path

    @property
    def compression_format_strategy(self):
        """Gets the compression_format_strategy of this InputFileFetchConfiguration.


        :return: The compression_format_strategy of this InputFileFetchConfiguration.
        :rtype: CompressionFormatStrategy
        """
        return self._compression_format_strategy

    @compression_format_strategy.setter
    def compression_format_strategy(self, compression_format_strategy):
        """Sets the compression_format_strategy of this InputFileFetchConfiguration.


        :param compression_format_strategy: The compression_format_strategy of this InputFileFetchConfiguration.
        :type compression_format_strategy: CompressionFormatStrategy
        """

        self._compression_format_strategy = compression_format_strategy

    @property
    def credential(self):
        """Gets the credential of this InputFileFetchConfiguration.


        :return: The credential of this InputFileFetchConfiguration.
        :rtype: Credential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this InputFileFetchConfiguration.


        :param credential: The credential of this InputFileFetchConfiguration.
        :type credential: Credential
        """

        self._credential = credential

    @property
    def download_catalog_strategy(self):
        """Gets the download_catalog_strategy of this InputFileFetchConfiguration.


        :return: The download_catalog_strategy of this InputFileFetchConfiguration.
        :rtype: DownloadCatalogStrategy
        """
        return self._download_catalog_strategy

    @download_catalog_strategy.setter
    def download_catalog_strategy(self, download_catalog_strategy):
        """Sets the download_catalog_strategy of this InputFileFetchConfiguration.


        :param download_catalog_strategy: The download_catalog_strategy of this InputFileFetchConfiguration.
        :type download_catalog_strategy: DownloadCatalogStrategy
        """
        if download_catalog_strategy is None:
            raise ValueError("Invalid value for `download_catalog_strategy`, must not be `None`")

        self._download_catalog_strategy = download_catalog_strategy

    @property
    def download_timeout(self):
        """Gets the download_timeout of this InputFileFetchConfiguration.

        Indicate the download time out in second

        :return: The download_timeout of this InputFileFetchConfiguration.
        :rtype: int
        """
        return self._download_timeout

    @download_timeout.setter
    def download_timeout(self, download_timeout):
        """Sets the download_timeout of this InputFileFetchConfiguration.

        Indicate the download time out in second

        :param download_timeout: The download_timeout of this InputFileFetchConfiguration.
        :type download_timeout: int
        """

        self._download_timeout = download_timeout

    @property
    def uri(self):
        """Gets the uri of this InputFileFetchConfiguration.

        Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)

        :return: The uri of this InputFileFetchConfiguration.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InputFileFetchConfiguration.

        Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)

        :param uri: The uri of this InputFileFetchConfiguration.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
