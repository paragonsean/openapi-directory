# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_type import CostType
from openapi_server import util


class ChannelCostSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_type: CostType=None, global_cost_value: float=None):
        """ChannelCostSettings - a model defined in OpenAPI

        :param cost_type: The cost_type of this ChannelCostSettings.
        :param global_cost_value: The global_cost_value of this ChannelCostSettings.
        """
        self.openapi_types = {
            'cost_type': CostType,
            'global_cost_value': float
        }

        self.attribute_map = {
            'cost_type': 'costType',
            'global_cost_value': 'globalCostValue'
        }

        self._cost_type = cost_type
        self._global_cost_value = global_cost_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCostSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCostSettings of this ChannelCostSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_type(self):
        """Gets the cost_type of this ChannelCostSettings.


        :return: The cost_type of this ChannelCostSettings.
        :rtype: CostType
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ChannelCostSettings.


        :param cost_type: The cost_type of this ChannelCostSettings.
        :type cost_type: CostType
        """
        if cost_type is None:
            raise ValueError("Invalid value for `cost_type`, must not be `None`")

        self._cost_type = cost_type

    @property
    def global_cost_value(self):
        """Gets the global_cost_value of this ChannelCostSettings.

        In case of global cost type, you have to indicate the cost value.

        :return: The global_cost_value of this ChannelCostSettings.
        :rtype: float
        """
        return self._global_cost_value

    @global_cost_value.setter
    def global_cost_value(self, global_cost_value):
        """Sets the global_cost_value of this ChannelCostSettings.

        In case of global cost type, you have to indicate the cost value.

        :param global_cost_value: The global_cost_value of this ChannelCostSettings.
        :type global_cost_value: float
        """

        self._global_cost_value = global_cost_value
