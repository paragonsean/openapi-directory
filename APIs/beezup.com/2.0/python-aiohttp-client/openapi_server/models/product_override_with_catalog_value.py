# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductOverrideWithCatalogValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_value: str=None, override: str=None):
        """ProductOverrideWithCatalogValue - a model defined in OpenAPI

        :param catalog_value: The catalog_value of this ProductOverrideWithCatalogValue.
        :param override: The override of this ProductOverrideWithCatalogValue.
        """
        self.openapi_types = {
            'catalog_value': str,
            'override': str
        }

        self.attribute_map = {
            'catalog_value': 'catalogValue',
            'override': 'override'
        }

        self._catalog_value = catalog_value
        self._override = override

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductOverrideWithCatalogValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The productOverrideWithCatalogValue of this ProductOverrideWithCatalogValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_value(self):
        """Gets the catalog_value of this ProductOverrideWithCatalogValue.

        The catalog product value

        :return: The catalog_value of this ProductOverrideWithCatalogValue.
        :rtype: str
        """
        return self._catalog_value

    @catalog_value.setter
    def catalog_value(self, catalog_value):
        """Sets the catalog_value of this ProductOverrideWithCatalogValue.

        The catalog product value

        :param catalog_value: The catalog_value of this ProductOverrideWithCatalogValue.
        :type catalog_value: str
        """

        self._catalog_value = catalog_value

    @property
    def override(self):
        """Gets the override of this ProductOverrideWithCatalogValue.

        The overridden product value

        :return: The override of this ProductOverrideWithCatalogValue.
        :rtype: str
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this ProductOverrideWithCatalogValue.

        The overridden product value

        :param override: The override of this ProductOverrideWithCatalogValue.
        :type override: str
        """
        if override is None:
            raise ValueError("Invalid value for `override`, must not be `None`")

        self._override = override
