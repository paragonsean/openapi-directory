# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_importation_report_response_diff import GetImportationReportResponseDiff
from openapi_server.models.get_importation_report_response_error import GetImportationReportResponseError
from openapi_server.models.get_importation_report_response_importation_info import GetImportationReportResponseImportationInfo
from openapi_server.models.get_importation_report_response_product_metrics import GetImportationReportResponseProductMetrics
from openapi_server import util


class GetImportationReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: GetImportationReportResponseDiff=None, columns: GetImportationReportResponseDiff=None, errors: List[GetImportationReportResponseError]=None, execution_id: str=None, importation_info: GetImportationReportResponseImportationInfo=None, product_metrics: GetImportationReportResponseProductMetrics=None, products: GetImportationReportResponseDiff=None):
        """GetImportationReportResponse - a model defined in OpenAPI

        :param categories: The categories of this GetImportationReportResponse.
        :param columns: The columns of this GetImportationReportResponse.
        :param errors: The errors of this GetImportationReportResponse.
        :param execution_id: The execution_id of this GetImportationReportResponse.
        :param importation_info: The importation_info of this GetImportationReportResponse.
        :param product_metrics: The product_metrics of this GetImportationReportResponse.
        :param products: The products of this GetImportationReportResponse.
        """
        self.openapi_types = {
            'categories': GetImportationReportResponseDiff,
            'columns': GetImportationReportResponseDiff,
            'errors': List[GetImportationReportResponseError],
            'execution_id': str,
            'importation_info': GetImportationReportResponseImportationInfo,
            'product_metrics': GetImportationReportResponseProductMetrics,
            'products': GetImportationReportResponseDiff
        }

        self.attribute_map = {
            'categories': 'categories',
            'columns': 'columns',
            'errors': 'errors',
            'execution_id': 'executionId',
            'importation_info': 'importationInfo',
            'product_metrics': 'productMetrics',
            'products': 'products'
        }

        self._categories = categories
        self._columns = columns
        self._errors = errors
        self._execution_id = execution_id
        self._importation_info = importation_info
        self._product_metrics = product_metrics
        self._products = products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationReportResponse of this GetImportationReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this GetImportationReportResponse.


        :return: The categories of this GetImportationReportResponse.
        :rtype: GetImportationReportResponseDiff
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetImportationReportResponse.


        :param categories: The categories of this GetImportationReportResponse.
        :type categories: GetImportationReportResponseDiff
        """

        self._categories = categories

    @property
    def columns(self):
        """Gets the columns of this GetImportationReportResponse.


        :return: The columns of this GetImportationReportResponse.
        :rtype: GetImportationReportResponseDiff
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this GetImportationReportResponse.


        :param columns: The columns of this GetImportationReportResponse.
        :type columns: GetImportationReportResponseDiff
        """

        self._columns = columns

    @property
    def errors(self):
        """Gets the errors of this GetImportationReportResponse.


        :return: The errors of this GetImportationReportResponse.
        :rtype: List[GetImportationReportResponseError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetImportationReportResponse.


        :param errors: The errors of this GetImportationReportResponse.
        :type errors: List[GetImportationReportResponseError]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def execution_id(self):
        """Gets the execution_id of this GetImportationReportResponse.

        The execution identifier of the catalog importation

        :return: The execution_id of this GetImportationReportResponse.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this GetImportationReportResponse.

        The execution identifier of the catalog importation

        :param execution_id: The execution_id of this GetImportationReportResponse.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")

        self._execution_id = execution_id

    @property
    def importation_info(self):
        """Gets the importation_info of this GetImportationReportResponse.


        :return: The importation_info of this GetImportationReportResponse.
        :rtype: GetImportationReportResponseImportationInfo
        """
        return self._importation_info

    @importation_info.setter
    def importation_info(self, importation_info):
        """Sets the importation_info of this GetImportationReportResponse.


        :param importation_info: The importation_info of this GetImportationReportResponse.
        :type importation_info: GetImportationReportResponseImportationInfo
        """
        if importation_info is None:
            raise ValueError("Invalid value for `importation_info`, must not be `None`")

        self._importation_info = importation_info

    @property
    def product_metrics(self):
        """Gets the product_metrics of this GetImportationReportResponse.


        :return: The product_metrics of this GetImportationReportResponse.
        :rtype: GetImportationReportResponseProductMetrics
        """
        return self._product_metrics

    @product_metrics.setter
    def product_metrics(self, product_metrics):
        """Sets the product_metrics of this GetImportationReportResponse.


        :param product_metrics: The product_metrics of this GetImportationReportResponse.
        :type product_metrics: GetImportationReportResponseProductMetrics
        """

        self._product_metrics = product_metrics

    @property
    def products(self):
        """Gets the products of this GetImportationReportResponse.


        :return: The products of this GetImportationReportResponse.
        :rtype: GetImportationReportResponseDiff
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this GetImportationReportResponse.


        :param products: The products of this GetImportationReportResponse.
        :type products: GetImportationReportResponseDiff
        """

        self._products = products
