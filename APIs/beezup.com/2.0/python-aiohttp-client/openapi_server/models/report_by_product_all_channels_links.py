# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_optimise_by_product_link import LinksOptimiseByProductLink
from openapi_server import util


class ReportByProductAllChannelsLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_product_for_all_channels: LinksOptimiseByProductLink=None, enable_product_for_all_channels: LinksOptimiseByProductLink=None):
        """ReportByProductAllChannelsLinks - a model defined in OpenAPI

        :param disable_product_for_all_channels: The disable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        :param enable_product_for_all_channels: The enable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        """
        self.openapi_types = {
            'disable_product_for_all_channels': LinksOptimiseByProductLink,
            'enable_product_for_all_channels': LinksOptimiseByProductLink
        }

        self.attribute_map = {
            'disable_product_for_all_channels': 'disableProductForAllChannels',
            'enable_product_for_all_channels': 'enableProductForAllChannels'
        }

        self._disable_product_for_all_channels = disable_product_for_all_channels
        self._enable_product_for_all_channels = enable_product_for_all_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByProductAllChannelsLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByProductAllChannelsLinks of this ReportByProductAllChannelsLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_product_for_all_channels(self):
        """Gets the disable_product_for_all_channels of this ReportByProductAllChannelsLinks.


        :return: The disable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        :rtype: LinksOptimiseByProductLink
        """
        return self._disable_product_for_all_channels

    @disable_product_for_all_channels.setter
    def disable_product_for_all_channels(self, disable_product_for_all_channels):
        """Sets the disable_product_for_all_channels of this ReportByProductAllChannelsLinks.


        :param disable_product_for_all_channels: The disable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        :type disable_product_for_all_channels: LinksOptimiseByProductLink
        """
        if disable_product_for_all_channels is None:
            raise ValueError("Invalid value for `disable_product_for_all_channels`, must not be `None`")

        self._disable_product_for_all_channels = disable_product_for_all_channels

    @property
    def enable_product_for_all_channels(self):
        """Gets the enable_product_for_all_channels of this ReportByProductAllChannelsLinks.


        :return: The enable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        :rtype: LinksOptimiseByProductLink
        """
        return self._enable_product_for_all_channels

    @enable_product_for_all_channels.setter
    def enable_product_for_all_channels(self, enable_product_for_all_channels):
        """Sets the enable_product_for_all_channels of this ReportByProductAllChannelsLinks.


        :param enable_product_for_all_channels: The enable_product_for_all_channels of this ReportByProductAllChannelsLinks.
        :type enable_product_for_all_channels: LinksOptimiseByProductLink
        """
        if enable_product_for_all_channels is None:
            raise ValueError("Invalid value for `enable_product_for_all_channels`, must not be `None`")

        self._enable_product_for_all_channels = enable_product_for_all_channels
