# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomaticTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, enabled: bool=None, marketplace_technical_code: str=None, order_status_transition_id: int=None):
        """AutomaticTransition - a model defined in OpenAPI

        :param account_id: The account_id of this AutomaticTransition.
        :param enabled: The enabled of this AutomaticTransition.
        :param marketplace_technical_code: The marketplace_technical_code of this AutomaticTransition.
        :param order_status_transition_id: The order_status_transition_id of this AutomaticTransition.
        """
        self.openapi_types = {
            'account_id': int,
            'enabled': bool,
            'marketplace_technical_code': str,
            'order_status_transition_id': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'enabled': 'enabled',
            'marketplace_technical_code': 'marketplaceTechnicalCode',
            'order_status_transition_id': 'orderStatusTransitionId'
        }

        self._account_id = account_id
        self._enabled = enabled
        self._marketplace_technical_code = marketplace_technical_code
        self._order_status_transition_id = order_status_transition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The automaticTransition of this AutomaticTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AutomaticTransition.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The account_id of this AutomaticTransition.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AutomaticTransition.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param account_id: The account_id of this AutomaticTransition.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def enabled(self):
        """Gets the enabled of this AutomaticTransition.


        :return: The enabled of this AutomaticTransition.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutomaticTransition.


        :param enabled: The enabled of this AutomaticTransition.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this AutomaticTransition.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this AutomaticTransition.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this AutomaticTransition.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this AutomaticTransition.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code

    @property
    def order_status_transition_id(self):
        """Gets the order_status_transition_id of this AutomaticTransition.


        :return: The order_status_transition_id of this AutomaticTransition.
        :rtype: int
        """
        return self._order_status_transition_id

    @order_status_transition_id.setter
    def order_status_transition_id(self, order_status_transition_id):
        """Sets the order_status_transition_id of this AutomaticTransition.


        :param order_status_transition_id: The order_status_transition_id of this AutomaticTransition.
        :type order_status_transition_id: int
        """
        if order_status_transition_id is None:
            raise ValueError("Invalid value for `order_status_transition_id`, must not be `None`")

        self._order_status_transition_id = order_status_transition_id
