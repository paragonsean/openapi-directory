# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_links import StoreLinks
from openapi_server.models.store_status import StoreStatus
from openapi_server.models.store_user_role import StoreUserRole
import re
from openapi_server import util


class Store(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_iso_code_alpha3: str=None, creation_utc_date: datetime=None, currency_code: str=None, go_version: int=None, is_test: bool=None, links: StoreLinks=None, name: str=None, offer_id: int=None, offer_name: str=None, owner_user_id: str=None, sectors: List[str]=None, share_count: int=None, status: StoreStatus=None, store_id: str=None, url: str=None, user_role: StoreUserRole=None):
        """Store - a model defined in OpenAPI

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this Store.
        :param creation_utc_date: The creation_utc_date of this Store.
        :param currency_code: The currency_code of this Store.
        :param go_version: The go_version of this Store.
        :param is_test: The is_test of this Store.
        :param links: The links of this Store.
        :param name: The name of this Store.
        :param offer_id: The offer_id of this Store.
        :param offer_name: The offer_name of this Store.
        :param owner_user_id: The owner_user_id of this Store.
        :param sectors: The sectors of this Store.
        :param share_count: The share_count of this Store.
        :param status: The status of this Store.
        :param store_id: The store_id of this Store.
        :param url: The url of this Store.
        :param user_role: The user_role of this Store.
        """
        self.openapi_types = {
            'country_iso_code_alpha3': str,
            'creation_utc_date': datetime,
            'currency_code': str,
            'go_version': int,
            'is_test': bool,
            'links': StoreLinks,
            'name': str,
            'offer_id': int,
            'offer_name': str,
            'owner_user_id': str,
            'sectors': List[str],
            'share_count': int,
            'status': StoreStatus,
            'store_id': str,
            'url': str,
            'user_role': StoreUserRole
        }

        self.attribute_map = {
            'country_iso_code_alpha3': 'countryIsoCodeAlpha3',
            'creation_utc_date': 'creationUtcDate',
            'currency_code': 'currencyCode',
            'go_version': 'goVersion',
            'is_test': 'isTest',
            'links': 'links',
            'name': 'name',
            'offer_id': 'offerId',
            'offer_name': 'offerName',
            'owner_user_id': 'ownerUserId',
            'sectors': 'sectors',
            'share_count': 'shareCount',
            'status': 'status',
            'store_id': 'storeId',
            'url': 'url',
            'user_role': 'userRole'
        }

        self._country_iso_code_alpha3 = country_iso_code_alpha3
        self._creation_utc_date = creation_utc_date
        self._currency_code = currency_code
        self._go_version = go_version
        self._is_test = is_test
        self._links = links
        self._name = name
        self._offer_id = offer_id
        self._offer_name = offer_name
        self._owner_user_id = owner_user_id
        self._sectors = sectors
        self._share_count = share_count
        self._status = status
        self._store_id = store_id
        self._url = url
        self._user_role = user_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The store of this Store.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_iso_code_alpha3(self):
        """Gets the country_iso_code_alpha3 of this Store.

        The country iso code alpha 3 based on the list of values /user/lov/StoreCountry

        :return: The country_iso_code_alpha3 of this Store.
        :rtype: str
        """
        return self._country_iso_code_alpha3

    @country_iso_code_alpha3.setter
    def country_iso_code_alpha3(self, country_iso_code_alpha3):
        """Sets the country_iso_code_alpha3 of this Store.

        The country iso code alpha 3 based on the list of values /user/lov/StoreCountry

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this Store.
        :type country_iso_code_alpha3: str
        """
        if country_iso_code_alpha3 is None:
            raise ValueError("Invalid value for `country_iso_code_alpha3`, must not be `None`")

        self._country_iso_code_alpha3 = country_iso_code_alpha3

    @property
    def creation_utc_date(self):
        """Gets the creation_utc_date of this Store.

        The creation date of the store

        :return: The creation_utc_date of this Store.
        :rtype: datetime
        """
        return self._creation_utc_date

    @creation_utc_date.setter
    def creation_utc_date(self, creation_utc_date):
        """Sets the creation_utc_date of this Store.

        The creation date of the store

        :param creation_utc_date: The creation_utc_date of this Store.
        :type creation_utc_date: datetime
        """
        if creation_utc_date is None:
            raise ValueError("Invalid value for `creation_utc_date`, must not be `None`")

        self._creation_utc_date = creation_utc_date

    @property
    def currency_code(self):
        """Gets the currency_code of this Store.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this Store.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Store.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this Store.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def go_version(self):
        """Gets the go_version of this Store.

        The version of GO to use

        :return: The go_version of this Store.
        :rtype: int
        """
        return self._go_version

    @go_version.setter
    def go_version(self, go_version):
        """Sets the go_version of this Store.

        The version of GO to use

        :param go_version: The go_version of this Store.
        :type go_version: int
        """
        if go_version is None:
            raise ValueError("Invalid value for `go_version`, must not be `None`")

        self._go_version = go_version

    @property
    def is_test(self):
        """Gets the is_test of this Store.

        Is the store a test or a production store

        :return: The is_test of this Store.
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this Store.

        Is the store a test or a production store

        :param is_test: The is_test of this Store.
        :type is_test: bool
        """
        if is_test is None:
            raise ValueError("Invalid value for `is_test`, must not be `None`")

        self._is_test = is_test

    @property
    def links(self):
        """Gets the links of this Store.


        :return: The links of this Store.
        :rtype: StoreLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Store.


        :param links: The links of this Store.
        :type links: StoreLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def name(self):
        """Gets the name of this Store.

        The store name. Must be unique.

        :return: The name of this Store.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Store.

        The store name. Must be unique.

        :param name: The name of this Store.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this Store.

        The offer id based on /offers. Not a free offer of course.

        :return: The offer_id of this Store.
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Store.

        The offer id based on /offers. Not a free offer of course.

        :param offer_id: The offer_id of this Store.
        :type offer_id: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and offer_id < 1:
            raise ValueError("Invalid value for `offer_id`, must be a value greater than or equal to `1`")

        self._offer_id = offer_id

    @property
    def offer_name(self):
        """Gets the offer_name of this Store.

        The offer Name

        :return: The offer_name of this Store.
        :rtype: str
        """
        return self._offer_name

    @offer_name.setter
    def offer_name(self, offer_name):
        """Sets the offer_name of this Store.

        The offer Name

        :param offer_name: The offer_name of this Store.
        :type offer_name: str
        """
        if offer_name is None:
            raise ValueError("Invalid value for `offer_name`, must not be `None`")

        self._offer_name = offer_name

    @property
    def owner_user_id(self):
        """Gets the owner_user_id of this Store.

        The user id of the owner of the store

        :return: The owner_user_id of this Store.
        :rtype: str
        """
        return self._owner_user_id

    @owner_user_id.setter
    def owner_user_id(self, owner_user_id):
        """Sets the owner_user_id of this Store.

        The user id of the owner of the store

        :param owner_user_id: The owner_user_id of this Store.
        :type owner_user_id: str
        """
        if owner_user_id is None:
            raise ValueError("Invalid value for `owner_user_id`, must not be `None`")

        self._owner_user_id = owner_user_id

    @property
    def sectors(self):
        """Gets the sectors of this Store.

        The store's sectors based on the list of values /user/lov/ParamSector

        :return: The sectors of this Store.
        :rtype: List[str]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """Sets the sectors of this Store.

        The store's sectors based on the list of values /user/lov/ParamSector

        :param sectors: The sectors of this Store.
        :type sectors: List[str]
        """
        if sectors is None:
            raise ValueError("Invalid value for `sectors`, must not be `None`")

        self._sectors = sectors

    @property
    def share_count(self):
        """Gets the share_count of this Store.

        The share count related to this store

        :return: The share_count of this Store.
        :rtype: int
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """Sets the share_count of this Store.

        The share count related to this store

        :param share_count: The share_count of this Store.
        :type share_count: int
        """
        if share_count is None:
            raise ValueError("Invalid value for `share_count`, must not be `None`")

        self._share_count = share_count

    @property
    def status(self):
        """Gets the status of this Store.


        :return: The status of this Store.
        :rtype: StoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Store.


        :param status: The status of this Store.
        :type status: StoreStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def store_id(self):
        """Gets the store_id of this Store.

        The store identifier

        :return: The store_id of this Store.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this Store.

        The store identifier

        :param store_id: The store_id of this Store.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def url(self):
        """Gets the url of this Store.

        The url of your store

        :return: The url of this Store.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Store.

        The url of your store

        :param url: The url of this Store.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', url):
            raise ValueError("Invalid value for `url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._url = url

    @property
    def user_role(self):
        """Gets the user_role of this Store.


        :return: The user_role of this Store.
        :rtype: StoreUserRole
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this Store.


        :param user_role: The user_role of this Store.
        :type user_role: StoreUserRole
        """
        if user_role is None:
            raise ValueError("Invalid value for `user_role`, must not be `None`")

        self._user_role = user_role
