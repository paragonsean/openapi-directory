# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_mapping_status import CategoryMappingStatus
from openapi_server import util


class CategoryMappingState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: CategoryMappingStatus=None, uncategorized_product_count: int=None, without_category_cost_product_count: int=None):
        """CategoryMappingState - a model defined in OpenAPI

        :param status: The status of this CategoryMappingState.
        :param uncategorized_product_count: The uncategorized_product_count of this CategoryMappingState.
        :param without_category_cost_product_count: The without_category_cost_product_count of this CategoryMappingState.
        """
        self.openapi_types = {
            'status': CategoryMappingStatus,
            'uncategorized_product_count': int,
            'without_category_cost_product_count': int
        }

        self.attribute_map = {
            'status': 'status',
            'uncategorized_product_count': 'uncategorizedProductCount',
            'without_category_cost_product_count': 'withoutCategoryCostProductCount'
        }

        self._status = status
        self._uncategorized_product_count = uncategorized_product_count
        self._without_category_cost_product_count = without_category_cost_product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryMappingState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The categoryMappingState of this CategoryMappingState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this CategoryMappingState.


        :return: The status of this CategoryMappingState.
        :rtype: CategoryMappingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CategoryMappingState.


        :param status: The status of this CategoryMappingState.
        :type status: CategoryMappingStatus
        """

        self._status = status

    @property
    def uncategorized_product_count(self):
        """Gets the uncategorized_product_count of this CategoryMappingState.

        Indicates the uncategorized product count

        :return: The uncategorized_product_count of this CategoryMappingState.
        :rtype: int
        """
        return self._uncategorized_product_count

    @uncategorized_product_count.setter
    def uncategorized_product_count(self, uncategorized_product_count):
        """Sets the uncategorized_product_count of this CategoryMappingState.

        Indicates the uncategorized product count

        :param uncategorized_product_count: The uncategorized_product_count of this CategoryMappingState.
        :type uncategorized_product_count: int
        """

        self._uncategorized_product_count = uncategorized_product_count

    @property
    def without_category_cost_product_count(self):
        """Gets the without_category_cost_product_count of this CategoryMappingState.

        Indicates the count of products without cost defined

        :return: The without_category_cost_product_count of this CategoryMappingState.
        :rtype: int
        """
        return self._without_category_cost_product_count

    @without_category_cost_product_count.setter
    def without_category_cost_product_count(self, without_category_cost_product_count):
        """Sets the without_category_cost_product_count of this CategoryMappingState.

        Indicates the count of products without cost defined

        :param without_category_cost_product_count: The without_category_cost_product_count of this CategoryMappingState.
        :type without_category_cost_product_count: int
        """

        self._without_category_cost_product_count = without_category_cost_product_count
