# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_export_cache_info import ChannelCatalogExportCacheInfo
from openapi_server.models.channel_catalog_export_cache_info_response_links import ChannelCatalogExportCacheInfoResponseLinks
from openapi_server import util


class ChannelCatalogExportCacheInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_info: ChannelCatalogExportCacheInfo=None, links: ChannelCatalogExportCacheInfoResponseLinks=None):
        """ChannelCatalogExportCacheInfoResponse - a model defined in OpenAPI

        :param cache_info: The cache_info of this ChannelCatalogExportCacheInfoResponse.
        :param links: The links of this ChannelCatalogExportCacheInfoResponse.
        """
        self.openapi_types = {
            'cache_info': ChannelCatalogExportCacheInfo,
            'links': ChannelCatalogExportCacheInfoResponseLinks
        }

        self.attribute_map = {
            'cache_info': 'cacheInfo',
            'links': 'links'
        }

        self._cache_info = cache_info
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogExportCacheInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogExportCacheInfoResponse of this ChannelCatalogExportCacheInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_info(self):
        """Gets the cache_info of this ChannelCatalogExportCacheInfoResponse.


        :return: The cache_info of this ChannelCatalogExportCacheInfoResponse.
        :rtype: ChannelCatalogExportCacheInfo
        """
        return self._cache_info

    @cache_info.setter
    def cache_info(self, cache_info):
        """Sets the cache_info of this ChannelCatalogExportCacheInfoResponse.


        :param cache_info: The cache_info of this ChannelCatalogExportCacheInfoResponse.
        :type cache_info: ChannelCatalogExportCacheInfo
        """
        if cache_info is None:
            raise ValueError("Invalid value for `cache_info`, must not be `None`")

        self._cache_info = cache_info

    @property
    def links(self):
        """Gets the links of this ChannelCatalogExportCacheInfoResponse.


        :return: The links of this ChannelCatalogExportCacheInfoResponse.
        :rtype: ChannelCatalogExportCacheInfoResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogExportCacheInfoResponse.


        :param links: The links of this ChannelCatalogExportCacheInfoResponse.
        :type links: ChannelCatalogExportCacheInfoResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
