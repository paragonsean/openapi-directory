# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bonus_info import BonusInfo
from openapi_server import util


class ContractBonusInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bonuses: List[BonusInfo]=None):
        """ContractBonusInfo - a model defined in OpenAPI

        :param bonuses: The bonuses of this ContractBonusInfo.
        """
        self.openapi_types = {
            'bonuses': List[BonusInfo]
        }

        self.attribute_map = {
            'bonuses': 'bonuses'
        }

        self._bonuses = bonuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractBonusInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contractBonusInfo of this ContractBonusInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bonuses(self):
        """Gets the bonuses of this ContractBonusInfo.


        :return: The bonuses of this ContractBonusInfo.
        :rtype: List[BonusInfo]
        """
        return self._bonuses

    @bonuses.setter
    def bonuses(self, bonuses):
        """Sets the bonuses of this ContractBonusInfo.


        :param bonuses: The bonuses of this ContractBonusInfo.
        :type bonuses: List[BonusInfo]
        """
        if bonuses is None:
            raise ValueError("Invalid value for `bonuses`, must not be `None`")

        self._bonuses = bonuses
