# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_configure_automatic_transitions_link import LinksConfigureAutomaticTransitionsLink
from openapi_server import util


class AutomaticTransitionInfoLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configure: LinksConfigureAutomaticTransitionsLink=None):
        """AutomaticTransitionInfoLinks - a model defined in OpenAPI

        :param configure: The configure of this AutomaticTransitionInfoLinks.
        """
        self.openapi_types = {
            'configure': LinksConfigureAutomaticTransitionsLink
        }

        self.attribute_map = {
            'configure': 'configure'
        }

        self._configure = configure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticTransitionInfoLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The automaticTransitionInfoLinks of this AutomaticTransitionInfoLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configure(self):
        """Gets the configure of this AutomaticTransitionInfoLinks.


        :return: The configure of this AutomaticTransitionInfoLinks.
        :rtype: LinksConfigureAutomaticTransitionsLink
        """
        return self._configure

    @configure.setter
    def configure(self, configure):
        """Sets the configure of this AutomaticTransitionInfoLinks.


        :param configure: The configure of this AutomaticTransitionInfoLinks.
        :type configure: LinksConfigureAutomaticTransitionsLink
        """
        if configure is None:
            raise ValueError("Invalid value for `configure`, must not be `None`")

        self._configure = configure
