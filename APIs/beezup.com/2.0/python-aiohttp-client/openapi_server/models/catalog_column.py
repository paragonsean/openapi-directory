# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_column_links import CatalogColumnLinks
from openapi_server.models.column_configuration import ColumnConfiguration
from openapi_server.models.duplicate_product_value_configuration import DuplicateProductValueConfiguration
from openapi_server import util


class CatalogColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_column_name: str=None, configuration: ColumnConfiguration=None, duplicate_product_value_configuration: DuplicateProductValueConfiguration=None, id: str=None, ignored: bool=False, links: CatalogColumnLinks=None, user_colum_name: str=None):
        """CatalogColumn - a model defined in OpenAPI

        :param catalog_column_name: The catalog_column_name of this CatalogColumn.
        :param configuration: The configuration of this CatalogColumn.
        :param duplicate_product_value_configuration: The duplicate_product_value_configuration of this CatalogColumn.
        :param id: The id of this CatalogColumn.
        :param ignored: The ignored of this CatalogColumn.
        :param links: The links of this CatalogColumn.
        :param user_colum_name: The user_colum_name of this CatalogColumn.
        """
        self.openapi_types = {
            'catalog_column_name': str,
            'configuration': ColumnConfiguration,
            'duplicate_product_value_configuration': DuplicateProductValueConfiguration,
            'id': str,
            'ignored': bool,
            'links': CatalogColumnLinks,
            'user_colum_name': str
        }

        self.attribute_map = {
            'catalog_column_name': 'catalogColumnName',
            'configuration': 'configuration',
            'duplicate_product_value_configuration': 'duplicateProductValueConfiguration',
            'id': 'id',
            'ignored': 'ignored',
            'links': 'links',
            'user_colum_name': 'userColumName'
        }

        self._catalog_column_name = catalog_column_name
        self._configuration = configuration
        self._duplicate_product_value_configuration = duplicate_product_value_configuration
        self._id = id
        self._ignored = ignored
        self._links = links
        self._user_colum_name = user_colum_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogColumn of this CatalogColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_column_name(self):
        """Gets the catalog_column_name of this CatalogColumn.

        The catalog column name

        :return: The catalog_column_name of this CatalogColumn.
        :rtype: str
        """
        return self._catalog_column_name

    @catalog_column_name.setter
    def catalog_column_name(self, catalog_column_name):
        """Sets the catalog_column_name of this CatalogColumn.

        The catalog column name

        :param catalog_column_name: The catalog_column_name of this CatalogColumn.
        :type catalog_column_name: str
        """
        if catalog_column_name is None:
            raise ValueError("Invalid value for `catalog_column_name`, must not be `None`")

        self._catalog_column_name = catalog_column_name

    @property
    def configuration(self):
        """Gets the configuration of this CatalogColumn.


        :return: The configuration of this CatalogColumn.
        :rtype: ColumnConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CatalogColumn.


        :param configuration: The configuration of this CatalogColumn.
        :type configuration: ColumnConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def duplicate_product_value_configuration(self):
        """Gets the duplicate_product_value_configuration of this CatalogColumn.


        :return: The duplicate_product_value_configuration of this CatalogColumn.
        :rtype: DuplicateProductValueConfiguration
        """
        return self._duplicate_product_value_configuration

    @duplicate_product_value_configuration.setter
    def duplicate_product_value_configuration(self, duplicate_product_value_configuration):
        """Sets the duplicate_product_value_configuration of this CatalogColumn.


        :param duplicate_product_value_configuration: The duplicate_product_value_configuration of this CatalogColumn.
        :type duplicate_product_value_configuration: DuplicateProductValueConfiguration
        """

        self._duplicate_product_value_configuration = duplicate_product_value_configuration

    @property
    def id(self):
        """Gets the id of this CatalogColumn.

        The catalog column identifier

        :return: The id of this CatalogColumn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogColumn.

        The catalog column identifier

        :param id: The id of this CatalogColumn.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this CatalogColumn.

        IF true, the product values of this column will be not taken in account during the importation process

        :return: The ignored of this CatalogColumn.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this CatalogColumn.

        IF true, the product values of this column will be not taken in account during the importation process

        :param ignored: The ignored of this CatalogColumn.
        :type ignored: bool
        """

        self._ignored = ignored

    @property
    def links(self):
        """Gets the links of this CatalogColumn.


        :return: The links of this CatalogColumn.
        :rtype: CatalogColumnLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CatalogColumn.


        :param links: The links of this CatalogColumn.
        :type links: CatalogColumnLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def user_colum_name(self):
        """Gets the user_colum_name of this CatalogColumn.

        Column named by the user

        :return: The user_colum_name of this CatalogColumn.
        :rtype: str
        """
        return self._user_colum_name

    @user_colum_name.setter
    def user_colum_name(self, user_colum_name):
        """Sets the user_colum_name of this CatalogColumn.

        Column named by the user

        :param user_colum_name: The user_colum_name of this CatalogColumn.
        :type user_colum_name: str
        """
        if user_colum_name is None:
            raise ValueError("Invalid value for `user_colum_name`, must not be `None`")

        self._user_colum_name = user_colum_name
