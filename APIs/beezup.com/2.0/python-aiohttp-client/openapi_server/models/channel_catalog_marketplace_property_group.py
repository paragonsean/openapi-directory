# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_marketplace_property import ChannelCatalogMarketplaceProperty
from openapi_server import util


class ChannelCatalogMarketplacePropertyGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, position: int=None, properties: List[ChannelCatalogMarketplaceProperty]=None):
        """ChannelCatalogMarketplacePropertyGroup - a model defined in OpenAPI

        :param name: The name of this ChannelCatalogMarketplacePropertyGroup.
        :param position: The position of this ChannelCatalogMarketplacePropertyGroup.
        :param properties: The properties of this ChannelCatalogMarketplacePropertyGroup.
        """
        self.openapi_types = {
            'name': str,
            'position': int,
            'properties': List[ChannelCatalogMarketplaceProperty]
        }

        self.attribute_map = {
            'name': 'name',
            'position': 'position',
            'properties': 'properties'
        }

        self._name = name
        self._position = position
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogMarketplacePropertyGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogMarketplacePropertyGroup of this ChannelCatalogMarketplacePropertyGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChannelCatalogMarketplacePropertyGroup.

        Indicate the code identifier of the group

        :return: The name of this ChannelCatalogMarketplacePropertyGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelCatalogMarketplacePropertyGroup.

        Indicate the code identifier of the group

        :param name: The name of this ChannelCatalogMarketplacePropertyGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this ChannelCatalogMarketplacePropertyGroup.

        Indicate the position of the group

        :return: The position of this ChannelCatalogMarketplacePropertyGroup.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ChannelCatalogMarketplacePropertyGroup.

        Indicate the position of the group

        :param position: The position of this ChannelCatalogMarketplacePropertyGroup.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 1:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")

        self._position = position

    @property
    def properties(self):
        """Gets the properties of this ChannelCatalogMarketplacePropertyGroup.


        :return: The properties of this ChannelCatalogMarketplacePropertyGroup.
        :rtype: List[ChannelCatalogMarketplaceProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ChannelCatalogMarketplacePropertyGroup.


        :param properties: The properties of this ChannelCatalogMarketplacePropertyGroup.
        :type properties: List[ChannelCatalogMarketplaceProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
