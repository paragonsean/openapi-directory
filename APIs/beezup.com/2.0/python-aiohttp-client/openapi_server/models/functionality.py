# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Functionality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, order: int=None):
        """Functionality - a model defined in OpenAPI

        :param code: The code of this Functionality.
        :param order: The order of this Functionality.
        """
        self.openapi_types = {
            'code': str,
            'order': int
        }

        self.attribute_map = {
            'code': 'code',
            'order': 'order'
        }

        self._code = code
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Functionality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The functionality of this Functionality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Functionality.

        The functionality code

        :return: The code of this Functionality.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Functionality.

        The functionality code

        :param code: The code of this Functionality.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def order(self):
        """Gets the order of this Functionality.

        UI purpose: Indicate the position of the functionality

        :return: The order of this Functionality.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Functionality.

        UI purpose: Indicate the position of the functionality

        :param order: The order of this Functionality.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
