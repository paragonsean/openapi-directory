# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_create_rule_link import LinksCreateRuleLink
from openapi_server.models.links_get_rules_executions_link import LinksGetRulesExecutionsLink
from openapi_server.models.links_get_rules_link import LinksGetRulesLink
from openapi_server.models.links_run_rules_link import LinksRunRulesLink
from openapi_server import util


class RuleListLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create: LinksCreateRuleLink=None, history: LinksGetRulesExecutionsLink=None, run: LinksRunRulesLink=None, _self: LinksGetRulesLink=None):
        """RuleListLinks - a model defined in OpenAPI

        :param create: The create of this RuleListLinks.
        :param history: The history of this RuleListLinks.
        :param run: The run of this RuleListLinks.
        :param _self: The _self of this RuleListLinks.
        """
        self.openapi_types = {
            'create': LinksCreateRuleLink,
            'history': LinksGetRulesExecutionsLink,
            'run': LinksRunRulesLink,
            '_self': LinksGetRulesLink
        }

        self.attribute_map = {
            'create': 'create',
            'history': 'history',
            'run': 'run',
            '_self': 'self'
        }

        self._create = create
        self._history = history
        self._run = run
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleListLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ruleListLinks of this RuleListLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create(self):
        """Gets the create of this RuleListLinks.


        :return: The create of this RuleListLinks.
        :rtype: LinksCreateRuleLink
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this RuleListLinks.


        :param create: The create of this RuleListLinks.
        :type create: LinksCreateRuleLink
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")

        self._create = create

    @property
    def history(self):
        """Gets the history of this RuleListLinks.


        :return: The history of this RuleListLinks.
        :rtype: LinksGetRulesExecutionsLink
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this RuleListLinks.


        :param history: The history of this RuleListLinks.
        :type history: LinksGetRulesExecutionsLink
        """
        if history is None:
            raise ValueError("Invalid value for `history`, must not be `None`")

        self._history = history

    @property
    def run(self):
        """Gets the run of this RuleListLinks.


        :return: The run of this RuleListLinks.
        :rtype: LinksRunRulesLink
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this RuleListLinks.


        :param run: The run of this RuleListLinks.
        :type run: LinksRunRulesLink
        """
        if run is None:
            raise ValueError("Invalid value for `run`, must not be `None`")

        self._run = run

    @property
    def _self(self):
        """Gets the _self of this RuleListLinks.


        :return: The _self of this RuleListLinks.
        :rtype: LinksGetRulesLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this RuleListLinks.


        :param _self: The _self of this RuleListLinks.
        :type _self: LinksGetRulesLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
