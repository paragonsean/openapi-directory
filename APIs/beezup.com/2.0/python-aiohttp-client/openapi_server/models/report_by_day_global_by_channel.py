# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_channel_basic_info import BeezUPCommonChannelBasicInfo
from openapi_server import util


class ReportByDayGlobalByChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, performance_indicator: float=None, channel: BeezUPCommonChannelBasicInfo=None):
        """ReportByDayGlobalByChannel - a model defined in OpenAPI

        :param performance_indicator: The performance_indicator of this ReportByDayGlobalByChannel.
        :param channel: The channel of this ReportByDayGlobalByChannel.
        """
        self.openapi_types = {
            'performance_indicator': float,
            'channel': BeezUPCommonChannelBasicInfo
        }

        self.attribute_map = {
            'performance_indicator': 'performanceIndicator',
            'channel': 'channel'
        }

        self._performance_indicator = performance_indicator
        self._channel = channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByDayGlobalByChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByDayGlobalByChannel of this ReportByDayGlobalByChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def performance_indicator(self):
        """Gets the performance_indicator of this ReportByDayGlobalByChannel.

        Indicates the global performance indicator

        :return: The performance_indicator of this ReportByDayGlobalByChannel.
        :rtype: float
        """
        return self._performance_indicator

    @performance_indicator.setter
    def performance_indicator(self, performance_indicator):
        """Sets the performance_indicator of this ReportByDayGlobalByChannel.

        Indicates the global performance indicator

        :param performance_indicator: The performance_indicator of this ReportByDayGlobalByChannel.
        :type performance_indicator: float
        """
        if performance_indicator is None:
            raise ValueError("Invalid value for `performance_indicator`, must not be `None`")

        self._performance_indicator = performance_indicator

    @property
    def channel(self):
        """Gets the channel of this ReportByDayGlobalByChannel.


        :return: The channel of this ReportByDayGlobalByChannel.
        :rtype: BeezUPCommonChannelBasicInfo
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ReportByDayGlobalByChannel.


        :param channel: The channel of this ReportByDayGlobalByChannel.
        :type channel: BeezUPCommonChannelBasicInfo
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel
