# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_catalog_change_custom_column_expression_link import LinksCatalogChangeCustomColumnExpressionLink
from openapi_server.models.links_catalog_change_custom_column_user_name_link import LinksCatalogChangeCustomColumnUserNameLink
from openapi_server.models.links_catalog_delete_custom_column_link import LinksCatalogDeleteCustomColumnLink
from openapi_server.models.links_catalog_get_custom_column_expression_link import LinksCatalogGetCustomColumnExpressionLink
from openapi_server.models.links_catalog_save_custom_column_link import LinksCatalogSaveCustomColumnLink
from openapi_server import util


class CustomColumnLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: LinksCatalogDeleteCustomColumnLink=None, expression: LinksCatalogGetCustomColumnExpressionLink=None, rename: LinksCatalogChangeCustomColumnUserNameLink=None, save: LinksCatalogSaveCustomColumnLink=None, save_expression: LinksCatalogChangeCustomColumnExpressionLink=None):
        """CustomColumnLinks - a model defined in OpenAPI

        :param delete: The delete of this CustomColumnLinks.
        :param expression: The expression of this CustomColumnLinks.
        :param rename: The rename of this CustomColumnLinks.
        :param save: The save of this CustomColumnLinks.
        :param save_expression: The save_expression of this CustomColumnLinks.
        """
        self.openapi_types = {
            'delete': LinksCatalogDeleteCustomColumnLink,
            'expression': LinksCatalogGetCustomColumnExpressionLink,
            'rename': LinksCatalogChangeCustomColumnUserNameLink,
            'save': LinksCatalogSaveCustomColumnLink,
            'save_expression': LinksCatalogChangeCustomColumnExpressionLink
        }

        self.attribute_map = {
            'delete': 'delete',
            'expression': 'expression',
            'rename': 'rename',
            'save': 'save',
            'save_expression': 'saveExpression'
        }

        self._delete = delete
        self._expression = expression
        self._rename = rename
        self._save = save
        self._save_expression = save_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomColumnLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customColumnLinks of this CustomColumnLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this CustomColumnLinks.


        :return: The delete of this CustomColumnLinks.
        :rtype: LinksCatalogDeleteCustomColumnLink
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CustomColumnLinks.


        :param delete: The delete of this CustomColumnLinks.
        :type delete: LinksCatalogDeleteCustomColumnLink
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")

        self._delete = delete

    @property
    def expression(self):
        """Gets the expression of this CustomColumnLinks.


        :return: The expression of this CustomColumnLinks.
        :rtype: LinksCatalogGetCustomColumnExpressionLink
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this CustomColumnLinks.


        :param expression: The expression of this CustomColumnLinks.
        :type expression: LinksCatalogGetCustomColumnExpressionLink
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def rename(self):
        """Gets the rename of this CustomColumnLinks.


        :return: The rename of this CustomColumnLinks.
        :rtype: LinksCatalogChangeCustomColumnUserNameLink
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this CustomColumnLinks.


        :param rename: The rename of this CustomColumnLinks.
        :type rename: LinksCatalogChangeCustomColumnUserNameLink
        """
        if rename is None:
            raise ValueError("Invalid value for `rename`, must not be `None`")

        self._rename = rename

    @property
    def save(self):
        """Gets the save of this CustomColumnLinks.


        :return: The save of this CustomColumnLinks.
        :rtype: LinksCatalogSaveCustomColumnLink
        """
        return self._save

    @save.setter
    def save(self, save):
        """Sets the save of this CustomColumnLinks.


        :param save: The save of this CustomColumnLinks.
        :type save: LinksCatalogSaveCustomColumnLink
        """
        if save is None:
            raise ValueError("Invalid value for `save`, must not be `None`")

        self._save = save

    @property
    def save_expression(self):
        """Gets the save_expression of this CustomColumnLinks.


        :return: The save_expression of this CustomColumnLinks.
        :rtype: LinksCatalogChangeCustomColumnExpressionLink
        """
        return self._save_expression

    @save_expression.setter
    def save_expression(self, save_expression):
        """Sets the save_expression of this CustomColumnLinks.


        :param save_expression: The save_expression of this CustomColumnLinks.
        :type save_expression: LinksCatalogChangeCustomColumnExpressionLink
        """
        if save_expression is None:
            raise ValueError("Invalid value for `save_expression`, must not be `None`")

        self._save_expression = save_expression
