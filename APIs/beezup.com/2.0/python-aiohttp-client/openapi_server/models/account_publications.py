# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_publications_links import AccountPublicationsLinks
from openapi_server.models.publication_reporting import PublicationReporting
from openapi_server import util


class AccountPublications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AccountPublicationsLinks=None, publications: List[PublicationReporting]=None):
        """AccountPublications - a model defined in OpenAPI

        :param links: The links of this AccountPublications.
        :param publications: The publications of this AccountPublications.
        """
        self.openapi_types = {
            'links': AccountPublicationsLinks,
            'publications': List[PublicationReporting]
        }

        self.attribute_map = {
            'links': 'links',
            'publications': 'publications'
        }

        self._links = links
        self._publications = publications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountPublications':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountPublications of this AccountPublications.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AccountPublications.


        :return: The links of this AccountPublications.
        :rtype: AccountPublicationsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountPublications.


        :param links: The links of this AccountPublications.
        :type links: AccountPublicationsLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def publications(self):
        """Gets the publications of this AccountPublications.

        The recent publications for the requested account

        :return: The publications of this AccountPublications.
        :rtype: List[PublicationReporting]
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this AccountPublications.

        The recent publications for the requested account

        :param publications: The publications of this AccountPublications.
        :type publications: List[PublicationReporting]
        """
        if publications is None:
            raise ValueError("Invalid value for `publications`, must not be `None`")

        self._publications = publications
