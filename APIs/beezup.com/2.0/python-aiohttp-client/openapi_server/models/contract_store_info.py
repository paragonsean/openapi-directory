# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContractStoreInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_store_price: float=None, max_store_count: int=None, min_store_count: int=None, owned_store_count: int=None, store_count: int=None, store_included: int=None):
        """ContractStoreInfo - a model defined in OpenAPI

        :param additional_store_price: The additional_store_price of this ContractStoreInfo.
        :param max_store_count: The max_store_count of this ContractStoreInfo.
        :param min_store_count: The min_store_count of this ContractStoreInfo.
        :param owned_store_count: The owned_store_count of this ContractStoreInfo.
        :param store_count: The store_count of this ContractStoreInfo.
        :param store_included: The store_included of this ContractStoreInfo.
        """
        self.openapi_types = {
            'additional_store_price': float,
            'max_store_count': int,
            'min_store_count': int,
            'owned_store_count': int,
            'store_count': int,
            'store_included': int
        }

        self.attribute_map = {
            'additional_store_price': 'additionalStorePrice',
            'max_store_count': 'maxStoreCount',
            'min_store_count': 'minStoreCount',
            'owned_store_count': 'ownedStoreCount',
            'store_count': 'storeCount',
            'store_included': 'storeIncluded'
        }

        self._additional_store_price = additional_store_price
        self._max_store_count = max_store_count
        self._min_store_count = min_store_count
        self._owned_store_count = owned_store_count
        self._store_count = store_count
        self._store_included = store_included

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractStoreInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contractStoreInfo of this ContractStoreInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_store_price(self):
        """Gets the additional_store_price of this ContractStoreInfo.

        The additional store price.

        :return: The additional_store_price of this ContractStoreInfo.
        :rtype: float
        """
        return self._additional_store_price

    @additional_store_price.setter
    def additional_store_price(self, additional_store_price):
        """Sets the additional_store_price of this ContractStoreInfo.

        The additional store price.

        :param additional_store_price: The additional_store_price of this ContractStoreInfo.
        :type additional_store_price: float
        """

        self._additional_store_price = additional_store_price

    @property
    def max_store_count(self):
        """Gets the max_store_count of this ContractStoreInfo.

        The maximum store count related to the offer.

        :return: The max_store_count of this ContractStoreInfo.
        :rtype: int
        """
        return self._max_store_count

    @max_store_count.setter
    def max_store_count(self, max_store_count):
        """Sets the max_store_count of this ContractStoreInfo.

        The maximum store count related to the offer.

        :param max_store_count: The max_store_count of this ContractStoreInfo.
        :type max_store_count: int
        """

        self._max_store_count = max_store_count

    @property
    def min_store_count(self):
        """Gets the min_store_count of this ContractStoreInfo.

        The minimum store count related to the offer.

        :return: The min_store_count of this ContractStoreInfo.
        :rtype: int
        """
        return self._min_store_count

    @min_store_count.setter
    def min_store_count(self, min_store_count):
        """Sets the min_store_count of this ContractStoreInfo.

        The minimum store count related to the offer.

        :param min_store_count: The min_store_count of this ContractStoreInfo.
        :type min_store_count: int
        """

        self._min_store_count = min_store_count

    @property
    def owned_store_count(self):
        """Gets the owned_store_count of this ContractStoreInfo.

        The owned store count.

        :return: The owned_store_count of this ContractStoreInfo.
        :rtype: int
        """
        return self._owned_store_count

    @owned_store_count.setter
    def owned_store_count(self, owned_store_count):
        """Sets the owned_store_count of this ContractStoreInfo.

        The owned store count.

        :param owned_store_count: The owned_store_count of this ContractStoreInfo.
        :type owned_store_count: int
        """

        self._owned_store_count = owned_store_count

    @property
    def store_count(self):
        """Gets the store_count of this ContractStoreInfo.

        The store count you want to have in your contract.

        :return: The store_count of this ContractStoreInfo.
        :rtype: int
        """
        return self._store_count

    @store_count.setter
    def store_count(self, store_count):
        """Sets the store_count of this ContractStoreInfo.

        The store count you want to have in your contract.

        :param store_count: The store_count of this ContractStoreInfo.
        :type store_count: int
        """
        if store_count is not None and store_count < 1:
            raise ValueError("Invalid value for `store_count`, must be a value greater than or equal to `1`")

        self._store_count = store_count

    @property
    def store_included(self):
        """Gets the store_included of this ContractStoreInfo.

        The store count included in the offer.

        :return: The store_included of this ContractStoreInfo.
        :rtype: int
        """
        return self._store_included

    @store_included.setter
    def store_included(self, store_included):
        """Sets the store_included of this ContractStoreInfo.

        The store count included in the offer.

        :param store_included: The store_included of this ContractStoreInfo.
        :type store_included: int
        """

        self._store_included = store_included
