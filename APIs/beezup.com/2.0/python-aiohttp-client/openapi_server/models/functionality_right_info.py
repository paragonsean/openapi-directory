# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FunctionalityRightInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functionality_code: str=None, max_value_interger: int=None, unlimited: bool=None):
        """FunctionalityRightInfo - a model defined in OpenAPI

        :param functionality_code: The functionality_code of this FunctionalityRightInfo.
        :param max_value_interger: The max_value_interger of this FunctionalityRightInfo.
        :param unlimited: The unlimited of this FunctionalityRightInfo.
        """
        self.openapi_types = {
            'functionality_code': str,
            'max_value_interger': int,
            'unlimited': bool
        }

        self.attribute_map = {
            'functionality_code': 'functionalityCode',
            'max_value_interger': 'maxValueInterger',
            'unlimited': 'unlimited'
        }

        self._functionality_code = functionality_code
        self._max_value_interger = max_value_interger
        self._unlimited = unlimited

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionalityRightInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The functionalityRightInfo of this FunctionalityRightInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functionality_code(self):
        """Gets the functionality_code of this FunctionalityRightInfo.

        The functionality code

        :return: The functionality_code of this FunctionalityRightInfo.
        :rtype: str
        """
        return self._functionality_code

    @functionality_code.setter
    def functionality_code(self, functionality_code):
        """Sets the functionality_code of this FunctionalityRightInfo.

        The functionality code

        :param functionality_code: The functionality_code of this FunctionalityRightInfo.
        :type functionality_code: str
        """
        if functionality_code is None:
            raise ValueError("Invalid value for `functionality_code`, must not be `None`")

        self._functionality_code = functionality_code

    @property
    def max_value_interger(self):
        """Gets the max_value_interger of this FunctionalityRightInfo.

        The max value for this functionality code considering your rights

        :return: The max_value_interger of this FunctionalityRightInfo.
        :rtype: int
        """
        return self._max_value_interger

    @max_value_interger.setter
    def max_value_interger(self, max_value_interger):
        """Sets the max_value_interger of this FunctionalityRightInfo.

        The max value for this functionality code considering your rights

        :param max_value_interger: The max_value_interger of this FunctionalityRightInfo.
        :type max_value_interger: int
        """

        self._max_value_interger = max_value_interger

    @property
    def unlimited(self):
        """Gets the unlimited of this FunctionalityRightInfo.

        If you can use this functionality unlimitedly

        :return: The unlimited of this FunctionalityRightInfo.
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this FunctionalityRightInfo.

        If you can use this functionality unlimitedly

        :param unlimited: The unlimited of this FunctionalityRightInfo.
        :type unlimited: bool
        """

        self._unlimited = unlimited
