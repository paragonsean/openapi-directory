# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomColumnRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_group_name: str=None, encrypted_blockly_expression: str=None, encrypted_expression: str=None, user_column_name: str=None):
        """CreateCustomColumnRequest - a model defined in OpenAPI

        :param display_group_name: The display_group_name of this CreateCustomColumnRequest.
        :param encrypted_blockly_expression: The encrypted_blockly_expression of this CreateCustomColumnRequest.
        :param encrypted_expression: The encrypted_expression of this CreateCustomColumnRequest.
        :param user_column_name: The user_column_name of this CreateCustomColumnRequest.
        """
        self.openapi_types = {
            'display_group_name': str,
            'encrypted_blockly_expression': str,
            'encrypted_expression': str,
            'user_column_name': str
        }

        self.attribute_map = {
            'display_group_name': 'displayGroupName',
            'encrypted_blockly_expression': 'encryptedBlocklyExpression',
            'encrypted_expression': 'encryptedExpression',
            'user_column_name': 'userColumnName'
        }

        self._display_group_name = display_group_name
        self._encrypted_blockly_expression = encrypted_blockly_expression
        self._encrypted_expression = encrypted_expression
        self._user_column_name = user_column_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomColumnRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createCustomColumnRequest of this CreateCustomColumnRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_group_name(self):
        """Gets the display_group_name of this CreateCustomColumnRequest.

        Indicate the display group name where the column must be putted

        :return: The display_group_name of this CreateCustomColumnRequest.
        :rtype: str
        """
        return self._display_group_name

    @display_group_name.setter
    def display_group_name(self, display_group_name):
        """Sets the display_group_name of this CreateCustomColumnRequest.

        Indicate the display group name where the column must be putted

        :param display_group_name: The display_group_name of this CreateCustomColumnRequest.
        :type display_group_name: str
        """
        if display_group_name is None:
            raise ValueError("Invalid value for `display_group_name`, must not be `None`")

        self._display_group_name = display_group_name

    @property
    def encrypted_blockly_expression(self):
        """Gets the encrypted_blockly_expression of this CreateCustomColumnRequest.

        The encrypted XML Blockly representation of the expression

        :return: The encrypted_blockly_expression of this CreateCustomColumnRequest.
        :rtype: str
        """
        return self._encrypted_blockly_expression

    @encrypted_blockly_expression.setter
    def encrypted_blockly_expression(self, encrypted_blockly_expression):
        """Sets the encrypted_blockly_expression of this CreateCustomColumnRequest.

        The encrypted XML Blockly representation of the expression

        :param encrypted_blockly_expression: The encrypted_blockly_expression of this CreateCustomColumnRequest.
        :type encrypted_blockly_expression: str
        """
        if encrypted_blockly_expression is None:
            raise ValueError("Invalid value for `encrypted_blockly_expression`, must not be `None`")

        self._encrypted_blockly_expression = encrypted_blockly_expression

    @property
    def encrypted_expression(self):
        """Gets the encrypted_expression of this CreateCustomColumnRequest.

        The encrypted excel expression of the column

        :return: The encrypted_expression of this CreateCustomColumnRequest.
        :rtype: str
        """
        return self._encrypted_expression

    @encrypted_expression.setter
    def encrypted_expression(self, encrypted_expression):
        """Sets the encrypted_expression of this CreateCustomColumnRequest.

        The encrypted excel expression of the column

        :param encrypted_expression: The encrypted_expression of this CreateCustomColumnRequest.
        :type encrypted_expression: str
        """
        if encrypted_expression is None:
            raise ValueError("Invalid value for `encrypted_expression`, must not be `None`")

        self._encrypted_expression = encrypted_expression

    @property
    def user_column_name(self):
        """Gets the user_column_name of this CreateCustomColumnRequest.

        Column named by the user

        :return: The user_column_name of this CreateCustomColumnRequest.
        :rtype: str
        """
        return self._user_column_name

    @user_column_name.setter
    def user_column_name(self, user_column_name):
        """Sets the user_column_name of this CreateCustomColumnRequest.

        Column named by the user

        :param user_column_name: The user_column_name of this CreateCustomColumnRequest.
        :type user_column_name: str
        """
        if user_column_name is None:
            raise ValueError("Invalid value for `user_column_name`, must not be `None`")

        self._user_column_name = user_column_name
