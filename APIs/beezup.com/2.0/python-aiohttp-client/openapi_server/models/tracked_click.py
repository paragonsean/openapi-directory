# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_channel_basic_info import BeezUPCommonChannelBasicInfo
from openapi_server.models.beez_up_common_product_basic_info import BeezUPCommonProductBasicInfo
from openapi_server import util


class TrackedClick(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: BeezUPCommonChannelBasicInfo=None, ip_address: str=None, product: BeezUPCommonProductBasicInfo=None, utc_date: datetime=None):
        """TrackedClick - a model defined in OpenAPI

        :param channel: The channel of this TrackedClick.
        :param ip_address: The ip_address of this TrackedClick.
        :param product: The product of this TrackedClick.
        :param utc_date: The utc_date of this TrackedClick.
        """
        self.openapi_types = {
            'channel': BeezUPCommonChannelBasicInfo,
            'ip_address': str,
            'product': BeezUPCommonProductBasicInfo,
            'utc_date': datetime
        }

        self.attribute_map = {
            'channel': 'channel',
            'ip_address': 'ipAddress',
            'product': 'product',
            'utc_date': 'utcDate'
        }

        self._channel = channel
        self._ip_address = ip_address
        self._product = product
        self._utc_date = utc_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedClick':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedClick of this TrackedClick.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this TrackedClick.


        :return: The channel of this TrackedClick.
        :rtype: BeezUPCommonChannelBasicInfo
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this TrackedClick.


        :param channel: The channel of this TrackedClick.
        :type channel: BeezUPCommonChannelBasicInfo
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def ip_address(self):
        """Gets the ip_address of this TrackedClick.

        The user IP address for the click

        :return: The ip_address of this TrackedClick.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this TrackedClick.

        The user IP address for the click

        :param ip_address: The ip_address of this TrackedClick.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def product(self):
        """Gets the product of this TrackedClick.


        :return: The product of this TrackedClick.
        :rtype: BeezUPCommonProductBasicInfo
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this TrackedClick.


        :param product: The product of this TrackedClick.
        :type product: BeezUPCommonProductBasicInfo
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def utc_date(self):
        """Gets the utc_date of this TrackedClick.

        The utc date of the click

        :return: The utc_date of this TrackedClick.
        :rtype: datetime
        """
        return self._utc_date

    @utc_date.setter
    def utc_date(self, utc_date):
        """Sets the utc_date of this TrackedClick.

        The utc date of the click

        :param utc_date: The utc_date of this TrackedClick.
        :type utc_date: datetime
        """
        if utc_date is None:
            raise ValueError("Invalid value for `utc_date`, must not be `None`")

        self._utc_date = utc_date
