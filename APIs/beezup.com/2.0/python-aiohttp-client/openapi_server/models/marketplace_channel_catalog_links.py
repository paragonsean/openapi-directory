# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_get_channel_catalog_marketplace_properties_link import LinksGetChannelCatalogMarketplacePropertiesLink
from openapi_server.models.links_get_channel_catalog_marketplace_settings_link import LinksGetChannelCatalogMarketplaceSettingsLink
from openapi_server.models.links_get_publications_link import LinksGetPublicationsLink
from openapi_server.models.marketplace_channel_catalog_publication_option import MarketplaceChannelCatalogPublicationOption
from openapi_server import util


class MarketplaceChannelCatalogLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: LinksGetChannelCatalogMarketplacePropertiesLink=None, publications: LinksGetPublicationsLink=None, publish_options: List[MarketplaceChannelCatalogPublicationOption]=None, settings: LinksGetChannelCatalogMarketplaceSettingsLink=None):
        """MarketplaceChannelCatalogLinks - a model defined in OpenAPI

        :param properties: The properties of this MarketplaceChannelCatalogLinks.
        :param publications: The publications of this MarketplaceChannelCatalogLinks.
        :param publish_options: The publish_options of this MarketplaceChannelCatalogLinks.
        :param settings: The settings of this MarketplaceChannelCatalogLinks.
        """
        self.openapi_types = {
            'properties': LinksGetChannelCatalogMarketplacePropertiesLink,
            'publications': LinksGetPublicationsLink,
            'publish_options': List[MarketplaceChannelCatalogPublicationOption],
            'settings': LinksGetChannelCatalogMarketplaceSettingsLink
        }

        self.attribute_map = {
            'properties': 'properties',
            'publications': 'publications',
            'publish_options': 'publishOptions',
            'settings': 'settings'
        }

        self._properties = properties
        self._publications = publications
        self._publish_options = publish_options
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceChannelCatalogLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The marketplaceChannelCatalogLinks of this MarketplaceChannelCatalogLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this MarketplaceChannelCatalogLinks.


        :return: The properties of this MarketplaceChannelCatalogLinks.
        :rtype: LinksGetChannelCatalogMarketplacePropertiesLink
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MarketplaceChannelCatalogLinks.


        :param properties: The properties of this MarketplaceChannelCatalogLinks.
        :type properties: LinksGetChannelCatalogMarketplacePropertiesLink
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def publications(self):
        """Gets the publications of this MarketplaceChannelCatalogLinks.


        :return: The publications of this MarketplaceChannelCatalogLinks.
        :rtype: LinksGetPublicationsLink
        """
        return self._publications

    @publications.setter
    def publications(self, publications):
        """Sets the publications of this MarketplaceChannelCatalogLinks.


        :param publications: The publications of this MarketplaceChannelCatalogLinks.
        :type publications: LinksGetPublicationsLink
        """

        self._publications = publications

    @property
    def publish_options(self):
        """Gets the publish_options of this MarketplaceChannelCatalogLinks.


        :return: The publish_options of this MarketplaceChannelCatalogLinks.
        :rtype: List[MarketplaceChannelCatalogPublicationOption]
        """
        return self._publish_options

    @publish_options.setter
    def publish_options(self, publish_options):
        """Sets the publish_options of this MarketplaceChannelCatalogLinks.


        :param publish_options: The publish_options of this MarketplaceChannelCatalogLinks.
        :type publish_options: List[MarketplaceChannelCatalogPublicationOption]
        """

        self._publish_options = publish_options

    @property
    def settings(self):
        """Gets the settings of this MarketplaceChannelCatalogLinks.


        :return: The settings of this MarketplaceChannelCatalogLinks.
        :rtype: LinksGetChannelCatalogMarketplaceSettingsLink
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this MarketplaceChannelCatalogLinks.


        :param settings: The settings of this MarketplaceChannelCatalogLinks.
        :type settings: LinksGetChannelCatalogMarketplaceSettingsLink
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings
