# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_info_summaries import BeezUPCommonInfoSummaries
from openapi_server.models.beez_up_common_lov_link3 import BeezUPCommonLOVLink3
from openapi_server.models.channel_catalog_marketplace_property import ChannelCatalogMarketplaceProperty
from openapi_server.models.channel_catalog_marketplace_property_discriminator_type import ChannelCatalogMarketplacePropertyDiscriminatorType
from openapi_server.models.type import Type
from openapi_server import util


class ChannelCatalogMarketplaceBooleanProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, discriminator_type: ChannelCatalogMarketplacePropertyDiscriminatorType=None, info: BeezUPCommonInfoSummaries=None, lov_link: BeezUPCommonLOVLink3=None, lov_required: bool=False, max_items: int=None, max_length: int=None, min_items: int=None, min_length: int=None, name: str=None, offer_id_required: int=None, pattern: str=None, position: int=None, read_only: bool=False, required: bool=False, type: Type=None, visible: bool=True, default: bool=None):
        """ChannelCatalogMarketplaceBooleanProperty - a model defined in OpenAPI

        :param description: The description of this ChannelCatalogMarketplaceBooleanProperty.
        :param discriminator_type: The discriminator_type of this ChannelCatalogMarketplaceBooleanProperty.
        :param info: The info of this ChannelCatalogMarketplaceBooleanProperty.
        :param lov_link: The lov_link of this ChannelCatalogMarketplaceBooleanProperty.
        :param lov_required: The lov_required of this ChannelCatalogMarketplaceBooleanProperty.
        :param max_items: The max_items of this ChannelCatalogMarketplaceBooleanProperty.
        :param max_length: The max_length of this ChannelCatalogMarketplaceBooleanProperty.
        :param min_items: The min_items of this ChannelCatalogMarketplaceBooleanProperty.
        :param min_length: The min_length of this ChannelCatalogMarketplaceBooleanProperty.
        :param name: The name of this ChannelCatalogMarketplaceBooleanProperty.
        :param offer_id_required: The offer_id_required of this ChannelCatalogMarketplaceBooleanProperty.
        :param pattern: The pattern of this ChannelCatalogMarketplaceBooleanProperty.
        :param position: The position of this ChannelCatalogMarketplaceBooleanProperty.
        :param read_only: The read_only of this ChannelCatalogMarketplaceBooleanProperty.
        :param required: The required of this ChannelCatalogMarketplaceBooleanProperty.
        :param type: The type of this ChannelCatalogMarketplaceBooleanProperty.
        :param visible: The visible of this ChannelCatalogMarketplaceBooleanProperty.
        :param default: The default of this ChannelCatalogMarketplaceBooleanProperty.
        """
        self.openapi_types = {
            'description': str,
            'discriminator_type': ChannelCatalogMarketplacePropertyDiscriminatorType,
            'info': BeezUPCommonInfoSummaries,
            'lov_link': BeezUPCommonLOVLink3,
            'lov_required': bool,
            'max_items': int,
            'max_length': int,
            'min_items': int,
            'min_length': int,
            'name': str,
            'offer_id_required': int,
            'pattern': str,
            'position': int,
            'read_only': bool,
            'required': bool,
            'type': Type,
            'visible': bool,
            'default': bool
        }

        self.attribute_map = {
            'description': 'description',
            'discriminator_type': 'discriminatorType',
            'info': 'info',
            'lov_link': 'lovLink',
            'lov_required': 'lovRequired',
            'max_items': 'maxItems',
            'max_length': 'maxLength',
            'min_items': 'minItems',
            'min_length': 'minLength',
            'name': 'name',
            'offer_id_required': 'offerIdRequired',
            'pattern': 'pattern',
            'position': 'position',
            'read_only': 'readOnly',
            'required': 'required',
            'type': 'type',
            'visible': 'visible',
            'default': 'default'
        }

        self._description = description
        self._discriminator_type = discriminator_type
        self._info = info
        self._lov_link = lov_link
        self._lov_required = lov_required
        self._max_items = max_items
        self._max_length = max_length
        self._min_items = min_items
        self._min_length = min_length
        self._name = name
        self._offer_id_required = offer_id_required
        self._pattern = pattern
        self._position = position
        self._read_only = read_only
        self._required = required
        self._type = type
        self._visible = visible
        self._default = default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogMarketplaceBooleanProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogMarketplaceBooleanProperty of this ChannelCatalogMarketplaceBooleanProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the description of the property

        :return: The description of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the description of the property

        :param description: The description of this ChannelCatalogMarketplaceBooleanProperty.
        :type description: str
        """

        self._description = description

    @property
    def discriminator_type(self):
        """Gets the discriminator_type of this ChannelCatalogMarketplaceBooleanProperty.


        :return: The discriminator_type of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: ChannelCatalogMarketplacePropertyDiscriminatorType
        """
        return self._discriminator_type

    @discriminator_type.setter
    def discriminator_type(self, discriminator_type):
        """Sets the discriminator_type of this ChannelCatalogMarketplaceBooleanProperty.


        :param discriminator_type: The discriminator_type of this ChannelCatalogMarketplaceBooleanProperty.
        :type discriminator_type: ChannelCatalogMarketplacePropertyDiscriminatorType
        """
        if discriminator_type is None:
            raise ValueError("Invalid value for `discriminator_type`, must not be `None`")

        self._discriminator_type = discriminator_type

    @property
    def info(self):
        """Gets the info of this ChannelCatalogMarketplaceBooleanProperty.


        :return: The info of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: BeezUPCommonInfoSummaries
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ChannelCatalogMarketplaceBooleanProperty.


        :param info: The info of this ChannelCatalogMarketplaceBooleanProperty.
        :type info: BeezUPCommonInfoSummaries
        """

        self._info = info

    @property
    def lov_link(self):
        """Gets the lov_link of this ChannelCatalogMarketplaceBooleanProperty.


        :return: The lov_link of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._lov_link

    @lov_link.setter
    def lov_link(self, lov_link):
        """Sets the lov_link of this ChannelCatalogMarketplaceBooleanProperty.


        :param lov_link: The lov_link of this ChannelCatalogMarketplaceBooleanProperty.
        :type lov_link: BeezUPCommonLOVLink3
        """

        self._lov_link = lov_link

    @property
    def lov_required(self):
        """Gets the lov_required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates if the property value must be in the list of value.

        :return: The lov_required of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: bool
        """
        return self._lov_required

    @lov_required.setter
    def lov_required(self, lov_required):
        """Sets the lov_required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates if the property value must be in the list of value.

        :param lov_required: The lov_required of this ChannelCatalogMarketplaceBooleanProperty.
        :type lov_required: bool
        """

        self._lov_required = lov_required

    @property
    def max_items(self):
        """Gets the max_items of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the maximum item count of the property value

        :return: The max_items of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the maximum item count of the property value

        :param max_items: The max_items of this ChannelCatalogMarketplaceBooleanProperty.
        :type max_items: int
        """
        if max_items is not None and max_items < 1:
            raise ValueError("Invalid value for `max_items`, must be a value greater than or equal to `1`")

        self._max_items = max_items

    @property
    def max_length(self):
        """Gets the max_length of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the maximum size of the property value

        :return: The max_length of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the maximum size of the property value

        :param max_length: The max_length of this ChannelCatalogMarketplaceBooleanProperty.
        :type max_length: int
        """
        if max_length is not None and max_length < 1:
            raise ValueError("Invalid value for `max_length`, must be a value greater than or equal to `1`")

        self._max_length = max_length

    @property
    def min_items(self):
        """Gets the min_items of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the minimum item count of the property value.

        :return: The min_items of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._min_items

    @min_items.setter
    def min_items(self, min_items):
        """Sets the min_items of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the minimum item count of the property value.

        :param min_items: The min_items of this ChannelCatalogMarketplaceBooleanProperty.
        :type min_items: int
        """
        if min_items is not None and min_items < 0:
            raise ValueError("Invalid value for `min_items`, must be a value greater than or equal to `0`")

        self._min_items = min_items

    @property
    def min_length(self):
        """Gets the min_length of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the minimum size of the property value

        :return: The min_length of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the minimum size of the property value

        :param min_length: The min_length of this ChannelCatalogMarketplaceBooleanProperty.
        :type min_length: int
        """
        if min_length is not None and min_length < 0:
            raise ValueError("Invalid value for `min_length`, must be a value greater than or equal to `0`")

        self._min_length = min_length

    @property
    def name(self):
        """Gets the name of this ChannelCatalogMarketplaceBooleanProperty.

        Channel catalog marketplace property name

        :return: The name of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelCatalogMarketplaceBooleanProperty.

        Channel catalog marketplace property name

        :param name: The name of this ChannelCatalogMarketplaceBooleanProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offer_id_required(self):
        """Gets the offer_id_required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the offer identifier required to configure this property.

        :return: The offer_id_required of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._offer_id_required

    @offer_id_required.setter
    def offer_id_required(self, offer_id_required):
        """Sets the offer_id_required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates the offer identifier required to configure this property.

        :param offer_id_required: The offer_id_required of this ChannelCatalogMarketplaceBooleanProperty.
        :type offer_id_required: int
        """

        self._offer_id_required = offer_id_required

    @property
    def pattern(self):
        """Gets the pattern of this ChannelCatalogMarketplaceBooleanProperty.

        Channel catalog marketplace setting value format validation regular expression

        :return: The pattern of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ChannelCatalogMarketplaceBooleanProperty.

        Channel catalog marketplace setting value format validation regular expression

        :param pattern: The pattern of this ChannelCatalogMarketplaceBooleanProperty.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def position(self):
        """Gets the position of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the position of the property in the display group

        :return: The position of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the position of the property in the display group

        :param position: The position of this ChannelCatalogMarketplaceBooleanProperty.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 1:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")

        self._position = position

    @property
    def read_only(self):
        """Gets the read_only of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.

        :return: The read_only of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.

        :param read_only: The read_only of this ChannelCatalogMarketplaceBooleanProperty.
        :type read_only: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")

        self._read_only = read_only

    @property
    def required(self):
        """Gets the required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate if the property is required or not

        :return: The required of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate if the property is required or not

        :param required: The required of this ChannelCatalogMarketplaceBooleanProperty.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """Gets the type of this ChannelCatalogMarketplaceBooleanProperty.


        :return: The type of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChannelCatalogMarketplaceBooleanProperty.


        :param type: The type of this ChannelCatalogMarketplaceBooleanProperty.
        :type type: Type
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def visible(self):
        """Gets the visible of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates if this property should be displayed in the configuration page.

        :return: The visible of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ChannelCatalogMarketplaceBooleanProperty.

        Indicates if this property should be displayed in the configuration page.

        :param visible: The visible of this ChannelCatalogMarketplaceBooleanProperty.
        :type visible: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")

        self._visible = visible

    @property
    def default(self):
        """Gets the default of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the default values of the property

        :return: The default of this ChannelCatalogMarketplaceBooleanProperty.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ChannelCatalogMarketplaceBooleanProperty.

        Indicate the default values of the property

        :param default: The default of this ChannelCatalogMarketplaceBooleanProperty.
        :type default: bool
        """

        self._default = default
