# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracked_click import TrackedClick
from openapi_server import util


class TrackedClicks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clicks: List[TrackedClick]=None):
        """TrackedClicks - a model defined in OpenAPI

        :param clicks: The clicks of this TrackedClicks.
        """
        self.openapi_types = {
            'clicks': List[TrackedClick]
        }

        self.attribute_map = {
            'clicks': 'clicks'
        }

        self._clicks = clicks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedClicks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedClicks of this TrackedClicks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clicks(self):
        """Gets the clicks of this TrackedClicks.


        :return: The clicks of this TrackedClicks.
        :rtype: List[TrackedClick]
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this TrackedClicks.


        :param clicks: The clicks of this TrackedClicks.
        :type clicks: List[TrackedClick]
        """
        if clicks is None:
            raise ValueError("Invalid value for `clicks`, must not be `None`")

        self._clicks = clicks
