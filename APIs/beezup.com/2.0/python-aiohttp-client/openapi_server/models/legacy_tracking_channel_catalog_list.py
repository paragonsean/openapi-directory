# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.legacy_tracking_channel_catalog import LegacyTrackingChannelCatalog
from openapi_server.models.legacy_tracking_channel_catalog_list_links import LegacyTrackingChannelCatalogListLinks
from openapi_server import util


class LegacyTrackingChannelCatalogList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_catalogs: Dict[str, LegacyTrackingChannelCatalog]=None, links: LegacyTrackingChannelCatalogListLinks=None):
        """LegacyTrackingChannelCatalogList - a model defined in OpenAPI

        :param channel_catalogs: The channel_catalogs of this LegacyTrackingChannelCatalogList.
        :param links: The links of this LegacyTrackingChannelCatalogList.
        """
        self.openapi_types = {
            'channel_catalogs': Dict[str, LegacyTrackingChannelCatalog],
            'links': LegacyTrackingChannelCatalogListLinks
        }

        self.attribute_map = {
            'channel_catalogs': 'channelCatalogs',
            'links': 'links'
        }

        self._channel_catalogs = channel_catalogs
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyTrackingChannelCatalogList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The legacyTrackingChannelCatalogList of this LegacyTrackingChannelCatalogList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_catalogs(self):
        """Gets the channel_catalogs of this LegacyTrackingChannelCatalogList.

        The channel catalog list. The key is the channel catalog identifier

        :return: The channel_catalogs of this LegacyTrackingChannelCatalogList.
        :rtype: Dict[str, LegacyTrackingChannelCatalog]
        """
        return self._channel_catalogs

    @channel_catalogs.setter
    def channel_catalogs(self, channel_catalogs):
        """Sets the channel_catalogs of this LegacyTrackingChannelCatalogList.

        The channel catalog list. The key is the channel catalog identifier

        :param channel_catalogs: The channel_catalogs of this LegacyTrackingChannelCatalogList.
        :type channel_catalogs: Dict[str, LegacyTrackingChannelCatalog]
        """

        self._channel_catalogs = channel_catalogs

    @property
    def links(self):
        """Gets the links of this LegacyTrackingChannelCatalogList.


        :return: The links of this LegacyTrackingChannelCatalogList.
        :rtype: LegacyTrackingChannelCatalogListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LegacyTrackingChannelCatalogList.


        :param links: The links of this LegacyTrackingChannelCatalogList.
        :type links: LegacyTrackingChannelCatalogListLinks
        """

        self._links = links
