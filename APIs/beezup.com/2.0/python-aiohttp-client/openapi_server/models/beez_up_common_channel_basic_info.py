# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BeezUPCommonChannelBasicInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_image_url: str=None, channel_name: str=None):
        """BeezUPCommonChannelBasicInfo - a model defined in OpenAPI

        :param channel_id: The channel_id of this BeezUPCommonChannelBasicInfo.
        :param channel_image_url: The channel_image_url of this BeezUPCommonChannelBasicInfo.
        :param channel_name: The channel_name of this BeezUPCommonChannelBasicInfo.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_image_url': str,
            'channel_name': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_image_url': 'channelImageUrl',
            'channel_name': 'channelName'
        }

        self._channel_id = channel_id
        self._channel_image_url = channel_image_url
        self._channel_name = channel_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeezUPCommonChannelBasicInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeezUP.Common.ChannelBasicInfo of this BeezUPCommonChannelBasicInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this BeezUPCommonChannelBasicInfo.

        The channel identifier

        :return: The channel_id of this BeezUPCommonChannelBasicInfo.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this BeezUPCommonChannelBasicInfo.

        The channel identifier

        :param channel_id: The channel_id of this BeezUPCommonChannelBasicInfo.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_image_url(self):
        """Gets the channel_image_url of this BeezUPCommonChannelBasicInfo.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The channel_image_url of this BeezUPCommonChannelBasicInfo.
        :rtype: str
        """
        return self._channel_image_url

    @channel_image_url.setter
    def channel_image_url(self, channel_image_url):
        """Sets the channel_image_url of this BeezUPCommonChannelBasicInfo.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param channel_image_url: The channel_image_url of this BeezUPCommonChannelBasicInfo.
        :type channel_image_url: str
        """
        if channel_image_url is None:
            raise ValueError("Invalid value for `channel_image_url`, must not be `None`")
        if channel_image_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', channel_image_url):
            raise ValueError("Invalid value for `channel_image_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._channel_image_url = channel_image_url

    @property
    def channel_name(self):
        """Gets the channel_name of this BeezUPCommonChannelBasicInfo.

        The channel name

        :return: The channel_name of this BeezUPCommonChannelBasicInfo.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this BeezUPCommonChannelBasicInfo.

        The channel name

        :param channel_name: The channel_name of this BeezUPCommonChannelBasicInfo.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name
