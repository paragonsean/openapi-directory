# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_click_to_order_type import LinkClickToOrderType
from openapi_server.models.margin_type import MarginType
from openapi_server.models.performance_indicator_formula import PerformanceIndicatorFormula
from openapi_server import util


class ReportAdvancedFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_margin_percent: int=None, link_click_to_order_max_day: int=None, link_click_to_order_type: LinkClickToOrderType=LinkClickToOrderType.ONPURCHASEDATE, margin_type: MarginType=MarginType.TRACKER, only_direct_sales: bool=False, only_payment_validated_orders: bool=False, performance_indicator_formula: PerformanceIndicatorFormula=None):
        """ReportAdvancedFilters - a model defined in OpenAPI

        :param global_margin_percent: The global_margin_percent of this ReportAdvancedFilters.
        :param link_click_to_order_max_day: The link_click_to_order_max_day of this ReportAdvancedFilters.
        :param link_click_to_order_type: The link_click_to_order_type of this ReportAdvancedFilters.
        :param margin_type: The margin_type of this ReportAdvancedFilters.
        :param only_direct_sales: The only_direct_sales of this ReportAdvancedFilters.
        :param only_payment_validated_orders: The only_payment_validated_orders of this ReportAdvancedFilters.
        :param performance_indicator_formula: The performance_indicator_formula of this ReportAdvancedFilters.
        """
        self.openapi_types = {
            'global_margin_percent': int,
            'link_click_to_order_max_day': int,
            'link_click_to_order_type': LinkClickToOrderType,
            'margin_type': MarginType,
            'only_direct_sales': bool,
            'only_payment_validated_orders': bool,
            'performance_indicator_formula': PerformanceIndicatorFormula
        }

        self.attribute_map = {
            'global_margin_percent': 'globalMarginPercent',
            'link_click_to_order_max_day': 'linkClickToOrderMaxDay',
            'link_click_to_order_type': 'linkClickToOrderType',
            'margin_type': 'marginType',
            'only_direct_sales': 'onlyDirectSales',
            'only_payment_validated_orders': 'onlyPaymentValidatedOrders',
            'performance_indicator_formula': 'performanceIndicatorFormula'
        }

        self._global_margin_percent = global_margin_percent
        self._link_click_to_order_max_day = link_click_to_order_max_day
        self._link_click_to_order_type = link_click_to_order_type
        self._margin_type = margin_type
        self._only_direct_sales = only_direct_sales
        self._only_payment_validated_orders = only_payment_validated_orders
        self._performance_indicator_formula = performance_indicator_formula

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportAdvancedFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportAdvancedFilters of this ReportAdvancedFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_margin_percent(self):
        """Gets the global_margin_percent of this ReportAdvancedFilters.

        If the margin type is 'Global', indicate the percentage of sale price.

        :return: The global_margin_percent of this ReportAdvancedFilters.
        :rtype: int
        """
        return self._global_margin_percent

    @global_margin_percent.setter
    def global_margin_percent(self, global_margin_percent):
        """Sets the global_margin_percent of this ReportAdvancedFilters.

        If the margin type is 'Global', indicate the percentage of sale price.

        :param global_margin_percent: The global_margin_percent of this ReportAdvancedFilters.
        :type global_margin_percent: int
        """
        if global_margin_percent is not None and global_margin_percent > 100:
            raise ValueError("Invalid value for `global_margin_percent`, must be a value less than or equal to `100`")
        if global_margin_percent is not None and global_margin_percent < 0:
            raise ValueError("Invalid value for `global_margin_percent`, must be a value greater than or equal to `0`")

        self._global_margin_percent = global_margin_percent

    @property
    def link_click_to_order_max_day(self):
        """Gets the link_click_to_order_max_day of this ReportAdvancedFilters.

        If the linkOrderType is OnClickDate, indicate the max day to search the click from the order

        :return: The link_click_to_order_max_day of this ReportAdvancedFilters.
        :rtype: int
        """
        return self._link_click_to_order_max_day

    @link_click_to_order_max_day.setter
    def link_click_to_order_max_day(self, link_click_to_order_max_day):
        """Sets the link_click_to_order_max_day of this ReportAdvancedFilters.

        If the linkOrderType is OnClickDate, indicate the max day to search the click from the order

        :param link_click_to_order_max_day: The link_click_to_order_max_day of this ReportAdvancedFilters.
        :type link_click_to_order_max_day: int
        """
        if link_click_to_order_max_day is not None and link_click_to_order_max_day > 180:
            raise ValueError("Invalid value for `link_click_to_order_max_day`, must be a value less than or equal to `180`")
        if link_click_to_order_max_day is not None and link_click_to_order_max_day < 0:
            raise ValueError("Invalid value for `link_click_to_order_max_day`, must be a value greater than or equal to `0`")

        self._link_click_to_order_max_day = link_click_to_order_max_day

    @property
    def link_click_to_order_type(self):
        """Gets the link_click_to_order_type of this ReportAdvancedFilters.


        :return: The link_click_to_order_type of this ReportAdvancedFilters.
        :rtype: LinkClickToOrderType
        """
        return self._link_click_to_order_type

    @link_click_to_order_type.setter
    def link_click_to_order_type(self, link_click_to_order_type):
        """Sets the link_click_to_order_type of this ReportAdvancedFilters.


        :param link_click_to_order_type: The link_click_to_order_type of this ReportAdvancedFilters.
        :type link_click_to_order_type: LinkClickToOrderType
        """
        if link_click_to_order_type is None:
            raise ValueError("Invalid value for `link_click_to_order_type`, must not be `None`")

        self._link_click_to_order_type = link_click_to_order_type

    @property
    def margin_type(self):
        """Gets the margin_type of this ReportAdvancedFilters.


        :return: The margin_type of this ReportAdvancedFilters.
        :rtype: MarginType
        """
        return self._margin_type

    @margin_type.setter
    def margin_type(self, margin_type):
        """Sets the margin_type of this ReportAdvancedFilters.


        :param margin_type: The margin_type of this ReportAdvancedFilters.
        :type margin_type: MarginType
        """
        if margin_type is None:
            raise ValueError("Invalid value for `margin_type`, must not be `None`")

        self._margin_type = margin_type

    @property
    def only_direct_sales(self):
        """Gets the only_direct_sales of this ReportAdvancedFilters.

        If true, you will get only direct sales. Otherwise the indirect sales will be included.

        :return: The only_direct_sales of this ReportAdvancedFilters.
        :rtype: bool
        """
        return self._only_direct_sales

    @only_direct_sales.setter
    def only_direct_sales(self, only_direct_sales):
        """Sets the only_direct_sales of this ReportAdvancedFilters.

        If true, you will get only direct sales. Otherwise the indirect sales will be included.

        :param only_direct_sales: The only_direct_sales of this ReportAdvancedFilters.
        :type only_direct_sales: bool
        """
        if only_direct_sales is None:
            raise ValueError("Invalid value for `only_direct_sales`, must not be `None`")

        self._only_direct_sales = only_direct_sales

    @property
    def only_payment_validated_orders(self):
        """Gets the only_payment_validated_orders of this ReportAdvancedFilters.

        If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.

        :return: The only_payment_validated_orders of this ReportAdvancedFilters.
        :rtype: bool
        """
        return self._only_payment_validated_orders

    @only_payment_validated_orders.setter
    def only_payment_validated_orders(self, only_payment_validated_orders):
        """Sets the only_payment_validated_orders of this ReportAdvancedFilters.

        If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.

        :param only_payment_validated_orders: The only_payment_validated_orders of this ReportAdvancedFilters.
        :type only_payment_validated_orders: bool
        """
        if only_payment_validated_orders is None:
            raise ValueError("Invalid value for `only_payment_validated_orders`, must not be `None`")

        self._only_payment_validated_orders = only_payment_validated_orders

    @property
    def performance_indicator_formula(self):
        """Gets the performance_indicator_formula of this ReportAdvancedFilters.


        :return: The performance_indicator_formula of this ReportAdvancedFilters.
        :rtype: PerformanceIndicatorFormula
        """
        return self._performance_indicator_formula

    @performance_indicator_formula.setter
    def performance_indicator_formula(self, performance_indicator_formula):
        """Sets the performance_indicator_formula of this ReportAdvancedFilters.


        :param performance_indicator_formula: The performance_indicator_formula of this ReportAdvancedFilters.
        :type performance_indicator_formula: PerformanceIndicatorFormula
        """
        if performance_indicator_formula is None:
            raise ValueError("Invalid value for `performance_indicator_formula`, must not be `None`")

        self._performance_indicator_formula = performance_indicator_formula
