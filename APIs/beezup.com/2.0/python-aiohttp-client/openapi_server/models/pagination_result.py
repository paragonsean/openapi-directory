# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_result_links import PaginationResultLinks
from openapi_server import util


class PaginationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_count: int=None, links: PaginationResultLinks=None, page_count: int=None, total_entry_count: int=None):
        """PaginationResult - a model defined in OpenAPI

        :param entry_count: The entry_count of this PaginationResult.
        :param links: The links of this PaginationResult.
        :param page_count: The page_count of this PaginationResult.
        :param total_entry_count: The total_entry_count of this PaginationResult.
        """
        self.openapi_types = {
            'entry_count': int,
            'links': PaginationResultLinks,
            'page_count': int,
            'total_entry_count': int
        }

        self.attribute_map = {
            'entry_count': 'entryCount',
            'links': 'links',
            'page_count': 'pageCount',
            'total_entry_count': 'totalEntryCount'
        }

        self._entry_count = entry_count
        self._links = links
        self._page_count = page_count
        self._total_entry_count = total_entry_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paginationResult of this PaginationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_count(self):
        """Gets the entry_count of this PaginationResult.

        The entry count currently returned

        :return: The entry_count of this PaginationResult.
        :rtype: int
        """
        return self._entry_count

    @entry_count.setter
    def entry_count(self, entry_count):
        """Sets the entry_count of this PaginationResult.

        The entry count currently returned

        :param entry_count: The entry_count of this PaginationResult.
        :type entry_count: int
        """
        if entry_count is None:
            raise ValueError("Invalid value for `entry_count`, must not be `None`")
        if entry_count is not None and entry_count < 0:
            raise ValueError("Invalid value for `entry_count`, must be a value greater than or equal to `0`")

        self._entry_count = entry_count

    @property
    def links(self):
        """Gets the links of this PaginationResult.


        :return: The links of this PaginationResult.
        :rtype: PaginationResultLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaginationResult.


        :param links: The links of this PaginationResult.
        :type links: PaginationResultLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def page_count(self):
        """Gets the page_count of this PaginationResult.

        The page count

        :return: The page_count of this PaginationResult.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this PaginationResult.

        The page count

        :param page_count: The page_count of this PaginationResult.
        :type page_count: int
        """
        if page_count is None:
            raise ValueError("Invalid value for `page_count`, must not be `None`")
        if page_count is not None and page_count < 0:
            raise ValueError("Invalid value for `page_count`, must be a value greater than or equal to `0`")

        self._page_count = page_count

    @property
    def total_entry_count(self):
        """Gets the total_entry_count of this PaginationResult.

        The total entry count

        :return: The total_entry_count of this PaginationResult.
        :rtype: int
        """
        return self._total_entry_count

    @total_entry_count.setter
    def total_entry_count(self, total_entry_count):
        """Sets the total_entry_count of this PaginationResult.

        The total entry count

        :param total_entry_count: The total_entry_count of this PaginationResult.
        :type total_entry_count: int
        """
        if total_entry_count is None:
            raise ValueError("Invalid value for `total_entry_count`, must not be `None`")
        if total_entry_count is not None and total_entry_count < 0:
            raise ValueError("Invalid value for `total_entry_count`, must be a value greater than or equal to `0`")

        self._total_entry_count = total_entry_count
