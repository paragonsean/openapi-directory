# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_importation_configure_catalog_column_link import LinksImportationConfigureCatalogColumnLink
from openapi_server.models.links_importation_ignore_column_link import LinksImportationIgnoreColumnLink
from openapi_server.models.links_importation_map_catalog_column_link import LinksImportationMapCatalogColumnLink
from openapi_server.models.links_importation_reattend_column_link import LinksImportationReattendColumnLink
from openapi_server.models.links_importation_unmap_catalog_column_link import LinksImportationUnmapCatalogColumnLink
from openapi_server import util


class DetectedCatalogColumnLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configure: LinksImportationConfigureCatalogColumnLink=None, ignore: LinksImportationIgnoreColumnLink=None, map: LinksImportationMapCatalogColumnLink=None, reattend: LinksImportationReattendColumnLink=None, unmap: LinksImportationUnmapCatalogColumnLink=None):
        """DetectedCatalogColumnLinks - a model defined in OpenAPI

        :param configure: The configure of this DetectedCatalogColumnLinks.
        :param ignore: The ignore of this DetectedCatalogColumnLinks.
        :param map: The map of this DetectedCatalogColumnLinks.
        :param reattend: The reattend of this DetectedCatalogColumnLinks.
        :param unmap: The unmap of this DetectedCatalogColumnLinks.
        """
        self.openapi_types = {
            'configure': LinksImportationConfigureCatalogColumnLink,
            'ignore': LinksImportationIgnoreColumnLink,
            'map': LinksImportationMapCatalogColumnLink,
            'reattend': LinksImportationReattendColumnLink,
            'unmap': LinksImportationUnmapCatalogColumnLink
        }

        self.attribute_map = {
            'configure': 'configure',
            'ignore': 'ignore',
            'map': 'map',
            'reattend': 'reattend',
            'unmap': 'unmap'
        }

        self._configure = configure
        self._ignore = ignore
        self._map = map
        self._reattend = reattend
        self._unmap = unmap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedCatalogColumnLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The detectedCatalogColumnLinks of this DetectedCatalogColumnLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configure(self):
        """Gets the configure of this DetectedCatalogColumnLinks.


        :return: The configure of this DetectedCatalogColumnLinks.
        :rtype: LinksImportationConfigureCatalogColumnLink
        """
        return self._configure

    @configure.setter
    def configure(self, configure):
        """Sets the configure of this DetectedCatalogColumnLinks.


        :param configure: The configure of this DetectedCatalogColumnLinks.
        :type configure: LinksImportationConfigureCatalogColumnLink
        """

        self._configure = configure

    @property
    def ignore(self):
        """Gets the ignore of this DetectedCatalogColumnLinks.


        :return: The ignore of this DetectedCatalogColumnLinks.
        :rtype: LinksImportationIgnoreColumnLink
        """
        return self._ignore

    @ignore.setter
    def ignore(self, ignore):
        """Sets the ignore of this DetectedCatalogColumnLinks.


        :param ignore: The ignore of this DetectedCatalogColumnLinks.
        :type ignore: LinksImportationIgnoreColumnLink
        """

        self._ignore = ignore

    @property
    def map(self):
        """Gets the map of this DetectedCatalogColumnLinks.


        :return: The map of this DetectedCatalogColumnLinks.
        :rtype: LinksImportationMapCatalogColumnLink
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this DetectedCatalogColumnLinks.


        :param map: The map of this DetectedCatalogColumnLinks.
        :type map: LinksImportationMapCatalogColumnLink
        """

        self._map = map

    @property
    def reattend(self):
        """Gets the reattend of this DetectedCatalogColumnLinks.


        :return: The reattend of this DetectedCatalogColumnLinks.
        :rtype: LinksImportationReattendColumnLink
        """
        return self._reattend

    @reattend.setter
    def reattend(self, reattend):
        """Sets the reattend of this DetectedCatalogColumnLinks.


        :param reattend: The reattend of this DetectedCatalogColumnLinks.
        :type reattend: LinksImportationReattendColumnLink
        """

        self._reattend = reattend

    @property
    def unmap(self):
        """Gets the unmap of this DetectedCatalogColumnLinks.


        :return: The unmap of this DetectedCatalogColumnLinks.
        :rtype: LinksImportationUnmapCatalogColumnLink
        """
        return self._unmap

    @unmap.setter
    def unmap(self, unmap):
        """Sets the unmap of this DetectedCatalogColumnLinks.


        :param unmap: The unmap of this DetectedCatalogColumnLinks.
        :type unmap: LinksImportationUnmapCatalogColumnLink
        """

        self._unmap = unmap
