# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_period_in_month: int=None, discount_percentage: float=None):
        """BillingPeriod - a model defined in OpenAPI

        :param billing_period_in_month: The billing_period_in_month of this BillingPeriod.
        :param discount_percentage: The discount_percentage of this BillingPeriod.
        """
        self.openapi_types = {
            'billing_period_in_month': int,
            'discount_percentage': float
        }

        self.attribute_map = {
            'billing_period_in_month': 'billingPeriodInMonth',
            'discount_percentage': 'discountPercentage'
        }

        self._billing_period_in_month = billing_period_in_month
        self._discount_percentage = discount_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The billingPeriod of this BillingPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_period_in_month(self):
        """Gets the billing_period_in_month of this BillingPeriod.

        The billing period in month

        :return: The billing_period_in_month of this BillingPeriod.
        :rtype: int
        """
        return self._billing_period_in_month

    @billing_period_in_month.setter
    def billing_period_in_month(self, billing_period_in_month):
        """Sets the billing_period_in_month of this BillingPeriod.

        The billing period in month

        :param billing_period_in_month: The billing_period_in_month of this BillingPeriod.
        :type billing_period_in_month: int
        """
        if billing_period_in_month is None:
            raise ValueError("Invalid value for `billing_period_in_month`, must not be `None`")

        self._billing_period_in_month = billing_period_in_month

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this BillingPeriod.

        The discount percentage related to this billing period

        :return: The discount_percentage of this BillingPeriod.
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this BillingPeriod.

        The discount percentage related to this billing period

        :param discount_percentage: The discount_percentage of this BillingPeriod.
        :type discount_percentage: float
        """
        if discount_percentage is None:
            raise ValueError("Invalid value for `discount_percentage`, must not be `None`")

        self._discount_percentage = discount_percentage
