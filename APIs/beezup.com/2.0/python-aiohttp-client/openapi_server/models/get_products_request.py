# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetProductsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_path: List[str]=None, column_id_list: List[str]=None, ean: str=None, exists: bool=None, mpn: str=None, order_by_catalog_column_id: str=None, page_number: int=None, page_size: int=None, product_id_list: List[str]=None, sku: str=None, title: str=None, without_sub_categories: bool=None):
        """GetProductsRequest - a model defined in OpenAPI

        :param category_path: The category_path of this GetProductsRequest.
        :param column_id_list: The column_id_list of this GetProductsRequest.
        :param ean: The ean of this GetProductsRequest.
        :param exists: The exists of this GetProductsRequest.
        :param mpn: The mpn of this GetProductsRequest.
        :param order_by_catalog_column_id: The order_by_catalog_column_id of this GetProductsRequest.
        :param page_number: The page_number of this GetProductsRequest.
        :param page_size: The page_size of this GetProductsRequest.
        :param product_id_list: The product_id_list of this GetProductsRequest.
        :param sku: The sku of this GetProductsRequest.
        :param title: The title of this GetProductsRequest.
        :param without_sub_categories: The without_sub_categories of this GetProductsRequest.
        """
        self.openapi_types = {
            'category_path': List[str],
            'column_id_list': List[str],
            'ean': str,
            'exists': bool,
            'mpn': str,
            'order_by_catalog_column_id': str,
            'page_number': int,
            'page_size': int,
            'product_id_list': List[str],
            'sku': str,
            'title': str,
            'without_sub_categories': bool
        }

        self.attribute_map = {
            'category_path': 'categoryPath',
            'column_id_list': 'columnIdList',
            'ean': 'ean',
            'exists': 'exists',
            'mpn': 'mpn',
            'order_by_catalog_column_id': 'orderByCatalogColumnId',
            'page_number': 'pageNumber',
            'page_size': 'pageSize',
            'product_id_list': 'productIdList',
            'sku': 'sku',
            'title': 'title',
            'without_sub_categories': 'withoutSubCategories'
        }

        self._category_path = category_path
        self._column_id_list = column_id_list
        self._ean = ean
        self._exists = exists
        self._mpn = mpn
        self._order_by_catalog_column_id = order_by_catalog_column_id
        self._page_number = page_number
        self._page_size = page_size
        self._product_id_list = product_id_list
        self._sku = sku
        self._title = title
        self._without_sub_categories = without_sub_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProductsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getProductsRequest of this GetProductsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_path(self):
        """Gets the category_path of this GetProductsRequest.

        The catalog category path

        :return: The category_path of this GetProductsRequest.
        :rtype: List[str]
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this GetProductsRequest.

        The catalog category path

        :param category_path: The category_path of this GetProductsRequest.
        :type category_path: List[str]
        """

        self._category_path = category_path

    @property
    def column_id_list(self):
        """Gets the column_id_list of this GetProductsRequest.


        :return: The column_id_list of this GetProductsRequest.
        :rtype: List[str]
        """
        return self._column_id_list

    @column_id_list.setter
    def column_id_list(self, column_id_list):
        """Sets the column_id_list of this GetProductsRequest.


        :param column_id_list: The column_id_list of this GetProductsRequest.
        :type column_id_list: List[str]
        """
        if column_id_list is not None and len(column_id_list) > 5:
            raise ValueError("Invalid value for `column_id_list`, number of items must be less than or equal to `5`")
        if column_id_list is not None and len(column_id_list) < 1:
            raise ValueError("Invalid value for `column_id_list`, number of items must be greater than or equal to `1`")

        self._column_id_list = column_id_list

    @property
    def ean(self):
        """Gets the ean of this GetProductsRequest.

        Search for product by ean

        :return: The ean of this GetProductsRequest.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this GetProductsRequest.

        Search for product by ean

        :param ean: The ean of this GetProductsRequest.
        :type ean: str
        """

        self._ean = ean

    @property
    def exists(self):
        """Gets the exists of this GetProductsRequest.

        Search for existing products or not. If null you will received both.

        :return: The exists of this GetProductsRequest.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this GetProductsRequest.

        Search for existing products or not. If null you will received both.

        :param exists: The exists of this GetProductsRequest.
        :type exists: bool
        """

        self._exists = exists

    @property
    def mpn(self):
        """Gets the mpn of this GetProductsRequest.

        Search for product by mpn

        :return: The mpn of this GetProductsRequest.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this GetProductsRequest.

        Search for product by mpn

        :param mpn: The mpn of this GetProductsRequest.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def order_by_catalog_column_id(self):
        """Gets the order_by_catalog_column_id of this GetProductsRequest.

        The catalog column identifier (catalog or custom column)

        :return: The order_by_catalog_column_id of this GetProductsRequest.
        :rtype: str
        """
        return self._order_by_catalog_column_id

    @order_by_catalog_column_id.setter
    def order_by_catalog_column_id(self, order_by_catalog_column_id):
        """Sets the order_by_catalog_column_id of this GetProductsRequest.

        The catalog column identifier (catalog or custom column)

        :param order_by_catalog_column_id: The order_by_catalog_column_id of this GetProductsRequest.
        :type order_by_catalog_column_id: str
        """

        self._order_by_catalog_column_id = order_by_catalog_column_id

    @property
    def page_number(self):
        """Gets the page_number of this GetProductsRequest.

        Indicates the page number

        :return: The page_number of this GetProductsRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this GetProductsRequest.

        Indicates the page number

        :param page_number: The page_number of this GetProductsRequest.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this GetProductsRequest.

        Indicate the item count per page

        :return: The page_size of this GetProductsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GetProductsRequest.

        Indicate the item count per page

        :param page_size: The page_size of this GetProductsRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 25:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `25`")

        self._page_size = page_size

    @property
    def product_id_list(self):
        """Gets the product_id_list of this GetProductsRequest.

        Filter with a list of product identifier

        :return: The product_id_list of this GetProductsRequest.
        :rtype: List[str]
        """
        return self._product_id_list

    @product_id_list.setter
    def product_id_list(self, product_id_list):
        """Sets the product_id_list of this GetProductsRequest.

        Filter with a list of product identifier

        :param product_id_list: The product_id_list of this GetProductsRequest.
        :type product_id_list: List[str]
        """

        self._product_id_list = product_id_list

    @property
    def sku(self):
        """Gets the sku of this GetProductsRequest.

        Search for product by sku

        :return: The sku of this GetProductsRequest.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GetProductsRequest.

        Search for product by sku

        :param sku: The sku of this GetProductsRequest.
        :type sku: str
        """

        self._sku = sku

    @property
    def title(self):
        """Gets the title of this GetProductsRequest.

        Search for products containing this title

        :return: The title of this GetProductsRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetProductsRequest.

        Search for products containing this title

        :param title: The title of this GetProductsRequest.
        :type title: str
        """

        self._title = title

    @property
    def without_sub_categories(self):
        """Gets the without_sub_categories of this GetProductsRequest.

        Do not retrieve sub categories. By default, this value is set to false

        :return: The without_sub_categories of this GetProductsRequest.
        :rtype: bool
        """
        return self._without_sub_categories

    @without_sub_categories.setter
    def without_sub_categories(self, without_sub_categories):
        """Sets the without_sub_categories of this GetProductsRequest.

        Do not retrieve sub categories. By default, this value is set to false

        :param without_sub_categories: The without_sub_categories of this GetProductsRequest.
        :type without_sub_categories: bool
        """

        self._without_sub_categories = without_sub_categories
