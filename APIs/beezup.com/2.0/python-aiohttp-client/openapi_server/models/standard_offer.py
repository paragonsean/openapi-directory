# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offer_functionality import OfferFunctionality
from openapi_server.models.standard_offer_links import StandardOfferLinks
from openapi_server import util


class StandardOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_click_price: float=None, currency_code: str=None, fixed_price: float=None, functionalities: List[OfferFunctionality]=None, included_click: int=None, is_most_popular: bool=None, is_old_offer: bool=None, links: StandardOfferLinks=None, name: str=None, offer_id: int=None, position: int=None):
        """StandardOffer - a model defined in OpenAPI

        :param additional_click_price: The additional_click_price of this StandardOffer.
        :param currency_code: The currency_code of this StandardOffer.
        :param fixed_price: The fixed_price of this StandardOffer.
        :param functionalities: The functionalities of this StandardOffer.
        :param included_click: The included_click of this StandardOffer.
        :param is_most_popular: The is_most_popular of this StandardOffer.
        :param is_old_offer: The is_old_offer of this StandardOffer.
        :param links: The links of this StandardOffer.
        :param name: The name of this StandardOffer.
        :param offer_id: The offer_id of this StandardOffer.
        :param position: The position of this StandardOffer.
        """
        self.openapi_types = {
            'additional_click_price': float,
            'currency_code': str,
            'fixed_price': float,
            'functionalities': List[OfferFunctionality],
            'included_click': int,
            'is_most_popular': bool,
            'is_old_offer': bool,
            'links': StandardOfferLinks,
            'name': str,
            'offer_id': int,
            'position': int
        }

        self.attribute_map = {
            'additional_click_price': 'additionalClickPrice',
            'currency_code': 'currencyCode',
            'fixed_price': 'fixedPrice',
            'functionalities': 'functionalities',
            'included_click': 'includedClick',
            'is_most_popular': 'isMostPopular',
            'is_old_offer': 'isOldOffer',
            'links': 'links',
            'name': 'name',
            'offer_id': 'offerId',
            'position': 'position'
        }

        self._additional_click_price = additional_click_price
        self._currency_code = currency_code
        self._fixed_price = fixed_price
        self._functionalities = functionalities
        self._included_click = included_click
        self._is_most_popular = is_most_popular
        self._is_old_offer = is_old_offer
        self._links = links
        self._name = name
        self._offer_id = offer_id
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The standardOffer of this StandardOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_click_price(self):
        """Gets the additional_click_price of this StandardOffer.

        The additional click price

        :return: The additional_click_price of this StandardOffer.
        :rtype: float
        """
        return self._additional_click_price

    @additional_click_price.setter
    def additional_click_price(self, additional_click_price):
        """Sets the additional_click_price of this StandardOffer.

        The additional click price

        :param additional_click_price: The additional_click_price of this StandardOffer.
        :type additional_click_price: float
        """

        self._additional_click_price = additional_click_price

    @property
    def currency_code(self):
        """Gets the currency_code of this StandardOffer.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this StandardOffer.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this StandardOffer.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this StandardOffer.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def fixed_price(self):
        """Gets the fixed_price of this StandardOffer.

        The fixed price of the offer

        :return: The fixed_price of this StandardOffer.
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this StandardOffer.

        The fixed price of the offer

        :param fixed_price: The fixed_price of this StandardOffer.
        :type fixed_price: float
        """

        self._fixed_price = fixed_price

    @property
    def functionalities(self):
        """Gets the functionalities of this StandardOffer.


        :return: The functionalities of this StandardOffer.
        :rtype: List[OfferFunctionality]
        """
        return self._functionalities

    @functionalities.setter
    def functionalities(self, functionalities):
        """Sets the functionalities of this StandardOffer.


        :param functionalities: The functionalities of this StandardOffer.
        :type functionalities: List[OfferFunctionality]
        """

        self._functionalities = functionalities

    @property
    def included_click(self):
        """Gets the included_click of this StandardOffer.

        The included click

        :return: The included_click of this StandardOffer.
        :rtype: int
        """
        return self._included_click

    @included_click.setter
    def included_click(self, included_click):
        """Sets the included_click of this StandardOffer.

        The included click

        :param included_click: The included_click of this StandardOffer.
        :type included_click: int
        """

        self._included_click = included_click

    @property
    def is_most_popular(self):
        """Gets the is_most_popular of this StandardOffer.

        UI purpose. Is the offer is the most popular

        :return: The is_most_popular of this StandardOffer.
        :rtype: bool
        """
        return self._is_most_popular

    @is_most_popular.setter
    def is_most_popular(self, is_most_popular):
        """Sets the is_most_popular of this StandardOffer.

        UI purpose. Is the offer is the most popular

        :param is_most_popular: The is_most_popular of this StandardOffer.
        :type is_most_popular: bool
        """

        self._is_most_popular = is_most_popular

    @property
    def is_old_offer(self):
        """Gets the is_old_offer of this StandardOffer.

        Is an old offer

        :return: The is_old_offer of this StandardOffer.
        :rtype: bool
        """
        return self._is_old_offer

    @is_old_offer.setter
    def is_old_offer(self, is_old_offer):
        """Sets the is_old_offer of this StandardOffer.

        Is an old offer

        :param is_old_offer: The is_old_offer of this StandardOffer.
        :type is_old_offer: bool
        """

        self._is_old_offer = is_old_offer

    @property
    def links(self):
        """Gets the links of this StandardOffer.


        :return: The links of this StandardOffer.
        :rtype: StandardOfferLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StandardOffer.


        :param links: The links of this StandardOffer.
        :type links: StandardOfferLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def name(self):
        """Gets the name of this StandardOffer.

        The offer name

        :return: The name of this StandardOffer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StandardOffer.

        The offer name

        :param name: The name of this StandardOffer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this StandardOffer.

        The offer Id

        :return: The offer_id of this StandardOffer.
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this StandardOffer.

        The offer Id

        :param offer_id: The offer_id of this StandardOffer.
        :type offer_id: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")

        self._offer_id = offer_id

    @property
    def position(self):
        """Gets the position of this StandardOffer.

        UI purpose. The position of the offer

        :return: The position of this StandardOffer.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StandardOffer.

        UI purpose. The position of the offer

        :param position: The position of this StandardOffer.
        :type position: int
        """

        self._position = position
