# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_delete_store_link import LinksDeleteStoreLink
from openapi_server.models.links_get_store_link import LinksGetStoreLink
from openapi_server.models.links_get_store_shares_link import LinksGetStoreSharesLink
from openapi_server.models.links_share_store_link import LinksShareStoreLink
from openapi_server.models.links_update_store_link import LinksUpdateStoreLink
from openapi_server import util


class StoreLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_store: LinksDeleteStoreLink=None, _self: LinksGetStoreLink=None, share: LinksShareStoreLink=None, shares: LinksGetStoreSharesLink=None, update_store: LinksUpdateStoreLink=None):
        """StoreLinks - a model defined in OpenAPI

        :param delete_store: The delete_store of this StoreLinks.
        :param _self: The _self of this StoreLinks.
        :param share: The share of this StoreLinks.
        :param shares: The shares of this StoreLinks.
        :param update_store: The update_store of this StoreLinks.
        """
        self.openapi_types = {
            'delete_store': LinksDeleteStoreLink,
            '_self': LinksGetStoreLink,
            'share': LinksShareStoreLink,
            'shares': LinksGetStoreSharesLink,
            'update_store': LinksUpdateStoreLink
        }

        self.attribute_map = {
            'delete_store': 'deleteStore',
            '_self': 'self',
            'share': 'share',
            'shares': 'shares',
            'update_store': 'updateStore'
        }

        self._delete_store = delete_store
        self.__self = _self
        self._share = share
        self._shares = shares
        self._update_store = update_store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeLinks of this StoreLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_store(self):
        """Gets the delete_store of this StoreLinks.


        :return: The delete_store of this StoreLinks.
        :rtype: LinksDeleteStoreLink
        """
        return self._delete_store

    @delete_store.setter
    def delete_store(self, delete_store):
        """Sets the delete_store of this StoreLinks.


        :param delete_store: The delete_store of this StoreLinks.
        :type delete_store: LinksDeleteStoreLink
        """

        self._delete_store = delete_store

    @property
    def _self(self):
        """Gets the _self of this StoreLinks.


        :return: The _self of this StoreLinks.
        :rtype: LinksGetStoreLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this StoreLinks.


        :param _self: The _self of this StoreLinks.
        :type _self: LinksGetStoreLink
        """

        self.__self = _self

    @property
    def share(self):
        """Gets the share of this StoreLinks.


        :return: The share of this StoreLinks.
        :rtype: LinksShareStoreLink
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this StoreLinks.


        :param share: The share of this StoreLinks.
        :type share: LinksShareStoreLink
        """

        self._share = share

    @property
    def shares(self):
        """Gets the shares of this StoreLinks.


        :return: The shares of this StoreLinks.
        :rtype: LinksGetStoreSharesLink
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this StoreLinks.


        :param shares: The shares of this StoreLinks.
        :type shares: LinksGetStoreSharesLink
        """

        self._shares = shares

    @property
    def update_store(self):
        """Gets the update_store of this StoreLinks.


        :return: The update_store of this StoreLinks.
        :rtype: LinksUpdateStoreLink
        """
        return self._update_store

    @update_store.setter
    def update_store(self, update_store):
        """Sets the update_store of this StoreLinks.


        :param update_store: The update_store of this StoreLinks.
        :type update_store: LinksUpdateStoreLink
        """

        self._update_store = update_store
