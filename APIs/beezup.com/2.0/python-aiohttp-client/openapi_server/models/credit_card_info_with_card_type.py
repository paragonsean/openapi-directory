# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreditCardInfoWithCardType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number: str=None, card_type: str=None, expiration_month: int=None, expiration_year: int=None):
        """CreditCardInfoWithCardType - a model defined in OpenAPI

        :param card_number: The card_number of this CreditCardInfoWithCardType.
        :param card_type: The card_type of this CreditCardInfoWithCardType.
        :param expiration_month: The expiration_month of this CreditCardInfoWithCardType.
        :param expiration_year: The expiration_year of this CreditCardInfoWithCardType.
        """
        self.openapi_types = {
            'card_number': str,
            'card_type': str,
            'expiration_month': int,
            'expiration_year': int
        }

        self.attribute_map = {
            'card_number': 'cardNumber',
            'card_type': 'cardType',
            'expiration_month': 'expirationMonth',
            'expiration_year': 'expirationYear'
        }

        self._card_number = card_number
        self._card_type = card_type
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditCardInfoWithCardType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The creditCardInfoWithCardType of this CreditCardInfoWithCardType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this CreditCardInfoWithCardType.

        Card number

        :return: The card_number of this CreditCardInfoWithCardType.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CreditCardInfoWithCardType.

        Card number

        :param card_number: The card_number of this CreditCardInfoWithCardType.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this CreditCardInfoWithCardType.

        Your credit card type. Example: VISA, MasterCard, etc...

        :return: The card_type of this CreditCardInfoWithCardType.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CreditCardInfoWithCardType.

        Your credit card type. Example: VISA, MasterCard, etc...

        :param card_type: The card_type of this CreditCardInfoWithCardType.
        :type card_type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")

        self._card_type = card_type

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CreditCardInfoWithCardType.

        Expiration Month

        :return: The expiration_month of this CreditCardInfoWithCardType.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CreditCardInfoWithCardType.

        Expiration Month

        :param expiration_month: The expiration_month of this CreditCardInfoWithCardType.
        :type expiration_month: int
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")
        if expiration_month is not None and expiration_month > 12:
            raise ValueError("Invalid value for `expiration_month`, must be a value less than or equal to `12`")
        if expiration_month is not None and expiration_month < 1:
            raise ValueError("Invalid value for `expiration_month`, must be a value greater than or equal to `1`")

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CreditCardInfoWithCardType.

        Expiration Year

        :return: The expiration_year of this CreditCardInfoWithCardType.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CreditCardInfoWithCardType.

        Expiration Year

        :param expiration_year: The expiration_year of this CreditCardInfoWithCardType.
        :type expiration_year: int
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")
        if expiration_year is not None and expiration_year > 9000:
            raise ValueError("Invalid value for `expiration_year`, must be a value less than or equal to `9000`")
        if expiration_year is not None and expiration_year < 2017:
            raise ValueError("Invalid value for `expiration_year`, must be a value greater than or equal to `2017`")

        self._expiration_year = expiration_year
