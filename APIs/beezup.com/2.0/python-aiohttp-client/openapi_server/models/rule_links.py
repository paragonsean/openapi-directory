# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_delete_rule_link import LinksDeleteRuleLink
from openapi_server.models.links_disable_rule_link import LinksDisableRuleLink
from openapi_server.models.links_enable_rule_link import LinksEnableRuleLink
from openapi_server.models.links_get_report_filter_link import LinksGetReportFilterLink
from openapi_server.models.links_get_rule_link import LinksGetRuleLink
from openapi_server.models.links_move_down_rule_link import LinksMoveDownRuleLink
from openapi_server.models.links_move_up_rule_link import LinksMoveUpRuleLink
from openapi_server.models.links_run_rule_link import LinksRunRuleLink
from openapi_server.models.links_update_rule_link import LinksUpdateRuleLink
from openapi_server import util


class RuleLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: LinksDeleteRuleLink=None, disable: LinksDisableRuleLink=None, enable: LinksEnableRuleLink=None, movedown: LinksMoveDownRuleLink=None, moveup: LinksMoveUpRuleLink=None, report_filter: LinksGetReportFilterLink=None, run: LinksRunRuleLink=None, _self: LinksGetRuleLink=None, update: LinksUpdateRuleLink=None):
        """RuleLinks - a model defined in OpenAPI

        :param delete: The delete of this RuleLinks.
        :param disable: The disable of this RuleLinks.
        :param enable: The enable of this RuleLinks.
        :param movedown: The movedown of this RuleLinks.
        :param moveup: The moveup of this RuleLinks.
        :param report_filter: The report_filter of this RuleLinks.
        :param run: The run of this RuleLinks.
        :param _self: The _self of this RuleLinks.
        :param update: The update of this RuleLinks.
        """
        self.openapi_types = {
            'delete': LinksDeleteRuleLink,
            'disable': LinksDisableRuleLink,
            'enable': LinksEnableRuleLink,
            'movedown': LinksMoveDownRuleLink,
            'moveup': LinksMoveUpRuleLink,
            'report_filter': LinksGetReportFilterLink,
            'run': LinksRunRuleLink,
            '_self': LinksGetRuleLink,
            'update': LinksUpdateRuleLink
        }

        self.attribute_map = {
            'delete': 'delete',
            'disable': 'disable',
            'enable': 'enable',
            'movedown': 'movedown',
            'moveup': 'moveup',
            'report_filter': 'reportFilter',
            'run': 'run',
            '_self': 'self',
            'update': 'update'
        }

        self._delete = delete
        self._disable = disable
        self._enable = enable
        self._movedown = movedown
        self._moveup = moveup
        self._report_filter = report_filter
        self._run = run
        self.__self = _self
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ruleLinks of this RuleLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this RuleLinks.


        :return: The delete of this RuleLinks.
        :rtype: LinksDeleteRuleLink
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this RuleLinks.


        :param delete: The delete of this RuleLinks.
        :type delete: LinksDeleteRuleLink
        """

        self._delete = delete

    @property
    def disable(self):
        """Gets the disable of this RuleLinks.


        :return: The disable of this RuleLinks.
        :rtype: LinksDisableRuleLink
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this RuleLinks.


        :param disable: The disable of this RuleLinks.
        :type disable: LinksDisableRuleLink
        """

        self._disable = disable

    @property
    def enable(self):
        """Gets the enable of this RuleLinks.


        :return: The enable of this RuleLinks.
        :rtype: LinksEnableRuleLink
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this RuleLinks.


        :param enable: The enable of this RuleLinks.
        :type enable: LinksEnableRuleLink
        """

        self._enable = enable

    @property
    def movedown(self):
        """Gets the movedown of this RuleLinks.


        :return: The movedown of this RuleLinks.
        :rtype: LinksMoveDownRuleLink
        """
        return self._movedown

    @movedown.setter
    def movedown(self, movedown):
        """Sets the movedown of this RuleLinks.


        :param movedown: The movedown of this RuleLinks.
        :type movedown: LinksMoveDownRuleLink
        """

        self._movedown = movedown

    @property
    def moveup(self):
        """Gets the moveup of this RuleLinks.


        :return: The moveup of this RuleLinks.
        :rtype: LinksMoveUpRuleLink
        """
        return self._moveup

    @moveup.setter
    def moveup(self, moveup):
        """Sets the moveup of this RuleLinks.


        :param moveup: The moveup of this RuleLinks.
        :type moveup: LinksMoveUpRuleLink
        """

        self._moveup = moveup

    @property
    def report_filter(self):
        """Gets the report_filter of this RuleLinks.


        :return: The report_filter of this RuleLinks.
        :rtype: LinksGetReportFilterLink
        """
        return self._report_filter

    @report_filter.setter
    def report_filter(self, report_filter):
        """Sets the report_filter of this RuleLinks.


        :param report_filter: The report_filter of this RuleLinks.
        :type report_filter: LinksGetReportFilterLink
        """

        self._report_filter = report_filter

    @property
    def run(self):
        """Gets the run of this RuleLinks.


        :return: The run of this RuleLinks.
        :rtype: LinksRunRuleLink
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this RuleLinks.


        :param run: The run of this RuleLinks.
        :type run: LinksRunRuleLink
        """

        self._run = run

    @property
    def _self(self):
        """Gets the _self of this RuleLinks.


        :return: The _self of this RuleLinks.
        :rtype: LinksGetRuleLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this RuleLinks.


        :param _self: The _self of this RuleLinks.
        :type _self: LinksGetRuleLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def update(self):
        """Gets the update of this RuleLinks.


        :return: The update of this RuleLinks.
        :rtype: LinksUpdateRuleLink
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this RuleLinks.


        :param update: The update of this RuleLinks.
        :type update: LinksUpdateRuleLink
        """

        self._update = update
