# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_header_links import OrderHeaderLinks
import re
from openapi_server import util


class OrderHeaderWithLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, beez_up_order_id: str=None, beez_up_order_url: str=None, etag: str=None, links: OrderHeaderLinks=None, marketplace_business_code: str=None, marketplace_technical_code: str=None, order_buyer_name: str=None, order_currency_code: str=None, order_invoice_number: str=None, order_invoice_uri: str=None, order_last_modification_utc_date: datetime=None, order_marketplace_last_modification_utc_date: datetime=None, order_marketplace_order_id: str=None, order_merchant_e_commerce_software_name: str=None, order_merchant_e_commerce_software_version: str=None, order_merchant_order_id: str=None, order_purchase_utc_date: datetime=None, order_status_beez_up_order_status: str=None, order_status_marketplace_order_status: str=None, order_total_price: float=None, processing: bool=None):
        """OrderHeaderWithLinks - a model defined in OpenAPI

        :param account_id: The account_id of this OrderHeaderWithLinks.
        :param beez_up_order_id: The beez_up_order_id of this OrderHeaderWithLinks.
        :param beez_up_order_url: The beez_up_order_url of this OrderHeaderWithLinks.
        :param etag: The etag of this OrderHeaderWithLinks.
        :param links: The links of this OrderHeaderWithLinks.
        :param marketplace_business_code: The marketplace_business_code of this OrderHeaderWithLinks.
        :param marketplace_technical_code: The marketplace_technical_code of this OrderHeaderWithLinks.
        :param order_buyer_name: The order_buyer_name of this OrderHeaderWithLinks.
        :param order_currency_code: The order_currency_code of this OrderHeaderWithLinks.
        :param order_invoice_number: The order_invoice_number of this OrderHeaderWithLinks.
        :param order_invoice_uri: The order_invoice_uri of this OrderHeaderWithLinks.
        :param order_last_modification_utc_date: The order_last_modification_utc_date of this OrderHeaderWithLinks.
        :param order_marketplace_last_modification_utc_date: The order_marketplace_last_modification_utc_date of this OrderHeaderWithLinks.
        :param order_marketplace_order_id: The order_marketplace_order_id of this OrderHeaderWithLinks.
        :param order_merchant_e_commerce_software_name: The order_merchant_e_commerce_software_name of this OrderHeaderWithLinks.
        :param order_merchant_e_commerce_software_version: The order_merchant_e_commerce_software_version of this OrderHeaderWithLinks.
        :param order_merchant_order_id: The order_merchant_order_id of this OrderHeaderWithLinks.
        :param order_purchase_utc_date: The order_purchase_utc_date of this OrderHeaderWithLinks.
        :param order_status_beez_up_order_status: The order_status_beez_up_order_status of this OrderHeaderWithLinks.
        :param order_status_marketplace_order_status: The order_status_marketplace_order_status of this OrderHeaderWithLinks.
        :param order_total_price: The order_total_price of this OrderHeaderWithLinks.
        :param processing: The processing of this OrderHeaderWithLinks.
        """
        self.openapi_types = {
            'account_id': int,
            'beez_up_order_id': str,
            'beez_up_order_url': str,
            'etag': str,
            'links': OrderHeaderLinks,
            'marketplace_business_code': str,
            'marketplace_technical_code': str,
            'order_buyer_name': str,
            'order_currency_code': str,
            'order_invoice_number': str,
            'order_invoice_uri': str,
            'order_last_modification_utc_date': datetime,
            'order_marketplace_last_modification_utc_date': datetime,
            'order_marketplace_order_id': str,
            'order_merchant_e_commerce_software_name': str,
            'order_merchant_e_commerce_software_version': str,
            'order_merchant_order_id': str,
            'order_purchase_utc_date': datetime,
            'order_status_beez_up_order_status': str,
            'order_status_marketplace_order_status': str,
            'order_total_price': float,
            'processing': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'beez_up_order_id': 'beezUPOrderId',
            'beez_up_order_url': 'beezUPOrderUrl',
            'etag': 'etag',
            'links': 'links',
            'marketplace_business_code': 'marketplaceBusinessCode',
            'marketplace_technical_code': 'marketplaceTechnicalCode',
            'order_buyer_name': 'order_Buyer_Name',
            'order_currency_code': 'order_CurrencyCode',
            'order_invoice_number': 'order_Invoice_Number',
            'order_invoice_uri': 'order_Invoice_Uri',
            'order_last_modification_utc_date': 'order_LastModificationUtcDate',
            'order_marketplace_last_modification_utc_date': 'order_MarketplaceLastModificationUtcDate',
            'order_marketplace_order_id': 'order_MarketplaceOrderId',
            'order_merchant_e_commerce_software_name': 'order_MerchantECommerceSoftwareName',
            'order_merchant_e_commerce_software_version': 'order_MerchantECommerceSoftwareVersion',
            'order_merchant_order_id': 'order_MerchantOrderId',
            'order_purchase_utc_date': 'order_PurchaseUtcDate',
            'order_status_beez_up_order_status': 'order_Status_BeezUPOrderStatus',
            'order_status_marketplace_order_status': 'order_Status_MarketplaceOrderStatus',
            'order_total_price': 'order_TotalPrice',
            'processing': 'processing'
        }

        self._account_id = account_id
        self._beez_up_order_id = beez_up_order_id
        self._beez_up_order_url = beez_up_order_url
        self._etag = etag
        self._links = links
        self._marketplace_business_code = marketplace_business_code
        self._marketplace_technical_code = marketplace_technical_code
        self._order_buyer_name = order_buyer_name
        self._order_currency_code = order_currency_code
        self._order_invoice_number = order_invoice_number
        self._order_invoice_uri = order_invoice_uri
        self._order_last_modification_utc_date = order_last_modification_utc_date
        self._order_marketplace_last_modification_utc_date = order_marketplace_last_modification_utc_date
        self._order_marketplace_order_id = order_marketplace_order_id
        self._order_merchant_e_commerce_software_name = order_merchant_e_commerce_software_name
        self._order_merchant_e_commerce_software_version = order_merchant_e_commerce_software_version
        self._order_merchant_order_id = order_merchant_order_id
        self._order_purchase_utc_date = order_purchase_utc_date
        self._order_status_beez_up_order_status = order_status_beez_up_order_status
        self._order_status_marketplace_order_status = order_status_marketplace_order_status
        self._order_total_price = order_total_price
        self._processing = processing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderHeaderWithLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderHeaderWithLinks of this OrderHeaderWithLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OrderHeaderWithLinks.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The account_id of this OrderHeaderWithLinks.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OrderHeaderWithLinks.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param account_id: The account_id of this OrderHeaderWithLinks.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def beez_up_order_id(self):
        """Gets the beez_up_order_id of this OrderHeaderWithLinks.

        The BeezUP Order identifier

        :return: The beez_up_order_id of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._beez_up_order_id

    @beez_up_order_id.setter
    def beez_up_order_id(self, beez_up_order_id):
        """Sets the beez_up_order_id of this OrderHeaderWithLinks.

        The BeezUP Order identifier

        :param beez_up_order_id: The beez_up_order_id of this OrderHeaderWithLinks.
        :type beez_up_order_id: str
        """
        if beez_up_order_id is None:
            raise ValueError("Invalid value for `beez_up_order_id`, must not be `None`")

        self._beez_up_order_id = beez_up_order_id

    @property
    def beez_up_order_url(self):
        """Gets the beez_up_order_url of this OrderHeaderWithLinks.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The beez_up_order_url of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._beez_up_order_url

    @beez_up_order_url.setter
    def beez_up_order_url(self, beez_up_order_url):
        """Sets the beez_up_order_url of this OrderHeaderWithLinks.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param beez_up_order_url: The beez_up_order_url of this OrderHeaderWithLinks.
        :type beez_up_order_url: str
        """
        if beez_up_order_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', beez_up_order_url):
            raise ValueError("Invalid value for `beez_up_order_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._beez_up_order_url = beez_up_order_url

    @property
    def etag(self):
        """Gets the etag of this OrderHeaderWithLinks.

        ETag value to identify the order.\\ This information is required for the operation GetOrder and ChangeOrder.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 

        :return: The etag of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this OrderHeaderWithLinks.

        ETag value to identify the order.\\ This information is required for the operation GetOrder and ChangeOrder.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 

        :param etag: The etag of this OrderHeaderWithLinks.
        :type etag: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")

        self._etag = etag

    @property
    def links(self):
        """Gets the links of this OrderHeaderWithLinks.


        :return: The links of this OrderHeaderWithLinks.
        :rtype: OrderHeaderLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OrderHeaderWithLinks.


        :param links: The links of this OrderHeaderWithLinks.
        :type links: OrderHeaderLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def marketplace_business_code(self):
        """Gets the marketplace_business_code of this OrderHeaderWithLinks.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :return: The marketplace_business_code of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._marketplace_business_code

    @marketplace_business_code.setter
    def marketplace_business_code(self, marketplace_business_code):
        """Sets the marketplace_business_code of this OrderHeaderWithLinks.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :param marketplace_business_code: The marketplace_business_code of this OrderHeaderWithLinks.
        :type marketplace_business_code: str
        """
        if marketplace_business_code is None:
            raise ValueError("Invalid value for `marketplace_business_code`, must not be `None`")

        self._marketplace_business_code = marketplace_business_code

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this OrderHeaderWithLinks.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this OrderHeaderWithLinks.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this OrderHeaderWithLinks.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code

    @property
    def order_buyer_name(self):
        """Gets the order_buyer_name of this OrderHeaderWithLinks.

        Buyer full name

        :return: The order_buyer_name of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_buyer_name

    @order_buyer_name.setter
    def order_buyer_name(self, order_buyer_name):
        """Sets the order_buyer_name of this OrderHeaderWithLinks.

        Buyer full name

        :param order_buyer_name: The order_buyer_name of this OrderHeaderWithLinks.
        :type order_buyer_name: str
        """

        self._order_buyer_name = order_buyer_name

    @property
    def order_currency_code(self):
        """Gets the order_currency_code of this OrderHeaderWithLinks.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The order_currency_code of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_currency_code

    @order_currency_code.setter
    def order_currency_code(self, order_currency_code):
        """Sets the order_currency_code of this OrderHeaderWithLinks.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param order_currency_code: The order_currency_code of this OrderHeaderWithLinks.
        :type order_currency_code: str
        """

        self._order_currency_code = order_currency_code

    @property
    def order_invoice_number(self):
        """Gets the order_invoice_number of this OrderHeaderWithLinks.

        The order invoice number

        :return: The order_invoice_number of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_invoice_number

    @order_invoice_number.setter
    def order_invoice_number(self, order_invoice_number):
        """Sets the order_invoice_number of this OrderHeaderWithLinks.

        The order invoice number

        :param order_invoice_number: The order_invoice_number of this OrderHeaderWithLinks.
        :type order_invoice_number: str
        """

        self._order_invoice_number = order_invoice_number

    @property
    def order_invoice_uri(self):
        """Gets the order_invoice_uri of this OrderHeaderWithLinks.

        The order invoice URI

        :return: The order_invoice_uri of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_invoice_uri

    @order_invoice_uri.setter
    def order_invoice_uri(self, order_invoice_uri):
        """Sets the order_invoice_uri of this OrderHeaderWithLinks.

        The order invoice URI

        :param order_invoice_uri: The order_invoice_uri of this OrderHeaderWithLinks.
        :type order_invoice_uri: str
        """

        self._order_invoice_uri = order_invoice_uri

    @property
    def order_last_modification_utc_date(self):
        """Gets the order_last_modification_utc_date of this OrderHeaderWithLinks.

        The last modification UTC date done by BeezUP of this order

        :return: The order_last_modification_utc_date of this OrderHeaderWithLinks.
        :rtype: datetime
        """
        return self._order_last_modification_utc_date

    @order_last_modification_utc_date.setter
    def order_last_modification_utc_date(self, order_last_modification_utc_date):
        """Sets the order_last_modification_utc_date of this OrderHeaderWithLinks.

        The last modification UTC date done by BeezUP of this order

        :param order_last_modification_utc_date: The order_last_modification_utc_date of this OrderHeaderWithLinks.
        :type order_last_modification_utc_date: datetime
        """
        if order_last_modification_utc_date is None:
            raise ValueError("Invalid value for `order_last_modification_utc_date`, must not be `None`")

        self._order_last_modification_utc_date = order_last_modification_utc_date

    @property
    def order_marketplace_last_modification_utc_date(self):
        """Gets the order_marketplace_last_modification_utc_date of this OrderHeaderWithLinks.

        The last modification UTC date done by the marketplace on this order

        :return: The order_marketplace_last_modification_utc_date of this OrderHeaderWithLinks.
        :rtype: datetime
        """
        return self._order_marketplace_last_modification_utc_date

    @order_marketplace_last_modification_utc_date.setter
    def order_marketplace_last_modification_utc_date(self, order_marketplace_last_modification_utc_date):
        """Sets the order_marketplace_last_modification_utc_date of this OrderHeaderWithLinks.

        The last modification UTC date done by the marketplace on this order

        :param order_marketplace_last_modification_utc_date: The order_marketplace_last_modification_utc_date of this OrderHeaderWithLinks.
        :type order_marketplace_last_modification_utc_date: datetime
        """
        if order_marketplace_last_modification_utc_date is None:
            raise ValueError("Invalid value for `order_marketplace_last_modification_utc_date`, must not be `None`")

        self._order_marketplace_last_modification_utc_date = order_marketplace_last_modification_utc_date

    @property
    def order_marketplace_order_id(self):
        """Gets the order_marketplace_order_id of this OrderHeaderWithLinks.

        The order marketplace identifier

        :return: The order_marketplace_order_id of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_marketplace_order_id

    @order_marketplace_order_id.setter
    def order_marketplace_order_id(self, order_marketplace_order_id):
        """Sets the order_marketplace_order_id of this OrderHeaderWithLinks.

        The order marketplace identifier

        :param order_marketplace_order_id: The order_marketplace_order_id of this OrderHeaderWithLinks.
        :type order_marketplace_order_id: str
        """
        if order_marketplace_order_id is None:
            raise ValueError("Invalid value for `order_marketplace_order_id`, must not be `None`")

        self._order_marketplace_order_id = order_marketplace_order_id

    @property
    def order_merchant_e_commerce_software_name(self):
        """Gets the order_merchant_e_commerce_software_name of this OrderHeaderWithLinks.

        The e-commerce software name of the merchant

        :return: The order_merchant_e_commerce_software_name of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_merchant_e_commerce_software_name

    @order_merchant_e_commerce_software_name.setter
    def order_merchant_e_commerce_software_name(self, order_merchant_e_commerce_software_name):
        """Sets the order_merchant_e_commerce_software_name of this OrderHeaderWithLinks.

        The e-commerce software name of the merchant

        :param order_merchant_e_commerce_software_name: The order_merchant_e_commerce_software_name of this OrderHeaderWithLinks.
        :type order_merchant_e_commerce_software_name: str
        """

        self._order_merchant_e_commerce_software_name = order_merchant_e_commerce_software_name

    @property
    def order_merchant_e_commerce_software_version(self):
        """Gets the order_merchant_e_commerce_software_version of this OrderHeaderWithLinks.

        The e-commece software version of the merchant

        :return: The order_merchant_e_commerce_software_version of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_merchant_e_commerce_software_version

    @order_merchant_e_commerce_software_version.setter
    def order_merchant_e_commerce_software_version(self, order_merchant_e_commerce_software_version):
        """Sets the order_merchant_e_commerce_software_version of this OrderHeaderWithLinks.

        The e-commece software version of the merchant

        :param order_merchant_e_commerce_software_version: The order_merchant_e_commerce_software_version of this OrderHeaderWithLinks.
        :type order_merchant_e_commerce_software_version: str
        """

        self._order_merchant_e_commerce_software_version = order_merchant_e_commerce_software_version

    @property
    def order_merchant_order_id(self):
        """Gets the order_merchant_order_id of this OrderHeaderWithLinks.

        The order merchant identifier

        :return: The order_merchant_order_id of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_merchant_order_id

    @order_merchant_order_id.setter
    def order_merchant_order_id(self, order_merchant_order_id):
        """Sets the order_merchant_order_id of this OrderHeaderWithLinks.

        The order merchant identifier

        :param order_merchant_order_id: The order_merchant_order_id of this OrderHeaderWithLinks.
        :type order_merchant_order_id: str
        """

        self._order_merchant_order_id = order_merchant_order_id

    @property
    def order_purchase_utc_date(self):
        """Gets the order_purchase_utc_date of this OrderHeaderWithLinks.

        The purchase date of this order

        :return: The order_purchase_utc_date of this OrderHeaderWithLinks.
        :rtype: datetime
        """
        return self._order_purchase_utc_date

    @order_purchase_utc_date.setter
    def order_purchase_utc_date(self, order_purchase_utc_date):
        """Sets the order_purchase_utc_date of this OrderHeaderWithLinks.

        The purchase date of this order

        :param order_purchase_utc_date: The order_purchase_utc_date of this OrderHeaderWithLinks.
        :type order_purchase_utc_date: datetime
        """
        if order_purchase_utc_date is None:
            raise ValueError("Invalid value for `order_purchase_utc_date`, must not be `None`")

        self._order_purchase_utc_date = order_purchase_utc_date

    @property
    def order_status_beez_up_order_status(self):
        """Gets the order_status_beez_up_order_status of this OrderHeaderWithLinks.

        BeezUP order status. Unified for all marketplaces.

        :return: The order_status_beez_up_order_status of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_status_beez_up_order_status

    @order_status_beez_up_order_status.setter
    def order_status_beez_up_order_status(self, order_status_beez_up_order_status):
        """Sets the order_status_beez_up_order_status of this OrderHeaderWithLinks.

        BeezUP order status. Unified for all marketplaces.

        :param order_status_beez_up_order_status: The order_status_beez_up_order_status of this OrderHeaderWithLinks.
        :type order_status_beez_up_order_status: str
        """
        if order_status_beez_up_order_status is None:
            raise ValueError("Invalid value for `order_status_beez_up_order_status`, must not be `None`")

        self._order_status_beez_up_order_status = order_status_beez_up_order_status

    @property
    def order_status_marketplace_order_status(self):
        """Gets the order_status_marketplace_order_status of this OrderHeaderWithLinks.

        The marketplace order state

        :return: The order_status_marketplace_order_status of this OrderHeaderWithLinks.
        :rtype: str
        """
        return self._order_status_marketplace_order_status

    @order_status_marketplace_order_status.setter
    def order_status_marketplace_order_status(self, order_status_marketplace_order_status):
        """Sets the order_status_marketplace_order_status of this OrderHeaderWithLinks.

        The marketplace order state

        :param order_status_marketplace_order_status: The order_status_marketplace_order_status of this OrderHeaderWithLinks.
        :type order_status_marketplace_order_status: str
        """

        self._order_status_marketplace_order_status = order_status_marketplace_order_status

    @property
    def order_total_price(self):
        """Gets the order_total_price of this OrderHeaderWithLinks.

        The total price of this order (corresponding to the amount paid by the customer)

        :return: The order_total_price of this OrderHeaderWithLinks.
        :rtype: float
        """
        return self._order_total_price

    @order_total_price.setter
    def order_total_price(self, order_total_price):
        """Sets the order_total_price of this OrderHeaderWithLinks.

        The total price of this order (corresponding to the amount paid by the customer)

        :param order_total_price: The order_total_price of this OrderHeaderWithLinks.
        :type order_total_price: float
        """

        self._order_total_price = order_total_price

    @property
    def processing(self):
        """Gets the processing of this OrderHeaderWithLinks.

        If true, there is currently a harvest or an order change in progress. Otherwise false.

        :return: The processing of this OrderHeaderWithLinks.
        :rtype: bool
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this OrderHeaderWithLinks.

        If true, there is currently a harvest or an order change in progress. Otherwise false.

        :param processing: The processing of this OrderHeaderWithLinks.
        :type processing: bool
        """
        if processing is None:
            raise ValueError("Invalid value for `processing`, must not be `None`")

        self._processing = processing
