# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_clear_merchant_order_info_link import LinksClearMerchantOrderInfoLink
from openapi_server.models.links_get_order_history_link import LinksGetOrderHistoryLink
from openapi_server.models.links_get_order_link import LinksGetOrderLink
from openapi_server.models.links_harvest_order_link import LinksHarvestOrderLink
from openapi_server.models.links_set_merchant_order_info_link import LinksSetMerchantOrderInfoLink
from openapi_server import util


class OrderLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _self: LinksGetOrderLink=None, clear_merchant_info: LinksClearMerchantOrderInfoLink=None, harvest: LinksHarvestOrderLink=None, history: LinksGetOrderHistoryLink=None, set_merchant_info: LinksSetMerchantOrderInfoLink=None):
        """OrderLinks - a model defined in OpenAPI

        :param _self: The _self of this OrderLinks.
        :param clear_merchant_info: The clear_merchant_info of this OrderLinks.
        :param harvest: The harvest of this OrderLinks.
        :param history: The history of this OrderLinks.
        :param set_merchant_info: The set_merchant_info of this OrderLinks.
        """
        self.openapi_types = {
            '_self': LinksGetOrderLink,
            'clear_merchant_info': LinksClearMerchantOrderInfoLink,
            'harvest': LinksHarvestOrderLink,
            'history': LinksGetOrderHistoryLink,
            'set_merchant_info': LinksSetMerchantOrderInfoLink
        }

        self.attribute_map = {
            '_self': 'self',
            'clear_merchant_info': 'clearMerchantInfo',
            'harvest': 'harvest',
            'history': 'history',
            'set_merchant_info': 'setMerchantInfo'
        }

        self.__self = _self
        self._clear_merchant_info = clear_merchant_info
        self._harvest = harvest
        self._history = history
        self._set_merchant_info = set_merchant_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderLinks of this OrderLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _self(self):
        """Gets the _self of this OrderLinks.


        :return: The _self of this OrderLinks.
        :rtype: LinksGetOrderLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OrderLinks.


        :param _self: The _self of this OrderLinks.
        :type _self: LinksGetOrderLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def clear_merchant_info(self):
        """Gets the clear_merchant_info of this OrderLinks.


        :return: The clear_merchant_info of this OrderLinks.
        :rtype: LinksClearMerchantOrderInfoLink
        """
        return self._clear_merchant_info

    @clear_merchant_info.setter
    def clear_merchant_info(self, clear_merchant_info):
        """Sets the clear_merchant_info of this OrderLinks.


        :param clear_merchant_info: The clear_merchant_info of this OrderLinks.
        :type clear_merchant_info: LinksClearMerchantOrderInfoLink
        """
        if clear_merchant_info is None:
            raise ValueError("Invalid value for `clear_merchant_info`, must not be `None`")

        self._clear_merchant_info = clear_merchant_info

    @property
    def harvest(self):
        """Gets the harvest of this OrderLinks.


        :return: The harvest of this OrderLinks.
        :rtype: LinksHarvestOrderLink
        """
        return self._harvest

    @harvest.setter
    def harvest(self, harvest):
        """Sets the harvest of this OrderLinks.


        :param harvest: The harvest of this OrderLinks.
        :type harvest: LinksHarvestOrderLink
        """
        if harvest is None:
            raise ValueError("Invalid value for `harvest`, must not be `None`")

        self._harvest = harvest

    @property
    def history(self):
        """Gets the history of this OrderLinks.


        :return: The history of this OrderLinks.
        :rtype: LinksGetOrderHistoryLink
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this OrderLinks.


        :param history: The history of this OrderLinks.
        :type history: LinksGetOrderHistoryLink
        """
        if history is None:
            raise ValueError("Invalid value for `history`, must not be `None`")

        self._history = history

    @property
    def set_merchant_info(self):
        """Gets the set_merchant_info of this OrderLinks.


        :return: The set_merchant_info of this OrderLinks.
        :rtype: LinksSetMerchantOrderInfoLink
        """
        return self._set_merchant_info

    @set_merchant_info.setter
    def set_merchant_info(self, set_merchant_info):
        """Sets the set_merchant_info of this OrderLinks.


        :param set_merchant_info: The set_merchant_info of this OrderLinks.
        :type set_merchant_info: LinksSetMerchantOrderInfoLink
        """
        if set_merchant_info is None:
            raise ValueError("Invalid value for `set_merchant_info`, must not be `None`")

        self._set_merchant_info = set_merchant_info
