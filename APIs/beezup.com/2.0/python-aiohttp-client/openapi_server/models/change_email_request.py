# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ChangeEmailRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_email: str=None):
        """ChangeEmailRequest - a model defined in OpenAPI

        :param new_email: The new_email of this ChangeEmailRequest.
        """
        self.openapi_types = {
            'new_email': str
        }

        self.attribute_map = {
            'new_email': 'newEmail'
        }

        self._new_email = new_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeEmailRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The changeEmailRequest of this ChangeEmailRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_email(self):
        """Gets the new_email of this ChangeEmailRequest.

        The email

        :return: The new_email of this ChangeEmailRequest.
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this ChangeEmailRequest.

        The email

        :param new_email: The new_email of this ChangeEmailRequest.
        :type new_email: str
        """
        if new_email is None:
            raise ValueError("Invalid value for `new_email`, must not be `None`")
        if new_email is not None and not re.search(r'^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$', new_email):
            raise ValueError("Invalid value for `new_email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/`")

        self._new_email = new_email
