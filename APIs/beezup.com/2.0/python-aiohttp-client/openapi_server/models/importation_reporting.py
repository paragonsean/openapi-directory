# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_user_error_message import BeezUPCommonUserErrorMessage
from openapi_server.models.importation_reporting_links import ImportationReportingLinks
from openapi_server import util


class ImportationReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_imported: bool=None, begin_utc_date: datetime=None, end_utc_date: datetime=None, errors: List[BeezUPCommonUserErrorMessage]=None, execution_id: str=None, input_configuration_url: str=None, last_update_utc_date: datetime=None, links: ImportationReportingLinks=None, step_name: str=None, steps: Dict[str, bool]=None, success: bool=None, total_product_count: int=None, total_product_error_count: int=None, total_product_success_count: int=None, user_id: str=None):
        """ImportationReporting - a model defined in OpenAPI

        :param auto_imported: The auto_imported of this ImportationReporting.
        :param begin_utc_date: The begin_utc_date of this ImportationReporting.
        :param end_utc_date: The end_utc_date of this ImportationReporting.
        :param errors: The errors of this ImportationReporting.
        :param execution_id: The execution_id of this ImportationReporting.
        :param input_configuration_url: The input_configuration_url of this ImportationReporting.
        :param last_update_utc_date: The last_update_utc_date of this ImportationReporting.
        :param links: The links of this ImportationReporting.
        :param step_name: The step_name of this ImportationReporting.
        :param steps: The steps of this ImportationReporting.
        :param success: The success of this ImportationReporting.
        :param total_product_count: The total_product_count of this ImportationReporting.
        :param total_product_error_count: The total_product_error_count of this ImportationReporting.
        :param total_product_success_count: The total_product_success_count of this ImportationReporting.
        :param user_id: The user_id of this ImportationReporting.
        """
        self.openapi_types = {
            'auto_imported': bool,
            'begin_utc_date': datetime,
            'end_utc_date': datetime,
            'errors': List[BeezUPCommonUserErrorMessage],
            'execution_id': str,
            'input_configuration_url': str,
            'last_update_utc_date': datetime,
            'links': ImportationReportingLinks,
            'step_name': str,
            'steps': Dict[str, bool],
            'success': bool,
            'total_product_count': int,
            'total_product_error_count': int,
            'total_product_success_count': int,
            'user_id': str
        }

        self.attribute_map = {
            'auto_imported': 'autoImported',
            'begin_utc_date': 'beginUtcDate',
            'end_utc_date': 'endUtcDate',
            'errors': 'errors',
            'execution_id': 'executionId',
            'input_configuration_url': 'inputConfigurationUrl',
            'last_update_utc_date': 'lastUpdateUtcDate',
            'links': 'links',
            'step_name': 'stepName',
            'steps': 'steps',
            'success': 'success',
            'total_product_count': 'totalProductCount',
            'total_product_error_count': 'totalProductErrorCount',
            'total_product_success_count': 'totalProductSuccessCount',
            'user_id': 'userId'
        }

        self._auto_imported = auto_imported
        self._begin_utc_date = begin_utc_date
        self._end_utc_date = end_utc_date
        self._errors = errors
        self._execution_id = execution_id
        self._input_configuration_url = input_configuration_url
        self._last_update_utc_date = last_update_utc_date
        self._links = links
        self._step_name = step_name
        self._steps = steps
        self._success = success
        self._total_product_count = total_product_count
        self._total_product_error_count = total_product_error_count
        self._total_product_success_count = total_product_success_count
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportationReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importationReporting of this ImportationReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_imported(self):
        """Gets the auto_imported of this ImportationReporting.

        Indicate if this importation is an auto import or not.

        :return: The auto_imported of this ImportationReporting.
        :rtype: bool
        """
        return self._auto_imported

    @auto_imported.setter
    def auto_imported(self, auto_imported):
        """Sets the auto_imported of this ImportationReporting.

        Indicate if this importation is an auto import or not.

        :param auto_imported: The auto_imported of this ImportationReporting.
        :type auto_imported: bool
        """

        self._auto_imported = auto_imported

    @property
    def begin_utc_date(self):
        """Gets the begin_utc_date of this ImportationReporting.

        Indicate the begin UTC date of this importation.

        :return: The begin_utc_date of this ImportationReporting.
        :rtype: datetime
        """
        return self._begin_utc_date

    @begin_utc_date.setter
    def begin_utc_date(self, begin_utc_date):
        """Sets the begin_utc_date of this ImportationReporting.

        Indicate the begin UTC date of this importation.

        :param begin_utc_date: The begin_utc_date of this ImportationReporting.
        :type begin_utc_date: datetime
        """
        if begin_utc_date is None:
            raise ValueError("Invalid value for `begin_utc_date`, must not be `None`")

        self._begin_utc_date = begin_utc_date

    @property
    def end_utc_date(self):
        """Gets the end_utc_date of this ImportationReporting.

        Indicate the end UTC date of this importation.

        :return: The end_utc_date of this ImportationReporting.
        :rtype: datetime
        """
        return self._end_utc_date

    @end_utc_date.setter
    def end_utc_date(self, end_utc_date):
        """Sets the end_utc_date of this ImportationReporting.

        Indicate the end UTC date of this importation.

        :param end_utc_date: The end_utc_date of this ImportationReporting.
        :type end_utc_date: datetime
        """

        self._end_utc_date = end_utc_date

    @property
    def errors(self):
        """Gets the errors of this ImportationReporting.

        Indicate the error message list related to this importation.

        :return: The errors of this ImportationReporting.
        :rtype: List[BeezUPCommonUserErrorMessage]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ImportationReporting.

        Indicate the error message list related to this importation.

        :param errors: The errors of this ImportationReporting.
        :type errors: List[BeezUPCommonUserErrorMessage]
        """

        self._errors = errors

    @property
    def execution_id(self):
        """Gets the execution_id of this ImportationReporting.

        The execution identifier of the catalog importation

        :return: The execution_id of this ImportationReporting.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ImportationReporting.

        The execution identifier of the catalog importation

        :param execution_id: The execution_id of this ImportationReporting.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")

        self._execution_id = execution_id

    @property
    def input_configuration_url(self):
        """Gets the input_configuration_url of this ImportationReporting.

        Indicate the input url of this importation.

        :return: The input_configuration_url of this ImportationReporting.
        :rtype: str
        """
        return self._input_configuration_url

    @input_configuration_url.setter
    def input_configuration_url(self, input_configuration_url):
        """Sets the input_configuration_url of this ImportationReporting.

        Indicate the input url of this importation.

        :param input_configuration_url: The input_configuration_url of this ImportationReporting.
        :type input_configuration_url: str
        """

        self._input_configuration_url = input_configuration_url

    @property
    def last_update_utc_date(self):
        """Gets the last_update_utc_date of this ImportationReporting.

        Indicate the last update UTC date of the reporting.

        :return: The last_update_utc_date of this ImportationReporting.
        :rtype: datetime
        """
        return self._last_update_utc_date

    @last_update_utc_date.setter
    def last_update_utc_date(self, last_update_utc_date):
        """Sets the last_update_utc_date of this ImportationReporting.

        Indicate the last update UTC date of the reporting.

        :param last_update_utc_date: The last_update_utc_date of this ImportationReporting.
        :type last_update_utc_date: datetime
        """
        if last_update_utc_date is None:
            raise ValueError("Invalid value for `last_update_utc_date`, must not be `None`")

        self._last_update_utc_date = last_update_utc_date

    @property
    def links(self):
        """Gets the links of this ImportationReporting.


        :return: The links of this ImportationReporting.
        :rtype: ImportationReportingLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ImportationReporting.


        :param links: The links of this ImportationReporting.
        :type links: ImportationReportingLinks
        """

        self._links = links

    @property
    def step_name(self):
        """Gets the step_name of this ImportationReporting.

        The last step name of the importation process

        :return: The step_name of this ImportationReporting.
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this ImportationReporting.

        The last step name of the importation process

        :param step_name: The step_name of this ImportationReporting.
        :type step_name: str
        """

        self._step_name = step_name

    @property
    def steps(self):
        """Gets the steps of this ImportationReporting.

        Indicate the steps that have been passed during the importation process

        :return: The steps of this ImportationReporting.
        :rtype: Dict[str, bool]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ImportationReporting.

        Indicate the steps that have been passed during the importation process

        :param steps: The steps of this ImportationReporting.
        :type steps: Dict[str, bool]
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")

        self._steps = steps

    @property
    def success(self):
        """Gets the success of this ImportationReporting.

        Indicate if the importation succeed or not.

        :return: The success of this ImportationReporting.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ImportationReporting.

        Indicate if the importation succeed or not.

        :param success: The success of this ImportationReporting.
        :type success: bool
        """

        self._success = success

    @property
    def total_product_count(self):
        """Gets the total_product_count of this ImportationReporting.

        Indicate the total product count detected in the catalog during the importation.

        :return: The total_product_count of this ImportationReporting.
        :rtype: int
        """
        return self._total_product_count

    @total_product_count.setter
    def total_product_count(self, total_product_count):
        """Sets the total_product_count of this ImportationReporting.

        Indicate the total product count detected in the catalog during the importation.

        :param total_product_count: The total_product_count of this ImportationReporting.
        :type total_product_count: int
        """

        self._total_product_count = total_product_count

    @property
    def total_product_error_count(self):
        """Gets the total_product_error_count of this ImportationReporting.

        Indicate the total product count in error detected in the catalog during the importation.

        :return: The total_product_error_count of this ImportationReporting.
        :rtype: int
        """
        return self._total_product_error_count

    @total_product_error_count.setter
    def total_product_error_count(self, total_product_error_count):
        """Sets the total_product_error_count of this ImportationReporting.

        Indicate the total product count in error detected in the catalog during the importation.

        :param total_product_error_count: The total_product_error_count of this ImportationReporting.
        :type total_product_error_count: int
        """

        self._total_product_error_count = total_product_error_count

    @property
    def total_product_success_count(self):
        """Gets the total_product_success_count of this ImportationReporting.

        Indicate the total product count in success in the catalog during the importation.

        :return: The total_product_success_count of this ImportationReporting.
        :rtype: int
        """
        return self._total_product_success_count

    @total_product_success_count.setter
    def total_product_success_count(self, total_product_success_count):
        """Sets the total_product_success_count of this ImportationReporting.

        Indicate the total product count in success in the catalog during the importation.

        :param total_product_success_count: The total_product_success_count of this ImportationReporting.
        :type total_product_success_count: int
        """

        self._total_product_success_count = total_product_success_count

    @property
    def user_id(self):
        """Gets the user_id of this ImportationReporting.

        The user identifier

        :return: The user_id of this ImportationReporting.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ImportationReporting.

        The user identifier

        :param user_id: The user_id of this ImportationReporting.
        :type user_id: str
        """

        self._user_id = user_id
