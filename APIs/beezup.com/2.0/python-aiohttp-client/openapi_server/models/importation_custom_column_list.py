# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_column_list_links import CustomColumnListLinks
from openapi_server.models.importation_custom_column import ImportationCustomColumn
from openapi_server import util


class ImportationCustomColumnList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_columns: List[ImportationCustomColumn]=None, links: CustomColumnListLinks=None):
        """ImportationCustomColumnList - a model defined in OpenAPI

        :param custom_columns: The custom_columns of this ImportationCustomColumnList.
        :param links: The links of this ImportationCustomColumnList.
        """
        self.openapi_types = {
            'custom_columns': List[ImportationCustomColumn],
            'links': CustomColumnListLinks
        }

        self.attribute_map = {
            'custom_columns': 'customColumns',
            'links': 'links'
        }

        self._custom_columns = custom_columns
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportationCustomColumnList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importationCustomColumnList of this ImportationCustomColumnList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_columns(self):
        """Gets the custom_columns of this ImportationCustomColumnList.


        :return: The custom_columns of this ImportationCustomColumnList.
        :rtype: List[ImportationCustomColumn]
        """
        return self._custom_columns

    @custom_columns.setter
    def custom_columns(self, custom_columns):
        """Sets the custom_columns of this ImportationCustomColumnList.


        :param custom_columns: The custom_columns of this ImportationCustomColumnList.
        :type custom_columns: List[ImportationCustomColumn]
        """
        if custom_columns is None:
            raise ValueError("Invalid value for `custom_columns`, must not be `None`")

        self._custom_columns = custom_columns

    @property
    def links(self):
        """Gets the links of this ImportationCustomColumnList.


        :return: The links of this ImportationCustomColumnList.
        :rtype: CustomColumnListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ImportationCustomColumnList.


        :param links: The links of this ImportationCustomColumnList.
        :type links: CustomColumnListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
