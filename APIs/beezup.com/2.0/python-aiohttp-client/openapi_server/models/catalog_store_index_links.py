# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_auto_get_auto_import_configuration_link import LinksAutoGetAutoImportConfigurationLink
from openapi_server.models.links_catalog_compute_expression_link import LinksCatalogComputeExpressionLink
from openapi_server.models.links_catalog_get_catalog_columns_link import LinksCatalogGetCatalogColumnsLink
from openapi_server.models.links_catalog_get_categories_link import LinksCatalogGetCategoriesLink
from openapi_server.models.links_catalog_get_custom_columns_link import LinksCatalogGetCustomColumnsLink
from openapi_server.models.links_catalog_get_products_link import LinksCatalogGetProductsLink
from openapi_server.models.links_catalog_get_random_products_link import LinksCatalogGetRandomProductsLink
from openapi_server.models.links_catalog_store_index_link import LinksCatalogStoreIndexLink
from openapi_server.models.links_importation_get_manual_update_last_input_config_link import LinksImportationGetManualUpdateLastInputConfigLink
from openapi_server.models.links_importation_get_reportings_link import LinksImportationGetReportingsLink
from openapi_server.models.links_importation_start_manual_update_link import LinksImportationStartManualUpdateLink
from openapi_server import util


class CatalogStoreIndexLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_import_info: LinksAutoGetAutoImportConfigurationLink=None, catalog_columns: LinksCatalogGetCatalogColumnsLink=None, categories: LinksCatalogGetCategoriesLink=None, compute_expression: LinksCatalogComputeExpressionLink=None, custom_columns: LinksCatalogGetCustomColumnsLink=None, importations: LinksImportationGetReportingsLink=None, input_configuration: LinksImportationGetManualUpdateLastInputConfigLink=None, products: LinksCatalogGetProductsLink=None, random_products: LinksCatalogGetRandomProductsLink=None, _self: LinksCatalogStoreIndexLink=None, start_importation: LinksImportationStartManualUpdateLink=None):
        """CatalogStoreIndexLinks - a model defined in OpenAPI

        :param auto_import_info: The auto_import_info of this CatalogStoreIndexLinks.
        :param catalog_columns: The catalog_columns of this CatalogStoreIndexLinks.
        :param categories: The categories of this CatalogStoreIndexLinks.
        :param compute_expression: The compute_expression of this CatalogStoreIndexLinks.
        :param custom_columns: The custom_columns of this CatalogStoreIndexLinks.
        :param importations: The importations of this CatalogStoreIndexLinks.
        :param input_configuration: The input_configuration of this CatalogStoreIndexLinks.
        :param products: The products of this CatalogStoreIndexLinks.
        :param random_products: The random_products of this CatalogStoreIndexLinks.
        :param _self: The _self of this CatalogStoreIndexLinks.
        :param start_importation: The start_importation of this CatalogStoreIndexLinks.
        """
        self.openapi_types = {
            'auto_import_info': LinksAutoGetAutoImportConfigurationLink,
            'catalog_columns': LinksCatalogGetCatalogColumnsLink,
            'categories': LinksCatalogGetCategoriesLink,
            'compute_expression': LinksCatalogComputeExpressionLink,
            'custom_columns': LinksCatalogGetCustomColumnsLink,
            'importations': LinksImportationGetReportingsLink,
            'input_configuration': LinksImportationGetManualUpdateLastInputConfigLink,
            'products': LinksCatalogGetProductsLink,
            'random_products': LinksCatalogGetRandomProductsLink,
            '_self': LinksCatalogStoreIndexLink,
            'start_importation': LinksImportationStartManualUpdateLink
        }

        self.attribute_map = {
            'auto_import_info': 'autoImportInfo',
            'catalog_columns': 'catalogColumns',
            'categories': 'categories',
            'compute_expression': 'computeExpression',
            'custom_columns': 'customColumns',
            'importations': 'importations',
            'input_configuration': 'inputConfiguration',
            'products': 'products',
            'random_products': 'randomProducts',
            '_self': 'self',
            'start_importation': 'startImportation'
        }

        self._auto_import_info = auto_import_info
        self._catalog_columns = catalog_columns
        self._categories = categories
        self._compute_expression = compute_expression
        self._custom_columns = custom_columns
        self._importations = importations
        self._input_configuration = input_configuration
        self._products = products
        self._random_products = random_products
        self.__self = _self
        self._start_importation = start_importation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogStoreIndexLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogStoreIndexLinks of this CatalogStoreIndexLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_import_info(self):
        """Gets the auto_import_info of this CatalogStoreIndexLinks.


        :return: The auto_import_info of this CatalogStoreIndexLinks.
        :rtype: LinksAutoGetAutoImportConfigurationLink
        """
        return self._auto_import_info

    @auto_import_info.setter
    def auto_import_info(self, auto_import_info):
        """Sets the auto_import_info of this CatalogStoreIndexLinks.


        :param auto_import_info: The auto_import_info of this CatalogStoreIndexLinks.
        :type auto_import_info: LinksAutoGetAutoImportConfigurationLink
        """

        self._auto_import_info = auto_import_info

    @property
    def catalog_columns(self):
        """Gets the catalog_columns of this CatalogStoreIndexLinks.


        :return: The catalog_columns of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogGetCatalogColumnsLink
        """
        return self._catalog_columns

    @catalog_columns.setter
    def catalog_columns(self, catalog_columns):
        """Sets the catalog_columns of this CatalogStoreIndexLinks.


        :param catalog_columns: The catalog_columns of this CatalogStoreIndexLinks.
        :type catalog_columns: LinksCatalogGetCatalogColumnsLink
        """

        self._catalog_columns = catalog_columns

    @property
    def categories(self):
        """Gets the categories of this CatalogStoreIndexLinks.


        :return: The categories of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogGetCategoriesLink
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CatalogStoreIndexLinks.


        :param categories: The categories of this CatalogStoreIndexLinks.
        :type categories: LinksCatalogGetCategoriesLink
        """

        self._categories = categories

    @property
    def compute_expression(self):
        """Gets the compute_expression of this CatalogStoreIndexLinks.


        :return: The compute_expression of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogComputeExpressionLink
        """
        return self._compute_expression

    @compute_expression.setter
    def compute_expression(self, compute_expression):
        """Sets the compute_expression of this CatalogStoreIndexLinks.


        :param compute_expression: The compute_expression of this CatalogStoreIndexLinks.
        :type compute_expression: LinksCatalogComputeExpressionLink
        """

        self._compute_expression = compute_expression

    @property
    def custom_columns(self):
        """Gets the custom_columns of this CatalogStoreIndexLinks.


        :return: The custom_columns of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogGetCustomColumnsLink
        """
        return self._custom_columns

    @custom_columns.setter
    def custom_columns(self, custom_columns):
        """Sets the custom_columns of this CatalogStoreIndexLinks.


        :param custom_columns: The custom_columns of this CatalogStoreIndexLinks.
        :type custom_columns: LinksCatalogGetCustomColumnsLink
        """

        self._custom_columns = custom_columns

    @property
    def importations(self):
        """Gets the importations of this CatalogStoreIndexLinks.


        :return: The importations of this CatalogStoreIndexLinks.
        :rtype: LinksImportationGetReportingsLink
        """
        return self._importations

    @importations.setter
    def importations(self, importations):
        """Sets the importations of this CatalogStoreIndexLinks.


        :param importations: The importations of this CatalogStoreIndexLinks.
        :type importations: LinksImportationGetReportingsLink
        """

        self._importations = importations

    @property
    def input_configuration(self):
        """Gets the input_configuration of this CatalogStoreIndexLinks.


        :return: The input_configuration of this CatalogStoreIndexLinks.
        :rtype: LinksImportationGetManualUpdateLastInputConfigLink
        """
        return self._input_configuration

    @input_configuration.setter
    def input_configuration(self, input_configuration):
        """Sets the input_configuration of this CatalogStoreIndexLinks.


        :param input_configuration: The input_configuration of this CatalogStoreIndexLinks.
        :type input_configuration: LinksImportationGetManualUpdateLastInputConfigLink
        """

        self._input_configuration = input_configuration

    @property
    def products(self):
        """Gets the products of this CatalogStoreIndexLinks.


        :return: The products of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogGetProductsLink
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this CatalogStoreIndexLinks.


        :param products: The products of this CatalogStoreIndexLinks.
        :type products: LinksCatalogGetProductsLink
        """

        self._products = products

    @property
    def random_products(self):
        """Gets the random_products of this CatalogStoreIndexLinks.


        :return: The random_products of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogGetRandomProductsLink
        """
        return self._random_products

    @random_products.setter
    def random_products(self, random_products):
        """Sets the random_products of this CatalogStoreIndexLinks.


        :param random_products: The random_products of this CatalogStoreIndexLinks.
        :type random_products: LinksCatalogGetRandomProductsLink
        """

        self._random_products = random_products

    @property
    def _self(self):
        """Gets the _self of this CatalogStoreIndexLinks.


        :return: The _self of this CatalogStoreIndexLinks.
        :rtype: LinksCatalogStoreIndexLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CatalogStoreIndexLinks.


        :param _self: The _self of this CatalogStoreIndexLinks.
        :type _self: LinksCatalogStoreIndexLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def start_importation(self):
        """Gets the start_importation of this CatalogStoreIndexLinks.


        :return: The start_importation of this CatalogStoreIndexLinks.
        :rtype: LinksImportationStartManualUpdateLink
        """
        return self._start_importation

    @start_importation.setter
    def start_importation(self, start_importation):
        """Sets the start_importation of this CatalogStoreIndexLinks.


        :param start_importation: The start_importation of this CatalogStoreIndexLinks.
        :type start_importation: LinksImportationStartManualUpdateLink
        """

        self._start_importation = start_importation
