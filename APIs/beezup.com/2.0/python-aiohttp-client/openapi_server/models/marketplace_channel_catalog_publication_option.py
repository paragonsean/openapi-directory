# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed_type import FeedType
from openapi_server.models.links_publish_catalog_to_marketplace_link import LinksPublishCatalogToMarketplaceLink
from openapi_server.models.publication_strategy_kind import PublicationStrategyKind
from openapi_server import util


class MarketplaceChannelCatalogPublicationOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed_type: FeedType=None, kind: PublicationStrategyKind=PublicationStrategyKind.DELTA, link: LinksPublishCatalogToMarketplaceLink=None, strategy: str=None, with_unpublish: bool=None):
        """MarketplaceChannelCatalogPublicationOption - a model defined in OpenAPI

        :param feed_type: The feed_type of this MarketplaceChannelCatalogPublicationOption.
        :param kind: The kind of this MarketplaceChannelCatalogPublicationOption.
        :param link: The link of this MarketplaceChannelCatalogPublicationOption.
        :param strategy: The strategy of this MarketplaceChannelCatalogPublicationOption.
        :param with_unpublish: The with_unpublish of this MarketplaceChannelCatalogPublicationOption.
        """
        self.openapi_types = {
            'feed_type': FeedType,
            'kind': PublicationStrategyKind,
            'link': LinksPublishCatalogToMarketplaceLink,
            'strategy': str,
            'with_unpublish': bool
        }

        self.attribute_map = {
            'feed_type': 'feedType',
            'kind': 'kind',
            'link': 'link',
            'strategy': 'strategy',
            'with_unpublish': 'withUnpublish'
        }

        self._feed_type = feed_type
        self._kind = kind
        self._link = link
        self._strategy = strategy
        self._with_unpublish = with_unpublish

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceChannelCatalogPublicationOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The marketplaceChannelCatalogPublicationOption of this MarketplaceChannelCatalogPublicationOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed_type(self):
        """Gets the feed_type of this MarketplaceChannelCatalogPublicationOption.


        :return: The feed_type of this MarketplaceChannelCatalogPublicationOption.
        :rtype: FeedType
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this MarketplaceChannelCatalogPublicationOption.


        :param feed_type: The feed_type of this MarketplaceChannelCatalogPublicationOption.
        :type feed_type: FeedType
        """
        if feed_type is None:
            raise ValueError("Invalid value for `feed_type`, must not be `None`")

        self._feed_type = feed_type

    @property
    def kind(self):
        """Gets the kind of this MarketplaceChannelCatalogPublicationOption.


        :return: The kind of this MarketplaceChannelCatalogPublicationOption.
        :rtype: PublicationStrategyKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MarketplaceChannelCatalogPublicationOption.


        :param kind: The kind of this MarketplaceChannelCatalogPublicationOption.
        :type kind: PublicationStrategyKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def link(self):
        """Gets the link of this MarketplaceChannelCatalogPublicationOption.


        :return: The link of this MarketplaceChannelCatalogPublicationOption.
        :rtype: LinksPublishCatalogToMarketplaceLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MarketplaceChannelCatalogPublicationOption.


        :param link: The link of this MarketplaceChannelCatalogPublicationOption.
        :type link: LinksPublishCatalogToMarketplaceLink
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def strategy(self):
        """Gets the strategy of this MarketplaceChannelCatalogPublicationOption.

        The Publication Type

        :return: The strategy of this MarketplaceChannelCatalogPublicationOption.
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this MarketplaceChannelCatalogPublicationOption.

        The Publication Type

        :param strategy: The strategy of this MarketplaceChannelCatalogPublicationOption.
        :type strategy: str
        """
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")

        self._strategy = strategy

    @property
    def with_unpublish(self):
        """Gets the with_unpublish of this MarketplaceChannelCatalogPublicationOption.


        :return: The with_unpublish of this MarketplaceChannelCatalogPublicationOption.
        :rtype: bool
        """
        return self._with_unpublish

    @with_unpublish.setter
    def with_unpublish(self, with_unpublish):
        """Sets the with_unpublish of this MarketplaceChannelCatalogPublicationOption.


        :param with_unpublish: The with_unpublish of this MarketplaceChannelCatalogPublicationOption.
        :type with_unpublish: bool
        """
        if with_unpublish is None:
            raise ValueError("Invalid value for `with_unpublish`, must not be `None`")

        self._with_unpublish = with_unpublish
