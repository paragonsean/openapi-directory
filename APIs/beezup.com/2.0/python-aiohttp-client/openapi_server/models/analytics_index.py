# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_index_links import AnalyticsIndexLinks
from openapi_server.models.analytics_index_lov_links import AnalyticsIndexLovLinks
from openapi_server.models.analytics_store_index import AnalyticsStoreIndex
from openapi_server import util


class AnalyticsIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AnalyticsIndexLinks=None, lov_links: AnalyticsIndexLovLinks=None, stores: List[AnalyticsStoreIndex]=None):
        """AnalyticsIndex - a model defined in OpenAPI

        :param links: The links of this AnalyticsIndex.
        :param lov_links: The lov_links of this AnalyticsIndex.
        :param stores: The stores of this AnalyticsIndex.
        """
        self.openapi_types = {
            'links': AnalyticsIndexLinks,
            'lov_links': AnalyticsIndexLovLinks,
            'stores': List[AnalyticsStoreIndex]
        }

        self.attribute_map = {
            'links': 'links',
            'lov_links': 'lovLinks',
            'stores': 'stores'
        }

        self._links = links
        self._lov_links = lov_links
        self._stores = stores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyticsIndex of this AnalyticsIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AnalyticsIndex.


        :return: The links of this AnalyticsIndex.
        :rtype: AnalyticsIndexLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AnalyticsIndex.


        :param links: The links of this AnalyticsIndex.
        :type links: AnalyticsIndexLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def lov_links(self):
        """Gets the lov_links of this AnalyticsIndex.


        :return: The lov_links of this AnalyticsIndex.
        :rtype: AnalyticsIndexLovLinks
        """
        return self._lov_links

    @lov_links.setter
    def lov_links(self, lov_links):
        """Sets the lov_links of this AnalyticsIndex.


        :param lov_links: The lov_links of this AnalyticsIndex.
        :type lov_links: AnalyticsIndexLovLinks
        """

        self._lov_links = lov_links

    @property
    def stores(self):
        """Gets the stores of this AnalyticsIndex.


        :return: The stores of this AnalyticsIndex.
        :rtype: List[AnalyticsStoreIndex]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this AnalyticsIndex.


        :param stores: The stores of this AnalyticsIndex.
        :type stores: List[AnalyticsStoreIndex]
        """
        if stores is None:
            raise ValueError("Invalid value for `stores`, must not be `None`")

        self._stores = stores
