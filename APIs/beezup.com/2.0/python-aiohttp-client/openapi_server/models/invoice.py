# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_payment_status import InvoicePaymentStatus
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, amount_to_be_paid: float=None, contract_id: str=None, currency_code: str=None, due_date: date=None, invoice_date: date=None, invoice_number: str=None, invoice_url: str=None, payment_status: InvoicePaymentStatus=None):
        """Invoice - a model defined in OpenAPI

        :param amount: The amount of this Invoice.
        :param amount_to_be_paid: The amount_to_be_paid of this Invoice.
        :param contract_id: The contract_id of this Invoice.
        :param currency_code: The currency_code of this Invoice.
        :param due_date: The due_date of this Invoice.
        :param invoice_date: The invoice_date of this Invoice.
        :param invoice_number: The invoice_number of this Invoice.
        :param invoice_url: The invoice_url of this Invoice.
        :param payment_status: The payment_status of this Invoice.
        """
        self.openapi_types = {
            'amount': float,
            'amount_to_be_paid': float,
            'contract_id': str,
            'currency_code': str,
            'due_date': date,
            'invoice_date': date,
            'invoice_number': str,
            'invoice_url': str,
            'payment_status': InvoicePaymentStatus
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_to_be_paid': 'amountToBePaid',
            'contract_id': 'contractId',
            'currency_code': 'currencyCode',
            'due_date': 'dueDate',
            'invoice_date': 'invoiceDate',
            'invoice_number': 'invoiceNumber',
            'invoice_url': 'invoiceUrl',
            'payment_status': 'paymentStatus'
        }

        self._amount = amount
        self._amount_to_be_paid = amount_to_be_paid
        self._contract_id = contract_id
        self._currency_code = currency_code
        self._due_date = due_date
        self._invoice_date = invoice_date
        self._invoice_number = invoice_number
        self._invoice_url = invoice_url
        self._payment_status = payment_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Invoice.

        The amount of your invoice

        :return: The amount of this Invoice.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.

        The amount of your invoice

        :param amount: The amount of this Invoice.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def amount_to_be_paid(self):
        """Gets the amount_to_be_paid of this Invoice.

        The remaining amount to be paid for this invoice

        :return: The amount_to_be_paid of this Invoice.
        :rtype: float
        """
        return self._amount_to_be_paid

    @amount_to_be_paid.setter
    def amount_to_be_paid(self, amount_to_be_paid):
        """Sets the amount_to_be_paid of this Invoice.

        The remaining amount to be paid for this invoice

        :param amount_to_be_paid: The amount_to_be_paid of this Invoice.
        :type amount_to_be_paid: float
        """
        if amount_to_be_paid is None:
            raise ValueError("Invalid value for `amount_to_be_paid`, must not be `None`")

        self._amount_to_be_paid = amount_to_be_paid

    @property
    def contract_id(self):
        """Gets the contract_id of this Invoice.

        Your contract identifier

        :return: The contract_id of this Invoice.
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Invoice.

        Your contract identifier

        :param contract_id: The contract_id of this Invoice.
        :type contract_id: str
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")

        self._contract_id = contract_id

    @property
    def currency_code(self):
        """Gets the currency_code of this Invoice.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this Invoice.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Invoice.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this Invoice.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.


        :return: The due_date of this Invoice.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.
        :type due_date: date
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.

        The invoice date

        :return: The invoice_date of this Invoice.
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.

        The invoice date

        :param invoice_date: The invoice_date of this Invoice.
        :type invoice_date: date
        """
        if invoice_date is None:
            raise ValueError("Invalid value for `invoice_date`, must not be `None`")

        self._invoice_date = invoice_date

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.

        Your invoice number

        :return: The invoice_number of this Invoice.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

        Your invoice number

        :param invoice_number: The invoice_number of this Invoice.
        :type invoice_number: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")

        self._invoice_number = invoice_number

    @property
    def invoice_url(self):
        """Gets the invoice_url of this Invoice.

        The url of the invoice document

        :return: The invoice_url of this Invoice.
        :rtype: str
        """
        return self._invoice_url

    @invoice_url.setter
    def invoice_url(self, invoice_url):
        """Sets the invoice_url of this Invoice.

        The url of the invoice document

        :param invoice_url: The invoice_url of this Invoice.
        :type invoice_url: str
        """

        self._invoice_url = invoice_url

    @property
    def payment_status(self):
        """Gets the payment_status of this Invoice.


        :return: The payment_status of this Invoice.
        :rtype: InvoicePaymentStatus
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Invoice.


        :param payment_status: The payment_status of this Invoice.
        :type payment_status: InvoicePaymentStatus
        """
        if payment_status is None:
            raise ValueError("Invalid value for `payment_status`, must not be `None`")

        self._payment_status = payment_status
