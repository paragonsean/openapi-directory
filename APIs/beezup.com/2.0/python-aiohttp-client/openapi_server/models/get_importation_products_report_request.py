# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_importation_products_report_request_error_code import GetImportationProductsReportRequestErrorCode
from openapi_server import util


class GetImportationProductsReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean: str=None, error_codes: List[GetImportationProductsReportRequestErrorCode]=None, mpn: str=None, page_number: int=None, page_size: int=None, sku: str=None, title: str=None):
        """GetImportationProductsReportRequest - a model defined in OpenAPI

        :param ean: The ean of this GetImportationProductsReportRequest.
        :param error_codes: The error_codes of this GetImportationProductsReportRequest.
        :param mpn: The mpn of this GetImportationProductsReportRequest.
        :param page_number: The page_number of this GetImportationProductsReportRequest.
        :param page_size: The page_size of this GetImportationProductsReportRequest.
        :param sku: The sku of this GetImportationProductsReportRequest.
        :param title: The title of this GetImportationProductsReportRequest.
        """
        self.openapi_types = {
            'ean': str,
            'error_codes': List[GetImportationProductsReportRequestErrorCode],
            'mpn': str,
            'page_number': int,
            'page_size': int,
            'sku': str,
            'title': str
        }

        self.attribute_map = {
            'ean': 'ean',
            'error_codes': 'errorCodes',
            'mpn': 'mpn',
            'page_number': 'pageNumber',
            'page_size': 'pageSize',
            'sku': 'sku',
            'title': 'title'
        }

        self._ean = ean
        self._error_codes = error_codes
        self._mpn = mpn
        self._page_number = page_number
        self._page_size = page_size
        self._sku = sku
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationProductsReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationProductsReportRequest of this GetImportationProductsReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean(self):
        """Gets the ean of this GetImportationProductsReportRequest.

        Filter by EAN (equals)

        :return: The ean of this GetImportationProductsReportRequest.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this GetImportationProductsReportRequest.

        Filter by EAN (equals)

        :param ean: The ean of this GetImportationProductsReportRequest.
        :type ean: str
        """

        self._ean = ean

    @property
    def error_codes(self):
        """Gets the error_codes of this GetImportationProductsReportRequest.

        Get Importation Products Report Request Error Codes

        :return: The error_codes of this GetImportationProductsReportRequest.
        :rtype: List[GetImportationProductsReportRequestErrorCode]
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this GetImportationProductsReportRequest.

        Get Importation Products Report Request Error Codes

        :param error_codes: The error_codes of this GetImportationProductsReportRequest.
        :type error_codes: List[GetImportationProductsReportRequestErrorCode]
        """

        self._error_codes = error_codes

    @property
    def mpn(self):
        """Gets the mpn of this GetImportationProductsReportRequest.

        Filter by MPN (equals)

        :return: The mpn of this GetImportationProductsReportRequest.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this GetImportationProductsReportRequest.

        Filter by MPN (equals)

        :param mpn: The mpn of this GetImportationProductsReportRequest.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def page_number(self):
        """Gets the page_number of this GetImportationProductsReportRequest.

        Indicates the page number

        :return: The page_number of this GetImportationProductsReportRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this GetImportationProductsReportRequest.

        Indicates the page number

        :param page_number: The page_number of this GetImportationProductsReportRequest.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this GetImportationProductsReportRequest.

        Indicate the item count per page

        :return: The page_size of this GetImportationProductsReportRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GetImportationProductsReportRequest.

        Indicate the item count per page

        :param page_size: The page_size of this GetImportationProductsReportRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 25:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `25`")

        self._page_size = page_size

    @property
    def sku(self):
        """Gets the sku of this GetImportationProductsReportRequest.

        Filter by Sku (equals)

        :return: The sku of this GetImportationProductsReportRequest.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GetImportationProductsReportRequest.

        Filter by Sku (equals)

        :param sku: The sku of this GetImportationProductsReportRequest.
        :type sku: str
        """

        self._sku = sku

    @property
    def title(self):
        """Gets the title of this GetImportationProductsReportRequest.

        Filter by Title (StartsWith)

        :return: The title of this GetImportationProductsReportRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetImportationProductsReportRequest.

        Filter by Title (StartsWith)

        :param title: The title of this GetImportationProductsReportRequest.
        :type title: str
        """

        self._title = title
