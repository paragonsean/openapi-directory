# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_category_mapping_settings import ChannelCatalogCategoryMappingSettings
from openapi_server.models.channel_catalog_column_mapping_with_name import ChannelCatalogColumnMappingWithName
from openapi_server.models.channel_catalog_links import ChannelCatalogLinks
from openapi_server.models.channel_catalog_state import ChannelCatalogState
from openapi_server.models.channel_category_settings import ChannelCategorySettings
from openapi_server.models.channel_cost_settings import ChannelCostSettings
from openapi_server.models.cost_settings import CostSettings
from openapi_server.models.exclusion_filter import ExclusionFilter
from openapi_server.models.general_settings import GeneralSettings
import re
from openapi_server import util


class ChannelCatalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_image_url: str=None, channel_name: str=None, category_mapping_settings: ChannelCatalogCategoryMappingSettings=None, channel_catalog_id: str=None, channel_category_settings: ChannelCategorySettings=None, channel_cost_settings: ChannelCostSettings=None, column_mappings: List[ChannelCatalogColumnMappingWithName]=None, cost_settings: CostSettings=None, enabled: bool=None, exclusion_filters: List[ExclusionFilter]=None, export_url: str=None, general_settings: GeneralSettings=None, is_marketplace: bool=None, links: ChannelCatalogLinks=None, state: ChannelCatalogState=None, store_id: str=None, types: List[str]=None):
        """ChannelCatalog - a model defined in OpenAPI

        :param channel_id: The channel_id of this ChannelCatalog.
        :param channel_image_url: The channel_image_url of this ChannelCatalog.
        :param channel_name: The channel_name of this ChannelCatalog.
        :param category_mapping_settings: The category_mapping_settings of this ChannelCatalog.
        :param channel_catalog_id: The channel_catalog_id of this ChannelCatalog.
        :param channel_category_settings: The channel_category_settings of this ChannelCatalog.
        :param channel_cost_settings: The channel_cost_settings of this ChannelCatalog.
        :param column_mappings: The column_mappings of this ChannelCatalog.
        :param cost_settings: The cost_settings of this ChannelCatalog.
        :param enabled: The enabled of this ChannelCatalog.
        :param exclusion_filters: The exclusion_filters of this ChannelCatalog.
        :param export_url: The export_url of this ChannelCatalog.
        :param general_settings: The general_settings of this ChannelCatalog.
        :param is_marketplace: The is_marketplace of this ChannelCatalog.
        :param links: The links of this ChannelCatalog.
        :param state: The state of this ChannelCatalog.
        :param store_id: The store_id of this ChannelCatalog.
        :param types: The types of this ChannelCatalog.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_image_url': str,
            'channel_name': str,
            'category_mapping_settings': ChannelCatalogCategoryMappingSettings,
            'channel_catalog_id': str,
            'channel_category_settings': ChannelCategorySettings,
            'channel_cost_settings': ChannelCostSettings,
            'column_mappings': List[ChannelCatalogColumnMappingWithName],
            'cost_settings': CostSettings,
            'enabled': bool,
            'exclusion_filters': List[ExclusionFilter],
            'export_url': str,
            'general_settings': GeneralSettings,
            'is_marketplace': bool,
            'links': ChannelCatalogLinks,
            'state': ChannelCatalogState,
            'store_id': str,
            'types': List[str]
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_image_url': 'channelImageUrl',
            'channel_name': 'channelName',
            'category_mapping_settings': 'categoryMappingSettings',
            'channel_catalog_id': 'channelCatalogId',
            'channel_category_settings': 'channelCategorySettings',
            'channel_cost_settings': 'channelCostSettings',
            'column_mappings': 'columnMappings',
            'cost_settings': 'costSettings',
            'enabled': 'enabled',
            'exclusion_filters': 'exclusionFilters',
            'export_url': 'exportUrl',
            'general_settings': 'generalSettings',
            'is_marketplace': 'isMarketplace',
            'links': 'links',
            'state': 'state',
            'store_id': 'storeId',
            'types': 'types'
        }

        self._channel_id = channel_id
        self._channel_image_url = channel_image_url
        self._channel_name = channel_name
        self._category_mapping_settings = category_mapping_settings
        self._channel_catalog_id = channel_catalog_id
        self._channel_category_settings = channel_category_settings
        self._channel_cost_settings = channel_cost_settings
        self._column_mappings = column_mappings
        self._cost_settings = cost_settings
        self._enabled = enabled
        self._exclusion_filters = exclusion_filters
        self._export_url = export_url
        self._general_settings = general_settings
        self._is_marketplace = is_marketplace
        self._links = links
        self._state = state
        self._store_id = store_id
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalog of this ChannelCatalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelCatalog.

        The channel identifier

        :return: The channel_id of this ChannelCatalog.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelCatalog.

        The channel identifier

        :param channel_id: The channel_id of this ChannelCatalog.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_image_url(self):
        """Gets the channel_image_url of this ChannelCatalog.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The channel_image_url of this ChannelCatalog.
        :rtype: str
        """
        return self._channel_image_url

    @channel_image_url.setter
    def channel_image_url(self, channel_image_url):
        """Sets the channel_image_url of this ChannelCatalog.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param channel_image_url: The channel_image_url of this ChannelCatalog.
        :type channel_image_url: str
        """
        if channel_image_url is None:
            raise ValueError("Invalid value for `channel_image_url`, must not be `None`")
        if channel_image_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', channel_image_url):
            raise ValueError("Invalid value for `channel_image_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._channel_image_url = channel_image_url

    @property
    def channel_name(self):
        """Gets the channel_name of this ChannelCatalog.

        The channel name

        :return: The channel_name of this ChannelCatalog.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this ChannelCatalog.

        The channel name

        :param channel_name: The channel_name of this ChannelCatalog.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def category_mapping_settings(self):
        """Gets the category_mapping_settings of this ChannelCatalog.


        :return: The category_mapping_settings of this ChannelCatalog.
        :rtype: ChannelCatalogCategoryMappingSettings
        """
        return self._category_mapping_settings

    @category_mapping_settings.setter
    def category_mapping_settings(self, category_mapping_settings):
        """Sets the category_mapping_settings of this ChannelCatalog.


        :param category_mapping_settings: The category_mapping_settings of this ChannelCatalog.
        :type category_mapping_settings: ChannelCatalogCategoryMappingSettings
        """

        self._category_mapping_settings = category_mapping_settings

    @property
    def channel_catalog_id(self):
        """Gets the channel_catalog_id of this ChannelCatalog.

        The channel catalog identifier

        :return: The channel_catalog_id of this ChannelCatalog.
        :rtype: str
        """
        return self._channel_catalog_id

    @channel_catalog_id.setter
    def channel_catalog_id(self, channel_catalog_id):
        """Sets the channel_catalog_id of this ChannelCatalog.

        The channel catalog identifier

        :param channel_catalog_id: The channel_catalog_id of this ChannelCatalog.
        :type channel_catalog_id: str
        """
        if channel_catalog_id is None:
            raise ValueError("Invalid value for `channel_catalog_id`, must not be `None`")

        self._channel_catalog_id = channel_catalog_id

    @property
    def channel_category_settings(self):
        """Gets the channel_category_settings of this ChannelCatalog.


        :return: The channel_category_settings of this ChannelCatalog.
        :rtype: ChannelCategorySettings
        """
        return self._channel_category_settings

    @channel_category_settings.setter
    def channel_category_settings(self, channel_category_settings):
        """Sets the channel_category_settings of this ChannelCatalog.


        :param channel_category_settings: The channel_category_settings of this ChannelCatalog.
        :type channel_category_settings: ChannelCategorySettings
        """
        if channel_category_settings is None:
            raise ValueError("Invalid value for `channel_category_settings`, must not be `None`")

        self._channel_category_settings = channel_category_settings

    @property
    def channel_cost_settings(self):
        """Gets the channel_cost_settings of this ChannelCatalog.


        :return: The channel_cost_settings of this ChannelCatalog.
        :rtype: ChannelCostSettings
        """
        return self._channel_cost_settings

    @channel_cost_settings.setter
    def channel_cost_settings(self, channel_cost_settings):
        """Sets the channel_cost_settings of this ChannelCatalog.


        :param channel_cost_settings: The channel_cost_settings of this ChannelCatalog.
        :type channel_cost_settings: ChannelCostSettings
        """
        if channel_cost_settings is None:
            raise ValueError("Invalid value for `channel_cost_settings`, must not be `None`")

        self._channel_cost_settings = channel_cost_settings

    @property
    def column_mappings(self):
        """Gets the column_mappings of this ChannelCatalog.

        The column mapping list between a channel and a catalog

        :return: The column_mappings of this ChannelCatalog.
        :rtype: List[ChannelCatalogColumnMappingWithName]
        """
        return self._column_mappings

    @column_mappings.setter
    def column_mappings(self, column_mappings):
        """Sets the column_mappings of this ChannelCatalog.

        The column mapping list between a channel and a catalog

        :param column_mappings: The column_mappings of this ChannelCatalog.
        :type column_mappings: List[ChannelCatalogColumnMappingWithName]
        """

        self._column_mappings = column_mappings

    @property
    def cost_settings(self):
        """Gets the cost_settings of this ChannelCatalog.


        :return: The cost_settings of this ChannelCatalog.
        :rtype: CostSettings
        """
        return self._cost_settings

    @cost_settings.setter
    def cost_settings(self, cost_settings):
        """Sets the cost_settings of this ChannelCatalog.


        :param cost_settings: The cost_settings of this ChannelCatalog.
        :type cost_settings: CostSettings
        """

        self._cost_settings = cost_settings

    @property
    def enabled(self):
        """Gets the enabled of this ChannelCatalog.

        Indicates if the channel catalog is enable

        :return: The enabled of this ChannelCatalog.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ChannelCatalog.

        Indicates if the channel catalog is enable

        :param enabled: The enabled of this ChannelCatalog.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def exclusion_filters(self):
        """Gets the exclusion_filters of this ChannelCatalog.

        The exclusion filter list

        :return: The exclusion_filters of this ChannelCatalog.
        :rtype: List[ExclusionFilter]
        """
        return self._exclusion_filters

    @exclusion_filters.setter
    def exclusion_filters(self, exclusion_filters):
        """Sets the exclusion_filters of this ChannelCatalog.

        The exclusion filter list

        :param exclusion_filters: The exclusion_filters of this ChannelCatalog.
        :type exclusion_filters: List[ExclusionFilter]
        """

        self._exclusion_filters = exclusion_filters

    @property
    def export_url(self):
        """Gets the export_url of this ChannelCatalog.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The export_url of this ChannelCatalog.
        :rtype: str
        """
        return self._export_url

    @export_url.setter
    def export_url(self, export_url):
        """Sets the export_url of this ChannelCatalog.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param export_url: The export_url of this ChannelCatalog.
        :type export_url: str
        """
        if export_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', export_url):
            raise ValueError("Invalid value for `export_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._export_url = export_url

    @property
    def general_settings(self):
        """Gets the general_settings of this ChannelCatalog.


        :return: The general_settings of this ChannelCatalog.
        :rtype: GeneralSettings
        """
        return self._general_settings

    @general_settings.setter
    def general_settings(self, general_settings):
        """Sets the general_settings of this ChannelCatalog.


        :param general_settings: The general_settings of this ChannelCatalog.
        :type general_settings: GeneralSettings
        """
        if general_settings is None:
            raise ValueError("Invalid value for `general_settings`, must not be `None`")

        self._general_settings = general_settings

    @property
    def is_marketplace(self):
        """Gets the is_marketplace of this ChannelCatalog.

        Indicates if this channel catalog is related to a marketplace

        :return: The is_marketplace of this ChannelCatalog.
        :rtype: bool
        """
        return self._is_marketplace

    @is_marketplace.setter
    def is_marketplace(self, is_marketplace):
        """Sets the is_marketplace of this ChannelCatalog.

        Indicates if this channel catalog is related to a marketplace

        :param is_marketplace: The is_marketplace of this ChannelCatalog.
        :type is_marketplace: bool
        """
        if is_marketplace is None:
            raise ValueError("Invalid value for `is_marketplace`, must not be `None`")

        self._is_marketplace = is_marketplace

    @property
    def links(self):
        """Gets the links of this ChannelCatalog.


        :return: The links of this ChannelCatalog.
        :rtype: ChannelCatalogLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalog.


        :param links: The links of this ChannelCatalog.
        :type links: ChannelCatalogLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def state(self):
        """Gets the state of this ChannelCatalog.


        :return: The state of this ChannelCatalog.
        :rtype: ChannelCatalogState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ChannelCatalog.


        :param state: The state of this ChannelCatalog.
        :type state: ChannelCatalogState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def store_id(self):
        """Gets the store_id of this ChannelCatalog.

        The store identifier

        :return: The store_id of this ChannelCatalog.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ChannelCatalog.

        The store identifier

        :param store_id: The store_id of this ChannelCatalog.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def types(self):
        """Gets the types of this ChannelCatalog.

        The channel type list related to the channel

        :return: The types of this ChannelCatalog.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ChannelCatalog.

        The channel type list related to the channel

        :param types: The types of this ChannelCatalog.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
