# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_importation_activate_auto_import_link import LinksImportationActivateAutoImportLink
from openapi_server.models.links_importation_cancel_link import LinksImportationCancelLink
from openapi_server.models.links_importation_commit_columns_link import LinksImportationCommitColumnsLink
from openapi_server.models.links_importation_commit_link import LinksImportationCommitLink
from openapi_server.models.links_importation_configure_remaining_catalog_columns_link import LinksImportationConfigureRemainingCatalogColumnsLink
from openapi_server.models.links_importation_get_custom_columns_link import LinksImportationGetCustomColumnsLink
from openapi_server.models.links_importation_get_detected_catalog_columns_link import LinksImportationGetDetectedCatalogColumnsLink
from openapi_server.models.links_importation_get_importation_monitoring_link import LinksImportationGetImportationMonitoringLink
from openapi_server.models.links_importation_get_product_sample_link import LinksImportationGetProductSampleLink
from openapi_server.models.links_importation_technical_progression_link import LinksImportationTechnicalProgressionLink
from openapi_server import util


class ImportationMonitoringLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activate_auto_import: LinksImportationActivateAutoImportLink=None, cancel: LinksImportationCancelLink=None, catalog_columns: LinksImportationGetDetectedCatalogColumnsLink=None, commit: LinksImportationCommitLink=None, commit_columns: LinksImportationCommitColumnsLink=None, configure_remaining_catalog_columns: LinksImportationConfigureRemainingCatalogColumnsLink=None, custom_columns: LinksImportationGetCustomColumnsLink=None, product_samples: LinksImportationGetProductSampleLink=None, _self: LinksImportationGetImportationMonitoringLink=None, technical_progression: LinksImportationTechnicalProgressionLink=None):
        """ImportationMonitoringLinks - a model defined in OpenAPI

        :param activate_auto_import: The activate_auto_import of this ImportationMonitoringLinks.
        :param cancel: The cancel of this ImportationMonitoringLinks.
        :param catalog_columns: The catalog_columns of this ImportationMonitoringLinks.
        :param commit: The commit of this ImportationMonitoringLinks.
        :param commit_columns: The commit_columns of this ImportationMonitoringLinks.
        :param configure_remaining_catalog_columns: The configure_remaining_catalog_columns of this ImportationMonitoringLinks.
        :param custom_columns: The custom_columns of this ImportationMonitoringLinks.
        :param product_samples: The product_samples of this ImportationMonitoringLinks.
        :param _self: The _self of this ImportationMonitoringLinks.
        :param technical_progression: The technical_progression of this ImportationMonitoringLinks.
        """
        self.openapi_types = {
            'activate_auto_import': LinksImportationActivateAutoImportLink,
            'cancel': LinksImportationCancelLink,
            'catalog_columns': LinksImportationGetDetectedCatalogColumnsLink,
            'commit': LinksImportationCommitLink,
            'commit_columns': LinksImportationCommitColumnsLink,
            'configure_remaining_catalog_columns': LinksImportationConfigureRemainingCatalogColumnsLink,
            'custom_columns': LinksImportationGetCustomColumnsLink,
            'product_samples': LinksImportationGetProductSampleLink,
            '_self': LinksImportationGetImportationMonitoringLink,
            'technical_progression': LinksImportationTechnicalProgressionLink
        }

        self.attribute_map = {
            'activate_auto_import': 'activateAutoImport',
            'cancel': 'cancel',
            'catalog_columns': 'catalogColumns',
            'commit': 'commit',
            'commit_columns': 'commitColumns',
            'configure_remaining_catalog_columns': 'configureRemainingCatalogColumns',
            'custom_columns': 'customColumns',
            'product_samples': 'productSamples',
            '_self': 'self',
            'technical_progression': 'technicalProgression'
        }

        self._activate_auto_import = activate_auto_import
        self._cancel = cancel
        self._catalog_columns = catalog_columns
        self._commit = commit
        self._commit_columns = commit_columns
        self._configure_remaining_catalog_columns = configure_remaining_catalog_columns
        self._custom_columns = custom_columns
        self._product_samples = product_samples
        self.__self = _self
        self._technical_progression = technical_progression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportationMonitoringLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importationMonitoringLinks of this ImportationMonitoringLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activate_auto_import(self):
        """Gets the activate_auto_import of this ImportationMonitoringLinks.


        :return: The activate_auto_import of this ImportationMonitoringLinks.
        :rtype: LinksImportationActivateAutoImportLink
        """
        return self._activate_auto_import

    @activate_auto_import.setter
    def activate_auto_import(self, activate_auto_import):
        """Sets the activate_auto_import of this ImportationMonitoringLinks.


        :param activate_auto_import: The activate_auto_import of this ImportationMonitoringLinks.
        :type activate_auto_import: LinksImportationActivateAutoImportLink
        """

        self._activate_auto_import = activate_auto_import

    @property
    def cancel(self):
        """Gets the cancel of this ImportationMonitoringLinks.


        :return: The cancel of this ImportationMonitoringLinks.
        :rtype: LinksImportationCancelLink
        """
        return self._cancel

    @cancel.setter
    def cancel(self, cancel):
        """Sets the cancel of this ImportationMonitoringLinks.


        :param cancel: The cancel of this ImportationMonitoringLinks.
        :type cancel: LinksImportationCancelLink
        """

        self._cancel = cancel

    @property
    def catalog_columns(self):
        """Gets the catalog_columns of this ImportationMonitoringLinks.


        :return: The catalog_columns of this ImportationMonitoringLinks.
        :rtype: LinksImportationGetDetectedCatalogColumnsLink
        """
        return self._catalog_columns

    @catalog_columns.setter
    def catalog_columns(self, catalog_columns):
        """Sets the catalog_columns of this ImportationMonitoringLinks.


        :param catalog_columns: The catalog_columns of this ImportationMonitoringLinks.
        :type catalog_columns: LinksImportationGetDetectedCatalogColumnsLink
        """

        self._catalog_columns = catalog_columns

    @property
    def commit(self):
        """Gets the commit of this ImportationMonitoringLinks.


        :return: The commit of this ImportationMonitoringLinks.
        :rtype: LinksImportationCommitLink
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this ImportationMonitoringLinks.


        :param commit: The commit of this ImportationMonitoringLinks.
        :type commit: LinksImportationCommitLink
        """

        self._commit = commit

    @property
    def commit_columns(self):
        """Gets the commit_columns of this ImportationMonitoringLinks.


        :return: The commit_columns of this ImportationMonitoringLinks.
        :rtype: LinksImportationCommitColumnsLink
        """
        return self._commit_columns

    @commit_columns.setter
    def commit_columns(self, commit_columns):
        """Sets the commit_columns of this ImportationMonitoringLinks.


        :param commit_columns: The commit_columns of this ImportationMonitoringLinks.
        :type commit_columns: LinksImportationCommitColumnsLink
        """

        self._commit_columns = commit_columns

    @property
    def configure_remaining_catalog_columns(self):
        """Gets the configure_remaining_catalog_columns of this ImportationMonitoringLinks.


        :return: The configure_remaining_catalog_columns of this ImportationMonitoringLinks.
        :rtype: LinksImportationConfigureRemainingCatalogColumnsLink
        """
        return self._configure_remaining_catalog_columns

    @configure_remaining_catalog_columns.setter
    def configure_remaining_catalog_columns(self, configure_remaining_catalog_columns):
        """Sets the configure_remaining_catalog_columns of this ImportationMonitoringLinks.


        :param configure_remaining_catalog_columns: The configure_remaining_catalog_columns of this ImportationMonitoringLinks.
        :type configure_remaining_catalog_columns: LinksImportationConfigureRemainingCatalogColumnsLink
        """

        self._configure_remaining_catalog_columns = configure_remaining_catalog_columns

    @property
    def custom_columns(self):
        """Gets the custom_columns of this ImportationMonitoringLinks.


        :return: The custom_columns of this ImportationMonitoringLinks.
        :rtype: LinksImportationGetCustomColumnsLink
        """
        return self._custom_columns

    @custom_columns.setter
    def custom_columns(self, custom_columns):
        """Sets the custom_columns of this ImportationMonitoringLinks.


        :param custom_columns: The custom_columns of this ImportationMonitoringLinks.
        :type custom_columns: LinksImportationGetCustomColumnsLink
        """

        self._custom_columns = custom_columns

    @property
    def product_samples(self):
        """Gets the product_samples of this ImportationMonitoringLinks.


        :return: The product_samples of this ImportationMonitoringLinks.
        :rtype: LinksImportationGetProductSampleLink
        """
        return self._product_samples

    @product_samples.setter
    def product_samples(self, product_samples):
        """Sets the product_samples of this ImportationMonitoringLinks.


        :param product_samples: The product_samples of this ImportationMonitoringLinks.
        :type product_samples: LinksImportationGetProductSampleLink
        """

        self._product_samples = product_samples

    @property
    def _self(self):
        """Gets the _self of this ImportationMonitoringLinks.


        :return: The _self of this ImportationMonitoringLinks.
        :rtype: LinksImportationGetImportationMonitoringLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ImportationMonitoringLinks.


        :param _self: The _self of this ImportationMonitoringLinks.
        :type _self: LinksImportationGetImportationMonitoringLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def technical_progression(self):
        """Gets the technical_progression of this ImportationMonitoringLinks.


        :return: The technical_progression of this ImportationMonitoringLinks.
        :rtype: LinksImportationTechnicalProgressionLink
        """
        return self._technical_progression

    @technical_progression.setter
    def technical_progression(self, technical_progression):
        """Sets the technical_progression of this ImportationMonitoringLinks.


        :param technical_progression: The technical_progression of this ImportationMonitoringLinks.
        :type technical_progression: LinksImportationTechnicalProgressionLink
        """
        if technical_progression is None:
            raise ValueError("Invalid value for `technical_progression`, must not be `None`")

        self._technical_progression = technical_progression
