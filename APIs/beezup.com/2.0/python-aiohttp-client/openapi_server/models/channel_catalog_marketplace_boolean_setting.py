# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_marketplace_setting import ChannelCatalogMarketplaceSetting
from openapi_server.models.channel_catalog_marketplace_setting_discriminator_type import ChannelCatalogMarketplaceSettingDiscriminatorType
from openapi_server import util


class ChannelCatalogMarketplaceBooleanSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discriminator_type: ChannelCatalogMarketplaceSettingDiscriminatorType=None, name: str=None, value: bool=None):
        """ChannelCatalogMarketplaceBooleanSetting - a model defined in OpenAPI

        :param discriminator_type: The discriminator_type of this ChannelCatalogMarketplaceBooleanSetting.
        :param name: The name of this ChannelCatalogMarketplaceBooleanSetting.
        :param value: The value of this ChannelCatalogMarketplaceBooleanSetting.
        """
        self.openapi_types = {
            'discriminator_type': ChannelCatalogMarketplaceSettingDiscriminatorType,
            'name': str,
            'value': bool
        }

        self.attribute_map = {
            'discriminator_type': 'discriminatorType',
            'name': 'name',
            'value': 'value'
        }

        self._discriminator_type = discriminator_type
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogMarketplaceBooleanSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogMarketplaceBooleanSetting of this ChannelCatalogMarketplaceBooleanSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discriminator_type(self):
        """Gets the discriminator_type of this ChannelCatalogMarketplaceBooleanSetting.


        :return: The discriminator_type of this ChannelCatalogMarketplaceBooleanSetting.
        :rtype: ChannelCatalogMarketplaceSettingDiscriminatorType
        """
        return self._discriminator_type

    @discriminator_type.setter
    def discriminator_type(self, discriminator_type):
        """Sets the discriminator_type of this ChannelCatalogMarketplaceBooleanSetting.


        :param discriminator_type: The discriminator_type of this ChannelCatalogMarketplaceBooleanSetting.
        :type discriminator_type: ChannelCatalogMarketplaceSettingDiscriminatorType
        """
        if discriminator_type is None:
            raise ValueError("Invalid value for `discriminator_type`, must not be `None`")

        self._discriminator_type = discriminator_type

    @property
    def name(self):
        """Gets the name of this ChannelCatalogMarketplaceBooleanSetting.

        Channel catalog marketplace property name

        :return: The name of this ChannelCatalogMarketplaceBooleanSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelCatalogMarketplaceBooleanSetting.

        Channel catalog marketplace property name

        :param name: The name of this ChannelCatalogMarketplaceBooleanSetting.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this ChannelCatalogMarketplaceBooleanSetting.

        Channel catalog marketplace property values

        :return: The value of this ChannelCatalogMarketplaceBooleanSetting.
        :rtype: bool
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ChannelCatalogMarketplaceBooleanSetting.

        Channel catalog marketplace property values

        :param value: The value of this ChannelCatalogMarketplaceBooleanSetting.
        :type value: bool
        """

        self._value = value
