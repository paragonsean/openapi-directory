# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, exists: bool=None, product_id: str=None, values: Dict[str, str]=None):
        """Product - a model defined in OpenAPI

        :param category_id: The category_id of this Product.
        :param exists: The exists of this Product.
        :param product_id: The product_id of this Product.
        :param values: The values of this Product.
        """
        self.openapi_types = {
            'category_id': str,
            'exists': bool,
            'product_id': str,
            'values': Dict[str, str]
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'exists': 'exists',
            'product_id': 'productId',
            'values': 'values'
        }

        self._category_id = category_id
        self._exists = exists
        self._product_id = product_id
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this Product.

        The catalog category identifier

        :return: The category_id of this Product.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Product.

        The catalog category identifier

        :param category_id: The category_id of this Product.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def exists(self):
        """Gets the exists of this Product.

        Indicates if the product exists in the current catalog

        :return: The exists of this Product.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this Product.

        Indicates if the product exists in the current catalog

        :param exists: The exists of this Product.
        :type exists: bool
        """
        if exists is None:
            raise ValueError("Invalid value for `exists`, must not be `None`")

        self._exists = exists

    @property
    def product_id(self):
        """Gets the product_id of this Product.

        The product identifier

        :return: The product_id of this Product.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Product.

        The product identifier

        :param product_id: The product_id of this Product.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def values(self):
        """Gets the values of this Product.

        The key is the column identifier

        :return: The values of this Product.
        :rtype: Dict[str, str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Product.

        The key is the column identifier

        :param values: The values of this Product.
        :type values: Dict[str, str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
