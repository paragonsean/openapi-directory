# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link3 import Link3
from openapi_server import util


class SubscriptionLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activate: Link3=None, deactivate: Link3=None, delete: Link3=None, reporting: Link3=None, retry: Link3=None):
        """SubscriptionLinks - a model defined in OpenAPI

        :param activate: The activate of this SubscriptionLinks.
        :param deactivate: The deactivate of this SubscriptionLinks.
        :param delete: The delete of this SubscriptionLinks.
        :param reporting: The reporting of this SubscriptionLinks.
        :param retry: The retry of this SubscriptionLinks.
        """
        self.openapi_types = {
            'activate': Link3,
            'deactivate': Link3,
            'delete': Link3,
            'reporting': Link3,
            'retry': Link3
        }

        self.attribute_map = {
            'activate': 'activate',
            'deactivate': 'deactivate',
            'delete': 'delete',
            'reporting': 'reporting',
            'retry': 'retry'
        }

        self._activate = activate
        self._deactivate = deactivate
        self._delete = delete
        self._reporting = reporting
        self._retry = retry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The subscriptionLinks of this SubscriptionLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activate(self):
        """Gets the activate of this SubscriptionLinks.


        :return: The activate of this SubscriptionLinks.
        :rtype: Link3
        """
        return self._activate

    @activate.setter
    def activate(self, activate):
        """Sets the activate of this SubscriptionLinks.


        :param activate: The activate of this SubscriptionLinks.
        :type activate: Link3
        """

        self._activate = activate

    @property
    def deactivate(self):
        """Gets the deactivate of this SubscriptionLinks.


        :return: The deactivate of this SubscriptionLinks.
        :rtype: Link3
        """
        return self._deactivate

    @deactivate.setter
    def deactivate(self, deactivate):
        """Sets the deactivate of this SubscriptionLinks.


        :param deactivate: The deactivate of this SubscriptionLinks.
        :type deactivate: Link3
        """

        self._deactivate = deactivate

    @property
    def delete(self):
        """Gets the delete of this SubscriptionLinks.


        :return: The delete of this SubscriptionLinks.
        :rtype: Link3
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this SubscriptionLinks.


        :param delete: The delete of this SubscriptionLinks.
        :type delete: Link3
        """

        self._delete = delete

    @property
    def reporting(self):
        """Gets the reporting of this SubscriptionLinks.


        :return: The reporting of this SubscriptionLinks.
        :rtype: Link3
        """
        return self._reporting

    @reporting.setter
    def reporting(self, reporting):
        """Sets the reporting of this SubscriptionLinks.


        :param reporting: The reporting of this SubscriptionLinks.
        :type reporting: Link3
        """

        self._reporting = reporting

    @property
    def retry(self):
        """Gets the retry of this SubscriptionLinks.


        :return: The retry of this SubscriptionLinks.
        :rtype: Link3
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this SubscriptionLinks.


        :param retry: The retry of this SubscriptionLinks.
        :type retry: Link3
        """

        self._retry = retry
