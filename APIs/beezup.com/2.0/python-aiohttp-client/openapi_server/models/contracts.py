# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contracts_links import ContractsLinks
from openapi_server.models.current_contract_info import CurrentContractInfo
from openapi_server.models.next_contract_info import NextContractInfo
from openapi_server import util


class Contracts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current: CurrentContractInfo=None, links: ContractsLinks=None, next: NextContractInfo=None):
        """Contracts - a model defined in OpenAPI

        :param current: The current of this Contracts.
        :param links: The links of this Contracts.
        :param next: The next of this Contracts.
        """
        self.openapi_types = {
            'current': CurrentContractInfo,
            'links': ContractsLinks,
            'next': NextContractInfo
        }

        self.attribute_map = {
            'current': 'current',
            'links': 'links',
            'next': 'next'
        }

        self._current = current
        self._links = links
        self._next = next

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contracts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contracts of this Contracts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self):
        """Gets the current of this Contracts.


        :return: The current of this Contracts.
        :rtype: CurrentContractInfo
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Contracts.


        :param current: The current of this Contracts.
        :type current: CurrentContractInfo
        """

        self._current = current

    @property
    def links(self):
        """Gets the links of this Contracts.


        :return: The links of this Contracts.
        :rtype: ContractsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Contracts.


        :param links: The links of this Contracts.
        :type links: ContractsLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def next(self):
        """Gets the next of this Contracts.


        :return: The next of this Contracts.
        :rtype: NextContractInfo
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Contracts.


        :param next: The next of this Contracts.
        :type next: NextContractInfo
        """

        self._next = next
