# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_error_code import ProductErrorCode
from openapi_server import util


class ProductError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean: str=None, errors: List[ProductErrorCode]=None, line_number: int=None, mpn: str=None, sku: str=None, title: str=None):
        """ProductError - a model defined in OpenAPI

        :param ean: The ean of this ProductError.
        :param errors: The errors of this ProductError.
        :param line_number: The line_number of this ProductError.
        :param mpn: The mpn of this ProductError.
        :param sku: The sku of this ProductError.
        :param title: The title of this ProductError.
        """
        self.openapi_types = {
            'ean': str,
            'errors': List[ProductErrorCode],
            'line_number': int,
            'mpn': str,
            'sku': str,
            'title': str
        }

        self.attribute_map = {
            'ean': 'ean',
            'errors': 'errors',
            'line_number': 'lineNumber',
            'mpn': 'mpn',
            'sku': 'sku',
            'title': 'title'
        }

        self._ean = ean
        self._errors = errors
        self._line_number = line_number
        self._mpn = mpn
        self._sku = sku
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The productError of this ProductError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean(self):
        """Gets the ean of this ProductError.


        :return: The ean of this ProductError.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ProductError.


        :param ean: The ean of this ProductError.
        :type ean: str
        """

        self._ean = ean

    @property
    def errors(self):
        """Gets the errors of this ProductError.


        :return: The errors of this ProductError.
        :rtype: List[ProductErrorCode]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ProductError.


        :param errors: The errors of this ProductError.
        :type errors: List[ProductErrorCode]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def line_number(self):
        """Gets the line_number of this ProductError.


        :return: The line_number of this ProductError.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this ProductError.


        :param line_number: The line_number of this ProductError.
        :type line_number: int
        """
        if line_number is None:
            raise ValueError("Invalid value for `line_number`, must not be `None`")

        self._line_number = line_number

    @property
    def mpn(self):
        """Gets the mpn of this ProductError.


        :return: The mpn of this ProductError.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this ProductError.


        :param mpn: The mpn of this ProductError.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def sku(self):
        """Gets the sku of this ProductError.

        The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku

        :return: The sku of this ProductError.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductError.

        The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku

        :param sku: The sku of this ProductError.
        :type sku: str
        """
        if sku is not None and len(sku) > 50:
            raise ValueError("Invalid value for `sku`, length must be less than or equal to `50`")

        self._sku = sku

    @property
    def title(self):
        """Gets the title of this ProductError.


        :return: The title of this ProductError.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductError.


        :param title: The title of this ProductError.
        :type title: str
        """

        self._title = title
