# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.duplicate_product_value_configuration import DuplicateProductValueConfiguration
from openapi_server.models.input_configuration import InputConfiguration
from openapi_server.models.scheduling_type import SchedulingType
from openapi_server import util


class AutoImportConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duplicate_product_configuration: DuplicateProductValueConfiguration=None, input: InputConfiguration=None, input_configured_by_user_id: str=None, pause_status_changed_by_user_id: str=None, pause_status_changed_utc_date: datetime=None, paused: bool=False, scheduled_by_user_id: str=None, scheduling_local_time_zone_name: str='Romance Standard Time', scheduling_type: SchedulingType=SchedulingType.INTERVAL, scheduling_value: List[str]=None):
        """AutoImportConfiguration - a model defined in OpenAPI

        :param duplicate_product_configuration: The duplicate_product_configuration of this AutoImportConfiguration.
        :param input: The input of this AutoImportConfiguration.
        :param input_configured_by_user_id: The input_configured_by_user_id of this AutoImportConfiguration.
        :param pause_status_changed_by_user_id: The pause_status_changed_by_user_id of this AutoImportConfiguration.
        :param pause_status_changed_utc_date: The pause_status_changed_utc_date of this AutoImportConfiguration.
        :param paused: The paused of this AutoImportConfiguration.
        :param scheduled_by_user_id: The scheduled_by_user_id of this AutoImportConfiguration.
        :param scheduling_local_time_zone_name: The scheduling_local_time_zone_name of this AutoImportConfiguration.
        :param scheduling_type: The scheduling_type of this AutoImportConfiguration.
        :param scheduling_value: The scheduling_value of this AutoImportConfiguration.
        """
        self.openapi_types = {
            'duplicate_product_configuration': DuplicateProductValueConfiguration,
            'input': InputConfiguration,
            'input_configured_by_user_id': str,
            'pause_status_changed_by_user_id': str,
            'pause_status_changed_utc_date': datetime,
            'paused': bool,
            'scheduled_by_user_id': str,
            'scheduling_local_time_zone_name': str,
            'scheduling_type': SchedulingType,
            'scheduling_value': List[str]
        }

        self.attribute_map = {
            'duplicate_product_configuration': 'duplicateProductConfiguration',
            'input': 'input',
            'input_configured_by_user_id': 'inputConfiguredByUserId',
            'pause_status_changed_by_user_id': 'pauseStatusChangedByUserId',
            'pause_status_changed_utc_date': 'pauseStatusChangedUtcDate',
            'paused': 'paused',
            'scheduled_by_user_id': 'scheduledByUserId',
            'scheduling_local_time_zone_name': 'schedulingLocalTimeZoneName',
            'scheduling_type': 'schedulingType',
            'scheduling_value': 'schedulingValue'
        }

        self._duplicate_product_configuration = duplicate_product_configuration
        self._input = input
        self._input_configured_by_user_id = input_configured_by_user_id
        self._pause_status_changed_by_user_id = pause_status_changed_by_user_id
        self._pause_status_changed_utc_date = pause_status_changed_utc_date
        self._paused = paused
        self._scheduled_by_user_id = scheduled_by_user_id
        self._scheduling_local_time_zone_name = scheduling_local_time_zone_name
        self._scheduling_type = scheduling_type
        self._scheduling_value = scheduling_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoImportConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autoImportConfiguration of this AutoImportConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duplicate_product_configuration(self):
        """Gets the duplicate_product_configuration of this AutoImportConfiguration.


        :return: The duplicate_product_configuration of this AutoImportConfiguration.
        :rtype: DuplicateProductValueConfiguration
        """
        return self._duplicate_product_configuration

    @duplicate_product_configuration.setter
    def duplicate_product_configuration(self, duplicate_product_configuration):
        """Sets the duplicate_product_configuration of this AutoImportConfiguration.


        :param duplicate_product_configuration: The duplicate_product_configuration of this AutoImportConfiguration.
        :type duplicate_product_configuration: DuplicateProductValueConfiguration
        """
        if duplicate_product_configuration is None:
            raise ValueError("Invalid value for `duplicate_product_configuration`, must not be `None`")

        self._duplicate_product_configuration = duplicate_product_configuration

    @property
    def input(self):
        """Gets the input of this AutoImportConfiguration.


        :return: The input of this AutoImportConfiguration.
        :rtype: InputConfiguration
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this AutoImportConfiguration.


        :param input: The input of this AutoImportConfiguration.
        :type input: InputConfiguration
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def input_configured_by_user_id(self):
        """Gets the input_configured_by_user_id of this AutoImportConfiguration.

        The user identifier

        :return: The input_configured_by_user_id of this AutoImportConfiguration.
        :rtype: str
        """
        return self._input_configured_by_user_id

    @input_configured_by_user_id.setter
    def input_configured_by_user_id(self, input_configured_by_user_id):
        """Sets the input_configured_by_user_id of this AutoImportConfiguration.

        The user identifier

        :param input_configured_by_user_id: The input_configured_by_user_id of this AutoImportConfiguration.
        :type input_configured_by_user_id: str
        """
        if input_configured_by_user_id is None:
            raise ValueError("Invalid value for `input_configured_by_user_id`, must not be `None`")

        self._input_configured_by_user_id = input_configured_by_user_id

    @property
    def pause_status_changed_by_user_id(self):
        """Gets the pause_status_changed_by_user_id of this AutoImportConfiguration.

        The user identifier

        :return: The pause_status_changed_by_user_id of this AutoImportConfiguration.
        :rtype: str
        """
        return self._pause_status_changed_by_user_id

    @pause_status_changed_by_user_id.setter
    def pause_status_changed_by_user_id(self, pause_status_changed_by_user_id):
        """Sets the pause_status_changed_by_user_id of this AutoImportConfiguration.

        The user identifier

        :param pause_status_changed_by_user_id: The pause_status_changed_by_user_id of this AutoImportConfiguration.
        :type pause_status_changed_by_user_id: str
        """

        self._pause_status_changed_by_user_id = pause_status_changed_by_user_id

    @property
    def pause_status_changed_utc_date(self):
        """Gets the pause_status_changed_utc_date of this AutoImportConfiguration.

        Indicate when the pause status has changed in UTC date.

        :return: The pause_status_changed_utc_date of this AutoImportConfiguration.
        :rtype: datetime
        """
        return self._pause_status_changed_utc_date

    @pause_status_changed_utc_date.setter
    def pause_status_changed_utc_date(self, pause_status_changed_utc_date):
        """Sets the pause_status_changed_utc_date of this AutoImportConfiguration.

        Indicate when the pause status has changed in UTC date.

        :param pause_status_changed_utc_date: The pause_status_changed_utc_date of this AutoImportConfiguration.
        :type pause_status_changed_utc_date: datetime
        """

        self._pause_status_changed_utc_date = pause_status_changed_utc_date

    @property
    def paused(self):
        """Gets the paused of this AutoImportConfiguration.

        Indicate if the auto import is in pause or not.

        :return: The paused of this AutoImportConfiguration.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this AutoImportConfiguration.

        Indicate if the auto import is in pause or not.

        :param paused: The paused of this AutoImportConfiguration.
        :type paused: bool
        """
        if paused is None:
            raise ValueError("Invalid value for `paused`, must not be `None`")

        self._paused = paused

    @property
    def scheduled_by_user_id(self):
        """Gets the scheduled_by_user_id of this AutoImportConfiguration.

        The user identifier

        :return: The scheduled_by_user_id of this AutoImportConfiguration.
        :rtype: str
        """
        return self._scheduled_by_user_id

    @scheduled_by_user_id.setter
    def scheduled_by_user_id(self, scheduled_by_user_id):
        """Sets the scheduled_by_user_id of this AutoImportConfiguration.

        The user identifier

        :param scheduled_by_user_id: The scheduled_by_user_id of this AutoImportConfiguration.
        :type scheduled_by_user_id: str
        """

        self._scheduled_by_user_id = scheduled_by_user_id

    @property
    def scheduling_local_time_zone_name(self):
        """Gets the scheduling_local_time_zone_name of this AutoImportConfiguration.

        Indicate the time zone name of the scheduling. If the scheduling type is \"Schedule\"

        :return: The scheduling_local_time_zone_name of this AutoImportConfiguration.
        :rtype: str
        """
        return self._scheduling_local_time_zone_name

    @scheduling_local_time_zone_name.setter
    def scheduling_local_time_zone_name(self, scheduling_local_time_zone_name):
        """Sets the scheduling_local_time_zone_name of this AutoImportConfiguration.

        Indicate the time zone name of the scheduling. If the scheduling type is \"Schedule\"

        :param scheduling_local_time_zone_name: The scheduling_local_time_zone_name of this AutoImportConfiguration.
        :type scheduling_local_time_zone_name: str
        """

        self._scheduling_local_time_zone_name = scheduling_local_time_zone_name

    @property
    def scheduling_type(self):
        """Gets the scheduling_type of this AutoImportConfiguration.


        :return: The scheduling_type of this AutoImportConfiguration.
        :rtype: SchedulingType
        """
        return self._scheduling_type

    @scheduling_type.setter
    def scheduling_type(self, scheduling_type):
        """Sets the scheduling_type of this AutoImportConfiguration.


        :param scheduling_type: The scheduling_type of this AutoImportConfiguration.
        :type scheduling_type: SchedulingType
        """
        if scheduling_type is None:
            raise ValueError("Invalid value for `scheduling_type`, must not be `None`")

        self._scheduling_type = scheduling_type

    @property
    def scheduling_value(self):
        """Gets the scheduling_value of this AutoImportConfiguration.

        Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.

        :return: The scheduling_value of this AutoImportConfiguration.
        :rtype: List[str]
        """
        return self._scheduling_value

    @scheduling_value.setter
    def scheduling_value(self, scheduling_value):
        """Sets the scheduling_value of this AutoImportConfiguration.

        Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.

        :param scheduling_value: The scheduling_value of this AutoImportConfiguration.
        :type scheduling_value: List[str]
        """
        if scheduling_value is None:
            raise ValueError("Invalid value for `scheduling_value`, must not be `None`")
        if scheduling_value is not None and len(scheduling_value) < 1:
            raise ValueError("Invalid value for `scheduling_value`, number of items must be greater than or equal to `1`")

        self._scheduling_value = scheduling_value
