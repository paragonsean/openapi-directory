# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_options import CompareOptions
from openapi_server.models.duplicate_product_value_strategy import DuplicateProductValueStrategy
from openapi_server import util


class DuplicateProductValueConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compare_options: CompareOptions=CompareOptions.NONE, strategy: DuplicateProductValueStrategy=DuplicateProductValueStrategy.NONE):
        """DuplicateProductValueConfiguration - a model defined in OpenAPI

        :param compare_options: The compare_options of this DuplicateProductValueConfiguration.
        :param strategy: The strategy of this DuplicateProductValueConfiguration.
        """
        self.openapi_types = {
            'compare_options': CompareOptions,
            'strategy': DuplicateProductValueStrategy
        }

        self.attribute_map = {
            'compare_options': 'compareOptions',
            'strategy': 'strategy'
        }

        self._compare_options = compare_options
        self._strategy = strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DuplicateProductValueConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The duplicateProductValueConfiguration of this DuplicateProductValueConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compare_options(self):
        """Gets the compare_options of this DuplicateProductValueConfiguration.


        :return: The compare_options of this DuplicateProductValueConfiguration.
        :rtype: CompareOptions
        """
        return self._compare_options

    @compare_options.setter
    def compare_options(self, compare_options):
        """Sets the compare_options of this DuplicateProductValueConfiguration.


        :param compare_options: The compare_options of this DuplicateProductValueConfiguration.
        :type compare_options: CompareOptions
        """
        if compare_options is None:
            raise ValueError("Invalid value for `compare_options`, must not be `None`")

        self._compare_options = compare_options

    @property
    def strategy(self):
        """Gets the strategy of this DuplicateProductValueConfiguration.


        :return: The strategy of this DuplicateProductValueConfiguration.
        :rtype: DuplicateProductValueStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this DuplicateProductValueConfiguration.


        :param strategy: The strategy of this DuplicateProductValueConfiguration.
        :type strategy: DuplicateProductValueStrategy
        """
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")

        self._strategy = strategy
