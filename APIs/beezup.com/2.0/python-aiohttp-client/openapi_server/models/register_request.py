# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commercial_owner_user_id: str=None, culture_name: str=None, email: str=None, password: str=None):
        """RegisterRequest - a model defined in OpenAPI

        :param commercial_owner_user_id: The commercial_owner_user_id of this RegisterRequest.
        :param culture_name: The culture_name of this RegisterRequest.
        :param email: The email of this RegisterRequest.
        :param password: The password of this RegisterRequest.
        """
        self.openapi_types = {
            'commercial_owner_user_id': str,
            'culture_name': str,
            'email': str,
            'password': str
        }

        self.attribute_map = {
            'commercial_owner_user_id': 'commercialOwnerUserId',
            'culture_name': 'cultureName',
            'email': 'email',
            'password': 'password'
        }

        self._commercial_owner_user_id = commercial_owner_user_id
        self._culture_name = culture_name
        self._email = email
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The registerRequest of this RegisterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commercial_owner_user_id(self):
        """Gets the commercial_owner_user_id of this RegisterRequest.

        The user id of your commercial in BeezUP.

        :return: The commercial_owner_user_id of this RegisterRequest.
        :rtype: str
        """
        return self._commercial_owner_user_id

    @commercial_owner_user_id.setter
    def commercial_owner_user_id(self, commercial_owner_user_id):
        """Sets the commercial_owner_user_id of this RegisterRequest.

        The user id of your commercial in BeezUP.

        :param commercial_owner_user_id: The commercial_owner_user_id of this RegisterRequest.
        :type commercial_owner_user_id: str
        """

        self._commercial_owner_user_id = commercial_owner_user_id

    @property
    def culture_name(self):
        """Gets the culture_name of this RegisterRequest.

        Can be null. Default: en-GB. The culture name you want to use. FYI. \\ The email activation will use this culture. 

        :return: The culture_name of this RegisterRequest.
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this RegisterRequest.

        Can be null. Default: en-GB. The culture name you want to use. FYI. \\ The email activation will use this culture. 

        :param culture_name: The culture_name of this RegisterRequest.
        :type culture_name: str
        """

        self._culture_name = culture_name

    @property
    def email(self):
        """Gets the email of this RegisterRequest.

        Your email. We refuse disposable email.

        :return: The email of this RegisterRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegisterRequest.

        Your email. We refuse disposable email.

        :param email: The email of this RegisterRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def password(self):
        """Gets the password of this RegisterRequest.

        The password you want to use for your new account. \\ The password length must be greater or equals to 6 and lower or equals to 128. \\ The password must contains at least one number and one special character 

        :return: The password of this RegisterRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegisterRequest.

        The password you want to use for your new account. \\ The password length must be greater or equals to 6 and lower or equals to 128. \\ The password must contains at least one number and one special character 

        :param password: The password of this RegisterRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
