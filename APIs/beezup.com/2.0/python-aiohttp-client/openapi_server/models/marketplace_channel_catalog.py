# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_api_settings_status import BeezUPCommonApiSettingsStatus
from openapi_server.models.marketplace_channel_catalog_links import MarketplaceChannelCatalogLinks
from openapi_server.models.marketplace_channel_catalog_lov_links import MarketplaceChannelCatalogLovLinks
from openapi_server import util


class MarketplaceChannelCatalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_settings_status: BeezUPCommonApiSettingsStatus=None, beez_up_channel_catalog_id: str=None, beez_up_channel_id: str=None, beez_up_marketplace_name: object=None, beez_up_store_id: str=None, beez_up_store_name: str=None, enabled: bool=None, links: MarketplaceChannelCatalogLinks=None, lov_links: MarketplaceChannelCatalogLovLinks=None, marketplace_account_id: int=None, marketplace_business_code: str=None, marketplace_iso_country_code_alpha2: str=None, marketplace_market_place_id: str=None, marketplace_merchant_identifiers: Dict[str, str]=None, marketplace_technical_code: str=None):
        """MarketplaceChannelCatalog - a model defined in OpenAPI

        :param api_settings_status: The api_settings_status of this MarketplaceChannelCatalog.
        :param beez_up_channel_catalog_id: The beez_up_channel_catalog_id of this MarketplaceChannelCatalog.
        :param beez_up_channel_id: The beez_up_channel_id of this MarketplaceChannelCatalog.
        :param beez_up_marketplace_name: The beez_up_marketplace_name of this MarketplaceChannelCatalog.
        :param beez_up_store_id: The beez_up_store_id of this MarketplaceChannelCatalog.
        :param beez_up_store_name: The beez_up_store_name of this MarketplaceChannelCatalog.
        :param enabled: The enabled of this MarketplaceChannelCatalog.
        :param links: The links of this MarketplaceChannelCatalog.
        :param lov_links: The lov_links of this MarketplaceChannelCatalog.
        :param marketplace_account_id: The marketplace_account_id of this MarketplaceChannelCatalog.
        :param marketplace_business_code: The marketplace_business_code of this MarketplaceChannelCatalog.
        :param marketplace_iso_country_code_alpha2: The marketplace_iso_country_code_alpha2 of this MarketplaceChannelCatalog.
        :param marketplace_market_place_id: The marketplace_market_place_id of this MarketplaceChannelCatalog.
        :param marketplace_merchant_identifiers: The marketplace_merchant_identifiers of this MarketplaceChannelCatalog.
        :param marketplace_technical_code: The marketplace_technical_code of this MarketplaceChannelCatalog.
        """
        self.openapi_types = {
            'api_settings_status': BeezUPCommonApiSettingsStatus,
            'beez_up_channel_catalog_id': str,
            'beez_up_channel_id': str,
            'beez_up_marketplace_name': object,
            'beez_up_store_id': str,
            'beez_up_store_name': str,
            'enabled': bool,
            'links': MarketplaceChannelCatalogLinks,
            'lov_links': MarketplaceChannelCatalogLovLinks,
            'marketplace_account_id': int,
            'marketplace_business_code': str,
            'marketplace_iso_country_code_alpha2': str,
            'marketplace_market_place_id': str,
            'marketplace_merchant_identifiers': Dict[str, str],
            'marketplace_technical_code': str
        }

        self.attribute_map = {
            'api_settings_status': 'apiSettingsStatus',
            'beez_up_channel_catalog_id': 'beezUPChannelCatalogId',
            'beez_up_channel_id': 'beezUPChannelId',
            'beez_up_marketplace_name': 'beezUPMarketplaceName',
            'beez_up_store_id': 'beezUPStoreId',
            'beez_up_store_name': 'beezUPStoreName',
            'enabled': 'enabled',
            'links': 'links',
            'lov_links': 'lovLinks',
            'marketplace_account_id': 'marketplaceAccountId',
            'marketplace_business_code': 'marketplaceBusinessCode',
            'marketplace_iso_country_code_alpha2': 'marketplaceIsoCountryCodeAlpha2',
            'marketplace_market_place_id': 'marketplaceMarketPlaceId',
            'marketplace_merchant_identifiers': 'marketplaceMerchantIdentifiers',
            'marketplace_technical_code': 'marketplaceTechnicalCode'
        }

        self._api_settings_status = api_settings_status
        self._beez_up_channel_catalog_id = beez_up_channel_catalog_id
        self._beez_up_channel_id = beez_up_channel_id
        self._beez_up_marketplace_name = beez_up_marketplace_name
        self._beez_up_store_id = beez_up_store_id
        self._beez_up_store_name = beez_up_store_name
        self._enabled = enabled
        self._links = links
        self._lov_links = lov_links
        self._marketplace_account_id = marketplace_account_id
        self._marketplace_business_code = marketplace_business_code
        self._marketplace_iso_country_code_alpha2 = marketplace_iso_country_code_alpha2
        self._marketplace_market_place_id = marketplace_market_place_id
        self._marketplace_merchant_identifiers = marketplace_merchant_identifiers
        self._marketplace_technical_code = marketplace_technical_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceChannelCatalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The marketplaceChannelCatalog of this MarketplaceChannelCatalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_settings_status(self):
        """Gets the api_settings_status of this MarketplaceChannelCatalog.


        :return: The api_settings_status of this MarketplaceChannelCatalog.
        :rtype: BeezUPCommonApiSettingsStatus
        """
        return self._api_settings_status

    @api_settings_status.setter
    def api_settings_status(self, api_settings_status):
        """Sets the api_settings_status of this MarketplaceChannelCatalog.


        :param api_settings_status: The api_settings_status of this MarketplaceChannelCatalog.
        :type api_settings_status: BeezUPCommonApiSettingsStatus
        """
        if api_settings_status is None:
            raise ValueError("Invalid value for `api_settings_status`, must not be `None`")

        self._api_settings_status = api_settings_status

    @property
    def beez_up_channel_catalog_id(self):
        """Gets the beez_up_channel_catalog_id of this MarketplaceChannelCatalog.

        The channel catalog identifier

        :return: The beez_up_channel_catalog_id of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._beez_up_channel_catalog_id

    @beez_up_channel_catalog_id.setter
    def beez_up_channel_catalog_id(self, beez_up_channel_catalog_id):
        """Sets the beez_up_channel_catalog_id of this MarketplaceChannelCatalog.

        The channel catalog identifier

        :param beez_up_channel_catalog_id: The beez_up_channel_catalog_id of this MarketplaceChannelCatalog.
        :type beez_up_channel_catalog_id: str
        """
        if beez_up_channel_catalog_id is None:
            raise ValueError("Invalid value for `beez_up_channel_catalog_id`, must not be `None`")

        self._beez_up_channel_catalog_id = beez_up_channel_catalog_id

    @property
    def beez_up_channel_id(self):
        """Gets the beez_up_channel_id of this MarketplaceChannelCatalog.

        The channel identifier

        :return: The beez_up_channel_id of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._beez_up_channel_id

    @beez_up_channel_id.setter
    def beez_up_channel_id(self, beez_up_channel_id):
        """Sets the beez_up_channel_id of this MarketplaceChannelCatalog.

        The channel identifier

        :param beez_up_channel_id: The beez_up_channel_id of this MarketplaceChannelCatalog.
        :type beez_up_channel_id: str
        """
        if beez_up_channel_id is None:
            raise ValueError("Invalid value for `beez_up_channel_id`, must not be `None`")

        self._beez_up_channel_id = beez_up_channel_id

    @property
    def beez_up_marketplace_name(self):
        """Gets the beez_up_marketplace_name of this MarketplaceChannelCatalog.

        The marketplace name

        :return: The beez_up_marketplace_name of this MarketplaceChannelCatalog.
        :rtype: object
        """
        return self._beez_up_marketplace_name

    @beez_up_marketplace_name.setter
    def beez_up_marketplace_name(self, beez_up_marketplace_name):
        """Sets the beez_up_marketplace_name of this MarketplaceChannelCatalog.

        The marketplace name

        :param beez_up_marketplace_name: The beez_up_marketplace_name of this MarketplaceChannelCatalog.
        :type beez_up_marketplace_name: object
        """
        if beez_up_marketplace_name is None:
            raise ValueError("Invalid value for `beez_up_marketplace_name`, must not be `None`")

        self._beez_up_marketplace_name = beez_up_marketplace_name

    @property
    def beez_up_store_id(self):
        """Gets the beez_up_store_id of this MarketplaceChannelCatalog.

        The store identifier

        :return: The beez_up_store_id of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._beez_up_store_id

    @beez_up_store_id.setter
    def beez_up_store_id(self, beez_up_store_id):
        """Sets the beez_up_store_id of this MarketplaceChannelCatalog.

        The store identifier

        :param beez_up_store_id: The beez_up_store_id of this MarketplaceChannelCatalog.
        :type beez_up_store_id: str
        """
        if beez_up_store_id is None:
            raise ValueError("Invalid value for `beez_up_store_id`, must not be `None`")

        self._beez_up_store_id = beez_up_store_id

    @property
    def beez_up_store_name(self):
        """Gets the beez_up_store_name of this MarketplaceChannelCatalog.

        The store name

        :return: The beez_up_store_name of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._beez_up_store_name

    @beez_up_store_name.setter
    def beez_up_store_name(self, beez_up_store_name):
        """Sets the beez_up_store_name of this MarketplaceChannelCatalog.

        The store name

        :param beez_up_store_name: The beez_up_store_name of this MarketplaceChannelCatalog.
        :type beez_up_store_name: str
        """
        if beez_up_store_name is None:
            raise ValueError("Invalid value for `beez_up_store_name`, must not be `None`")

        self._beez_up_store_name = beez_up_store_name

    @property
    def enabled(self):
        """Gets the enabled of this MarketplaceChannelCatalog.

        The enabled status of the Channel Catalog

        :return: The enabled of this MarketplaceChannelCatalog.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MarketplaceChannelCatalog.

        The enabled status of the Channel Catalog

        :param enabled: The enabled of this MarketplaceChannelCatalog.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def links(self):
        """Gets the links of this MarketplaceChannelCatalog.


        :return: The links of this MarketplaceChannelCatalog.
        :rtype: MarketplaceChannelCatalogLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MarketplaceChannelCatalog.


        :param links: The links of this MarketplaceChannelCatalog.
        :type links: MarketplaceChannelCatalogLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def lov_links(self):
        """Gets the lov_links of this MarketplaceChannelCatalog.


        :return: The lov_links of this MarketplaceChannelCatalog.
        :rtype: MarketplaceChannelCatalogLovLinks
        """
        return self._lov_links

    @lov_links.setter
    def lov_links(self, lov_links):
        """Sets the lov_links of this MarketplaceChannelCatalog.


        :param lov_links: The lov_links of this MarketplaceChannelCatalog.
        :type lov_links: MarketplaceChannelCatalogLovLinks
        """
        if lov_links is None:
            raise ValueError("Invalid value for `lov_links`, must not be `None`")

        self._lov_links = lov_links

    @property
    def marketplace_account_id(self):
        """Gets the marketplace_account_id of this MarketplaceChannelCatalog.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The marketplace_account_id of this MarketplaceChannelCatalog.
        :rtype: int
        """
        return self._marketplace_account_id

    @marketplace_account_id.setter
    def marketplace_account_id(self, marketplace_account_id):
        """Sets the marketplace_account_id of this MarketplaceChannelCatalog.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param marketplace_account_id: The marketplace_account_id of this MarketplaceChannelCatalog.
        :type marketplace_account_id: int
        """

        self._marketplace_account_id = marketplace_account_id

    @property
    def marketplace_business_code(self):
        """Gets the marketplace_business_code of this MarketplaceChannelCatalog.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :return: The marketplace_business_code of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._marketplace_business_code

    @marketplace_business_code.setter
    def marketplace_business_code(self, marketplace_business_code):
        """Sets the marketplace_business_code of this MarketplaceChannelCatalog.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :param marketplace_business_code: The marketplace_business_code of this MarketplaceChannelCatalog.
        :type marketplace_business_code: str
        """
        if marketplace_business_code is None:
            raise ValueError("Invalid value for `marketplace_business_code`, must not be `None`")

        self._marketplace_business_code = marketplace_business_code

    @property
    def marketplace_iso_country_code_alpha2(self):
        """Gets the marketplace_iso_country_code_alpha2 of this MarketplaceChannelCatalog.

        The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)

        :return: The marketplace_iso_country_code_alpha2 of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._marketplace_iso_country_code_alpha2

    @marketplace_iso_country_code_alpha2.setter
    def marketplace_iso_country_code_alpha2(self, marketplace_iso_country_code_alpha2):
        """Sets the marketplace_iso_country_code_alpha2 of this MarketplaceChannelCatalog.

        The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)

        :param marketplace_iso_country_code_alpha2: The marketplace_iso_country_code_alpha2 of this MarketplaceChannelCatalog.
        :type marketplace_iso_country_code_alpha2: str
        """
        if marketplace_iso_country_code_alpha2 is None:
            raise ValueError("Invalid value for `marketplace_iso_country_code_alpha2`, must not be `None`")

        self._marketplace_iso_country_code_alpha2 = marketplace_iso_country_code_alpha2

    @property
    def marketplace_market_place_id(self):
        """Gets the marketplace_market_place_id of this MarketplaceChannelCatalog.

        The marketplace identifier in the marketplace

        :return: The marketplace_market_place_id of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._marketplace_market_place_id

    @marketplace_market_place_id.setter
    def marketplace_market_place_id(self, marketplace_market_place_id):
        """Sets the marketplace_market_place_id of this MarketplaceChannelCatalog.

        The marketplace identifier in the marketplace

        :param marketplace_market_place_id: The marketplace_market_place_id of this MarketplaceChannelCatalog.
        :type marketplace_market_place_id: str
        """
        if marketplace_market_place_id is None:
            raise ValueError("Invalid value for `marketplace_market_place_id`, must not be `None`")

        self._marketplace_market_place_id = marketplace_market_place_id

    @property
    def marketplace_merchant_identifiers(self):
        """Gets the marketplace_merchant_identifiers of this MarketplaceChannelCatalog.

        The marketplace merchant identifier list

        :return: The marketplace_merchant_identifiers of this MarketplaceChannelCatalog.
        :rtype: Dict[str, str]
        """
        return self._marketplace_merchant_identifiers

    @marketplace_merchant_identifiers.setter
    def marketplace_merchant_identifiers(self, marketplace_merchant_identifiers):
        """Sets the marketplace_merchant_identifiers of this MarketplaceChannelCatalog.

        The marketplace merchant identifier list

        :param marketplace_merchant_identifiers: The marketplace_merchant_identifiers of this MarketplaceChannelCatalog.
        :type marketplace_merchant_identifiers: Dict[str, str]
        """

        self._marketplace_merchant_identifiers = marketplace_merchant_identifiers

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this MarketplaceChannelCatalog.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this MarketplaceChannelCatalog.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this MarketplaceChannelCatalog.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this MarketplaceChannelCatalog.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code
