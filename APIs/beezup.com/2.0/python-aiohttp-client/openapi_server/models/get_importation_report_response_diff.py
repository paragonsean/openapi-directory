# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetImportationReportResponseDiff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_count: int=None, deleted_count: int=None, unchanged_count: int=None, updated_count: int=None):
        """GetImportationReportResponseDiff - a model defined in OpenAPI

        :param created_count: The created_count of this GetImportationReportResponseDiff.
        :param deleted_count: The deleted_count of this GetImportationReportResponseDiff.
        :param unchanged_count: The unchanged_count of this GetImportationReportResponseDiff.
        :param updated_count: The updated_count of this GetImportationReportResponseDiff.
        """
        self.openapi_types = {
            'created_count': int,
            'deleted_count': int,
            'unchanged_count': int,
            'updated_count': int
        }

        self.attribute_map = {
            'created_count': 'createdCount',
            'deleted_count': 'deletedCount',
            'unchanged_count': 'unchangedCount',
            'updated_count': 'updatedCount'
        }

        self._created_count = created_count
        self._deleted_count = deleted_count
        self._unchanged_count = unchanged_count
        self._updated_count = updated_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationReportResponseDiff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationReportResponseDiff of this GetImportationReportResponseDiff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_count(self):
        """Gets the created_count of this GetImportationReportResponseDiff.


        :return: The created_count of this GetImportationReportResponseDiff.
        :rtype: int
        """
        return self._created_count

    @created_count.setter
    def created_count(self, created_count):
        """Sets the created_count of this GetImportationReportResponseDiff.


        :param created_count: The created_count of this GetImportationReportResponseDiff.
        :type created_count: int
        """
        if created_count is None:
            raise ValueError("Invalid value for `created_count`, must not be `None`")

        self._created_count = created_count

    @property
    def deleted_count(self):
        """Gets the deleted_count of this GetImportationReportResponseDiff.


        :return: The deleted_count of this GetImportationReportResponseDiff.
        :rtype: int
        """
        return self._deleted_count

    @deleted_count.setter
    def deleted_count(self, deleted_count):
        """Sets the deleted_count of this GetImportationReportResponseDiff.


        :param deleted_count: The deleted_count of this GetImportationReportResponseDiff.
        :type deleted_count: int
        """
        if deleted_count is None:
            raise ValueError("Invalid value for `deleted_count`, must not be `None`")

        self._deleted_count = deleted_count

    @property
    def unchanged_count(self):
        """Gets the unchanged_count of this GetImportationReportResponseDiff.


        :return: The unchanged_count of this GetImportationReportResponseDiff.
        :rtype: int
        """
        return self._unchanged_count

    @unchanged_count.setter
    def unchanged_count(self, unchanged_count):
        """Sets the unchanged_count of this GetImportationReportResponseDiff.


        :param unchanged_count: The unchanged_count of this GetImportationReportResponseDiff.
        :type unchanged_count: int
        """

        self._unchanged_count = unchanged_count

    @property
    def updated_count(self):
        """Gets the updated_count of this GetImportationReportResponseDiff.


        :return: The updated_count of this GetImportationReportResponseDiff.
        :rtype: int
        """
        return self._updated_count

    @updated_count.setter
    def updated_count(self, updated_count):
        """Sets the updated_count of this GetImportationReportResponseDiff.


        :param updated_count: The updated_count of this GetImportationReportResponseDiff.
        :type updated_count: int
        """
        if updated_count is None:
            raise ValueError("Invalid value for `updated_count`, must not be `None`")

        self._updated_count = updated_count
