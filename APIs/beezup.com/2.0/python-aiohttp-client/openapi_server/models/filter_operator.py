# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_operator_data_type import FilterOperatorDataType
from openapi_server import util


class FilterOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_channel_column_data_type: FilterOperatorDataType=FilterOperatorDataType.STRING, expected_value_data_type: FilterOperatorDataType=FilterOperatorDataType.STRING, name: str=None, value_required: bool=None):
        """FilterOperator - a model defined in OpenAPI

        :param expected_channel_column_data_type: The expected_channel_column_data_type of this FilterOperator.
        :param expected_value_data_type: The expected_value_data_type of this FilterOperator.
        :param name: The name of this FilterOperator.
        :param value_required: The value_required of this FilterOperator.
        """
        self.openapi_types = {
            'expected_channel_column_data_type': FilterOperatorDataType,
            'expected_value_data_type': FilterOperatorDataType,
            'name': str,
            'value_required': bool
        }

        self.attribute_map = {
            'expected_channel_column_data_type': 'expectedChannelColumnDataType',
            'expected_value_data_type': 'expectedValueDataType',
            'name': 'name',
            'value_required': 'valueRequired'
        }

        self._expected_channel_column_data_type = expected_channel_column_data_type
        self._expected_value_data_type = expected_value_data_type
        self._name = name
        self._value_required = value_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The filterOperator of this FilterOperator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_channel_column_data_type(self):
        """Gets the expected_channel_column_data_type of this FilterOperator.


        :return: The expected_channel_column_data_type of this FilterOperator.
        :rtype: FilterOperatorDataType
        """
        return self._expected_channel_column_data_type

    @expected_channel_column_data_type.setter
    def expected_channel_column_data_type(self, expected_channel_column_data_type):
        """Sets the expected_channel_column_data_type of this FilterOperator.


        :param expected_channel_column_data_type: The expected_channel_column_data_type of this FilterOperator.
        :type expected_channel_column_data_type: FilterOperatorDataType
        """

        self._expected_channel_column_data_type = expected_channel_column_data_type

    @property
    def expected_value_data_type(self):
        """Gets the expected_value_data_type of this FilterOperator.


        :return: The expected_value_data_type of this FilterOperator.
        :rtype: FilterOperatorDataType
        """
        return self._expected_value_data_type

    @expected_value_data_type.setter
    def expected_value_data_type(self, expected_value_data_type):
        """Sets the expected_value_data_type of this FilterOperator.


        :param expected_value_data_type: The expected_value_data_type of this FilterOperator.
        :type expected_value_data_type: FilterOperatorDataType
        """

        self._expected_value_data_type = expected_value_data_type

    @property
    def name(self):
        """Gets the name of this FilterOperator.

        The exclusion filter operator name

        :return: The name of this FilterOperator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterOperator.

        The exclusion filter operator name

        :param name: The name of this FilterOperator.
        :type name: str
        """

        self._name = name

    @property
    def value_required(self):
        """Gets the value_required of this FilterOperator.

        This operator requires a value

        :return: The value_required of this FilterOperator.
        :rtype: bool
        """
        return self._value_required

    @value_required.setter
    def value_required(self, value_required):
        """Sets the value_required of this FilterOperator.

        This operator requires a value

        :param value_required: The value_required of this FilterOperator.
        :type value_required: bool
        """

        self._value_required = value_required
