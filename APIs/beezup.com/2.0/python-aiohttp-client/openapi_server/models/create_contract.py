# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_period_in_month: int=None, coupon_discount_code: str=None, coupon_offer_code: str=None, offer_id: int=None, store_count: int=None):
        """CreateContract - a model defined in OpenAPI

        :param billing_period_in_month: The billing_period_in_month of this CreateContract.
        :param coupon_discount_code: The coupon_discount_code of this CreateContract.
        :param coupon_offer_code: The coupon_offer_code of this CreateContract.
        :param offer_id: The offer_id of this CreateContract.
        :param store_count: The store_count of this CreateContract.
        """
        self.openapi_types = {
            'billing_period_in_month': int,
            'coupon_discount_code': str,
            'coupon_offer_code': str,
            'offer_id': int,
            'store_count': int
        }

        self.attribute_map = {
            'billing_period_in_month': 'billingPeriodInMonth',
            'coupon_discount_code': 'couponDiscountCode',
            'coupon_offer_code': 'couponOfferCode',
            'offer_id': 'offerId',
            'store_count': 'storeCount'
        }

        self._billing_period_in_month = billing_period_in_month
        self._coupon_discount_code = coupon_discount_code
        self._coupon_offer_code = coupon_offer_code
        self._offer_id = offer_id
        self._store_count = store_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createContract of this CreateContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_period_in_month(self):
        """Gets the billing_period_in_month of this CreateContract.

        Can be null. The billing period in month based on /billingPeriods

        :return: The billing_period_in_month of this CreateContract.
        :rtype: int
        """
        return self._billing_period_in_month

    @billing_period_in_month.setter
    def billing_period_in_month(self, billing_period_in_month):
        """Sets the billing_period_in_month of this CreateContract.

        Can be null. The billing period in month based on /billingPeriods

        :param billing_period_in_month: The billing_period_in_month of this CreateContract.
        :type billing_period_in_month: int
        """
        if billing_period_in_month is None:
            raise ValueError("Invalid value for `billing_period_in_month`, must not be `None`")
        if billing_period_in_month is not None and billing_period_in_month < 1:
            raise ValueError("Invalid value for `billing_period_in_month`, must be a value greater than or equal to `1`")

        self._billing_period_in_month = billing_period_in_month

    @property
    def coupon_discount_code(self):
        """Gets the coupon_discount_code of this CreateContract.

        The coupon discount code

        :return: The coupon_discount_code of this CreateContract.
        :rtype: str
        """
        return self._coupon_discount_code

    @coupon_discount_code.setter
    def coupon_discount_code(self, coupon_discount_code):
        """Sets the coupon_discount_code of this CreateContract.

        The coupon discount code

        :param coupon_discount_code: The coupon_discount_code of this CreateContract.
        :type coupon_discount_code: str
        """

        self._coupon_discount_code = coupon_discount_code

    @property
    def coupon_offer_code(self):
        """Gets the coupon_offer_code of this CreateContract.

        Your special coupon offer identifier

        :return: The coupon_offer_code of this CreateContract.
        :rtype: str
        """
        return self._coupon_offer_code

    @coupon_offer_code.setter
    def coupon_offer_code(self, coupon_offer_code):
        """Sets the coupon_offer_code of this CreateContract.

        Your special coupon offer identifier

        :param coupon_offer_code: The coupon_offer_code of this CreateContract.
        :type coupon_offer_code: str
        """

        self._coupon_offer_code = coupon_offer_code

    @property
    def offer_id(self):
        """Gets the offer_id of this CreateContract.

        The offer id based on /offers. Not a free offer of course.

        :return: The offer_id of this CreateContract.
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this CreateContract.

        The offer id based on /offers. Not a free offer of course.

        :param offer_id: The offer_id of this CreateContract.
        :type offer_id: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")
        if offer_id is not None and offer_id < 1:
            raise ValueError("Invalid value for `offer_id`, must be a value greater than or equal to `1`")

        self._offer_id = offer_id

    @property
    def store_count(self):
        """Gets the store_count of this CreateContract.

        The store count you want to have in your contract.

        :return: The store_count of this CreateContract.
        :rtype: int
        """
        return self._store_count

    @store_count.setter
    def store_count(self, store_count):
        """Sets the store_count of this CreateContract.

        The store count you want to have in your contract.

        :param store_count: The store_count of this CreateContract.
        :type store_count: int
        """
        if store_count is None:
            raise ValueError("Invalid value for `store_count`, must not be `None`")
        if store_count is not None and store_count < 1:
            raise ValueError("Invalid value for `store_count`, must be a value greater than or equal to `1`")

        self._store_count = store_count
