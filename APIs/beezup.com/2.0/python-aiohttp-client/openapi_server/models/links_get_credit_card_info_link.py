# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_http_method import BeezUPCommonHttpMethod
from openapi_server.models.beez_up_common_info_summaries import BeezUPCommonInfoSummaries
from openapi_server.models.beez_up_common_link_parameter3 import BeezUPCommonLinkParameter3
from openapi_server import util


class LinksGetCreditCardInfoLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_optional_params_provided: bool=None, all_required_params_provided: bool=None, description: str=None, doc_url: str=None, href: str=None, info: BeezUPCommonInfoSummaries=None, label: str=None, method: BeezUPCommonHttpMethod=BeezUPCommonHttpMethod.GET, operation_id: str=None, parameters: Dict[str, BeezUPCommonLinkParameter3]=None, url_templated: bool=None):
        """LinksGetCreditCardInfoLink - a model defined in OpenAPI

        :param all_optional_params_provided: The all_optional_params_provided of this LinksGetCreditCardInfoLink.
        :param all_required_params_provided: The all_required_params_provided of this LinksGetCreditCardInfoLink.
        :param description: The description of this LinksGetCreditCardInfoLink.
        :param doc_url: The doc_url of this LinksGetCreditCardInfoLink.
        :param href: The href of this LinksGetCreditCardInfoLink.
        :param info: The info of this LinksGetCreditCardInfoLink.
        :param label: The label of this LinksGetCreditCardInfoLink.
        :param method: The method of this LinksGetCreditCardInfoLink.
        :param operation_id: The operation_id of this LinksGetCreditCardInfoLink.
        :param parameters: The parameters of this LinksGetCreditCardInfoLink.
        :param url_templated: The url_templated of this LinksGetCreditCardInfoLink.
        """
        self.openapi_types = {
            'all_optional_params_provided': bool,
            'all_required_params_provided': bool,
            'description': str,
            'doc_url': str,
            'href': str,
            'info': BeezUPCommonInfoSummaries,
            'label': str,
            'method': BeezUPCommonHttpMethod,
            'operation_id': str,
            'parameters': Dict[str, BeezUPCommonLinkParameter3],
            'url_templated': bool
        }

        self.attribute_map = {
            'all_optional_params_provided': 'allOptionalParamsProvided',
            'all_required_params_provided': 'allRequiredParamsProvided',
            'description': 'description',
            'doc_url': 'docUrl',
            'href': 'href',
            'info': 'info',
            'label': 'label',
            'method': 'method',
            'operation_id': 'operationId',
            'parameters': 'parameters',
            'url_templated': 'urlTemplated'
        }

        self._all_optional_params_provided = all_optional_params_provided
        self._all_required_params_provided = all_required_params_provided
        self._description = description
        self._doc_url = doc_url
        self._href = href
        self._info = info
        self._label = label
        self._method = method
        self._operation_id = operation_id
        self._parameters = parameters
        self._url_templated = url_templated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksGetCreditCardInfoLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The links.getCreditCardInfoLink of this LinksGetCreditCardInfoLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_optional_params_provided(self):
        """Gets the all_optional_params_provided of this LinksGetCreditCardInfoLink.

        indicates whether all optionals params have been provided

        :return: The all_optional_params_provided of this LinksGetCreditCardInfoLink.
        :rtype: bool
        """
        return self._all_optional_params_provided

    @all_optional_params_provided.setter
    def all_optional_params_provided(self, all_optional_params_provided):
        """Sets the all_optional_params_provided of this LinksGetCreditCardInfoLink.

        indicates whether all optionals params have been provided

        :param all_optional_params_provided: The all_optional_params_provided of this LinksGetCreditCardInfoLink.
        :type all_optional_params_provided: bool
        """

        self._all_optional_params_provided = all_optional_params_provided

    @property
    def all_required_params_provided(self):
        """Gets the all_required_params_provided of this LinksGetCreditCardInfoLink.

        indicates whether all required params have been provided

        :return: The all_required_params_provided of this LinksGetCreditCardInfoLink.
        :rtype: bool
        """
        return self._all_required_params_provided

    @all_required_params_provided.setter
    def all_required_params_provided(self, all_required_params_provided):
        """Sets the all_required_params_provided of this LinksGetCreditCardInfoLink.

        indicates whether all required params have been provided

        :param all_required_params_provided: The all_required_params_provided of this LinksGetCreditCardInfoLink.
        :type all_required_params_provided: bool
        """

        self._all_required_params_provided = all_required_params_provided

    @property
    def description(self):
        """Gets the description of this LinksGetCreditCardInfoLink.

        The description of the link

        :return: The description of this LinksGetCreditCardInfoLink.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinksGetCreditCardInfoLink.

        The description of the link

        :param description: The description of this LinksGetCreditCardInfoLink.
        :type description: str
        """

        self._description = description

    @property
    def doc_url(self):
        """Gets the doc_url of this LinksGetCreditCardInfoLink.

        The documentation related to this operation.

        :return: The doc_url of this LinksGetCreditCardInfoLink.
        :rtype: str
        """
        return self._doc_url

    @doc_url.setter
    def doc_url(self, doc_url):
        """Sets the doc_url of this LinksGetCreditCardInfoLink.

        The documentation related to this operation.

        :param doc_url: The doc_url of this LinksGetCreditCardInfoLink.
        :type doc_url: str
        """

        self._doc_url = doc_url

    @property
    def href(self):
        """Gets the href of this LinksGetCreditCardInfoLink.

        Indicate the relative uri for this link

        :return: The href of this LinksGetCreditCardInfoLink.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LinksGetCreditCardInfoLink.

        Indicate the relative uri for this link

        :param href: The href of this LinksGetCreditCardInfoLink.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def info(self):
        """Gets the info of this LinksGetCreditCardInfoLink.


        :return: The info of this LinksGetCreditCardInfoLink.
        :rtype: BeezUPCommonInfoSummaries
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this LinksGetCreditCardInfoLink.


        :param info: The info of this LinksGetCreditCardInfoLink.
        :type info: BeezUPCommonInfoSummaries
        """

        self._info = info

    @property
    def label(self):
        """Gets the label of this LinksGetCreditCardInfoLink.

        The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.

        :return: The label of this LinksGetCreditCardInfoLink.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LinksGetCreditCardInfoLink.

        The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.

        :param label: The label of this LinksGetCreditCardInfoLink.
        :type label: str
        """

        self._label = label

    @property
    def method(self):
        """Gets the method of this LinksGetCreditCardInfoLink.


        :return: The method of this LinksGetCreditCardInfoLink.
        :rtype: BeezUPCommonHttpMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this LinksGetCreditCardInfoLink.


        :param method: The method of this LinksGetCreditCardInfoLink.
        :type method: BeezUPCommonHttpMethod
        """

        self._method = method

    @property
    def operation_id(self):
        """Gets the operation_id of this LinksGetCreditCardInfoLink.

        The operationId to call.

        :return: The operation_id of this LinksGetCreditCardInfoLink.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this LinksGetCreditCardInfoLink.

        The operationId to call.

        :param operation_id: The operation_id of this LinksGetCreditCardInfoLink.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def parameters(self):
        """Gets the parameters of this LinksGetCreditCardInfoLink.


        :return: The parameters of this LinksGetCreditCardInfoLink.
        :rtype: Dict[str, BeezUPCommonLinkParameter3]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this LinksGetCreditCardInfoLink.


        :param parameters: The parameters of this LinksGetCreditCardInfoLink.
        :type parameters: Dict[str, BeezUPCommonLinkParameter3]
        """

        self._parameters = parameters

    @property
    def url_templated(self):
        """Gets the url_templated of this LinksGetCreditCardInfoLink.

        indicates whether the href is templated or not

        :return: The url_templated of this LinksGetCreditCardInfoLink.
        :rtype: bool
        """
        return self._url_templated

    @url_templated.setter
    def url_templated(self, url_templated):
        """Sets the url_templated of this LinksGetCreditCardInfoLink.

        indicates whether the href is templated or not

        :param url_templated: The url_templated of this LinksGetCreditCardInfoLink.
        :type url_templated: bool
        """

        self._url_templated = url_templated
