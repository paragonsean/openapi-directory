# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_column_data_type import BeezUPCommonColumnDataType
from openapi_server.models.beez_up_common_column_importance import BeezUPCommonColumnImportance
from openapi_server import util


class ChannelColumnConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_column_name: str=None, column_data_type: BeezUPCommonColumnDataType=BeezUPCommonColumnDataType.STRING, column_importance: BeezUPCommonColumnImportance=BeezUPCommonColumnImportance.OPTIONAL):
        """ChannelColumnConfiguration - a model defined in OpenAPI

        :param beez_up_column_name: The beez_up_column_name of this ChannelColumnConfiguration.
        :param column_data_type: The column_data_type of this ChannelColumnConfiguration.
        :param column_importance: The column_importance of this ChannelColumnConfiguration.
        """
        self.openapi_types = {
            'beez_up_column_name': str,
            'column_data_type': BeezUPCommonColumnDataType,
            'column_importance': BeezUPCommonColumnImportance
        }

        self.attribute_map = {
            'beez_up_column_name': 'beezUPColumnName',
            'column_data_type': 'columnDataType',
            'column_importance': 'columnImportance'
        }

        self._beez_up_column_name = beez_up_column_name
        self._column_data_type = column_data_type
        self._column_importance = column_importance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelColumnConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelColumnConfiguration of this ChannelColumnConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_column_name(self):
        """Gets the beez_up_column_name of this ChannelColumnConfiguration.

        The BeezUP column name

        :return: The beez_up_column_name of this ChannelColumnConfiguration.
        :rtype: str
        """
        return self._beez_up_column_name

    @beez_up_column_name.setter
    def beez_up_column_name(self, beez_up_column_name):
        """Sets the beez_up_column_name of this ChannelColumnConfiguration.

        The BeezUP column name

        :param beez_up_column_name: The beez_up_column_name of this ChannelColumnConfiguration.
        :type beez_up_column_name: str
        """

        self._beez_up_column_name = beez_up_column_name

    @property
    def column_data_type(self):
        """Gets the column_data_type of this ChannelColumnConfiguration.


        :return: The column_data_type of this ChannelColumnConfiguration.
        :rtype: BeezUPCommonColumnDataType
        """
        return self._column_data_type

    @column_data_type.setter
    def column_data_type(self, column_data_type):
        """Sets the column_data_type of this ChannelColumnConfiguration.


        :param column_data_type: The column_data_type of this ChannelColumnConfiguration.
        :type column_data_type: BeezUPCommonColumnDataType
        """
        if column_data_type is None:
            raise ValueError("Invalid value for `column_data_type`, must not be `None`")

        self._column_data_type = column_data_type

    @property
    def column_importance(self):
        """Gets the column_importance of this ChannelColumnConfiguration.


        :return: The column_importance of this ChannelColumnConfiguration.
        :rtype: BeezUPCommonColumnImportance
        """
        return self._column_importance

    @column_importance.setter
    def column_importance(self, column_importance):
        """Sets the column_importance of this ChannelColumnConfiguration.


        :param column_importance: The column_importance of this ChannelColumnConfiguration.
        :type column_importance: BeezUPCommonColumnImportance
        """
        if column_importance is None:
            raise ValueError("Invalid value for `column_importance`, must not be `None`")

        self._column_importance = column_importance
