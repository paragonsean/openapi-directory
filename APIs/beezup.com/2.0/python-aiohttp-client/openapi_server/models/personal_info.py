# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_time_zone_id: int=None, first_name: str=None, last_name: str=None, phone_number: str=None, what_ido: str=None):
        """PersonalInfo - a model defined in OpenAPI

        :param beez_up_time_zone_id: The beez_up_time_zone_id of this PersonalInfo.
        :param first_name: The first_name of this PersonalInfo.
        :param last_name: The last_name of this PersonalInfo.
        :param phone_number: The phone_number of this PersonalInfo.
        :param what_ido: The what_ido of this PersonalInfo.
        """
        self.openapi_types = {
            'beez_up_time_zone_id': int,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'what_ido': str
        }

        self.attribute_map = {
            'beez_up_time_zone_id': 'beezUPTimeZoneId',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'phone_number': 'phoneNumber',
            'what_ido': 'whatIDo'
        }

        self._beez_up_time_zone_id = beez_up_time_zone_id
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._what_ido = what_ido

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The personalInfo of this PersonalInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_time_zone_id(self):
        """Gets the beez_up_time_zone_id of this PersonalInfo.

        The time zone identifier based on the list of values /v2/user/lov/BeezUPTimeZone

        :return: The beez_up_time_zone_id of this PersonalInfo.
        :rtype: int
        """
        return self._beez_up_time_zone_id

    @beez_up_time_zone_id.setter
    def beez_up_time_zone_id(self, beez_up_time_zone_id):
        """Sets the beez_up_time_zone_id of this PersonalInfo.

        The time zone identifier based on the list of values /v2/user/lov/BeezUPTimeZone

        :param beez_up_time_zone_id: The beez_up_time_zone_id of this PersonalInfo.
        :type beez_up_time_zone_id: int
        """
        if beez_up_time_zone_id is None:
            raise ValueError("Invalid value for `beez_up_time_zone_id`, must not be `None`")

        self._beez_up_time_zone_id = beez_up_time_zone_id

    @property
    def first_name(self):
        """Gets the first_name of this PersonalInfo.

        Your first name

        :return: The first_name of this PersonalInfo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonalInfo.

        Your first name

        :param first_name: The first_name of this PersonalInfo.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PersonalInfo.

        Your last name

        :return: The last_name of this PersonalInfo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PersonalInfo.

        Your last name

        :param last_name: The last_name of this PersonalInfo.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this PersonalInfo.

        Your phone number

        :return: The phone_number of this PersonalInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PersonalInfo.

        Your phone number

        :param phone_number: The phone_number of this PersonalInfo.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def what_ido(self):
        """Gets the what_ido of this PersonalInfo.

        Your role in your company

        :return: The what_ido of this PersonalInfo.
        :rtype: str
        """
        return self._what_ido

    @what_ido.setter
    def what_ido(self, what_ido):
        """Sets the what_ido of this PersonalInfo.

        Your role in your company

        :param what_ido: The what_ido of this PersonalInfo.
        :type what_ido: str
        """

        self._what_ido = what_ido
