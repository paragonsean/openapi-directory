# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BeezUPCommonChannelCategoryFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_path: List[str]=None):
        """BeezUPCommonChannelCategoryFilter - a model defined in OpenAPI

        :param category_path: The category_path of this BeezUPCommonChannelCategoryFilter.
        """
        self.openapi_types = {
            'category_path': List[str]
        }

        self.attribute_map = {
            'category_path': 'categoryPath'
        }

        self._category_path = category_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeezUPCommonChannelCategoryFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeezUP.Common.ChannelCategoryFilter of this BeezUPCommonChannelCategoryFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_path(self):
        """Gets the category_path of this BeezUPCommonChannelCategoryFilter.

        Indicates on which channel category path you want to make the filter

        :return: The category_path of this BeezUPCommonChannelCategoryFilter.
        :rtype: List[str]
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this BeezUPCommonChannelCategoryFilter.

        Indicates on which channel category path you want to make the filter

        :param category_path: The category_path of this BeezUPCommonChannelCategoryFilter.
        :type category_path: List[str]
        """

        self._category_path = category_path
