# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_pagination_result import BeezUPCommonPaginationResult
from openapi_server.models.report_by_channel import ReportByChannel
from openapi_server.models.report_by_channel_response_links import ReportByChannelResponseLinks
from openapi_server import util


class ReportByChannelResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[ReportByChannel]=None, currency_code: str=None, links: ReportByChannelResponseLinks=None, pagination_result: BeezUPCommonPaginationResult=None):
        """ReportByChannelResponse - a model defined in OpenAPI

        :param channels: The channels of this ReportByChannelResponse.
        :param currency_code: The currency_code of this ReportByChannelResponse.
        :param links: The links of this ReportByChannelResponse.
        :param pagination_result: The pagination_result of this ReportByChannelResponse.
        """
        self.openapi_types = {
            'channels': List[ReportByChannel],
            'currency_code': str,
            'links': ReportByChannelResponseLinks,
            'pagination_result': BeezUPCommonPaginationResult
        }

        self.attribute_map = {
            'channels': 'channels',
            'currency_code': 'currencyCode',
            'links': 'links',
            'pagination_result': 'paginationResult'
        }

        self._channels = channels
        self._currency_code = currency_code
        self._links = links
        self._pagination_result = pagination_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByChannelResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByChannelResponse of this ReportByChannelResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ReportByChannelResponse.


        :return: The channels of this ReportByChannelResponse.
        :rtype: List[ReportByChannel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ReportByChannelResponse.


        :param channels: The channels of this ReportByChannelResponse.
        :type channels: List[ReportByChannel]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def currency_code(self):
        """Gets the currency_code of this ReportByChannelResponse.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this ReportByChannelResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ReportByChannelResponse.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this ReportByChannelResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def links(self):
        """Gets the links of this ReportByChannelResponse.


        :return: The links of this ReportByChannelResponse.
        :rtype: ReportByChannelResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportByChannelResponse.


        :param links: The links of this ReportByChannelResponse.
        :type links: ReportByChannelResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def pagination_result(self):
        """Gets the pagination_result of this ReportByChannelResponse.


        :return: The pagination_result of this ReportByChannelResponse.
        :rtype: BeezUPCommonPaginationResult
        """
        return self._pagination_result

    @pagination_result.setter
    def pagination_result(self, pagination_result):
        """Sets the pagination_result of this ReportByChannelResponse.


        :param pagination_result: The pagination_result of this ReportByChannelResponse.
        :type pagination_result: BeezUPCommonPaginationResult
        """
        if pagination_result is None:
            raise ValueError("Invalid value for `pagination_result`, must not be `None`")

        self._pagination_result = pagination_result
