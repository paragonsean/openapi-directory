# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracked_order import TrackedOrder
from openapi_server import util


class TrackedOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orders: List[TrackedOrder]=None):
        """TrackedOrders - a model defined in OpenAPI

        :param orders: The orders of this TrackedOrders.
        """
        self.openapi_types = {
            'orders': List[TrackedOrder]
        }

        self.attribute_map = {
            'orders': 'orders'
        }

        self._orders = orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedOrders of this TrackedOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orders(self):
        """Gets the orders of this TrackedOrders.


        :return: The orders of this TrackedOrders.
        :rtype: List[TrackedOrder]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this TrackedOrders.


        :param orders: The orders of this TrackedOrders.
        :type orders: List[TrackedOrder]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")

        self._orders = orders
