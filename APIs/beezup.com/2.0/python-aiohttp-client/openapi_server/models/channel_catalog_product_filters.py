# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_additional_product_filters_value import BeezUPCommonAdditionalProductFiltersValue
from openapi_server import util


class ChannelCatalogProductFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_product_filters: Dict[str, BeezUPCommonAdditionalProductFiltersValue]=None, catalog_eans: List[str]=None, catalog_mpns: List[str]=None, catalog_skus: List[str]=None, channel_eans: List[str]=None, channel_mpns: List[str]=None, channel_skus: List[str]=None, title: str=None):
        """ChannelCatalogProductFilters - a model defined in OpenAPI

        :param additional_product_filters: The additional_product_filters of this ChannelCatalogProductFilters.
        :param catalog_eans: The catalog_eans of this ChannelCatalogProductFilters.
        :param catalog_mpns: The catalog_mpns of this ChannelCatalogProductFilters.
        :param catalog_skus: The catalog_skus of this ChannelCatalogProductFilters.
        :param channel_eans: The channel_eans of this ChannelCatalogProductFilters.
        :param channel_mpns: The channel_mpns of this ChannelCatalogProductFilters.
        :param channel_skus: The channel_skus of this ChannelCatalogProductFilters.
        :param title: The title of this ChannelCatalogProductFilters.
        """
        self.openapi_types = {
            'additional_product_filters': Dict[str, BeezUPCommonAdditionalProductFiltersValue],
            'catalog_eans': List[str],
            'catalog_mpns': List[str],
            'catalog_skus': List[str],
            'channel_eans': List[str],
            'channel_mpns': List[str],
            'channel_skus': List[str],
            'title': str
        }

        self.attribute_map = {
            'additional_product_filters': 'additionalProductFilters',
            'catalog_eans': 'catalogEans',
            'catalog_mpns': 'catalogMpns',
            'catalog_skus': 'catalogSkus',
            'channel_eans': 'channelEans',
            'channel_mpns': 'channelMpns',
            'channel_skus': 'channelSkus',
            'title': 'title'
        }

        self._additional_product_filters = additional_product_filters
        self._catalog_eans = catalog_eans
        self._catalog_mpns = catalog_mpns
        self._catalog_skus = catalog_skus
        self._channel_eans = channel_eans
        self._channel_mpns = channel_mpns
        self._channel_skus = channel_skus
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductFilters of this ChannelCatalogProductFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_product_filters(self):
        """Gets the additional_product_filters of this ChannelCatalogProductFilters.

        Describe a filter on a product's column. The key is the column identifier of your catalog or a custom column. 

        :return: The additional_product_filters of this ChannelCatalogProductFilters.
        :rtype: Dict[str, BeezUPCommonAdditionalProductFiltersValue]
        """
        return self._additional_product_filters

    @additional_product_filters.setter
    def additional_product_filters(self, additional_product_filters):
        """Sets the additional_product_filters of this ChannelCatalogProductFilters.

        Describe a filter on a product's column. The key is the column identifier of your catalog or a custom column. 

        :param additional_product_filters: The additional_product_filters of this ChannelCatalogProductFilters.
        :type additional_product_filters: Dict[str, BeezUPCommonAdditionalProductFiltersValue]
        """

        self._additional_product_filters = additional_product_filters

    @property
    def catalog_eans(self):
        """Gets the catalog_eans of this ChannelCatalogProductFilters.

        The catalog product EAN filter (multiple values)

        :return: The catalog_eans of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._catalog_eans

    @catalog_eans.setter
    def catalog_eans(self, catalog_eans):
        """Sets the catalog_eans of this ChannelCatalogProductFilters.

        The catalog product EAN filter (multiple values)

        :param catalog_eans: The catalog_eans of this ChannelCatalogProductFilters.
        :type catalog_eans: List[str]
        """

        self._catalog_eans = catalog_eans

    @property
    def catalog_mpns(self):
        """Gets the catalog_mpns of this ChannelCatalogProductFilters.

        The catalog product MPN filter (multiple values)

        :return: The catalog_mpns of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._catalog_mpns

    @catalog_mpns.setter
    def catalog_mpns(self, catalog_mpns):
        """Sets the catalog_mpns of this ChannelCatalogProductFilters.

        The catalog product MPN filter (multiple values)

        :param catalog_mpns: The catalog_mpns of this ChannelCatalogProductFilters.
        :type catalog_mpns: List[str]
        """

        self._catalog_mpns = catalog_mpns

    @property
    def catalog_skus(self):
        """Gets the catalog_skus of this ChannelCatalogProductFilters.

        The catalog product SKU filter (multiple values)

        :return: The catalog_skus of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._catalog_skus

    @catalog_skus.setter
    def catalog_skus(self, catalog_skus):
        """Sets the catalog_skus of this ChannelCatalogProductFilters.

        The catalog product SKU filter (multiple values)

        :param catalog_skus: The catalog_skus of this ChannelCatalogProductFilters.
        :type catalog_skus: List[str]
        """

        self._catalog_skus = catalog_skus

    @property
    def channel_eans(self):
        """Gets the channel_eans of this ChannelCatalogProductFilters.

        The channel product EAN filter (multiple values)

        :return: The channel_eans of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._channel_eans

    @channel_eans.setter
    def channel_eans(self, channel_eans):
        """Sets the channel_eans of this ChannelCatalogProductFilters.

        The channel product EAN filter (multiple values)

        :param channel_eans: The channel_eans of this ChannelCatalogProductFilters.
        :type channel_eans: List[str]
        """

        self._channel_eans = channel_eans

    @property
    def channel_mpns(self):
        """Gets the channel_mpns of this ChannelCatalogProductFilters.

        The channel product MPN filter (multiple values)

        :return: The channel_mpns of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._channel_mpns

    @channel_mpns.setter
    def channel_mpns(self, channel_mpns):
        """Sets the channel_mpns of this ChannelCatalogProductFilters.

        The channel product MPN filter (multiple values)

        :param channel_mpns: The channel_mpns of this ChannelCatalogProductFilters.
        :type channel_mpns: List[str]
        """

        self._channel_mpns = channel_mpns

    @property
    def channel_skus(self):
        """Gets the channel_skus of this ChannelCatalogProductFilters.

        The channel product SKU filter (multiple values)

        :return: The channel_skus of this ChannelCatalogProductFilters.
        :rtype: List[str]
        """
        return self._channel_skus

    @channel_skus.setter
    def channel_skus(self, channel_skus):
        """Sets the channel_skus of this ChannelCatalogProductFilters.

        The channel product SKU filter (multiple values)

        :param channel_skus: The channel_skus of this ChannelCatalogProductFilters.
        :type channel_skus: List[str]
        """

        self._channel_skus = channel_skus

    @property
    def title(self):
        """Gets the title of this ChannelCatalogProductFilters.

        The product title filter

        :return: The title of this ChannelCatalogProductFilters.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChannelCatalogProductFilters.

        The product title filter

        :param title: The title of this ChannelCatalogProductFilters.
        :type title: str
        """

        self._title = title
