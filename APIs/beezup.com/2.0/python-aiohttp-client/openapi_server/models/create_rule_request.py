# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.optimisation_action_name import OptimisationActionName
from openapi_server import util


class CreateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_utc_date: datetime=None, optimisation_action_name: OptimisationActionName=None, report_filter_id: str=None, rule_name: str=None, start_utc_date: datetime=None):
        """CreateRuleRequest - a model defined in OpenAPI

        :param end_utc_date: The end_utc_date of this CreateRuleRequest.
        :param optimisation_action_name: The optimisation_action_name of this CreateRuleRequest.
        :param report_filter_id: The report_filter_id of this CreateRuleRequest.
        :param rule_name: The rule_name of this CreateRuleRequest.
        :param start_utc_date: The start_utc_date of this CreateRuleRequest.
        """
        self.openapi_types = {
            'end_utc_date': datetime,
            'optimisation_action_name': OptimisationActionName,
            'report_filter_id': str,
            'rule_name': str,
            'start_utc_date': datetime
        }

        self.attribute_map = {
            'end_utc_date': 'endUtcDate',
            'optimisation_action_name': 'optimisationActionName',
            'report_filter_id': 'reportFilterId',
            'rule_name': 'ruleName',
            'start_utc_date': 'startUtcDate'
        }

        self._end_utc_date = end_utc_date
        self._optimisation_action_name = optimisation_action_name
        self._report_filter_id = report_filter_id
        self._rule_name = rule_name
        self._start_utc_date = start_utc_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createRuleRequest of this CreateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_utc_date(self):
        """Gets the end_utc_date of this CreateRuleRequest.

        The end validity utc date of the rule

        :return: The end_utc_date of this CreateRuleRequest.
        :rtype: datetime
        """
        return self._end_utc_date

    @end_utc_date.setter
    def end_utc_date(self, end_utc_date):
        """Sets the end_utc_date of this CreateRuleRequest.

        The end validity utc date of the rule

        :param end_utc_date: The end_utc_date of this CreateRuleRequest.
        :type end_utc_date: datetime
        """

        self._end_utc_date = end_utc_date

    @property
    def optimisation_action_name(self):
        """Gets the optimisation_action_name of this CreateRuleRequest.


        :return: The optimisation_action_name of this CreateRuleRequest.
        :rtype: OptimisationActionName
        """
        return self._optimisation_action_name

    @optimisation_action_name.setter
    def optimisation_action_name(self, optimisation_action_name):
        """Sets the optimisation_action_name of this CreateRuleRequest.


        :param optimisation_action_name: The optimisation_action_name of this CreateRuleRequest.
        :type optimisation_action_name: OptimisationActionName
        """
        if optimisation_action_name is None:
            raise ValueError("Invalid value for `optimisation_action_name`, must not be `None`")

        self._optimisation_action_name = optimisation_action_name

    @property
    def report_filter_id(self):
        """Gets the report_filter_id of this CreateRuleRequest.

        The report filter to use for the rule

        :return: The report_filter_id of this CreateRuleRequest.
        :rtype: str
        """
        return self._report_filter_id

    @report_filter_id.setter
    def report_filter_id(self, report_filter_id):
        """Sets the report_filter_id of this CreateRuleRequest.

        The report filter to use for the rule

        :param report_filter_id: The report_filter_id of this CreateRuleRequest.
        :type report_filter_id: str
        """
        if report_filter_id is None:
            raise ValueError("Invalid value for `report_filter_id`, must not be `None`")

        self._report_filter_id = report_filter_id

    @property
    def rule_name(self):
        """Gets the rule_name of this CreateRuleRequest.

        The name of the rule

        :return: The rule_name of this CreateRuleRequest.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this CreateRuleRequest.

        The name of the rule

        :param rule_name: The rule_name of this CreateRuleRequest.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def start_utc_date(self):
        """Gets the start_utc_date of this CreateRuleRequest.

        The start validity utc date of the rule

        :return: The start_utc_date of this CreateRuleRequest.
        :rtype: datetime
        """
        return self._start_utc_date

    @start_utc_date.setter
    def start_utc_date(self, start_utc_date):
        """Sets the start_utc_date of this CreateRuleRequest.

        The start validity utc date of the rule

        :param start_utc_date: The start_utc_date of this CreateRuleRequest.
        :type start_utc_date: datetime
        """

        self._start_utc_date = start_utc_date
