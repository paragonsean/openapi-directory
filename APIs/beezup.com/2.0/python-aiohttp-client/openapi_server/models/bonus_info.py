# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bonus_type import BonusType
from openapi_server import util


class BonusInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, bonus_type: BonusType=None):
        """BonusInfo - a model defined in OpenAPI

        :param amount: The amount of this BonusInfo.
        :param bonus_type: The bonus_type of this BonusInfo.
        """
        self.openapi_types = {
            'amount': float,
            'bonus_type': BonusType
        }

        self.attribute_map = {
            'amount': 'amount',
            'bonus_type': 'bonusType'
        }

        self._amount = amount
        self._bonus_type = bonus_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BonusInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bonusInfo of this BonusInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BonusInfo.


        :return: The amount of this BonusInfo.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BonusInfo.


        :param amount: The amount of this BonusInfo.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bonus_type(self):
        """Gets the bonus_type of this BonusInfo.


        :return: The bonus_type of this BonusInfo.
        :rtype: BonusType
        """
        return self._bonus_type

    @bonus_type.setter
    def bonus_type(self, bonus_type):
        """Sets the bonus_type of this BonusInfo.


        :param bonus_type: The bonus_type of this BonusInfo.
        :type bonus_type: BonusType
        """
        if bonus_type is None:
            raise ValueError("Invalid value for `bonus_type`, must not be `None`")

        self._bonus_type = bonus_type
