# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListOfValueItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_identifier: str=None, int_identifier: int=None, position: int=None, translation_text: str=None):
        """ListOfValueItem - a model defined in OpenAPI

        :param code_identifier: The code_identifier of this ListOfValueItem.
        :param int_identifier: The int_identifier of this ListOfValueItem.
        :param position: The position of this ListOfValueItem.
        :param translation_text: The translation_text of this ListOfValueItem.
        """
        self.openapi_types = {
            'code_identifier': str,
            'int_identifier': int,
            'position': int,
            'translation_text': str
        }

        self.attribute_map = {
            'code_identifier': 'codeIdentifier',
            'int_identifier': 'intIdentifier',
            'position': 'position',
            'translation_text': 'translationText'
        }

        self._code_identifier = code_identifier
        self._int_identifier = int_identifier
        self._position = position
        self._translation_text = translation_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListOfValueItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The listOfValueItem of this ListOfValueItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_identifier(self):
        """Gets the code_identifier of this ListOfValueItem.


        :return: The code_identifier of this ListOfValueItem.
        :rtype: str
        """
        return self._code_identifier

    @code_identifier.setter
    def code_identifier(self, code_identifier):
        """Sets the code_identifier of this ListOfValueItem.


        :param code_identifier: The code_identifier of this ListOfValueItem.
        :type code_identifier: str
        """
        if code_identifier is None:
            raise ValueError("Invalid value for `code_identifier`, must not be `None`")

        self._code_identifier = code_identifier

    @property
    def int_identifier(self):
        """Gets the int_identifier of this ListOfValueItem.


        :return: The int_identifier of this ListOfValueItem.
        :rtype: int
        """
        return self._int_identifier

    @int_identifier.setter
    def int_identifier(self, int_identifier):
        """Sets the int_identifier of this ListOfValueItem.


        :param int_identifier: The int_identifier of this ListOfValueItem.
        :type int_identifier: int
        """
        if int_identifier is None:
            raise ValueError("Invalid value for `int_identifier`, must not be `None`")

        self._int_identifier = int_identifier

    @property
    def position(self):
        """Gets the position of this ListOfValueItem.


        :return: The position of this ListOfValueItem.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ListOfValueItem.


        :param position: The position of this ListOfValueItem.
        :type position: int
        """

        self._position = position

    @property
    def translation_text(self):
        """Gets the translation_text of this ListOfValueItem.


        :return: The translation_text of this ListOfValueItem.
        :rtype: str
        """
        return self._translation_text

    @translation_text.setter
    def translation_text(self, translation_text):
        """Sets the translation_text of this ListOfValueItem.


        :param translation_text: The translation_text of this ListOfValueItem.
        :type translation_text: str
        """

        self._translation_text = translation_text
