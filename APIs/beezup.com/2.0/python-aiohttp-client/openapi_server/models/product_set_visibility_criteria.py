# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_set_visibility_criteria_logic_type import ProductSetVisibilityCriteriaLogicType
from openapi_server import util


class ProductSetVisibilityCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled: bool=None, excluded: bool=None, exist: bool=None, logic: ProductSetVisibilityCriteriaLogicType=None, uncategorized: bool=None):
        """ProductSetVisibilityCriteria - a model defined in OpenAPI

        :param disabled: The disabled of this ProductSetVisibilityCriteria.
        :param excluded: The excluded of this ProductSetVisibilityCriteria.
        :param exist: The exist of this ProductSetVisibilityCriteria.
        :param logic: The logic of this ProductSetVisibilityCriteria.
        :param uncategorized: The uncategorized of this ProductSetVisibilityCriteria.
        """
        self.openapi_types = {
            'disabled': bool,
            'excluded': bool,
            'exist': bool,
            'logic': ProductSetVisibilityCriteriaLogicType,
            'uncategorized': bool
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'excluded': 'excluded',
            'exist': 'exist',
            'logic': 'logic',
            'uncategorized': 'uncategorized'
        }

        self._disabled = disabled
        self._excluded = excluded
        self._exist = exist
        self._logic = logic
        self._uncategorized = uncategorized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSetVisibilityCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The productSetVisibilityCriteria of this ProductSetVisibilityCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self):
        """Gets the disabled of this ProductSetVisibilityCriteria.

        Search disabled products. If null the filter will not be taken in account.

        :return: The disabled of this ProductSetVisibilityCriteria.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ProductSetVisibilityCriteria.

        Search disabled products. If null the filter will not be taken in account.

        :param disabled: The disabled of this ProductSetVisibilityCriteria.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def excluded(self):
        """Gets the excluded of this ProductSetVisibilityCriteria.

        Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.

        :return: The excluded of this ProductSetVisibilityCriteria.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this ProductSetVisibilityCriteria.

        Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.

        :param excluded: The excluded of this ProductSetVisibilityCriteria.
        :type excluded: bool
        """

        self._excluded = excluded

    @property
    def exist(self):
        """Gets the exist of this ProductSetVisibilityCriteria.

        If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.

        :return: The exist of this ProductSetVisibilityCriteria.
        :rtype: bool
        """
        return self._exist

    @exist.setter
    def exist(self, exist):
        """Sets the exist of this ProductSetVisibilityCriteria.

        If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.

        :param exist: The exist of this ProductSetVisibilityCriteria.
        :type exist: bool
        """

        self._exist = exist

    @property
    def logic(self):
        """Gets the logic of this ProductSetVisibilityCriteria.


        :return: The logic of this ProductSetVisibilityCriteria.
        :rtype: ProductSetVisibilityCriteriaLogicType
        """
        return self._logic

    @logic.setter
    def logic(self, logic):
        """Sets the logic of this ProductSetVisibilityCriteria.


        :param logic: The logic of this ProductSetVisibilityCriteria.
        :type logic: ProductSetVisibilityCriteriaLogicType
        """
        if logic is None:
            raise ValueError("Invalid value for `logic`, must not be `None`")

        self._logic = logic

    @property
    def uncategorized(self):
        """Gets the uncategorized of this ProductSetVisibilityCriteria.

        Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.

        :return: The uncategorized of this ProductSetVisibilityCriteria.
        :rtype: bool
        """
        return self._uncategorized

    @uncategorized.setter
    def uncategorized(self, uncategorized):
        """Sets the uncategorized of this ProductSetVisibilityCriteria.

        Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.

        :param uncategorized: The uncategorized of this ProductSetVisibilityCriteria.
        :type uncategorized: bool
        """

        self._uncategorized = uncategorized
