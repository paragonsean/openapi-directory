# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnmapCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_category_path: List[str]=None):
        """UnmapCategoryRequest - a model defined in OpenAPI

        :param catalog_category_path: The catalog_category_path of this UnmapCategoryRequest.
        """
        self.openapi_types = {
            'catalog_category_path': List[str]
        }

        self.attribute_map = {
            'catalog_category_path': 'catalogCategoryPath'
        }

        self._catalog_category_path = catalog_category_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmapCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The unmapCategoryRequest of this UnmapCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_category_path(self):
        """Gets the catalog_category_path of this UnmapCategoryRequest.

        The catalog category path

        :return: The catalog_category_path of this UnmapCategoryRequest.
        :rtype: List[str]
        """
        return self._catalog_category_path

    @catalog_category_path.setter
    def catalog_category_path(self, catalog_category_path):
        """Sets the catalog_category_path of this UnmapCategoryRequest.

        The catalog category path

        :param catalog_category_path: The catalog_category_path of this UnmapCategoryRequest.
        :type catalog_category_path: List[str]
        """
        if catalog_category_path is None:
            raise ValueError("Invalid value for `catalog_category_path`, must not be `None`")

        self._catalog_category_path = catalog_category_path
