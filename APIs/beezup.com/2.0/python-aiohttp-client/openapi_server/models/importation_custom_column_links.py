# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_catalog_delete_custom_column_link import LinksCatalogDeleteCustomColumnLink
from openapi_server.models.links_catalog_get_custom_column_expression_link import LinksCatalogGetCustomColumnExpressionLink
from openapi_server.models.links_importation_get_product_sample_custom_column_value_link import LinksImportationGetProductSampleCustomColumnValueLink
from openapi_server.models.links_importation_map_custom_column_link import LinksImportationMapCustomColumnLink
from openapi_server.models.links_importation_save_custom_column_link import LinksImportationSaveCustomColumnLink
from openapi_server.models.links_importation_unmap_custom_column_link import LinksImportationUnmapCustomColumnLink
from openapi_server import util


class ImportationCustomColumnLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: LinksCatalogDeleteCustomColumnLink=None, expression: LinksCatalogGetCustomColumnExpressionLink=None, map: LinksImportationMapCustomColumnLink=None, product_sample_value: LinksImportationGetProductSampleCustomColumnValueLink=None, save: LinksImportationSaveCustomColumnLink=None, unmap: LinksImportationUnmapCustomColumnLink=None):
        """ImportationCustomColumnLinks - a model defined in OpenAPI

        :param delete: The delete of this ImportationCustomColumnLinks.
        :param expression: The expression of this ImportationCustomColumnLinks.
        :param map: The map of this ImportationCustomColumnLinks.
        :param product_sample_value: The product_sample_value of this ImportationCustomColumnLinks.
        :param save: The save of this ImportationCustomColumnLinks.
        :param unmap: The unmap of this ImportationCustomColumnLinks.
        """
        self.openapi_types = {
            'delete': LinksCatalogDeleteCustomColumnLink,
            'expression': LinksCatalogGetCustomColumnExpressionLink,
            'map': LinksImportationMapCustomColumnLink,
            'product_sample_value': LinksImportationGetProductSampleCustomColumnValueLink,
            'save': LinksImportationSaveCustomColumnLink,
            'unmap': LinksImportationUnmapCustomColumnLink
        }

        self.attribute_map = {
            'delete': 'delete',
            'expression': 'expression',
            'map': 'map',
            'product_sample_value': 'productSampleValue',
            'save': 'save',
            'unmap': 'unmap'
        }

        self._delete = delete
        self._expression = expression
        self._map = map
        self._product_sample_value = product_sample_value
        self._save = save
        self._unmap = unmap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportationCustomColumnLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importationCustomColumnLinks of this ImportationCustomColumnLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this ImportationCustomColumnLinks.


        :return: The delete of this ImportationCustomColumnLinks.
        :rtype: LinksCatalogDeleteCustomColumnLink
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ImportationCustomColumnLinks.


        :param delete: The delete of this ImportationCustomColumnLinks.
        :type delete: LinksCatalogDeleteCustomColumnLink
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")

        self._delete = delete

    @property
    def expression(self):
        """Gets the expression of this ImportationCustomColumnLinks.


        :return: The expression of this ImportationCustomColumnLinks.
        :rtype: LinksCatalogGetCustomColumnExpressionLink
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ImportationCustomColumnLinks.


        :param expression: The expression of this ImportationCustomColumnLinks.
        :type expression: LinksCatalogGetCustomColumnExpressionLink
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def map(self):
        """Gets the map of this ImportationCustomColumnLinks.


        :return: The map of this ImportationCustomColumnLinks.
        :rtype: LinksImportationMapCustomColumnLink
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this ImportationCustomColumnLinks.


        :param map: The map of this ImportationCustomColumnLinks.
        :type map: LinksImportationMapCustomColumnLink
        """

        self._map = map

    @property
    def product_sample_value(self):
        """Gets the product_sample_value of this ImportationCustomColumnLinks.


        :return: The product_sample_value of this ImportationCustomColumnLinks.
        :rtype: LinksImportationGetProductSampleCustomColumnValueLink
        """
        return self._product_sample_value

    @product_sample_value.setter
    def product_sample_value(self, product_sample_value):
        """Sets the product_sample_value of this ImportationCustomColumnLinks.


        :param product_sample_value: The product_sample_value of this ImportationCustomColumnLinks.
        :type product_sample_value: LinksImportationGetProductSampleCustomColumnValueLink
        """

        self._product_sample_value = product_sample_value

    @property
    def save(self):
        """Gets the save of this ImportationCustomColumnLinks.


        :return: The save of this ImportationCustomColumnLinks.
        :rtype: LinksImportationSaveCustomColumnLink
        """
        return self._save

    @save.setter
    def save(self, save):
        """Sets the save of this ImportationCustomColumnLinks.


        :param save: The save of this ImportationCustomColumnLinks.
        :type save: LinksImportationSaveCustomColumnLink
        """
        if save is None:
            raise ValueError("Invalid value for `save`, must not be `None`")

        self._save = save

    @property
    def unmap(self):
        """Gets the unmap of this ImportationCustomColumnLinks.


        :return: The unmap of this ImportationCustomColumnLinks.
        :rtype: LinksImportationUnmapCustomColumnLink
        """
        return self._unmap

    @unmap.setter
    def unmap(self, unmap):
        """Sets the unmap of this ImportationCustomColumnLinks.


        :param unmap: The unmap of this ImportationCustomColumnLinks.
        :type unmap: LinksImportationUnmapCustomColumnLink
        """

        self._unmap = unmap
