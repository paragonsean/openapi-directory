# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_filter_header_links import ReportFilterHeaderLinks
from openapi_server.models.report_type import ReportType
from openapi_server import util


class ReportFilterHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ReportFilterHeaderLinks=None, report_filter_id: str=None, report_filter_name: str=None, report_type: ReportType=None):
        """ReportFilterHeader - a model defined in OpenAPI

        :param links: The links of this ReportFilterHeader.
        :param report_filter_id: The report_filter_id of this ReportFilterHeader.
        :param report_filter_name: The report_filter_name of this ReportFilterHeader.
        :param report_type: The report_type of this ReportFilterHeader.
        """
        self.openapi_types = {
            'links': ReportFilterHeaderLinks,
            'report_filter_id': str,
            'report_filter_name': str,
            'report_type': ReportType
        }

        self.attribute_map = {
            'links': 'links',
            'report_filter_id': 'reportFilterId',
            'report_filter_name': 'reportFilterName',
            'report_type': 'reportType'
        }

        self._links = links
        self._report_filter_id = report_filter_id
        self._report_filter_name = report_filter_name
        self._report_type = report_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFilterHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportFilterHeader of this ReportFilterHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ReportFilterHeader.


        :return: The links of this ReportFilterHeader.
        :rtype: ReportFilterHeaderLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportFilterHeader.


        :param links: The links of this ReportFilterHeader.
        :type links: ReportFilterHeaderLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def report_filter_id(self):
        """Gets the report_filter_id of this ReportFilterHeader.

        Report filter identifier

        :return: The report_filter_id of this ReportFilterHeader.
        :rtype: str
        """
        return self._report_filter_id

    @report_filter_id.setter
    def report_filter_id(self, report_filter_id):
        """Sets the report_filter_id of this ReportFilterHeader.

        Report filter identifier

        :param report_filter_id: The report_filter_id of this ReportFilterHeader.
        :type report_filter_id: str
        """
        if report_filter_id is None:
            raise ValueError("Invalid value for `report_filter_id`, must not be `None`")

        self._report_filter_id = report_filter_id

    @property
    def report_filter_name(self):
        """Gets the report_filter_name of this ReportFilterHeader.

        Report filter name

        :return: The report_filter_name of this ReportFilterHeader.
        :rtype: str
        """
        return self._report_filter_name

    @report_filter_name.setter
    def report_filter_name(self, report_filter_name):
        """Sets the report_filter_name of this ReportFilterHeader.

        Report filter name

        :param report_filter_name: The report_filter_name of this ReportFilterHeader.
        :type report_filter_name: str
        """
        if report_filter_name is None:
            raise ValueError("Invalid value for `report_filter_name`, must not be `None`")

        self._report_filter_name = report_filter_name

    @property
    def report_type(self):
        """Gets the report_type of this ReportFilterHeader.


        :return: The report_type of this ReportFilterHeader.
        :rtype: ReportType
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportFilterHeader.


        :param report_type: The report_type of this ReportFilterHeader.
        :type report_type: ReportType
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")

        self._report_type = report_type
