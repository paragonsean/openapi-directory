# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountSynchronization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, completed_harvest_synchro_utc_date: datetime=None, marketplace_business_code: str=None, marketplace_technical_code: str=None):
        """AccountSynchronization - a model defined in OpenAPI

        :param account_id: The account_id of this AccountSynchronization.
        :param completed_harvest_synchro_utc_date: The completed_harvest_synchro_utc_date of this AccountSynchronization.
        :param marketplace_business_code: The marketplace_business_code of this AccountSynchronization.
        :param marketplace_technical_code: The marketplace_technical_code of this AccountSynchronization.
        """
        self.openapi_types = {
            'account_id': int,
            'completed_harvest_synchro_utc_date': datetime,
            'marketplace_business_code': str,
            'marketplace_technical_code': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'completed_harvest_synchro_utc_date': 'completedHarvestSynchroUtcDate',
            'marketplace_business_code': 'marketplaceBusinessCode',
            'marketplace_technical_code': 'marketplaceTechnicalCode'
        }

        self._account_id = account_id
        self._completed_harvest_synchro_utc_date = completed_harvest_synchro_utc_date
        self._marketplace_business_code = marketplace_business_code
        self._marketplace_technical_code = marketplace_technical_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountSynchronization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountSynchronization of this AccountSynchronization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountSynchronization.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The account_id of this AccountSynchronization.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountSynchronization.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param account_id: The account_id of this AccountSynchronization.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def completed_harvest_synchro_utc_date(self):
        """Gets the completed_harvest_synchro_utc_date of this AccountSynchronization.


        :return: The completed_harvest_synchro_utc_date of this AccountSynchronization.
        :rtype: datetime
        """
        return self._completed_harvest_synchro_utc_date

    @completed_harvest_synchro_utc_date.setter
    def completed_harvest_synchro_utc_date(self, completed_harvest_synchro_utc_date):
        """Sets the completed_harvest_synchro_utc_date of this AccountSynchronization.


        :param completed_harvest_synchro_utc_date: The completed_harvest_synchro_utc_date of this AccountSynchronization.
        :type completed_harvest_synchro_utc_date: datetime
        """

        self._completed_harvest_synchro_utc_date = completed_harvest_synchro_utc_date

    @property
    def marketplace_business_code(self):
        """Gets the marketplace_business_code of this AccountSynchronization.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :return: The marketplace_business_code of this AccountSynchronization.
        :rtype: str
        """
        return self._marketplace_business_code

    @marketplace_business_code.setter
    def marketplace_business_code(self, marketplace_business_code):
        """Sets the marketplace_business_code of this AccountSynchronization.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :param marketplace_business_code: The marketplace_business_code of this AccountSynchronization.
        :type marketplace_business_code: str
        """
        if marketplace_business_code is None:
            raise ValueError("Invalid value for `marketplace_business_code`, must not be `None`")

        self._marketplace_business_code = marketplace_business_code

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this AccountSynchronization.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this AccountSynchronization.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this AccountSynchronization.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this AccountSynchronization.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code
