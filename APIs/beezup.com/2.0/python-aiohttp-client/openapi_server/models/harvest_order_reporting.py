# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HarvestOrderReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_forced_status: str=None, beez_up_status: str=None, creation_utc_date: datetime=None, error_message: str=None, execution_uuid: str=None, last_update_utc_date: datetime=None, marketplace_status: str=None, processing_status: str=None, warning_message: str=None):
        """HarvestOrderReporting - a model defined in OpenAPI

        :param beez_up_forced_status: The beez_up_forced_status of this HarvestOrderReporting.
        :param beez_up_status: The beez_up_status of this HarvestOrderReporting.
        :param creation_utc_date: The creation_utc_date of this HarvestOrderReporting.
        :param error_message: The error_message of this HarvestOrderReporting.
        :param execution_uuid: The execution_uuid of this HarvestOrderReporting.
        :param last_update_utc_date: The last_update_utc_date of this HarvestOrderReporting.
        :param marketplace_status: The marketplace_status of this HarvestOrderReporting.
        :param processing_status: The processing_status of this HarvestOrderReporting.
        :param warning_message: The warning_message of this HarvestOrderReporting.
        """
        self.openapi_types = {
            'beez_up_forced_status': str,
            'beez_up_status': str,
            'creation_utc_date': datetime,
            'error_message': str,
            'execution_uuid': str,
            'last_update_utc_date': datetime,
            'marketplace_status': str,
            'processing_status': str,
            'warning_message': str
        }

        self.attribute_map = {
            'beez_up_forced_status': 'beezUPForcedStatus',
            'beez_up_status': 'beezUPStatus',
            'creation_utc_date': 'creationUtcDate',
            'error_message': 'errorMessage',
            'execution_uuid': 'executionUUID',
            'last_update_utc_date': 'lastUpdateUtcDate',
            'marketplace_status': 'marketplaceStatus',
            'processing_status': 'processingStatus',
            'warning_message': 'warningMessage'
        }

        self._beez_up_forced_status = beez_up_forced_status
        self._beez_up_status = beez_up_status
        self._creation_utc_date = creation_utc_date
        self._error_message = error_message
        self._execution_uuid = execution_uuid
        self._last_update_utc_date = last_update_utc_date
        self._marketplace_status = marketplace_status
        self._processing_status = processing_status
        self._warning_message = warning_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HarvestOrderReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The harvestOrderReporting of this HarvestOrderReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_forced_status(self):
        """Gets the beez_up_forced_status of this HarvestOrderReporting.

        The marketplace order status forced by BeezUP during the order change oepration. This could happend when there is no status on the marketplace side.

        :return: The beez_up_forced_status of this HarvestOrderReporting.
        :rtype: str
        """
        return self._beez_up_forced_status

    @beez_up_forced_status.setter
    def beez_up_forced_status(self, beez_up_forced_status):
        """Sets the beez_up_forced_status of this HarvestOrderReporting.

        The marketplace order status forced by BeezUP during the order change oepration. This could happend when there is no status on the marketplace side.

        :param beez_up_forced_status: The beez_up_forced_status of this HarvestOrderReporting.
        :type beez_up_forced_status: str
        """

        self._beez_up_forced_status = beez_up_forced_status

    @property
    def beez_up_status(self):
        """Gets the beez_up_status of this HarvestOrderReporting.

        BeezUP order status. Unified for all marketplaces.

        :return: The beez_up_status of this HarvestOrderReporting.
        :rtype: str
        """
        return self._beez_up_status

    @beez_up_status.setter
    def beez_up_status(self, beez_up_status):
        """Sets the beez_up_status of this HarvestOrderReporting.

        BeezUP order status. Unified for all marketplaces.

        :param beez_up_status: The beez_up_status of this HarvestOrderReporting.
        :type beez_up_status: str
        """

        self._beez_up_status = beez_up_status

    @property
    def creation_utc_date(self):
        """Gets the creation_utc_date of this HarvestOrderReporting.

        The creation UTC date of the execution

        :return: The creation_utc_date of this HarvestOrderReporting.
        :rtype: datetime
        """
        return self._creation_utc_date

    @creation_utc_date.setter
    def creation_utc_date(self, creation_utc_date):
        """Sets the creation_utc_date of this HarvestOrderReporting.

        The creation UTC date of the execution

        :param creation_utc_date: The creation_utc_date of this HarvestOrderReporting.
        :type creation_utc_date: datetime
        """

        self._creation_utc_date = creation_utc_date

    @property
    def error_message(self):
        """Gets the error_message of this HarvestOrderReporting.

        The warning message during the execution

        :return: The error_message of this HarvestOrderReporting.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this HarvestOrderReporting.

        The warning message during the execution

        :param error_message: The error_message of this HarvestOrderReporting.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def execution_uuid(self):
        """Gets the execution_uuid of this HarvestOrderReporting.

        The execution identifier

        :return: The execution_uuid of this HarvestOrderReporting.
        :rtype: str
        """
        return self._execution_uuid

    @execution_uuid.setter
    def execution_uuid(self, execution_uuid):
        """Sets the execution_uuid of this HarvestOrderReporting.

        The execution identifier

        :param execution_uuid: The execution_uuid of this HarvestOrderReporting.
        :type execution_uuid: str
        """

        self._execution_uuid = execution_uuid

    @property
    def last_update_utc_date(self):
        """Gets the last_update_utc_date of this HarvestOrderReporting.

        The last update UTC date of the execution

        :return: The last_update_utc_date of this HarvestOrderReporting.
        :rtype: datetime
        """
        return self._last_update_utc_date

    @last_update_utc_date.setter
    def last_update_utc_date(self, last_update_utc_date):
        """Sets the last_update_utc_date of this HarvestOrderReporting.

        The last update UTC date of the execution

        :param last_update_utc_date: The last_update_utc_date of this HarvestOrderReporting.
        :type last_update_utc_date: datetime
        """

        self._last_update_utc_date = last_update_utc_date

    @property
    def marketplace_status(self):
        """Gets the marketplace_status of this HarvestOrderReporting.

        The order marketplace status

        :return: The marketplace_status of this HarvestOrderReporting.
        :rtype: str
        """
        return self._marketplace_status

    @marketplace_status.setter
    def marketplace_status(self, marketplace_status):
        """Sets the marketplace_status of this HarvestOrderReporting.

        The order marketplace status

        :param marketplace_status: The marketplace_status of this HarvestOrderReporting.
        :type marketplace_status: str
        """

        self._marketplace_status = marketplace_status

    @property
    def processing_status(self):
        """Gets the processing_status of this HarvestOrderReporting.

        The processing status of the execution

        :return: The processing_status of this HarvestOrderReporting.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this HarvestOrderReporting.

        The processing status of the execution

        :param processing_status: The processing_status of this HarvestOrderReporting.
        :type processing_status: str
        """

        self._processing_status = processing_status

    @property
    def warning_message(self):
        """Gets the warning_message of this HarvestOrderReporting.

        The warning message during the execution

        :return: The warning_message of this HarvestOrderReporting.
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this HarvestOrderReporting.

        The warning message during the execution

        :param warning_message: The warning_message of this HarvestOrderReporting.
        :type warning_message: str
        """

        self._warning_message = warning_message
