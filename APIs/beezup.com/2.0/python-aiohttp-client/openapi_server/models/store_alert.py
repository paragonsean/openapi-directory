# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_alert_links import StoreAlertLinks
from openapi_server.models.store_alert_property_info import StoreAlertPropertyInfo
from openapi_server import util


class StoreAlert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_id: int=None, alert_name: str=None, enabled: bool=None, links: StoreAlertLinks=None, properties: List[StoreAlertPropertyInfo]=None):
        """StoreAlert - a model defined in OpenAPI

        :param alert_id: The alert_id of this StoreAlert.
        :param alert_name: The alert_name of this StoreAlert.
        :param enabled: The enabled of this StoreAlert.
        :param links: The links of this StoreAlert.
        :param properties: The properties of this StoreAlert.
        """
        self.openapi_types = {
            'alert_id': int,
            'alert_name': str,
            'enabled': bool,
            'links': StoreAlertLinks,
            'properties': List[StoreAlertPropertyInfo]
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'alert_name': 'alertName',
            'enabled': 'enabled',
            'links': 'links',
            'properties': 'properties'
        }

        self._alert_id = alert_id
        self._alert_name = alert_name
        self._enabled = enabled
        self._links = links
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeAlert of this StoreAlert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self):
        """Gets the alert_id of this StoreAlert.

        Alert identifier

        :return: The alert_id of this StoreAlert.
        :rtype: int
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this StoreAlert.

        Alert identifier

        :param alert_id: The alert_id of this StoreAlert.
        :type alert_id: int
        """
        if alert_id is None:
            raise ValueError("Invalid value for `alert_id`, must not be `None`")

        self._alert_id = alert_id

    @property
    def alert_name(self):
        """Gets the alert_name of this StoreAlert.

        The alert name

        :return: The alert_name of this StoreAlert.
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this StoreAlert.

        The alert name

        :param alert_name: The alert_name of this StoreAlert.
        :type alert_name: str
        """
        if alert_name is None:
            raise ValueError("Invalid value for `alert_name`, must not be `None`")

        self._alert_name = alert_name

    @property
    def enabled(self):
        """Gets the enabled of this StoreAlert.

        Is the alert enable ?

        :return: The enabled of this StoreAlert.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StoreAlert.

        Is the alert enable ?

        :param enabled: The enabled of this StoreAlert.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def links(self):
        """Gets the links of this StoreAlert.


        :return: The links of this StoreAlert.
        :rtype: StoreAlertLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StoreAlert.


        :param links: The links of this StoreAlert.
        :type links: StoreAlertLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def properties(self):
        """Gets the properties of this StoreAlert.

        The current configuration properties of the alert

        :return: The properties of this StoreAlert.
        :rtype: List[StoreAlertPropertyInfo]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this StoreAlert.

        The current configuration properties of the alert

        :param properties: The properties of this StoreAlert.
        :type properties: List[StoreAlertPropertyInfo]
        """

        self._properties = properties
