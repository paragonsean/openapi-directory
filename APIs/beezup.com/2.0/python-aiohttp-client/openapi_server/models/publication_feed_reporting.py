# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed_type import FeedType
from openapi_server import util


class PublicationFeedReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, end_utc_date: datetime=None, error_message: str=None, exported_products: int=None, failed_items: int=None, feed_type: FeedType=None, html_report_generation_error_message: str=None, html_report_url: str=None, processing_status: str=None, published_items: int=None, published_items_with_warning: int=None, start_utc_date: datetime=None, transmitted_items: int=None):
        """PublicationFeedReporting - a model defined in OpenAPI

        :param completed: The completed of this PublicationFeedReporting.
        :param end_utc_date: The end_utc_date of this PublicationFeedReporting.
        :param error_message: The error_message of this PublicationFeedReporting.
        :param exported_products: The exported_products of this PublicationFeedReporting.
        :param failed_items: The failed_items of this PublicationFeedReporting.
        :param feed_type: The feed_type of this PublicationFeedReporting.
        :param html_report_generation_error_message: The html_report_generation_error_message of this PublicationFeedReporting.
        :param html_report_url: The html_report_url of this PublicationFeedReporting.
        :param processing_status: The processing_status of this PublicationFeedReporting.
        :param published_items: The published_items of this PublicationFeedReporting.
        :param published_items_with_warning: The published_items_with_warning of this PublicationFeedReporting.
        :param start_utc_date: The start_utc_date of this PublicationFeedReporting.
        :param transmitted_items: The transmitted_items of this PublicationFeedReporting.
        """
        self.openapi_types = {
            'completed': bool,
            'end_utc_date': datetime,
            'error_message': str,
            'exported_products': int,
            'failed_items': int,
            'feed_type': FeedType,
            'html_report_generation_error_message': str,
            'html_report_url': str,
            'processing_status': str,
            'published_items': int,
            'published_items_with_warning': int,
            'start_utc_date': datetime,
            'transmitted_items': int
        }

        self.attribute_map = {
            'completed': 'completed',
            'end_utc_date': 'endUtcDate',
            'error_message': 'errorMessage',
            'exported_products': 'exportedProducts',
            'failed_items': 'failedItems',
            'feed_type': 'feedType',
            'html_report_generation_error_message': 'htmlReportGenerationErrorMessage',
            'html_report_url': 'htmlReportUrl',
            'processing_status': 'processingStatus',
            'published_items': 'publishedItems',
            'published_items_with_warning': 'publishedItemsWithWarning',
            'start_utc_date': 'startUtcDate',
            'transmitted_items': 'transmittedItems'
        }

        self._completed = completed
        self._end_utc_date = end_utc_date
        self._error_message = error_message
        self._exported_products = exported_products
        self._failed_items = failed_items
        self._feed_type = feed_type
        self._html_report_generation_error_message = html_report_generation_error_message
        self._html_report_url = html_report_url
        self._processing_status = processing_status
        self._published_items = published_items
        self._published_items_with_warning = published_items_with_warning
        self._start_utc_date = start_utc_date
        self._transmitted_items = transmitted_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicationFeedReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The publicationFeedReporting of this PublicationFeedReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this PublicationFeedReporting.

        Indicates if the publication is completed or not

        :return: The completed of this PublicationFeedReporting.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PublicationFeedReporting.

        Indicates if the publication is completed or not

        :param completed: The completed of this PublicationFeedReporting.
        :type completed: bool
        """

        self._completed = completed

    @property
    def end_utc_date(self):
        """Gets the end_utc_date of this PublicationFeedReporting.

        The feed publication end time (UTC timezone)

        :return: The end_utc_date of this PublicationFeedReporting.
        :rtype: datetime
        """
        return self._end_utc_date

    @end_utc_date.setter
    def end_utc_date(self, end_utc_date):
        """Sets the end_utc_date of this PublicationFeedReporting.

        The feed publication end time (UTC timezone)

        :param end_utc_date: The end_utc_date of this PublicationFeedReporting.
        :type end_utc_date: datetime
        """

        self._end_utc_date = end_utc_date

    @property
    def error_message(self):
        """Gets the error_message of this PublicationFeedReporting.

        The error message

        :return: The error_message of this PublicationFeedReporting.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PublicationFeedReporting.

        The error message

        :param error_message: The error_message of this PublicationFeedReporting.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def exported_products(self):
        """Gets the exported_products of this PublicationFeedReporting.

        The product count downloaded from BeezUP Export

        :return: The exported_products of this PublicationFeedReporting.
        :rtype: int
        """
        return self._exported_products

    @exported_products.setter
    def exported_products(self, exported_products):
        """Sets the exported_products of this PublicationFeedReporting.

        The product count downloaded from BeezUP Export

        :param exported_products: The exported_products of this PublicationFeedReporting.
        :type exported_products: int
        """

        self._exported_products = exported_products

    @property
    def failed_items(self):
        """Gets the failed_items of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as failed

        :return: The failed_items of this PublicationFeedReporting.
        :rtype: int
        """
        return self._failed_items

    @failed_items.setter
    def failed_items(self, failed_items):
        """Sets the failed_items of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as failed

        :param failed_items: The failed_items of this PublicationFeedReporting.
        :type failed_items: int
        """

        self._failed_items = failed_items

    @property
    def feed_type(self):
        """Gets the feed_type of this PublicationFeedReporting.


        :return: The feed_type of this PublicationFeedReporting.
        :rtype: FeedType
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this PublicationFeedReporting.


        :param feed_type: The feed_type of this PublicationFeedReporting.
        :type feed_type: FeedType
        """
        if feed_type is None:
            raise ValueError("Invalid value for `feed_type`, must not be `None`")

        self._feed_type = feed_type

    @property
    def html_report_generation_error_message(self):
        """Gets the html_report_generation_error_message of this PublicationFeedReporting.

        The error message if the Html Report generation failed

        :return: The html_report_generation_error_message of this PublicationFeedReporting.
        :rtype: str
        """
        return self._html_report_generation_error_message

    @html_report_generation_error_message.setter
    def html_report_generation_error_message(self, html_report_generation_error_message):
        """Sets the html_report_generation_error_message of this PublicationFeedReporting.

        The error message if the Html Report generation failed

        :param html_report_generation_error_message: The html_report_generation_error_message of this PublicationFeedReporting.
        :type html_report_generation_error_message: str
        """

        self._html_report_generation_error_message = html_report_generation_error_message

    @property
    def html_report_url(self):
        """Gets the html_report_url of this PublicationFeedReporting.

        The Url for the Html Report generated

        :return: The html_report_url of this PublicationFeedReporting.
        :rtype: str
        """
        return self._html_report_url

    @html_report_url.setter
    def html_report_url(self, html_report_url):
        """Sets the html_report_url of this PublicationFeedReporting.

        The Url for the Html Report generated

        :param html_report_url: The html_report_url of this PublicationFeedReporting.
        :type html_report_url: str
        """

        self._html_report_url = html_report_url

    @property
    def processing_status(self):
        """Gets the processing_status of this PublicationFeedReporting.

        The processing status

        :return: The processing_status of this PublicationFeedReporting.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this PublicationFeedReporting.

        The processing status

        :param processing_status: The processing_status of this PublicationFeedReporting.
        :type processing_status: str
        """
        if processing_status is None:
            raise ValueError("Invalid value for `processing_status`, must not be `None`")

        self._processing_status = processing_status

    @property
    def published_items(self):
        """Gets the published_items of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as successful

        :return: The published_items of this PublicationFeedReporting.
        :rtype: int
        """
        return self._published_items

    @published_items.setter
    def published_items(self, published_items):
        """Sets the published_items of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as successful

        :param published_items: The published_items of this PublicationFeedReporting.
        :type published_items: int
        """

        self._published_items = published_items

    @property
    def published_items_with_warning(self):
        """Gets the published_items_with_warning of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as successful with warnings

        :return: The published_items_with_warning of this PublicationFeedReporting.
        :rtype: int
        """
        return self._published_items_with_warning

    @published_items_with_warning.setter
    def published_items_with_warning(self, published_items_with_warning):
        """Sets the published_items_with_warning of this PublicationFeedReporting.

        The item count (products or offers) the marketplace flagged as successful with warnings

        :param published_items_with_warning: The published_items_with_warning of this PublicationFeedReporting.
        :type published_items_with_warning: int
        """

        self._published_items_with_warning = published_items_with_warning

    @property
    def start_utc_date(self):
        """Gets the start_utc_date of this PublicationFeedReporting.

        The feed publication start time (UTC timezone)

        :return: The start_utc_date of this PublicationFeedReporting.
        :rtype: datetime
        """
        return self._start_utc_date

    @start_utc_date.setter
    def start_utc_date(self, start_utc_date):
        """Sets the start_utc_date of this PublicationFeedReporting.

        The feed publication start time (UTC timezone)

        :param start_utc_date: The start_utc_date of this PublicationFeedReporting.
        :type start_utc_date: datetime
        """
        if start_utc_date is None:
            raise ValueError("Invalid value for `start_utc_date`, must not be `None`")

        self._start_utc_date = start_utc_date

    @property
    def transmitted_items(self):
        """Gets the transmitted_items of this PublicationFeedReporting.

        The item count (products or offers) sent to the marketplace

        :return: The transmitted_items of this PublicationFeedReporting.
        :rtype: int
        """
        return self._transmitted_items

    @transmitted_items.setter
    def transmitted_items(self, transmitted_items):
        """Sets the transmitted_items of this PublicationFeedReporting.

        The item count (products or offers) sent to the marketplace

        :param transmitted_items: The transmitted_items of this PublicationFeedReporting.
        :type transmitted_items: int
        """

        self._transmitted_items = transmitted_items
