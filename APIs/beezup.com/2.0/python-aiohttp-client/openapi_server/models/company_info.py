# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_emails: List[str]=None, address: str=None, city: str=None, company: str=None, country_iso_code_alpha3: str=None, postal_code: str=None, vat_number: str=None):
        """CompanyInfo - a model defined in OpenAPI

        :param accounting_emails: The accounting_emails of this CompanyInfo.
        :param address: The address of this CompanyInfo.
        :param city: The city of this CompanyInfo.
        :param company: The company of this CompanyInfo.
        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this CompanyInfo.
        :param postal_code: The postal_code of this CompanyInfo.
        :param vat_number: The vat_number of this CompanyInfo.
        """
        self.openapi_types = {
            'accounting_emails': List[str],
            'address': str,
            'city': str,
            'company': str,
            'country_iso_code_alpha3': str,
            'postal_code': str,
            'vat_number': str
        }

        self.attribute_map = {
            'accounting_emails': 'accountingEmails',
            'address': 'address',
            'city': 'city',
            'company': 'company',
            'country_iso_code_alpha3': 'countryIsoCodeAlpha3',
            'postal_code': 'postalCode',
            'vat_number': 'vatNumber'
        }

        self._accounting_emails = accounting_emails
        self._address = address
        self._city = city
        self._company = company
        self._country_iso_code_alpha3 = country_iso_code_alpha3
        self._postal_code = postal_code
        self._vat_number = vat_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The companyInfo of this CompanyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_emails(self):
        """Gets the accounting_emails of this CompanyInfo.

        Your company accounting emails

        :return: The accounting_emails of this CompanyInfo.
        :rtype: List[str]
        """
        return self._accounting_emails

    @accounting_emails.setter
    def accounting_emails(self, accounting_emails):
        """Sets the accounting_emails of this CompanyInfo.

        Your company accounting emails

        :param accounting_emails: The accounting_emails of this CompanyInfo.
        :type accounting_emails: List[str]
        """

        self._accounting_emails = accounting_emails

    @property
    def address(self):
        """Gets the address of this CompanyInfo.

        Your address

        :return: The address of this CompanyInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CompanyInfo.

        Your address

        :param address: The address of this CompanyInfo.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def city(self):
        """Gets the city of this CompanyInfo.

        Your address city

        :return: The city of this CompanyInfo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CompanyInfo.

        Your address city

        :param city: The city of this CompanyInfo.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def company(self):
        """Gets the company of this CompanyInfo.

        Your company name

        :return: The company of this CompanyInfo.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CompanyInfo.

        Your company name

        :param company: The company of this CompanyInfo.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def country_iso_code_alpha3(self):
        """Gets the country_iso_code_alpha3 of this CompanyInfo.

        The country iso code alpha 3 <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\">(ISO 3166-1_alpha-3)</a>

        :return: The country_iso_code_alpha3 of this CompanyInfo.
        :rtype: str
        """
        return self._country_iso_code_alpha3

    @country_iso_code_alpha3.setter
    def country_iso_code_alpha3(self, country_iso_code_alpha3):
        """Sets the country_iso_code_alpha3 of this CompanyInfo.

        The country iso code alpha 3 <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\">(ISO 3166-1_alpha-3)</a>

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this CompanyInfo.
        :type country_iso_code_alpha3: str
        """
        if country_iso_code_alpha3 is None:
            raise ValueError("Invalid value for `country_iso_code_alpha3`, must not be `None`")

        self._country_iso_code_alpha3 = country_iso_code_alpha3

    @property
    def postal_code(self):
        """Gets the postal_code of this CompanyInfo.

        Your address postal code

        :return: The postal_code of this CompanyInfo.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CompanyInfo.

        Your address postal code

        :param postal_code: The postal_code of this CompanyInfo.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def vat_number(self):
        """Gets the vat_number of this CompanyInfo.

        Your company VATNumber. Used for french company. This number is checked with official web service before being saved.

        :return: The vat_number of this CompanyInfo.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this CompanyInfo.

        Your company VATNumber. Used for french company. This number is checked with official web service before being saved.

        :param vat_number: The vat_number of this CompanyInfo.
        :type vat_number: str
        """

        self._vat_number = vat_number
