# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.optimisation_action_name import OptimisationActionName
from openapi_server.models.rule_execution_reporting_error_type import RuleExecutionReportingErrorType
from openapi_server.models.rule_execution_reporting_execution_source import RuleExecutionReportingExecutionSource
from openapi_server.models.rule_execution_reporting_links import RuleExecutionReportingLinks
from openapi_server.models.rule_execution_reporting_status import RuleExecutionReportingStatus
from openapi_server import util


class RuleExecutionReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_affected_product_count: int=None, affected_channel_count: int=None, affected_product_count: int=None, completed_utc_date: datetime=None, error_type: RuleExecutionReportingErrorType=None, execution_source: RuleExecutionReportingExecutionSource=None, links: RuleExecutionReportingLinks=None, optimisation_action_name: OptimisationActionName=None, report_url: str=None, rule_id: str=None, rule_name: str=None, started_utc_date: datetime=None, status: RuleExecutionReportingStatus=None, user_id: str=None):
        """RuleExecutionReporting - a model defined in OpenAPI

        :param active_affected_product_count: The active_affected_product_count of this RuleExecutionReporting.
        :param affected_channel_count: The affected_channel_count of this RuleExecutionReporting.
        :param affected_product_count: The affected_product_count of this RuleExecutionReporting.
        :param completed_utc_date: The completed_utc_date of this RuleExecutionReporting.
        :param error_type: The error_type of this RuleExecutionReporting.
        :param execution_source: The execution_source of this RuleExecutionReporting.
        :param links: The links of this RuleExecutionReporting.
        :param optimisation_action_name: The optimisation_action_name of this RuleExecutionReporting.
        :param report_url: The report_url of this RuleExecutionReporting.
        :param rule_id: The rule_id of this RuleExecutionReporting.
        :param rule_name: The rule_name of this RuleExecutionReporting.
        :param started_utc_date: The started_utc_date of this RuleExecutionReporting.
        :param status: The status of this RuleExecutionReporting.
        :param user_id: The user_id of this RuleExecutionReporting.
        """
        self.openapi_types = {
            'active_affected_product_count': int,
            'affected_channel_count': int,
            'affected_product_count': int,
            'completed_utc_date': datetime,
            'error_type': RuleExecutionReportingErrorType,
            'execution_source': RuleExecutionReportingExecutionSource,
            'links': RuleExecutionReportingLinks,
            'optimisation_action_name': OptimisationActionName,
            'report_url': str,
            'rule_id': str,
            'rule_name': str,
            'started_utc_date': datetime,
            'status': RuleExecutionReportingStatus,
            'user_id': str
        }

        self.attribute_map = {
            'active_affected_product_count': 'activeAffectedProductCount',
            'affected_channel_count': 'affectedChannelCount',
            'affected_product_count': 'affectedProductCount',
            'completed_utc_date': 'completedUtcDate',
            'error_type': 'errorType',
            'execution_source': 'executionSource',
            'links': 'links',
            'optimisation_action_name': 'optimisationActionName',
            'report_url': 'reportUrl',
            'rule_id': 'ruleId',
            'rule_name': 'ruleName',
            'started_utc_date': 'startedUtcDate',
            'status': 'status',
            'user_id': 'userId'
        }

        self._active_affected_product_count = active_affected_product_count
        self._affected_channel_count = affected_channel_count
        self._affected_product_count = affected_product_count
        self._completed_utc_date = completed_utc_date
        self._error_type = error_type
        self._execution_source = execution_source
        self._links = links
        self._optimisation_action_name = optimisation_action_name
        self._report_url = report_url
        self._rule_id = rule_id
        self._rule_name = rule_name
        self._started_utc_date = started_utc_date
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleExecutionReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ruleExecutionReporting of this RuleExecutionReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_affected_product_count(self):
        """Gets the active_affected_product_count of this RuleExecutionReporting.

        The count of affected active products

        :return: The active_affected_product_count of this RuleExecutionReporting.
        :rtype: int
        """
        return self._active_affected_product_count

    @active_affected_product_count.setter
    def active_affected_product_count(self, active_affected_product_count):
        """Sets the active_affected_product_count of this RuleExecutionReporting.

        The count of affected active products

        :param active_affected_product_count: The active_affected_product_count of this RuleExecutionReporting.
        :type active_affected_product_count: int
        """

        self._active_affected_product_count = active_affected_product_count

    @property
    def affected_channel_count(self):
        """Gets the affected_channel_count of this RuleExecutionReporting.

        The count of affected Channels across all products

        :return: The affected_channel_count of this RuleExecutionReporting.
        :rtype: int
        """
        return self._affected_channel_count

    @affected_channel_count.setter
    def affected_channel_count(self, affected_channel_count):
        """Sets the affected_channel_count of this RuleExecutionReporting.

        The count of affected Channels across all products

        :param affected_channel_count: The affected_channel_count of this RuleExecutionReporting.
        :type affected_channel_count: int
        """

        self._affected_channel_count = affected_channel_count

    @property
    def affected_product_count(self):
        """Gets the affected_product_count of this RuleExecutionReporting.

        The count of affected products, active or not

        :return: The affected_product_count of this RuleExecutionReporting.
        :rtype: int
        """
        return self._affected_product_count

    @affected_product_count.setter
    def affected_product_count(self, affected_product_count):
        """Sets the affected_product_count of this RuleExecutionReporting.

        The count of affected products, active or not

        :param affected_product_count: The affected_product_count of this RuleExecutionReporting.
        :type affected_product_count: int
        """

        self._affected_product_count = affected_product_count

    @property
    def completed_utc_date(self):
        """Gets the completed_utc_date of this RuleExecutionReporting.

        The completed utc date of the execution of the rule

        :return: The completed_utc_date of this RuleExecutionReporting.
        :rtype: datetime
        """
        return self._completed_utc_date

    @completed_utc_date.setter
    def completed_utc_date(self, completed_utc_date):
        """Sets the completed_utc_date of this RuleExecutionReporting.

        The completed utc date of the execution of the rule

        :param completed_utc_date: The completed_utc_date of this RuleExecutionReporting.
        :type completed_utc_date: datetime
        """

        self._completed_utc_date = completed_utc_date

    @property
    def error_type(self):
        """Gets the error_type of this RuleExecutionReporting.


        :return: The error_type of this RuleExecutionReporting.
        :rtype: RuleExecutionReportingErrorType
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this RuleExecutionReporting.


        :param error_type: The error_type of this RuleExecutionReporting.
        :type error_type: RuleExecutionReportingErrorType
        """

        self._error_type = error_type

    @property
    def execution_source(self):
        """Gets the execution_source of this RuleExecutionReporting.


        :return: The execution_source of this RuleExecutionReporting.
        :rtype: RuleExecutionReportingExecutionSource
        """
        return self._execution_source

    @execution_source.setter
    def execution_source(self, execution_source):
        """Sets the execution_source of this RuleExecutionReporting.


        :param execution_source: The execution_source of this RuleExecutionReporting.
        :type execution_source: RuleExecutionReportingExecutionSource
        """
        if execution_source is None:
            raise ValueError("Invalid value for `execution_source`, must not be `None`")

        self._execution_source = execution_source

    @property
    def links(self):
        """Gets the links of this RuleExecutionReporting.


        :return: The links of this RuleExecutionReporting.
        :rtype: RuleExecutionReportingLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RuleExecutionReporting.


        :param links: The links of this RuleExecutionReporting.
        :type links: RuleExecutionReportingLinks
        """

        self._links = links

    @property
    def optimisation_action_name(self):
        """Gets the optimisation_action_name of this RuleExecutionReporting.


        :return: The optimisation_action_name of this RuleExecutionReporting.
        :rtype: OptimisationActionName
        """
        return self._optimisation_action_name

    @optimisation_action_name.setter
    def optimisation_action_name(self, optimisation_action_name):
        """Sets the optimisation_action_name of this RuleExecutionReporting.


        :param optimisation_action_name: The optimisation_action_name of this RuleExecutionReporting.
        :type optimisation_action_name: OptimisationActionName
        """

        self._optimisation_action_name = optimisation_action_name

    @property
    def report_url(self):
        """Gets the report_url of this RuleExecutionReporting.

        The url for the excel report for this execution

        :return: The report_url of this RuleExecutionReporting.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """Sets the report_url of this RuleExecutionReporting.

        The url for the excel report for this execution

        :param report_url: The report_url of this RuleExecutionReporting.
        :type report_url: str
        """

        self._report_url = report_url

    @property
    def rule_id(self):
        """Gets the rule_id of this RuleExecutionReporting.

        The rule identifier

        :return: The rule_id of this RuleExecutionReporting.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this RuleExecutionReporting.

        The rule identifier

        :param rule_id: The rule_id of this RuleExecutionReporting.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this RuleExecutionReporting.

        The name of the rule

        :return: The rule_name of this RuleExecutionReporting.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this RuleExecutionReporting.

        The name of the rule

        :param rule_name: The rule_name of this RuleExecutionReporting.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def started_utc_date(self):
        """Gets the started_utc_date of this RuleExecutionReporting.

        The start utc date of the execution of the rule

        :return: The started_utc_date of this RuleExecutionReporting.
        :rtype: datetime
        """
        return self._started_utc_date

    @started_utc_date.setter
    def started_utc_date(self, started_utc_date):
        """Sets the started_utc_date of this RuleExecutionReporting.

        The start utc date of the execution of the rule

        :param started_utc_date: The started_utc_date of this RuleExecutionReporting.
        :type started_utc_date: datetime
        """

        self._started_utc_date = started_utc_date

    @property
    def status(self):
        """Gets the status of this RuleExecutionReporting.


        :return: The status of this RuleExecutionReporting.
        :rtype: RuleExecutionReportingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuleExecutionReporting.


        :param status: The status of this RuleExecutionReporting.
        :type status: RuleExecutionReportingStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this RuleExecutionReporting.

        The userId that executed the rule if any

        :return: The user_id of this RuleExecutionReporting.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RuleExecutionReporting.

        The userId that executed the rule if any

        :param user_id: The user_id of this RuleExecutionReporting.
        :type user_id: str
        """

        self._user_id = user_id
