# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_path: List[str]=None, self_product_count: int=None, total_product_count: int=None):
        """Category - a model defined in OpenAPI

        :param category_id: The category_id of this Category.
        :param category_path: The category_path of this Category.
        :param self_product_count: The self_product_count of this Category.
        :param total_product_count: The total_product_count of this Category.
        """
        self.openapi_types = {
            'category_id': str,
            'category_path': List[str],
            'self_product_count': int,
            'total_product_count': int
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_path': 'categoryPath',
            'self_product_count': 'selfProductCount',
            'total_product_count': 'totalProductCount'
        }

        self._category_id = category_id
        self._category_path = category_path
        self._self_product_count = self_product_count
        self._total_product_count = total_product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this Category.

        The catalog category identifier

        :return: The category_id of this Category.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Category.

        The catalog category identifier

        :param category_id: The category_id of this Category.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_path(self):
        """Gets the category_path of this Category.

        The catalog category path

        :return: The category_path of this Category.
        :rtype: List[str]
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this Category.

        The catalog category path

        :param category_path: The category_path of this Category.
        :type category_path: List[str]
        """
        if category_path is None:
            raise ValueError("Invalid value for `category_path`, must not be `None`")

        self._category_path = category_path

    @property
    def self_product_count(self):
        """Gets the self_product_count of this Category.

        The product count related to this category

        :return: The self_product_count of this Category.
        :rtype: int
        """
        return self._self_product_count

    @self_product_count.setter
    def self_product_count(self, self_product_count):
        """Sets the self_product_count of this Category.

        The product count related to this category

        :param self_product_count: The self_product_count of this Category.
        :type self_product_count: int
        """
        if self_product_count is None:
            raise ValueError("Invalid value for `self_product_count`, must not be `None`")

        self._self_product_count = self_product_count

    @property
    def total_product_count(self):
        """Gets the total_product_count of this Category.

        The total product count related to this category and his sub categories

        :return: The total_product_count of this Category.
        :rtype: int
        """
        return self._total_product_count

    @total_product_count.setter
    def total_product_count(self, total_product_count):
        """Sets the total_product_count of this Category.

        The total product count related to this category and his sub categories

        :param total_product_count: The total_product_count of this Category.
        :type total_product_count: int
        """
        if total_product_count is None:
            raise ValueError("Invalid value for `total_product_count`, must not be `None`")

        self._total_product_count = total_product_count
