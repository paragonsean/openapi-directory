# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracked_external_order_product import TrackedExternalOrderProduct
from openapi_server import util


class TrackedExternalOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, merchant_order_id: str=None, payment_validated: bool=None, products: List[TrackedExternalOrderProduct]=None, total_amount: float=None, utc_date: datetime=None, visitor_id: str=None):
        """TrackedExternalOrder - a model defined in OpenAPI

        :param currency_code: The currency_code of this TrackedExternalOrder.
        :param merchant_order_id: The merchant_order_id of this TrackedExternalOrder.
        :param payment_validated: The payment_validated of this TrackedExternalOrder.
        :param products: The products of this TrackedExternalOrder.
        :param total_amount: The total_amount of this TrackedExternalOrder.
        :param utc_date: The utc_date of this TrackedExternalOrder.
        :param visitor_id: The visitor_id of this TrackedExternalOrder.
        """
        self.openapi_types = {
            'currency_code': str,
            'merchant_order_id': str,
            'payment_validated': bool,
            'products': List[TrackedExternalOrderProduct],
            'total_amount': float,
            'utc_date': datetime,
            'visitor_id': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'merchant_order_id': 'merchantOrderId',
            'payment_validated': 'paymentValidated',
            'products': 'products',
            'total_amount': 'totalAmount',
            'utc_date': 'utcDate',
            'visitor_id': 'visitorId'
        }

        self._currency_code = currency_code
        self._merchant_order_id = merchant_order_id
        self._payment_validated = payment_validated
        self._products = products
        self._total_amount = total_amount
        self._utc_date = utc_date
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedExternalOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedExternalOrder of this TrackedExternalOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this TrackedExternalOrder.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this TrackedExternalOrder.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TrackedExternalOrder.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this TrackedExternalOrder.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def merchant_order_id(self):
        """Gets the merchant_order_id of this TrackedExternalOrder.

        The merchant order identifier

        :return: The merchant_order_id of this TrackedExternalOrder.
        :rtype: str
        """
        return self._merchant_order_id

    @merchant_order_id.setter
    def merchant_order_id(self, merchant_order_id):
        """Sets the merchant_order_id of this TrackedExternalOrder.

        The merchant order identifier

        :param merchant_order_id: The merchant_order_id of this TrackedExternalOrder.
        :type merchant_order_id: str
        """
        if merchant_order_id is None:
            raise ValueError("Invalid value for `merchant_order_id`, must not be `None`")

        self._merchant_order_id = merchant_order_id

    @property
    def payment_validated(self):
        """Gets the payment_validated of this TrackedExternalOrder.

        Indicate if the payment of this external order has been validated or not

        :return: The payment_validated of this TrackedExternalOrder.
        :rtype: bool
        """
        return self._payment_validated

    @payment_validated.setter
    def payment_validated(self, payment_validated):
        """Sets the payment_validated of this TrackedExternalOrder.

        Indicate if the payment of this external order has been validated or not

        :param payment_validated: The payment_validated of this TrackedExternalOrder.
        :type payment_validated: bool
        """
        if payment_validated is None:
            raise ValueError("Invalid value for `payment_validated`, must not be `None`")

        self._payment_validated = payment_validated

    @property
    def products(self):
        """Gets the products of this TrackedExternalOrder.

        Can be null. The product list included in the external order

        :return: The products of this TrackedExternalOrder.
        :rtype: List[TrackedExternalOrderProduct]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this TrackedExternalOrder.

        Can be null. The product list included in the external order

        :param products: The products of this TrackedExternalOrder.
        :type products: List[TrackedExternalOrderProduct]
        """

        self._products = products

    @property
    def total_amount(self):
        """Gets the total_amount of this TrackedExternalOrder.

        The total amount of the external order

        :return: The total_amount of this TrackedExternalOrder.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this TrackedExternalOrder.

        The total amount of the external order

        :param total_amount: The total_amount of this TrackedExternalOrder.
        :type total_amount: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")

        self._total_amount = total_amount

    @property
    def utc_date(self):
        """Gets the utc_date of this TrackedExternalOrder.

        The utc date of the external order

        :return: The utc_date of this TrackedExternalOrder.
        :rtype: datetime
        """
        return self._utc_date

    @utc_date.setter
    def utc_date(self, utc_date):
        """Sets the utc_date of this TrackedExternalOrder.

        The utc date of the external order

        :param utc_date: The utc_date of this TrackedExternalOrder.
        :type utc_date: datetime
        """
        if utc_date is None:
            raise ValueError("Invalid value for `utc_date`, must not be `None`")

        self._utc_date = utc_date

    @property
    def visitor_id(self):
        """Gets the visitor_id of this TrackedExternalOrder.

        Can be null. The visitor identifier of the external order

        :return: The visitor_id of this TrackedExternalOrder.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this TrackedExternalOrder.

        Can be null. The visitor identifier of the external order

        :param visitor_id: The visitor_id of this TrackedExternalOrder.
        :type visitor_id: str
        """

        self._visitor_id = visitor_id
