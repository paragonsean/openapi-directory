# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detected_catalog_column import DetectedCatalogColumn
from openapi_server.models.detected_catalog_column_list_links import DetectedCatalogColumnListLinks
from openapi_server import util


class DetectedCatalogColumnList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detected_catalog_columns: List[DetectedCatalogColumn]=None, links: DetectedCatalogColumnListLinks=None):
        """DetectedCatalogColumnList - a model defined in OpenAPI

        :param detected_catalog_columns: The detected_catalog_columns of this DetectedCatalogColumnList.
        :param links: The links of this DetectedCatalogColumnList.
        """
        self.openapi_types = {
            'detected_catalog_columns': List[DetectedCatalogColumn],
            'links': DetectedCatalogColumnListLinks
        }

        self.attribute_map = {
            'detected_catalog_columns': 'detectedCatalogColumns',
            'links': 'links'
        }

        self._detected_catalog_columns = detected_catalog_columns
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedCatalogColumnList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The detectedCatalogColumnList of this DetectedCatalogColumnList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detected_catalog_columns(self):
        """Gets the detected_catalog_columns of this DetectedCatalogColumnList.

        Contains all deteted catalog columns

        :return: The detected_catalog_columns of this DetectedCatalogColumnList.
        :rtype: List[DetectedCatalogColumn]
        """
        return self._detected_catalog_columns

    @detected_catalog_columns.setter
    def detected_catalog_columns(self, detected_catalog_columns):
        """Sets the detected_catalog_columns of this DetectedCatalogColumnList.

        Contains all deteted catalog columns

        :param detected_catalog_columns: The detected_catalog_columns of this DetectedCatalogColumnList.
        :type detected_catalog_columns: List[DetectedCatalogColumn]
        """

        self._detected_catalog_columns = detected_catalog_columns

    @property
    def links(self):
        """Gets the links of this DetectedCatalogColumnList.


        :return: The links of this DetectedCatalogColumnList.
        :rtype: DetectedCatalogColumnListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DetectedCatalogColumnList.


        :param links: The links of this DetectedCatalogColumnList.
        :type links: DetectedCatalogColumnListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
