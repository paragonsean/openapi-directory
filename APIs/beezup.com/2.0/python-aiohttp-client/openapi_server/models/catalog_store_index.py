# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_store_index_links import CatalogStoreIndexLinks
from openapi_server.models.catalog_store_status import CatalogStoreStatus
from openapi_server import util


class CatalogStoreIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: CatalogStoreIndexLinks=None, status: CatalogStoreStatus=None):
        """CatalogStoreIndex - a model defined in OpenAPI

        :param links: The links of this CatalogStoreIndex.
        :param status: The status of this CatalogStoreIndex.
        """
        self.openapi_types = {
            'links': CatalogStoreIndexLinks,
            'status': CatalogStoreStatus
        }

        self.attribute_map = {
            'links': 'links',
            'status': 'status'
        }

        self._links = links
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogStoreIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogStoreIndex of this CatalogStoreIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CatalogStoreIndex.


        :return: The links of this CatalogStoreIndex.
        :rtype: CatalogStoreIndexLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CatalogStoreIndex.


        :param links: The links of this CatalogStoreIndex.
        :type links: CatalogStoreIndexLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def status(self):
        """Gets the status of this CatalogStoreIndex.


        :return: The status of this CatalogStoreIndex.
        :rtype: CatalogStoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CatalogStoreIndex.


        :param status: The status of this CatalogStoreIndex.
        :type status: CatalogStoreStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
