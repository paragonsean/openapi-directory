# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_index_links import OrderIndexLinks
from openapi_server.models.order_index_lov_links import OrderIndexLovLinks
from openapi_server import util


class OrderIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: OrderIndexLinks=None, lov_links: OrderIndexLovLinks=None):
        """OrderIndex - a model defined in OpenAPI

        :param links: The links of this OrderIndex.
        :param lov_links: The lov_links of this OrderIndex.
        """
        self.openapi_types = {
            'links': OrderIndexLinks,
            'lov_links': OrderIndexLovLinks
        }

        self.attribute_map = {
            'links': 'links',
            'lov_links': 'lovLinks'
        }

        self._links = links
        self._lov_links = lov_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderIndex of this OrderIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this OrderIndex.


        :return: The links of this OrderIndex.
        :rtype: OrderIndexLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OrderIndex.


        :param links: The links of this OrderIndex.
        :type links: OrderIndexLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def lov_links(self):
        """Gets the lov_links of this OrderIndex.


        :return: The lov_links of this OrderIndex.
        :rtype: OrderIndexLovLinks
        """
        return self._lov_links

    @lov_links.setter
    def lov_links(self, lov_links):
        """Sets the lov_links of this OrderIndex.


        :param lov_links: The lov_links of this OrderIndex.
        :type lov_links: OrderIndexLovLinks
        """
        if lov_links is None:
            raise ValueError("Invalid value for `lov_links`, must not be `None`")

        self._lov_links = lov_links
