# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog import ChannelCatalog
from openapi_server.models.channel_catalog_list_links import ChannelCatalogListLinks
from openapi_server.models.channel_catalog_list_lov_links import ChannelCatalogListLovLinks
from openapi_server import util


class ChannelCatalogList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_catalogs: Dict[str, ChannelCatalog]=None, links: ChannelCatalogListLinks=None, lov_links: ChannelCatalogListLovLinks=None):
        """ChannelCatalogList - a model defined in OpenAPI

        :param channel_catalogs: The channel_catalogs of this ChannelCatalogList.
        :param links: The links of this ChannelCatalogList.
        :param lov_links: The lov_links of this ChannelCatalogList.
        """
        self.openapi_types = {
            'channel_catalogs': Dict[str, ChannelCatalog],
            'links': ChannelCatalogListLinks,
            'lov_links': ChannelCatalogListLovLinks
        }

        self.attribute_map = {
            'channel_catalogs': 'channelCatalogs',
            'links': 'links',
            'lov_links': 'lovLinks'
        }

        self._channel_catalogs = channel_catalogs
        self._links = links
        self._lov_links = lov_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogList of this ChannelCatalogList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_catalogs(self):
        """Gets the channel_catalogs of this ChannelCatalogList.

        The channel catalog list. The key is the channel catalog identifier

        :return: The channel_catalogs of this ChannelCatalogList.
        :rtype: Dict[str, ChannelCatalog]
        """
        return self._channel_catalogs

    @channel_catalogs.setter
    def channel_catalogs(self, channel_catalogs):
        """Sets the channel_catalogs of this ChannelCatalogList.

        The channel catalog list. The key is the channel catalog identifier

        :param channel_catalogs: The channel_catalogs of this ChannelCatalogList.
        :type channel_catalogs: Dict[str, ChannelCatalog]
        """

        self._channel_catalogs = channel_catalogs

    @property
    def links(self):
        """Gets the links of this ChannelCatalogList.


        :return: The links of this ChannelCatalogList.
        :rtype: ChannelCatalogListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogList.


        :param links: The links of this ChannelCatalogList.
        :type links: ChannelCatalogListLinks
        """

        self._links = links

    @property
    def lov_links(self):
        """Gets the lov_links of this ChannelCatalogList.


        :return: The lov_links of this ChannelCatalogList.
        :rtype: ChannelCatalogListLovLinks
        """
        return self._lov_links

    @lov_links.setter
    def lov_links(self, lov_links):
        """Sets the lov_links of this ChannelCatalogList.


        :param lov_links: The lov_links of this ChannelCatalogList.
        :type lov_links: ChannelCatalogListLovLinks
        """

        self._lov_links = lov_links
