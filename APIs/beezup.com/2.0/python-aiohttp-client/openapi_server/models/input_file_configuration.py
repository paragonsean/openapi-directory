# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_file_fetch_configuration import InputFileFetchConfiguration
from openapi_server.models.input_file_read_configuration import InputFileReadConfiguration
from openapi_server import util


class InputFileConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fetch: InputFileFetchConfiguration=None, file_number: int=None, read: InputFileReadConfiguration=None):
        """InputFileConfiguration - a model defined in OpenAPI

        :param fetch: The fetch of this InputFileConfiguration.
        :param file_number: The file_number of this InputFileConfiguration.
        :param read: The read of this InputFileConfiguration.
        """
        self.openapi_types = {
            'fetch': InputFileFetchConfiguration,
            'file_number': int,
            'read': InputFileReadConfiguration
        }

        self.attribute_map = {
            'fetch': 'fetch',
            'file_number': 'fileNumber',
            'read': 'read'
        }

        self._fetch = fetch
        self._file_number = file_number
        self._read = read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputFileConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputFileConfiguration of this InputFileConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fetch(self):
        """Gets the fetch of this InputFileConfiguration.


        :return: The fetch of this InputFileConfiguration.
        :rtype: InputFileFetchConfiguration
        """
        return self._fetch

    @fetch.setter
    def fetch(self, fetch):
        """Sets the fetch of this InputFileConfiguration.


        :param fetch: The fetch of this InputFileConfiguration.
        :type fetch: InputFileFetchConfiguration
        """
        if fetch is None:
            raise ValueError("Invalid value for `fetch`, must not be `None`")

        self._fetch = fetch

    @property
    def file_number(self):
        """Gets the file_number of this InputFileConfiguration.

        The file number starting by 1

        :return: The file_number of this InputFileConfiguration.
        :rtype: int
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this InputFileConfiguration.

        The file number starting by 1

        :param file_number: The file_number of this InputFileConfiguration.
        :type file_number: int
        """
        if file_number is None:
            raise ValueError("Invalid value for `file_number`, must not be `None`")
        if file_number is not None and file_number < 1:
            raise ValueError("Invalid value for `file_number`, must be a value greater than or equal to `1`")

        self._file_number = file_number

    @property
    def read(self):
        """Gets the read of this InputFileConfiguration.


        :return: The read of this InputFileConfiguration.
        :rtype: InputFileReadConfiguration
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this InputFileConfiguration.


        :param read: The read of this InputFileConfiguration.
        :type read: InputFileReadConfiguration
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read
