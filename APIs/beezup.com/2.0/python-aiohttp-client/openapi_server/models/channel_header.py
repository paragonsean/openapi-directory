# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_header_links import ChannelHeaderLinks
import re
from openapi_server import util


class ChannelHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_logo_url: str=None, channel_name: str=None, links: ChannelHeaderLinks=None, types: List[str]=None):
        """ChannelHeader - a model defined in OpenAPI

        :param channel_id: The channel_id of this ChannelHeader.
        :param channel_logo_url: The channel_logo_url of this ChannelHeader.
        :param channel_name: The channel_name of this ChannelHeader.
        :param links: The links of this ChannelHeader.
        :param types: The types of this ChannelHeader.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_logo_url': str,
            'channel_name': str,
            'links': ChannelHeaderLinks,
            'types': List[str]
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_logo_url': 'channelLogoUrl',
            'channel_name': 'channelName',
            'links': 'links',
            'types': 'types'
        }

        self._channel_id = channel_id
        self._channel_logo_url = channel_logo_url
        self._channel_name = channel_name
        self._links = links
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelHeader of this ChannelHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelHeader.

        The channel identifier

        :return: The channel_id of this ChannelHeader.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelHeader.

        The channel identifier

        :param channel_id: The channel_id of this ChannelHeader.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_logo_url(self):
        """Gets the channel_logo_url of this ChannelHeader.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The channel_logo_url of this ChannelHeader.
        :rtype: str
        """
        return self._channel_logo_url

    @channel_logo_url.setter
    def channel_logo_url(self, channel_logo_url):
        """Sets the channel_logo_url of this ChannelHeader.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param channel_logo_url: The channel_logo_url of this ChannelHeader.
        :type channel_logo_url: str
        """
        if channel_logo_url is None:
            raise ValueError("Invalid value for `channel_logo_url`, must not be `None`")
        if channel_logo_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', channel_logo_url):
            raise ValueError("Invalid value for `channel_logo_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._channel_logo_url = channel_logo_url

    @property
    def channel_name(self):
        """Gets the channel_name of this ChannelHeader.

        The channel name

        :return: The channel_name of this ChannelHeader.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this ChannelHeader.

        The channel name

        :param channel_name: The channel_name of this ChannelHeader.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def links(self):
        """Gets the links of this ChannelHeader.


        :return: The links of this ChannelHeader.
        :rtype: ChannelHeaderLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelHeader.


        :param links: The links of this ChannelHeader.
        :type links: ChannelHeaderLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def types(self):
        """Gets the types of this ChannelHeader.

        The type list related to a channel

        :return: The types of this ChannelHeader.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ChannelHeader.

        The type list related to a channel

        :param types: The types of this ChannelHeader.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
