# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelCatalogCategoryConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_map_new_sub_categories: bool=None, catalog_category_path: List[str]=None, channel_category_path: List[str]=None, cost_value: float=None):
        """ChannelCatalogCategoryConfiguration - a model defined in OpenAPI

        :param auto_map_new_sub_categories: The auto_map_new_sub_categories of this ChannelCatalogCategoryConfiguration.
        :param catalog_category_path: The catalog_category_path of this ChannelCatalogCategoryConfiguration.
        :param channel_category_path: The channel_category_path of this ChannelCatalogCategoryConfiguration.
        :param cost_value: The cost_value of this ChannelCatalogCategoryConfiguration.
        """
        self.openapi_types = {
            'auto_map_new_sub_categories': bool,
            'catalog_category_path': List[str],
            'channel_category_path': List[str],
            'cost_value': float
        }

        self.attribute_map = {
            'auto_map_new_sub_categories': 'autoMapNewSubCategories',
            'catalog_category_path': 'catalogCategoryPath',
            'channel_category_path': 'channelCategoryPath',
            'cost_value': 'costValue'
        }

        self._auto_map_new_sub_categories = auto_map_new_sub_categories
        self._catalog_category_path = catalog_category_path
        self._channel_category_path = channel_category_path
        self._cost_value = cost_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogCategoryConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogCategoryConfiguration of this ChannelCatalogCategoryConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_map_new_sub_categories(self):
        """Gets the auto_map_new_sub_categories of this ChannelCatalogCategoryConfiguration.

        Great feature! In case of mapping to parent catalog category, you can ask to automatically map new sub catalog category in the next importation to this channel category path.

        :return: The auto_map_new_sub_categories of this ChannelCatalogCategoryConfiguration.
        :rtype: bool
        """
        return self._auto_map_new_sub_categories

    @auto_map_new_sub_categories.setter
    def auto_map_new_sub_categories(self, auto_map_new_sub_categories):
        """Sets the auto_map_new_sub_categories of this ChannelCatalogCategoryConfiguration.

        Great feature! In case of mapping to parent catalog category, you can ask to automatically map new sub catalog category in the next importation to this channel category path.

        :param auto_map_new_sub_categories: The auto_map_new_sub_categories of this ChannelCatalogCategoryConfiguration.
        :type auto_map_new_sub_categories: bool
        """
        if auto_map_new_sub_categories is None:
            raise ValueError("Invalid value for `auto_map_new_sub_categories`, must not be `None`")

        self._auto_map_new_sub_categories = auto_map_new_sub_categories

    @property
    def catalog_category_path(self):
        """Gets the catalog_category_path of this ChannelCatalogCategoryConfiguration.

        The catalog category path

        :return: The catalog_category_path of this ChannelCatalogCategoryConfiguration.
        :rtype: List[str]
        """
        return self._catalog_category_path

    @catalog_category_path.setter
    def catalog_category_path(self, catalog_category_path):
        """Sets the catalog_category_path of this ChannelCatalogCategoryConfiguration.

        The catalog category path

        :param catalog_category_path: The catalog_category_path of this ChannelCatalogCategoryConfiguration.
        :type catalog_category_path: List[str]
        """
        if catalog_category_path is None:
            raise ValueError("Invalid value for `catalog_category_path`, must not be `None`")

        self._catalog_category_path = catalog_category_path

    @property
    def channel_category_path(self):
        """Gets the channel_category_path of this ChannelCatalogCategoryConfiguration.

        The channel category path

        :return: The channel_category_path of this ChannelCatalogCategoryConfiguration.
        :rtype: List[str]
        """
        return self._channel_category_path

    @channel_category_path.setter
    def channel_category_path(self, channel_category_path):
        """Sets the channel_category_path of this ChannelCatalogCategoryConfiguration.

        The channel category path

        :param channel_category_path: The channel_category_path of this ChannelCatalogCategoryConfiguration.
        :type channel_category_path: List[str]
        """

        self._channel_category_path = channel_category_path

    @property
    def cost_value(self):
        """Gets the cost_value of this ChannelCatalogCategoryConfiguration.

        In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.

        :return: The cost_value of this ChannelCatalogCategoryConfiguration.
        :rtype: float
        """
        return self._cost_value

    @cost_value.setter
    def cost_value(self, cost_value):
        """Sets the cost_value of this ChannelCatalogCategoryConfiguration.

        In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.

        :param cost_value: The cost_value of this ChannelCatalogCategoryConfiguration.
        :type cost_value: float
        """

        self._cost_value = cost_value
