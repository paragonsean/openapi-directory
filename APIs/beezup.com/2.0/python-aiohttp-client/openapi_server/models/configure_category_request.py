# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_category_configuration import ChannelCatalogCategoryConfiguration
from openapi_server import util


class ConfigureCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_catalog_categories: List[ChannelCatalogCategoryConfiguration]=None, override_sub_category_mappings: bool=None):
        """ConfigureCategoryRequest - a model defined in OpenAPI

        :param channel_catalog_categories: The channel_catalog_categories of this ConfigureCategoryRequest.
        :param override_sub_category_mappings: The override_sub_category_mappings of this ConfigureCategoryRequest.
        """
        self.openapi_types = {
            'channel_catalog_categories': List[ChannelCatalogCategoryConfiguration],
            'override_sub_category_mappings': bool
        }

        self.attribute_map = {
            'channel_catalog_categories': 'channelCatalogCategories',
            'override_sub_category_mappings': 'overrideSubCategoryMappings'
        }

        self._channel_catalog_categories = channel_catalog_categories
        self._override_sub_category_mappings = override_sub_category_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The configureCategoryRequest of this ConfigureCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_catalog_categories(self):
        """Gets the channel_catalog_categories of this ConfigureCategoryRequest.


        :return: The channel_catalog_categories of this ConfigureCategoryRequest.
        :rtype: List[ChannelCatalogCategoryConfiguration]
        """
        return self._channel_catalog_categories

    @channel_catalog_categories.setter
    def channel_catalog_categories(self, channel_catalog_categories):
        """Sets the channel_catalog_categories of this ConfigureCategoryRequest.


        :param channel_catalog_categories: The channel_catalog_categories of this ConfigureCategoryRequest.
        :type channel_catalog_categories: List[ChannelCatalogCategoryConfiguration]
        """
        if channel_catalog_categories is None:
            raise ValueError("Invalid value for `channel_catalog_categories`, must not be `None`")

        self._channel_catalog_categories = channel_catalog_categories

    @property
    def override_sub_category_mappings(self):
        """Gets the override_sub_category_mappings of this ConfigureCategoryRequest.

        Great feature! In case of mapping to parent channel category, you can ask to override the mapping of all sub channel category to this catalog category path

        :return: The override_sub_category_mappings of this ConfigureCategoryRequest.
        :rtype: bool
        """
        return self._override_sub_category_mappings

    @override_sub_category_mappings.setter
    def override_sub_category_mappings(self, override_sub_category_mappings):
        """Sets the override_sub_category_mappings of this ConfigureCategoryRequest.

        Great feature! In case of mapping to parent channel category, you can ask to override the mapping of all sub channel category to this catalog category path

        :param override_sub_category_mappings: The override_sub_category_mappings of this ConfigureCategoryRequest.
        :type override_sub_category_mappings: bool
        """
        if override_sub_category_mappings is None:
            raise ValueError("Invalid value for `override_sub_category_mappings`, must not be `None`")

        self._override_sub_category_mappings = override_sub_category_mappings
