# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_lov_link3 import BeezUPCommonLOVLink3
from openapi_server import util


class CatalogIndexLOVLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_column_data_type_lov: BeezUPCommonLOVLink3=None, beez_up_column_display_group_lov: BeezUPCommonLOVLink3=None, beez_up_column_importance_lov: BeezUPCommonLOVLink3=None, beez_up_column_lov: BeezUPCommonLOVLink3=None, compare_option_lov: BeezUPCommonLOVLink3=None, duplicate_product_value_strategy_lov: BeezUPCommonLOVLink3=None):
        """CatalogIndexLOVLinks - a model defined in OpenAPI

        :param beez_up_column_data_type_lov: The beez_up_column_data_type_lov of this CatalogIndexLOVLinks.
        :param beez_up_column_display_group_lov: The beez_up_column_display_group_lov of this CatalogIndexLOVLinks.
        :param beez_up_column_importance_lov: The beez_up_column_importance_lov of this CatalogIndexLOVLinks.
        :param beez_up_column_lov: The beez_up_column_lov of this CatalogIndexLOVLinks.
        :param compare_option_lov: The compare_option_lov of this CatalogIndexLOVLinks.
        :param duplicate_product_value_strategy_lov: The duplicate_product_value_strategy_lov of this CatalogIndexLOVLinks.
        """
        self.openapi_types = {
            'beez_up_column_data_type_lov': BeezUPCommonLOVLink3,
            'beez_up_column_display_group_lov': BeezUPCommonLOVLink3,
            'beez_up_column_importance_lov': BeezUPCommonLOVLink3,
            'beez_up_column_lov': BeezUPCommonLOVLink3,
            'compare_option_lov': BeezUPCommonLOVLink3,
            'duplicate_product_value_strategy_lov': BeezUPCommonLOVLink3
        }

        self.attribute_map = {
            'beez_up_column_data_type_lov': 'beezUPColumnDataTypeLov',
            'beez_up_column_display_group_lov': 'beezUPColumnDisplayGroupLov',
            'beez_up_column_importance_lov': 'beezUPColumnImportanceLov',
            'beez_up_column_lov': 'beezUPColumnLov',
            'compare_option_lov': 'compareOptionLov',
            'duplicate_product_value_strategy_lov': 'duplicateProductValueStrategyLov'
        }

        self._beez_up_column_data_type_lov = beez_up_column_data_type_lov
        self._beez_up_column_display_group_lov = beez_up_column_display_group_lov
        self._beez_up_column_importance_lov = beez_up_column_importance_lov
        self._beez_up_column_lov = beez_up_column_lov
        self._compare_option_lov = compare_option_lov
        self._duplicate_product_value_strategy_lov = duplicate_product_value_strategy_lov

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogIndexLOVLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogIndexLOVLinks of this CatalogIndexLOVLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_column_data_type_lov(self):
        """Gets the beez_up_column_data_type_lov of this CatalogIndexLOVLinks.


        :return: The beez_up_column_data_type_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._beez_up_column_data_type_lov

    @beez_up_column_data_type_lov.setter
    def beez_up_column_data_type_lov(self, beez_up_column_data_type_lov):
        """Sets the beez_up_column_data_type_lov of this CatalogIndexLOVLinks.


        :param beez_up_column_data_type_lov: The beez_up_column_data_type_lov of this CatalogIndexLOVLinks.
        :type beez_up_column_data_type_lov: BeezUPCommonLOVLink3
        """
        if beez_up_column_data_type_lov is None:
            raise ValueError("Invalid value for `beez_up_column_data_type_lov`, must not be `None`")

        self._beez_up_column_data_type_lov = beez_up_column_data_type_lov

    @property
    def beez_up_column_display_group_lov(self):
        """Gets the beez_up_column_display_group_lov of this CatalogIndexLOVLinks.


        :return: The beez_up_column_display_group_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._beez_up_column_display_group_lov

    @beez_up_column_display_group_lov.setter
    def beez_up_column_display_group_lov(self, beez_up_column_display_group_lov):
        """Sets the beez_up_column_display_group_lov of this CatalogIndexLOVLinks.


        :param beez_up_column_display_group_lov: The beez_up_column_display_group_lov of this CatalogIndexLOVLinks.
        :type beez_up_column_display_group_lov: BeezUPCommonLOVLink3
        """
        if beez_up_column_display_group_lov is None:
            raise ValueError("Invalid value for `beez_up_column_display_group_lov`, must not be `None`")

        self._beez_up_column_display_group_lov = beez_up_column_display_group_lov

    @property
    def beez_up_column_importance_lov(self):
        """Gets the beez_up_column_importance_lov of this CatalogIndexLOVLinks.


        :return: The beez_up_column_importance_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._beez_up_column_importance_lov

    @beez_up_column_importance_lov.setter
    def beez_up_column_importance_lov(self, beez_up_column_importance_lov):
        """Sets the beez_up_column_importance_lov of this CatalogIndexLOVLinks.


        :param beez_up_column_importance_lov: The beez_up_column_importance_lov of this CatalogIndexLOVLinks.
        :type beez_up_column_importance_lov: BeezUPCommonLOVLink3
        """
        if beez_up_column_importance_lov is None:
            raise ValueError("Invalid value for `beez_up_column_importance_lov`, must not be `None`")

        self._beez_up_column_importance_lov = beez_up_column_importance_lov

    @property
    def beez_up_column_lov(self):
        """Gets the beez_up_column_lov of this CatalogIndexLOVLinks.


        :return: The beez_up_column_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._beez_up_column_lov

    @beez_up_column_lov.setter
    def beez_up_column_lov(self, beez_up_column_lov):
        """Sets the beez_up_column_lov of this CatalogIndexLOVLinks.


        :param beez_up_column_lov: The beez_up_column_lov of this CatalogIndexLOVLinks.
        :type beez_up_column_lov: BeezUPCommonLOVLink3
        """
        if beez_up_column_lov is None:
            raise ValueError("Invalid value for `beez_up_column_lov`, must not be `None`")

        self._beez_up_column_lov = beez_up_column_lov

    @property
    def compare_option_lov(self):
        """Gets the compare_option_lov of this CatalogIndexLOVLinks.


        :return: The compare_option_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._compare_option_lov

    @compare_option_lov.setter
    def compare_option_lov(self, compare_option_lov):
        """Sets the compare_option_lov of this CatalogIndexLOVLinks.


        :param compare_option_lov: The compare_option_lov of this CatalogIndexLOVLinks.
        :type compare_option_lov: BeezUPCommonLOVLink3
        """
        if compare_option_lov is None:
            raise ValueError("Invalid value for `compare_option_lov`, must not be `None`")

        self._compare_option_lov = compare_option_lov

    @property
    def duplicate_product_value_strategy_lov(self):
        """Gets the duplicate_product_value_strategy_lov of this CatalogIndexLOVLinks.


        :return: The duplicate_product_value_strategy_lov of this CatalogIndexLOVLinks.
        :rtype: BeezUPCommonLOVLink3
        """
        return self._duplicate_product_value_strategy_lov

    @duplicate_product_value_strategy_lov.setter
    def duplicate_product_value_strategy_lov(self, duplicate_product_value_strategy_lov):
        """Sets the duplicate_product_value_strategy_lov of this CatalogIndexLOVLinks.


        :param duplicate_product_value_strategy_lov: The duplicate_product_value_strategy_lov of this CatalogIndexLOVLinks.
        :type duplicate_product_value_strategy_lov: BeezUPCommonLOVLink3
        """
        if duplicate_product_value_strategy_lov is None:
            raise ValueError("Invalid value for `duplicate_product_value_strategy_lov`, must not be `None`")

        self._duplicate_product_value_strategy_lov = duplicate_product_value_strategy_lov
