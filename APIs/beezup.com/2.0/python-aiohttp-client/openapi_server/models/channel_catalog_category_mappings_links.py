# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_disable_channel_catalog_category_mapping_link import LinksDisableChannelCatalogCategoryMappingLink
from openapi_server.models.links_get_channel_catalog_categories_link import LinksGetChannelCatalogCategoriesLink
from openapi_server.models.links_reenable_channel_catalog_category_mapping_link import LinksReenableChannelCatalogCategoryMappingLink
from openapi_server import util


class ChannelCatalogCategoryMappingsLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable: LinksDisableChannelCatalogCategoryMappingLink=None, reenable: LinksReenableChannelCatalogCategoryMappingLink=None, _self: LinksGetChannelCatalogCategoriesLink=None):
        """ChannelCatalogCategoryMappingsLinks - a model defined in OpenAPI

        :param disable: The disable of this ChannelCatalogCategoryMappingsLinks.
        :param reenable: The reenable of this ChannelCatalogCategoryMappingsLinks.
        :param _self: The _self of this ChannelCatalogCategoryMappingsLinks.
        """
        self.openapi_types = {
            'disable': LinksDisableChannelCatalogCategoryMappingLink,
            'reenable': LinksReenableChannelCatalogCategoryMappingLink,
            '_self': LinksGetChannelCatalogCategoriesLink
        }

        self.attribute_map = {
            'disable': 'disable',
            'reenable': 'reenable',
            '_self': 'self'
        }

        self._disable = disable
        self._reenable = reenable
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogCategoryMappingsLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogCategoryMappingsLinks of this ChannelCatalogCategoryMappingsLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable(self):
        """Gets the disable of this ChannelCatalogCategoryMappingsLinks.


        :return: The disable of this ChannelCatalogCategoryMappingsLinks.
        :rtype: LinksDisableChannelCatalogCategoryMappingLink
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this ChannelCatalogCategoryMappingsLinks.


        :param disable: The disable of this ChannelCatalogCategoryMappingsLinks.
        :type disable: LinksDisableChannelCatalogCategoryMappingLink
        """

        self._disable = disable

    @property
    def reenable(self):
        """Gets the reenable of this ChannelCatalogCategoryMappingsLinks.


        :return: The reenable of this ChannelCatalogCategoryMappingsLinks.
        :rtype: LinksReenableChannelCatalogCategoryMappingLink
        """
        return self._reenable

    @reenable.setter
    def reenable(self, reenable):
        """Sets the reenable of this ChannelCatalogCategoryMappingsLinks.


        :param reenable: The reenable of this ChannelCatalogCategoryMappingsLinks.
        :type reenable: LinksReenableChannelCatalogCategoryMappingLink
        """

        self._reenable = reenable

    @property
    def _self(self):
        """Gets the _self of this ChannelCatalogCategoryMappingsLinks.


        :return: The _self of this ChannelCatalogCategoryMappingsLinks.
        :rtype: LinksGetChannelCatalogCategoriesLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ChannelCatalogCategoryMappingsLinks.


        :param _self: The _self of this ChannelCatalogCategoryMappingsLinks.
        :type _self: LinksGetChannelCatalogCategoriesLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
