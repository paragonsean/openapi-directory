# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_file_configuration import InputFileConfiguration
from openapi_server import util


class GetImportationReportResponseImportationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_utc_date: datetime=None, end_utc_date: datetime=None, input_configuration: InputFileConfiguration=None, user_id: str=None):
        """GetImportationReportResponseImportationInfo - a model defined in OpenAPI

        :param begin_utc_date: The begin_utc_date of this GetImportationReportResponseImportationInfo.
        :param end_utc_date: The end_utc_date of this GetImportationReportResponseImportationInfo.
        :param input_configuration: The input_configuration of this GetImportationReportResponseImportationInfo.
        :param user_id: The user_id of this GetImportationReportResponseImportationInfo.
        """
        self.openapi_types = {
            'begin_utc_date': datetime,
            'end_utc_date': datetime,
            'input_configuration': InputFileConfiguration,
            'user_id': str
        }

        self.attribute_map = {
            'begin_utc_date': 'beginUtcDate',
            'end_utc_date': 'endUtcDate',
            'input_configuration': 'inputConfiguration',
            'user_id': 'userId'
        }

        self._begin_utc_date = begin_utc_date
        self._end_utc_date = end_utc_date
        self._input_configuration = input_configuration
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationReportResponseImportationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationReportResponseImportationInfo of this GetImportationReportResponseImportationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_utc_date(self):
        """Gets the begin_utc_date of this GetImportationReportResponseImportationInfo.

        The start date of the importation

        :return: The begin_utc_date of this GetImportationReportResponseImportationInfo.
        :rtype: datetime
        """
        return self._begin_utc_date

    @begin_utc_date.setter
    def begin_utc_date(self, begin_utc_date):
        """Sets the begin_utc_date of this GetImportationReportResponseImportationInfo.

        The start date of the importation

        :param begin_utc_date: The begin_utc_date of this GetImportationReportResponseImportationInfo.
        :type begin_utc_date: datetime
        """
        if begin_utc_date is None:
            raise ValueError("Invalid value for `begin_utc_date`, must not be `None`")

        self._begin_utc_date = begin_utc_date

    @property
    def end_utc_date(self):
        """Gets the end_utc_date of this GetImportationReportResponseImportationInfo.

        The start date of the importation

        :return: The end_utc_date of this GetImportationReportResponseImportationInfo.
        :rtype: datetime
        """
        return self._end_utc_date

    @end_utc_date.setter
    def end_utc_date(self, end_utc_date):
        """Sets the end_utc_date of this GetImportationReportResponseImportationInfo.

        The start date of the importation

        :param end_utc_date: The end_utc_date of this GetImportationReportResponseImportationInfo.
        :type end_utc_date: datetime
        """
        if end_utc_date is None:
            raise ValueError("Invalid value for `end_utc_date`, must not be `None`")

        self._end_utc_date = end_utc_date

    @property
    def input_configuration(self):
        """Gets the input_configuration of this GetImportationReportResponseImportationInfo.


        :return: The input_configuration of this GetImportationReportResponseImportationInfo.
        :rtype: InputFileConfiguration
        """
        return self._input_configuration

    @input_configuration.setter
    def input_configuration(self, input_configuration):
        """Sets the input_configuration of this GetImportationReportResponseImportationInfo.


        :param input_configuration: The input_configuration of this GetImportationReportResponseImportationInfo.
        :type input_configuration: InputFileConfiguration
        """
        if input_configuration is None:
            raise ValueError("Invalid value for `input_configuration`, must not be `None`")

        self._input_configuration = input_configuration

    @property
    def user_id(self):
        """Gets the user_id of this GetImportationReportResponseImportationInfo.

        The user identifier

        :return: The user_id of this GetImportationReportResponseImportationInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetImportationReportResponseImportationInfo.

        The user identifier

        :param user_id: The user_id of this GetImportationReportResponseImportationInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
