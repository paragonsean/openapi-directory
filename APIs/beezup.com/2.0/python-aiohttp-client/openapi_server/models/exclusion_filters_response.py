# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exclusion_filter import ExclusionFilter
from openapi_server.models.exclusion_filters_response_links import ExclusionFiltersResponseLinks
from openapi_server import util


class ExclusionFiltersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclusion_filters: List[ExclusionFilter]=None, links: ExclusionFiltersResponseLinks=None):
        """ExclusionFiltersResponse - a model defined in OpenAPI

        :param exclusion_filters: The exclusion_filters of this ExclusionFiltersResponse.
        :param links: The links of this ExclusionFiltersResponse.
        """
        self.openapi_types = {
            'exclusion_filters': List[ExclusionFilter],
            'links': ExclusionFiltersResponseLinks
        }

        self.attribute_map = {
            'exclusion_filters': 'exclusionFilters',
            'links': 'links'
        }

        self._exclusion_filters = exclusion_filters
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionFiltersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exclusionFiltersResponse of this ExclusionFiltersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclusion_filters(self):
        """Gets the exclusion_filters of this ExclusionFiltersResponse.

        The exclusion filter list

        :return: The exclusion_filters of this ExclusionFiltersResponse.
        :rtype: List[ExclusionFilter]
        """
        return self._exclusion_filters

    @exclusion_filters.setter
    def exclusion_filters(self, exclusion_filters):
        """Sets the exclusion_filters of this ExclusionFiltersResponse.

        The exclusion filter list

        :param exclusion_filters: The exclusion_filters of this ExclusionFiltersResponse.
        :type exclusion_filters: List[ExclusionFilter]
        """

        self._exclusion_filters = exclusion_filters

    @property
    def links(self):
        """Gets the links of this ExclusionFiltersResponse.


        :return: The links of this ExclusionFiltersResponse.
        :rtype: ExclusionFiltersResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ExclusionFiltersResponse.


        :param links: The links of this ExclusionFiltersResponse.
        :type links: ExclusionFiltersResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
