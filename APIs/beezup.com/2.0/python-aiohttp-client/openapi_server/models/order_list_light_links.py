# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_clear_merchant_order_info_list_link import LinksClearMerchantOrderInfoListLink
from openapi_server.models.links_export_orders_link import LinksExportOrdersLink
from openapi_server.models.links_get_marketplace_accounts_synchronization_link import LinksGetMarketplaceAccountsSynchronizationLink
from openapi_server.models.links_get_order_list_light_link import LinksGetOrderListLightLink
from openapi_server.models.links_harvest_all_link import LinksHarvestAllLink
from openapi_server.models.links_set_merchant_order_info_list_link import LinksSetMerchantOrderInfoListLink
from openapi_server import util


class OrderListLightLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clear_merchant_infos: LinksClearMerchantOrderInfoListLink=None, export: LinksExportOrdersLink=None, harvest: LinksHarvestAllLink=None, set_merchant_infos: LinksSetMerchantOrderInfoListLink=None, status: LinksGetMarketplaceAccountsSynchronizationLink=None, _self: LinksGetOrderListLightLink=None):
        """OrderListLightLinks - a model defined in OpenAPI

        :param clear_merchant_infos: The clear_merchant_infos of this OrderListLightLinks.
        :param export: The export of this OrderListLightLinks.
        :param harvest: The harvest of this OrderListLightLinks.
        :param set_merchant_infos: The set_merchant_infos of this OrderListLightLinks.
        :param status: The status of this OrderListLightLinks.
        :param _self: The _self of this OrderListLightLinks.
        """
        self.openapi_types = {
            'clear_merchant_infos': LinksClearMerchantOrderInfoListLink,
            'export': LinksExportOrdersLink,
            'harvest': LinksHarvestAllLink,
            'set_merchant_infos': LinksSetMerchantOrderInfoListLink,
            'status': LinksGetMarketplaceAccountsSynchronizationLink,
            '_self': LinksGetOrderListLightLink
        }

        self.attribute_map = {
            'clear_merchant_infos': 'clearMerchantInfos',
            'export': 'export',
            'harvest': 'harvest',
            'set_merchant_infos': 'setMerchantInfos',
            'status': 'status',
            '_self': 'self'
        }

        self._clear_merchant_infos = clear_merchant_infos
        self._export = export
        self._harvest = harvest
        self._set_merchant_infos = set_merchant_infos
        self._status = status
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderListLightLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderListLightLinks of this OrderListLightLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clear_merchant_infos(self):
        """Gets the clear_merchant_infos of this OrderListLightLinks.


        :return: The clear_merchant_infos of this OrderListLightLinks.
        :rtype: LinksClearMerchantOrderInfoListLink
        """
        return self._clear_merchant_infos

    @clear_merchant_infos.setter
    def clear_merchant_infos(self, clear_merchant_infos):
        """Sets the clear_merchant_infos of this OrderListLightLinks.


        :param clear_merchant_infos: The clear_merchant_infos of this OrderListLightLinks.
        :type clear_merchant_infos: LinksClearMerchantOrderInfoListLink
        """
        if clear_merchant_infos is None:
            raise ValueError("Invalid value for `clear_merchant_infos`, must not be `None`")

        self._clear_merchant_infos = clear_merchant_infos

    @property
    def export(self):
        """Gets the export of this OrderListLightLinks.


        :return: The export of this OrderListLightLinks.
        :rtype: LinksExportOrdersLink
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this OrderListLightLinks.


        :param export: The export of this OrderListLightLinks.
        :type export: LinksExportOrdersLink
        """
        if export is None:
            raise ValueError("Invalid value for `export`, must not be `None`")

        self._export = export

    @property
    def harvest(self):
        """Gets the harvest of this OrderListLightLinks.


        :return: The harvest of this OrderListLightLinks.
        :rtype: LinksHarvestAllLink
        """
        return self._harvest

    @harvest.setter
    def harvest(self, harvest):
        """Sets the harvest of this OrderListLightLinks.


        :param harvest: The harvest of this OrderListLightLinks.
        :type harvest: LinksHarvestAllLink
        """
        if harvest is None:
            raise ValueError("Invalid value for `harvest`, must not be `None`")

        self._harvest = harvest

    @property
    def set_merchant_infos(self):
        """Gets the set_merchant_infos of this OrderListLightLinks.


        :return: The set_merchant_infos of this OrderListLightLinks.
        :rtype: LinksSetMerchantOrderInfoListLink
        """
        return self._set_merchant_infos

    @set_merchant_infos.setter
    def set_merchant_infos(self, set_merchant_infos):
        """Sets the set_merchant_infos of this OrderListLightLinks.


        :param set_merchant_infos: The set_merchant_infos of this OrderListLightLinks.
        :type set_merchant_infos: LinksSetMerchantOrderInfoListLink
        """
        if set_merchant_infos is None:
            raise ValueError("Invalid value for `set_merchant_infos`, must not be `None`")

        self._set_merchant_infos = set_merchant_infos

    @property
    def status(self):
        """Gets the status of this OrderListLightLinks.


        :return: The status of this OrderListLightLinks.
        :rtype: LinksGetMarketplaceAccountsSynchronizationLink
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderListLightLinks.


        :param status: The status of this OrderListLightLinks.
        :type status: LinksGetMarketplaceAccountsSynchronizationLink
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def _self(self):
        """Gets the _self of this OrderListLightLinks.


        :return: The _self of this OrderListLightLinks.
        :rtype: LinksGetOrderListLightLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OrderListLightLinks.


        :param _self: The _self of this OrderListLightLinks.
        :type _self: LinksGetOrderListLightLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
