# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_get_channel_catalog_product_info_link import LinksGetChannelCatalogProductInfoLink
from openapi_server.models.links_optimise_by_product_link import LinksOptimiseByProductLink
from openapi_server import util


class ReportByProductOneChannelLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_product_for_one_channel: LinksOptimiseByProductLink=None, enable_product_for_one_channel: LinksOptimiseByProductLink=None, product_info: LinksGetChannelCatalogProductInfoLink=None):
        """ReportByProductOneChannelLinks - a model defined in OpenAPI

        :param disable_product_for_one_channel: The disable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :param enable_product_for_one_channel: The enable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :param product_info: The product_info of this ReportByProductOneChannelLinks.
        """
        self.openapi_types = {
            'disable_product_for_one_channel': LinksOptimiseByProductLink,
            'enable_product_for_one_channel': LinksOptimiseByProductLink,
            'product_info': LinksGetChannelCatalogProductInfoLink
        }

        self.attribute_map = {
            'disable_product_for_one_channel': 'disableProductForOneChannel',
            'enable_product_for_one_channel': 'enableProductForOneChannel',
            'product_info': 'productInfo'
        }

        self._disable_product_for_one_channel = disable_product_for_one_channel
        self._enable_product_for_one_channel = enable_product_for_one_channel
        self._product_info = product_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByProductOneChannelLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByProductOneChannelLinks of this ReportByProductOneChannelLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_product_for_one_channel(self):
        """Gets the disable_product_for_one_channel of this ReportByProductOneChannelLinks.


        :return: The disable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :rtype: LinksOptimiseByProductLink
        """
        return self._disable_product_for_one_channel

    @disable_product_for_one_channel.setter
    def disable_product_for_one_channel(self, disable_product_for_one_channel):
        """Sets the disable_product_for_one_channel of this ReportByProductOneChannelLinks.


        :param disable_product_for_one_channel: The disable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :type disable_product_for_one_channel: LinksOptimiseByProductLink
        """
        if disable_product_for_one_channel is None:
            raise ValueError("Invalid value for `disable_product_for_one_channel`, must not be `None`")

        self._disable_product_for_one_channel = disable_product_for_one_channel

    @property
    def enable_product_for_one_channel(self):
        """Gets the enable_product_for_one_channel of this ReportByProductOneChannelLinks.


        :return: The enable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :rtype: LinksOptimiseByProductLink
        """
        return self._enable_product_for_one_channel

    @enable_product_for_one_channel.setter
    def enable_product_for_one_channel(self, enable_product_for_one_channel):
        """Sets the enable_product_for_one_channel of this ReportByProductOneChannelLinks.


        :param enable_product_for_one_channel: The enable_product_for_one_channel of this ReportByProductOneChannelLinks.
        :type enable_product_for_one_channel: LinksOptimiseByProductLink
        """
        if enable_product_for_one_channel is None:
            raise ValueError("Invalid value for `enable_product_for_one_channel`, must not be `None`")

        self._enable_product_for_one_channel = enable_product_for_one_channel

    @property
    def product_info(self):
        """Gets the product_info of this ReportByProductOneChannelLinks.


        :return: The product_info of this ReportByProductOneChannelLinks.
        :rtype: LinksGetChannelCatalogProductInfoLink
        """
        return self._product_info

    @product_info.setter
    def product_info(self, product_info):
        """Sets the product_info of this ReportByProductOneChannelLinks.


        :param product_info: The product_info of this ReportByProductOneChannelLinks.
        :type product_info: LinksGetChannelCatalogProductInfoLink
        """
        if product_info is None:
            raise ValueError("Invalid value for `product_info`, must not be `None`")

        self._product_info = product_info
