# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetOrderInvoiceGeneralSettingsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, culture_name: str=None, invoice_prefix: str=None, invoice_starting_sequence_number: int=None, product_vat_percent: float=None, shipping_vat_percent: float=None, last_invoice_sequence_number: int=None):
        """GetOrderInvoiceGeneralSettingsResponse - a model defined in OpenAPI

        :param culture_name: The culture_name of this GetOrderInvoiceGeneralSettingsResponse.
        :param invoice_prefix: The invoice_prefix of this GetOrderInvoiceGeneralSettingsResponse.
        :param invoice_starting_sequence_number: The invoice_starting_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        :param product_vat_percent: The product_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :param shipping_vat_percent: The shipping_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :param last_invoice_sequence_number: The last_invoice_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        """
        self.openapi_types = {
            'culture_name': str,
            'invoice_prefix': str,
            'invoice_starting_sequence_number': int,
            'product_vat_percent': float,
            'shipping_vat_percent': float,
            'last_invoice_sequence_number': int
        }

        self.attribute_map = {
            'culture_name': 'cultureName',
            'invoice_prefix': 'invoicePrefix',
            'invoice_starting_sequence_number': 'invoiceStartingSequenceNumber',
            'product_vat_percent': 'productVATPercent',
            'shipping_vat_percent': 'shippingVATPercent',
            'last_invoice_sequence_number': 'lastInvoiceSequenceNumber'
        }

        self._culture_name = culture_name
        self._invoice_prefix = invoice_prefix
        self._invoice_starting_sequence_number = invoice_starting_sequence_number
        self._product_vat_percent = product_vat_percent
        self._shipping_vat_percent = shipping_vat_percent
        self._last_invoice_sequence_number = last_invoice_sequence_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrderInvoiceGeneralSettingsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getOrderInvoiceGeneralSettingsResponse of this GetOrderInvoiceGeneralSettingsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def culture_name(self):
        """Gets the culture_name of this GetOrderInvoiceGeneralSettingsResponse.

        If the error is translated, the culture name will be indicated

        :return: The culture_name of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this GetOrderInvoiceGeneralSettingsResponse.

        If the error is translated, the culture name will be indicated

        :param culture_name: The culture_name of this GetOrderInvoiceGeneralSettingsResponse.
        :type culture_name: str
        """
        if culture_name is None:
            raise ValueError("Invalid value for `culture_name`, must not be `None`")

        self._culture_name = culture_name

    @property
    def invoice_prefix(self):
        """Gets the invoice_prefix of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Prefix. Can contain 1 to 50 characters, with alphanumeric characters in lowercase uppercase and #, _, -

        :return: The invoice_prefix of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: str
        """
        return self._invoice_prefix

    @invoice_prefix.setter
    def invoice_prefix(self, invoice_prefix):
        """Sets the invoice_prefix of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Prefix. Can contain 1 to 50 characters, with alphanumeric characters in lowercase uppercase and #, _, -

        :param invoice_prefix: The invoice_prefix of this GetOrderInvoiceGeneralSettingsResponse.
        :type invoice_prefix: str
        """
        if invoice_prefix is None:
            raise ValueError("Invalid value for `invoice_prefix`, must not be `None`")
        if invoice_prefix is not None and not re.search(r'^[a-zA-Z0-9#_-]{1,50}$', invoice_prefix):
            raise ValueError("Invalid value for `invoice_prefix`, must be a follow pattern or equal to `/^[a-zA-Z0-9#_-]{1,50}$/`")

        self._invoice_prefix = invoice_prefix

    @property
    def invoice_starting_sequence_number(self):
        """Gets the invoice_starting_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Sequence Number

        :return: The invoice_starting_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: int
        """
        return self._invoice_starting_sequence_number

    @invoice_starting_sequence_number.setter
    def invoice_starting_sequence_number(self, invoice_starting_sequence_number):
        """Sets the invoice_starting_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Sequence Number

        :param invoice_starting_sequence_number: The invoice_starting_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        :type invoice_starting_sequence_number: int
        """
        if invoice_starting_sequence_number is None:
            raise ValueError("Invalid value for `invoice_starting_sequence_number`, must not be `None`")
        if invoice_starting_sequence_number is not None and invoice_starting_sequence_number < 0:
            raise ValueError("Invalid value for `invoice_starting_sequence_number`, must be a value greater than or equal to `0`")

        self._invoice_starting_sequence_number = invoice_starting_sequence_number

    @property
    def product_vat_percent(self):
        """Gets the product_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.

        Product VAT in percent

        :return: The product_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: float
        """
        return self._product_vat_percent

    @product_vat_percent.setter
    def product_vat_percent(self, product_vat_percent):
        """Sets the product_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.

        Product VAT in percent

        :param product_vat_percent: The product_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :type product_vat_percent: float
        """
        if product_vat_percent is None:
            raise ValueError("Invalid value for `product_vat_percent`, must not be `None`")
        if product_vat_percent is not None and product_vat_percent > 100:
            raise ValueError("Invalid value for `product_vat_percent`, must be a value less than or equal to `100`")
        if product_vat_percent is not None and product_vat_percent < 0:
            raise ValueError("Invalid value for `product_vat_percent`, must be a value greater than or equal to `0`")

        self._product_vat_percent = product_vat_percent

    @property
    def shipping_vat_percent(self):
        """Gets the shipping_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.

        Shipping cost VAT in percent

        :return: The shipping_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: float
        """
        return self._shipping_vat_percent

    @shipping_vat_percent.setter
    def shipping_vat_percent(self, shipping_vat_percent):
        """Sets the shipping_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.

        Shipping cost VAT in percent

        :param shipping_vat_percent: The shipping_vat_percent of this GetOrderInvoiceGeneralSettingsResponse.
        :type shipping_vat_percent: float
        """
        if shipping_vat_percent is None:
            raise ValueError("Invalid value for `shipping_vat_percent`, must not be `None`")
        if shipping_vat_percent is not None and shipping_vat_percent > 100:
            raise ValueError("Invalid value for `shipping_vat_percent`, must be a value less than or equal to `100`")
        if shipping_vat_percent is not None and shipping_vat_percent < 0:
            raise ValueError("Invalid value for `shipping_vat_percent`, must be a value greater than or equal to `0`")

        self._shipping_vat_percent = shipping_vat_percent

    @property
    def last_invoice_sequence_number(self):
        """Gets the last_invoice_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Sequence Number

        :return: The last_invoice_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        :rtype: int
        """
        return self._last_invoice_sequence_number

    @last_invoice_sequence_number.setter
    def last_invoice_sequence_number(self, last_invoice_sequence_number):
        """Sets the last_invoice_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.

        Invoice Sequence Number

        :param last_invoice_sequence_number: The last_invoice_sequence_number of this GetOrderInvoiceGeneralSettingsResponse.
        :type last_invoice_sequence_number: int
        """
        if last_invoice_sequence_number is not None and last_invoice_sequence_number < 0:
            raise ValueError("Invalid value for `last_invoice_sequence_number`, must be a value greater than or equal to `0`")

        self._last_invoice_sequence_number = last_invoice_sequence_number
