# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.performance_indicator_type import PerformanceIndicatorType
from openapi_server import util


class PerformanceIndicatorFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator_name: str=None, performance_indicator: PerformanceIndicatorType=None, value: float=None):
        """PerformanceIndicatorFilter - a model defined in OpenAPI

        :param operator_name: The operator_name of this PerformanceIndicatorFilter.
        :param performance_indicator: The performance_indicator of this PerformanceIndicatorFilter.
        :param value: The value of this PerformanceIndicatorFilter.
        """
        self.openapi_types = {
            'operator_name': str,
            'performance_indicator': PerformanceIndicatorType,
            'value': float
        }

        self.attribute_map = {
            'operator_name': 'operatorName',
            'performance_indicator': 'performanceIndicator',
            'value': 'value'
        }

        self._operator_name = operator_name
        self._performance_indicator = performance_indicator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceIndicatorFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The performanceIndicatorFilter of this PerformanceIndicatorFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator_name(self):
        """Gets the operator_name of this PerformanceIndicatorFilter.

        Indicates the operator you want to apply on this indicator

        :return: The operator_name of this PerformanceIndicatorFilter.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this PerformanceIndicatorFilter.

        Indicates the operator you want to apply on this indicator

        :param operator_name: The operator_name of this PerformanceIndicatorFilter.
        :type operator_name: str
        """
        if operator_name is None:
            raise ValueError("Invalid value for `operator_name`, must not be `None`")

        self._operator_name = operator_name

    @property
    def performance_indicator(self):
        """Gets the performance_indicator of this PerformanceIndicatorFilter.


        :return: The performance_indicator of this PerformanceIndicatorFilter.
        :rtype: PerformanceIndicatorType
        """
        return self._performance_indicator

    @performance_indicator.setter
    def performance_indicator(self, performance_indicator):
        """Sets the performance_indicator of this PerformanceIndicatorFilter.


        :param performance_indicator: The performance_indicator of this PerformanceIndicatorFilter.
        :type performance_indicator: PerformanceIndicatorType
        """
        if performance_indicator is None:
            raise ValueError("Invalid value for `performance_indicator`, must not be `None`")

        self._performance_indicator = performance_indicator

    @property
    def value(self):
        """Gets the value of this PerformanceIndicatorFilter.

        Indicates the filter value to apply on this indicator

        :return: The value of this PerformanceIndicatorFilter.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PerformanceIndicatorFilter.

        Indicates the filter value to apply on this indicator

        :param value: The value of this PerformanceIndicatorFilter.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
