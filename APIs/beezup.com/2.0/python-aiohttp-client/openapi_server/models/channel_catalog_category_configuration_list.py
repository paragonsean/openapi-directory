# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_category_configuration_info import ChannelCatalogCategoryConfigurationInfo
from openapi_server.models.channel_catalog_category_mappings_links import ChannelCatalogCategoryMappingsLinks
from openapi_server.models.cost_status import CostStatus
from openapi_server.models.mapping_status import MappingStatus
from openapi_server import util


class ChannelCatalogCategoryConfigurationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_catalog_category_configurations: List[ChannelCatalogCategoryConfigurationInfo]=None, cost_status: CostStatus=None, links: ChannelCatalogCategoryMappingsLinks=None, mapping_status: MappingStatus=None):
        """ChannelCatalogCategoryConfigurationList - a model defined in OpenAPI

        :param channel_catalog_category_configurations: The channel_catalog_category_configurations of this ChannelCatalogCategoryConfigurationList.
        :param cost_status: The cost_status of this ChannelCatalogCategoryConfigurationList.
        :param links: The links of this ChannelCatalogCategoryConfigurationList.
        :param mapping_status: The mapping_status of this ChannelCatalogCategoryConfigurationList.
        """
        self.openapi_types = {
            'channel_catalog_category_configurations': List[ChannelCatalogCategoryConfigurationInfo],
            'cost_status': CostStatus,
            'links': ChannelCatalogCategoryMappingsLinks,
            'mapping_status': MappingStatus
        }

        self.attribute_map = {
            'channel_catalog_category_configurations': 'channelCatalogCategoryConfigurations',
            'cost_status': 'costStatus',
            'links': 'links',
            'mapping_status': 'mappingStatus'
        }

        self._channel_catalog_category_configurations = channel_catalog_category_configurations
        self._cost_status = cost_status
        self._links = links
        self._mapping_status = mapping_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogCategoryConfigurationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogCategoryConfigurationList of this ChannelCatalogCategoryConfigurationList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_catalog_category_configurations(self):
        """Gets the channel_catalog_category_configurations of this ChannelCatalogCategoryConfigurationList.


        :return: The channel_catalog_category_configurations of this ChannelCatalogCategoryConfigurationList.
        :rtype: List[ChannelCatalogCategoryConfigurationInfo]
        """
        return self._channel_catalog_category_configurations

    @channel_catalog_category_configurations.setter
    def channel_catalog_category_configurations(self, channel_catalog_category_configurations):
        """Sets the channel_catalog_category_configurations of this ChannelCatalogCategoryConfigurationList.


        :param channel_catalog_category_configurations: The channel_catalog_category_configurations of this ChannelCatalogCategoryConfigurationList.
        :type channel_catalog_category_configurations: List[ChannelCatalogCategoryConfigurationInfo]
        """
        if channel_catalog_category_configurations is None:
            raise ValueError("Invalid value for `channel_catalog_category_configurations`, must not be `None`")

        self._channel_catalog_category_configurations = channel_catalog_category_configurations

    @property
    def cost_status(self):
        """Gets the cost_status of this ChannelCatalogCategoryConfigurationList.


        :return: The cost_status of this ChannelCatalogCategoryConfigurationList.
        :rtype: CostStatus
        """
        return self._cost_status

    @cost_status.setter
    def cost_status(self, cost_status):
        """Sets the cost_status of this ChannelCatalogCategoryConfigurationList.


        :param cost_status: The cost_status of this ChannelCatalogCategoryConfigurationList.
        :type cost_status: CostStatus
        """
        if cost_status is None:
            raise ValueError("Invalid value for `cost_status`, must not be `None`")

        self._cost_status = cost_status

    @property
    def links(self):
        """Gets the links of this ChannelCatalogCategoryConfigurationList.


        :return: The links of this ChannelCatalogCategoryConfigurationList.
        :rtype: ChannelCatalogCategoryMappingsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogCategoryConfigurationList.


        :param links: The links of this ChannelCatalogCategoryConfigurationList.
        :type links: ChannelCatalogCategoryMappingsLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def mapping_status(self):
        """Gets the mapping_status of this ChannelCatalogCategoryConfigurationList.


        :return: The mapping_status of this ChannelCatalogCategoryConfigurationList.
        :rtype: MappingStatus
        """
        return self._mapping_status

    @mapping_status.setter
    def mapping_status(self, mapping_status):
        """Sets the mapping_status of this ChannelCatalogCategoryConfigurationList.


        :param mapping_status: The mapping_status of this ChannelCatalogCategoryConfigurationList.
        :type mapping_status: MappingStatus
        """
        if mapping_status is None:
            raise ValueError("Invalid value for `mapping_status`, must not be `None`")

        self._mapping_status = mapping_status
