# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_channel_basic_info import BeezUPCommonChannelBasicInfo
from openapi_server.models.report_by_channel_links import ReportByChannelLinks
from openapi_server import util


class ReportByChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_product_count: int=None, channel: BeezUPCommonChannelBasicInfo=None, click_count: int=None, cost: float=None, enabled_product_count: int=None, links: ReportByChannelLinks=None, margin: float=None, order_count: int=None, performance_indicator: float=None, roi: float=None, sold_product_count: int=None, total_sales: float=None):
        """ReportByChannel - a model defined in OpenAPI

        :param catalog_product_count: The catalog_product_count of this ReportByChannel.
        :param channel: The channel of this ReportByChannel.
        :param click_count: The click_count of this ReportByChannel.
        :param cost: The cost of this ReportByChannel.
        :param enabled_product_count: The enabled_product_count of this ReportByChannel.
        :param links: The links of this ReportByChannel.
        :param margin: The margin of this ReportByChannel.
        :param order_count: The order_count of this ReportByChannel.
        :param performance_indicator: The performance_indicator of this ReportByChannel.
        :param roi: The roi of this ReportByChannel.
        :param sold_product_count: The sold_product_count of this ReportByChannel.
        :param total_sales: The total_sales of this ReportByChannel.
        """
        self.openapi_types = {
            'catalog_product_count': int,
            'channel': BeezUPCommonChannelBasicInfo,
            'click_count': int,
            'cost': float,
            'enabled_product_count': int,
            'links': ReportByChannelLinks,
            'margin': float,
            'order_count': int,
            'performance_indicator': float,
            'roi': float,
            'sold_product_count': int,
            'total_sales': float
        }

        self.attribute_map = {
            'catalog_product_count': 'catalogProductCount',
            'channel': 'channel',
            'click_count': 'clickCount',
            'cost': 'cost',
            'enabled_product_count': 'enabledProductCount',
            'links': 'links',
            'margin': 'margin',
            'order_count': 'orderCount',
            'performance_indicator': 'performanceIndicator',
            'roi': 'roi',
            'sold_product_count': 'soldProductCount',
            'total_sales': 'totalSales'
        }

        self._catalog_product_count = catalog_product_count
        self._channel = channel
        self._click_count = click_count
        self._cost = cost
        self._enabled_product_count = enabled_product_count
        self._links = links
        self._margin = margin
        self._order_count = order_count
        self._performance_indicator = performance_indicator
        self._roi = roi
        self._sold_product_count = sold_product_count
        self._total_sales = total_sales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByChannel of this ReportByChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_product_count(self):
        """Gets the catalog_product_count of this ReportByChannel.

        The catalog product count

        :return: The catalog_product_count of this ReportByChannel.
        :rtype: int
        """
        return self._catalog_product_count

    @catalog_product_count.setter
    def catalog_product_count(self, catalog_product_count):
        """Sets the catalog_product_count of this ReportByChannel.

        The catalog product count

        :param catalog_product_count: The catalog_product_count of this ReportByChannel.
        :type catalog_product_count: int
        """
        if catalog_product_count is None:
            raise ValueError("Invalid value for `catalog_product_count`, must not be `None`")

        self._catalog_product_count = catalog_product_count

    @property
    def channel(self):
        """Gets the channel of this ReportByChannel.


        :return: The channel of this ReportByChannel.
        :rtype: BeezUPCommonChannelBasicInfo
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ReportByChannel.


        :param channel: The channel of this ReportByChannel.
        :type channel: BeezUPCommonChannelBasicInfo
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def click_count(self):
        """Gets the click_count of this ReportByChannel.

        The click count

        :return: The click_count of this ReportByChannel.
        :rtype: int
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """Sets the click_count of this ReportByChannel.

        The click count

        :param click_count: The click_count of this ReportByChannel.
        :type click_count: int
        """
        if click_count is None:
            raise ValueError("Invalid value for `click_count`, must not be `None`")

        self._click_count = click_count

    @property
    def cost(self):
        """Gets the cost of this ReportByChannel.

        The cost for

        :return: The cost of this ReportByChannel.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ReportByChannel.

        The cost for

        :param cost: The cost of this ReportByChannel.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def enabled_product_count(self):
        """Gets the enabled_product_count of this ReportByChannel.

        The enabled product count

        :return: The enabled_product_count of this ReportByChannel.
        :rtype: int
        """
        return self._enabled_product_count

    @enabled_product_count.setter
    def enabled_product_count(self, enabled_product_count):
        """Sets the enabled_product_count of this ReportByChannel.

        The enabled product count

        :param enabled_product_count: The enabled_product_count of this ReportByChannel.
        :type enabled_product_count: int
        """
        if enabled_product_count is None:
            raise ValueError("Invalid value for `enabled_product_count`, must not be `None`")

        self._enabled_product_count = enabled_product_count

    @property
    def links(self):
        """Gets the links of this ReportByChannel.


        :return: The links of this ReportByChannel.
        :rtype: ReportByChannelLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportByChannel.


        :param links: The links of this ReportByChannel.
        :type links: ReportByChannelLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def margin(self):
        """Gets the margin of this ReportByChannel.

        The margin

        :return: The margin of this ReportByChannel.
        :rtype: float
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this ReportByChannel.

        The margin

        :param margin: The margin of this ReportByChannel.
        :type margin: float
        """

        self._margin = margin

    @property
    def order_count(self):
        """Gets the order_count of this ReportByChannel.

        The order count

        :return: The order_count of this ReportByChannel.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this ReportByChannel.

        The order count

        :param order_count: The order_count of this ReportByChannel.
        :type order_count: int
        """
        if order_count is None:
            raise ValueError("Invalid value for `order_count`, must not be `None`")

        self._order_count = order_count

    @property
    def performance_indicator(self):
        """Gets the performance_indicator of this ReportByChannel.

        The performance indicator based on the performance indicator formula indicated in the request

        :return: The performance_indicator of this ReportByChannel.
        :rtype: float
        """
        return self._performance_indicator

    @performance_indicator.setter
    def performance_indicator(self, performance_indicator):
        """Sets the performance_indicator of this ReportByChannel.

        The performance indicator based on the performance indicator formula indicated in the request

        :param performance_indicator: The performance_indicator of this ReportByChannel.
        :type performance_indicator: float
        """
        if performance_indicator is None:
            raise ValueError("Invalid value for `performance_indicator`, must not be `None`")

        self._performance_indicator = performance_indicator

    @property
    def roi(self):
        """Gets the roi of this ReportByChannel.

        The Return On Investment

        :return: The roi of this ReportByChannel.
        :rtype: float
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this ReportByChannel.

        The Return On Investment

        :param roi: The roi of this ReportByChannel.
        :type roi: float
        """

        self._roi = roi

    @property
    def sold_product_count(self):
        """Gets the sold_product_count of this ReportByChannel.

        The product sold count count

        :return: The sold_product_count of this ReportByChannel.
        :rtype: int
        """
        return self._sold_product_count

    @sold_product_count.setter
    def sold_product_count(self, sold_product_count):
        """Sets the sold_product_count of this ReportByChannel.

        The product sold count count

        :param sold_product_count: The sold_product_count of this ReportByChannel.
        :type sold_product_count: int
        """
        if sold_product_count is None:
            raise ValueError("Invalid value for `sold_product_count`, must not be `None`")

        self._sold_product_count = sold_product_count

    @property
    def total_sales(self):
        """Gets the total_sales of this ReportByChannel.

        The total sales

        :return: The total_sales of this ReportByChannel.
        :rtype: float
        """
        return self._total_sales

    @total_sales.setter
    def total_sales(self, total_sales):
        """Sets the total_sales of this ReportByChannel.

        The total sales

        :param total_sales: The total_sales of this ReportByChannel.
        :type total_sales: float
        """
        if total_sales is None:
            raise ValueError("Invalid value for `total_sales`, must not be `None`")

        self._total_sales = total_sales
