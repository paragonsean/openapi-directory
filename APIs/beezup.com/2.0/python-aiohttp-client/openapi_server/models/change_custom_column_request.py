# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeCustomColumnRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_blockly_expression: str=None, encrypted_expression: str=None, user_colum_name: str=None):
        """ChangeCustomColumnRequest - a model defined in OpenAPI

        :param encrypted_blockly_expression: The encrypted_blockly_expression of this ChangeCustomColumnRequest.
        :param encrypted_expression: The encrypted_expression of this ChangeCustomColumnRequest.
        :param user_colum_name: The user_colum_name of this ChangeCustomColumnRequest.
        """
        self.openapi_types = {
            'encrypted_blockly_expression': str,
            'encrypted_expression': str,
            'user_colum_name': str
        }

        self.attribute_map = {
            'encrypted_blockly_expression': 'encryptedBlocklyExpression',
            'encrypted_expression': 'encryptedExpression',
            'user_colum_name': 'userColumName'
        }

        self._encrypted_blockly_expression = encrypted_blockly_expression
        self._encrypted_expression = encrypted_expression
        self._user_colum_name = user_colum_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeCustomColumnRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The changeCustomColumnRequest of this ChangeCustomColumnRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_blockly_expression(self):
        """Gets the encrypted_blockly_expression of this ChangeCustomColumnRequest.

        The encrypted XML Blockly representation of the expression

        :return: The encrypted_blockly_expression of this ChangeCustomColumnRequest.
        :rtype: str
        """
        return self._encrypted_blockly_expression

    @encrypted_blockly_expression.setter
    def encrypted_blockly_expression(self, encrypted_blockly_expression):
        """Sets the encrypted_blockly_expression of this ChangeCustomColumnRequest.

        The encrypted XML Blockly representation of the expression

        :param encrypted_blockly_expression: The encrypted_blockly_expression of this ChangeCustomColumnRequest.
        :type encrypted_blockly_expression: str
        """
        if encrypted_blockly_expression is None:
            raise ValueError("Invalid value for `encrypted_blockly_expression`, must not be `None`")

        self._encrypted_blockly_expression = encrypted_blockly_expression

    @property
    def encrypted_expression(self):
        """Gets the encrypted_expression of this ChangeCustomColumnRequest.

        The encrypted excel expression of the column

        :return: The encrypted_expression of this ChangeCustomColumnRequest.
        :rtype: str
        """
        return self._encrypted_expression

    @encrypted_expression.setter
    def encrypted_expression(self, encrypted_expression):
        """Sets the encrypted_expression of this ChangeCustomColumnRequest.

        The encrypted excel expression of the column

        :param encrypted_expression: The encrypted_expression of this ChangeCustomColumnRequest.
        :type encrypted_expression: str
        """
        if encrypted_expression is None:
            raise ValueError("Invalid value for `encrypted_expression`, must not be `None`")

        self._encrypted_expression = encrypted_expression

    @property
    def user_colum_name(self):
        """Gets the user_colum_name of this ChangeCustomColumnRequest.

        Column named by the user

        :return: The user_colum_name of this ChangeCustomColumnRequest.
        :rtype: str
        """
        return self._user_colum_name

    @user_colum_name.setter
    def user_colum_name(self, user_colum_name):
        """Sets the user_colum_name of this ChangeCustomColumnRequest.

        Column named by the user

        :param user_colum_name: The user_colum_name of this ChangeCustomColumnRequest.
        :type user_colum_name: str
        """
        if user_colum_name is None:
            raise ValueError("Invalid value for `user_colum_name`, must not be `None`")

        self._user_colum_name = user_colum_name
