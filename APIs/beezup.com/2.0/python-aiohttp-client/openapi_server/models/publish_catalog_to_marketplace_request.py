# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed_type import FeedType
from openapi_server.models.publication_strategy_kind import PublicationStrategyKind
from openapi_server import util


class PublishCatalogToMarketplaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed_type: FeedType=None, publication_strategy_kind: PublicationStrategyKind=PublicationStrategyKind.DELTA, with_unpublish: bool=None):
        """PublishCatalogToMarketplaceRequest - a model defined in OpenAPI

        :param feed_type: The feed_type of this PublishCatalogToMarketplaceRequest.
        :param publication_strategy_kind: The publication_strategy_kind of this PublishCatalogToMarketplaceRequest.
        :param with_unpublish: The with_unpublish of this PublishCatalogToMarketplaceRequest.
        """
        self.openapi_types = {
            'feed_type': FeedType,
            'publication_strategy_kind': PublicationStrategyKind,
            'with_unpublish': bool
        }

        self.attribute_map = {
            'feed_type': 'feedType',
            'publication_strategy_kind': 'publicationStrategyKind',
            'with_unpublish': 'withUnpublish'
        }

        self._feed_type = feed_type
        self._publication_strategy_kind = publication_strategy_kind
        self._with_unpublish = with_unpublish

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishCatalogToMarketplaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The publishCatalogToMarketplaceRequest of this PublishCatalogToMarketplaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed_type(self):
        """Gets the feed_type of this PublishCatalogToMarketplaceRequest.


        :return: The feed_type of this PublishCatalogToMarketplaceRequest.
        :rtype: FeedType
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this PublishCatalogToMarketplaceRequest.


        :param feed_type: The feed_type of this PublishCatalogToMarketplaceRequest.
        :type feed_type: FeedType
        """
        if feed_type is None:
            raise ValueError("Invalid value for `feed_type`, must not be `None`")

        self._feed_type = feed_type

    @property
    def publication_strategy_kind(self):
        """Gets the publication_strategy_kind of this PublishCatalogToMarketplaceRequest.


        :return: The publication_strategy_kind of this PublishCatalogToMarketplaceRequest.
        :rtype: PublicationStrategyKind
        """
        return self._publication_strategy_kind

    @publication_strategy_kind.setter
    def publication_strategy_kind(self, publication_strategy_kind):
        """Sets the publication_strategy_kind of this PublishCatalogToMarketplaceRequest.


        :param publication_strategy_kind: The publication_strategy_kind of this PublishCatalogToMarketplaceRequest.
        :type publication_strategy_kind: PublicationStrategyKind
        """
        if publication_strategy_kind is None:
            raise ValueError("Invalid value for `publication_strategy_kind`, must not be `None`")

        self._publication_strategy_kind = publication_strategy_kind

    @property
    def with_unpublish(self):
        """Gets the with_unpublish of this PublishCatalogToMarketplaceRequest.

        In full publication strategy kind, for some marktetplace, you can ask to unpublish or not your existing feeds on the markeptlace absent from your exported catalog.

        :return: The with_unpublish of this PublishCatalogToMarketplaceRequest.
        :rtype: bool
        """
        return self._with_unpublish

    @with_unpublish.setter
    def with_unpublish(self, with_unpublish):
        """Sets the with_unpublish of this PublishCatalogToMarketplaceRequest.

        In full publication strategy kind, for some marktetplace, you can ask to unpublish or not your existing feeds on the markeptlace absent from your exported catalog.

        :param with_unpublish: The with_unpublish of this PublishCatalogToMarketplaceRequest.
        :type with_unpublish: bool
        """
        if with_unpublish is None:
            raise ValueError("Invalid value for `with_unpublish`, must not be `None`")

        self._with_unpublish = with_unpublish
