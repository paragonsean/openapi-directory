# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_category_mapping_info_links import ChannelCatalogCategoryMappingInfoLinks
from openapi_server import util


class ChannelCatalogCategoryConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_category_path: List[str]=None, channel_category_path: List[str]=None, cost_value: float=None, links: ChannelCatalogCategoryMappingInfoLinks=None):
        """ChannelCatalogCategoryConfigurationInfo - a model defined in OpenAPI

        :param catalog_category_path: The catalog_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :param channel_category_path: The channel_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :param cost_value: The cost_value of this ChannelCatalogCategoryConfigurationInfo.
        :param links: The links of this ChannelCatalogCategoryConfigurationInfo.
        """
        self.openapi_types = {
            'catalog_category_path': List[str],
            'channel_category_path': List[str],
            'cost_value': float,
            'links': ChannelCatalogCategoryMappingInfoLinks
        }

        self.attribute_map = {
            'catalog_category_path': 'catalogCategoryPath',
            'channel_category_path': 'channelCategoryPath',
            'cost_value': 'costValue',
            'links': 'links'
        }

        self._catalog_category_path = catalog_category_path
        self._channel_category_path = channel_category_path
        self._cost_value = cost_value
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogCategoryConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogCategoryConfigurationInfo of this ChannelCatalogCategoryConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_category_path(self):
        """Gets the catalog_category_path of this ChannelCatalogCategoryConfigurationInfo.

        The catalog category path

        :return: The catalog_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :rtype: List[str]
        """
        return self._catalog_category_path

    @catalog_category_path.setter
    def catalog_category_path(self, catalog_category_path):
        """Sets the catalog_category_path of this ChannelCatalogCategoryConfigurationInfo.

        The catalog category path

        :param catalog_category_path: The catalog_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :type catalog_category_path: List[str]
        """
        if catalog_category_path is None:
            raise ValueError("Invalid value for `catalog_category_path`, must not be `None`")

        self._catalog_category_path = catalog_category_path

    @property
    def channel_category_path(self):
        """Gets the channel_category_path of this ChannelCatalogCategoryConfigurationInfo.

        The channel category path

        :return: The channel_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :rtype: List[str]
        """
        return self._channel_category_path

    @channel_category_path.setter
    def channel_category_path(self, channel_category_path):
        """Sets the channel_category_path of this ChannelCatalogCategoryConfigurationInfo.

        The channel category path

        :param channel_category_path: The channel_category_path of this ChannelCatalogCategoryConfigurationInfo.
        :type channel_category_path: List[str]
        """

        self._channel_category_path = channel_category_path

    @property
    def cost_value(self):
        """Gets the cost_value of this ChannelCatalogCategoryConfigurationInfo.

        In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.

        :return: The cost_value of this ChannelCatalogCategoryConfigurationInfo.
        :rtype: float
        """
        return self._cost_value

    @cost_value.setter
    def cost_value(self, cost_value):
        """Sets the cost_value of this ChannelCatalogCategoryConfigurationInfo.

        In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.

        :param cost_value: The cost_value of this ChannelCatalogCategoryConfigurationInfo.
        :type cost_value: float
        """

        self._cost_value = cost_value

    @property
    def links(self):
        """Gets the links of this ChannelCatalogCategoryConfigurationInfo.


        :return: The links of this ChannelCatalogCategoryConfigurationInfo.
        :rtype: ChannelCatalogCategoryMappingInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogCategoryConfigurationInfo.


        :param links: The links of this ChannelCatalogCategoryConfigurationInfo.
        :type links: ChannelCatalogCategoryMappingInfoLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
