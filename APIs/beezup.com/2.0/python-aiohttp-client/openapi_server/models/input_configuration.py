# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_file_configuration import InputFileConfiguration
from openapi_server import util


class InputConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[InputFileConfiguration]=None, transform_file_url: str=None):
        """InputConfiguration - a model defined in OpenAPI

        :param files: The files of this InputConfiguration.
        :param transform_file_url: The transform_file_url of this InputConfiguration.
        """
        self.openapi_types = {
            'files': List[InputFileConfiguration],
            'transform_file_url': str
        }

        self.attribute_map = {
            'files': 'files',
            'transform_file_url': 'transformFileUrl'
        }

        self._files = files
        self._transform_file_url = transform_file_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputConfiguration of this InputConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this InputConfiguration.

        The list of files to get and read

        :return: The files of this InputConfiguration.
        :rtype: List[InputFileConfiguration]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InputConfiguration.

        The list of files to get and read

        :param files: The files of this InputConfiguration.
        :type files: List[InputFileConfiguration]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")
        if files is not None and len(files) < 1:
            raise ValueError("Invalid value for `files`, number of items must be greater than or equal to `1`")

        self._files = files

    @property
    def transform_file_url(self):
        """Gets the transform_file_url of this InputConfiguration.

        Can be null. Use to transform multiple files with an XSLT file.

        :return: The transform_file_url of this InputConfiguration.
        :rtype: str
        """
        return self._transform_file_url

    @transform_file_url.setter
    def transform_file_url(self, transform_file_url):
        """Sets the transform_file_url of this InputConfiguration.

        Can be null. Use to transform multiple files with an XSLT file.

        :param transform_file_url: The transform_file_url of this InputConfiguration.
        :type transform_file_url: str
        """

        self._transform_file_url = transform_file_url
