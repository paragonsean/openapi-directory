# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_catalog_category_filter import BeezUPCommonCatalogCategoryFilter
from openapi_server.models.beez_up_common_channel_category_filter import BeezUPCommonChannelCategoryFilter
from openapi_server.models.channel_catalog_product_filters import ChannelCatalogProductFilters
from openapi_server.models.product_set_visibility_criteria import ProductSetVisibilityCriteria
from openapi_server import util


class GetChannelCatalogProductInfoListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_category_filter: BeezUPCommonCatalogCategoryFilter=None, channel_category_filter: BeezUPCommonChannelCategoryFilter=None, criteria: ProductSetVisibilityCriteria=None, overridden: bool=None, page_number: int=None, page_size: int=None, product_filters: ChannelCatalogProductFilters=None):
        """GetChannelCatalogProductInfoListRequest - a model defined in OpenAPI

        :param catalog_category_filter: The catalog_category_filter of this GetChannelCatalogProductInfoListRequest.
        :param channel_category_filter: The channel_category_filter of this GetChannelCatalogProductInfoListRequest.
        :param criteria: The criteria of this GetChannelCatalogProductInfoListRequest.
        :param overridden: The overridden of this GetChannelCatalogProductInfoListRequest.
        :param page_number: The page_number of this GetChannelCatalogProductInfoListRequest.
        :param page_size: The page_size of this GetChannelCatalogProductInfoListRequest.
        :param product_filters: The product_filters of this GetChannelCatalogProductInfoListRequest.
        """
        self.openapi_types = {
            'catalog_category_filter': BeezUPCommonCatalogCategoryFilter,
            'channel_category_filter': BeezUPCommonChannelCategoryFilter,
            'criteria': ProductSetVisibilityCriteria,
            'overridden': bool,
            'page_number': int,
            'page_size': int,
            'product_filters': ChannelCatalogProductFilters
        }

        self.attribute_map = {
            'catalog_category_filter': 'catalogCategoryFilter',
            'channel_category_filter': 'channelCategoryFilter',
            'criteria': 'criteria',
            'overridden': 'overridden',
            'page_number': 'pageNumber',
            'page_size': 'pageSize',
            'product_filters': 'productFilters'
        }

        self._catalog_category_filter = catalog_category_filter
        self._channel_category_filter = channel_category_filter
        self._criteria = criteria
        self._overridden = overridden
        self._page_number = page_number
        self._page_size = page_size
        self._product_filters = product_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetChannelCatalogProductInfoListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getChannelCatalogProductInfoListRequest of this GetChannelCatalogProductInfoListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_category_filter(self):
        """Gets the catalog_category_filter of this GetChannelCatalogProductInfoListRequest.


        :return: The catalog_category_filter of this GetChannelCatalogProductInfoListRequest.
        :rtype: BeezUPCommonCatalogCategoryFilter
        """
        return self._catalog_category_filter

    @catalog_category_filter.setter
    def catalog_category_filter(self, catalog_category_filter):
        """Sets the catalog_category_filter of this GetChannelCatalogProductInfoListRequest.


        :param catalog_category_filter: The catalog_category_filter of this GetChannelCatalogProductInfoListRequest.
        :type catalog_category_filter: BeezUPCommonCatalogCategoryFilter
        """

        self._catalog_category_filter = catalog_category_filter

    @property
    def channel_category_filter(self):
        """Gets the channel_category_filter of this GetChannelCatalogProductInfoListRequest.


        :return: The channel_category_filter of this GetChannelCatalogProductInfoListRequest.
        :rtype: BeezUPCommonChannelCategoryFilter
        """
        return self._channel_category_filter

    @channel_category_filter.setter
    def channel_category_filter(self, channel_category_filter):
        """Sets the channel_category_filter of this GetChannelCatalogProductInfoListRequest.


        :param channel_category_filter: The channel_category_filter of this GetChannelCatalogProductInfoListRequest.
        :type channel_category_filter: BeezUPCommonChannelCategoryFilter
        """

        self._channel_category_filter = channel_category_filter

    @property
    def criteria(self):
        """Gets the criteria of this GetChannelCatalogProductInfoListRequest.


        :return: The criteria of this GetChannelCatalogProductInfoListRequest.
        :rtype: ProductSetVisibilityCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this GetChannelCatalogProductInfoListRequest.


        :param criteria: The criteria of this GetChannelCatalogProductInfoListRequest.
        :type criteria: ProductSetVisibilityCriteria
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")

        self._criteria = criteria

    @property
    def overridden(self):
        """Gets the overridden of this GetChannelCatalogProductInfoListRequest.

        Search overridden products. If null the filter will not be taken in account.

        :return: The overridden of this GetChannelCatalogProductInfoListRequest.
        :rtype: bool
        """
        return self._overridden

    @overridden.setter
    def overridden(self, overridden):
        """Sets the overridden of this GetChannelCatalogProductInfoListRequest.

        Search overridden products. If null the filter will not be taken in account.

        :param overridden: The overridden of this GetChannelCatalogProductInfoListRequest.
        :type overridden: bool
        """

        self._overridden = overridden

    @property
    def page_number(self):
        """Gets the page_number of this GetChannelCatalogProductInfoListRequest.


        :return: The page_number of this GetChannelCatalogProductInfoListRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this GetChannelCatalogProductInfoListRequest.


        :param page_number: The page_number of this GetChannelCatalogProductInfoListRequest.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this GetChannelCatalogProductInfoListRequest.


        :return: The page_size of this GetChannelCatalogProductInfoListRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GetChannelCatalogProductInfoListRequest.


        :param page_size: The page_size of this GetChannelCatalogProductInfoListRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size is not None and page_size < 100:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `100`")

        self._page_size = page_size

    @property
    def product_filters(self):
        """Gets the product_filters of this GetChannelCatalogProductInfoListRequest.


        :return: The product_filters of this GetChannelCatalogProductInfoListRequest.
        :rtype: ChannelCatalogProductFilters
        """
        return self._product_filters

    @product_filters.setter
    def product_filters(self, product_filters):
        """Sets the product_filters of this GetChannelCatalogProductInfoListRequest.


        :param product_filters: The product_filters of this GetChannelCatalogProductInfoListRequest.
        :type product_filters: ChannelCatalogProductFilters
        """

        self._product_filters = product_filters
