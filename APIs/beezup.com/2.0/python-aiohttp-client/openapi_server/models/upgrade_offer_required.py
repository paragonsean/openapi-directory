# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpgradeOfferRequired(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id: int=None):
        """UpgradeOfferRequired - a model defined in OpenAPI

        :param offer_id: The offer_id of this UpgradeOfferRequired.
        """
        self.openapi_types = {
            'offer_id': int
        }

        self.attribute_map = {
            'offer_id': 'offerId'
        }

        self._offer_id = offer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeOfferRequired':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upgradeOfferRequired of this UpgradeOfferRequired.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self):
        """Gets the offer_id of this UpgradeOfferRequired.

        The offer identifier required

        :return: The offer_id of this UpgradeOfferRequired.
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this UpgradeOfferRequired.

        The offer identifier required

        :param offer_id: The offer_id of this UpgradeOfferRequired.
        :type offer_id: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")

        self._offer_id = offer_id
