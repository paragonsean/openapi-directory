# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeExpressionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_expression: str=None, product_values: Dict[str, str]=None):
        """ComputeExpressionRequest - a model defined in OpenAPI

        :param encrypted_expression: The encrypted_expression of this ComputeExpressionRequest.
        :param product_values: The product_values of this ComputeExpressionRequest.
        """
        self.openapi_types = {
            'encrypted_expression': str,
            'product_values': Dict[str, str]
        }

        self.attribute_map = {
            'encrypted_expression': 'encryptedExpression',
            'product_values': 'productValues'
        }

        self._encrypted_expression = encrypted_expression
        self._product_values = product_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeExpressionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The computeExpressionRequest of this ComputeExpressionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_expression(self):
        """Gets the encrypted_expression of this ComputeExpressionRequest.

        The encrypted excel expression of the column

        :return: The encrypted_expression of this ComputeExpressionRequest.
        :rtype: str
        """
        return self._encrypted_expression

    @encrypted_expression.setter
    def encrypted_expression(self, encrypted_expression):
        """Sets the encrypted_expression of this ComputeExpressionRequest.

        The encrypted excel expression of the column

        :param encrypted_expression: The encrypted_expression of this ComputeExpressionRequest.
        :type encrypted_expression: str
        """
        if encrypted_expression is None:
            raise ValueError("Invalid value for `encrypted_expression`, must not be `None`")

        self._encrypted_expression = encrypted_expression

    @property
    def product_values(self):
        """Gets the product_values of this ComputeExpressionRequest.

        The key is the column identifier

        :return: The product_values of this ComputeExpressionRequest.
        :rtype: Dict[str, str]
        """
        return self._product_values

    @product_values.setter
    def product_values(self, product_values):
        """Sets the product_values of this ComputeExpressionRequest.

        The key is the column identifier

        :param product_values: The product_values of this ComputeExpressionRequest.
        :type product_values: Dict[str, str]
        """
        if product_values is None:
            raise ValueError("Invalid value for `product_values`, must not be `None`")

        self._product_values = product_values
