# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_configuration import ColumnConfiguration
from openapi_server.models.custom_column_links import CustomColumnLinks
from openapi_server import util


class CustomColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_column_dependencies: List[str]=None, configuration: ColumnConfiguration=None, id: str=None, links: CustomColumnLinks=None, user_colum_name: str=None):
        """CustomColumn - a model defined in OpenAPI

        :param catalog_column_dependencies: The catalog_column_dependencies of this CustomColumn.
        :param configuration: The configuration of this CustomColumn.
        :param id: The id of this CustomColumn.
        :param links: The links of this CustomColumn.
        :param user_colum_name: The user_colum_name of this CustomColumn.
        """
        self.openapi_types = {
            'catalog_column_dependencies': List[str],
            'configuration': ColumnConfiguration,
            'id': str,
            'links': CustomColumnLinks,
            'user_colum_name': str
        }

        self.attribute_map = {
            'catalog_column_dependencies': 'catalogColumnDependencies',
            'configuration': 'configuration',
            'id': 'id',
            'links': 'links',
            'user_colum_name': 'userColumName'
        }

        self._catalog_column_dependencies = catalog_column_dependencies
        self._configuration = configuration
        self._id = id
        self._links = links
        self._user_colum_name = user_colum_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customColumn of this CustomColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_column_dependencies(self):
        """Gets the catalog_column_dependencies of this CustomColumn.


        :return: The catalog_column_dependencies of this CustomColumn.
        :rtype: List[str]
        """
        return self._catalog_column_dependencies

    @catalog_column_dependencies.setter
    def catalog_column_dependencies(self, catalog_column_dependencies):
        """Sets the catalog_column_dependencies of this CustomColumn.


        :param catalog_column_dependencies: The catalog_column_dependencies of this CustomColumn.
        :type catalog_column_dependencies: List[str]
        """

        self._catalog_column_dependencies = catalog_column_dependencies

    @property
    def configuration(self):
        """Gets the configuration of this CustomColumn.


        :return: The configuration of this CustomColumn.
        :rtype: ColumnConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CustomColumn.


        :param configuration: The configuration of this CustomColumn.
        :type configuration: ColumnConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def id(self):
        """Gets the id of this CustomColumn.

        The catalog column identifier

        :return: The id of this CustomColumn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomColumn.

        The catalog column identifier

        :param id: The id of this CustomColumn.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def links(self):
        """Gets the links of this CustomColumn.


        :return: The links of this CustomColumn.
        :rtype: CustomColumnLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomColumn.


        :param links: The links of this CustomColumn.
        :type links: CustomColumnLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def user_colum_name(self):
        """Gets the user_colum_name of this CustomColumn.

        Column named by the user

        :return: The user_colum_name of this CustomColumn.
        :rtype: str
        """
        return self._user_colum_name

    @user_colum_name.setter
    def user_colum_name(self, user_colum_name):
        """Sets the user_colum_name of this CustomColumn.

        Column named by the user

        :param user_colum_name: The user_colum_name of this CustomColumn.
        :type user_colum_name: str
        """
        if user_colum_name is None:
            raise ValueError("Invalid value for `user_colum_name`, must not be `None`")

        self._user_colum_name = user_colum_name
