# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_search_type import DateSearchType
from openapi_server import util


class OrderListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[int]=None, beez_up_order_statuses: List[str]=None, begin_period_utc_date: datetime=None, date_search_type: DateSearchType=DateSearchType.MODIFICATION, end_period_utc_date: datetime=None, invoice_availability_type: str=None, marketplace_business_codes: List[str]=None, marketplace_order_ids: List[str]=None, marketplace_technical_codes: List[str]=None, order_merchant_info_synchronization_status: str=None, order_buyer_name: str=None, order_merchant_order_ids: List[str]=None, store_ids: List[str]=None, page_number: int=None, page_size: int=None):
        """OrderListRequest - a model defined in OpenAPI

        :param account_ids: The account_ids of this OrderListRequest.
        :param beez_up_order_statuses: The beez_up_order_statuses of this OrderListRequest.
        :param begin_period_utc_date: The begin_period_utc_date of this OrderListRequest.
        :param date_search_type: The date_search_type of this OrderListRequest.
        :param end_period_utc_date: The end_period_utc_date of this OrderListRequest.
        :param invoice_availability_type: The invoice_availability_type of this OrderListRequest.
        :param marketplace_business_codes: The marketplace_business_codes of this OrderListRequest.
        :param marketplace_order_ids: The marketplace_order_ids of this OrderListRequest.
        :param marketplace_technical_codes: The marketplace_technical_codes of this OrderListRequest.
        :param order_merchant_info_synchronization_status: The order_merchant_info_synchronization_status of this OrderListRequest.
        :param order_buyer_name: The order_buyer_name of this OrderListRequest.
        :param order_merchant_order_ids: The order_merchant_order_ids of this OrderListRequest.
        :param store_ids: The store_ids of this OrderListRequest.
        :param page_number: The page_number of this OrderListRequest.
        :param page_size: The page_size of this OrderListRequest.
        """
        self.openapi_types = {
            'account_ids': List[int],
            'beez_up_order_statuses': List[str],
            'begin_period_utc_date': datetime,
            'date_search_type': DateSearchType,
            'end_period_utc_date': datetime,
            'invoice_availability_type': str,
            'marketplace_business_codes': List[str],
            'marketplace_order_ids': List[str],
            'marketplace_technical_codes': List[str],
            'order_merchant_info_synchronization_status': str,
            'order_buyer_name': str,
            'order_merchant_order_ids': List[str],
            'store_ids': List[str],
            'page_number': int,
            'page_size': int
        }

        self.attribute_map = {
            'account_ids': 'accountIds',
            'beez_up_order_statuses': 'beezUPOrderStatuses',
            'begin_period_utc_date': 'beginPeriodUtcDate',
            'date_search_type': 'dateSearchType',
            'end_period_utc_date': 'endPeriodUtcDate',
            'invoice_availability_type': 'invoiceAvailabilityType',
            'marketplace_business_codes': 'marketplaceBusinessCodes',
            'marketplace_order_ids': 'marketplaceOrderIds',
            'marketplace_technical_codes': 'marketplaceTechnicalCodes',
            'order_merchant_info_synchronization_status': 'orderMerchantInfoSynchronizationStatus',
            'order_buyer_name': 'order_Buyer_Name',
            'order_merchant_order_ids': 'order_MerchantOrderIds',
            'store_ids': 'storeIds',
            'page_number': 'pageNumber',
            'page_size': 'pageSize'
        }

        self._account_ids = account_ids
        self._beez_up_order_statuses = beez_up_order_statuses
        self._begin_period_utc_date = begin_period_utc_date
        self._date_search_type = date_search_type
        self._end_period_utc_date = end_period_utc_date
        self._invoice_availability_type = invoice_availability_type
        self._marketplace_business_codes = marketplace_business_codes
        self._marketplace_order_ids = marketplace_order_ids
        self._marketplace_technical_codes = marketplace_technical_codes
        self._order_merchant_info_synchronization_status = order_merchant_info_synchronization_status
        self._order_buyer_name = order_buyer_name
        self._order_merchant_order_ids = order_merchant_order_ids
        self._store_ids = store_ids
        self._page_number = page_number
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderListRequest of this OrderListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this OrderListRequest.

        Account Id list

        :return: The account_ids of this OrderListRequest.
        :rtype: List[int]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this OrderListRequest.

        Account Id list

        :param account_ids: The account_ids of this OrderListRequest.
        :type account_ids: List[int]
        """

        self._account_ids = account_ids

    @property
    def beez_up_order_statuses(self):
        """Gets the beez_up_order_statuses of this OrderListRequest.


        :return: The beez_up_order_statuses of this OrderListRequest.
        :rtype: List[str]
        """
        return self._beez_up_order_statuses

    @beez_up_order_statuses.setter
    def beez_up_order_statuses(self, beez_up_order_statuses):
        """Sets the beez_up_order_statuses of this OrderListRequest.


        :param beez_up_order_statuses: The beez_up_order_statuses of this OrderListRequest.
        :type beez_up_order_statuses: List[str]
        """

        self._beez_up_order_statuses = beez_up_order_statuses

    @property
    def begin_period_utc_date(self):
        """Gets the begin_period_utc_date of this OrderListRequest.

        The begin period you want to make the search. \\ The period MUST not be greater than 62 days. The begin period MUST be lower than the end period. 

        :return: The begin_period_utc_date of this OrderListRequest.
        :rtype: datetime
        """
        return self._begin_period_utc_date

    @begin_period_utc_date.setter
    def begin_period_utc_date(self, begin_period_utc_date):
        """Sets the begin_period_utc_date of this OrderListRequest.

        The begin period you want to make the search. \\ The period MUST not be greater than 62 days. The begin period MUST be lower than the end period. 

        :param begin_period_utc_date: The begin_period_utc_date of this OrderListRequest.
        :type begin_period_utc_date: datetime
        """
        if begin_period_utc_date is None:
            raise ValueError("Invalid value for `begin_period_utc_date`, must not be `None`")

        self._begin_period_utc_date = begin_period_utc_date

    @property
    def date_search_type(self):
        """Gets the date_search_type of this OrderListRequest.


        :return: The date_search_type of this OrderListRequest.
        :rtype: DateSearchType
        """
        return self._date_search_type

    @date_search_type.setter
    def date_search_type(self, date_search_type):
        """Sets the date_search_type of this OrderListRequest.


        :param date_search_type: The date_search_type of this OrderListRequest.
        :type date_search_type: DateSearchType
        """

        self._date_search_type = date_search_type

    @property
    def end_period_utc_date(self):
        """Gets the end_period_utc_date of this OrderListRequest.

        The end period of you search. \\ The period MUST not be greater than 62 days. \\ The end period MUST be greater than the begin period. The end period MUST be lower to the current date. 

        :return: The end_period_utc_date of this OrderListRequest.
        :rtype: datetime
        """
        return self._end_period_utc_date

    @end_period_utc_date.setter
    def end_period_utc_date(self, end_period_utc_date):
        """Sets the end_period_utc_date of this OrderListRequest.

        The end period of you search. \\ The period MUST not be greater than 62 days. \\ The end period MUST be greater than the begin period. The end period MUST be lower to the current date. 

        :param end_period_utc_date: The end_period_utc_date of this OrderListRequest.
        :type end_period_utc_date: datetime
        """
        if end_period_utc_date is None:
            raise ValueError("Invalid value for `end_period_utc_date`, must not be `None`")

        self._end_period_utc_date = end_period_utc_date

    @property
    def invoice_availability_type(self):
        """Gets the invoice_availability_type of this OrderListRequest.

        Indicates on which invoice availability to filter

        :return: The invoice_availability_type of this OrderListRequest.
        :rtype: str
        """
        return self._invoice_availability_type

    @invoice_availability_type.setter
    def invoice_availability_type(self, invoice_availability_type):
        """Sets the invoice_availability_type of this OrderListRequest.

        Indicates on which invoice availability to filter

        :param invoice_availability_type: The invoice_availability_type of this OrderListRequest.
        :type invoice_availability_type: str
        """

        self._invoice_availability_type = invoice_availability_type

    @property
    def marketplace_business_codes(self):
        """Gets the marketplace_business_codes of this OrderListRequest.


        :return: The marketplace_business_codes of this OrderListRequest.
        :rtype: List[str]
        """
        return self._marketplace_business_codes

    @marketplace_business_codes.setter
    def marketplace_business_codes(self, marketplace_business_codes):
        """Sets the marketplace_business_codes of this OrderListRequest.


        :param marketplace_business_codes: The marketplace_business_codes of this OrderListRequest.
        :type marketplace_business_codes: List[str]
        """

        self._marketplace_business_codes = marketplace_business_codes

    @property
    def marketplace_order_ids(self):
        """Gets the marketplace_order_ids of this OrderListRequest.


        :return: The marketplace_order_ids of this OrderListRequest.
        :rtype: List[str]
        """
        return self._marketplace_order_ids

    @marketplace_order_ids.setter
    def marketplace_order_ids(self, marketplace_order_ids):
        """Sets the marketplace_order_ids of this OrderListRequest.


        :param marketplace_order_ids: The marketplace_order_ids of this OrderListRequest.
        :type marketplace_order_ids: List[str]
        """

        self._marketplace_order_ids = marketplace_order_ids

    @property
    def marketplace_technical_codes(self):
        """Gets the marketplace_technical_codes of this OrderListRequest.


        :return: The marketplace_technical_codes of this OrderListRequest.
        :rtype: List[str]
        """
        return self._marketplace_technical_codes

    @marketplace_technical_codes.setter
    def marketplace_technical_codes(self, marketplace_technical_codes):
        """Sets the marketplace_technical_codes of this OrderListRequest.


        :param marketplace_technical_codes: The marketplace_technical_codes of this OrderListRequest.
        :type marketplace_technical_codes: List[str]
        """

        self._marketplace_technical_codes = marketplace_technical_codes

    @property
    def order_merchant_info_synchronization_status(self):
        """Gets the order_merchant_info_synchronization_status of this OrderListRequest.

        Indicates on which order merchant info synchronization status to filter

        :return: The order_merchant_info_synchronization_status of this OrderListRequest.
        :rtype: str
        """
        return self._order_merchant_info_synchronization_status

    @order_merchant_info_synchronization_status.setter
    def order_merchant_info_synchronization_status(self, order_merchant_info_synchronization_status):
        """Sets the order_merchant_info_synchronization_status of this OrderListRequest.

        Indicates on which order merchant info synchronization status to filter

        :param order_merchant_info_synchronization_status: The order_merchant_info_synchronization_status of this OrderListRequest.
        :type order_merchant_info_synchronization_status: str
        """

        self._order_merchant_info_synchronization_status = order_merchant_info_synchronization_status

    @property
    def order_buyer_name(self):
        """Gets the order_buyer_name of this OrderListRequest.

        Buyer full name

        :return: The order_buyer_name of this OrderListRequest.
        :rtype: str
        """
        return self._order_buyer_name

    @order_buyer_name.setter
    def order_buyer_name(self, order_buyer_name):
        """Sets the order_buyer_name of this OrderListRequest.

        Buyer full name

        :param order_buyer_name: The order_buyer_name of this OrderListRequest.
        :type order_buyer_name: str
        """

        self._order_buyer_name = order_buyer_name

    @property
    def order_merchant_order_ids(self):
        """Gets the order_merchant_order_ids of this OrderListRequest.

        Merchant order id list

        :return: The order_merchant_order_ids of this OrderListRequest.
        :rtype: List[str]
        """
        return self._order_merchant_order_ids

    @order_merchant_order_ids.setter
    def order_merchant_order_ids(self, order_merchant_order_ids):
        """Sets the order_merchant_order_ids of this OrderListRequest.

        Merchant order id list

        :param order_merchant_order_ids: The order_merchant_order_ids of this OrderListRequest.
        :type order_merchant_order_ids: List[str]
        """

        self._order_merchant_order_ids = order_merchant_order_ids

    @property
    def store_ids(self):
        """Gets the store_ids of this OrderListRequest.

        Store Id list

        :return: The store_ids of this OrderListRequest.
        :rtype: List[str]
        """
        return self._store_ids

    @store_ids.setter
    def store_ids(self, store_ids):
        """Sets the store_ids of this OrderListRequest.

        Store Id list

        :param store_ids: The store_ids of this OrderListRequest.
        :type store_ids: List[str]
        """

        self._store_ids = store_ids

    @property
    def page_number(self):
        """Gets the page_number of this OrderListRequest.

        Indicates the page number

        :return: The page_number of this OrderListRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this OrderListRequest.

        Indicates the page number

        :param page_number: The page_number of this OrderListRequest.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this OrderListRequest.

        Indicate the order count per page

        :return: The page_size of this OrderListRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this OrderListRequest.

        Indicate the order count per page

        :param page_size: The page_size of this OrderListRequest.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 25:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `25`")

        self._page_size = page_size
