# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_by_day_all_channels import ReportByDayAllChannels
from openapi_server.models.report_by_day_by_channel import ReportByDayByChannel
from openapi_server import util


class ReportByDay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_channels: ReportByDayAllChannels=None, by_channels: List[ReportByDayByChannel]=None, day: date=None):
        """ReportByDay - a model defined in OpenAPI

        :param all_channels: The all_channels of this ReportByDay.
        :param by_channels: The by_channels of this ReportByDay.
        :param day: The day of this ReportByDay.
        """
        self.openapi_types = {
            'all_channels': ReportByDayAllChannels,
            'by_channels': List[ReportByDayByChannel],
            'day': date
        }

        self.attribute_map = {
            'all_channels': 'allChannels',
            'by_channels': 'byChannels',
            'day': 'day'
        }

        self._all_channels = all_channels
        self._by_channels = by_channels
        self._day = day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByDay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByDay of this ReportByDay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_channels(self):
        """Gets the all_channels of this ReportByDay.


        :return: The all_channels of this ReportByDay.
        :rtype: ReportByDayAllChannels
        """
        return self._all_channels

    @all_channels.setter
    def all_channels(self, all_channels):
        """Sets the all_channels of this ReportByDay.


        :param all_channels: The all_channels of this ReportByDay.
        :type all_channels: ReportByDayAllChannels
        """
        if all_channels is None:
            raise ValueError("Invalid value for `all_channels`, must not be `None`")

        self._all_channels = all_channels

    @property
    def by_channels(self):
        """Gets the by_channels of this ReportByDay.


        :return: The by_channels of this ReportByDay.
        :rtype: List[ReportByDayByChannel]
        """
        return self._by_channels

    @by_channels.setter
    def by_channels(self, by_channels):
        """Sets the by_channels of this ReportByDay.


        :param by_channels: The by_channels of this ReportByDay.
        :type by_channels: List[ReportByDayByChannel]
        """
        if by_channels is None:
            raise ValueError("Invalid value for `by_channels`, must not be `None`")

        self._by_channels = by_channels

    @property
    def day(self):
        """Gets the day of this ReportByDay.


        :return: The day of this ReportByDay.
        :rtype: date
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this ReportByDay.


        :param day: The day of this ReportByDay.
        :type day: date
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day
