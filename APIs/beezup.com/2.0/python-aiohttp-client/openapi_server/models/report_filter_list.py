# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_filter_header import ReportFilterHeader
from openapi_server.models.report_filters_links import ReportFiltersLinks
from openapi_server import util


class ReportFilterList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ReportFiltersLinks=None, report_filters: List[ReportFilterHeader]=None):
        """ReportFilterList - a model defined in OpenAPI

        :param links: The links of this ReportFilterList.
        :param report_filters: The report_filters of this ReportFilterList.
        """
        self.openapi_types = {
            'links': ReportFiltersLinks,
            'report_filters': List[ReportFilterHeader]
        }

        self.attribute_map = {
            'links': 'links',
            'report_filters': 'reportFilters'
        }

        self._links = links
        self._report_filters = report_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFilterList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportFilterList of this ReportFilterList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ReportFilterList.


        :return: The links of this ReportFilterList.
        :rtype: ReportFiltersLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportFilterList.


        :param links: The links of this ReportFilterList.
        :type links: ReportFiltersLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def report_filters(self):
        """Gets the report_filters of this ReportFilterList.


        :return: The report_filters of this ReportFilterList.
        :rtype: List[ReportFilterHeader]
        """
        return self._report_filters

    @report_filters.setter
    def report_filters(self, report_filters):
        """Sets the report_filters of this ReportFilterList.


        :param report_filters: The report_filters of this ReportFilterList.
        :type report_filters: List[ReportFilterHeader]
        """
        if report_filters is None:
            raise ValueError("Invalid value for `report_filters`, must not be `None`")

        self._report_filters = report_filters
