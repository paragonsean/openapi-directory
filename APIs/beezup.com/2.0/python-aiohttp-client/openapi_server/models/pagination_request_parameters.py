# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationRequestParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_number: int=None, page_size: int=None):
        """PaginationRequestParameters - a model defined in OpenAPI

        :param page_number: The page_number of this PaginationRequestParameters.
        :param page_size: The page_size of this PaginationRequestParameters.
        """
        self.openapi_types = {
            'page_number': int,
            'page_size': int
        }

        self.attribute_map = {
            'page_number': 'pageNumber',
            'page_size': 'pageSize'
        }

        self._page_number = page_number
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationRequestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paginationRequestParameters of this PaginationRequestParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_number(self):
        """Gets the page_number of this PaginationRequestParameters.

        Indicates the page number

        :return: The page_number of this PaginationRequestParameters.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this PaginationRequestParameters.

        Indicates the page number

        :param page_number: The page_number of this PaginationRequestParameters.
        :type page_number: int
        """
        if page_number is not None and page_number < 1:
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this PaginationRequestParameters.

        Indicate the item count per page

        :return: The page_size of this PaginationRequestParameters.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PaginationRequestParameters.

        Indicate the item count per page

        :param page_size: The page_size of this PaginationRequestParameters.
        :type page_size: int
        """
        if page_size is not None and page_size > 100:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `100`")
        if page_size is not None and page_size < 25:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `25`")

        self._page_size = page_size
