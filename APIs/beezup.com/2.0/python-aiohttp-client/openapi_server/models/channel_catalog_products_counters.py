# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelCatalogProductsCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_product_count_excluding_uncategorized: int=None, disabled_product_count_including_uncategorized: int=None, excluded_product_count_excluding_uncategorized_and_disabled: int=None, excluded_product_count_including_uncategorized_and_disabled: int=None, existing_product_count: int=None, uncategorized_product_count: int=None):
        """ChannelCatalogProductsCounters - a model defined in OpenAPI

        :param disabled_product_count_excluding_uncategorized: The disabled_product_count_excluding_uncategorized of this ChannelCatalogProductsCounters.
        :param disabled_product_count_including_uncategorized: The disabled_product_count_including_uncategorized of this ChannelCatalogProductsCounters.
        :param excluded_product_count_excluding_uncategorized_and_disabled: The excluded_product_count_excluding_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :param excluded_product_count_including_uncategorized_and_disabled: The excluded_product_count_including_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :param existing_product_count: The existing_product_count of this ChannelCatalogProductsCounters.
        :param uncategorized_product_count: The uncategorized_product_count of this ChannelCatalogProductsCounters.
        """
        self.openapi_types = {
            'disabled_product_count_excluding_uncategorized': int,
            'disabled_product_count_including_uncategorized': int,
            'excluded_product_count_excluding_uncategorized_and_disabled': int,
            'excluded_product_count_including_uncategorized_and_disabled': int,
            'existing_product_count': int,
            'uncategorized_product_count': int
        }

        self.attribute_map = {
            'disabled_product_count_excluding_uncategorized': 'disabledProductCountExcludingUncategorized',
            'disabled_product_count_including_uncategorized': 'disabledProductCountIncludingUncategorized',
            'excluded_product_count_excluding_uncategorized_and_disabled': 'excludedProductCountExcludingUncategorizedAndDisabled',
            'excluded_product_count_including_uncategorized_and_disabled': 'excludedProductCountIncludingUncategorizedAndDisabled',
            'existing_product_count': 'existingProductCount',
            'uncategorized_product_count': 'uncategorizedProductCount'
        }

        self._disabled_product_count_excluding_uncategorized = disabled_product_count_excluding_uncategorized
        self._disabled_product_count_including_uncategorized = disabled_product_count_including_uncategorized
        self._excluded_product_count_excluding_uncategorized_and_disabled = excluded_product_count_excluding_uncategorized_and_disabled
        self._excluded_product_count_including_uncategorized_and_disabled = excluded_product_count_including_uncategorized_and_disabled
        self._existing_product_count = existing_product_count
        self._uncategorized_product_count = uncategorized_product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductsCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductsCounters of this ChannelCatalogProductsCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_product_count_excluding_uncategorized(self):
        """Gets the disabled_product_count_excluding_uncategorized of this ChannelCatalogProductsCounters.

        Disabled product count EXCLUDING uncategorized products on existing products.

        :return: The disabled_product_count_excluding_uncategorized of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._disabled_product_count_excluding_uncategorized

    @disabled_product_count_excluding_uncategorized.setter
    def disabled_product_count_excluding_uncategorized(self, disabled_product_count_excluding_uncategorized):
        """Sets the disabled_product_count_excluding_uncategorized of this ChannelCatalogProductsCounters.

        Disabled product count EXCLUDING uncategorized products on existing products.

        :param disabled_product_count_excluding_uncategorized: The disabled_product_count_excluding_uncategorized of this ChannelCatalogProductsCounters.
        :type disabled_product_count_excluding_uncategorized: int
        """

        self._disabled_product_count_excluding_uncategorized = disabled_product_count_excluding_uncategorized

    @property
    def disabled_product_count_including_uncategorized(self):
        """Gets the disabled_product_count_including_uncategorized of this ChannelCatalogProductsCounters.

        Disabled product count INCLUDING uncategorized products on existing products.

        :return: The disabled_product_count_including_uncategorized of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._disabled_product_count_including_uncategorized

    @disabled_product_count_including_uncategorized.setter
    def disabled_product_count_including_uncategorized(self, disabled_product_count_including_uncategorized):
        """Sets the disabled_product_count_including_uncategorized of this ChannelCatalogProductsCounters.

        Disabled product count INCLUDING uncategorized products on existing products.

        :param disabled_product_count_including_uncategorized: The disabled_product_count_including_uncategorized of this ChannelCatalogProductsCounters.
        :type disabled_product_count_including_uncategorized: int
        """

        self._disabled_product_count_including_uncategorized = disabled_product_count_including_uncategorized

    @property
    def excluded_product_count_excluding_uncategorized_and_disabled(self):
        """Gets the excluded_product_count_excluding_uncategorized_and_disabled of this ChannelCatalogProductsCounters.

        Excluded product count EXCLUDING uncategorized products AND disabled products on existing products.

        :return: The excluded_product_count_excluding_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._excluded_product_count_excluding_uncategorized_and_disabled

    @excluded_product_count_excluding_uncategorized_and_disabled.setter
    def excluded_product_count_excluding_uncategorized_and_disabled(self, excluded_product_count_excluding_uncategorized_and_disabled):
        """Sets the excluded_product_count_excluding_uncategorized_and_disabled of this ChannelCatalogProductsCounters.

        Excluded product count EXCLUDING uncategorized products AND disabled products on existing products.

        :param excluded_product_count_excluding_uncategorized_and_disabled: The excluded_product_count_excluding_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :type excluded_product_count_excluding_uncategorized_and_disabled: int
        """

        self._excluded_product_count_excluding_uncategorized_and_disabled = excluded_product_count_excluding_uncategorized_and_disabled

    @property
    def excluded_product_count_including_uncategorized_and_disabled(self):
        """Gets the excluded_product_count_including_uncategorized_and_disabled of this ChannelCatalogProductsCounters.

        Excluded product count INCLUDING uncategorized products AND disabled products on existing products.

        :return: The excluded_product_count_including_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._excluded_product_count_including_uncategorized_and_disabled

    @excluded_product_count_including_uncategorized_and_disabled.setter
    def excluded_product_count_including_uncategorized_and_disabled(self, excluded_product_count_including_uncategorized_and_disabled):
        """Sets the excluded_product_count_including_uncategorized_and_disabled of this ChannelCatalogProductsCounters.

        Excluded product count INCLUDING uncategorized products AND disabled products on existing products.

        :param excluded_product_count_including_uncategorized_and_disabled: The excluded_product_count_including_uncategorized_and_disabled of this ChannelCatalogProductsCounters.
        :type excluded_product_count_including_uncategorized_and_disabled: int
        """

        self._excluded_product_count_including_uncategorized_and_disabled = excluded_product_count_including_uncategorized_and_disabled

    @property
    def existing_product_count(self):
        """Gets the existing_product_count of this ChannelCatalogProductsCounters.

        Imported product count currently in your catalog.

        :return: The existing_product_count of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._existing_product_count

    @existing_product_count.setter
    def existing_product_count(self, existing_product_count):
        """Sets the existing_product_count of this ChannelCatalogProductsCounters.

        Imported product count currently in your catalog.

        :param existing_product_count: The existing_product_count of this ChannelCatalogProductsCounters.
        :type existing_product_count: int
        """

        self._existing_product_count = existing_product_count

    @property
    def uncategorized_product_count(self):
        """Gets the uncategorized_product_count of this ChannelCatalogProductsCounters.

        Product count WITHOUT category mapped on existing products.

        :return: The uncategorized_product_count of this ChannelCatalogProductsCounters.
        :rtype: int
        """
        return self._uncategorized_product_count

    @uncategorized_product_count.setter
    def uncategorized_product_count(self, uncategorized_product_count):
        """Sets the uncategorized_product_count of this ChannelCatalogProductsCounters.

        Product count WITHOUT category mapped on existing products.

        :param uncategorized_product_count: The uncategorized_product_count of this ChannelCatalogProductsCounters.
        :type uncategorized_product_count: int
        """

        self._uncategorized_product_count = uncategorized_product_count
