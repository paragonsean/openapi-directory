# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_share_links import StoreShareLinks
from openapi_server.models.store_user_role import StoreUserRole
from openapi_server import util


class StoreShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: StoreShareLinks=None, user_id: str=None, user_role: StoreUserRole=None):
        """StoreShare - a model defined in OpenAPI

        :param links: The links of this StoreShare.
        :param user_id: The user_id of this StoreShare.
        :param user_role: The user_role of this StoreShare.
        """
        self.openapi_types = {
            'links': StoreShareLinks,
            'user_id': str,
            'user_role': StoreUserRole
        }

        self.attribute_map = {
            'links': 'links',
            'user_id': 'userId',
            'user_role': 'userRole'
        }

        self._links = links
        self._user_id = user_id
        self._user_role = user_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeShare of this StoreShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this StoreShare.


        :return: The links of this StoreShare.
        :rtype: StoreShareLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StoreShare.


        :param links: The links of this StoreShare.
        :type links: StoreShareLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def user_id(self):
        """Gets the user_id of this StoreShare.

        The user identifier

        :return: The user_id of this StoreShare.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this StoreShare.

        The user identifier

        :param user_id: The user_id of this StoreShare.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_role(self):
        """Gets the user_role of this StoreShare.


        :return: The user_role of this StoreShare.
        :rtype: StoreUserRole
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this StoreShare.


        :param user_role: The user_role of this StoreShare.
        :type user_role: StoreUserRole
        """
        if user_role is None:
            raise ValueError("Invalid value for `user_role`, must not be `None`")

        self._user_role = user_role
