# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_api_settings_status import BeezUPCommonApiSettingsStatus
from openapi_server.models.category_mapping_state import CategoryMappingState
from openapi_server.models.column_mapping_status import ColumnMappingStatus
from openapi_server import util


class ChannelCatalogState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_settings_status: BeezUPCommonApiSettingsStatus=None, category_mapping_state: CategoryMappingState=None, column_mapping_status: ColumnMappingStatus=None, exported_product_count: int=None):
        """ChannelCatalogState - a model defined in OpenAPI

        :param api_settings_status: The api_settings_status of this ChannelCatalogState.
        :param category_mapping_state: The category_mapping_state of this ChannelCatalogState.
        :param column_mapping_status: The column_mapping_status of this ChannelCatalogState.
        :param exported_product_count: The exported_product_count of this ChannelCatalogState.
        """
        self.openapi_types = {
            'api_settings_status': BeezUPCommonApiSettingsStatus,
            'category_mapping_state': CategoryMappingState,
            'column_mapping_status': ColumnMappingStatus,
            'exported_product_count': int
        }

        self.attribute_map = {
            'api_settings_status': 'apiSettingsStatus',
            'category_mapping_state': 'categoryMappingState',
            'column_mapping_status': 'columnMappingStatus',
            'exported_product_count': 'exportedProductCount'
        }

        self._api_settings_status = api_settings_status
        self._category_mapping_state = category_mapping_state
        self._column_mapping_status = column_mapping_status
        self._exported_product_count = exported_product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogState of this ChannelCatalogState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_settings_status(self):
        """Gets the api_settings_status of this ChannelCatalogState.


        :return: The api_settings_status of this ChannelCatalogState.
        :rtype: BeezUPCommonApiSettingsStatus
        """
        return self._api_settings_status

    @api_settings_status.setter
    def api_settings_status(self, api_settings_status):
        """Sets the api_settings_status of this ChannelCatalogState.


        :param api_settings_status: The api_settings_status of this ChannelCatalogState.
        :type api_settings_status: BeezUPCommonApiSettingsStatus
        """

        self._api_settings_status = api_settings_status

    @property
    def category_mapping_state(self):
        """Gets the category_mapping_state of this ChannelCatalogState.


        :return: The category_mapping_state of this ChannelCatalogState.
        :rtype: CategoryMappingState
        """
        return self._category_mapping_state

    @category_mapping_state.setter
    def category_mapping_state(self, category_mapping_state):
        """Sets the category_mapping_state of this ChannelCatalogState.


        :param category_mapping_state: The category_mapping_state of this ChannelCatalogState.
        :type category_mapping_state: CategoryMappingState
        """
        if category_mapping_state is None:
            raise ValueError("Invalid value for `category_mapping_state`, must not be `None`")

        self._category_mapping_state = category_mapping_state

    @property
    def column_mapping_status(self):
        """Gets the column_mapping_status of this ChannelCatalogState.


        :return: The column_mapping_status of this ChannelCatalogState.
        :rtype: ColumnMappingStatus
        """
        return self._column_mapping_status

    @column_mapping_status.setter
    def column_mapping_status(self, column_mapping_status):
        """Sets the column_mapping_status of this ChannelCatalogState.


        :param column_mapping_status: The column_mapping_status of this ChannelCatalogState.
        :type column_mapping_status: ColumnMappingStatus
        """
        if column_mapping_status is None:
            raise ValueError("Invalid value for `column_mapping_status`, must not be `None`")

        self._column_mapping_status = column_mapping_status

    @property
    def exported_product_count(self):
        """Gets the exported_product_count of this ChannelCatalogState.


        :return: The exported_product_count of this ChannelCatalogState.
        :rtype: int
        """
        return self._exported_product_count

    @exported_product_count.setter
    def exported_product_count(self, exported_product_count):
        """Sets the exported_product_count of this ChannelCatalogState.


        :param exported_product_count: The exported_product_count of this ChannelCatalogState.
        :type exported_product_count: int
        """
        if exported_product_count is None:
            raise ValueError("Invalid value for `exported_product_count`, must not be `None`")

        self._exported_product_count = exported_product_count
