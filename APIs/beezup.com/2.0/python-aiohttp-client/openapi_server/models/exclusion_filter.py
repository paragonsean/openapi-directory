# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExclusionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_column_id: str=None, enabled: bool=None, group_id: str=None, name: str=None, operator_name: str=None, position: int=None, position_in_group: int=None, value: str=None):
        """ExclusionFilter - a model defined in OpenAPI

        :param channel_column_id: The channel_column_id of this ExclusionFilter.
        :param enabled: The enabled of this ExclusionFilter.
        :param group_id: The group_id of this ExclusionFilter.
        :param name: The name of this ExclusionFilter.
        :param operator_name: The operator_name of this ExclusionFilter.
        :param position: The position of this ExclusionFilter.
        :param position_in_group: The position_in_group of this ExclusionFilter.
        :param value: The value of this ExclusionFilter.
        """
        self.openapi_types = {
            'channel_column_id': str,
            'enabled': bool,
            'group_id': str,
            'name': str,
            'operator_name': str,
            'position': int,
            'position_in_group': int,
            'value': str
        }

        self.attribute_map = {
            'channel_column_id': 'channelColumnId',
            'enabled': 'enabled',
            'group_id': 'groupId',
            'name': 'name',
            'operator_name': 'operatorName',
            'position': 'position',
            'position_in_group': 'positionInGroup',
            'value': 'value'
        }

        self._channel_column_id = channel_column_id
        self._enabled = enabled
        self._group_id = group_id
        self._name = name
        self._operator_name = operator_name
        self._position = position
        self._position_in_group = position_in_group
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exclusionFilter of this ExclusionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_column_id(self):
        """Gets the channel_column_id of this ExclusionFilter.

        The channel column identifier

        :return: The channel_column_id of this ExclusionFilter.
        :rtype: str
        """
        return self._channel_column_id

    @channel_column_id.setter
    def channel_column_id(self, channel_column_id):
        """Sets the channel_column_id of this ExclusionFilter.

        The channel column identifier

        :param channel_column_id: The channel_column_id of this ExclusionFilter.
        :type channel_column_id: str
        """
        if channel_column_id is None:
            raise ValueError("Invalid value for `channel_column_id`, must not be `None`")

        self._channel_column_id = channel_column_id

    @property
    def enabled(self):
        """Gets the enabled of this ExclusionFilter.

        indicates if the filter is currently enable.

        :return: The enabled of this ExclusionFilter.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ExclusionFilter.

        indicates if the filter is currently enable.

        :param enabled: The enabled of this ExclusionFilter.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def group_id(self):
        """Gets the group_id of this ExclusionFilter.

        Indicate the filter's group. All filters in the same group means an \"AND\" operation in the filter group

        :return: The group_id of this ExclusionFilter.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ExclusionFilter.

        Indicate the filter's group. All filters in the same group means an \"AND\" operation in the filter group

        :param group_id: The group_id of this ExclusionFilter.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this ExclusionFilter.

        The exclusion filter name

        :return: The name of this ExclusionFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExclusionFilter.

        The exclusion filter name

        :param name: The name of this ExclusionFilter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operator_name(self):
        """Gets the operator_name of this ExclusionFilter.

        The exclusion filter operator name

        :return: The operator_name of this ExclusionFilter.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this ExclusionFilter.

        The exclusion filter operator name

        :param operator_name: The operator_name of this ExclusionFilter.
        :type operator_name: str
        """
        if operator_name is None:
            raise ValueError("Invalid value for `operator_name`, must not be `None`")

        self._operator_name = operator_name

    @property
    def position(self):
        """Gets the position of this ExclusionFilter.

        The position of the exclusion filter

        :return: The position of this ExclusionFilter.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ExclusionFilter.

        The position of the exclusion filter

        :param position: The position of this ExclusionFilter.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 1:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")

        self._position = position

    @property
    def position_in_group(self):
        """Gets the position_in_group of this ExclusionFilter.

        Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.

        :return: The position_in_group of this ExclusionFilter.
        :rtype: int
        """
        return self._position_in_group

    @position_in_group.setter
    def position_in_group(self, position_in_group):
        """Sets the position_in_group of this ExclusionFilter.

        Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.

        :param position_in_group: The position_in_group of this ExclusionFilter.
        :type position_in_group: int
        """
        if position_in_group is None:
            raise ValueError("Invalid value for `position_in_group`, must not be `None`")
        if position_in_group is not None and position_in_group < 1:
            raise ValueError("Invalid value for `position_in_group`, must be a value greater than or equal to `1`")

        self._position_in_group = position_in_group

    @property
    def value(self):
        """Gets the value of this ExclusionFilter.

        The value indicate by the user when the filter operation requires it.

        :return: The value of this ExclusionFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ExclusionFilter.

        The value indicate by the user when the filter operation requires it.

        :param value: The value of this ExclusionFilter.
        :type value: str
        """
        if value is not None and len(value) > 4000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `4000`")

        self._value = value
