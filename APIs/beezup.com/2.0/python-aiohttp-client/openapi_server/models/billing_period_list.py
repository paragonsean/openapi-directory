# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_period import BillingPeriod
from openapi_server.models.billing_period_list_links import BillingPeriodListLinks
from openapi_server import util


class BillingPeriodList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_periods: List[BillingPeriod]=None, links: BillingPeriodListLinks=None):
        """BillingPeriodList - a model defined in OpenAPI

        :param billing_periods: The billing_periods of this BillingPeriodList.
        :param links: The links of this BillingPeriodList.
        """
        self.openapi_types = {
            'billing_periods': List[BillingPeriod],
            'links': BillingPeriodListLinks
        }

        self.attribute_map = {
            'billing_periods': 'billingPeriods',
            'links': 'links'
        }

        self._billing_periods = billing_periods
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingPeriodList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The billingPeriodList of this BillingPeriodList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_periods(self):
        """Gets the billing_periods of this BillingPeriodList.

        The billing period list

        :return: The billing_periods of this BillingPeriodList.
        :rtype: List[BillingPeriod]
        """
        return self._billing_periods

    @billing_periods.setter
    def billing_periods(self, billing_periods):
        """Sets the billing_periods of this BillingPeriodList.

        The billing period list

        :param billing_periods: The billing_periods of this BillingPeriodList.
        :type billing_periods: List[BillingPeriod]
        """
        if billing_periods is None:
            raise ValueError("Invalid value for `billing_periods`, must not be `None`")

        self._billing_periods = billing_periods

    @property
    def links(self):
        """Gets the links of this BillingPeriodList.


        :return: The links of this BillingPeriodList.
        :rtype: BillingPeriodListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BillingPeriodList.


        :param links: The links of this BillingPeriodList.
        :type links: BillingPeriodListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
