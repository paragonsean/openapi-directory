# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_get_billing_periods_link import LinksGetBillingPeriodsLink
from openapi_server.models.links_get_contracts_link import LinksGetContractsLink
from openapi_server.models.links_get_customer_index_link import LinksGetCustomerIndexLink
from openapi_server.models.links_get_friend_info_link import LinksGetFriendInfoLink
from openapi_server.models.links_get_invoices_link import LinksGetInvoicesLink
from openapi_server.models.links_get_offer_link import LinksGetOfferLink
from openapi_server.models.links_get_standard_offers_link import LinksGetStandardOffersLink
from openapi_server.models.links_get_stores_link import LinksGetStoresLink
from openapi_server.models.links_get_user_account_info_link import LinksGetUserAccountInfoLink
from openapi_server.models.links_logout_link import LinksLogoutLink
from openapi_server import util


class CustomerIndexLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_info: LinksGetUserAccountInfoLink=None, billing_periods: LinksGetBillingPeriodsLink=None, contracts: LinksGetContractsLink=None, friend_info: LinksGetFriendInfoLink=None, get_offer: LinksGetOfferLink=None, invoices: LinksGetInvoicesLink=None, logout: LinksLogoutLink=None, _self: LinksGetCustomerIndexLink=None, standard_offers: LinksGetStandardOffersLink=None, stores: LinksGetStoresLink=None):
        """CustomerIndexLinks - a model defined in OpenAPI

        :param account_info: The account_info of this CustomerIndexLinks.
        :param billing_periods: The billing_periods of this CustomerIndexLinks.
        :param contracts: The contracts of this CustomerIndexLinks.
        :param friend_info: The friend_info of this CustomerIndexLinks.
        :param get_offer: The get_offer of this CustomerIndexLinks.
        :param invoices: The invoices of this CustomerIndexLinks.
        :param logout: The logout of this CustomerIndexLinks.
        :param _self: The _self of this CustomerIndexLinks.
        :param standard_offers: The standard_offers of this CustomerIndexLinks.
        :param stores: The stores of this CustomerIndexLinks.
        """
        self.openapi_types = {
            'account_info': LinksGetUserAccountInfoLink,
            'billing_periods': LinksGetBillingPeriodsLink,
            'contracts': LinksGetContractsLink,
            'friend_info': LinksGetFriendInfoLink,
            'get_offer': LinksGetOfferLink,
            'invoices': LinksGetInvoicesLink,
            'logout': LinksLogoutLink,
            '_self': LinksGetCustomerIndexLink,
            'standard_offers': LinksGetStandardOffersLink,
            'stores': LinksGetStoresLink
        }

        self.attribute_map = {
            'account_info': 'accountInfo',
            'billing_periods': 'billingPeriods',
            'contracts': 'contracts',
            'friend_info': 'friendInfo',
            'get_offer': 'getOffer',
            'invoices': 'invoices',
            'logout': 'logout',
            '_self': 'self',
            'standard_offers': 'standardOffers',
            'stores': 'stores'
        }

        self._account_info = account_info
        self._billing_periods = billing_periods
        self._contracts = contracts
        self._friend_info = friend_info
        self._get_offer = get_offer
        self._invoices = invoices
        self._logout = logout
        self.__self = _self
        self._standard_offers = standard_offers
        self._stores = stores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerIndexLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customerIndexLinks of this CustomerIndexLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_info(self):
        """Gets the account_info of this CustomerIndexLinks.


        :return: The account_info of this CustomerIndexLinks.
        :rtype: LinksGetUserAccountInfoLink
        """
        return self._account_info

    @account_info.setter
    def account_info(self, account_info):
        """Sets the account_info of this CustomerIndexLinks.


        :param account_info: The account_info of this CustomerIndexLinks.
        :type account_info: LinksGetUserAccountInfoLink
        """
        if account_info is None:
            raise ValueError("Invalid value for `account_info`, must not be `None`")

        self._account_info = account_info

    @property
    def billing_periods(self):
        """Gets the billing_periods of this CustomerIndexLinks.


        :return: The billing_periods of this CustomerIndexLinks.
        :rtype: LinksGetBillingPeriodsLink
        """
        return self._billing_periods

    @billing_periods.setter
    def billing_periods(self, billing_periods):
        """Sets the billing_periods of this CustomerIndexLinks.


        :param billing_periods: The billing_periods of this CustomerIndexLinks.
        :type billing_periods: LinksGetBillingPeriodsLink
        """
        if billing_periods is None:
            raise ValueError("Invalid value for `billing_periods`, must not be `None`")

        self._billing_periods = billing_periods

    @property
    def contracts(self):
        """Gets the contracts of this CustomerIndexLinks.


        :return: The contracts of this CustomerIndexLinks.
        :rtype: LinksGetContractsLink
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this CustomerIndexLinks.


        :param contracts: The contracts of this CustomerIndexLinks.
        :type contracts: LinksGetContractsLink
        """

        self._contracts = contracts

    @property
    def friend_info(self):
        """Gets the friend_info of this CustomerIndexLinks.


        :return: The friend_info of this CustomerIndexLinks.
        :rtype: LinksGetFriendInfoLink
        """
        return self._friend_info

    @friend_info.setter
    def friend_info(self, friend_info):
        """Sets the friend_info of this CustomerIndexLinks.


        :param friend_info: The friend_info of this CustomerIndexLinks.
        :type friend_info: LinksGetFriendInfoLink
        """
        if friend_info is None:
            raise ValueError("Invalid value for `friend_info`, must not be `None`")

        self._friend_info = friend_info

    @property
    def get_offer(self):
        """Gets the get_offer of this CustomerIndexLinks.


        :return: The get_offer of this CustomerIndexLinks.
        :rtype: LinksGetOfferLink
        """
        return self._get_offer

    @get_offer.setter
    def get_offer(self, get_offer):
        """Sets the get_offer of this CustomerIndexLinks.


        :param get_offer: The get_offer of this CustomerIndexLinks.
        :type get_offer: LinksGetOfferLink
        """

        self._get_offer = get_offer

    @property
    def invoices(self):
        """Gets the invoices of this CustomerIndexLinks.


        :return: The invoices of this CustomerIndexLinks.
        :rtype: LinksGetInvoicesLink
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this CustomerIndexLinks.


        :param invoices: The invoices of this CustomerIndexLinks.
        :type invoices: LinksGetInvoicesLink
        """

        self._invoices = invoices

    @property
    def logout(self):
        """Gets the logout of this CustomerIndexLinks.


        :return: The logout of this CustomerIndexLinks.
        :rtype: LinksLogoutLink
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this CustomerIndexLinks.


        :param logout: The logout of this CustomerIndexLinks.
        :type logout: LinksLogoutLink
        """

        self._logout = logout

    @property
    def _self(self):
        """Gets the _self of this CustomerIndexLinks.


        :return: The _self of this CustomerIndexLinks.
        :rtype: LinksGetCustomerIndexLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CustomerIndexLinks.


        :param _self: The _self of this CustomerIndexLinks.
        :type _self: LinksGetCustomerIndexLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def standard_offers(self):
        """Gets the standard_offers of this CustomerIndexLinks.


        :return: The standard_offers of this CustomerIndexLinks.
        :rtype: LinksGetStandardOffersLink
        """
        return self._standard_offers

    @standard_offers.setter
    def standard_offers(self, standard_offers):
        """Sets the standard_offers of this CustomerIndexLinks.


        :param standard_offers: The standard_offers of this CustomerIndexLinks.
        :type standard_offers: LinksGetStandardOffersLink
        """
        if standard_offers is None:
            raise ValueError("Invalid value for `standard_offers`, must not be `None`")

        self._standard_offers = standard_offers

    @property
    def stores(self):
        """Gets the stores of this CustomerIndexLinks.


        :return: The stores of this CustomerIndexLinks.
        :rtype: LinksGetStoresLink
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this CustomerIndexLinks.


        :param stores: The stores of this CustomerIndexLinks.
        :type stores: LinksGetStoresLink
        """

        self._stores = stores
