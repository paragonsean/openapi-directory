# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_catalog_product_info_links import ChannelCatalogProductInfoLinks
from openapi_server.models.product_override_with_catalog_value import ProductOverrideWithCatalogValue
from openapi_server import util


class ChannelCatalogProductInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_exists: bool=None, product_id: str=None, product_image_url: str=None, product_sku: str=None, product_title: str=None, disabled: bool=False, excluded: bool=False, excluded_by: List[str]=None, links: ChannelCatalogProductInfoLinks=None, overrides: Dict[str, ProductOverrideWithCatalogValue]=None, uncategorized: bool=None):
        """ChannelCatalogProductInfo - a model defined in OpenAPI

        :param product_exists: The product_exists of this ChannelCatalogProductInfo.
        :param product_id: The product_id of this ChannelCatalogProductInfo.
        :param product_image_url: The product_image_url of this ChannelCatalogProductInfo.
        :param product_sku: The product_sku of this ChannelCatalogProductInfo.
        :param product_title: The product_title of this ChannelCatalogProductInfo.
        :param disabled: The disabled of this ChannelCatalogProductInfo.
        :param excluded: The excluded of this ChannelCatalogProductInfo.
        :param excluded_by: The excluded_by of this ChannelCatalogProductInfo.
        :param links: The links of this ChannelCatalogProductInfo.
        :param overrides: The overrides of this ChannelCatalogProductInfo.
        :param uncategorized: The uncategorized of this ChannelCatalogProductInfo.
        """
        self.openapi_types = {
            'product_exists': bool,
            'product_id': str,
            'product_image_url': str,
            'product_sku': str,
            'product_title': str,
            'disabled': bool,
            'excluded': bool,
            'excluded_by': List[str],
            'links': ChannelCatalogProductInfoLinks,
            'overrides': Dict[str, ProductOverrideWithCatalogValue],
            'uncategorized': bool
        }

        self.attribute_map = {
            'product_exists': 'productExists',
            'product_id': 'productId',
            'product_image_url': 'productImageUrl',
            'product_sku': 'productSku',
            'product_title': 'productTitle',
            'disabled': 'disabled',
            'excluded': 'excluded',
            'excluded_by': 'excludedBy',
            'links': 'links',
            'overrides': 'overrides',
            'uncategorized': 'uncategorized'
        }

        self._product_exists = product_exists
        self._product_id = product_id
        self._product_image_url = product_image_url
        self._product_sku = product_sku
        self._product_title = product_title
        self._disabled = disabled
        self._excluded = excluded
        self._excluded_by = excluded_by
        self._links = links
        self._overrides = overrides
        self._uncategorized = uncategorized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductInfo of this ChannelCatalogProductInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_exists(self):
        """Gets the product_exists of this ChannelCatalogProductInfo.

        Indicates if the product still exists in your catalog

        :return: The product_exists of this ChannelCatalogProductInfo.
        :rtype: bool
        """
        return self._product_exists

    @product_exists.setter
    def product_exists(self, product_exists):
        """Sets the product_exists of this ChannelCatalogProductInfo.

        Indicates if the product still exists in your catalog

        :param product_exists: The product_exists of this ChannelCatalogProductInfo.
        :type product_exists: bool
        """
        if product_exists is None:
            raise ValueError("Invalid value for `product_exists`, must not be `None`")

        self._product_exists = product_exists

    @property
    def product_id(self):
        """Gets the product_id of this ChannelCatalogProductInfo.

        The product identifier

        :return: The product_id of this ChannelCatalogProductInfo.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ChannelCatalogProductInfo.

        The product identifier

        :param product_id: The product_id of this ChannelCatalogProductInfo.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_image_url(self):
        """Gets the product_image_url of this ChannelCatalogProductInfo.

        The product image Url

        :return: The product_image_url of this ChannelCatalogProductInfo.
        :rtype: str
        """
        return self._product_image_url

    @product_image_url.setter
    def product_image_url(self, product_image_url):
        """Sets the product_image_url of this ChannelCatalogProductInfo.

        The product image Url

        :param product_image_url: The product_image_url of this ChannelCatalogProductInfo.
        :type product_image_url: str
        """

        self._product_image_url = product_image_url

    @property
    def product_sku(self):
        """Gets the product_sku of this ChannelCatalogProductInfo.

        The product SKU

        :return: The product_sku of this ChannelCatalogProductInfo.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this ChannelCatalogProductInfo.

        The product SKU

        :param product_sku: The product_sku of this ChannelCatalogProductInfo.
        :type product_sku: str
        """
        if product_sku is None:
            raise ValueError("Invalid value for `product_sku`, must not be `None`")

        self._product_sku = product_sku

    @property
    def product_title(self):
        """Gets the product_title of this ChannelCatalogProductInfo.

        The product tile

        :return: The product_title of this ChannelCatalogProductInfo.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this ChannelCatalogProductInfo.

        The product tile

        :param product_title: The product_title of this ChannelCatalogProductInfo.
        :type product_title: str
        """
        if product_title is None:
            raise ValueError("Invalid value for `product_title`, must not be `None`")

        self._product_title = product_title

    @property
    def disabled(self):
        """Gets the disabled of this ChannelCatalogProductInfo.

        Indicates if the product has been disabled or not

        :return: The disabled of this ChannelCatalogProductInfo.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ChannelCatalogProductInfo.

        Indicates if the product has been disabled or not

        :param disabled: The disabled of this ChannelCatalogProductInfo.
        :type disabled: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def excluded(self):
        """Gets the excluded of this ChannelCatalogProductInfo.

        Indicates if the product has been excluded by a exclusion filter

        :return: The excluded of this ChannelCatalogProductInfo.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this ChannelCatalogProductInfo.

        Indicates if the product has been excluded by a exclusion filter

        :param excluded: The excluded of this ChannelCatalogProductInfo.
        :type excluded: bool
        """
        if excluded is None:
            raise ValueError("Invalid value for `excluded`, must not be `None`")

        self._excluded = excluded

    @property
    def excluded_by(self):
        """Gets the excluded_by of this ChannelCatalogProductInfo.


        :return: The excluded_by of this ChannelCatalogProductInfo.
        :rtype: List[str]
        """
        return self._excluded_by

    @excluded_by.setter
    def excluded_by(self, excluded_by):
        """Sets the excluded_by of this ChannelCatalogProductInfo.


        :param excluded_by: The excluded_by of this ChannelCatalogProductInfo.
        :type excluded_by: List[str]
        """

        self._excluded_by = excluded_by

    @property
    def links(self):
        """Gets the links of this ChannelCatalogProductInfo.


        :return: The links of this ChannelCatalogProductInfo.
        :rtype: ChannelCatalogProductInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogProductInfo.


        :param links: The links of this ChannelCatalogProductInfo.
        :type links: ChannelCatalogProductInfoLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def overrides(self):
        """Gets the overrides of this ChannelCatalogProductInfo.

        The key is the channel column identifier

        :return: The overrides of this ChannelCatalogProductInfo.
        :rtype: Dict[str, ProductOverrideWithCatalogValue]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this ChannelCatalogProductInfo.

        The key is the channel column identifier

        :param overrides: The overrides of this ChannelCatalogProductInfo.
        :type overrides: Dict[str, ProductOverrideWithCatalogValue]
        """
        if overrides is None:
            raise ValueError("Invalid value for `overrides`, must not be `None`")

        self._overrides = overrides

    @property
    def uncategorized(self):
        """Gets the uncategorized of this ChannelCatalogProductInfo.

        Indicates if the product's category has been NOT mapped to a channel category

        :return: The uncategorized of this ChannelCatalogProductInfo.
        :rtype: bool
        """
        return self._uncategorized

    @uncategorized.setter
    def uncategorized(self, uncategorized):
        """Sets the uncategorized of this ChannelCatalogProductInfo.

        Indicates if the product's category has been NOT mapped to a channel category

        :param uncategorized: The uncategorized of this ChannelCatalogProductInfo.
        :type uncategorized: bool
        """
        if uncategorized is None:
            raise ValueError("Invalid value for `uncategorized`, must not be `None`")

        self._uncategorized = uncategorized
