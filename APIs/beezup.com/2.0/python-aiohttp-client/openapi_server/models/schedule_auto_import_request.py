# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleAutoImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_time_zone_name: str='Romance Standard Time', schedules: list[str]=None):
        """ScheduleAutoImportRequest - a model defined in OpenAPI

        :param local_time_zone_name: The local_time_zone_name of this ScheduleAutoImportRequest.
        :param schedules: The schedules of this ScheduleAutoImportRequest.
        """
        self.openapi_types = {
            'local_time_zone_name': str,
            'schedules': list[str]
        }

        self.attribute_map = {
            'local_time_zone_name': 'localTimeZoneName',
            'schedules': 'schedules'
        }

        self._local_time_zone_name = local_time_zone_name
        self._schedules = schedules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleAutoImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scheduleAutoImportRequest of this ScheduleAutoImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_time_zone_name(self):
        """Gets the local_time_zone_name of this ScheduleAutoImportRequest.

        If null the local time zone name will be \"Romance Standard Time\"

        :return: The local_time_zone_name of this ScheduleAutoImportRequest.
        :rtype: str
        """
        return self._local_time_zone_name

    @local_time_zone_name.setter
    def local_time_zone_name(self, local_time_zone_name):
        """Sets the local_time_zone_name of this ScheduleAutoImportRequest.

        If null the local time zone name will be \"Romance Standard Time\"

        :param local_time_zone_name: The local_time_zone_name of this ScheduleAutoImportRequest.
        :type local_time_zone_name: str
        """

        self._local_time_zone_name = local_time_zone_name

    @property
    def schedules(self):
        """Gets the schedules of this ScheduleAutoImportRequest.

        Indicate the time span you want to import your catalog. (i.e. \"21:00:00\" to import your catalog at 9PM)

        :return: The schedules of this ScheduleAutoImportRequest.
        :rtype: list[str]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this ScheduleAutoImportRequest.

        Indicate the time span you want to import your catalog. (i.e. \"21:00:00\" to import your catalog at 9PM)

        :param schedules: The schedules of this ScheduleAutoImportRequest.
        :type schedules: list[str]
        """
        if schedules is None:
            raise ValueError("Invalid value for `schedules`, must not be `None`")
        if schedules is not None and len(schedules) < 1:
            raise ValueError("Invalid value for `schedules`, number of items must be greater than or equal to `1`")

        self._schedules = schedules
