# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrackedExternalOrderProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, margin: str=None, product_active: bool=None, product_id: str=None, product_image_url: str=None, product_sku: str=None, product_title: str=None, quantity: str=None, unit_price: str=None):
        """TrackedExternalOrderProduct - a model defined in OpenAPI

        :param margin: The margin of this TrackedExternalOrderProduct.
        :param product_active: The product_active of this TrackedExternalOrderProduct.
        :param product_id: The product_id of this TrackedExternalOrderProduct.
        :param product_image_url: The product_image_url of this TrackedExternalOrderProduct.
        :param product_sku: The product_sku of this TrackedExternalOrderProduct.
        :param product_title: The product_title of this TrackedExternalOrderProduct.
        :param quantity: The quantity of this TrackedExternalOrderProduct.
        :param unit_price: The unit_price of this TrackedExternalOrderProduct.
        """
        self.openapi_types = {
            'margin': str,
            'product_active': bool,
            'product_id': str,
            'product_image_url': str,
            'product_sku': str,
            'product_title': str,
            'quantity': str,
            'unit_price': str
        }

        self.attribute_map = {
            'margin': 'margin',
            'product_active': 'productActive',
            'product_id': 'productId',
            'product_image_url': 'productImageUrl',
            'product_sku': 'productSku',
            'product_title': 'productTitle',
            'quantity': 'quantity',
            'unit_price': 'unitPrice'
        }

        self._margin = margin
        self._product_active = product_active
        self._product_id = product_id
        self._product_image_url = product_image_url
        self._product_sku = product_sku
        self._product_title = product_title
        self._quantity = quantity
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedExternalOrderProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedExternalOrderProduct of this TrackedExternalOrderProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def margin(self):
        """Gets the margin of this TrackedExternalOrderProduct.

        The product's margin for the external order. This property is voluntarily a string because the value could be an invalid one

        :return: The margin of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this TrackedExternalOrderProduct.

        The product's margin for the external order. This property is voluntarily a string because the value could be an invalid one

        :param margin: The margin of this TrackedExternalOrderProduct.
        :type margin: str
        """

        self._margin = margin

    @property
    def product_active(self):
        """Gets the product_active of this TrackedExternalOrderProduct.

        We tried to get the catalog product if it's still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :return: The product_active of this TrackedExternalOrderProduct.
        :rtype: bool
        """
        return self._product_active

    @product_active.setter
    def product_active(self, product_active):
        """Sets the product_active of this TrackedExternalOrderProduct.

        We tried to get the catalog product if it's still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :param product_active: The product_active of this TrackedExternalOrderProduct.
        :type product_active: bool
        """

        self._product_active = product_active

    @property
    def product_id(self):
        """Gets the product_id of this TrackedExternalOrderProduct.

        We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :return: The product_id of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this TrackedExternalOrderProduct.

        We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :param product_id: The product_id of this TrackedExternalOrderProduct.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_image_url(self):
        """Gets the product_image_url of this TrackedExternalOrderProduct.

        We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :return: The product_image_url of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._product_image_url

    @product_image_url.setter
    def product_image_url(self, product_image_url):
        """Sets the product_image_url of this TrackedExternalOrderProduct.

        We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :param product_image_url: The product_image_url of this TrackedExternalOrderProduct.
        :type product_image_url: str
        """

        self._product_image_url = product_image_url

    @property
    def product_sku(self):
        """Gets the product_sku of this TrackedExternalOrderProduct.

        The product sku received for the external order

        :return: The product_sku of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this TrackedExternalOrderProduct.

        The product sku received for the external order

        :param product_sku: The product_sku of this TrackedExternalOrderProduct.
        :type product_sku: str
        """
        if product_sku is None:
            raise ValueError("Invalid value for `product_sku`, must not be `None`")

        self._product_sku = product_sku

    @property
    def product_title(self):
        """Gets the product_title of this TrackedExternalOrderProduct.

        We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :return: The product_title of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this TrackedExternalOrderProduct.

        We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.

        :param product_title: The product_title of this TrackedExternalOrderProduct.
        :type product_title: str
        """

        self._product_title = product_title

    @property
    def quantity(self):
        """Gets the quantity of this TrackedExternalOrderProduct.

        The quantity of this product for the external order. This property is voluntarily a string because the value could be an invalid one

        :return: The quantity of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TrackedExternalOrderProduct.

        The quantity of this product for the external order. This property is voluntarily a string because the value could be an invalid one

        :param quantity: The quantity of this TrackedExternalOrderProduct.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this TrackedExternalOrderProduct.

        The product's unit price for the external order. This property is voluntarily a string because the value could be an invalid one.

        :return: The unit_price of this TrackedExternalOrderProduct.
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this TrackedExternalOrderProduct.

        The product's unit price for the external order. This property is voluntarily a string because the value could be an invalid one.

        :param unit_price: The unit_price of this TrackedExternalOrderProduct.
        :type unit_price: str
        """

        self._unit_price = unit_price
