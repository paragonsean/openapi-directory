# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_order_list_request_item_v2 import ChangeOrderListRequestItemV2
from openapi_server import util


class ChangeOrderListRequestV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_orders: List[ChangeOrderListRequestItemV2]=None):
        """ChangeOrderListRequestV2 - a model defined in OpenAPI

        :param change_orders: The change_orders of this ChangeOrderListRequestV2.
        """
        self.openapi_types = {
            'change_orders': List[ChangeOrderListRequestItemV2]
        }

        self.attribute_map = {
            'change_orders': 'changeOrders'
        }

        self._change_orders = change_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeOrderListRequestV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The changeOrderListRequestV2 of this ChangeOrderListRequestV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_orders(self):
        """Gets the change_orders of this ChangeOrderListRequestV2.

        The change order operations

        :return: The change_orders of this ChangeOrderListRequestV2.
        :rtype: List[ChangeOrderListRequestItemV2]
        """
        return self._change_orders

    @change_orders.setter
    def change_orders(self, change_orders):
        """Sets the change_orders of this ChangeOrderListRequestV2.

        The change order operations

        :param change_orders: The change_orders of this ChangeOrderListRequestV2.
        :type change_orders: List[ChangeOrderListRequestItemV2]
        """
        if change_orders is None:
            raise ValueError("Invalid value for `change_orders`, must not be `None`")

        self._change_orders = change_orders
