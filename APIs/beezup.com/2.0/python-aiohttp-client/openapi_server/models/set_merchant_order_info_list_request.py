# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.set_merchant_order_info_list_request_item import SetMerchantOrderInfoListRequestItem
from openapi_server import util


class SetMerchantOrderInfoListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_merchant_e_commerce_software_name: str=None, order_merchant_e_commerce_software_version: str=None, orders: list[SetMerchantOrderInfoListRequestItem]=None):
        """SetMerchantOrderInfoListRequest - a model defined in OpenAPI

        :param order_merchant_e_commerce_software_name: The order_merchant_e_commerce_software_name of this SetMerchantOrderInfoListRequest.
        :param order_merchant_e_commerce_software_version: The order_merchant_e_commerce_software_version of this SetMerchantOrderInfoListRequest.
        :param orders: The orders of this SetMerchantOrderInfoListRequest.
        """
        self.openapi_types = {
            'order_merchant_e_commerce_software_name': str,
            'order_merchant_e_commerce_software_version': str,
            'orders': list[SetMerchantOrderInfoListRequestItem]
        }

        self.attribute_map = {
            'order_merchant_e_commerce_software_name': 'order_MerchantECommerceSoftwareName',
            'order_merchant_e_commerce_software_version': 'order_MerchantECommerceSoftwareVersion',
            'orders': 'orders'
        }

        self._order_merchant_e_commerce_software_name = order_merchant_e_commerce_software_name
        self._order_merchant_e_commerce_software_version = order_merchant_e_commerce_software_version
        self._orders = orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetMerchantOrderInfoListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The setMerchantOrderInfoListRequest of this SetMerchantOrderInfoListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_merchant_e_commerce_software_name(self):
        """Gets the order_merchant_e_commerce_software_name of this SetMerchantOrderInfoListRequest.

        The e-commerce software name of the merchant

        :return: The order_merchant_e_commerce_software_name of this SetMerchantOrderInfoListRequest.
        :rtype: str
        """
        return self._order_merchant_e_commerce_software_name

    @order_merchant_e_commerce_software_name.setter
    def order_merchant_e_commerce_software_name(self, order_merchant_e_commerce_software_name):
        """Sets the order_merchant_e_commerce_software_name of this SetMerchantOrderInfoListRequest.

        The e-commerce software name of the merchant

        :param order_merchant_e_commerce_software_name: The order_merchant_e_commerce_software_name of this SetMerchantOrderInfoListRequest.
        :type order_merchant_e_commerce_software_name: str
        """
        if order_merchant_e_commerce_software_name is None:
            raise ValueError("Invalid value for `order_merchant_e_commerce_software_name`, must not be `None`")

        self._order_merchant_e_commerce_software_name = order_merchant_e_commerce_software_name

    @property
    def order_merchant_e_commerce_software_version(self):
        """Gets the order_merchant_e_commerce_software_version of this SetMerchantOrderInfoListRequest.

        The e-commece software version of the merchant

        :return: The order_merchant_e_commerce_software_version of this SetMerchantOrderInfoListRequest.
        :rtype: str
        """
        return self._order_merchant_e_commerce_software_version

    @order_merchant_e_commerce_software_version.setter
    def order_merchant_e_commerce_software_version(self, order_merchant_e_commerce_software_version):
        """Sets the order_merchant_e_commerce_software_version of this SetMerchantOrderInfoListRequest.

        The e-commece software version of the merchant

        :param order_merchant_e_commerce_software_version: The order_merchant_e_commerce_software_version of this SetMerchantOrderInfoListRequest.
        :type order_merchant_e_commerce_software_version: str
        """
        if order_merchant_e_commerce_software_version is None:
            raise ValueError("Invalid value for `order_merchant_e_commerce_software_version`, must not be `None`")

        self._order_merchant_e_commerce_software_version = order_merchant_e_commerce_software_version

    @property
    def orders(self):
        """Gets the orders of this SetMerchantOrderInfoListRequest.


        :return: The orders of this SetMerchantOrderInfoListRequest.
        :rtype: list[SetMerchantOrderInfoListRequestItem]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this SetMerchantOrderInfoListRequest.


        :param orders: The orders of this SetMerchantOrderInfoListRequest.
        :type orders: list[SetMerchantOrderInfoListRequestItem]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")
        if orders is not None and len(orders) > 100:
            raise ValueError("Invalid value for `orders`, number of items must be less than or equal to `100`")
        if orders is not None and len(orders) < 1:
            raise ValueError("Invalid value for `orders`, number of items must be greater than or equal to `1`")

        self._orders = orders
