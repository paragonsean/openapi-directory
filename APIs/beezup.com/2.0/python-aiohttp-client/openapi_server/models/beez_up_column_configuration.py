# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_column_data_type import BeezUPCommonColumnDataType
from openapi_server.models.beez_up_common_column_importance import BeezUPCommonColumnImportance
from openapi_server import util


class BeezUPColumnConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_column_name: str=None, can_be_truncated: bool=False, column_data_type: BeezUPCommonColumnDataType=BeezUPCommonColumnDataType.STRING, column_importance: BeezUPCommonColumnImportance=BeezUPCommonColumnImportance.OPTIONAL, description: str=None, display_group_name: str=None, unique: bool=False):
        """BeezUPColumnConfiguration - a model defined in OpenAPI

        :param beez_up_column_name: The beez_up_column_name of this BeezUPColumnConfiguration.
        :param can_be_truncated: The can_be_truncated of this BeezUPColumnConfiguration.
        :param column_data_type: The column_data_type of this BeezUPColumnConfiguration.
        :param column_importance: The column_importance of this BeezUPColumnConfiguration.
        :param description: The description of this BeezUPColumnConfiguration.
        :param display_group_name: The display_group_name of this BeezUPColumnConfiguration.
        :param unique: The unique of this BeezUPColumnConfiguration.
        """
        self.openapi_types = {
            'beez_up_column_name': str,
            'can_be_truncated': bool,
            'column_data_type': BeezUPCommonColumnDataType,
            'column_importance': BeezUPCommonColumnImportance,
            'description': str,
            'display_group_name': str,
            'unique': bool
        }

        self.attribute_map = {
            'beez_up_column_name': 'beezUPColumnName',
            'can_be_truncated': 'canBeTruncated',
            'column_data_type': 'columnDataType',
            'column_importance': 'columnImportance',
            'description': 'description',
            'display_group_name': 'displayGroupName',
            'unique': 'unique'
        }

        self._beez_up_column_name = beez_up_column_name
        self._can_be_truncated = can_be_truncated
        self._column_data_type = column_data_type
        self._column_importance = column_importance
        self._description = description
        self._display_group_name = display_group_name
        self._unique = unique

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeezUPColumnConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The beezUPColumnConfiguration of this BeezUPColumnConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_column_name(self):
        """Gets the beez_up_column_name of this BeezUPColumnConfiguration.

        The BeezUP column name

        :return: The beez_up_column_name of this BeezUPColumnConfiguration.
        :rtype: str
        """
        return self._beez_up_column_name

    @beez_up_column_name.setter
    def beez_up_column_name(self, beez_up_column_name):
        """Sets the beez_up_column_name of this BeezUPColumnConfiguration.

        The BeezUP column name

        :param beez_up_column_name: The beez_up_column_name of this BeezUPColumnConfiguration.
        :type beez_up_column_name: str
        """
        if beez_up_column_name is None:
            raise ValueError("Invalid value for `beez_up_column_name`, must not be `None`")

        self._beez_up_column_name = beez_up_column_name

    @property
    def can_be_truncated(self):
        """Gets the can_be_truncated of this BeezUPColumnConfiguration.

        If the size of the value is greater than the limit we can truncate the value instead of failing...

        :return: The can_be_truncated of this BeezUPColumnConfiguration.
        :rtype: bool
        """
        return self._can_be_truncated

    @can_be_truncated.setter
    def can_be_truncated(self, can_be_truncated):
        """Sets the can_be_truncated of this BeezUPColumnConfiguration.

        If the size of the value is greater than the limit we can truncate the value instead of failing...

        :param can_be_truncated: The can_be_truncated of this BeezUPColumnConfiguration.
        :type can_be_truncated: bool
        """

        self._can_be_truncated = can_be_truncated

    @property
    def column_data_type(self):
        """Gets the column_data_type of this BeezUPColumnConfiguration.


        :return: The column_data_type of this BeezUPColumnConfiguration.
        :rtype: BeezUPCommonColumnDataType
        """
        return self._column_data_type

    @column_data_type.setter
    def column_data_type(self, column_data_type):
        """Sets the column_data_type of this BeezUPColumnConfiguration.


        :param column_data_type: The column_data_type of this BeezUPColumnConfiguration.
        :type column_data_type: BeezUPCommonColumnDataType
        """

        self._column_data_type = column_data_type

    @property
    def column_importance(self):
        """Gets the column_importance of this BeezUPColumnConfiguration.


        :return: The column_importance of this BeezUPColumnConfiguration.
        :rtype: BeezUPCommonColumnImportance
        """
        return self._column_importance

    @column_importance.setter
    def column_importance(self, column_importance):
        """Sets the column_importance of this BeezUPColumnConfiguration.


        :param column_importance: The column_importance of this BeezUPColumnConfiguration.
        :type column_importance: BeezUPCommonColumnImportance
        """
        if column_importance is None:
            raise ValueError("Invalid value for `column_importance`, must not be `None`")

        self._column_importance = column_importance

    @property
    def description(self):
        """Gets the description of this BeezUPColumnConfiguration.

        Describe the BeezUP column

        :return: The description of this BeezUPColumnConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BeezUPColumnConfiguration.

        Describe the BeezUP column

        :param description: The description of this BeezUPColumnConfiguration.
        :type description: str
        """

        self._description = description

    @property
    def display_group_name(self):
        """Gets the display_group_name of this BeezUPColumnConfiguration.

        Indicate the display group name where the column must be putted

        :return: The display_group_name of this BeezUPColumnConfiguration.
        :rtype: str
        """
        return self._display_group_name

    @display_group_name.setter
    def display_group_name(self, display_group_name):
        """Sets the display_group_name of this BeezUPColumnConfiguration.

        Indicate the display group name where the column must be putted

        :param display_group_name: The display_group_name of this BeezUPColumnConfiguration.
        :type display_group_name: str
        """
        if display_group_name is None:
            raise ValueError("Invalid value for `display_group_name`, must not be `None`")

        self._display_group_name = display_group_name

    @property
    def unique(self):
        """Gets the unique of this BeezUPColumnConfiguration.

        /!\\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!  If true, an error happen at the second occurence of the same value for this column  This information will be used during the importation process and later for mapping proposal

        :return: The unique of this BeezUPColumnConfiguration.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this BeezUPColumnConfiguration.

        /!\\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!  If true, an error happen at the second occurence of the same value for this column  This information will be used during the importation process and later for mapping proposal

        :param unique: The unique of this BeezUPColumnConfiguration.
        :type unique: bool
        """

        self._unique = unique
