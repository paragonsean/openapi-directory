# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracked_external_order import TrackedExternalOrder
from openapi_server import util


class TrackedExternalOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_orders: List[TrackedExternalOrder]=None):
        """TrackedExternalOrders - a model defined in OpenAPI

        :param external_orders: The external_orders of this TrackedExternalOrders.
        """
        self.openapi_types = {
            'external_orders': List[TrackedExternalOrder]
        }

        self.attribute_map = {
            'external_orders': 'externalOrders'
        }

        self._external_orders = external_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedExternalOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedExternalOrders of this TrackedExternalOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_orders(self):
        """Gets the external_orders of this TrackedExternalOrders.


        :return: The external_orders of this TrackedExternalOrders.
        :rtype: List[TrackedExternalOrder]
        """
        return self._external_orders

    @external_orders.setter
    def external_orders(self, external_orders):
        """Sets the external_orders of this TrackedExternalOrders.


        :param external_orders: The external_orders of this TrackedExternalOrders.
        :type external_orders: List[TrackedExternalOrder]
        """
        if external_orders is None:
            raise ValueError("Invalid value for `external_orders`, must not be `None`")

        self._external_orders = external_orders
