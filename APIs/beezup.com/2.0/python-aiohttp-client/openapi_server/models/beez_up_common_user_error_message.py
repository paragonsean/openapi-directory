# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_user_error_message_arguments_inner import BeezUPCommonUserErrorMessageArgumentsInner
from openapi_server import util


class BeezUPCommonUserErrorMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[BeezUPCommonUserErrorMessageArgumentsInner]=None, code: str=None, culture_name: str=None, doc_url: str=None, message: str=None):
        """BeezUPCommonUserErrorMessage - a model defined in OpenAPI

        :param arguments: The arguments of this BeezUPCommonUserErrorMessage.
        :param code: The code of this BeezUPCommonUserErrorMessage.
        :param culture_name: The culture_name of this BeezUPCommonUserErrorMessage.
        :param doc_url: The doc_url of this BeezUPCommonUserErrorMessage.
        :param message: The message of this BeezUPCommonUserErrorMessage.
        """
        self.openapi_types = {
            'arguments': List[BeezUPCommonUserErrorMessageArgumentsInner],
            'code': str,
            'culture_name': str,
            'doc_url': str,
            'message': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'code': 'code',
            'culture_name': 'cultureName',
            'doc_url': 'docUrl',
            'message': 'message'
        }

        self._arguments = arguments
        self._code = code
        self._culture_name = culture_name
        self._doc_url = doc_url
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeezUPCommonUserErrorMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeezUP.Common.UserErrorMessage of this BeezUPCommonUserErrorMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this BeezUPCommonUserErrorMessage.

        a dictionary string/object

        :return: The arguments of this BeezUPCommonUserErrorMessage.
        :rtype: List[BeezUPCommonUserErrorMessageArgumentsInner]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this BeezUPCommonUserErrorMessage.

        a dictionary string/object

        :param arguments: The arguments of this BeezUPCommonUserErrorMessage.
        :type arguments: List[BeezUPCommonUserErrorMessageArgumentsInner]
        """

        self._arguments = arguments

    @property
    def code(self):
        """Gets the code of this BeezUPCommonUserErrorMessage.

        the error code. The error code can be a pattern containing the argument's name

        :return: The code of this BeezUPCommonUserErrorMessage.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BeezUPCommonUserErrorMessage.

        the error code. The error code can be a pattern containing the argument's name

        :param code: The code of this BeezUPCommonUserErrorMessage.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def culture_name(self):
        """Gets the culture_name of this BeezUPCommonUserErrorMessage.

        If the error is translated, the culture name will be indicated

        :return: The culture_name of this BeezUPCommonUserErrorMessage.
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this BeezUPCommonUserErrorMessage.

        If the error is translated, the culture name will be indicated

        :param culture_name: The culture_name of this BeezUPCommonUserErrorMessage.
        :type culture_name: str
        """

        self._culture_name = culture_name

    @property
    def doc_url(self):
        """Gets the doc_url of this BeezUPCommonUserErrorMessage.

        The documentation related to this operation.

        :return: The doc_url of this BeezUPCommonUserErrorMessage.
        :rtype: str
        """
        return self._doc_url

    @doc_url.setter
    def doc_url(self, doc_url):
        """Sets the doc_url of this BeezUPCommonUserErrorMessage.

        The documentation related to this operation.

        :param doc_url: The doc_url of this BeezUPCommonUserErrorMessage.
        :type doc_url: str
        """

        self._doc_url = doc_url

    @property
    def message(self):
        """Gets the message of this BeezUPCommonUserErrorMessage.

        The error message

        :return: The message of this BeezUPCommonUserErrorMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BeezUPCommonUserErrorMessage.

        The error message

        :param message: The message of this BeezUPCommonUserErrorMessage.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
