# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.publication_feed_reporting import PublicationFeedReporting
from openapi_server.models.publication_type import PublicationType
from openapi_server import util


class PublicationReporting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feeds: List[PublicationFeedReporting]=None, publication_type: PublicationType=None):
        """PublicationReporting - a model defined in OpenAPI

        :param feeds: The feeds of this PublicationReporting.
        :param publication_type: The publication_type of this PublicationReporting.
        """
        self.openapi_types = {
            'feeds': List[PublicationFeedReporting],
            'publication_type': PublicationType
        }

        self.attribute_map = {
            'feeds': 'feeds',
            'publication_type': 'publicationType'
        }

        self._feeds = feeds
        self._publication_type = publication_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicationReporting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The publicationReporting of this PublicationReporting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feeds(self):
        """Gets the feeds of this PublicationReporting.

        The feeds that were published

        :return: The feeds of this PublicationReporting.
        :rtype: List[PublicationFeedReporting]
        """
        return self._feeds

    @feeds.setter
    def feeds(self, feeds):
        """Sets the feeds of this PublicationReporting.

        The feeds that were published

        :param feeds: The feeds of this PublicationReporting.
        :type feeds: List[PublicationFeedReporting]
        """
        if feeds is None:
            raise ValueError("Invalid value for `feeds`, must not be `None`")

        self._feeds = feeds

    @property
    def publication_type(self):
        """Gets the publication_type of this PublicationReporting.


        :return: The publication_type of this PublicationReporting.
        :rtype: PublicationType
        """
        return self._publication_type

    @publication_type.setter
    def publication_type(self, publication_type):
        """Sets the publication_type of this PublicationReporting.


        :param publication_type: The publication_type of this PublicationReporting.
        :type publication_type: PublicationType
        """
        if publication_type is None:
            raise ValueError("Invalid value for `publication_type`, must not be `None`")

        self._publication_type = publication_type
