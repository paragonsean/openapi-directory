# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetImportationReportResponseError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_column_name: str=None, error_code: str=None, product_count: int=None, user_colum_name: str=None):
        """GetImportationReportResponseError - a model defined in OpenAPI

        :param beez_up_column_name: The beez_up_column_name of this GetImportationReportResponseError.
        :param error_code: The error_code of this GetImportationReportResponseError.
        :param product_count: The product_count of this GetImportationReportResponseError.
        :param user_colum_name: The user_colum_name of this GetImportationReportResponseError.
        """
        self.openapi_types = {
            'beez_up_column_name': str,
            'error_code': str,
            'product_count': int,
            'user_colum_name': str
        }

        self.attribute_map = {
            'beez_up_column_name': 'beezUPColumnName',
            'error_code': 'errorCode',
            'product_count': 'productCount',
            'user_colum_name': 'userColumName'
        }

        self._beez_up_column_name = beez_up_column_name
        self._error_code = error_code
        self._product_count = product_count
        self._user_colum_name = user_colum_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationReportResponseError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationReportResponseError of this GetImportationReportResponseError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_column_name(self):
        """Gets the beez_up_column_name of this GetImportationReportResponseError.

        The BeezUP column name

        :return: The beez_up_column_name of this GetImportationReportResponseError.
        :rtype: str
        """
        return self._beez_up_column_name

    @beez_up_column_name.setter
    def beez_up_column_name(self, beez_up_column_name):
        """Sets the beez_up_column_name of this GetImportationReportResponseError.

        The BeezUP column name

        :param beez_up_column_name: The beez_up_column_name of this GetImportationReportResponseError.
        :type beez_up_column_name: str
        """

        self._beez_up_column_name = beez_up_column_name

    @property
    def error_code(self):
        """Gets the error_code of this GetImportationReportResponseError.

        Error Code

        :return: The error_code of this GetImportationReportResponseError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this GetImportationReportResponseError.

        Error Code

        :param error_code: The error_code of this GetImportationReportResponseError.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def product_count(self):
        """Gets the product_count of this GetImportationReportResponseError.


        :return: The product_count of this GetImportationReportResponseError.
        :rtype: int
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count):
        """Sets the product_count of this GetImportationReportResponseError.


        :param product_count: The product_count of this GetImportationReportResponseError.
        :type product_count: int
        """
        if product_count is None:
            raise ValueError("Invalid value for `product_count`, must not be `None`")

        self._product_count = product_count

    @property
    def user_colum_name(self):
        """Gets the user_colum_name of this GetImportationReportResponseError.

        Column named by the user

        :return: The user_colum_name of this GetImportationReportResponseError.
        :rtype: str
        """
        return self._user_colum_name

    @user_colum_name.setter
    def user_colum_name(self, user_colum_name):
        """Sets the user_colum_name of this GetImportationReportResponseError.

        Column named by the user

        :param user_colum_name: The user_colum_name of this GetImportationReportResponseError.
        :type user_colum_name: str
        """
        if user_colum_name is None:
            raise ValueError("Invalid value for `user_colum_name`, must not be `None`")

        self._user_colum_name = user_colum_name
