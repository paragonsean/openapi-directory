# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyOptimisationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id_source: str=None, channel_id_target: str=None, keep_existing_optimisation: bool=None):
        """CopyOptimisationRequest - a model defined in OpenAPI

        :param channel_id_source: The channel_id_source of this CopyOptimisationRequest.
        :param channel_id_target: The channel_id_target of this CopyOptimisationRequest.
        :param keep_existing_optimisation: The keep_existing_optimisation of this CopyOptimisationRequest.
        """
        self.openapi_types = {
            'channel_id_source': str,
            'channel_id_target': str,
            'keep_existing_optimisation': bool
        }

        self.attribute_map = {
            'channel_id_source': 'channelIdSource',
            'channel_id_target': 'channelIdTarget',
            'keep_existing_optimisation': 'keepExistingOptimisation'
        }

        self._channel_id_source = channel_id_source
        self._channel_id_target = channel_id_target
        self._keep_existing_optimisation = keep_existing_optimisation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyOptimisationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The copyOptimisationRequest of this CopyOptimisationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id_source(self):
        """Gets the channel_id_source of this CopyOptimisationRequest.

        The channel identifier

        :return: The channel_id_source of this CopyOptimisationRequest.
        :rtype: str
        """
        return self._channel_id_source

    @channel_id_source.setter
    def channel_id_source(self, channel_id_source):
        """Sets the channel_id_source of this CopyOptimisationRequest.

        The channel identifier

        :param channel_id_source: The channel_id_source of this CopyOptimisationRequest.
        :type channel_id_source: str
        """
        if channel_id_source is None:
            raise ValueError("Invalid value for `channel_id_source`, must not be `None`")

        self._channel_id_source = channel_id_source

    @property
    def channel_id_target(self):
        """Gets the channel_id_target of this CopyOptimisationRequest.

        The channel identifier

        :return: The channel_id_target of this CopyOptimisationRequest.
        :rtype: str
        """
        return self._channel_id_target

    @channel_id_target.setter
    def channel_id_target(self, channel_id_target):
        """Sets the channel_id_target of this CopyOptimisationRequest.

        The channel identifier

        :param channel_id_target: The channel_id_target of this CopyOptimisationRequest.
        :type channel_id_target: str
        """
        if channel_id_target is None:
            raise ValueError("Invalid value for `channel_id_target`, must not be `None`")

        self._channel_id_target = channel_id_target

    @property
    def keep_existing_optimisation(self):
        """Gets the keep_existing_optimisation of this CopyOptimisationRequest.

        If true the existing optimisation will be kept

        :return: The keep_existing_optimisation of this CopyOptimisationRequest.
        :rtype: bool
        """
        return self._keep_existing_optimisation

    @keep_existing_optimisation.setter
    def keep_existing_optimisation(self, keep_existing_optimisation):
        """Sets the keep_existing_optimisation of this CopyOptimisationRequest.

        If true the existing optimisation will be kept

        :param keep_existing_optimisation: The keep_existing_optimisation of this CopyOptimisationRequest.
        :type keep_existing_optimisation: bool
        """
        if keep_existing_optimisation is None:
            raise ValueError("Invalid value for `keep_existing_optimisation`, must not be `None`")

        self._keep_existing_optimisation = keep_existing_optimisation
