# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputFileReadCsvConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, csv_separator: str=';', csv_text_qualifier: str='"', has_header_record: bool=True, ignore_header_record: bool=False):
        """InputFileReadCsvConfiguration - a model defined in OpenAPI

        :param csv_separator: The csv_separator of this InputFileReadCsvConfiguration.
        :param csv_text_qualifier: The csv_text_qualifier of this InputFileReadCsvConfiguration.
        :param has_header_record: The has_header_record of this InputFileReadCsvConfiguration.
        :param ignore_header_record: The ignore_header_record of this InputFileReadCsvConfiguration.
        """
        self.openapi_types = {
            'csv_separator': str,
            'csv_text_qualifier': str,
            'has_header_record': bool,
            'ignore_header_record': bool
        }

        self.attribute_map = {
            'csv_separator': 'csvSeparator',
            'csv_text_qualifier': 'csvTextQualifier',
            'has_header_record': 'hasHeaderRecord',
            'ignore_header_record': 'ignoreHeaderRecord'
        }

        self._csv_separator = csv_separator
        self._csv_text_qualifier = csv_text_qualifier
        self._has_header_record = has_header_record
        self._ignore_header_record = ignore_header_record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputFileReadCsvConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inputFileReadCsvConfiguration of this InputFileReadCsvConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def csv_separator(self):
        """Gets the csv_separator of this InputFileReadCsvConfiguration.

        Indicate the separator of the values in the CSV file. Generally \";\"

        :return: The csv_separator of this InputFileReadCsvConfiguration.
        :rtype: str
        """
        return self._csv_separator

    @csv_separator.setter
    def csv_separator(self, csv_separator):
        """Sets the csv_separator of this InputFileReadCsvConfiguration.

        Indicate the separator of the values in the CSV file. Generally \";\"

        :param csv_separator: The csv_separator of this InputFileReadCsvConfiguration.
        :type csv_separator: str
        """
        if csv_separator is None:
            raise ValueError("Invalid value for `csv_separator`, must not be `None`")

        self._csv_separator = csv_separator

    @property
    def csv_text_qualifier(self):
        """Gets the csv_text_qualifier of this InputFileReadCsvConfiguration.

        Indicate the text qualifier of the CSV file. Generally the value is \"

        :return: The csv_text_qualifier of this InputFileReadCsvConfiguration.
        :rtype: str
        """
        return self._csv_text_qualifier

    @csv_text_qualifier.setter
    def csv_text_qualifier(self, csv_text_qualifier):
        """Sets the csv_text_qualifier of this InputFileReadCsvConfiguration.

        Indicate the text qualifier of the CSV file. Generally the value is \"

        :param csv_text_qualifier: The csv_text_qualifier of this InputFileReadCsvConfiguration.
        :type csv_text_qualifier: str
        """

        self._csv_text_qualifier = csv_text_qualifier

    @property
    def has_header_record(self):
        """Gets the has_header_record of this InputFileReadCsvConfiguration.

        Indicate if the csv file contains the column name at the first row

        :return: The has_header_record of this InputFileReadCsvConfiguration.
        :rtype: bool
        """
        return self._has_header_record

    @has_header_record.setter
    def has_header_record(self, has_header_record):
        """Sets the has_header_record of this InputFileReadCsvConfiguration.

        Indicate if the csv file contains the column name at the first row

        :param has_header_record: The has_header_record of this InputFileReadCsvConfiguration.
        :type has_header_record: bool
        """
        if has_header_record is None:
            raise ValueError("Invalid value for `has_header_record`, must not be `None`")

        self._has_header_record = has_header_record

    @property
    def ignore_header_record(self):
        """Gets the ignore_header_record of this InputFileReadCsvConfiguration.

        Indicate if the importation should not use the csv column name from the file

        :return: The ignore_header_record of this InputFileReadCsvConfiguration.
        :rtype: bool
        """
        return self._ignore_header_record

    @ignore_header_record.setter
    def ignore_header_record(self, ignore_header_record):
        """Sets the ignore_header_record of this InputFileReadCsvConfiguration.

        Indicate if the importation should not use the csv column name from the file

        :param ignore_header_record: The ignore_header_record of this InputFileReadCsvConfiguration.
        :type ignore_header_record: bool
        """
        if ignore_header_record is None:
            raise ValueError("Invalid value for `ignore_header_record`, must not be `None`")

        self._ignore_header_record = ignore_header_record
