# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_by_day import ReportByDay
from openapi_server.models.report_by_day_global import ReportByDayGlobal
from openapi_server import util


class ReportByDayResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, days: List[ReportByDay]=None, global_performance_indicators: ReportByDayGlobal=None):
        """ReportByDayResponse - a model defined in OpenAPI

        :param currency_code: The currency_code of this ReportByDayResponse.
        :param days: The days of this ReportByDayResponse.
        :param global_performance_indicators: The global_performance_indicators of this ReportByDayResponse.
        """
        self.openapi_types = {
            'currency_code': str,
            'days': List[ReportByDay],
            'global_performance_indicators': ReportByDayGlobal
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'days': 'days',
            'global_performance_indicators': 'globalPerformanceIndicators'
        }

        self._currency_code = currency_code
        self._days = days
        self._global_performance_indicators = global_performance_indicators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByDayResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByDayResponse of this ReportByDayResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this ReportByDayResponse.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :return: The currency_code of this ReportByDayResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ReportByDayResponse.

        The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a> 

        :param currency_code: The currency_code of this ReportByDayResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def days(self):
        """Gets the days of this ReportByDayResponse.


        :return: The days of this ReportByDayResponse.
        :rtype: List[ReportByDay]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ReportByDayResponse.


        :param days: The days of this ReportByDayResponse.
        :type days: List[ReportByDay]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")

        self._days = days

    @property
    def global_performance_indicators(self):
        """Gets the global_performance_indicators of this ReportByDayResponse.


        :return: The global_performance_indicators of this ReportByDayResponse.
        :rtype: ReportByDayGlobal
        """
        return self._global_performance_indicators

    @global_performance_indicators.setter
    def global_performance_indicators(self, global_performance_indicators):
        """Sets the global_performance_indicators of this ReportByDayResponse.


        :param global_performance_indicators: The global_performance_indicators of this ReportByDayResponse.
        :type global_performance_indicators: ReportByDayGlobal
        """
        if global_performance_indicators is None:
            raise ValueError("Invalid value for `global_performance_indicators`, must not be `None`")

        self._global_performance_indicators = global_performance_indicators
