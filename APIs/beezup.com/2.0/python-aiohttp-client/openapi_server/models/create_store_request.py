# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_iso_code_alpha3: str=None, id: str=None, name: str=None, sectors: List[str]=None, url: str=None):
        """CreateStoreRequest - a model defined in OpenAPI

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this CreateStoreRequest.
        :param id: The id of this CreateStoreRequest.
        :param name: The name of this CreateStoreRequest.
        :param sectors: The sectors of this CreateStoreRequest.
        :param url: The url of this CreateStoreRequest.
        """
        self.openapi_types = {
            'country_iso_code_alpha3': str,
            'id': str,
            'name': str,
            'sectors': List[str],
            'url': str
        }

        self.attribute_map = {
            'country_iso_code_alpha3': 'countryIsoCodeAlpha3',
            'id': 'id',
            'name': 'name',
            'sectors': 'sectors',
            'url': 'url'
        }

        self._country_iso_code_alpha3 = country_iso_code_alpha3
        self._id = id
        self._name = name
        self._sectors = sectors
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createStoreRequest of this CreateStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_iso_code_alpha3(self):
        """Gets the country_iso_code_alpha3 of this CreateStoreRequest.

        The country iso code alpha 3 based on the list of values /user/lov/StoreCountry

        :return: The country_iso_code_alpha3 of this CreateStoreRequest.
        :rtype: str
        """
        return self._country_iso_code_alpha3

    @country_iso_code_alpha3.setter
    def country_iso_code_alpha3(self, country_iso_code_alpha3):
        """Sets the country_iso_code_alpha3 of this CreateStoreRequest.

        The country iso code alpha 3 based on the list of values /user/lov/StoreCountry

        :param country_iso_code_alpha3: The country_iso_code_alpha3 of this CreateStoreRequest.
        :type country_iso_code_alpha3: str
        """
        if country_iso_code_alpha3 is None:
            raise ValueError("Invalid value for `country_iso_code_alpha3`, must not be `None`")

        self._country_iso_code_alpha3 = country_iso_code_alpha3

    @property
    def id(self):
        """Gets the id of this CreateStoreRequest.

        The store identifier

        :return: The id of this CreateStoreRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateStoreRequest.

        The store identifier

        :param id: The id of this CreateStoreRequest.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateStoreRequest.

        The store name. Must be unique.

        :return: The name of this CreateStoreRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStoreRequest.

        The store name. Must be unique.

        :param name: The name of this CreateStoreRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sectors(self):
        """Gets the sectors of this CreateStoreRequest.

        The store's sectors based on the list of values /user/lov/ParamSector

        :return: The sectors of this CreateStoreRequest.
        :rtype: List[str]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """Sets the sectors of this CreateStoreRequest.

        The store's sectors based on the list of values /user/lov/ParamSector

        :param sectors: The sectors of this CreateStoreRequest.
        :type sectors: List[str]
        """
        if sectors is None:
            raise ValueError("Invalid value for `sectors`, must not be `None`")

        self._sectors = sectors

    @property
    def url(self):
        """Gets the url of this CreateStoreRequest.

        The url of your store

        :return: The url of this CreateStoreRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateStoreRequest.

        The url of your store

        :param url: The url of this CreateStoreRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', url):
            raise ValueError("Invalid value for `url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._url = url
