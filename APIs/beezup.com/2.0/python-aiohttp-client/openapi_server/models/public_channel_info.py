# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicChannelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, home_url: str=None, logo_url: str=None, name: str=None, sectors: List[str]=None, types: List[str]=None):
        """PublicChannelInfo - a model defined in OpenAPI

        :param home_url: The home_url of this PublicChannelInfo.
        :param logo_url: The logo_url of this PublicChannelInfo.
        :param name: The name of this PublicChannelInfo.
        :param sectors: The sectors of this PublicChannelInfo.
        :param types: The types of this PublicChannelInfo.
        """
        self.openapi_types = {
            'home_url': str,
            'logo_url': str,
            'name': str,
            'sectors': List[str],
            'types': List[str]
        }

        self.attribute_map = {
            'home_url': 'homeUrl',
            'logo_url': 'logoUrl',
            'name': 'name',
            'sectors': 'sectors',
            'types': 'types'
        }

        self._home_url = home_url
        self._logo_url = logo_url
        self._name = name
        self._sectors = sectors
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicChannelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The publicChannelInfo of this PublicChannelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def home_url(self):
        """Gets the home_url of this PublicChannelInfo.

        The channel home url

        :return: The home_url of this PublicChannelInfo.
        :rtype: str
        """
        return self._home_url

    @home_url.setter
    def home_url(self, home_url):
        """Sets the home_url of this PublicChannelInfo.

        The channel home url

        :param home_url: The home_url of this PublicChannelInfo.
        :type home_url: str
        """
        if home_url is None:
            raise ValueError("Invalid value for `home_url`, must not be `None`")

        self._home_url = home_url

    @property
    def logo_url(self):
        """Gets the logo_url of this PublicChannelInfo.

        The channel logo url

        :return: The logo_url of this PublicChannelInfo.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PublicChannelInfo.

        The channel logo url

        :param logo_url: The logo_url of this PublicChannelInfo.
        :type logo_url: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this PublicChannelInfo.

        The channel name

        :return: The name of this PublicChannelInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicChannelInfo.

        The channel name

        :param name: The name of this PublicChannelInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sectors(self):
        """Gets the sectors of this PublicChannelInfo.

        The sector list related to a channel

        :return: The sectors of this PublicChannelInfo.
        :rtype: List[str]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """Sets the sectors of this PublicChannelInfo.

        The sector list related to a channel

        :param sectors: The sectors of this PublicChannelInfo.
        :type sectors: List[str]
        """

        self._sectors = sectors

    @property
    def types(self):
        """Gets the types of this PublicChannelInfo.

        The type list related to a channel

        :return: The types of this PublicChannelInfo.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this PublicChannelInfo.

        The type list related to a channel

        :param types: The types of this PublicChannelInfo.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
