# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_included_and_variable_price import ClickIncludedAndVariablePrice
from openapi_server import util


class VariableModelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, click_included_and_variable_prices: List[ClickIncludedAndVariablePrice]=None, overflow_click_count: int=None, overflow_click_price: float=None):
        """VariableModelInfo - a model defined in OpenAPI

        :param click_included_and_variable_prices: The click_included_and_variable_prices of this VariableModelInfo.
        :param overflow_click_count: The overflow_click_count of this VariableModelInfo.
        :param overflow_click_price: The overflow_click_price of this VariableModelInfo.
        """
        self.openapi_types = {
            'click_included_and_variable_prices': List[ClickIncludedAndVariablePrice],
            'overflow_click_count': int,
            'overflow_click_price': float
        }

        self.attribute_map = {
            'click_included_and_variable_prices': 'clickIncludedAndVariablePrices',
            'overflow_click_count': 'overflowClickCount',
            'overflow_click_price': 'overflowClickPrice'
        }

        self._click_included_and_variable_prices = click_included_and_variable_prices
        self._overflow_click_count = overflow_click_count
        self._overflow_click_price = overflow_click_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariableModelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The variableModelInfo of this VariableModelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def click_included_and_variable_prices(self):
        """Gets the click_included_and_variable_prices of this VariableModelInfo.

        Click included with variable pricing information

        :return: The click_included_and_variable_prices of this VariableModelInfo.
        :rtype: List[ClickIncludedAndVariablePrice]
        """
        return self._click_included_and_variable_prices

    @click_included_and_variable_prices.setter
    def click_included_and_variable_prices(self, click_included_and_variable_prices):
        """Sets the click_included_and_variable_prices of this VariableModelInfo.

        Click included with variable pricing information

        :param click_included_and_variable_prices: The click_included_and_variable_prices of this VariableModelInfo.
        :type click_included_and_variable_prices: List[ClickIncludedAndVariablePrice]
        """
        if click_included_and_variable_prices is None:
            raise ValueError("Invalid value for `click_included_and_variable_prices`, must not be `None`")

        self._click_included_and_variable_prices = click_included_and_variable_prices

    @property
    def overflow_click_count(self):
        """Gets the overflow_click_count of this VariableModelInfo.

        The overflow click count

        :return: The overflow_click_count of this VariableModelInfo.
        :rtype: int
        """
        return self._overflow_click_count

    @overflow_click_count.setter
    def overflow_click_count(self, overflow_click_count):
        """Sets the overflow_click_count of this VariableModelInfo.

        The overflow click count

        :param overflow_click_count: The overflow_click_count of this VariableModelInfo.
        :type overflow_click_count: int
        """
        if overflow_click_count is None:
            raise ValueError("Invalid value for `overflow_click_count`, must not be `None`")

        self._overflow_click_count = overflow_click_count

    @property
    def overflow_click_price(self):
        """Gets the overflow_click_price of this VariableModelInfo.

        The overflow click price

        :return: The overflow_click_price of this VariableModelInfo.
        :rtype: float
        """
        return self._overflow_click_price

    @overflow_click_price.setter
    def overflow_click_price(self, overflow_click_price):
        """Sets the overflow_click_price of this VariableModelInfo.

        The overflow click price

        :param overflow_click_price: The overflow_click_price of this VariableModelInfo.
        :type overflow_click_price: float
        """
        if overflow_click_price is None:
            raise ValueError("Invalid value for `overflow_click_price`, must not be `None`")

        self._overflow_click_price = overflow_click_price
