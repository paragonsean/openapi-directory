# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumption_availability_status import ConsumptionAvailabilityStatus
from openapi_server.models.error_response_message import ErrorResponseMessage
from openapi_server.models.subscription_status import SubscriptionStatus
import re
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_health_status: ConsumptionAvailabilityStatus=None, consumer_last_request_sent_uri: str=None, consumer_unvailable_since_utc_date: datetime=None, id: str=None, last_error_message: ErrorResponseMessage=None, last_order_pushed_modification_utc_date: datetime=None, last_retry_utc_date: datetime=None, last_successful_order_pushed_utc_date: datetime=None, max_retry_count: int=None, merchant_application_name: str=None, merchant_application_version: str='1.0', merchant_email_alert: str=None, name: str=None, next_scheduled_retry_utc_date: datetime=None, recover_begin_period_order_last_modification_utc_date: datetime=None, recover_end_period_order_last_modification_utc_date: datetime=None, retry_count: int=None, status: SubscriptionStatus=None, target_url: str=None):
        """Subscription - a model defined in OpenAPI

        :param consumer_health_status: The consumer_health_status of this Subscription.
        :param consumer_last_request_sent_uri: The consumer_last_request_sent_uri of this Subscription.
        :param consumer_unvailable_since_utc_date: The consumer_unvailable_since_utc_date of this Subscription.
        :param id: The id of this Subscription.
        :param last_error_message: The last_error_message of this Subscription.
        :param last_order_pushed_modification_utc_date: The last_order_pushed_modification_utc_date of this Subscription.
        :param last_retry_utc_date: The last_retry_utc_date of this Subscription.
        :param last_successful_order_pushed_utc_date: The last_successful_order_pushed_utc_date of this Subscription.
        :param max_retry_count: The max_retry_count of this Subscription.
        :param merchant_application_name: The merchant_application_name of this Subscription.
        :param merchant_application_version: The merchant_application_version of this Subscription.
        :param merchant_email_alert: The merchant_email_alert of this Subscription.
        :param name: The name of this Subscription.
        :param next_scheduled_retry_utc_date: The next_scheduled_retry_utc_date of this Subscription.
        :param recover_begin_period_order_last_modification_utc_date: The recover_begin_period_order_last_modification_utc_date of this Subscription.
        :param recover_end_period_order_last_modification_utc_date: The recover_end_period_order_last_modification_utc_date of this Subscription.
        :param retry_count: The retry_count of this Subscription.
        :param status: The status of this Subscription.
        :param target_url: The target_url of this Subscription.
        """
        self.openapi_types = {
            'consumer_health_status': ConsumptionAvailabilityStatus,
            'consumer_last_request_sent_uri': str,
            'consumer_unvailable_since_utc_date': datetime,
            'id': str,
            'last_error_message': ErrorResponseMessage,
            'last_order_pushed_modification_utc_date': datetime,
            'last_retry_utc_date': datetime,
            'last_successful_order_pushed_utc_date': datetime,
            'max_retry_count': int,
            'merchant_application_name': str,
            'merchant_application_version': str,
            'merchant_email_alert': str,
            'name': str,
            'next_scheduled_retry_utc_date': datetime,
            'recover_begin_period_order_last_modification_utc_date': datetime,
            'recover_end_period_order_last_modification_utc_date': datetime,
            'retry_count': int,
            'status': SubscriptionStatus,
            'target_url': str
        }

        self.attribute_map = {
            'consumer_health_status': 'consumerHealthStatus',
            'consumer_last_request_sent_uri': 'consumerLastRequestSentUri',
            'consumer_unvailable_since_utc_date': 'consumerUnvailableSinceUtcDate',
            'id': 'id',
            'last_error_message': 'lastErrorMessage',
            'last_order_pushed_modification_utc_date': 'lastOrderPushedModificationUtcDate',
            'last_retry_utc_date': 'lastRetryUtcDate',
            'last_successful_order_pushed_utc_date': 'lastSuccessfulOrderPushedUtcDate',
            'max_retry_count': 'maxRetryCount',
            'merchant_application_name': 'merchantApplicationName',
            'merchant_application_version': 'merchantApplicationVersion',
            'merchant_email_alert': 'merchantEmailAlert',
            'name': 'name',
            'next_scheduled_retry_utc_date': 'nextScheduledRetryUtcDate',
            'recover_begin_period_order_last_modification_utc_date': 'recoverBeginPeriodOrderLastModificationUtcDate',
            'recover_end_period_order_last_modification_utc_date': 'recoverEndPeriodOrderLastModificationUtcDate',
            'retry_count': 'retryCount',
            'status': 'status',
            'target_url': 'targetUrl'
        }

        self._consumer_health_status = consumer_health_status
        self._consumer_last_request_sent_uri = consumer_last_request_sent_uri
        self._consumer_unvailable_since_utc_date = consumer_unvailable_since_utc_date
        self._id = id
        self._last_error_message = last_error_message
        self._last_order_pushed_modification_utc_date = last_order_pushed_modification_utc_date
        self._last_retry_utc_date = last_retry_utc_date
        self._last_successful_order_pushed_utc_date = last_successful_order_pushed_utc_date
        self._max_retry_count = max_retry_count
        self._merchant_application_name = merchant_application_name
        self._merchant_application_version = merchant_application_version
        self._merchant_email_alert = merchant_email_alert
        self._name = name
        self._next_scheduled_retry_utc_date = next_scheduled_retry_utc_date
        self._recover_begin_period_order_last_modification_utc_date = recover_begin_period_order_last_modification_utc_date
        self._recover_end_period_order_last_modification_utc_date = recover_end_period_order_last_modification_utc_date
        self._retry_count = retry_count
        self._status = status
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_health_status(self):
        """Gets the consumer_health_status of this Subscription.


        :return: The consumer_health_status of this Subscription.
        :rtype: ConsumptionAvailabilityStatus
        """
        return self._consumer_health_status

    @consumer_health_status.setter
    def consumer_health_status(self, consumer_health_status):
        """Sets the consumer_health_status of this Subscription.


        :param consumer_health_status: The consumer_health_status of this Subscription.
        :type consumer_health_status: ConsumptionAvailabilityStatus
        """

        self._consumer_health_status = consumer_health_status

    @property
    def consumer_last_request_sent_uri(self):
        """Gets the consumer_last_request_sent_uri of this Subscription.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The consumer_last_request_sent_uri of this Subscription.
        :rtype: str
        """
        return self._consumer_last_request_sent_uri

    @consumer_last_request_sent_uri.setter
    def consumer_last_request_sent_uri(self, consumer_last_request_sent_uri):
        """Sets the consumer_last_request_sent_uri of this Subscription.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param consumer_last_request_sent_uri: The consumer_last_request_sent_uri of this Subscription.
        :type consumer_last_request_sent_uri: str
        """
        if consumer_last_request_sent_uri is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', consumer_last_request_sent_uri):
            raise ValueError("Invalid value for `consumer_last_request_sent_uri`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._consumer_last_request_sent_uri = consumer_last_request_sent_uri

    @property
    def consumer_unvailable_since_utc_date(self):
        """Gets the consumer_unvailable_since_utc_date of this Subscription.

        This date indicates since when the subscription consumer is unavailable

        :return: The consumer_unvailable_since_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._consumer_unvailable_since_utc_date

    @consumer_unvailable_since_utc_date.setter
    def consumer_unvailable_since_utc_date(self, consumer_unvailable_since_utc_date):
        """Sets the consumer_unvailable_since_utc_date of this Subscription.

        This date indicates since when the subscription consumer is unavailable

        :param consumer_unvailable_since_utc_date: The consumer_unvailable_since_utc_date of this Subscription.
        :type consumer_unvailable_since_utc_date: datetime
        """

        self._consumer_unvailable_since_utc_date = consumer_unvailable_since_utc_date

    @property
    def id(self):
        """Gets the id of this Subscription.

        The identifier of the subscription to the orders for a merchant

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        The identifier of the subscription to the orders for a merchant

        :param id: The id of this Subscription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_error_message(self):
        """Gets the last_error_message of this Subscription.


        :return: The last_error_message of this Subscription.
        :rtype: ErrorResponseMessage
        """
        return self._last_error_message

    @last_error_message.setter
    def last_error_message(self, last_error_message):
        """Sets the last_error_message of this Subscription.


        :param last_error_message: The last_error_message of this Subscription.
        :type last_error_message: ErrorResponseMessage
        """

        self._last_error_message = last_error_message

    @property
    def last_order_pushed_modification_utc_date(self):
        """Gets the last_order_pushed_modification_utc_date of this Subscription.

        This modification date correspond to the last order pushed by your subscription consumer

        :return: The last_order_pushed_modification_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._last_order_pushed_modification_utc_date

    @last_order_pushed_modification_utc_date.setter
    def last_order_pushed_modification_utc_date(self, last_order_pushed_modification_utc_date):
        """Sets the last_order_pushed_modification_utc_date of this Subscription.

        This modification date correspond to the last order pushed by your subscription consumer

        :param last_order_pushed_modification_utc_date: The last_order_pushed_modification_utc_date of this Subscription.
        :type last_order_pushed_modification_utc_date: datetime
        """

        self._last_order_pushed_modification_utc_date = last_order_pushed_modification_utc_date

    @property
    def last_retry_utc_date(self):
        """Gets the last_retry_utc_date of this Subscription.

        The last date we retry to send orders

        :return: The last_retry_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._last_retry_utc_date

    @last_retry_utc_date.setter
    def last_retry_utc_date(self, last_retry_utc_date):
        """Sets the last_retry_utc_date of this Subscription.

        The last date we retry to send orders

        :param last_retry_utc_date: The last_retry_utc_date of this Subscription.
        :type last_retry_utc_date: datetime
        """

        self._last_retry_utc_date = last_retry_utc_date

    @property
    def last_successful_order_pushed_utc_date(self):
        """Gets the last_successful_order_pushed_utc_date of this Subscription.

        The date of the last pushed order successfully received by your subscription consumer

        :return: The last_successful_order_pushed_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._last_successful_order_pushed_utc_date

    @last_successful_order_pushed_utc_date.setter
    def last_successful_order_pushed_utc_date(self, last_successful_order_pushed_utc_date):
        """Sets the last_successful_order_pushed_utc_date of this Subscription.

        The date of the last pushed order successfully received by your subscription consumer

        :param last_successful_order_pushed_utc_date: The last_successful_order_pushed_utc_date of this Subscription.
        :type last_successful_order_pushed_utc_date: datetime
        """

        self._last_successful_order_pushed_utc_date = last_successful_order_pushed_utc_date

    @property
    def max_retry_count(self):
        """Gets the max_retry_count of this Subscription.

        The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :return: The max_retry_count of this Subscription.
        :rtype: int
        """
        return self._max_retry_count

    @max_retry_count.setter
    def max_retry_count(self, max_retry_count):
        """Sets the max_retry_count of this Subscription.

        The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :param max_retry_count: The max_retry_count of this Subscription.
        :type max_retry_count: int
        """

        self._max_retry_count = max_retry_count

    @property
    def merchant_application_name(self):
        """Gets the merchant_application_name of this Subscription.

        The name of your application

        :return: The merchant_application_name of this Subscription.
        :rtype: str
        """
        return self._merchant_application_name

    @merchant_application_name.setter
    def merchant_application_name(self, merchant_application_name):
        """Sets the merchant_application_name of this Subscription.

        The name of your application

        :param merchant_application_name: The merchant_application_name of this Subscription.
        :type merchant_application_name: str
        """
        if merchant_application_name is None:
            raise ValueError("Invalid value for `merchant_application_name`, must not be `None`")

        self._merchant_application_name = merchant_application_name

    @property
    def merchant_application_version(self):
        """Gets the merchant_application_version of this Subscription.

        The version of your application

        :return: The merchant_application_version of this Subscription.
        :rtype: str
        """
        return self._merchant_application_version

    @merchant_application_version.setter
    def merchant_application_version(self, merchant_application_version):
        """Sets the merchant_application_version of this Subscription.

        The version of your application

        :param merchant_application_version: The merchant_application_version of this Subscription.
        :type merchant_application_version: str
        """
        if merchant_application_version is None:
            raise ValueError("Invalid value for `merchant_application_version`, must not be `None`")

        self._merchant_application_version = merchant_application_version

    @property
    def merchant_email_alert(self):
        """Gets the merchant_email_alert of this Subscription.

        The email

        :return: The merchant_email_alert of this Subscription.
        :rtype: str
        """
        return self._merchant_email_alert

    @merchant_email_alert.setter
    def merchant_email_alert(self, merchant_email_alert):
        """Sets the merchant_email_alert of this Subscription.

        The email

        :param merchant_email_alert: The merchant_email_alert of this Subscription.
        :type merchant_email_alert: str
        """
        if merchant_email_alert is not None and not re.search(r'^(.+)@(.+)$', merchant_email_alert):
            raise ValueError("Invalid value for `merchant_email_alert`, must be a follow pattern or equal to `/^(.+)@(.+)$/`")

        self._merchant_email_alert = merchant_email_alert

    @property
    def name(self):
        """Gets the name of this Subscription.

        The subscription name you want to use

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        The subscription name you want to use

        :param name: The name of this Subscription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def next_scheduled_retry_utc_date(self):
        """Gets the next_scheduled_retry_utc_date of this Subscription.

        The next scheduled  date we retry to send orders

        :return: The next_scheduled_retry_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._next_scheduled_retry_utc_date

    @next_scheduled_retry_utc_date.setter
    def next_scheduled_retry_utc_date(self, next_scheduled_retry_utc_date):
        """Sets the next_scheduled_retry_utc_date of this Subscription.

        The next scheduled  date we retry to send orders

        :param next_scheduled_retry_utc_date: The next_scheduled_retry_utc_date of this Subscription.
        :type next_scheduled_retry_utc_date: datetime
        """

        self._next_scheduled_retry_utc_date = next_scheduled_retry_utc_date

    @property
    def recover_begin_period_order_last_modification_utc_date(self):
        """Gets the recover_begin_period_order_last_modification_utc_date of this Subscription.

        Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.

        :return: The recover_begin_period_order_last_modification_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._recover_begin_period_order_last_modification_utc_date

    @recover_begin_period_order_last_modification_utc_date.setter
    def recover_begin_period_order_last_modification_utc_date(self, recover_begin_period_order_last_modification_utc_date):
        """Sets the recover_begin_period_order_last_modification_utc_date of this Subscription.

        Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.

        :param recover_begin_period_order_last_modification_utc_date: The recover_begin_period_order_last_modification_utc_date of this Subscription.
        :type recover_begin_period_order_last_modification_utc_date: datetime
        """

        self._recover_begin_period_order_last_modification_utc_date = recover_begin_period_order_last_modification_utc_date

    @property
    def recover_end_period_order_last_modification_utc_date(self):
        """Gets the recover_end_period_order_last_modification_utc_date of this Subscription.

        Recover existing orders using the begin and the end period order last modification date. Otherwise, you will receive new/updated orders in real-time. 

        :return: The recover_end_period_order_last_modification_utc_date of this Subscription.
        :rtype: datetime
        """
        return self._recover_end_period_order_last_modification_utc_date

    @recover_end_period_order_last_modification_utc_date.setter
    def recover_end_period_order_last_modification_utc_date(self, recover_end_period_order_last_modification_utc_date):
        """Sets the recover_end_period_order_last_modification_utc_date of this Subscription.

        Recover existing orders using the begin and the end period order last modification date. Otherwise, you will receive new/updated orders in real-time. 

        :param recover_end_period_order_last_modification_utc_date: The recover_end_period_order_last_modification_utc_date of this Subscription.
        :type recover_end_period_order_last_modification_utc_date: datetime
        """

        self._recover_end_period_order_last_modification_utc_date = recover_end_period_order_last_modification_utc_date

    @property
    def retry_count(self):
        """Gets the retry_count of this Subscription.

        The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :return: The retry_count of this Subscription.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this Subscription.

        The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.

        :param retry_count: The retry_count of this Subscription.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def status(self):
        """Gets the status of this Subscription.


        :return: The status of this Subscription.
        :rtype: SubscriptionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.


        :param status: The status of this Subscription.
        :type status: SubscriptionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def target_url(self):
        """Gets the target_url of this Subscription.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The target_url of this Subscription.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this Subscription.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param target_url: The target_url of this Subscription.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")
        if target_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', target_url):
            raise ValueError("Invalid value for `target_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._target_url = target_url
