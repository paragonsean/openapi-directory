# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.functionality import Functionality
from openapi_server.models.standard_offer import StandardOffer
from openapi_server.models.standard_offers_links import StandardOffersLinks
from openapi_server import util


class StandardOffers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functionalities: List[Functionality]=None, links: StandardOffersLinks=None, offers: List[StandardOffer]=None):
        """StandardOffers - a model defined in OpenAPI

        :param functionalities: The functionalities of this StandardOffers.
        :param links: The links of this StandardOffers.
        :param offers: The offers of this StandardOffers.
        """
        self.openapi_types = {
            'functionalities': List[Functionality],
            'links': StandardOffersLinks,
            'offers': List[StandardOffer]
        }

        self.attribute_map = {
            'functionalities': 'functionalities',
            'links': 'links',
            'offers': 'offers'
        }

        self._functionalities = functionalities
        self._links = links
        self._offers = offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardOffers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The standardOffers of this StandardOffers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functionalities(self):
        """Gets the functionalities of this StandardOffers.

        All functionalities...

        :return: The functionalities of this StandardOffers.
        :rtype: List[Functionality]
        """
        return self._functionalities

    @functionalities.setter
    def functionalities(self, functionalities):
        """Sets the functionalities of this StandardOffers.

        All functionalities...

        :param functionalities: The functionalities of this StandardOffers.
        :type functionalities: List[Functionality]
        """
        if functionalities is None:
            raise ValueError("Invalid value for `functionalities`, must not be `None`")

        self._functionalities = functionalities

    @property
    def links(self):
        """Gets the links of this StandardOffers.


        :return: The links of this StandardOffers.
        :rtype: StandardOffersLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StandardOffers.


        :param links: The links of this StandardOffers.
        :type links: StandardOffersLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def offers(self):
        """Gets the offers of this StandardOffers.

        All standard offers

        :return: The offers of this StandardOffers.
        :rtype: List[StandardOffer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this StandardOffers.

        All standard offers

        :param offers: The offers of this StandardOffers.
        :type offers: List[StandardOffer]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")

        self._offers = offers
