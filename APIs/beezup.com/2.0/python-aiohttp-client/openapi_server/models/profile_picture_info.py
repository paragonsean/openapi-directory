# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_picture_selected import ProfilePictureSelected
import re
from openapi_server import util


class ProfilePictureInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_picture_selected: ProfilePictureSelected=None, profile_picture_url: str=None):
        """ProfilePictureInfo - a model defined in OpenAPI

        :param profile_picture_selected: The profile_picture_selected of this ProfilePictureInfo.
        :param profile_picture_url: The profile_picture_url of this ProfilePictureInfo.
        """
        self.openapi_types = {
            'profile_picture_selected': ProfilePictureSelected,
            'profile_picture_url': str
        }

        self.attribute_map = {
            'profile_picture_selected': 'profilePictureSelected',
            'profile_picture_url': 'profilePictureUrl'
        }

        self._profile_picture_selected = profile_picture_selected
        self._profile_picture_url = profile_picture_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfilePictureInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The profilePictureInfo of this ProfilePictureInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_picture_selected(self):
        """Gets the profile_picture_selected of this ProfilePictureInfo.


        :return: The profile_picture_selected of this ProfilePictureInfo.
        :rtype: ProfilePictureSelected
        """
        return self._profile_picture_selected

    @profile_picture_selected.setter
    def profile_picture_selected(self, profile_picture_selected):
        """Sets the profile_picture_selected of this ProfilePictureInfo.


        :param profile_picture_selected: The profile_picture_selected of this ProfilePictureInfo.
        :type profile_picture_selected: ProfilePictureSelected
        """
        if profile_picture_selected is None:
            raise ValueError("Invalid value for `profile_picture_selected`, must not be `None`")

        self._profile_picture_selected = profile_picture_selected

    @property
    def profile_picture_url(self):
        """Gets the profile_picture_url of this ProfilePictureInfo.

        Indicate the url of your picture profil

        :return: The profile_picture_url of this ProfilePictureInfo.
        :rtype: str
        """
        return self._profile_picture_url

    @profile_picture_url.setter
    def profile_picture_url(self, profile_picture_url):
        """Sets the profile_picture_url of this ProfilePictureInfo.

        Indicate the url of your picture profil

        :param profile_picture_url: The profile_picture_url of this ProfilePictureInfo.
        :type profile_picture_url: str
        """
        if profile_picture_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', profile_picture_url):
            raise ValueError("Invalid value for `profile_picture_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._profile_picture_url = profile_picture_url
