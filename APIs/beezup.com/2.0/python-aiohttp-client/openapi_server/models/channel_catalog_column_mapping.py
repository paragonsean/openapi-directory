# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelCatalogColumnMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_column_id: str=None, channel_category_path: List[str]=None, channel_column_id: str=None):
        """ChannelCatalogColumnMapping - a model defined in OpenAPI

        :param catalog_column_id: The catalog_column_id of this ChannelCatalogColumnMapping.
        :param channel_category_path: The channel_category_path of this ChannelCatalogColumnMapping.
        :param channel_column_id: The channel_column_id of this ChannelCatalogColumnMapping.
        """
        self.openapi_types = {
            'catalog_column_id': str,
            'channel_category_path': List[str],
            'channel_column_id': str
        }

        self.attribute_map = {
            'catalog_column_id': 'catalogColumnId',
            'channel_category_path': 'channelCategoryPath',
            'channel_column_id': 'channelColumnId'
        }

        self._catalog_column_id = catalog_column_id
        self._channel_category_path = channel_category_path
        self._channel_column_id = channel_column_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogColumnMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogColumnMapping of this ChannelCatalogColumnMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_column_id(self):
        """Gets the catalog_column_id of this ChannelCatalogColumnMapping.

        The catalog column identifier (catalog or custom column)

        :return: The catalog_column_id of this ChannelCatalogColumnMapping.
        :rtype: str
        """
        return self._catalog_column_id

    @catalog_column_id.setter
    def catalog_column_id(self, catalog_column_id):
        """Sets the catalog_column_id of this ChannelCatalogColumnMapping.

        The catalog column identifier (catalog or custom column)

        :param catalog_column_id: The catalog_column_id of this ChannelCatalogColumnMapping.
        :type catalog_column_id: str
        """

        self._catalog_column_id = catalog_column_id

    @property
    def channel_category_path(self):
        """Gets the channel_category_path of this ChannelCatalogColumnMapping.

        The channel category path

        :return: The channel_category_path of this ChannelCatalogColumnMapping.
        :rtype: List[str]
        """
        return self._channel_category_path

    @channel_category_path.setter
    def channel_category_path(self, channel_category_path):
        """Sets the channel_category_path of this ChannelCatalogColumnMapping.

        The channel category path

        :param channel_category_path: The channel_category_path of this ChannelCatalogColumnMapping.
        :type channel_category_path: List[str]
        """

        self._channel_category_path = channel_category_path

    @property
    def channel_column_id(self):
        """Gets the channel_column_id of this ChannelCatalogColumnMapping.

        The channel column identifier

        :return: The channel_column_id of this ChannelCatalogColumnMapping.
        :rtype: str
        """
        return self._channel_column_id

    @channel_column_id.setter
    def channel_column_id(self, channel_column_id):
        """Sets the channel_column_id of this ChannelCatalogColumnMapping.

        The channel column identifier

        :param channel_column_id: The channel_column_id of this ChannelCatalogColumnMapping.
        :type channel_column_id: str
        """
        if channel_column_id is None:
            raise ValueError("Invalid value for `channel_column_id`, must not be `None`")

        self._channel_column_id = channel_column_id
