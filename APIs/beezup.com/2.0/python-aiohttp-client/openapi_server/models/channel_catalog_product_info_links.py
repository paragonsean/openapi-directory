# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_disable_channel_catalog_product_link import LinksDisableChannelCatalogProductLink
from openapi_server.models.links_get_channel_catalog_product_info_link import LinksGetChannelCatalogProductInfoLink
from openapi_server.models.links_override_channel_catalog_product_values_link import LinksOverrideChannelCatalogProductValuesLink
from openapi_server.models.links_reenable_channel_catalog_product_link import LinksReenableChannelCatalogProductLink
from openapi_server import util


class ChannelCatalogProductInfoLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable: LinksDisableChannelCatalogProductLink=None, override: LinksOverrideChannelCatalogProductValuesLink=None, reenable: LinksReenableChannelCatalogProductLink=None, _self: LinksGetChannelCatalogProductInfoLink=None):
        """ChannelCatalogProductInfoLinks - a model defined in OpenAPI

        :param disable: The disable of this ChannelCatalogProductInfoLinks.
        :param override: The override of this ChannelCatalogProductInfoLinks.
        :param reenable: The reenable of this ChannelCatalogProductInfoLinks.
        :param _self: The _self of this ChannelCatalogProductInfoLinks.
        """
        self.openapi_types = {
            'disable': LinksDisableChannelCatalogProductLink,
            'override': LinksOverrideChannelCatalogProductValuesLink,
            'reenable': LinksReenableChannelCatalogProductLink,
            '_self': LinksGetChannelCatalogProductInfoLink
        }

        self.attribute_map = {
            'disable': 'disable',
            'override': 'override',
            'reenable': 'reenable',
            '_self': 'self'
        }

        self._disable = disable
        self._override = override
        self._reenable = reenable
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductInfoLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductInfoLinks of this ChannelCatalogProductInfoLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable(self):
        """Gets the disable of this ChannelCatalogProductInfoLinks.


        :return: The disable of this ChannelCatalogProductInfoLinks.
        :rtype: LinksDisableChannelCatalogProductLink
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this ChannelCatalogProductInfoLinks.


        :param disable: The disable of this ChannelCatalogProductInfoLinks.
        :type disable: LinksDisableChannelCatalogProductLink
        """

        self._disable = disable

    @property
    def override(self):
        """Gets the override of this ChannelCatalogProductInfoLinks.


        :return: The override of this ChannelCatalogProductInfoLinks.
        :rtype: LinksOverrideChannelCatalogProductValuesLink
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this ChannelCatalogProductInfoLinks.


        :param override: The override of this ChannelCatalogProductInfoLinks.
        :type override: LinksOverrideChannelCatalogProductValuesLink
        """
        if override is None:
            raise ValueError("Invalid value for `override`, must not be `None`")

        self._override = override

    @property
    def reenable(self):
        """Gets the reenable of this ChannelCatalogProductInfoLinks.


        :return: The reenable of this ChannelCatalogProductInfoLinks.
        :rtype: LinksReenableChannelCatalogProductLink
        """
        return self._reenable

    @reenable.setter
    def reenable(self, reenable):
        """Sets the reenable of this ChannelCatalogProductInfoLinks.


        :param reenable: The reenable of this ChannelCatalogProductInfoLinks.
        :type reenable: LinksReenableChannelCatalogProductLink
        """

        self._reenable = reenable

    @property
    def _self(self):
        """Gets the _self of this ChannelCatalogProductInfoLinks.


        :return: The _self of this ChannelCatalogProductInfoLinks.
        :rtype: LinksGetChannelCatalogProductInfoLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ChannelCatalogProductInfoLinks.


        :param _self: The _self of this ChannelCatalogProductInfoLinks.
        :type _self: LinksGetChannelCatalogProductInfoLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
