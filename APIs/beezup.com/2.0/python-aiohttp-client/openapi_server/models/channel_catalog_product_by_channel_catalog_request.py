# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelCatalogProductByChannelCatalogRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_catalog_ids: List[str]=None, product_id: str=None, store_id: str=None):
        """ChannelCatalogProductByChannelCatalogRequest - a model defined in OpenAPI

        :param channel_catalog_ids: The channel_catalog_ids of this ChannelCatalogProductByChannelCatalogRequest.
        :param product_id: The product_id of this ChannelCatalogProductByChannelCatalogRequest.
        :param store_id: The store_id of this ChannelCatalogProductByChannelCatalogRequest.
        """
        self.openapi_types = {
            'channel_catalog_ids': List[str],
            'product_id': str,
            'store_id': str
        }

        self.attribute_map = {
            'channel_catalog_ids': 'channelCatalogIds',
            'product_id': 'productId',
            'store_id': 'storeId'
        }

        self._channel_catalog_ids = channel_catalog_ids
        self._product_id = product_id
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogProductByChannelCatalogRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogProductByChannelCatalogRequest of this ChannelCatalogProductByChannelCatalogRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_catalog_ids(self):
        """Gets the channel_catalog_ids of this ChannelCatalogProductByChannelCatalogRequest.

        The list of channel catalog identifier

        :return: The channel_catalog_ids of this ChannelCatalogProductByChannelCatalogRequest.
        :rtype: List[str]
        """
        return self._channel_catalog_ids

    @channel_catalog_ids.setter
    def channel_catalog_ids(self, channel_catalog_ids):
        """Sets the channel_catalog_ids of this ChannelCatalogProductByChannelCatalogRequest.

        The list of channel catalog identifier

        :param channel_catalog_ids: The channel_catalog_ids of this ChannelCatalogProductByChannelCatalogRequest.
        :type channel_catalog_ids: List[str]
        """
        if channel_catalog_ids is None:
            raise ValueError("Invalid value for `channel_catalog_ids`, must not be `None`")

        self._channel_catalog_ids = channel_catalog_ids

    @property
    def product_id(self):
        """Gets the product_id of this ChannelCatalogProductByChannelCatalogRequest.

        The product identifier

        :return: The product_id of this ChannelCatalogProductByChannelCatalogRequest.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ChannelCatalogProductByChannelCatalogRequest.

        The product identifier

        :param product_id: The product_id of this ChannelCatalogProductByChannelCatalogRequest.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def store_id(self):
        """Gets the store_id of this ChannelCatalogProductByChannelCatalogRequest.

        The store identifier

        :return: The store_id of this ChannelCatalogProductByChannelCatalogRequest.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ChannelCatalogProductByChannelCatalogRequest.

        The store identifier

        :param store_id: The store_id of this ChannelCatalogProductByChannelCatalogRequest.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id
