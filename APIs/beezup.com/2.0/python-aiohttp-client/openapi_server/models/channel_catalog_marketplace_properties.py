# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_info_summaries import BeezUPCommonInfoSummaries
from openapi_server.models.channel_catalog_marketplace_properties_links import ChannelCatalogMarketplacePropertiesLinks
from openapi_server.models.channel_catalog_marketplace_property_group import ChannelCatalogMarketplacePropertyGroup
from openapi_server import util


class ChannelCatalogMarketplaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: BeezUPCommonInfoSummaries=None, links: ChannelCatalogMarketplacePropertiesLinks=None, property_groups: List[ChannelCatalogMarketplacePropertyGroup]=None):
        """ChannelCatalogMarketplaceProperties - a model defined in OpenAPI

        :param info: The info of this ChannelCatalogMarketplaceProperties.
        :param links: The links of this ChannelCatalogMarketplaceProperties.
        :param property_groups: The property_groups of this ChannelCatalogMarketplaceProperties.
        """
        self.openapi_types = {
            'info': BeezUPCommonInfoSummaries,
            'links': ChannelCatalogMarketplacePropertiesLinks,
            'property_groups': List[ChannelCatalogMarketplacePropertyGroup]
        }

        self.attribute_map = {
            'info': 'info',
            'links': 'links',
            'property_groups': 'propertyGroups'
        }

        self._info = info
        self._links = links
        self._property_groups = property_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogMarketplaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogMarketplaceProperties of this ChannelCatalogMarketplaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this ChannelCatalogMarketplaceProperties.


        :return: The info of this ChannelCatalogMarketplaceProperties.
        :rtype: BeezUPCommonInfoSummaries
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ChannelCatalogMarketplaceProperties.


        :param info: The info of this ChannelCatalogMarketplaceProperties.
        :type info: BeezUPCommonInfoSummaries
        """

        self._info = info

    @property
    def links(self):
        """Gets the links of this ChannelCatalogMarketplaceProperties.


        :return: The links of this ChannelCatalogMarketplaceProperties.
        :rtype: ChannelCatalogMarketplacePropertiesLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelCatalogMarketplaceProperties.


        :param links: The links of this ChannelCatalogMarketplaceProperties.
        :type links: ChannelCatalogMarketplacePropertiesLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def property_groups(self):
        """Gets the property_groups of this ChannelCatalogMarketplaceProperties.

        The groups settings with constraints

        :return: The property_groups of this ChannelCatalogMarketplaceProperties.
        :rtype: List[ChannelCatalogMarketplacePropertyGroup]
        """
        return self._property_groups

    @property_groups.setter
    def property_groups(self, property_groups):
        """Sets the property_groups of this ChannelCatalogMarketplaceProperties.

        The groups settings with constraints

        :param property_groups: The property_groups of this ChannelCatalogMarketplaceProperties.
        :type property_groups: List[ChannelCatalogMarketplacePropertyGroup]
        """
        if property_groups is None:
            raise ValueError("Invalid value for `property_groups`, must not be `None`")

        self._property_groups = property_groups
