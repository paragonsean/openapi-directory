# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetImportationReportResponseProductMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_count: int=None, detected_count: int=None, duplicated_count: int=None, failed_count: int=None):
        """GetImportationReportResponseProductMetrics - a model defined in OpenAPI

        :param active_count: The active_count of this GetImportationReportResponseProductMetrics.
        :param detected_count: The detected_count of this GetImportationReportResponseProductMetrics.
        :param duplicated_count: The duplicated_count of this GetImportationReportResponseProductMetrics.
        :param failed_count: The failed_count of this GetImportationReportResponseProductMetrics.
        """
        self.openapi_types = {
            'active_count': int,
            'detected_count': int,
            'duplicated_count': int,
            'failed_count': int
        }

        self.attribute_map = {
            'active_count': 'activeCount',
            'detected_count': 'detectedCount',
            'duplicated_count': 'duplicatedCount',
            'failed_count': 'failedCount'
        }

        self._active_count = active_count
        self._detected_count = detected_count
        self._duplicated_count = duplicated_count
        self._failed_count = failed_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImportationReportResponseProductMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getImportationReportResponseProductMetrics of this GetImportationReportResponseProductMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_count(self):
        """Gets the active_count of this GetImportationReportResponseProductMetrics.


        :return: The active_count of this GetImportationReportResponseProductMetrics.
        :rtype: int
        """
        return self._active_count

    @active_count.setter
    def active_count(self, active_count):
        """Sets the active_count of this GetImportationReportResponseProductMetrics.


        :param active_count: The active_count of this GetImportationReportResponseProductMetrics.
        :type active_count: int
        """
        if active_count is None:
            raise ValueError("Invalid value for `active_count`, must not be `None`")

        self._active_count = active_count

    @property
    def detected_count(self):
        """Gets the detected_count of this GetImportationReportResponseProductMetrics.


        :return: The detected_count of this GetImportationReportResponseProductMetrics.
        :rtype: int
        """
        return self._detected_count

    @detected_count.setter
    def detected_count(self, detected_count):
        """Sets the detected_count of this GetImportationReportResponseProductMetrics.


        :param detected_count: The detected_count of this GetImportationReportResponseProductMetrics.
        :type detected_count: int
        """
        if detected_count is None:
            raise ValueError("Invalid value for `detected_count`, must not be `None`")

        self._detected_count = detected_count

    @property
    def duplicated_count(self):
        """Gets the duplicated_count of this GetImportationReportResponseProductMetrics.


        :return: The duplicated_count of this GetImportationReportResponseProductMetrics.
        :rtype: int
        """
        return self._duplicated_count

    @duplicated_count.setter
    def duplicated_count(self, duplicated_count):
        """Sets the duplicated_count of this GetImportationReportResponseProductMetrics.


        :param duplicated_count: The duplicated_count of this GetImportationReportResponseProductMetrics.
        :type duplicated_count: int
        """
        if duplicated_count is None:
            raise ValueError("Invalid value for `duplicated_count`, must not be `None`")

        self._duplicated_count = duplicated_count

    @property
    def failed_count(self):
        """Gets the failed_count of this GetImportationReportResponseProductMetrics.


        :return: The failed_count of this GetImportationReportResponseProductMetrics.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this GetImportationReportResponseProductMetrics.


        :param failed_count: The failed_count of this GetImportationReportResponseProductMetrics.
        :type failed_count: int
        """
        if failed_count is None:
            raise ValueError("Invalid value for `failed_count`, must not be `None`")

        self._failed_count = failed_count
