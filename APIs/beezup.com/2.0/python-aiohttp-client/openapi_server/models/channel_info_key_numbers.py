# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelInfoKeyNumbers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: str=None, products: str=None, stores: str=None, views_per_month: str=None):
        """ChannelInfoKeyNumbers - a model defined in OpenAPI

        :param categories: The categories of this ChannelInfoKeyNumbers.
        :param products: The products of this ChannelInfoKeyNumbers.
        :param stores: The stores of this ChannelInfoKeyNumbers.
        :param views_per_month: The views_per_month of this ChannelInfoKeyNumbers.
        """
        self.openapi_types = {
            'categories': str,
            'products': str,
            'stores': str,
            'views_per_month': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'products': 'products',
            'stores': 'stores',
            'views_per_month': 'viewsPerMonth'
        }

        self._categories = categories
        self._products = products
        self._stores = stores
        self._views_per_month = views_per_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelInfoKeyNumbers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelInfo_keyNumbers of this ChannelInfoKeyNumbers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this ChannelInfoKeyNumbers.

        The estimated category count of the channel

        :return: The categories of this ChannelInfoKeyNumbers.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ChannelInfoKeyNumbers.

        The estimated category count of the channel

        :param categories: The categories of this ChannelInfoKeyNumbers.
        :type categories: str
        """

        self._categories = categories

    @property
    def products(self):
        """Gets the products of this ChannelInfoKeyNumbers.

        The estimated product count of the channel

        :return: The products of this ChannelInfoKeyNumbers.
        :rtype: str
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ChannelInfoKeyNumbers.

        The estimated product count of the channel

        :param products: The products of this ChannelInfoKeyNumbers.
        :type products: str
        """

        self._products = products

    @property
    def stores(self):
        """Gets the stores of this ChannelInfoKeyNumbers.

        The estimated store count of the channel

        :return: The stores of this ChannelInfoKeyNumbers.
        :rtype: str
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this ChannelInfoKeyNumbers.

        The estimated store count of the channel

        :param stores: The stores of this ChannelInfoKeyNumbers.
        :type stores: str
        """

        self._stores = stores

    @property
    def views_per_month(self):
        """Gets the views_per_month of this ChannelInfoKeyNumbers.

        The estimated view count per month of the channel

        :return: The views_per_month of this ChannelInfoKeyNumbers.
        :rtype: str
        """
        return self._views_per_month

    @views_per_month.setter
    def views_per_month(self, views_per_month):
        """Sets the views_per_month of this ChannelInfoKeyNumbers.

        The estimated view count per month of the channel

        :param views_per_month: The views_per_month of this ChannelInfoKeyNumbers.
        :type views_per_month: str
        """

        self._views_per_month = views_per_month
