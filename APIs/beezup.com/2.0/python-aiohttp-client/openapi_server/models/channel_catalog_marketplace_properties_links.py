# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_links_get_external_configuration_page_link import ExternalLinksGetExternalConfigurationPageLink
from openapi_server.models.links_get_channel_catalog_marketplace_properties_link import LinksGetChannelCatalogMarketplacePropertiesLink
from openapi_server.models.links_get_channel_catalog_marketplace_settings_link import LinksGetChannelCatalogMarketplaceSettingsLink
from openapi_server import util


class ChannelCatalogMarketplacePropertiesLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_configuration_page: ExternalLinksGetExternalConfigurationPageLink=None, _self: LinksGetChannelCatalogMarketplacePropertiesLink=None, settings: LinksGetChannelCatalogMarketplaceSettingsLink=None):
        """ChannelCatalogMarketplacePropertiesLinks - a model defined in OpenAPI

        :param external_configuration_page: The external_configuration_page of this ChannelCatalogMarketplacePropertiesLinks.
        :param _self: The _self of this ChannelCatalogMarketplacePropertiesLinks.
        :param settings: The settings of this ChannelCatalogMarketplacePropertiesLinks.
        """
        self.openapi_types = {
            'external_configuration_page': ExternalLinksGetExternalConfigurationPageLink,
            '_self': LinksGetChannelCatalogMarketplacePropertiesLink,
            'settings': LinksGetChannelCatalogMarketplaceSettingsLink
        }

        self.attribute_map = {
            'external_configuration_page': 'externalConfigurationPage',
            '_self': 'self',
            'settings': 'settings'
        }

        self._external_configuration_page = external_configuration_page
        self.__self = _self
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelCatalogMarketplacePropertiesLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelCatalogMarketplacePropertiesLinks of this ChannelCatalogMarketplacePropertiesLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_configuration_page(self):
        """Gets the external_configuration_page of this ChannelCatalogMarketplacePropertiesLinks.


        :return: The external_configuration_page of this ChannelCatalogMarketplacePropertiesLinks.
        :rtype: ExternalLinksGetExternalConfigurationPageLink
        """
        return self._external_configuration_page

    @external_configuration_page.setter
    def external_configuration_page(self, external_configuration_page):
        """Sets the external_configuration_page of this ChannelCatalogMarketplacePropertiesLinks.


        :param external_configuration_page: The external_configuration_page of this ChannelCatalogMarketplacePropertiesLinks.
        :type external_configuration_page: ExternalLinksGetExternalConfigurationPageLink
        """

        self._external_configuration_page = external_configuration_page

    @property
    def _self(self):
        """Gets the _self of this ChannelCatalogMarketplacePropertiesLinks.


        :return: The _self of this ChannelCatalogMarketplacePropertiesLinks.
        :rtype: LinksGetChannelCatalogMarketplacePropertiesLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ChannelCatalogMarketplacePropertiesLinks.


        :param _self: The _self of this ChannelCatalogMarketplacePropertiesLinks.
        :type _self: LinksGetChannelCatalogMarketplacePropertiesLink
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def settings(self):
        """Gets the settings of this ChannelCatalogMarketplacePropertiesLinks.


        :return: The settings of this ChannelCatalogMarketplacePropertiesLinks.
        :rtype: LinksGetChannelCatalogMarketplaceSettingsLink
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ChannelCatalogMarketplacePropertiesLinks.


        :param settings: The settings of this ChannelCatalogMarketplacePropertiesLinks.
        :type settings: LinksGetChannelCatalogMarketplaceSettingsLink
        """

        self._settings = settings
