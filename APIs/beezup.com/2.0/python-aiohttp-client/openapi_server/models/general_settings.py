# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeneralSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_to_publish_info: bool=None, active_beez_up_tracking: bool=True, do_not_export_out_of_stock_products: bool=None):
        """GeneralSettings - a model defined in OpenAPI

        :param accept_to_publish_info: The accept_to_publish_info of this GeneralSettings.
        :param active_beez_up_tracking: The active_beez_up_tracking of this GeneralSettings.
        :param do_not_export_out_of_stock_products: The do_not_export_out_of_stock_products of this GeneralSettings.
        """
        self.openapi_types = {
            'accept_to_publish_info': bool,
            'active_beez_up_tracking': bool,
            'do_not_export_out_of_stock_products': bool
        }

        self.attribute_map = {
            'accept_to_publish_info': 'acceptToPublishInfo',
            'active_beez_up_tracking': 'activeBeezUPTracking',
            'do_not_export_out_of_stock_products': 'doNotExportOutOfStockProducts'
        }

        self._accept_to_publish_info = accept_to_publish_info
        self._active_beez_up_tracking = active_beez_up_tracking
        self._do_not_export_out_of_stock_products = do_not_export_out_of_stock_products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeneralSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generalSettings of this GeneralSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_to_publish_info(self):
        """Gets the accept_to_publish_info of this GeneralSettings.

        If true then you authorize disclosure of my statistics generated from clicks and sales

        :return: The accept_to_publish_info of this GeneralSettings.
        :rtype: bool
        """
        return self._accept_to_publish_info

    @accept_to_publish_info.setter
    def accept_to_publish_info(self, accept_to_publish_info):
        """Sets the accept_to_publish_info of this GeneralSettings.

        If true then you authorize disclosure of my statistics generated from clicks and sales

        :param accept_to_publish_info: The accept_to_publish_info of this GeneralSettings.
        :type accept_to_publish_info: bool
        """
        if accept_to_publish_info is None:
            raise ValueError("Invalid value for `accept_to_publish_info`, must not be `None`")

        self._accept_to_publish_info = accept_to_publish_info

    @property
    def active_beez_up_tracking(self):
        """Gets the active_beez_up_tracking of this GeneralSettings.

        Activate BeezUP tracking for my statistics (checked by default)

        :return: The active_beez_up_tracking of this GeneralSettings.
        :rtype: bool
        """
        return self._active_beez_up_tracking

    @active_beez_up_tracking.setter
    def active_beez_up_tracking(self, active_beez_up_tracking):
        """Sets the active_beez_up_tracking of this GeneralSettings.

        Activate BeezUP tracking for my statistics (checked by default)

        :param active_beez_up_tracking: The active_beez_up_tracking of this GeneralSettings.
        :type active_beez_up_tracking: bool
        """
        if active_beez_up_tracking is None:
            raise ValueError("Invalid value for `active_beez_up_tracking`, must not be `None`")

        self._active_beez_up_tracking = active_beez_up_tracking

    @property
    def do_not_export_out_of_stock_products(self):
        """Gets the do_not_export_out_of_stock_products of this GeneralSettings.

        Do not export \"out of stock\" products. Note: this option is not taken into account by the counter. 

        :return: The do_not_export_out_of_stock_products of this GeneralSettings.
        :rtype: bool
        """
        return self._do_not_export_out_of_stock_products

    @do_not_export_out_of_stock_products.setter
    def do_not_export_out_of_stock_products(self, do_not_export_out_of_stock_products):
        """Sets the do_not_export_out_of_stock_products of this GeneralSettings.

        Do not export \"out of stock\" products. Note: this option is not taken into account by the counter. 

        :param do_not_export_out_of_stock_products: The do_not_export_out_of_stock_products of this GeneralSettings.
        :type do_not_export_out_of_stock_products: bool
        """
        if do_not_export_out_of_stock_products is None:
            raise ValueError("Invalid value for `do_not_export_out_of_stock_products`, must not be `None`")

        self._do_not_export_out_of_stock_products = do_not_export_out_of_stock_products
