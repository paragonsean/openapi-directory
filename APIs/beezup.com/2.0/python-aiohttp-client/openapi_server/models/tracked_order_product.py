# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrackedOrderProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_exists: bool=None, product_id: str=None, product_image_url: str=None, product_sku: str=None, product_title: str=None, margin: float=None, quantity: float=None, unit_price: float=None):
        """TrackedOrderProduct - a model defined in OpenAPI

        :param product_exists: The product_exists of this TrackedOrderProduct.
        :param product_id: The product_id of this TrackedOrderProduct.
        :param product_image_url: The product_image_url of this TrackedOrderProduct.
        :param product_sku: The product_sku of this TrackedOrderProduct.
        :param product_title: The product_title of this TrackedOrderProduct.
        :param margin: The margin of this TrackedOrderProduct.
        :param quantity: The quantity of this TrackedOrderProduct.
        :param unit_price: The unit_price of this TrackedOrderProduct.
        """
        self.openapi_types = {
            'product_exists': bool,
            'product_id': str,
            'product_image_url': str,
            'product_sku': str,
            'product_title': str,
            'margin': float,
            'quantity': float,
            'unit_price': float
        }

        self.attribute_map = {
            'product_exists': 'productExists',
            'product_id': 'productId',
            'product_image_url': 'productImageUrl',
            'product_sku': 'productSku',
            'product_title': 'productTitle',
            'margin': 'margin',
            'quantity': 'quantity',
            'unit_price': 'unitPrice'
        }

        self._product_exists = product_exists
        self._product_id = product_id
        self._product_image_url = product_image_url
        self._product_sku = product_sku
        self._product_title = product_title
        self._margin = margin
        self._quantity = quantity
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackedOrderProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackedOrderProduct of this TrackedOrderProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_exists(self):
        """Gets the product_exists of this TrackedOrderProduct.

        Indicates if the product still exists in your catalog

        :return: The product_exists of this TrackedOrderProduct.
        :rtype: bool
        """
        return self._product_exists

    @product_exists.setter
    def product_exists(self, product_exists):
        """Sets the product_exists of this TrackedOrderProduct.

        Indicates if the product still exists in your catalog

        :param product_exists: The product_exists of this TrackedOrderProduct.
        :type product_exists: bool
        """
        if product_exists is None:
            raise ValueError("Invalid value for `product_exists`, must not be `None`")

        self._product_exists = product_exists

    @property
    def product_id(self):
        """Gets the product_id of this TrackedOrderProduct.

        The product identifier

        :return: The product_id of this TrackedOrderProduct.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this TrackedOrderProduct.

        The product identifier

        :param product_id: The product_id of this TrackedOrderProduct.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_image_url(self):
        """Gets the product_image_url of this TrackedOrderProduct.

        The product image Url

        :return: The product_image_url of this TrackedOrderProduct.
        :rtype: str
        """
        return self._product_image_url

    @product_image_url.setter
    def product_image_url(self, product_image_url):
        """Sets the product_image_url of this TrackedOrderProduct.

        The product image Url

        :param product_image_url: The product_image_url of this TrackedOrderProduct.
        :type product_image_url: str
        """
        if product_image_url is None:
            raise ValueError("Invalid value for `product_image_url`, must not be `None`")

        self._product_image_url = product_image_url

    @property
    def product_sku(self):
        """Gets the product_sku of this TrackedOrderProduct.

        The product SKU

        :return: The product_sku of this TrackedOrderProduct.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this TrackedOrderProduct.

        The product SKU

        :param product_sku: The product_sku of this TrackedOrderProduct.
        :type product_sku: str
        """
        if product_sku is None:
            raise ValueError("Invalid value for `product_sku`, must not be `None`")

        self._product_sku = product_sku

    @property
    def product_title(self):
        """Gets the product_title of this TrackedOrderProduct.

        The product tile

        :return: The product_title of this TrackedOrderProduct.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this TrackedOrderProduct.

        The product tile

        :param product_title: The product_title of this TrackedOrderProduct.
        :type product_title: str
        """
        if product_title is None:
            raise ValueError("Invalid value for `product_title`, must not be `None`")

        self._product_title = product_title

    @property
    def margin(self):
        """Gets the margin of this TrackedOrderProduct.

        The product's margin for the order

        :return: The margin of this TrackedOrderProduct.
        :rtype: float
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this TrackedOrderProduct.

        The product's margin for the order

        :param margin: The margin of this TrackedOrderProduct.
        :type margin: float
        """
        if margin is None:
            raise ValueError("Invalid value for `margin`, must not be `None`")

        self._margin = margin

    @property
    def quantity(self):
        """Gets the quantity of this TrackedOrderProduct.

        The quantity of this product for the order

        :return: The quantity of this TrackedOrderProduct.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TrackedOrderProduct.

        The quantity of this product for the order

        :param quantity: The quantity of this TrackedOrderProduct.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this TrackedOrderProduct.

        The product's unit price for the order

        :return: The unit_price of this TrackedOrderProduct.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this TrackedOrderProduct.

        The product's unit price for the order

        :param unit_price: The unit_price of this TrackedOrderProduct.
        :type unit_price: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price
