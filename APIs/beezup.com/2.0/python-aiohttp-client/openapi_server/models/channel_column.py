# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_column_configuration import ChannelColumnConfiguration
from openapi_server import util


class ChannelColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_column_description: str=None, channel_column_id: str=None, channel_column_name: str=None, configuration: ChannelColumnConfiguration=None, position: int=None, restricted_values: Dict[str, str]=None, show_in_mapping: bool=None):
        """ChannelColumn - a model defined in OpenAPI

        :param channel_column_description: The channel_column_description of this ChannelColumn.
        :param channel_column_id: The channel_column_id of this ChannelColumn.
        :param channel_column_name: The channel_column_name of this ChannelColumn.
        :param configuration: The configuration of this ChannelColumn.
        :param position: The position of this ChannelColumn.
        :param restricted_values: The restricted_values of this ChannelColumn.
        :param show_in_mapping: The show_in_mapping of this ChannelColumn.
        """
        self.openapi_types = {
            'channel_column_description': str,
            'channel_column_id': str,
            'channel_column_name': str,
            'configuration': ChannelColumnConfiguration,
            'position': int,
            'restricted_values': Dict[str, str],
            'show_in_mapping': bool
        }

        self.attribute_map = {
            'channel_column_description': 'channelColumnDescription',
            'channel_column_id': 'channelColumnId',
            'channel_column_name': 'channelColumnName',
            'configuration': 'configuration',
            'position': 'position',
            'restricted_values': 'restrictedValues',
            'show_in_mapping': 'showInMapping'
        }

        self._channel_column_description = channel_column_description
        self._channel_column_id = channel_column_id
        self._channel_column_name = channel_column_name
        self._configuration = configuration
        self._position = position
        self._restricted_values = restricted_values
        self._show_in_mapping = show_in_mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelColumn of this ChannelColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_column_description(self):
        """Gets the channel_column_description of this ChannelColumn.

        The channel column description

        :return: The channel_column_description of this ChannelColumn.
        :rtype: str
        """
        return self._channel_column_description

    @channel_column_description.setter
    def channel_column_description(self, channel_column_description):
        """Sets the channel_column_description of this ChannelColumn.

        The channel column description

        :param channel_column_description: The channel_column_description of this ChannelColumn.
        :type channel_column_description: str
        """

        self._channel_column_description = channel_column_description

    @property
    def channel_column_id(self):
        """Gets the channel_column_id of this ChannelColumn.

        The channel column identifier

        :return: The channel_column_id of this ChannelColumn.
        :rtype: str
        """
        return self._channel_column_id

    @channel_column_id.setter
    def channel_column_id(self, channel_column_id):
        """Sets the channel_column_id of this ChannelColumn.

        The channel column identifier

        :param channel_column_id: The channel_column_id of this ChannelColumn.
        :type channel_column_id: str
        """
        if channel_column_id is None:
            raise ValueError("Invalid value for `channel_column_id`, must not be `None`")

        self._channel_column_id = channel_column_id

    @property
    def channel_column_name(self):
        """Gets the channel_column_name of this ChannelColumn.

        The channel column name

        :return: The channel_column_name of this ChannelColumn.
        :rtype: str
        """
        return self._channel_column_name

    @channel_column_name.setter
    def channel_column_name(self, channel_column_name):
        """Sets the channel_column_name of this ChannelColumn.

        The channel column name

        :param channel_column_name: The channel_column_name of this ChannelColumn.
        :type channel_column_name: str
        """
        if channel_column_name is None:
            raise ValueError("Invalid value for `channel_column_name`, must not be `None`")

        self._channel_column_name = channel_column_name

    @property
    def configuration(self):
        """Gets the configuration of this ChannelColumn.


        :return: The configuration of this ChannelColumn.
        :rtype: ChannelColumnConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ChannelColumn.


        :param configuration: The configuration of this ChannelColumn.
        :type configuration: ChannelColumnConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def position(self):
        """Gets the position of this ChannelColumn.

        The position of the column starting from 1

        :return: The position of this ChannelColumn.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ChannelColumn.

        The position of the column starting from 1

        :param position: The position of this ChannelColumn.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def restricted_values(self):
        """Gets the restricted_values of this ChannelColumn.

        The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value 

        :return: The restricted_values of this ChannelColumn.
        :rtype: Dict[str, str]
        """
        return self._restricted_values

    @restricted_values.setter
    def restricted_values(self, restricted_values):
        """Sets the restricted_values of this ChannelColumn.

        The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value 

        :param restricted_values: The restricted_values of this ChannelColumn.
        :type restricted_values: Dict[str, str]
        """

        self._restricted_values = restricted_values

    @property
    def show_in_mapping(self):
        """Gets the show_in_mapping of this ChannelColumn.

        Indicates if this column must shown in the mapping page or not

        :return: The show_in_mapping of this ChannelColumn.
        :rtype: bool
        """
        return self._show_in_mapping

    @show_in_mapping.setter
    def show_in_mapping(self, show_in_mapping):
        """Sets the show_in_mapping of this ChannelColumn.

        Indicates if this column must shown in the mapping page or not

        :param show_in_mapping: The show_in_mapping of this ChannelColumn.
        :type show_in_mapping: bool
        """
        if show_in_mapping is None:
            raise ValueError("Invalid value for `show_in_mapping`, must not be `None`")

        self._show_in_mapping = show_in_mapping
