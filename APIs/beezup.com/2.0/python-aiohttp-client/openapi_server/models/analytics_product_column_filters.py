# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_product_column_filter import AnalyticsProductColumnFilter
from openapi_server import util


class AnalyticsProductColumnFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_analytics_product_column_filters: Dict[str, AnalyticsProductColumnFilter]=None, sku: str=None, title: str=None):
        """AnalyticsProductColumnFilters - a model defined in OpenAPI

        :param additional_analytics_product_column_filters: The additional_analytics_product_column_filters of this AnalyticsProductColumnFilters.
        :param sku: The sku of this AnalyticsProductColumnFilters.
        :param title: The title of this AnalyticsProductColumnFilters.
        """
        self.openapi_types = {
            'additional_analytics_product_column_filters': Dict[str, AnalyticsProductColumnFilter],
            'sku': str,
            'title': str
        }

        self.attribute_map = {
            'additional_analytics_product_column_filters': 'additionalAnalyticsProductColumnFilters',
            'sku': 'sku',
            'title': 'title'
        }

        self._additional_analytics_product_column_filters = additional_analytics_product_column_filters
        self._sku = sku
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsProductColumnFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyticsProductColumnFilters of this AnalyticsProductColumnFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_analytics_product_column_filters(self):
        """Gets the additional_analytics_product_column_filters of this AnalyticsProductColumnFilters.

        Describes a filter on a product's column. The key is the column identifier of your catalog or a custom column. 

        :return: The additional_analytics_product_column_filters of this AnalyticsProductColumnFilters.
        :rtype: Dict[str, AnalyticsProductColumnFilter]
        """
        return self._additional_analytics_product_column_filters

    @additional_analytics_product_column_filters.setter
    def additional_analytics_product_column_filters(self, additional_analytics_product_column_filters):
        """Sets the additional_analytics_product_column_filters of this AnalyticsProductColumnFilters.

        Describes a filter on a product's column. The key is the column identifier of your catalog or a custom column. 

        :param additional_analytics_product_column_filters: The additional_analytics_product_column_filters of this AnalyticsProductColumnFilters.
        :type additional_analytics_product_column_filters: Dict[str, AnalyticsProductColumnFilter]
        """

        self._additional_analytics_product_column_filters = additional_analytics_product_column_filters

    @property
    def sku(self):
        """Gets the sku of this AnalyticsProductColumnFilters.

        The product sku filter

        :return: The sku of this AnalyticsProductColumnFilters.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AnalyticsProductColumnFilters.

        The product sku filter

        :param sku: The sku of this AnalyticsProductColumnFilters.
        :type sku: str
        """

        self._sku = sku

    @property
    def title(self):
        """Gets the title of this AnalyticsProductColumnFilters.

        The product title filter

        :return: The title of this AnalyticsProductColumnFilters.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnalyticsProductColumnFilters.

        The product title filter

        :param title: The title of this AnalyticsProductColumnFilters.
        :type title: str
        """

        self._title = title
