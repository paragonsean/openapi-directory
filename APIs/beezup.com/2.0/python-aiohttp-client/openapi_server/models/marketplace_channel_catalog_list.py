# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketplace_channel_catalog import MarketplaceChannelCatalog
from openapi_server.models.marketplace_channel_catalog_list_links import MarketplaceChannelCatalogListLinks
from openapi_server import util


class MarketplaceChannelCatalogList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: MarketplaceChannelCatalogListLinks=None, marketplace_channel_catalogs: List[MarketplaceChannelCatalog]=None):
        """MarketplaceChannelCatalogList - a model defined in OpenAPI

        :param links: The links of this MarketplaceChannelCatalogList.
        :param marketplace_channel_catalogs: The marketplace_channel_catalogs of this MarketplaceChannelCatalogList.
        """
        self.openapi_types = {
            'links': MarketplaceChannelCatalogListLinks,
            'marketplace_channel_catalogs': List[MarketplaceChannelCatalog]
        }

        self.attribute_map = {
            'links': 'links',
            'marketplace_channel_catalogs': 'marketplaceChannelCatalogs'
        }

        self._links = links
        self._marketplace_channel_catalogs = marketplace_channel_catalogs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceChannelCatalogList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The marketplaceChannelCatalogList of this MarketplaceChannelCatalogList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this MarketplaceChannelCatalogList.


        :return: The links of this MarketplaceChannelCatalogList.
        :rtype: MarketplaceChannelCatalogListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MarketplaceChannelCatalogList.


        :param links: The links of this MarketplaceChannelCatalogList.
        :type links: MarketplaceChannelCatalogListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def marketplace_channel_catalogs(self):
        """Gets the marketplace_channel_catalogs of this MarketplaceChannelCatalogList.

        The list of marketplace channel catalog

        :return: The marketplace_channel_catalogs of this MarketplaceChannelCatalogList.
        :rtype: List[MarketplaceChannelCatalog]
        """
        return self._marketplace_channel_catalogs

    @marketplace_channel_catalogs.setter
    def marketplace_channel_catalogs(self, marketplace_channel_catalogs):
        """Sets the marketplace_channel_catalogs of this MarketplaceChannelCatalogList.

        The list of marketplace channel catalog

        :param marketplace_channel_catalogs: The marketplace_channel_catalogs of this MarketplaceChannelCatalogList.
        :type marketplace_channel_catalogs: List[MarketplaceChannelCatalog]
        """
        if marketplace_channel_catalogs is None:
            raise ValueError("Invalid value for `marketplace_channel_catalogs`, must not be `None`")

        self._marketplace_channel_catalogs = marketplace_channel_catalogs
