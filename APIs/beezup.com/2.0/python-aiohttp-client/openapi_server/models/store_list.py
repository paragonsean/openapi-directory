# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store import Store
from openapi_server.models.store_list_links import StoreListLinks
from openapi_server import util


class StoreList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: StoreListLinks=None, stores: List[Store]=None):
        """StoreList - a model defined in OpenAPI

        :param links: The links of this StoreList.
        :param stores: The stores of this StoreList.
        """
        self.openapi_types = {
            'links': StoreListLinks,
            'stores': List[Store]
        }

        self.attribute_map = {
            'links': 'links',
            'stores': 'stores'
        }

        self._links = links
        self._stores = stores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeList of this StoreList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this StoreList.


        :return: The links of this StoreList.
        :rtype: StoreListLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StoreList.


        :param links: The links of this StoreList.
        :type links: StoreListLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def stores(self):
        """Gets the stores of this StoreList.


        :return: The stores of this StoreList.
        :rtype: List[Store]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this StoreList.


        :param stores: The stores of this StoreList.
        :type stores: List[Store]
        """
        if stores is None:
            raise ValueError("Invalid value for `stores`, must not be `None`")

        self._stores = stores
