# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_info_summaries import BeezUPCommonInfoSummaries
from openapi_server.models.credit_card_info_response_links import CreditCardInfoResponseLinks
from openapi_server.models.credit_card_info_with_card_type import CreditCardInfoWithCardType
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class CreditCardInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_card_info: CreditCardInfoWithCardType=None, current_payment_method: PaymentMethod=PaymentMethod.ONLINEPAYMENT, info: BeezUPCommonInfoSummaries=None, links: CreditCardInfoResponseLinks=None):
        """CreditCardInfoResponse - a model defined in OpenAPI

        :param credit_card_info: The credit_card_info of this CreditCardInfoResponse.
        :param current_payment_method: The current_payment_method of this CreditCardInfoResponse.
        :param info: The info of this CreditCardInfoResponse.
        :param links: The links of this CreditCardInfoResponse.
        """
        self.openapi_types = {
            'credit_card_info': CreditCardInfoWithCardType,
            'current_payment_method': PaymentMethod,
            'info': BeezUPCommonInfoSummaries,
            'links': CreditCardInfoResponseLinks
        }

        self.attribute_map = {
            'credit_card_info': 'creditCardInfo',
            'current_payment_method': 'currentPaymentMethod',
            'info': 'info',
            'links': 'links'
        }

        self._credit_card_info = credit_card_info
        self._current_payment_method = current_payment_method
        self._info = info
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditCardInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The creditCardInfoResponse of this CreditCardInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_card_info(self):
        """Gets the credit_card_info of this CreditCardInfoResponse.


        :return: The credit_card_info of this CreditCardInfoResponse.
        :rtype: CreditCardInfoWithCardType
        """
        return self._credit_card_info

    @credit_card_info.setter
    def credit_card_info(self, credit_card_info):
        """Sets the credit_card_info of this CreditCardInfoResponse.


        :param credit_card_info: The credit_card_info of this CreditCardInfoResponse.
        :type credit_card_info: CreditCardInfoWithCardType
        """

        self._credit_card_info = credit_card_info

    @property
    def current_payment_method(self):
        """Gets the current_payment_method of this CreditCardInfoResponse.


        :return: The current_payment_method of this CreditCardInfoResponse.
        :rtype: PaymentMethod
        """
        return self._current_payment_method

    @current_payment_method.setter
    def current_payment_method(self, current_payment_method):
        """Sets the current_payment_method of this CreditCardInfoResponse.


        :param current_payment_method: The current_payment_method of this CreditCardInfoResponse.
        :type current_payment_method: PaymentMethod
        """
        if current_payment_method is None:
            raise ValueError("Invalid value for `current_payment_method`, must not be `None`")

        self._current_payment_method = current_payment_method

    @property
    def info(self):
        """Gets the info of this CreditCardInfoResponse.


        :return: The info of this CreditCardInfoResponse.
        :rtype: BeezUPCommonInfoSummaries
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CreditCardInfoResponse.


        :param info: The info of this CreditCardInfoResponse.
        :type info: BeezUPCommonInfoSummaries
        """

        self._info = info

    @property
    def links(self):
        """Gets the links of this CreditCardInfoResponse.


        :return: The links of this CreditCardInfoResponse.
        :rtype: CreditCardInfoResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CreditCardInfoResponse.


        :param links: The links of this CreditCardInfoResponse.
        :type links: CreditCardInfoResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
