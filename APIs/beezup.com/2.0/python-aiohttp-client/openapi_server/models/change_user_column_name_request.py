# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeUserColumnNameRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_colum_name: str=None):
        """ChangeUserColumnNameRequest - a model defined in OpenAPI

        :param user_colum_name: The user_colum_name of this ChangeUserColumnNameRequest.
        """
        self.openapi_types = {
            'user_colum_name': str
        }

        self.attribute_map = {
            'user_colum_name': 'userColumName'
        }

        self._user_colum_name = user_colum_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeUserColumnNameRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The changeUserColumnNameRequest of this ChangeUserColumnNameRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_colum_name(self):
        """Gets the user_colum_name of this ChangeUserColumnNameRequest.

        Column named by the user

        :return: The user_colum_name of this ChangeUserColumnNameRequest.
        :rtype: str
        """
        return self._user_colum_name

    @user_colum_name.setter
    def user_colum_name(self, user_colum_name):
        """Sets the user_colum_name of this ChangeUserColumnNameRequest.

        Column named by the user

        :param user_colum_name: The user_colum_name of this ChangeUserColumnNameRequest.
        :type user_colum_name: str
        """
        if user_colum_name is None:
            raise ValueError("Invalid value for `user_colum_name`, must not be `None`")

        self._user_colum_name = user_colum_name
