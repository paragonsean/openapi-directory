# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_channel_basic_info import BeezUPCommonChannelBasicInfo
from openapi_server import util


class CopyOptimisationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_product_count: int=None, channel: BeezUPCommonChannelBasicInfo=None, enabled_product_count: int=None):
        """CopyOptimisationResponse - a model defined in OpenAPI

        :param catalog_product_count: The catalog_product_count of this CopyOptimisationResponse.
        :param channel: The channel of this CopyOptimisationResponse.
        :param enabled_product_count: The enabled_product_count of this CopyOptimisationResponse.
        """
        self.openapi_types = {
            'catalog_product_count': int,
            'channel': BeezUPCommonChannelBasicInfo,
            'enabled_product_count': int
        }

        self.attribute_map = {
            'catalog_product_count': 'catalogProductCount',
            'channel': 'channel',
            'enabled_product_count': 'enabledProductCount'
        }

        self._catalog_product_count = catalog_product_count
        self._channel = channel
        self._enabled_product_count = enabled_product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyOptimisationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The copyOptimisationResponse of this CopyOptimisationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_product_count(self):
        """Gets the catalog_product_count of this CopyOptimisationResponse.

        The catalog product count

        :return: The catalog_product_count of this CopyOptimisationResponse.
        :rtype: int
        """
        return self._catalog_product_count

    @catalog_product_count.setter
    def catalog_product_count(self, catalog_product_count):
        """Sets the catalog_product_count of this CopyOptimisationResponse.

        The catalog product count

        :param catalog_product_count: The catalog_product_count of this CopyOptimisationResponse.
        :type catalog_product_count: int
        """
        if catalog_product_count is None:
            raise ValueError("Invalid value for `catalog_product_count`, must not be `None`")

        self._catalog_product_count = catalog_product_count

    @property
    def channel(self):
        """Gets the channel of this CopyOptimisationResponse.


        :return: The channel of this CopyOptimisationResponse.
        :rtype: BeezUPCommonChannelBasicInfo
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CopyOptimisationResponse.


        :param channel: The channel of this CopyOptimisationResponse.
        :type channel: BeezUPCommonChannelBasicInfo
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def enabled_product_count(self):
        """Gets the enabled_product_count of this CopyOptimisationResponse.

        The enabled product count

        :return: The enabled_product_count of this CopyOptimisationResponse.
        :rtype: int
        """
        return self._enabled_product_count

    @enabled_product_count.setter
    def enabled_product_count(self, enabled_product_count):
        """Sets the enabled_product_count of this CopyOptimisationResponse.

        The enabled product count

        :param enabled_product_count: The enabled_product_count of this CopyOptimisationResponse.
        :type enabled_product_count: int
        """
        if enabled_product_count is None:
            raise ValueError("Invalid value for `enabled_product_count`, must not be `None`")

        self._enabled_product_count = enabled_product_count
