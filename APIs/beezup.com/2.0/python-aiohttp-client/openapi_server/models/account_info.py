# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_info_links import AccountInfoLinks
from openapi_server.models.account_status import AccountStatus
from openapi_server.models.beez_up_common_info_summaries import BeezUPCommonInfoSummaries
from openapi_server.models.company_info import CompanyInfo
from openapi_server.models.personal_info import PersonalInfo
import re
from openapi_server import util


class AccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commercial_owner_email: str=None, company_info: CompanyInfo=None, email: str=None, info: BeezUPCommonInfoSummaries=None, links: AccountInfoLinks=None, personal_info: PersonalInfo=None, profile_picture_url: str=None, status: AccountStatus=None, user_id: str=None):
        """AccountInfo - a model defined in OpenAPI

        :param commercial_owner_email: The commercial_owner_email of this AccountInfo.
        :param company_info: The company_info of this AccountInfo.
        :param email: The email of this AccountInfo.
        :param info: The info of this AccountInfo.
        :param links: The links of this AccountInfo.
        :param personal_info: The personal_info of this AccountInfo.
        :param profile_picture_url: The profile_picture_url of this AccountInfo.
        :param status: The status of this AccountInfo.
        :param user_id: The user_id of this AccountInfo.
        """
        self.openapi_types = {
            'commercial_owner_email': str,
            'company_info': CompanyInfo,
            'email': str,
            'info': BeezUPCommonInfoSummaries,
            'links': AccountInfoLinks,
            'personal_info': PersonalInfo,
            'profile_picture_url': str,
            'status': AccountStatus,
            'user_id': str
        }

        self.attribute_map = {
            'commercial_owner_email': 'commercialOwnerEmail',
            'company_info': 'companyInfo',
            'email': 'email',
            'info': 'info',
            'links': 'links',
            'personal_info': 'personalInfo',
            'profile_picture_url': 'profilePictureUrl',
            'status': 'status',
            'user_id': 'userId'
        }

        self._commercial_owner_email = commercial_owner_email
        self._company_info = company_info
        self._email = email
        self._info = info
        self._links = links
        self._personal_info = personal_info
        self._profile_picture_url = profile_picture_url
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountInfo of this AccountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commercial_owner_email(self):
        """Gets the commercial_owner_email of this AccountInfo.

        The email

        :return: The commercial_owner_email of this AccountInfo.
        :rtype: str
        """
        return self._commercial_owner_email

    @commercial_owner_email.setter
    def commercial_owner_email(self, commercial_owner_email):
        """Sets the commercial_owner_email of this AccountInfo.

        The email

        :param commercial_owner_email: The commercial_owner_email of this AccountInfo.
        :type commercial_owner_email: str
        """
        if commercial_owner_email is not None and not re.search(r'^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$', commercial_owner_email):
            raise ValueError("Invalid value for `commercial_owner_email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/`")

        self._commercial_owner_email = commercial_owner_email

    @property
    def company_info(self):
        """Gets the company_info of this AccountInfo.


        :return: The company_info of this AccountInfo.
        :rtype: CompanyInfo
        """
        return self._company_info

    @company_info.setter
    def company_info(self, company_info):
        """Sets the company_info of this AccountInfo.


        :param company_info: The company_info of this AccountInfo.
        :type company_info: CompanyInfo
        """

        self._company_info = company_info

    @property
    def email(self):
        """Gets the email of this AccountInfo.

        The email

        :return: The email of this AccountInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountInfo.

        The email

        :param email: The email of this AccountInfo.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and not re.search(r'^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/`")

        self._email = email

    @property
    def info(self):
        """Gets the info of this AccountInfo.


        :return: The info of this AccountInfo.
        :rtype: BeezUPCommonInfoSummaries
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AccountInfo.


        :param info: The info of this AccountInfo.
        :type info: BeezUPCommonInfoSummaries
        """

        self._info = info

    @property
    def links(self):
        """Gets the links of this AccountInfo.


        :return: The links of this AccountInfo.
        :rtype: AccountInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountInfo.


        :param links: The links of this AccountInfo.
        :type links: AccountInfoLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def personal_info(self):
        """Gets the personal_info of this AccountInfo.


        :return: The personal_info of this AccountInfo.
        :rtype: PersonalInfo
        """
        return self._personal_info

    @personal_info.setter
    def personal_info(self, personal_info):
        """Sets the personal_info of this AccountInfo.


        :param personal_info: The personal_info of this AccountInfo.
        :type personal_info: PersonalInfo
        """

        self._personal_info = personal_info

    @property
    def profile_picture_url(self):
        """Gets the profile_picture_url of this AccountInfo.

        Indicate the url of your picture profil

        :return: The profile_picture_url of this AccountInfo.
        :rtype: str
        """
        return self._profile_picture_url

    @profile_picture_url.setter
    def profile_picture_url(self, profile_picture_url):
        """Sets the profile_picture_url of this AccountInfo.

        Indicate the url of your picture profil

        :param profile_picture_url: The profile_picture_url of this AccountInfo.
        :type profile_picture_url: str
        """
        if profile_picture_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', profile_picture_url):
            raise ValueError("Invalid value for `profile_picture_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._profile_picture_url = profile_picture_url

    @property
    def status(self):
        """Gets the status of this AccountInfo.


        :return: The status of this AccountInfo.
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountInfo.


        :param status: The status of this AccountInfo.
        :type status: AccountStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this AccountInfo.

        The user identifier

        :return: The user_id of this AccountInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccountInfo.

        The user identifier

        :param user_id: The user_id of this AccountInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
