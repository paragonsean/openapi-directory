# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddChannelCatalogRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, store_id: str=None):
        """AddChannelCatalogRequest - a model defined in OpenAPI

        :param channel_id: The channel_id of this AddChannelCatalogRequest.
        :param store_id: The store_id of this AddChannelCatalogRequest.
        """
        self.openapi_types = {
            'channel_id': str,
            'store_id': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'store_id': 'storeId'
        }

        self._channel_id = channel_id
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddChannelCatalogRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addChannelCatalogRequest of this AddChannelCatalogRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this AddChannelCatalogRequest.

        The channel identifier

        :return: The channel_id of this AddChannelCatalogRequest.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this AddChannelCatalogRequest.

        The channel identifier

        :param channel_id: The channel_id of this AddChannelCatalogRequest.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def store_id(self):
        """Gets the store_id of this AddChannelCatalogRequest.

        The store identifier

        :return: The store_id of this AddChannelCatalogRequest.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this AddChannelCatalogRequest.

        The store identifier

        :param store_id: The store_id of this AddChannelCatalogRequest.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id
