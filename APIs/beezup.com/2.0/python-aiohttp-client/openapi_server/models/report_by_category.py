# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_by_category_links import ReportByCategoryLinks
from openapi_server import util


class ReportByCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_product_count: int=None, catalog_category_id: str=None, catalog_category_path: List[str]=None, catalog_product_count: int=None, click_count: int=None, cost: float=None, enabled_product_count: int=None, links: ReportByCategoryLinks=None, margin: float=None, order_count: int=None, performance_indicator: float=None, roi: float=None, sold_product_count: int=None, total_sales: float=None):
        """ReportByCategory - a model defined in OpenAPI

        :param all_product_count: The all_product_count of this ReportByCategory.
        :param catalog_category_id: The catalog_category_id of this ReportByCategory.
        :param catalog_category_path: The catalog_category_path of this ReportByCategory.
        :param catalog_product_count: The catalog_product_count of this ReportByCategory.
        :param click_count: The click_count of this ReportByCategory.
        :param cost: The cost of this ReportByCategory.
        :param enabled_product_count: The enabled_product_count of this ReportByCategory.
        :param links: The links of this ReportByCategory.
        :param margin: The margin of this ReportByCategory.
        :param order_count: The order_count of this ReportByCategory.
        :param performance_indicator: The performance_indicator of this ReportByCategory.
        :param roi: The roi of this ReportByCategory.
        :param sold_product_count: The sold_product_count of this ReportByCategory.
        :param total_sales: The total_sales of this ReportByCategory.
        """
        self.openapi_types = {
            'all_product_count': int,
            'catalog_category_id': str,
            'catalog_category_path': List[str],
            'catalog_product_count': int,
            'click_count': int,
            'cost': float,
            'enabled_product_count': int,
            'links': ReportByCategoryLinks,
            'margin': float,
            'order_count': int,
            'performance_indicator': float,
            'roi': float,
            'sold_product_count': int,
            'total_sales': float
        }

        self.attribute_map = {
            'all_product_count': 'allProductCount',
            'catalog_category_id': 'catalogCategoryId',
            'catalog_category_path': 'catalogCategoryPath',
            'catalog_product_count': 'catalogProductCount',
            'click_count': 'clickCount',
            'cost': 'cost',
            'enabled_product_count': 'enabledProductCount',
            'links': 'links',
            'margin': 'margin',
            'order_count': 'orderCount',
            'performance_indicator': 'performanceIndicator',
            'roi': 'roi',
            'sold_product_count': 'soldProductCount',
            'total_sales': 'totalSales'
        }

        self._all_product_count = all_product_count
        self._catalog_category_id = catalog_category_id
        self._catalog_category_path = catalog_category_path
        self._catalog_product_count = catalog_product_count
        self._click_count = click_count
        self._cost = cost
        self._enabled_product_count = enabled_product_count
        self._links = links
        self._margin = margin
        self._order_count = order_count
        self._performance_indicator = performance_indicator
        self._roi = roi
        self._sold_product_count = sold_product_count
        self._total_sales = total_sales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportByCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportByCategory of this ReportByCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_product_count(self):
        """Gets the all_product_count of this ReportByCategory.

        The product count for this category. This includes all the products that have been imported and can still have associated clicks and orders.

        :return: The all_product_count of this ReportByCategory.
        :rtype: int
        """
        return self._all_product_count

    @all_product_count.setter
    def all_product_count(self, all_product_count):
        """Sets the all_product_count of this ReportByCategory.

        The product count for this category. This includes all the products that have been imported and can still have associated clicks and orders.

        :param all_product_count: The all_product_count of this ReportByCategory.
        :type all_product_count: int
        """
        if all_product_count is None:
            raise ValueError("Invalid value for `all_product_count`, must not be `None`")

        self._all_product_count = all_product_count

    @property
    def catalog_category_id(self):
        """Gets the catalog_category_id of this ReportByCategory.

        The catalog category identifier

        :return: The catalog_category_id of this ReportByCategory.
        :rtype: str
        """
        return self._catalog_category_id

    @catalog_category_id.setter
    def catalog_category_id(self, catalog_category_id):
        """Sets the catalog_category_id of this ReportByCategory.

        The catalog category identifier

        :param catalog_category_id: The catalog_category_id of this ReportByCategory.
        :type catalog_category_id: str
        """
        if catalog_category_id is None:
            raise ValueError("Invalid value for `catalog_category_id`, must not be `None`")

        self._catalog_category_id = catalog_category_id

    @property
    def catalog_category_path(self):
        """Gets the catalog_category_path of this ReportByCategory.

        The catalog category path

        :return: The catalog_category_path of this ReportByCategory.
        :rtype: List[str]
        """
        return self._catalog_category_path

    @catalog_category_path.setter
    def catalog_category_path(self, catalog_category_path):
        """Sets the catalog_category_path of this ReportByCategory.

        The catalog category path

        :param catalog_category_path: The catalog_category_path of this ReportByCategory.
        :type catalog_category_path: List[str]
        """

        self._catalog_category_path = catalog_category_path

    @property
    def catalog_product_count(self):
        """Gets the catalog_product_count of this ReportByCategory.

        The catalog product count for this category. This includes all products that are still present in your imported catalog.

        :return: The catalog_product_count of this ReportByCategory.
        :rtype: int
        """
        return self._catalog_product_count

    @catalog_product_count.setter
    def catalog_product_count(self, catalog_product_count):
        """Sets the catalog_product_count of this ReportByCategory.

        The catalog product count for this category. This includes all products that are still present in your imported catalog.

        :param catalog_product_count: The catalog_product_count of this ReportByCategory.
        :type catalog_product_count: int
        """
        if catalog_product_count is None:
            raise ValueError("Invalid value for `catalog_product_count`, must not be `None`")

        self._catalog_product_count = catalog_product_count

    @property
    def click_count(self):
        """Gets the click_count of this ReportByCategory.

        The click count for this category

        :return: The click_count of this ReportByCategory.
        :rtype: int
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """Sets the click_count of this ReportByCategory.

        The click count for this category

        :param click_count: The click_count of this ReportByCategory.
        :type click_count: int
        """
        if click_count is None:
            raise ValueError("Invalid value for `click_count`, must not be `None`")

        self._click_count = click_count

    @property
    def cost(self):
        """Gets the cost of this ReportByCategory.

        The cost for this category

        :return: The cost of this ReportByCategory.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ReportByCategory.

        The cost for this category

        :param cost: The cost of this ReportByCategory.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def enabled_product_count(self):
        """Gets the enabled_product_count of this ReportByCategory.

        The enabled product count for this category. This includes all products that are still present in your imported catalog and have not been disabled via the optimisation feature.

        :return: The enabled_product_count of this ReportByCategory.
        :rtype: int
        """
        return self._enabled_product_count

    @enabled_product_count.setter
    def enabled_product_count(self, enabled_product_count):
        """Sets the enabled_product_count of this ReportByCategory.

        The enabled product count for this category. This includes all products that are still present in your imported catalog and have not been disabled via the optimisation feature.

        :param enabled_product_count: The enabled_product_count of this ReportByCategory.
        :type enabled_product_count: int
        """
        if enabled_product_count is None:
            raise ValueError("Invalid value for `enabled_product_count`, must not be `None`")

        self._enabled_product_count = enabled_product_count

    @property
    def links(self):
        """Gets the links of this ReportByCategory.


        :return: The links of this ReportByCategory.
        :rtype: ReportByCategoryLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReportByCategory.


        :param links: The links of this ReportByCategory.
        :type links: ReportByCategoryLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def margin(self):
        """Gets the margin of this ReportByCategory.

        The margin for this category

        :return: The margin of this ReportByCategory.
        :rtype: float
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this ReportByCategory.

        The margin for this category

        :param margin: The margin of this ReportByCategory.
        :type margin: float
        """

        self._margin = margin

    @property
    def order_count(self):
        """Gets the order_count of this ReportByCategory.

        The order count for this category

        :return: The order_count of this ReportByCategory.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this ReportByCategory.

        The order count for this category

        :param order_count: The order_count of this ReportByCategory.
        :type order_count: int
        """
        if order_count is None:
            raise ValueError("Invalid value for `order_count`, must not be `None`")

        self._order_count = order_count

    @property
    def performance_indicator(self):
        """Gets the performance_indicator of this ReportByCategory.

        The performance indicator based on the performance indicator formula indicated in the request for this category

        :return: The performance_indicator of this ReportByCategory.
        :rtype: float
        """
        return self._performance_indicator

    @performance_indicator.setter
    def performance_indicator(self, performance_indicator):
        """Sets the performance_indicator of this ReportByCategory.

        The performance indicator based on the performance indicator formula indicated in the request for this category

        :param performance_indicator: The performance_indicator of this ReportByCategory.
        :type performance_indicator: float
        """
        if performance_indicator is None:
            raise ValueError("Invalid value for `performance_indicator`, must not be `None`")

        self._performance_indicator = performance_indicator

    @property
    def roi(self):
        """Gets the roi of this ReportByCategory.

        The Return On Investment for this category

        :return: The roi of this ReportByCategory.
        :rtype: float
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this ReportByCategory.

        The Return On Investment for this category

        :param roi: The roi of this ReportByCategory.
        :type roi: float
        """

        self._roi = roi

    @property
    def sold_product_count(self):
        """Gets the sold_product_count of this ReportByCategory.

        The product sold count count for this category

        :return: The sold_product_count of this ReportByCategory.
        :rtype: int
        """
        return self._sold_product_count

    @sold_product_count.setter
    def sold_product_count(self, sold_product_count):
        """Sets the sold_product_count of this ReportByCategory.

        The product sold count count for this category

        :param sold_product_count: The sold_product_count of this ReportByCategory.
        :type sold_product_count: int
        """
        if sold_product_count is None:
            raise ValueError("Invalid value for `sold_product_count`, must not be `None`")

        self._sold_product_count = sold_product_count

    @property
    def total_sales(self):
        """Gets the total_sales of this ReportByCategory.

        The total sales for this category

        :return: The total_sales of this ReportByCategory.
        :rtype: float
        """
        return self._total_sales

    @total_sales.setter
    def total_sales(self, total_sales):
        """Sets the total_sales of this ReportByCategory.

        The total sales for this category

        :param total_sales: The total_sales of this ReportByCategory.
        :type total_sales: float
        """
        if total_sales is None:
            raise ValueError("Invalid value for `total_sales`, must not be `None`")

        self._total_sales = total_sales
