# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_user_error_message import BeezUPCommonUserErrorMessage
from openapi_server.models.order_identifier import OrderIdentifier
from openapi_server import util


class OrderOperationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[BeezUPCommonUserErrorMessage]=None, order: OrderIdentifier=None, status: int=None, success: bool=None):
        """OrderOperationResponse - a model defined in OpenAPI

        :param errors: The errors of this OrderOperationResponse.
        :param order: The order of this OrderOperationResponse.
        :param status: The status of this OrderOperationResponse.
        :param success: The success of this OrderOperationResponse.
        """
        self.openapi_types = {
            'errors': List[BeezUPCommonUserErrorMessage],
            'order': OrderIdentifier,
            'status': int,
            'success': bool
        }

        self.attribute_map = {
            'errors': 'errors',
            'order': 'order',
            'status': 'status',
            'success': 'success'
        }

        self._errors = errors
        self._order = order
        self._status = status
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderOperationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderOperationResponse of this OrderOperationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this OrderOperationResponse.

        The error list

        :return: The errors of this OrderOperationResponse.
        :rtype: List[BeezUPCommonUserErrorMessage]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this OrderOperationResponse.

        The error list

        :param errors: The errors of this OrderOperationResponse.
        :type errors: List[BeezUPCommonUserErrorMessage]
        """

        self._errors = errors

    @property
    def order(self):
        """Gets the order of this OrderOperationResponse.


        :return: The order of this OrderOperationResponse.
        :rtype: OrderIdentifier
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this OrderOperationResponse.


        :param order: The order of this OrderOperationResponse.
        :type order: OrderIdentifier
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def status(self):
        """Gets the status of this OrderOperationResponse.

        Indicates the http status corresponding to the individual operation

        :return: The status of this OrderOperationResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderOperationResponse.

        Indicates the http status corresponding to the individual operation

        :param status: The status of this OrderOperationResponse.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def success(self):
        """Gets the success of this OrderOperationResponse.

        Indicates if the operation succeed or not

        :return: The success of this OrderOperationResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this OrderOperationResponse.

        Indicates if the operation succeed or not

        :param success: The success of this OrderOperationResponse.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
