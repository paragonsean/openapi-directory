# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_info_details import ChannelInfoDetails
from openapi_server.models.channel_info_key_numbers import ChannelInfoKeyNumbers
from openapi_server.models.channel_info_sales_contact import ChannelInfoSalesContact
from openapi_server.models.channel_info_technical_contact import ChannelInfoTechnicalContact
import re
from openapi_server import util


class ChannelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beez_up_offer: str=None, channel_description: str=None, channel_id: str=None, channel_logo_url: str=None, channel_name: str=None, details: ChannelInfoDetails=None, key_numbers: ChannelInfoKeyNumbers=None, sales_contact: ChannelInfoSalesContact=None, technical_contact: ChannelInfoTechnicalContact=None):
        """ChannelInfo - a model defined in OpenAPI

        :param beez_up_offer: The beez_up_offer of this ChannelInfo.
        :param channel_description: The channel_description of this ChannelInfo.
        :param channel_id: The channel_id of this ChannelInfo.
        :param channel_logo_url: The channel_logo_url of this ChannelInfo.
        :param channel_name: The channel_name of this ChannelInfo.
        :param details: The details of this ChannelInfo.
        :param key_numbers: The key_numbers of this ChannelInfo.
        :param sales_contact: The sales_contact of this ChannelInfo.
        :param technical_contact: The technical_contact of this ChannelInfo.
        """
        self.openapi_types = {
            'beez_up_offer': str,
            'channel_description': str,
            'channel_id': str,
            'channel_logo_url': str,
            'channel_name': str,
            'details': ChannelInfoDetails,
            'key_numbers': ChannelInfoKeyNumbers,
            'sales_contact': ChannelInfoSalesContact,
            'technical_contact': ChannelInfoTechnicalContact
        }

        self.attribute_map = {
            'beez_up_offer': 'beezUPOffer',
            'channel_description': 'channelDescription',
            'channel_id': 'channelId',
            'channel_logo_url': 'channelLogoUrl',
            'channel_name': 'channelName',
            'details': 'details',
            'key_numbers': 'keyNumbers',
            'sales_contact': 'salesContact',
            'technical_contact': 'technicalContact'
        }

        self._beez_up_offer = beez_up_offer
        self._channel_description = channel_description
        self._channel_id = channel_id
        self._channel_logo_url = channel_logo_url
        self._channel_name = channel_name
        self._details = details
        self._key_numbers = key_numbers
        self._sales_contact = sales_contact
        self._technical_contact = technical_contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channelInfo of this ChannelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beez_up_offer(self):
        """Gets the beez_up_offer of this ChannelInfo.

        Indicate the BeezUP offer

        :return: The beez_up_offer of this ChannelInfo.
        :rtype: str
        """
        return self._beez_up_offer

    @beez_up_offer.setter
    def beez_up_offer(self, beez_up_offer):
        """Sets the beez_up_offer of this ChannelInfo.

        Indicate the BeezUP offer

        :param beez_up_offer: The beez_up_offer of this ChannelInfo.
        :type beez_up_offer: str
        """

        self._beez_up_offer = beez_up_offer

    @property
    def channel_description(self):
        """Gets the channel_description of this ChannelInfo.

        Indicae a description to the channel

        :return: The channel_description of this ChannelInfo.
        :rtype: str
        """
        return self._channel_description

    @channel_description.setter
    def channel_description(self, channel_description):
        """Sets the channel_description of this ChannelInfo.

        Indicae a description to the channel

        :param channel_description: The channel_description of this ChannelInfo.
        :type channel_description: str
        """

        self._channel_description = channel_description

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelInfo.

        The channel identifier

        :return: The channel_id of this ChannelInfo.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelInfo.

        The channel identifier

        :param channel_id: The channel_id of this ChannelInfo.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_logo_url(self):
        """Gets the channel_logo_url of this ChannelInfo.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :return: The channel_logo_url of this ChannelInfo.
        :rtype: str
        """
        return self._channel_logo_url

    @channel_logo_url.setter
    def channel_logo_url(self, channel_logo_url):
        """Sets the channel_logo_url of this ChannelInfo.

        The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>

        :param channel_logo_url: The channel_logo_url of this ChannelInfo.
        :type channel_logo_url: str
        """
        if channel_logo_url is not None and not re.search(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', channel_logo_url):
            raise ValueError("Invalid value for `channel_logo_url`, must be a follow pattern or equal to `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`")

        self._channel_logo_url = channel_logo_url

    @property
    def channel_name(self):
        """Gets the channel_name of this ChannelInfo.

        The channel name

        :return: The channel_name of this ChannelInfo.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this ChannelInfo.

        The channel name

        :param channel_name: The channel_name of this ChannelInfo.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def details(self):
        """Gets the details of this ChannelInfo.


        :return: The details of this ChannelInfo.
        :rtype: ChannelInfoDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ChannelInfo.


        :param details: The details of this ChannelInfo.
        :type details: ChannelInfoDetails
        """

        self._details = details

    @property
    def key_numbers(self):
        """Gets the key_numbers of this ChannelInfo.


        :return: The key_numbers of this ChannelInfo.
        :rtype: ChannelInfoKeyNumbers
        """
        return self._key_numbers

    @key_numbers.setter
    def key_numbers(self, key_numbers):
        """Sets the key_numbers of this ChannelInfo.


        :param key_numbers: The key_numbers of this ChannelInfo.
        :type key_numbers: ChannelInfoKeyNumbers
        """

        self._key_numbers = key_numbers

    @property
    def sales_contact(self):
        """Gets the sales_contact of this ChannelInfo.


        :return: The sales_contact of this ChannelInfo.
        :rtype: ChannelInfoSalesContact
        """
        return self._sales_contact

    @sales_contact.setter
    def sales_contact(self, sales_contact):
        """Sets the sales_contact of this ChannelInfo.


        :param sales_contact: The sales_contact of this ChannelInfo.
        :type sales_contact: ChannelInfoSalesContact
        """

        self._sales_contact = sales_contact

    @property
    def technical_contact(self):
        """Gets the technical_contact of this ChannelInfo.


        :return: The technical_contact of this ChannelInfo.
        :rtype: ChannelInfoTechnicalContact
        """
        return self._technical_contact

    @technical_contact.setter
    def technical_contact(self, technical_contact):
        """Sets the technical_contact of this ChannelInfo.


        :param technical_contact: The technical_contact of this ChannelInfo.
        :type technical_contact: ChannelInfoTechnicalContact
        """

        self._technical_contact = technical_contact
