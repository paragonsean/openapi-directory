# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class LoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, login: str=None, password: str=None):
        """LoginRequest - a model defined in OpenAPI

        :param login: The login of this LoginRequest.
        :param password: The password of this LoginRequest.
        """
        self.openapi_types = {
            'login': str,
            'password': str
        }

        self.attribute_map = {
            'login': 'login',
            'password': 'password'
        }

        self._login = login
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The loginRequest of this LoginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def login(self):
        """Gets the login of this LoginRequest.

        The email

        :return: The login of this LoginRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this LoginRequest.

        The email

        :param login: The login of this LoginRequest.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")
        if login is not None and not re.search(r'^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$', login):
            raise ValueError("Invalid value for `login`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/`")

        self._login = login

    @property
    def password(self):
        """Gets the password of this LoginRequest.

        Your password

        :return: The password of this LoginRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginRequest.

        Your password

        :param password: The password of this LoginRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
