# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beez_up_common_user_error_message import BeezUPCommonUserErrorMessage
from openapi_server.models.import_already_in_progress_response_links import ImportAlreadyInProgressResponseLinks
from openapi_server import util


class ImportAlreadyInProgressResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[BeezUPCommonUserErrorMessage]=None, links: ImportAlreadyInProgressResponseLinks=None):
        """ImportAlreadyInProgressResponse - a model defined in OpenAPI

        :param errors: The errors of this ImportAlreadyInProgressResponse.
        :param links: The links of this ImportAlreadyInProgressResponse.
        """
        self.openapi_types = {
            'errors': List[BeezUPCommonUserErrorMessage],
            'links': ImportAlreadyInProgressResponseLinks
        }

        self.attribute_map = {
            'errors': 'errors',
            'links': 'links'
        }

        self._errors = errors
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportAlreadyInProgressResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The importAlreadyInProgressResponse of this ImportAlreadyInProgressResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ImportAlreadyInProgressResponse.

        The error message list

        :return: The errors of this ImportAlreadyInProgressResponse.
        :rtype: List[BeezUPCommonUserErrorMessage]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ImportAlreadyInProgressResponse.

        The error message list

        :param errors: The errors of this ImportAlreadyInProgressResponse.
        :type errors: List[BeezUPCommonUserErrorMessage]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def links(self):
        """Gets the links of this ImportAlreadyInProgressResponse.


        :return: The links of this ImportAlreadyInProgressResponse.
        :rtype: ImportAlreadyInProgressResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ImportAlreadyInProgressResponse.


        :param links: The links of this ImportAlreadyInProgressResponse.
        :type links: ImportAlreadyInProgressResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
