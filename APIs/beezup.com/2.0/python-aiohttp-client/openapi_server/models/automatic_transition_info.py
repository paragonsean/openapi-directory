# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automatic_transition_info_links import AutomaticTransitionInfoLinks
from openapi_server import util


class AutomaticTransitionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, enabled: bool=None, marketplace_technical_code: str=None, order_status_transition_id: int=None, beez_up_order_status: str=None, business_operation_type: str=None, links: AutomaticTransitionInfoLinks=None, marketplace_business_code: str=None):
        """AutomaticTransitionInfo - a model defined in OpenAPI

        :param account_id: The account_id of this AutomaticTransitionInfo.
        :param enabled: The enabled of this AutomaticTransitionInfo.
        :param marketplace_technical_code: The marketplace_technical_code of this AutomaticTransitionInfo.
        :param order_status_transition_id: The order_status_transition_id of this AutomaticTransitionInfo.
        :param beez_up_order_status: The beez_up_order_status of this AutomaticTransitionInfo.
        :param business_operation_type: The business_operation_type of this AutomaticTransitionInfo.
        :param links: The links of this AutomaticTransitionInfo.
        :param marketplace_business_code: The marketplace_business_code of this AutomaticTransitionInfo.
        """
        self.openapi_types = {
            'account_id': int,
            'enabled': bool,
            'marketplace_technical_code': str,
            'order_status_transition_id': int,
            'beez_up_order_status': str,
            'business_operation_type': str,
            'links': AutomaticTransitionInfoLinks,
            'marketplace_business_code': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'enabled': 'enabled',
            'marketplace_technical_code': 'marketplaceTechnicalCode',
            'order_status_transition_id': 'orderStatusTransitionId',
            'beez_up_order_status': 'beezUPOrderStatus',
            'business_operation_type': 'businessOperationType',
            'links': 'links',
            'marketplace_business_code': 'marketplaceBusinessCode'
        }

        self._account_id = account_id
        self._enabled = enabled
        self._marketplace_technical_code = marketplace_technical_code
        self._order_status_transition_id = order_status_transition_id
        self._beez_up_order_status = beez_up_order_status
        self._business_operation_type = business_operation_type
        self._links = links
        self._marketplace_business_code = marketplace_business_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticTransitionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The automaticTransitionInfo of this AutomaticTransitionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AutomaticTransitionInfo.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :return: The account_id of this AutomaticTransitionInfo.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AutomaticTransitionInfo.

        The marketplace account identifier in BeezUP. This account identifier is based on your api settings.

        :param account_id: The account_id of this AutomaticTransitionInfo.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def enabled(self):
        """Gets the enabled of this AutomaticTransitionInfo.


        :return: The enabled of this AutomaticTransitionInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutomaticTransitionInfo.


        :param enabled: The enabled of this AutomaticTransitionInfo.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def marketplace_technical_code(self):
        """Gets the marketplace_technical_code of this AutomaticTransitionInfo.

        The technical code of the marketplace.

        :return: The marketplace_technical_code of this AutomaticTransitionInfo.
        :rtype: str
        """
        return self._marketplace_technical_code

    @marketplace_technical_code.setter
    def marketplace_technical_code(self, marketplace_technical_code):
        """Sets the marketplace_technical_code of this AutomaticTransitionInfo.

        The technical code of the marketplace.

        :param marketplace_technical_code: The marketplace_technical_code of this AutomaticTransitionInfo.
        :type marketplace_technical_code: str
        """
        if marketplace_technical_code is None:
            raise ValueError("Invalid value for `marketplace_technical_code`, must not be `None`")

        self._marketplace_technical_code = marketplace_technical_code

    @property
    def order_status_transition_id(self):
        """Gets the order_status_transition_id of this AutomaticTransitionInfo.


        :return: The order_status_transition_id of this AutomaticTransitionInfo.
        :rtype: int
        """
        return self._order_status_transition_id

    @order_status_transition_id.setter
    def order_status_transition_id(self, order_status_transition_id):
        """Sets the order_status_transition_id of this AutomaticTransitionInfo.


        :param order_status_transition_id: The order_status_transition_id of this AutomaticTransitionInfo.
        :type order_status_transition_id: int
        """
        if order_status_transition_id is None:
            raise ValueError("Invalid value for `order_status_transition_id`, must not be `None`")

        self._order_status_transition_id = order_status_transition_id

    @property
    def beez_up_order_status(self):
        """Gets the beez_up_order_status of this AutomaticTransitionInfo.

        BeezUP order status. Unified for all marketplaces.

        :return: The beez_up_order_status of this AutomaticTransitionInfo.
        :rtype: str
        """
        return self._beez_up_order_status

    @beez_up_order_status.setter
    def beez_up_order_status(self, beez_up_order_status):
        """Sets the beez_up_order_status of this AutomaticTransitionInfo.

        BeezUP order status. Unified for all marketplaces.

        :param beez_up_order_status: The beez_up_order_status of this AutomaticTransitionInfo.
        :type beez_up_order_status: str
        """
        if beez_up_order_status is None:
            raise ValueError("Invalid value for `beez_up_order_status`, must not be `None`")

        self._beez_up_order_status = beez_up_order_status

    @property
    def business_operation_type(self):
        """Gets the business_operation_type of this AutomaticTransitionInfo.


        :return: The business_operation_type of this AutomaticTransitionInfo.
        :rtype: str
        """
        return self._business_operation_type

    @business_operation_type.setter
    def business_operation_type(self, business_operation_type):
        """Sets the business_operation_type of this AutomaticTransitionInfo.


        :param business_operation_type: The business_operation_type of this AutomaticTransitionInfo.
        :type business_operation_type: str
        """
        if business_operation_type is None:
            raise ValueError("Invalid value for `business_operation_type`, must not be `None`")

        self._business_operation_type = business_operation_type

    @property
    def links(self):
        """Gets the links of this AutomaticTransitionInfo.


        :return: The links of this AutomaticTransitionInfo.
        :rtype: AutomaticTransitionInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AutomaticTransitionInfo.


        :param links: The links of this AutomaticTransitionInfo.
        :type links: AutomaticTransitionInfoLinks
        """

        self._links = links

    @property
    def marketplace_business_code(self):
        """Gets the marketplace_business_code of this AutomaticTransitionInfo.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :return: The marketplace_business_code of this AutomaticTransitionInfo.
        :rtype: str
        """
        return self._marketplace_business_code

    @marketplace_business_code.setter
    def marketplace_business_code(self, marketplace_business_code):
        """Sets the marketplace_business_code of this AutomaticTransitionInfo.

        In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.

        :param marketplace_business_code: The marketplace_business_code of this AutomaticTransitionInfo.
        :type marketplace_business_code: str
        """
        if marketplace_business_code is None:
            raise ValueError("Invalid value for `marketplace_business_code`, must not be `None`")

        self._marketplace_business_code = marketplace_business_code
