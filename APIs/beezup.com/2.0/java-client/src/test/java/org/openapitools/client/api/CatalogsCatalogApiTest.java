/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.CatalogColumnList;
import org.openapitools.client.model.CatalogStoreIndex;
import org.openapitools.client.model.CategoryList;
import org.openapitools.client.model.ChangeCustomColumnExpressionRequest;
import org.openapitools.client.model.ChangeUserColumnNameRequest;
import org.openapitools.client.model.ComputeExpressionRequest;
import org.openapitools.client.model.CreateCustomColumnRequest;
import org.openapitools.client.model.CustomColumnList;
import org.openapitools.client.model.GetProductsRequest;
import org.openapitools.client.model.ImportAlreadyInProgressResponse;
import org.openapitools.client.model.LastManualImportInputConfiguration;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductList;
import org.openapitools.client.model.RandomProductList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogsCatalogApi
 */
@Disabled
public class CatalogsCatalogApiTest {

    private final CatalogsCatalogApi api = new CatalogsCatalogApi();

    /**
     * Change Catalog Column User Name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogChangeCatalogColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest changeUserColumnNameRequest = null;
        api.catalogChangeCatalogColumnUserName(storeId, columnId, changeUserColumnNameRequest);
        // TODO: test validations
    }

    /**
     * Change custom column expression
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest = null;
        api.catalogChangeCustomColumnExpression(storeId, columnId, changeCustomColumnExpressionRequest);
        // TODO: test validations
    }

    /**
     * Change Custom Column User Name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest changeUserColumnNameRequest = null;
        api.catalogChangeCustomColumnUserName(storeId, columnId, changeUserColumnNameRequest);
        // TODO: test validations
    }

    /**
     * Compute the expression for this catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogComputeExpressionTest() throws ApiException {
        String storeId = null;
        ComputeExpressionRequest computeExpressionRequest = null;
        String response = api.catalogComputeExpression(storeId, computeExpressionRequest);
        // TODO: test validations
    }

    /**
     * Delete custom column
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        api.catalogDeleteCustomColumn(storeId, columnId);
        // TODO: test validations
    }

    /**
     * Get catalog column list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCatalogColumnsTest() throws ApiException {
        String storeId = null;
        CatalogColumnList response = api.catalogGetCatalogColumns(storeId);
        // TODO: test validations
    }

    /**
     * Get category list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCategoriesTest() throws ApiException {
        String storeId = null;
        List<String> acceptEncoding = null;
        CategoryList response = api.catalogGetCategories(storeId, acceptEncoding);
        // TODO: test validations
    }

    /**
     * Get the encrypted custom column expression
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        String response = api.catalogGetCustomColumnExpression(storeId, columnId);
        // TODO: test validations
    }

    /**
     * Get custom column list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        CustomColumnList response = api.catalogGetCustomColumns(storeId);
        // TODO: test validations
    }

    /**
     * Get product by ProductId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetProductByProductIdTest() throws ApiException {
        String storeId = null;
        String productId = null;
        Product response = api.catalogGetProductByProductId(storeId, productId);
        // TODO: test validations
    }

    /**
     * Get product by Sku
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetProductBySkuTest() throws ApiException {
        String storeId = null;
        String sku = null;
        Product response = api.catalogGetProductBySku(storeId, sku);
        // TODO: test validations
    }

    /**
     * Get product list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetProductsTest() throws ApiException {
        String storeId = null;
        GetProductsRequest getProductsRequest = null;
        ProductList response = api.catalogGetProducts(storeId, getProductsRequest);
        // TODO: test validations
    }

    /**
     * Get random product list
     *
     * We will return 10 products randomly selected with all product values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetRandomProductsTest() throws ApiException {
        String storeId = null;
        RandomProductList response = api.catalogGetRandomProducts(storeId);
        // TODO: test validations
    }

    /**
     * Create or replace a custom column
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        CreateCustomColumnRequest createCustomColumnRequest = null;
        api.catalogSaveCustomColumn(storeId, columnId, createCustomColumnRequest);
        // TODO: test validations
    }

    /**
     * Get the index of the catalog API for this store
     *
     * The operation will give you all the operations you will be able to do on this store for this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogStoreIndexTest() throws ApiException {
        String storeId = null;
        CatalogStoreIndex response = api.catalogStoreIndex(storeId);
        // TODO: test validations
    }

    /**
     * Get the last input configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importationGetManualUpdateLastInputConfigTest() throws ApiException {
        String storeId = null;
        LastManualImportInputConfiguration response = api.importationGetManualUpdateLastInputConfig(storeId);
        // TODO: test validations
    }

}
