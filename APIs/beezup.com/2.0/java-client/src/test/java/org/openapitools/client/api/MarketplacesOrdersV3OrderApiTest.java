/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ChangeOrderReporting;
import org.openapitools.client.model.ErrorResponseMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderHistory;
import org.openapitools.client.model.OrderWithLinks;
import org.openapitools.client.model.SetMerchantOrderInfoRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MarketplacesOrdersV3OrderApi
 */
@Disabled
public class MarketplacesOrdersV3OrderApiTest {

    private final MarketplacesOrdersV3OrderApi api = new MarketplacesOrdersV3OrderApi();

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeOrderV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String changeOrderType = null;
        String userName = null;
        Boolean testMode = null;
        Map<String, String> requestBody = null;
        api.changeOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, testMode, requestBody);
        // TODO: test validations
    }

    /**
     * Clear an Order&#39;s merchant information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearMerchantOrderInfoV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        Boolean testMode = null;
        api.clearMerchantOrderInfoV3(marketplaceTechnicalCode, accountId, beezUPOrderId, testMode);
        // TODO: test validations
    }

    /**
     * Get the order change reporting
     *
     * This operation will help you to know the status of your order change operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderChangeReportingV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String orderChangeExecutionUUID = null;
        ChangeOrderReporting response = api.getOrderChangeReportingV3(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID);
        // TODO: test validations
    }

    /**
     * Get an Order&#39;s harvest and change history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderHistoryV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        OrderHistory response = api.getOrderHistoryV3(marketplaceTechnicalCode, accountId, beezUPOrderId);
        // TODO: test validations
    }

    /**
     * Get full Order and Order Item(s) properties
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String ifNoneMatch = null;
        OrderWithLinks response = api.getOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Send harvest request for an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void harvestAccountTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        String marketplaceOrderId = null;
        String beezUPOrderId = null;
        api.harvestAccount(marketplaceTechnicalCode, accountId, marketplaceOrderId, beezUPOrderId);
        // TODO: test validations
    }

    /**
     * Send harvest request for a single Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void harvestOrderV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        api.harvestOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId);
        // TODO: test validations
    }

    /**
     * Get the meta information about the order (ETag, Last-Modified)
     *
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void headOrderV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String ifNoneMatch = null;
        api.headOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Set an Order&#39;s merchant information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setMerchantOrderInfoV3Test() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        SetMerchantOrderInfoRequest setMerchantOrderInfoRequest = null;
        Boolean testMode = null;
        api.setMerchantOrderInfoV3(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, testMode);
        // TODO: test validations
    }

}
