/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.CreateRuleRequest;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleExecutionReportings;
import org.openapitools.client.model.RuleList;
import org.openapitools.client.model.UpdateRuleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRule
     * @param storeId Your store identifier (required)
     * @param createRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Period on filter cannot be custom or filter does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Reached the maximum amount of rules allowed for your offer. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleCall(String storeId, CreateRuleRequest createRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRuleRequest;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleValidateBeforeCall(String storeId, CreateRuleRequest createRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createRule(Async)");
        }

        // verify the required parameter 'createRuleRequest' is set
        if (createRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createRuleRequest' when calling createRule(Async)");
        }

        return createRuleCall(storeId, createRuleRequest, _callback);

    }

    /**
     * Rule creation
     * 
     * @param storeId Your store identifier (required)
     * @param createRuleRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Period on filter cannot be custom or filter does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Reached the maximum amount of rules allowed for your offer. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void createRule(String storeId, CreateRuleRequest createRuleRequest) throws ApiException {
        createRuleWithHttpInfo(storeId, createRuleRequest);
    }

    /**
     * Rule creation
     * 
     * @param storeId Your store identifier (required)
     * @param createRuleRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Period on filter cannot be custom or filter does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Reached the maximum amount of rules allowed for your offer. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createRuleWithHttpInfo(String storeId, CreateRuleRequest createRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createRuleValidateBeforeCall(storeId, createRuleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rule creation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param createRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Period on filter cannot be custom or filter does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Reached the maximum amount of rules allowed for your offer. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleAsync(String storeId, CreateRuleRequest createRuleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleValidateBeforeCall(storeId, createRuleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteRule(Async)");
        }

        return deleteRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Delete Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRule(String storeId, String ruleId) throws ApiException {
        deleteRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Delete Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/disable"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling disableRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling disableRule(Async)");
        }

        return disableRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Disable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void disableRule(String storeId, String ruleId) throws ApiException {
        disableRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Disable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disableRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = disableRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rune enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/enable"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling enableRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling enableRule(Async)");
        }

        return enableRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Enable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rune enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void enableRule(String storeId, String ruleId) throws ApiException {
        enableRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Enable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rune enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enableRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = enableRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rune enabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }

        return getRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Gets the rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public Rule getRule(String storeId, String ruleId) throws ApiException {
        ApiResponse<Rule> localVarResp = getRuleWithHttpInfo(storeId, ruleId);
        return localVarResp.getData();
    }

    /**
     * Gets the rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> getRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = getRuleValidateBeforeCall(storeId, ruleId, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleAsync(String storeId, String ruleId, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleValidateBeforeCall(storeId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRules
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRulesCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRulesValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRules(Async)");
        }

        return getRulesCall(storeId, _callback);

    }

    /**
     * Gets the list of rules for a given store
     * 
     * @param storeId Your store identifier (required)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public RuleList getRules(String storeId) throws ApiException {
        ApiResponse<RuleList> localVarResp = getRulesWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of rules for a given store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> getRulesWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = getRulesValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of rules for a given store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRulesAsync(String storeId, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRulesValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRulesExecutions
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rules executions list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRulesExecutionsCall(String storeId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/executions"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRulesExecutionsValidateBeforeCall(String storeId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRulesExecutions(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getRulesExecutions(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getRulesExecutions(Async)");
        }

        return getRulesExecutionsCall(storeId, pageNumber, pageSize, _callback);

    }

    /**
     * Get the rules execution history
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @return RuleExecutionReportings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rules executions list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public RuleExecutionReportings getRulesExecutions(String storeId, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<RuleExecutionReportings> localVarResp = getRulesExecutionsWithHttpInfo(storeId, pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the rules execution history
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @return ApiResponse&lt;RuleExecutionReportings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rules executions list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleExecutionReportings> getRulesExecutionsWithHttpInfo(String storeId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getRulesExecutionsValidateBeforeCall(storeId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<RuleExecutionReportings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the rules execution history (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rules executions list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRulesExecutionsAsync(String storeId, Integer pageNumber, Integer pageSize, final ApiCallback<RuleExecutionReportings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRulesExecutionsValidateBeforeCall(storeId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RuleExecutionReportings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveDownRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved down </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveDownRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/movedown"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveDownRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling moveDownRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling moveDownRule(Async)");
        }

        return moveDownRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Move the rule down
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved down </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void moveDownRule(String storeId, String ruleId) throws ApiException {
        moveDownRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Move the rule down
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved down </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveDownRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = moveDownRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move the rule down (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved down </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveDownRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveDownRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveUpRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved up </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveUpRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/moveup"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveUpRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling moveUpRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling moveUpRule(Async)");
        }

        return moveUpRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Move the rule up
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved up </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void moveUpRule(String storeId, String ruleId) throws ApiException {
        moveUpRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Move the rule up
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved up </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moveUpRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = moveUpRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move the rule up (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule moved up </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Priority can only be changed when more than one rule is defined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveUpRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveUpRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for runRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Rule is not enabled. Please enable this run before trying to run it. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runRuleCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/run"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runRuleValidateBeforeCall(String storeId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling runRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling runRule(Async)");
        }

        return runRuleCall(storeId, ruleId, _callback);

    }

    /**
     * Run rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Rule is not enabled. Please enable this run before trying to run it. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void runRule(String storeId, String ruleId) throws ApiException {
        runRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Run rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Rule is not enabled. Please enable this run before trying to run it. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> runRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = runRuleValidateBeforeCall(storeId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Rule is not enabled. Please enable this run before trying to run it. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runRuleAsync(String storeId, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = runRuleValidateBeforeCall(storeId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for runRules
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All rules executed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runRulesCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/run"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runRulesValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling runRules(Async)");
        }

        return runRulesCall(storeId, _callback);

    }

    /**
     * Run all rules for this store
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All rules executed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void runRules(String storeId) throws ApiException {
        runRulesWithHttpInfo(storeId);
    }

    /**
     * Run all rules for this store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All rules executed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> runRulesWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = runRulesValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run all rules for this store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All rules executed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runRulesAsync(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = runRulesValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRule
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param updateRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Filter does not exist or period on filter cannot be custom </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleCall(String storeId, String ruleId, UpdateRuleRequest updateRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRuleRequest;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(String storeId, String ruleId, UpdateRuleRequest updateRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }

        // verify the required parameter 'updateRuleRequest' is set
        if (updateRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRuleRequest' when calling updateRule(Async)");
        }

        return updateRuleCall(storeId, ruleId, updateRuleRequest, _callback);

    }

    /**
     * Update Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param updateRuleRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Filter does not exist or period on filter cannot be custom </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void updateRule(String storeId, String ruleId, UpdateRuleRequest updateRuleRequest) throws ApiException {
        updateRuleWithHttpInfo(storeId, ruleId, updateRuleRequest);
    }

    /**
     * Update Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param updateRuleRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Filter does not exist or period on filter cannot be custom </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRuleWithHttpInfo(String storeId, String ruleId, UpdateRuleRequest updateRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(storeId, ruleId, updateRuleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param updateRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Rule updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Filter does not exist or period on filter cannot be custom </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Store not allowed to use rules. Please upgrade your offer or contact us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Rules for this store are currently running. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleAsync(String storeId, String ruleId, UpdateRuleRequest updateRuleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(storeId, ruleId, updateRuleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
