/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChannelColumn;
import org.openapitools.client.model.ChannelHeader;
import org.openapitools.client.model.ChannelInfo;
import org.openapitools.client.model.ChannelRootCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsChannelsGlobalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsChannelsGlobalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsChannelsGlobalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAvailableChannels
     * @param storeId The store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available channel list for this store </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableChannelsCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/channels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeId", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableChannelsValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getAvailableChannels(Async)");
        }

        return getAvailableChannelsCall(storeId, _callback);

    }

    /**
     * List all available channel for this store
     * 
     * @param storeId The store identifier (required)
     * @return List&lt;ChannelHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available channel list for this store </td><td>  -  </td></tr>
     </table>
     */
    public List<ChannelHeader> getAvailableChannels(String storeId) throws ApiException {
        ApiResponse<List<ChannelHeader>> localVarResp = getAvailableChannelsWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * List all available channel for this store
     * 
     * @param storeId The store identifier (required)
     * @return ApiResponse&lt;List&lt;ChannelHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available channel list for this store </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChannelHeader>> getAvailableChannelsWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableChannelsValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<List<ChannelHeader>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all available channel for this store (asynchronously)
     * 
     * @param storeId The store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available channel list for this store </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableChannelsAsync(String storeId, final ApiCallback<List<ChannelHeader>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableChannelsValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<List<ChannelHeader>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCategories
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCategoriesCall(String channelId, List<String> acceptEncoding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}/categories"
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCategoriesValidateBeforeCall(String channelId, List<String> acceptEncoding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelCategories(Async)");
        }

        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getChannelCategories(Async)");
        }

        return getChannelCategoriesCall(channelId, acceptEncoding, _callback);

    }

    /**
     * Get channel categories
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ChannelRootCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public ChannelRootCategory getChannelCategories(String channelId, List<String> acceptEncoding) throws ApiException {
        ApiResponse<ChannelRootCategory> localVarResp = getChannelCategoriesWithHttpInfo(channelId, acceptEncoding);
        return localVarResp.getData();
    }

    /**
     * Get channel categories
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ApiResponse&lt;ChannelRootCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public ApiResponse<ChannelRootCategory> getChannelCategoriesWithHttpInfo(String channelId, List<String> acceptEncoding) throws ApiException {
        okhttp3.Call localVarCall = getChannelCategoriesValidateBeforeCall(channelId, acceptEncoding, null);
        Type localVarReturnType = new TypeToken<ChannelRootCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel categories (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCategoriesAsync(String channelId, List<String> acceptEncoding, final ApiCallback<ChannelRootCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCategoriesValidateBeforeCall(channelId, acceptEncoding, _callback);
        Type localVarReturnType = new TypeToken<ChannelRootCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelColumns
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param requestBody Allow you to filter the channel column identifier list your want to get (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel columns </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelColumnsCall(String channelId, List<String> acceptEncoding, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}/columns"
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelColumnsValidateBeforeCall(String channelId, List<String> acceptEncoding, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelColumns(Async)");
        }

        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getChannelColumns(Async)");
        }

        return getChannelColumnsCall(channelId, acceptEncoding, requestBody, _callback);

    }

    /**
     * Get channel columns
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param requestBody Allow you to filter the channel column identifier list your want to get (optional)
     * @return List&lt;ChannelColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel columns </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public List<ChannelColumn> getChannelColumns(String channelId, List<String> acceptEncoding, List<String> requestBody) throws ApiException {
        ApiResponse<List<ChannelColumn>> localVarResp = getChannelColumnsWithHttpInfo(channelId, acceptEncoding, requestBody);
        return localVarResp.getData();
    }

    /**
     * Get channel columns
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param requestBody Allow you to filter the channel column identifier list your want to get (optional)
     * @return ApiResponse&lt;List&lt;ChannelColumn&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel columns </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<ChannelColumn>> getChannelColumnsWithHttpInfo(String channelId, List<String> acceptEncoding, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getChannelColumnsValidateBeforeCall(channelId, acceptEncoding, requestBody, null);
        Type localVarReturnType = new TypeToken<List<ChannelColumn>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel columns (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param requestBody Allow you to filter the channel column identifier list your want to get (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel columns </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelColumnsAsync(String channelId, List<String> acceptEncoding, List<String> requestBody, final ApiCallback<List<ChannelColumn>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelColumnsValidateBeforeCall(channelId, acceptEncoding, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<ChannelColumn>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelInfo
     * @param channelId The channel identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelInfoCall(String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}"
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelInfoValidateBeforeCall(String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelInfo(Async)");
        }

        return getChannelInfoCall(channelId, _callback);

    }

    /**
     * Get channel information
     * 
     * @param channelId The channel identifier (required)
     * @return ChannelInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel information </td><td>  -  </td></tr>
     </table>
     */
    public ChannelInfo getChannelInfo(String channelId) throws ApiException {
        ApiResponse<ChannelInfo> localVarResp = getChannelInfoWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * Get channel information
     * 
     * @param channelId The channel identifier (required)
     * @return ApiResponse&lt;ChannelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelInfo> getChannelInfoWithHttpInfo(String channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelInfoValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<ChannelInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel information (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelInfoAsync(String channelId, final ApiCallback<ChannelInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelInfoValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<ChannelInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
