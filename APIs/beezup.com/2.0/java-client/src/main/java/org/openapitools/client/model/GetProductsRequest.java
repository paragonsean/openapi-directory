/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message to get products based on these filters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetProductsRequest {
  public static final String SERIALIZED_NAME_CATEGORY_PATH = "categoryPath";
  @SerializedName(SERIALIZED_NAME_CATEGORY_PATH)
  private List<String> categoryPath = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMN_ID_LIST = "columnIdList";
  @SerializedName(SERIALIZED_NAME_COLUMN_ID_LIST)
  private List<String> columnIdList = new ArrayList<>();

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_EXISTS = "exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  private Boolean exists;

  public static final String SERIALIZED_NAME_MPN = "mpn";
  @SerializedName(SERIALIZED_NAME_MPN)
  private String mpn;

  public static final String SERIALIZED_NAME_ORDER_BY_CATALOG_COLUMN_ID = "orderByCatalogColumnId";
  @SerializedName(SERIALIZED_NAME_ORDER_BY_CATALOG_COLUMN_ID)
  private String orderByCatalogColumnId;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PRODUCT_ID_LIST = "productIdList";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID_LIST)
  private List<String> productIdList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WITHOUT_SUB_CATEGORIES = "withoutSubCategories";
  @SerializedName(SERIALIZED_NAME_WITHOUT_SUB_CATEGORIES)
  private Boolean withoutSubCategories;

  public GetProductsRequest() {
  }

  public GetProductsRequest categoryPath(List<String> categoryPath) {
    this.categoryPath = categoryPath;
    return this;
  }

  public GetProductsRequest addCategoryPathItem(String categoryPathItem) {
    if (this.categoryPath == null) {
      this.categoryPath = new ArrayList<>();
    }
    this.categoryPath.add(categoryPathItem);
    return this;
  }

  /**
   * The catalog category path
   * @return categoryPath
   */
  @javax.annotation.Nullable
  public List<String> getCategoryPath() {
    return categoryPath;
  }

  public void setCategoryPath(List<String> categoryPath) {
    this.categoryPath = categoryPath;
  }


  public GetProductsRequest columnIdList(List<String> columnIdList) {
    this.columnIdList = columnIdList;
    return this;
  }

  public GetProductsRequest addColumnIdListItem(String columnIdListItem) {
    if (this.columnIdList == null) {
      this.columnIdList = new ArrayList<>();
    }
    this.columnIdList.add(columnIdListItem);
    return this;
  }

  /**
   * Get columnIdList
   * @return columnIdList
   */
  @javax.annotation.Nullable
  public List<String> getColumnIdList() {
    return columnIdList;
  }

  public void setColumnIdList(List<String> columnIdList) {
    this.columnIdList = columnIdList;
  }


  public GetProductsRequest ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * Search for product by ean
   * @return ean
   */
  @javax.annotation.Nullable
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public GetProductsRequest exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Search for existing products or not. If null you will received both.
   * @return exists
   */
  @javax.annotation.Nullable
  public Boolean getExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }


  public GetProductsRequest mpn(String mpn) {
    this.mpn = mpn;
    return this;
  }

  /**
   * Search for product by mpn
   * @return mpn
   */
  @javax.annotation.Nullable
  public String getMpn() {
    return mpn;
  }

  public void setMpn(String mpn) {
    this.mpn = mpn;
  }


  public GetProductsRequest orderByCatalogColumnId(String orderByCatalogColumnId) {
    this.orderByCatalogColumnId = orderByCatalogColumnId;
    return this;
  }

  /**
   * The catalog column identifier (catalog or custom column)
   * @return orderByCatalogColumnId
   */
  @javax.annotation.Nullable
  public String getOrderByCatalogColumnId() {
    return orderByCatalogColumnId;
  }

  public void setOrderByCatalogColumnId(String orderByCatalogColumnId) {
    this.orderByCatalogColumnId = orderByCatalogColumnId;
  }


  public GetProductsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Indicates the page number
   * minimum: 1
   * @return pageNumber
   */
  @javax.annotation.Nonnull
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public GetProductsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Indicate the item count per page
   * minimum: 25
   * maximum: 100
   * @return pageSize
   */
  @javax.annotation.Nonnull
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetProductsRequest productIdList(List<String> productIdList) {
    this.productIdList = productIdList;
    return this;
  }

  public GetProductsRequest addProductIdListItem(String productIdListItem) {
    if (this.productIdList == null) {
      this.productIdList = new ArrayList<>();
    }
    this.productIdList.add(productIdListItem);
    return this;
  }

  /**
   * Filter with a list of product identifier
   * @return productIdList
   */
  @javax.annotation.Nullable
  public List<String> getProductIdList() {
    return productIdList;
  }

  public void setProductIdList(List<String> productIdList) {
    this.productIdList = productIdList;
  }


  public GetProductsRequest sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Search for product by sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public GetProductsRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Search for products containing this title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetProductsRequest withoutSubCategories(Boolean withoutSubCategories) {
    this.withoutSubCategories = withoutSubCategories;
    return this;
  }

  /**
   * Do not retrieve sub categories. By default, this value is set to false
   * @return withoutSubCategories
   */
  @javax.annotation.Nullable
  public Boolean getWithoutSubCategories() {
    return withoutSubCategories;
  }

  public void setWithoutSubCategories(Boolean withoutSubCategories) {
    this.withoutSubCategories = withoutSubCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetProductsRequest getProductsRequest = (GetProductsRequest) o;
    return Objects.equals(this.categoryPath, getProductsRequest.categoryPath) &&
        Objects.equals(this.columnIdList, getProductsRequest.columnIdList) &&
        Objects.equals(this.ean, getProductsRequest.ean) &&
        Objects.equals(this.exists, getProductsRequest.exists) &&
        Objects.equals(this.mpn, getProductsRequest.mpn) &&
        Objects.equals(this.orderByCatalogColumnId, getProductsRequest.orderByCatalogColumnId) &&
        Objects.equals(this.pageNumber, getProductsRequest.pageNumber) &&
        Objects.equals(this.pageSize, getProductsRequest.pageSize) &&
        Objects.equals(this.productIdList, getProductsRequest.productIdList) &&
        Objects.equals(this.sku, getProductsRequest.sku) &&
        Objects.equals(this.title, getProductsRequest.title) &&
        Objects.equals(this.withoutSubCategories, getProductsRequest.withoutSubCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryPath, columnIdList, ean, exists, mpn, orderByCatalogColumnId, pageNumber, pageSize, productIdList, sku, title, withoutSubCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetProductsRequest {\n");
    sb.append("    categoryPath: ").append(toIndentedString(categoryPath)).append("\n");
    sb.append("    columnIdList: ").append(toIndentedString(columnIdList)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    mpn: ").append(toIndentedString(mpn)).append("\n");
    sb.append("    orderByCatalogColumnId: ").append(toIndentedString(orderByCatalogColumnId)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    productIdList: ").append(toIndentedString(productIdList)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    withoutSubCategories: ").append(toIndentedString(withoutSubCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryPath");
    openapiFields.add("columnIdList");
    openapiFields.add("ean");
    openapiFields.add("exists");
    openapiFields.add("mpn");
    openapiFields.add("orderByCatalogColumnId");
    openapiFields.add("pageNumber");
    openapiFields.add("pageSize");
    openapiFields.add("productIdList");
    openapiFields.add("sku");
    openapiFields.add("title");
    openapiFields.add("withoutSubCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pageNumber");
    openapiRequiredFields.add("pageSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetProductsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetProductsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetProductsRequest is not found in the empty JSON string", GetProductsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetProductsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProductsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetProductsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryPath") != null && !jsonObj.get("categoryPath").isJsonNull() && !jsonObj.get("categoryPath").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryPath` to be an array in the JSON string but got `%s`", jsonObj.get("categoryPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columnIdList") != null && !jsonObj.get("columnIdList").isJsonNull() && !jsonObj.get("columnIdList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnIdList` to be an array in the JSON string but got `%s`", jsonObj.get("columnIdList").toString()));
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("mpn") != null && !jsonObj.get("mpn").isJsonNull()) && !jsonObj.get("mpn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpn").toString()));
      }
      if ((jsonObj.get("orderByCatalogColumnId") != null && !jsonObj.get("orderByCatalogColumnId").isJsonNull()) && !jsonObj.get("orderByCatalogColumnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderByCatalogColumnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderByCatalogColumnId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productIdList") != null && !jsonObj.get("productIdList").isJsonNull() && !jsonObj.get("productIdList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productIdList` to be an array in the JSON string but got `%s`", jsonObj.get("productIdList").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetProductsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetProductsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetProductsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetProductsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetProductsRequest>() {
           @Override
           public void write(JsonWriter out, GetProductsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetProductsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetProductsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetProductsRequest
   * @throws IOException if the JSON string is invalid with respect to GetProductsRequest
   */
  public static GetProductsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetProductsRequest.class);
  }

  /**
   * Convert an instance of GetProductsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

