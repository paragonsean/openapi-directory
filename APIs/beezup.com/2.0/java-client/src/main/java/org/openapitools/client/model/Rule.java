/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.OptimisationActionName;
import org.openapitools.client.model.RuleLastExecutionStatus;
import org.openapitools.client.model.RuleLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rule {
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private OptimisationActionName actionName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_STATUS = "lastExecutionStatus";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_STATUS)
  private RuleLastExecutionStatus lastExecutionStatus;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_UTC_DATE = "lastExecutionUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_UTC_DATE)
  private OffsetDateTime lastExecutionUtcDate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private RuleLinks links;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_REPORT_FILTER_ID = "reportFilterId";
  @SerializedName(SERIALIZED_NAME_REPORT_FILTER_ID)
  private String reportFilterId;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_VALIDITY_END_UTC_DATE = "validityEndUtcDate";
  @SerializedName(SERIALIZED_NAME_VALIDITY_END_UTC_DATE)
  private OffsetDateTime validityEndUtcDate;

  public static final String SERIALIZED_NAME_VALIDITY_START_UTC_DATE = "validityStartUtcDate";
  @SerializedName(SERIALIZED_NAME_VALIDITY_START_UTC_DATE)
  private OffsetDateTime validityStartUtcDate;

  public Rule() {
  }

  public Rule actionName(OptimisationActionName actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Get actionName
   * @return actionName
   */
  @javax.annotation.Nonnull
  public OptimisationActionName getActionName() {
    return actionName;
  }

  public void setActionName(OptimisationActionName actionName) {
    this.actionName = actionName;
  }


  public Rule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Is the rule enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Rule lastExecutionStatus(RuleLastExecutionStatus lastExecutionStatus) {
    this.lastExecutionStatus = lastExecutionStatus;
    return this;
  }

  /**
   * Get lastExecutionStatus
   * @return lastExecutionStatus
   */
  @javax.annotation.Nullable
  public RuleLastExecutionStatus getLastExecutionStatus() {
    return lastExecutionStatus;
  }

  public void setLastExecutionStatus(RuleLastExecutionStatus lastExecutionStatus) {
    this.lastExecutionStatus = lastExecutionStatus;
  }


  public Rule lastExecutionUtcDate(OffsetDateTime lastExecutionUtcDate) {
    this.lastExecutionUtcDate = lastExecutionUtcDate;
    return this;
  }

  /**
   * The utc date of the last execution
   * @return lastExecutionUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionUtcDate() {
    return lastExecutionUtcDate;
  }

  public void setLastExecutionUtcDate(OffsetDateTime lastExecutionUtcDate) {
    this.lastExecutionUtcDate = lastExecutionUtcDate;
  }


  public Rule links(RuleLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public RuleLinks getLinks() {
    return links;
  }

  public void setLinks(RuleLinks links) {
    this.links = links;
  }


  public Rule position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Rule execution position
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public Rule reportFilterId(String reportFilterId) {
    this.reportFilterId = reportFilterId;
    return this;
  }

  /**
   * Report filter identifier linked to the rule
   * @return reportFilterId
   */
  @javax.annotation.Nonnull
  public String getReportFilterId() {
    return reportFilterId;
  }

  public void setReportFilterId(String reportFilterId) {
    this.reportFilterId = reportFilterId;
  }


  public Rule ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * The identifier of the rule
   * @return ruleId
   */
  @javax.annotation.Nonnull
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public Rule ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * The name of the rule
   * @return ruleName
   */
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public Rule validityEndUtcDate(OffsetDateTime validityEndUtcDate) {
    this.validityEndUtcDate = validityEndUtcDate;
    return this;
  }

  /**
   * Rule validity end utc date
   * @return validityEndUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidityEndUtcDate() {
    return validityEndUtcDate;
  }

  public void setValidityEndUtcDate(OffsetDateTime validityEndUtcDate) {
    this.validityEndUtcDate = validityEndUtcDate;
  }


  public Rule validityStartUtcDate(OffsetDateTime validityStartUtcDate) {
    this.validityStartUtcDate = validityStartUtcDate;
    return this;
  }

  /**
   * Rule validity start utc date
   * @return validityStartUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidityStartUtcDate() {
    return validityStartUtcDate;
  }

  public void setValidityStartUtcDate(OffsetDateTime validityStartUtcDate) {
    this.validityStartUtcDate = validityStartUtcDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rule rule = (Rule) o;
    return Objects.equals(this.actionName, rule.actionName) &&
        Objects.equals(this.enabled, rule.enabled) &&
        Objects.equals(this.lastExecutionStatus, rule.lastExecutionStatus) &&
        Objects.equals(this.lastExecutionUtcDate, rule.lastExecutionUtcDate) &&
        Objects.equals(this.links, rule.links) &&
        Objects.equals(this.position, rule.position) &&
        Objects.equals(this.reportFilterId, rule.reportFilterId) &&
        Objects.equals(this.ruleId, rule.ruleId) &&
        Objects.equals(this.ruleName, rule.ruleName) &&
        Objects.equals(this.validityEndUtcDate, rule.validityEndUtcDate) &&
        Objects.equals(this.validityStartUtcDate, rule.validityStartUtcDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, enabled, lastExecutionStatus, lastExecutionUtcDate, links, position, reportFilterId, ruleId, ruleName, validityEndUtcDate, validityStartUtcDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rule {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    lastExecutionStatus: ").append(toIndentedString(lastExecutionStatus)).append("\n");
    sb.append("    lastExecutionUtcDate: ").append(toIndentedString(lastExecutionUtcDate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    reportFilterId: ").append(toIndentedString(reportFilterId)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    validityEndUtcDate: ").append(toIndentedString(validityEndUtcDate)).append("\n");
    sb.append("    validityStartUtcDate: ").append(toIndentedString(validityStartUtcDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("enabled");
    openapiFields.add("lastExecutionStatus");
    openapiFields.add("lastExecutionUtcDate");
    openapiFields.add("links");
    openapiFields.add("position");
    openapiFields.add("reportFilterId");
    openapiFields.add("ruleId");
    openapiFields.add("ruleName");
    openapiFields.add("validityEndUtcDate");
    openapiFields.add("validityStartUtcDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionName");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("reportFilterId");
    openapiRequiredFields.add("ruleId");
    openapiRequiredFields.add("ruleName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rule is not found in the empty JSON string", Rule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `actionName`
      OptimisationActionName.validateJsonElement(jsonObj.get("actionName"));
      // validate the optional field `lastExecutionStatus`
      if (jsonObj.get("lastExecutionStatus") != null && !jsonObj.get("lastExecutionStatus").isJsonNull()) {
        RuleLastExecutionStatus.validateJsonElement(jsonObj.get("lastExecutionStatus"));
      }
      // validate the required field `links`
      RuleLinks.validateJsonElement(jsonObj.get("links"));
      if (!jsonObj.get("reportFilterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFilterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportFilterId").toString()));
      }
      if (!jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if (!jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rule.class));

       return (TypeAdapter<T>) new TypeAdapter<Rule>() {
           @Override
           public void write(JsonWriter out, Rule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rule
   * @throws IOException if the JSON string is invalid with respect to Rule
   */
  public static Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rule.class);
  }

  /**
   * Convert an instance of Rule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

