/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ErrorResponseMessage;
import org.openapitools.client.model.GetOrderInvoiceDesignPreviewResponse;
import org.openapitools.client.model.GetOrderInvoiceGeneralSettingsResponse;
import org.openapitools.client.model.OrderInvoiceDesignSettings;
import org.openapitools.client.model.OrderInvoiceGeneralSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OmInvoiceApiSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OmInvoiceApiSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OmInvoiceApiSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrderInvoiceDesignSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice design is not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceDesignSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/settings/design";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoiceDesignSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrderInvoiceDesignSettingsCall(_callback);

    }

    /**
     * Get Order Invoice design settings
     * 
     * @return OrderInvoiceDesignSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice design is not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public OrderInvoiceDesignSettings getOrderInvoiceDesignSettings() throws ApiException {
        ApiResponse<OrderInvoiceDesignSettings> localVarResp = getOrderInvoiceDesignSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Order Invoice design settings
     * 
     * @return ApiResponse&lt;OrderInvoiceDesignSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice design is not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderInvoiceDesignSettings> getOrderInvoiceDesignSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoiceDesignSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderInvoiceDesignSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Invoice design settings (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice design is not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceDesignSettingsAsync(final ApiCallback<OrderInvoiceDesignSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoiceDesignSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderInvoiceDesignSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderInvoiceDesignSettingsPreview
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param orderInvoiceDesignSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design Preview successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceDesignSettingsPreviewCall(List<String> acceptEncoding, OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderInvoiceDesignSettings;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/settings/design/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoiceDesignSettingsPreviewValidateBeforeCall(List<String> acceptEncoding, OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getOrderInvoiceDesignSettingsPreview(Async)");
        }

        // verify the required parameter 'orderInvoiceDesignSettings' is set
        if (orderInvoiceDesignSettings == null) {
            throw new ApiException("Missing the required parameter 'orderInvoiceDesignSettings' when calling getOrderInvoiceDesignSettingsPreview(Async)");
        }

        return getOrderInvoiceDesignSettingsPreviewCall(acceptEncoding, orderInvoiceDesignSettings, _callback);

    }

    /**
     * View a preview an Order Invoice using custom design settings
     * 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param orderInvoiceDesignSettings  (required)
     * @return GetOrderInvoiceDesignPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design Preview successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public GetOrderInvoiceDesignPreviewResponse getOrderInvoiceDesignSettingsPreview(List<String> acceptEncoding, OrderInvoiceDesignSettings orderInvoiceDesignSettings) throws ApiException {
        ApiResponse<GetOrderInvoiceDesignPreviewResponse> localVarResp = getOrderInvoiceDesignSettingsPreviewWithHttpInfo(acceptEncoding, orderInvoiceDesignSettings);
        return localVarResp.getData();
    }

    /**
     * View a preview an Order Invoice using custom design settings
     * 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param orderInvoiceDesignSettings  (required)
     * @return ApiResponse&lt;GetOrderInvoiceDesignPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design Preview successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrderInvoiceDesignPreviewResponse> getOrderInvoiceDesignSettingsPreviewWithHttpInfo(List<String> acceptEncoding, OrderInvoiceDesignSettings orderInvoiceDesignSettings) throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoiceDesignSettingsPreviewValidateBeforeCall(acceptEncoding, orderInvoiceDesignSettings, null);
        Type localVarReturnType = new TypeToken<GetOrderInvoiceDesignPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a preview an Order Invoice using custom design settings (asynchronously)
     * 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param orderInvoiceDesignSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Design Preview successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceDesignSettingsPreviewAsync(List<String> acceptEncoding, OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback<GetOrderInvoiceDesignPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoiceDesignSettingsPreviewValidateBeforeCall(acceptEncoding, orderInvoiceDesignSettings, _callback);
        Type localVarReturnType = new TypeToken<GetOrderInvoiceDesignPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderInvoiceGeneralSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice general settings are not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceGeneralSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/settings/general";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoiceGeneralSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrderInvoiceGeneralSettingsCall(_callback);

    }

    /**
     * Get Order Invoice general settings
     * 
     * @return GetOrderInvoiceGeneralSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice general settings are not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public GetOrderInvoiceGeneralSettingsResponse getOrderInvoiceGeneralSettings() throws ApiException {
        ApiResponse<GetOrderInvoiceGeneralSettingsResponse> localVarResp = getOrderInvoiceGeneralSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Order Invoice general settings
     * 
     * @return ApiResponse&lt;GetOrderInvoiceGeneralSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice general settings are not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrderInvoiceGeneralSettingsResponse> getOrderInvoiceGeneralSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoiceGeneralSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetOrderInvoiceGeneralSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Invoice general settings (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice general settings are not found  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoiceGeneralSettingsAsync(final ApiCallback<GetOrderInvoiceGeneralSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoiceGeneralSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetOrderInvoiceGeneralSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveOrderInvoiceDesignSettings
     * @param orderInvoiceDesignSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Design successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The design did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveOrderInvoiceDesignSettingsCall(OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderInvoiceDesignSettings;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/settings/design";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveOrderInvoiceDesignSettingsValidateBeforeCall(OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderInvoiceDesignSettings' is set
        if (orderInvoiceDesignSettings == null) {
            throw new ApiException("Missing the required parameter 'orderInvoiceDesignSettings' when calling saveOrderInvoiceDesignSettings(Async)");
        }

        return saveOrderInvoiceDesignSettingsCall(orderInvoiceDesignSettings, _callback);

    }

    /**
     * Save Order Invoice design settings
     * 
     * @param orderInvoiceDesignSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Design successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The design did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void saveOrderInvoiceDesignSettings(OrderInvoiceDesignSettings orderInvoiceDesignSettings) throws ApiException {
        saveOrderInvoiceDesignSettingsWithHttpInfo(orderInvoiceDesignSettings);
    }

    /**
     * Save Order Invoice design settings
     * 
     * @param orderInvoiceDesignSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Design successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The design did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveOrderInvoiceDesignSettingsWithHttpInfo(OrderInvoiceDesignSettings orderInvoiceDesignSettings) throws ApiException {
        okhttp3.Call localVarCall = saveOrderInvoiceDesignSettingsValidateBeforeCall(orderInvoiceDesignSettings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Order Invoice design settings (asynchronously)
     * 
     * @param orderInvoiceDesignSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Design successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The design did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveOrderInvoiceDesignSettingsAsync(OrderInvoiceDesignSettings orderInvoiceDesignSettings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveOrderInvoiceDesignSettingsValidateBeforeCall(orderInvoiceDesignSettings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveOrderInvoiceGeneralSettings
     * @param orderInvoiceGeneralSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> General Settings successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The settingsgeneral did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveOrderInvoiceGeneralSettingsCall(OrderInvoiceGeneralSettings orderInvoiceGeneralSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderInvoiceGeneralSettings;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/settings/general";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveOrderInvoiceGeneralSettingsValidateBeforeCall(OrderInvoiceGeneralSettings orderInvoiceGeneralSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderInvoiceGeneralSettings' is set
        if (orderInvoiceGeneralSettings == null) {
            throw new ApiException("Missing the required parameter 'orderInvoiceGeneralSettings' when calling saveOrderInvoiceGeneralSettings(Async)");
        }

        return saveOrderInvoiceGeneralSettingsCall(orderInvoiceGeneralSettings, _callback);

    }

    /**
     * Save Order Invoice general settings
     * 
     * @param orderInvoiceGeneralSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> General Settings successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The settingsgeneral did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void saveOrderInvoiceGeneralSettings(OrderInvoiceGeneralSettings orderInvoiceGeneralSettings) throws ApiException {
        saveOrderInvoiceGeneralSettingsWithHttpInfo(orderInvoiceGeneralSettings);
    }

    /**
     * Save Order Invoice general settings
     * 
     * @param orderInvoiceGeneralSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> General Settings successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The settingsgeneral did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveOrderInvoiceGeneralSettingsWithHttpInfo(OrderInvoiceGeneralSettings orderInvoiceGeneralSettings) throws ApiException {
        okhttp3.Call localVarCall = saveOrderInvoiceGeneralSettingsValidateBeforeCall(orderInvoiceGeneralSettings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Order Invoice general settings (asynchronously)
     * 
     * @param orderInvoiceGeneralSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> General Settings successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The settingsgeneral did not pass the validation  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveOrderInvoiceGeneralSettingsAsync(OrderInvoiceGeneralSettings orderInvoiceGeneralSettings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveOrderInvoiceGeneralSettingsValidateBeforeCall(orderInvoiceGeneralSettings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
