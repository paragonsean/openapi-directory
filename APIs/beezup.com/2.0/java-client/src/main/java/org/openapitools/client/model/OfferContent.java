/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContractBillingPeriodInfo;
import org.openapitools.client.model.ContractBonusInfo;
import org.openapitools.client.model.ContractClickInfo;
import org.openapitools.client.model.ContractCommitmentInfo;
import org.openapitools.client.model.ContractDiscountInfo;
import org.openapitools.client.model.ContractMoneyInfo;
import org.openapitools.client.model.ContractStoreInfo;
import org.openapitools.client.model.PreviousFixPeriodInvoiceProrataInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferContent {
  public static final String SERIALIZED_NAME_CONTRACT_BILLING_PERIOD_INFO = "contractBillingPeriodInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_BILLING_PERIOD_INFO)
  private ContractBillingPeriodInfo contractBillingPeriodInfo;

  public static final String SERIALIZED_NAME_CONTRACT_BONUS_INFO = "contractBonusInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_BONUS_INFO)
  private ContractBonusInfo contractBonusInfo;

  public static final String SERIALIZED_NAME_CONTRACT_CLICK_INFO = "contractClickInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_CLICK_INFO)
  private ContractClickInfo contractClickInfo;

  public static final String SERIALIZED_NAME_CONTRACT_COMMITMENT_INFO = "contractCommitmentInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_COMMITMENT_INFO)
  private ContractCommitmentInfo contractCommitmentInfo;

  public static final String SERIALIZED_NAME_CONTRACT_DISCOUNT_INFO = "contractDiscountInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DISCOUNT_INFO)
  private ContractDiscountInfo contractDiscountInfo;

  public static final String SERIALIZED_NAME_CONTRACT_MONEY_INFO = "contractMoneyInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_MONEY_INFO)
  private ContractMoneyInfo contractMoneyInfo;

  public static final String SERIALIZED_NAME_CONTRACT_STORE_INFO = "contractStoreInfo";
  @SerializedName(SERIALIZED_NAME_CONTRACT_STORE_INFO)
  private ContractStoreInfo contractStoreInfo;

  public static final String SERIALIZED_NAME_CONTRACT_TERMINATION_REASON = "contractTerminationReason";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TERMINATION_REASON)
  private String contractTerminationReason;

  public static final String SERIALIZED_NAME_CONTRACT_TERMINATION_REASON_TYPE = "contractTerminationReasonType";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TERMINATION_REASON_TYPE)
  private Integer contractTerminationReasonType;

  public static final String SERIALIZED_NAME_NOTIFY_VAT_EXEMPTION = "notifyVatExemption";
  @SerializedName(SERIALIZED_NAME_NOTIFY_VAT_EXEMPTION)
  private Boolean notifyVatExemption;

  public static final String SERIALIZED_NAME_PREVIOUS_FIX_PERIOD_INVOICE_PRORATA_INFO = "previousFixPeriodInvoiceProrataInfo";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_FIX_PERIOD_INVOICE_PRORATA_INFO)
  private PreviousFixPeriodInvoiceProrataInfo previousFixPeriodInvoiceProrataInfo;

  public OfferContent() {
  }

  public OfferContent contractBillingPeriodInfo(ContractBillingPeriodInfo contractBillingPeriodInfo) {
    this.contractBillingPeriodInfo = contractBillingPeriodInfo;
    return this;
  }

  /**
   * Get contractBillingPeriodInfo
   * @return contractBillingPeriodInfo
   */
  @javax.annotation.Nonnull
  public ContractBillingPeriodInfo getContractBillingPeriodInfo() {
    return contractBillingPeriodInfo;
  }

  public void setContractBillingPeriodInfo(ContractBillingPeriodInfo contractBillingPeriodInfo) {
    this.contractBillingPeriodInfo = contractBillingPeriodInfo;
  }


  public OfferContent contractBonusInfo(ContractBonusInfo contractBonusInfo) {
    this.contractBonusInfo = contractBonusInfo;
    return this;
  }

  /**
   * Get contractBonusInfo
   * @return contractBonusInfo
   */
  @javax.annotation.Nonnull
  public ContractBonusInfo getContractBonusInfo() {
    return contractBonusInfo;
  }

  public void setContractBonusInfo(ContractBonusInfo contractBonusInfo) {
    this.contractBonusInfo = contractBonusInfo;
  }


  public OfferContent contractClickInfo(ContractClickInfo contractClickInfo) {
    this.contractClickInfo = contractClickInfo;
    return this;
  }

  /**
   * Get contractClickInfo
   * @return contractClickInfo
   */
  @javax.annotation.Nonnull
  public ContractClickInfo getContractClickInfo() {
    return contractClickInfo;
  }

  public void setContractClickInfo(ContractClickInfo contractClickInfo) {
    this.contractClickInfo = contractClickInfo;
  }


  public OfferContent contractCommitmentInfo(ContractCommitmentInfo contractCommitmentInfo) {
    this.contractCommitmentInfo = contractCommitmentInfo;
    return this;
  }

  /**
   * Get contractCommitmentInfo
   * @return contractCommitmentInfo
   */
  @javax.annotation.Nonnull
  public ContractCommitmentInfo getContractCommitmentInfo() {
    return contractCommitmentInfo;
  }

  public void setContractCommitmentInfo(ContractCommitmentInfo contractCommitmentInfo) {
    this.contractCommitmentInfo = contractCommitmentInfo;
  }


  public OfferContent contractDiscountInfo(ContractDiscountInfo contractDiscountInfo) {
    this.contractDiscountInfo = contractDiscountInfo;
    return this;
  }

  /**
   * Get contractDiscountInfo
   * @return contractDiscountInfo
   */
  @javax.annotation.Nonnull
  public ContractDiscountInfo getContractDiscountInfo() {
    return contractDiscountInfo;
  }

  public void setContractDiscountInfo(ContractDiscountInfo contractDiscountInfo) {
    this.contractDiscountInfo = contractDiscountInfo;
  }


  public OfferContent contractMoneyInfo(ContractMoneyInfo contractMoneyInfo) {
    this.contractMoneyInfo = contractMoneyInfo;
    return this;
  }

  /**
   * Get contractMoneyInfo
   * @return contractMoneyInfo
   */
  @javax.annotation.Nonnull
  public ContractMoneyInfo getContractMoneyInfo() {
    return contractMoneyInfo;
  }

  public void setContractMoneyInfo(ContractMoneyInfo contractMoneyInfo) {
    this.contractMoneyInfo = contractMoneyInfo;
  }


  public OfferContent contractStoreInfo(ContractStoreInfo contractStoreInfo) {
    this.contractStoreInfo = contractStoreInfo;
    return this;
  }

  /**
   * Get contractStoreInfo
   * @return contractStoreInfo
   */
  @javax.annotation.Nonnull
  public ContractStoreInfo getContractStoreInfo() {
    return contractStoreInfo;
  }

  public void setContractStoreInfo(ContractStoreInfo contractStoreInfo) {
    this.contractStoreInfo = contractStoreInfo;
  }


  public OfferContent contractTerminationReason(String contractTerminationReason) {
    this.contractTerminationReason = contractTerminationReason;
    return this;
  }

  /**
   * The termination reason, if your current contract is scheduled to be terminated.
   * @return contractTerminationReason
   */
  @javax.annotation.Nullable
  public String getContractTerminationReason() {
    return contractTerminationReason;
  }

  public void setContractTerminationReason(String contractTerminationReason) {
    this.contractTerminationReason = contractTerminationReason;
  }


  public OfferContent contractTerminationReasonType(Integer contractTerminationReasonType) {
    this.contractTerminationReasonType = contractTerminationReasonType;
    return this;
  }

  /**
   * The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason
   * @return contractTerminationReasonType
   */
  @javax.annotation.Nullable
  public Integer getContractTerminationReasonType() {
    return contractTerminationReasonType;
  }

  public void setContractTerminationReasonType(Integer contractTerminationReasonType) {
    this.contractTerminationReasonType = contractTerminationReasonType;
  }


  public OfferContent notifyVatExemption(Boolean notifyVatExemption) {
    this.notifyVatExemption = notifyVatExemption;
    return this;
  }

  /**
   * Internal usage: Indicates if we have to notify you about VAT exemption.
   * @return notifyVatExemption
   */
  @javax.annotation.Nonnull
  public Boolean getNotifyVatExemption() {
    return notifyVatExemption;
  }

  public void setNotifyVatExemption(Boolean notifyVatExemption) {
    this.notifyVatExemption = notifyVatExemption;
  }


  public OfferContent previousFixPeriodInvoiceProrataInfo(PreviousFixPeriodInvoiceProrataInfo previousFixPeriodInvoiceProrataInfo) {
    this.previousFixPeriodInvoiceProrataInfo = previousFixPeriodInvoiceProrataInfo;
    return this;
  }

  /**
   * Get previousFixPeriodInvoiceProrataInfo
   * @return previousFixPeriodInvoiceProrataInfo
   */
  @javax.annotation.Nonnull
  public PreviousFixPeriodInvoiceProrataInfo getPreviousFixPeriodInvoiceProrataInfo() {
    return previousFixPeriodInvoiceProrataInfo;
  }

  public void setPreviousFixPeriodInvoiceProrataInfo(PreviousFixPeriodInvoiceProrataInfo previousFixPeriodInvoiceProrataInfo) {
    this.previousFixPeriodInvoiceProrataInfo = previousFixPeriodInvoiceProrataInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferContent offerContent = (OfferContent) o;
    return Objects.equals(this.contractBillingPeriodInfo, offerContent.contractBillingPeriodInfo) &&
        Objects.equals(this.contractBonusInfo, offerContent.contractBonusInfo) &&
        Objects.equals(this.contractClickInfo, offerContent.contractClickInfo) &&
        Objects.equals(this.contractCommitmentInfo, offerContent.contractCommitmentInfo) &&
        Objects.equals(this.contractDiscountInfo, offerContent.contractDiscountInfo) &&
        Objects.equals(this.contractMoneyInfo, offerContent.contractMoneyInfo) &&
        Objects.equals(this.contractStoreInfo, offerContent.contractStoreInfo) &&
        Objects.equals(this.contractTerminationReason, offerContent.contractTerminationReason) &&
        Objects.equals(this.contractTerminationReasonType, offerContent.contractTerminationReasonType) &&
        Objects.equals(this.notifyVatExemption, offerContent.notifyVatExemption) &&
        Objects.equals(this.previousFixPeriodInvoiceProrataInfo, offerContent.previousFixPeriodInvoiceProrataInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractBillingPeriodInfo, contractBonusInfo, contractClickInfo, contractCommitmentInfo, contractDiscountInfo, contractMoneyInfo, contractStoreInfo, contractTerminationReason, contractTerminationReasonType, notifyVatExemption, previousFixPeriodInvoiceProrataInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferContent {\n");
    sb.append("    contractBillingPeriodInfo: ").append(toIndentedString(contractBillingPeriodInfo)).append("\n");
    sb.append("    contractBonusInfo: ").append(toIndentedString(contractBonusInfo)).append("\n");
    sb.append("    contractClickInfo: ").append(toIndentedString(contractClickInfo)).append("\n");
    sb.append("    contractCommitmentInfo: ").append(toIndentedString(contractCommitmentInfo)).append("\n");
    sb.append("    contractDiscountInfo: ").append(toIndentedString(contractDiscountInfo)).append("\n");
    sb.append("    contractMoneyInfo: ").append(toIndentedString(contractMoneyInfo)).append("\n");
    sb.append("    contractStoreInfo: ").append(toIndentedString(contractStoreInfo)).append("\n");
    sb.append("    contractTerminationReason: ").append(toIndentedString(contractTerminationReason)).append("\n");
    sb.append("    contractTerminationReasonType: ").append(toIndentedString(contractTerminationReasonType)).append("\n");
    sb.append("    notifyVatExemption: ").append(toIndentedString(notifyVatExemption)).append("\n");
    sb.append("    previousFixPeriodInvoiceProrataInfo: ").append(toIndentedString(previousFixPeriodInvoiceProrataInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractBillingPeriodInfo");
    openapiFields.add("contractBonusInfo");
    openapiFields.add("contractClickInfo");
    openapiFields.add("contractCommitmentInfo");
    openapiFields.add("contractDiscountInfo");
    openapiFields.add("contractMoneyInfo");
    openapiFields.add("contractStoreInfo");
    openapiFields.add("contractTerminationReason");
    openapiFields.add("contractTerminationReasonType");
    openapiFields.add("notifyVatExemption");
    openapiFields.add("previousFixPeriodInvoiceProrataInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractBillingPeriodInfo");
    openapiRequiredFields.add("contractBonusInfo");
    openapiRequiredFields.add("contractClickInfo");
    openapiRequiredFields.add("contractCommitmentInfo");
    openapiRequiredFields.add("contractDiscountInfo");
    openapiRequiredFields.add("contractMoneyInfo");
    openapiRequiredFields.add("contractStoreInfo");
    openapiRequiredFields.add("notifyVatExemption");
    openapiRequiredFields.add("previousFixPeriodInvoiceProrataInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferContent is not found in the empty JSON string", OfferContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OfferContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contractBillingPeriodInfo`
      ContractBillingPeriodInfo.validateJsonElement(jsonObj.get("contractBillingPeriodInfo"));
      // validate the required field `contractBonusInfo`
      ContractBonusInfo.validateJsonElement(jsonObj.get("contractBonusInfo"));
      // validate the required field `contractClickInfo`
      ContractClickInfo.validateJsonElement(jsonObj.get("contractClickInfo"));
      // validate the required field `contractCommitmentInfo`
      ContractCommitmentInfo.validateJsonElement(jsonObj.get("contractCommitmentInfo"));
      // validate the required field `contractDiscountInfo`
      ContractDiscountInfo.validateJsonElement(jsonObj.get("contractDiscountInfo"));
      // validate the required field `contractMoneyInfo`
      ContractMoneyInfo.validateJsonElement(jsonObj.get("contractMoneyInfo"));
      // validate the required field `contractStoreInfo`
      ContractStoreInfo.validateJsonElement(jsonObj.get("contractStoreInfo"));
      if ((jsonObj.get("contractTerminationReason") != null && !jsonObj.get("contractTerminationReason").isJsonNull()) && !jsonObj.get("contractTerminationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractTerminationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractTerminationReason").toString()));
      }
      // validate the required field `previousFixPeriodInvoiceProrataInfo`
      PreviousFixPeriodInvoiceProrataInfo.validateJsonElement(jsonObj.get("previousFixPeriodInvoiceProrataInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferContent.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferContent>() {
           @Override
           public void write(JsonWriter out, OfferContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferContent
   * @throws IOException if the JSON string is invalid with respect to OfferContent
   */
  public static OfferContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferContent.class);
  }

  /**
   * Convert an instance of OfferContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

