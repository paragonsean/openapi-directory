/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutoImportConfiguration;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ConfigureAutoImportIntervalRequest;
import org.openapitools.client.model.LinksImportationGetImportationMonitoringLink;
import org.openapitools.client.model.ScheduleAutoImportRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsAutoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogsAutoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsAutoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoConfigureAutoImportInterval
     * @param storeId Your store identifier (required)
     * @param configureAutoImportIntervalRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling interval saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoConfigureAutoImportIntervalCall(String storeId, ConfigureAutoImportIntervalRequest configureAutoImportIntervalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configureAutoImportIntervalRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/interval"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoConfigureAutoImportIntervalValidateBeforeCall(String storeId, ConfigureAutoImportIntervalRequest configureAutoImportIntervalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoConfigureAutoImportInterval(Async)");
        }

        // verify the required parameter 'configureAutoImportIntervalRequest' is set
        if (configureAutoImportIntervalRequest == null) {
            throw new ApiException("Missing the required parameter 'configureAutoImportIntervalRequest' when calling autoConfigureAutoImportInterval(Async)");
        }

        return autoConfigureAutoImportIntervalCall(storeId, configureAutoImportIntervalRequest, _callback);

    }

    /**
     * Configure Auto Import Interval
     * 
     * @param storeId Your store identifier (required)
     * @param configureAutoImportIntervalRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling interval saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void autoConfigureAutoImportInterval(String storeId, ConfigureAutoImportIntervalRequest configureAutoImportIntervalRequest) throws ApiException {
        autoConfigureAutoImportIntervalWithHttpInfo(storeId, configureAutoImportIntervalRequest);
    }

    /**
     * Configure Auto Import Interval
     * 
     * @param storeId Your store identifier (required)
     * @param configureAutoImportIntervalRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling interval saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoConfigureAutoImportIntervalWithHttpInfo(String storeId, ConfigureAutoImportIntervalRequest configureAutoImportIntervalRequest) throws ApiException {
        okhttp3.Call localVarCall = autoConfigureAutoImportIntervalValidateBeforeCall(storeId, configureAutoImportIntervalRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure Auto Import Interval (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param configureAutoImportIntervalRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling interval saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoConfigureAutoImportIntervalAsync(String storeId, ConfigureAutoImportIntervalRequest configureAutoImportIntervalRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoConfigureAutoImportIntervalValidateBeforeCall(storeId, configureAutoImportIntervalRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoDeleteAutoImport
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoDeleteAutoImportCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoDeleteAutoImportValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoDeleteAutoImport(Async)");
        }

        return autoDeleteAutoImportCall(storeId, _callback);

    }

    /**
     * Delete Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void autoDeleteAutoImport(String storeId) throws ApiException {
        autoDeleteAutoImportWithHttpInfo(storeId);
    }

    /**
     * Delete Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoDeleteAutoImportWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = autoDeleteAutoImportValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoDeleteAutoImportAsync(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoDeleteAutoImportValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoGetAutoImportConfiguration
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto import configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Auto Import configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoGetAutoImportConfigurationCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoGetAutoImportConfigurationValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoGetAutoImportConfiguration(Async)");
        }

        return autoGetAutoImportConfigurationCall(storeId, _callback);

    }

    /**
     * Get the auto import configuration
     * 
     * @param storeId Your store identifier (required)
     * @return AutoImportConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto import configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Auto Import configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public AutoImportConfiguration autoGetAutoImportConfiguration(String storeId) throws ApiException {
        ApiResponse<AutoImportConfiguration> localVarResp = autoGetAutoImportConfigurationWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get the auto import configuration
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;AutoImportConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto import configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Auto Import configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoImportConfiguration> autoGetAutoImportConfigurationWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = autoGetAutoImportConfigurationValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<AutoImportConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the auto import configuration (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Auto import configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Auto Import configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoGetAutoImportConfigurationAsync(String storeId, final ApiCallback<AutoImportConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoGetAutoImportConfigurationValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<AutoImportConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoPauseAutoImport
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoPauseAutoImportCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/pause"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoPauseAutoImportValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoPauseAutoImport(Async)");
        }

        return autoPauseAutoImportCall(storeId, _callback);

    }

    /**
     * Pause Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void autoPauseAutoImport(String storeId) throws ApiException {
        autoPauseAutoImportWithHttpInfo(storeId);
    }

    /**
     * Pause Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoPauseAutoImportWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = autoPauseAutoImportValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Pause Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import paused </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoPauseAutoImportAsync(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoPauseAutoImportValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoResumeAutoImport
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import resumed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoResumeAutoImportCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/resume"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoResumeAutoImportValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoResumeAutoImport(Async)");
        }

        return autoResumeAutoImportCall(storeId, _callback);

    }

    /**
     * Resume Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import resumed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void autoResumeAutoImport(String storeId) throws ApiException {
        autoResumeAutoImportWithHttpInfo(storeId);
    }

    /**
     * Resume Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import resumed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoResumeAutoImportWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = autoResumeAutoImportValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resume Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import resumed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoResumeAutoImportAsync(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoResumeAutoImportValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoScheduleAutoImport
     * @param storeId Your store identifier (required)
     * @param scheduleAutoImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the max catalog Auto Import count has been reached. When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoScheduleAutoImportCall(String storeId, ScheduleAutoImportRequest scheduleAutoImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleAutoImportRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoScheduleAutoImportValidateBeforeCall(String storeId, ScheduleAutoImportRequest scheduleAutoImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoScheduleAutoImport(Async)");
        }

        // verify the required parameter 'scheduleAutoImportRequest' is set
        if (scheduleAutoImportRequest == null) {
            throw new ApiException("Missing the required parameter 'scheduleAutoImportRequest' when calling autoScheduleAutoImport(Async)");
        }

        return autoScheduleAutoImportCall(storeId, scheduleAutoImportRequest, _callback);

    }

    /**
     * Configure Auto Import Schedules
     * 
     * @param storeId Your store identifier (required)
     * @param scheduleAutoImportRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the max catalog Auto Import count has been reached. When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void autoScheduleAutoImport(String storeId, ScheduleAutoImportRequest scheduleAutoImportRequest) throws ApiException {
        autoScheduleAutoImportWithHttpInfo(storeId, scheduleAutoImportRequest);
    }

    /**
     * Configure Auto Import Schedules
     * 
     * @param storeId Your store identifier (required)
     * @param scheduleAutoImportRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the max catalog Auto Import count has been reached. When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoScheduleAutoImportWithHttpInfo(String storeId, ScheduleAutoImportRequest scheduleAutoImportRequest) throws ApiException {
        okhttp3.Call localVarCall = autoScheduleAutoImportValidateBeforeCall(storeId, scheduleAutoImportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure Auto Import Schedules (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param scheduleAutoImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import scheduling saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the max catalog Auto Import count has been reached. When the min catalog Auto Import scheduling interval delay has been reached. When the max catalog Auto Import count has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoScheduleAutoImportAsync(String storeId, ScheduleAutoImportRequest scheduleAutoImportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoScheduleAutoImportValidateBeforeCall(storeId, scheduleAutoImportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoStartAutoImport
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. When the user tries to import to ofen the catalog file to download count max limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An importation is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoStartAutoImportCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/start"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoStartAutoImportValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoStartAutoImport(Async)");
        }

        return autoStartAutoImportCall(storeId, _callback);

    }

    /**
     * Start Auto Import Manually
     * 
     * @param storeId Your store identifier (required)
     * @return LinksImportationGetImportationMonitoringLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. When the user tries to import to ofen the catalog file to download count max limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An importation is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public LinksImportationGetImportationMonitoringLink autoStartAutoImport(String storeId) throws ApiException {
        ApiResponse<LinksImportationGetImportationMonitoringLink> localVarResp = autoStartAutoImportWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Start Auto Import Manually
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;LinksImportationGetImportationMonitoringLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. When the user tries to import to ofen the catalog file to download count max limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An importation is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinksImportationGetImportationMonitoringLink> autoStartAutoImportWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = autoStartAutoImportValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<LinksImportationGetImportationMonitoringLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Auto Import Manually (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Occurs when the catalog auto import is not configured. When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. When the user tries to import to ofen the catalog file to download count max limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> An importation is already in progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoStartAutoImportAsync(String storeId, final ApiCallback<LinksImportationGetImportationMonitoringLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoStartAutoImportValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<LinksImportationGetImportationMonitoringLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationActivateAutoImport
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import activated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the user tries to auto import a local file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationActivateAutoImportCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/activate"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationActivateAutoImportValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationActivateAutoImport(Async)");
        }

        return importationActivateAutoImportCall(storeId, _callback);

    }

    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import activated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the user tries to auto import a local file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationActivateAutoImport(String storeId) throws ApiException {
        importationActivateAutoImportWithHttpInfo(storeId);
    }

    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import activated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the user tries to auto import a local file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationActivateAutoImportWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = importationActivateAutoImportValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate the auto importation of the last successful manual catalog importation. (asynchronously)
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Auto import activated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the user tries to auto import a local file. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationActivateAutoImportAsync(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationActivateAutoImportValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
