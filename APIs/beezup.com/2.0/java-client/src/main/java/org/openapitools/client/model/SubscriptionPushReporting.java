/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ErrorResponseMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The subscription push reporting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPushReporting {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private ErrorResponseMessage errorMessage;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_HTTP_STATUS = "httpStatus";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS)
  private Integer httpStatus;

  public static final String SERIALIZED_NAME_LAST_ORDER_MODIFICATION_UTC_DATE = "lastOrderModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_ORDER_MODIFICATION_UTC_DATE)
  private OffsetDateTime lastOrderModificationUtcDate;

  public static final String SERIALIZED_NAME_MAX_RETRY_COUNT = "maxRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_RETRY_COUNT)
  private Integer maxRetryCount;

  public static final String SERIALIZED_NAME_NEXT_SCHEDULED_RETRY_UTC_DATE = "nextScheduledRetryUtcDate";
  @SerializedName(SERIALIZED_NAME_NEXT_SCHEDULED_RETRY_UTC_DATE)
  private OffsetDateTime nextScheduledRetryUtcDate;

  public static final String SERIALIZED_NAME_ORDER_COUNT = "orderCount";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
  private Integer orderCount;

  public static final String SERIALIZED_NAME_REQUEST_URI = "requestUri";
  @SerializedName(SERIALIZED_NAME_REQUEST_URI)
  private String requestUri;

  public static final String SERIALIZED_NAME_RESPONSE_URI = "responseUri";
  @SerializedName(SERIALIZED_NAME_RESPONSE_URI)
  private String responseUri;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUCCEED = "succeed";
  @SerializedName(SERIALIZED_NAME_SUCCEED)
  private Boolean succeed;

  public SubscriptionPushReporting() {
  }

  public SubscriptionPushReporting duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the push operation
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public SubscriptionPushReporting errorMessage(ErrorResponseMessage errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public ErrorResponseMessage getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(ErrorResponseMessage errorMessage) {
    this.errorMessage = errorMessage;
  }


  public SubscriptionPushReporting eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The message identifier. It&#39;s a guid.
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public SubscriptionPushReporting httpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
    return this;
  }

  /**
   * The HTTP status received from the consumer
   * @return httpStatus
   */
  @javax.annotation.Nullable
  public Integer getHttpStatus() {
    return httpStatus;
  }

  public void setHttpStatus(Integer httpStatus) {
    this.httpStatus = httpStatus;
  }


  public SubscriptionPushReporting lastOrderModificationUtcDate(OffsetDateTime lastOrderModificationUtcDate) {
    this.lastOrderModificationUtcDate = lastOrderModificationUtcDate;
    return this;
  }

  /**
   * This modification date correspond to the last order pushed by your subscription consumer
   * @return lastOrderModificationUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastOrderModificationUtcDate() {
    return lastOrderModificationUtcDate;
  }

  public void setLastOrderModificationUtcDate(OffsetDateTime lastOrderModificationUtcDate) {
    this.lastOrderModificationUtcDate = lastOrderModificationUtcDate;
  }


  public SubscriptionPushReporting maxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
    return this;
  }

  /**
   * The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
   * @return maxRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxRetryCount() {
    return maxRetryCount;
  }

  public void setMaxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
  }


  public SubscriptionPushReporting nextScheduledRetryUtcDate(OffsetDateTime nextScheduledRetryUtcDate) {
    this.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate;
    return this;
  }

  /**
   * The next scheduled  date we retry to send orders
   * @return nextScheduledRetryUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextScheduledRetryUtcDate() {
    return nextScheduledRetryUtcDate;
  }

  public void setNextScheduledRetryUtcDate(OffsetDateTime nextScheduledRetryUtcDate) {
    this.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate;
  }


  public SubscriptionPushReporting orderCount(Integer orderCount) {
    this.orderCount = orderCount;
    return this;
  }

  /**
   * The order count sent
   * @return orderCount
   */
  @javax.annotation.Nonnull
  public Integer getOrderCount() {
    return orderCount;
  }

  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }


  public SubscriptionPushReporting requestUri(String requestUri) {
    this.requestUri = requestUri;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return requestUri
   */
  @javax.annotation.Nullable
  public String getRequestUri() {
    return requestUri;
  }

  public void setRequestUri(String requestUri) {
    this.requestUri = requestUri;
  }


  public SubscriptionPushReporting responseUri(String responseUri) {
    this.responseUri = responseUri;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return responseUri
   */
  @javax.annotation.Nullable
  public String getResponseUri() {
    return responseUri;
  }

  public void setResponseUri(String responseUri) {
    this.responseUri = responseUri;
  }


  public SubscriptionPushReporting retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

  /**
   * The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
   * @return retryCount
   */
  @javax.annotation.Nullable
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public SubscriptionPushReporting subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The identifier of the subscription to the orders for a merchant
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public SubscriptionPushReporting succeed(Boolean succeed) {
    this.succeed = succeed;
    return this;
  }

  /**
   * Indicates if the push operation has succeed
   * @return succeed
   */
  @javax.annotation.Nonnull
  public Boolean getSucceed() {
    return succeed;
  }

  public void setSucceed(Boolean succeed) {
    this.succeed = succeed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPushReporting subscriptionPushReporting = (SubscriptionPushReporting) o;
    return Objects.equals(this.duration, subscriptionPushReporting.duration) &&
        Objects.equals(this.errorMessage, subscriptionPushReporting.errorMessage) &&
        Objects.equals(this.eventId, subscriptionPushReporting.eventId) &&
        Objects.equals(this.httpStatus, subscriptionPushReporting.httpStatus) &&
        Objects.equals(this.lastOrderModificationUtcDate, subscriptionPushReporting.lastOrderModificationUtcDate) &&
        Objects.equals(this.maxRetryCount, subscriptionPushReporting.maxRetryCount) &&
        Objects.equals(this.nextScheduledRetryUtcDate, subscriptionPushReporting.nextScheduledRetryUtcDate) &&
        Objects.equals(this.orderCount, subscriptionPushReporting.orderCount) &&
        Objects.equals(this.requestUri, subscriptionPushReporting.requestUri) &&
        Objects.equals(this.responseUri, subscriptionPushReporting.responseUri) &&
        Objects.equals(this.retryCount, subscriptionPushReporting.retryCount) &&
        Objects.equals(this.subscriptionId, subscriptionPushReporting.subscriptionId) &&
        Objects.equals(this.succeed, subscriptionPushReporting.succeed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, errorMessage, eventId, httpStatus, lastOrderModificationUtcDate, maxRetryCount, nextScheduledRetryUtcDate, orderCount, requestUri, responseUri, retryCount, subscriptionId, succeed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPushReporting {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    httpStatus: ").append(toIndentedString(httpStatus)).append("\n");
    sb.append("    lastOrderModificationUtcDate: ").append(toIndentedString(lastOrderModificationUtcDate)).append("\n");
    sb.append("    maxRetryCount: ").append(toIndentedString(maxRetryCount)).append("\n");
    sb.append("    nextScheduledRetryUtcDate: ").append(toIndentedString(nextScheduledRetryUtcDate)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("    responseUri: ").append(toIndentedString(responseUri)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    succeed: ").append(toIndentedString(succeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("errorMessage");
    openapiFields.add("eventId");
    openapiFields.add("httpStatus");
    openapiFields.add("lastOrderModificationUtcDate");
    openapiFields.add("maxRetryCount");
    openapiFields.add("nextScheduledRetryUtcDate");
    openapiFields.add("orderCount");
    openapiFields.add("requestUri");
    openapiFields.add("responseUri");
    openapiFields.add("retryCount");
    openapiFields.add("subscriptionId");
    openapiFields.add("succeed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("eventId");
    openapiRequiredFields.add("lastOrderModificationUtcDate");
    openapiRequiredFields.add("orderCount");
    openapiRequiredFields.add("subscriptionId");
    openapiRequiredFields.add("succeed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPushReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPushReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPushReporting is not found in the empty JSON string", SubscriptionPushReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPushReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPushReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionPushReporting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `errorMessage`
      if (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) {
        ErrorResponseMessage.validateJsonElement(jsonObj.get("errorMessage"));
      }
      if (!jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("requestUri") != null && !jsonObj.get("requestUri").isJsonNull()) && !jsonObj.get("requestUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestUri").toString()));
      }
      if ((jsonObj.get("responseUri") != null && !jsonObj.get("responseUri").isJsonNull()) && !jsonObj.get("responseUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseUri").toString()));
      }
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPushReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPushReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPushReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPushReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPushReporting>() {
           @Override
           public void write(JsonWriter out, SubscriptionPushReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPushReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPushReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPushReporting
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPushReporting
   */
  public static SubscriptionPushReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPushReporting.class);
  }

  /**
   * Convert an instance of SubscriptionPushReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

