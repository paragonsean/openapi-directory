/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChannelCatalogProductInfoLinks;
import org.openapitools.client.model.ProductOverrideWithCatalogValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelCatalogProductInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelCatalogProductInfo {
  public static final String SERIALIZED_NAME_PRODUCT_EXISTS = "productExists";
  @SerializedName(SERIALIZED_NAME_PRODUCT_EXISTS)
  private Boolean productExists;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_IMAGE_URL = "productImageUrl";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGE_URL)
  private URI productImageUrl;

  public static final String SERIALIZED_NAME_PRODUCT_SKU = "productSku";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SKU)
  private String productSku;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "productTitle";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled = false;

  public static final String SERIALIZED_NAME_EXCLUDED = "excluded";
  @SerializedName(SERIALIZED_NAME_EXCLUDED)
  private Boolean excluded = false;

  public static final String SERIALIZED_NAME_EXCLUDED_BY = "excludedBy";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_BY)
  private List<String> excludedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ChannelCatalogProductInfoLinks links;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private Map<String, ProductOverrideWithCatalogValue> overrides = new HashMap<>();

  public static final String SERIALIZED_NAME_UNCATEGORIZED = "uncategorized";
  @SerializedName(SERIALIZED_NAME_UNCATEGORIZED)
  private Boolean uncategorized;

  public ChannelCatalogProductInfo() {
  }

  public ChannelCatalogProductInfo productExists(Boolean productExists) {
    this.productExists = productExists;
    return this;
  }

  /**
   * Indicates if the product still exists in your catalog
   * @return productExists
   */
  @javax.annotation.Nonnull
  public Boolean getProductExists() {
    return productExists;
  }

  public void setProductExists(Boolean productExists) {
    this.productExists = productExists;
  }


  public ChannelCatalogProductInfo productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The product identifier
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ChannelCatalogProductInfo productImageUrl(URI productImageUrl) {
    this.productImageUrl = productImageUrl;
    return this;
  }

  /**
   * The product image Url
   * @return productImageUrl
   */
  @javax.annotation.Nullable
  public URI getProductImageUrl() {
    return productImageUrl;
  }

  public void setProductImageUrl(URI productImageUrl) {
    this.productImageUrl = productImageUrl;
  }


  public ChannelCatalogProductInfo productSku(String productSku) {
    this.productSku = productSku;
    return this;
  }

  /**
   * The product SKU
   * @return productSku
   */
  @javax.annotation.Nonnull
  public String getProductSku() {
    return productSku;
  }

  public void setProductSku(String productSku) {
    this.productSku = productSku;
  }


  public ChannelCatalogProductInfo productTitle(String productTitle) {
    this.productTitle = productTitle;
    return this;
  }

  /**
   * The product tile
   * @return productTitle
   */
  @javax.annotation.Nonnull
  public String getProductTitle() {
    return productTitle;
  }

  public void setProductTitle(String productTitle) {
    this.productTitle = productTitle;
  }


  public ChannelCatalogProductInfo disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates if the product has been disabled or not
   * @return disabled
   */
  @javax.annotation.Nonnull
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public ChannelCatalogProductInfo excluded(Boolean excluded) {
    this.excluded = excluded;
    return this;
  }

  /**
   * Indicates if the product has been excluded by a exclusion filter
   * @return excluded
   */
  @javax.annotation.Nonnull
  public Boolean getExcluded() {
    return excluded;
  }

  public void setExcluded(Boolean excluded) {
    this.excluded = excluded;
  }


  public ChannelCatalogProductInfo excludedBy(List<String> excludedBy) {
    this.excludedBy = excludedBy;
    return this;
  }

  public ChannelCatalogProductInfo addExcludedByItem(String excludedByItem) {
    if (this.excludedBy == null) {
      this.excludedBy = new ArrayList<>();
    }
    this.excludedBy.add(excludedByItem);
    return this;
  }

  /**
   * Get excludedBy
   * @return excludedBy
   */
  @javax.annotation.Nullable
  public List<String> getExcludedBy() {
    return excludedBy;
  }

  public void setExcludedBy(List<String> excludedBy) {
    this.excludedBy = excludedBy;
  }


  public ChannelCatalogProductInfo links(ChannelCatalogProductInfoLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public ChannelCatalogProductInfoLinks getLinks() {
    return links;
  }

  public void setLinks(ChannelCatalogProductInfoLinks links) {
    this.links = links;
  }


  public ChannelCatalogProductInfo overrides(Map<String, ProductOverrideWithCatalogValue> overrides) {
    this.overrides = overrides;
    return this;
  }

  public ChannelCatalogProductInfo putOverridesItem(String key, ProductOverrideWithCatalogValue overridesItem) {
    if (this.overrides == null) {
      this.overrides = new HashMap<>();
    }
    this.overrides.put(key, overridesItem);
    return this;
  }

  /**
   * The key is the channel column identifier
   * @return overrides
   */
  @javax.annotation.Nonnull
  public Map<String, ProductOverrideWithCatalogValue> getOverrides() {
    return overrides;
  }

  public void setOverrides(Map<String, ProductOverrideWithCatalogValue> overrides) {
    this.overrides = overrides;
  }


  public ChannelCatalogProductInfo uncategorized(Boolean uncategorized) {
    this.uncategorized = uncategorized;
    return this;
  }

  /**
   * Indicates if the product&#39;s category has been NOT mapped to a channel category
   * @return uncategorized
   */
  @javax.annotation.Nonnull
  public Boolean getUncategorized() {
    return uncategorized;
  }

  public void setUncategorized(Boolean uncategorized) {
    this.uncategorized = uncategorized;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelCatalogProductInfo channelCatalogProductInfo = (ChannelCatalogProductInfo) o;
    return Objects.equals(this.productExists, channelCatalogProductInfo.productExists) &&
        Objects.equals(this.productId, channelCatalogProductInfo.productId) &&
        Objects.equals(this.productImageUrl, channelCatalogProductInfo.productImageUrl) &&
        Objects.equals(this.productSku, channelCatalogProductInfo.productSku) &&
        Objects.equals(this.productTitle, channelCatalogProductInfo.productTitle) &&
        Objects.equals(this.disabled, channelCatalogProductInfo.disabled) &&
        Objects.equals(this.excluded, channelCatalogProductInfo.excluded) &&
        Objects.equals(this.excludedBy, channelCatalogProductInfo.excludedBy) &&
        Objects.equals(this.links, channelCatalogProductInfo.links) &&
        Objects.equals(this.overrides, channelCatalogProductInfo.overrides) &&
        Objects.equals(this.uncategorized, channelCatalogProductInfo.uncategorized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productExists, productId, productImageUrl, productSku, productTitle, disabled, excluded, excludedBy, links, overrides, uncategorized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelCatalogProductInfo {\n");
    sb.append("    productExists: ").append(toIndentedString(productExists)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productImageUrl: ").append(toIndentedString(productImageUrl)).append("\n");
    sb.append("    productSku: ").append(toIndentedString(productSku)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    excluded: ").append(toIndentedString(excluded)).append("\n");
    sb.append("    excludedBy: ").append(toIndentedString(excludedBy)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    uncategorized: ").append(toIndentedString(uncategorized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productExists");
    openapiFields.add("productId");
    openapiFields.add("productImageUrl");
    openapiFields.add("productSku");
    openapiFields.add("productTitle");
    openapiFields.add("disabled");
    openapiFields.add("excluded");
    openapiFields.add("excludedBy");
    openapiFields.add("links");
    openapiFields.add("overrides");
    openapiFields.add("uncategorized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("productExists");
    openapiRequiredFields.add("productId");
    openapiRequiredFields.add("productSku");
    openapiRequiredFields.add("productTitle");
    openapiRequiredFields.add("disabled");
    openapiRequiredFields.add("excluded");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("overrides");
    openapiRequiredFields.add("uncategorized");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelCatalogProductInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelCatalogProductInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelCatalogProductInfo is not found in the empty JSON string", ChannelCatalogProductInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelCatalogProductInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelCatalogProductInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelCatalogProductInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productImageUrl") != null && !jsonObj.get("productImageUrl").isJsonNull()) && !jsonObj.get("productImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productImageUrl").toString()));
      }
      if (!jsonObj.get("productSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productSku").toString()));
      }
      if (!jsonObj.get("productTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedBy") != null && !jsonObj.get("excludedBy").isJsonNull() && !jsonObj.get("excludedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedBy` to be an array in the JSON string but got `%s`", jsonObj.get("excludedBy").toString()));
      }
      // validate the required field `links`
      ChannelCatalogProductInfoLinks.validateJsonElement(jsonObj.get("links"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelCatalogProductInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelCatalogProductInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelCatalogProductInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelCatalogProductInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelCatalogProductInfo>() {
           @Override
           public void write(JsonWriter out, ChannelCatalogProductInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelCatalogProductInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelCatalogProductInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelCatalogProductInfo
   * @throws IOException if the JSON string is invalid with respect to ChannelCatalogProductInfo
   */
  public static ChannelCatalogProductInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelCatalogProductInfo.class);
  }

  /**
   * Convert an instance of ChannelCatalogProductInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

