/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderHistory;
import org.openapitools.client.model.SetMerchantOrderInfoRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketplacesOrdersOrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketplacesOrdersOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketplacesOrdersOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeOrder
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param ifMatch ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call changeOrderCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, String ifMatch, Boolean testMode, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()))
            .replace("{" + "changeOrderType" + "}", localVarApiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, String ifMatch, Boolean testMode, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrder(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeOrder(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling changeOrder(Async)");
        }

        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrder(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrder(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling changeOrder(Async)");
        }

        return changeOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, ifMatch, testMode, requestBody, _callback);

    }

    /**
     * [DEPRECATED] Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param ifMatch ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void changeOrder(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, String ifMatch, Boolean testMode, Map<String, String> requestBody) throws ApiException {
        changeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, ifMatch, testMode, requestBody);
    }

    /**
     * [DEPRECATED] Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param ifMatch ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> changeOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, String ifMatch, Boolean testMode, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, ifMatch, testMode, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [DEPRECATED] Change your marketplace Order Information (accept, ship, etc.) (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param ifMatch ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call changeOrderAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, String ifMatch, Boolean testMode, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, ifMatch, testMode, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearMerchantOrderInfo
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clearMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfo(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling clearMerchantOrderInfo(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfo(Async)");
        }

        return clearMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);

    }

    /**
     * [DEPRECATED] Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void clearMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        clearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * [DEPRECATED] Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> clearMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        okhttp3.Call localVarCall = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [DEPRECATED] Clear an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clearMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrderCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrder(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrder(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrder(Async)");
        }

        return getOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);

    }

    /**
     * [DEPRECATED] DEPRECATED - Get full Order and Order Item(s) properties
     * DEPRECATED - Use /orders/v3 instead
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Order getOrder(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        ApiResponse<Order> localVarResp = getOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * [DEPRECATED] DEPRECATED - Get full Order and Order Item(s) properties
     * DEPRECATED - Use /orders/v3 instead
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Order> getOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [DEPRECATED] DEPRECATED - Get full Order and Order Item(s) properties (asynchronously)
     * DEPRECATED - Use /orders/v3 instead
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrderAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderHistory
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrderHistoryCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderHistoryValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistory(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderHistory(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderHistory(Async)");
        }

        return getOrderHistoryCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);

    }

    /**
     * [DEPRECATED] Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return OrderHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public OrderHistory getOrderHistory(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        ApiResponse<OrderHistory> localVarResp = getOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * [DEPRECATED] Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;OrderHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<OrderHistory> getOrderHistoryWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [DEPRECATED] Get an Order&#39;s harvest and change history (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrderHistoryAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback<OrderHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for harvestOrder
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call harvestOrderCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call harvestOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrder(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestOrder(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling harvestOrder(Async)");
        }

        return harvestOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);

    }

    /**
     * [DEPRECATED] Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void harvestOrder(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        harvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * [DEPRECATED] Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> harvestOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        okhttp3.Call localVarCall = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [DEPRECATED] Send harvest request for a single Order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call harvestOrderAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for headOrder
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call headOrderCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call headOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling headOrder(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling headOrder(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling headOrder(Async)");
        }

        return headOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);

    }

    /**
     * [DEPRECATED] DEPRECATED - Get the meta information about the order (ETag, Last-Modified)
     * DEPRECATED - Use /orders/v3 instead The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void headOrder(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        headOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
    }

    /**
     * [DEPRECATED] DEPRECATED - Get the meta information about the order (ETag, Last-Modified)
     * DEPRECATED - Use /orders/v3 instead The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> headOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = headOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [DEPRECATED] DEPRECATED - Get the meta information about the order (ETag, Last-Modified) (asynchronously)
     * DEPRECATED - Use /orders/v3 instead The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call headOrderAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = headOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMerchantOrderInfo
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setMerchantOrderInfoRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfo(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setMerchantOrderInfo(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfo(Async)");
        }

        // verify the required parameter 'setMerchantOrderInfoRequest' is set
        if (setMerchantOrderInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'setMerchantOrderInfoRequest' when calling setMerchantOrderInfo(Async)");
        }

        return setMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, _callback);

    }

    /**
     * [DEPRECATED] Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void setMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest) throws ApiException {
        setMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest);
    }

    /**
     * [DEPRECATED] Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> setMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [DEPRECATED] Set an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set Order merchant order info set </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
