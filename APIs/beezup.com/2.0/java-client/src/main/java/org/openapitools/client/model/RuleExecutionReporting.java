/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.OptimisationActionName;
import org.openapitools.client.model.RuleExecutionReportingErrorType;
import org.openapitools.client.model.RuleExecutionReportingExecutionSource;
import org.openapitools.client.model.RuleExecutionReportingLinks;
import org.openapitools.client.model.RuleExecutionReportingStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuleExecutionReporting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleExecutionReporting {
  public static final String SERIALIZED_NAME_ACTIVE_AFFECTED_PRODUCT_COUNT = "activeAffectedProductCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_AFFECTED_PRODUCT_COUNT)
  private Integer activeAffectedProductCount;

  public static final String SERIALIZED_NAME_AFFECTED_CHANNEL_COUNT = "affectedChannelCount";
  @SerializedName(SERIALIZED_NAME_AFFECTED_CHANNEL_COUNT)
  private Integer affectedChannelCount;

  public static final String SERIALIZED_NAME_AFFECTED_PRODUCT_COUNT = "affectedProductCount";
  @SerializedName(SERIALIZED_NAME_AFFECTED_PRODUCT_COUNT)
  private Integer affectedProductCount;

  public static final String SERIALIZED_NAME_COMPLETED_UTC_DATE = "completedUtcDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_UTC_DATE)
  private OffsetDateTime completedUtcDate;

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private RuleExecutionReportingErrorType errorType;

  public static final String SERIALIZED_NAME_EXECUTION_SOURCE = "executionSource";
  @SerializedName(SERIALIZED_NAME_EXECUTION_SOURCE)
  private RuleExecutionReportingExecutionSource executionSource;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private RuleExecutionReportingLinks links;

  public static final String SERIALIZED_NAME_OPTIMISATION_ACTION_NAME = "optimisationActionName";
  @SerializedName(SERIALIZED_NAME_OPTIMISATION_ACTION_NAME)
  private OptimisationActionName optimisationActionName;

  public static final String SERIALIZED_NAME_REPORT_URL = "reportUrl";
  @SerializedName(SERIALIZED_NAME_REPORT_URL)
  private String reportUrl;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_STARTED_UTC_DATE = "startedUtcDate";
  @SerializedName(SERIALIZED_NAME_STARTED_UTC_DATE)
  private OffsetDateTime startedUtcDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RuleExecutionReportingStatus status;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public RuleExecutionReporting() {
  }

  public RuleExecutionReporting activeAffectedProductCount(Integer activeAffectedProductCount) {
    this.activeAffectedProductCount = activeAffectedProductCount;
    return this;
  }

  /**
   * The count of affected active products
   * @return activeAffectedProductCount
   */
  @javax.annotation.Nullable
  public Integer getActiveAffectedProductCount() {
    return activeAffectedProductCount;
  }

  public void setActiveAffectedProductCount(Integer activeAffectedProductCount) {
    this.activeAffectedProductCount = activeAffectedProductCount;
  }


  public RuleExecutionReporting affectedChannelCount(Integer affectedChannelCount) {
    this.affectedChannelCount = affectedChannelCount;
    return this;
  }

  /**
   * The count of affected Channels across all products
   * @return affectedChannelCount
   */
  @javax.annotation.Nullable
  public Integer getAffectedChannelCount() {
    return affectedChannelCount;
  }

  public void setAffectedChannelCount(Integer affectedChannelCount) {
    this.affectedChannelCount = affectedChannelCount;
  }


  public RuleExecutionReporting affectedProductCount(Integer affectedProductCount) {
    this.affectedProductCount = affectedProductCount;
    return this;
  }

  /**
   * The count of affected products, active or not
   * @return affectedProductCount
   */
  @javax.annotation.Nullable
  public Integer getAffectedProductCount() {
    return affectedProductCount;
  }

  public void setAffectedProductCount(Integer affectedProductCount) {
    this.affectedProductCount = affectedProductCount;
  }


  public RuleExecutionReporting completedUtcDate(OffsetDateTime completedUtcDate) {
    this.completedUtcDate = completedUtcDate;
    return this;
  }

  /**
   * The completed utc date of the execution of the rule
   * @return completedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedUtcDate() {
    return completedUtcDate;
  }

  public void setCompletedUtcDate(OffsetDateTime completedUtcDate) {
    this.completedUtcDate = completedUtcDate;
  }


  public RuleExecutionReporting errorType(RuleExecutionReportingErrorType errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * Get errorType
   * @return errorType
   */
  @javax.annotation.Nullable
  public RuleExecutionReportingErrorType getErrorType() {
    return errorType;
  }

  public void setErrorType(RuleExecutionReportingErrorType errorType) {
    this.errorType = errorType;
  }


  public RuleExecutionReporting executionSource(RuleExecutionReportingExecutionSource executionSource) {
    this.executionSource = executionSource;
    return this;
  }

  /**
   * Get executionSource
   * @return executionSource
   */
  @javax.annotation.Nonnull
  public RuleExecutionReportingExecutionSource getExecutionSource() {
    return executionSource;
  }

  public void setExecutionSource(RuleExecutionReportingExecutionSource executionSource) {
    this.executionSource = executionSource;
  }


  public RuleExecutionReporting links(RuleExecutionReportingLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public RuleExecutionReportingLinks getLinks() {
    return links;
  }

  public void setLinks(RuleExecutionReportingLinks links) {
    this.links = links;
  }


  public RuleExecutionReporting optimisationActionName(OptimisationActionName optimisationActionName) {
    this.optimisationActionName = optimisationActionName;
    return this;
  }

  /**
   * Get optimisationActionName
   * @return optimisationActionName
   */
  @javax.annotation.Nullable
  public OptimisationActionName getOptimisationActionName() {
    return optimisationActionName;
  }

  public void setOptimisationActionName(OptimisationActionName optimisationActionName) {
    this.optimisationActionName = optimisationActionName;
  }


  public RuleExecutionReporting reportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
    return this;
  }

  /**
   * The url for the excel report for this execution
   * @return reportUrl
   */
  @javax.annotation.Nullable
  public String getReportUrl() {
    return reportUrl;
  }

  public void setReportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
  }


  public RuleExecutionReporting ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * The rule identifier
   * @return ruleId
   */
  @javax.annotation.Nonnull
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public RuleExecutionReporting ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * The name of the rule
   * @return ruleName
   */
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public RuleExecutionReporting startedUtcDate(OffsetDateTime startedUtcDate) {
    this.startedUtcDate = startedUtcDate;
    return this;
  }

  /**
   * The start utc date of the execution of the rule
   * @return startedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedUtcDate() {
    return startedUtcDate;
  }

  public void setStartedUtcDate(OffsetDateTime startedUtcDate) {
    this.startedUtcDate = startedUtcDate;
  }


  public RuleExecutionReporting status(RuleExecutionReportingStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RuleExecutionReportingStatus getStatus() {
    return status;
  }

  public void setStatus(RuleExecutionReportingStatus status) {
    this.status = status;
  }


  public RuleExecutionReporting userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The userId that executed the rule if any
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleExecutionReporting ruleExecutionReporting = (RuleExecutionReporting) o;
    return Objects.equals(this.activeAffectedProductCount, ruleExecutionReporting.activeAffectedProductCount) &&
        Objects.equals(this.affectedChannelCount, ruleExecutionReporting.affectedChannelCount) &&
        Objects.equals(this.affectedProductCount, ruleExecutionReporting.affectedProductCount) &&
        Objects.equals(this.completedUtcDate, ruleExecutionReporting.completedUtcDate) &&
        Objects.equals(this.errorType, ruleExecutionReporting.errorType) &&
        Objects.equals(this.executionSource, ruleExecutionReporting.executionSource) &&
        Objects.equals(this.links, ruleExecutionReporting.links) &&
        Objects.equals(this.optimisationActionName, ruleExecutionReporting.optimisationActionName) &&
        Objects.equals(this.reportUrl, ruleExecutionReporting.reportUrl) &&
        Objects.equals(this.ruleId, ruleExecutionReporting.ruleId) &&
        Objects.equals(this.ruleName, ruleExecutionReporting.ruleName) &&
        Objects.equals(this.startedUtcDate, ruleExecutionReporting.startedUtcDate) &&
        Objects.equals(this.status, ruleExecutionReporting.status) &&
        Objects.equals(this.userId, ruleExecutionReporting.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAffectedProductCount, affectedChannelCount, affectedProductCount, completedUtcDate, errorType, executionSource, links, optimisationActionName, reportUrl, ruleId, ruleName, startedUtcDate, status, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleExecutionReporting {\n");
    sb.append("    activeAffectedProductCount: ").append(toIndentedString(activeAffectedProductCount)).append("\n");
    sb.append("    affectedChannelCount: ").append(toIndentedString(affectedChannelCount)).append("\n");
    sb.append("    affectedProductCount: ").append(toIndentedString(affectedProductCount)).append("\n");
    sb.append("    completedUtcDate: ").append(toIndentedString(completedUtcDate)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    executionSource: ").append(toIndentedString(executionSource)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    optimisationActionName: ").append(toIndentedString(optimisationActionName)).append("\n");
    sb.append("    reportUrl: ").append(toIndentedString(reportUrl)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    startedUtcDate: ").append(toIndentedString(startedUtcDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAffectedProductCount");
    openapiFields.add("affectedChannelCount");
    openapiFields.add("affectedProductCount");
    openapiFields.add("completedUtcDate");
    openapiFields.add("errorType");
    openapiFields.add("executionSource");
    openapiFields.add("links");
    openapiFields.add("optimisationActionName");
    openapiFields.add("reportUrl");
    openapiFields.add("ruleId");
    openapiFields.add("ruleName");
    openapiFields.add("startedUtcDate");
    openapiFields.add("status");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("executionSource");
    openapiRequiredFields.add("ruleId");
    openapiRequiredFields.add("ruleName");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleExecutionReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleExecutionReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleExecutionReporting is not found in the empty JSON string", RuleExecutionReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleExecutionReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleExecutionReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleExecutionReporting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `errorType`
      if (jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) {
        RuleExecutionReportingErrorType.validateJsonElement(jsonObj.get("errorType"));
      }
      // validate the required field `executionSource`
      RuleExecutionReportingExecutionSource.validateJsonElement(jsonObj.get("executionSource"));
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        RuleExecutionReportingLinks.validateJsonElement(jsonObj.get("links"));
      }
      // validate the optional field `optimisationActionName`
      if (jsonObj.get("optimisationActionName") != null && !jsonObj.get("optimisationActionName").isJsonNull()) {
        OptimisationActionName.validateJsonElement(jsonObj.get("optimisationActionName"));
      }
      if ((jsonObj.get("reportUrl") != null && !jsonObj.get("reportUrl").isJsonNull()) && !jsonObj.get("reportUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportUrl").toString()));
      }
      if (!jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if (!jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      // validate the required field `status`
      RuleExecutionReportingStatus.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleExecutionReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleExecutionReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleExecutionReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleExecutionReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleExecutionReporting>() {
           @Override
           public void write(JsonWriter out, RuleExecutionReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleExecutionReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleExecutionReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleExecutionReporting
   * @throws IOException if the JSON string is invalid with respect to RuleExecutionReporting
   */
  public static RuleExecutionReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleExecutionReporting.class);
  }

  /**
   * Convert an instance of RuleExecutionReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

