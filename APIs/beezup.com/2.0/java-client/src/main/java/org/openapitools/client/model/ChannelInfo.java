/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelInfoDetails;
import org.openapitools.client.model.ChannelInfoKeyNumbers;
import org.openapitools.client.model.ChannelInfoSalesContact;
import org.openapitools.client.model.ChannelInfoTechnicalContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelInfo {
  public static final String SERIALIZED_NAME_BEEZ_U_P_OFFER = "beezUPOffer";
  @SerializedName(SERIALIZED_NAME_BEEZ_U_P_OFFER)
  private String beezUPOffer;

  public static final String SERIALIZED_NAME_CHANNEL_DESCRIPTION = "channelDescription";
  @SerializedName(SERIALIZED_NAME_CHANNEL_DESCRIPTION)
  private String channelDescription;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_LOGO_URL = "channelLogoUrl";
  @SerializedName(SERIALIZED_NAME_CHANNEL_LOGO_URL)
  private String channelLogoUrl;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private ChannelInfoDetails details;

  public static final String SERIALIZED_NAME_KEY_NUMBERS = "keyNumbers";
  @SerializedName(SERIALIZED_NAME_KEY_NUMBERS)
  private ChannelInfoKeyNumbers keyNumbers;

  public static final String SERIALIZED_NAME_SALES_CONTACT = "salesContact";
  @SerializedName(SERIALIZED_NAME_SALES_CONTACT)
  private ChannelInfoSalesContact salesContact;

  public static final String SERIALIZED_NAME_TECHNICAL_CONTACT = "technicalContact";
  @SerializedName(SERIALIZED_NAME_TECHNICAL_CONTACT)
  private ChannelInfoTechnicalContact technicalContact;

  public ChannelInfo() {
  }

  public ChannelInfo beezUPOffer(String beezUPOffer) {
    this.beezUPOffer = beezUPOffer;
    return this;
  }

  /**
   * Indicate the BeezUP offer
   * @return beezUPOffer
   */
  @javax.annotation.Nullable
  public String getBeezUPOffer() {
    return beezUPOffer;
  }

  public void setBeezUPOffer(String beezUPOffer) {
    this.beezUPOffer = beezUPOffer;
  }


  public ChannelInfo channelDescription(String channelDescription) {
    this.channelDescription = channelDescription;
    return this;
  }

  /**
   * Indicae a description to the channel
   * @return channelDescription
   */
  @javax.annotation.Nullable
  public String getChannelDescription() {
    return channelDescription;
  }

  public void setChannelDescription(String channelDescription) {
    this.channelDescription = channelDescription;
  }


  public ChannelInfo channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The channel identifier
   * @return channelId
   */
  @javax.annotation.Nonnull
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public ChannelInfo channelLogoUrl(String channelLogoUrl) {
    this.channelLogoUrl = channelLogoUrl;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return channelLogoUrl
   */
  @javax.annotation.Nullable
  public String getChannelLogoUrl() {
    return channelLogoUrl;
  }

  public void setChannelLogoUrl(String channelLogoUrl) {
    this.channelLogoUrl = channelLogoUrl;
  }


  public ChannelInfo channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * The channel name
   * @return channelName
   */
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public ChannelInfo details(ChannelInfoDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public ChannelInfoDetails getDetails() {
    return details;
  }

  public void setDetails(ChannelInfoDetails details) {
    this.details = details;
  }


  public ChannelInfo keyNumbers(ChannelInfoKeyNumbers keyNumbers) {
    this.keyNumbers = keyNumbers;
    return this;
  }

  /**
   * Get keyNumbers
   * @return keyNumbers
   */
  @javax.annotation.Nullable
  public ChannelInfoKeyNumbers getKeyNumbers() {
    return keyNumbers;
  }

  public void setKeyNumbers(ChannelInfoKeyNumbers keyNumbers) {
    this.keyNumbers = keyNumbers;
  }


  public ChannelInfo salesContact(ChannelInfoSalesContact salesContact) {
    this.salesContact = salesContact;
    return this;
  }

  /**
   * Get salesContact
   * @return salesContact
   */
  @javax.annotation.Nullable
  public ChannelInfoSalesContact getSalesContact() {
    return salesContact;
  }

  public void setSalesContact(ChannelInfoSalesContact salesContact) {
    this.salesContact = salesContact;
  }


  public ChannelInfo technicalContact(ChannelInfoTechnicalContact technicalContact) {
    this.technicalContact = technicalContact;
    return this;
  }

  /**
   * Get technicalContact
   * @return technicalContact
   */
  @javax.annotation.Nullable
  public ChannelInfoTechnicalContact getTechnicalContact() {
    return technicalContact;
  }

  public void setTechnicalContact(ChannelInfoTechnicalContact technicalContact) {
    this.technicalContact = technicalContact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelInfo channelInfo = (ChannelInfo) o;
    return Objects.equals(this.beezUPOffer, channelInfo.beezUPOffer) &&
        Objects.equals(this.channelDescription, channelInfo.channelDescription) &&
        Objects.equals(this.channelId, channelInfo.channelId) &&
        Objects.equals(this.channelLogoUrl, channelInfo.channelLogoUrl) &&
        Objects.equals(this.channelName, channelInfo.channelName) &&
        Objects.equals(this.details, channelInfo.details) &&
        Objects.equals(this.keyNumbers, channelInfo.keyNumbers) &&
        Objects.equals(this.salesContact, channelInfo.salesContact) &&
        Objects.equals(this.technicalContact, channelInfo.technicalContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beezUPOffer, channelDescription, channelId, channelLogoUrl, channelName, details, keyNumbers, salesContact, technicalContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelInfo {\n");
    sb.append("    beezUPOffer: ").append(toIndentedString(beezUPOffer)).append("\n");
    sb.append("    channelDescription: ").append(toIndentedString(channelDescription)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelLogoUrl: ").append(toIndentedString(channelLogoUrl)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    keyNumbers: ").append(toIndentedString(keyNumbers)).append("\n");
    sb.append("    salesContact: ").append(toIndentedString(salesContact)).append("\n");
    sb.append("    technicalContact: ").append(toIndentedString(technicalContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beezUPOffer");
    openapiFields.add("channelDescription");
    openapiFields.add("channelId");
    openapiFields.add("channelLogoUrl");
    openapiFields.add("channelName");
    openapiFields.add("details");
    openapiFields.add("keyNumbers");
    openapiFields.add("salesContact");
    openapiFields.add("technicalContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("channelName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelInfo is not found in the empty JSON string", ChannelInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beezUPOffer") != null && !jsonObj.get("beezUPOffer").isJsonNull()) && !jsonObj.get("beezUPOffer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beezUPOffer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beezUPOffer").toString()));
      }
      if ((jsonObj.get("channelDescription") != null && !jsonObj.get("channelDescription").isJsonNull()) && !jsonObj.get("channelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelDescription").toString()));
      }
      if (!jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("channelLogoUrl") != null && !jsonObj.get("channelLogoUrl").isJsonNull()) && !jsonObj.get("channelLogoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelLogoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelLogoUrl").toString()));
      }
      if (!jsonObj.get("channelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelName").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        ChannelInfoDetails.validateJsonElement(jsonObj.get("details"));
      }
      // validate the optional field `keyNumbers`
      if (jsonObj.get("keyNumbers") != null && !jsonObj.get("keyNumbers").isJsonNull()) {
        ChannelInfoKeyNumbers.validateJsonElement(jsonObj.get("keyNumbers"));
      }
      // validate the optional field `salesContact`
      if (jsonObj.get("salesContact") != null && !jsonObj.get("salesContact").isJsonNull()) {
        ChannelInfoSalesContact.validateJsonElement(jsonObj.get("salesContact"));
      }
      // validate the optional field `technicalContact`
      if (jsonObj.get("technicalContact") != null && !jsonObj.get("technicalContact").isJsonNull()) {
        ChannelInfoTechnicalContact.validateJsonElement(jsonObj.get("technicalContact"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelInfo>() {
           @Override
           public void write(JsonWriter out, ChannelInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelInfo
   * @throws IOException if the JSON string is invalid with respect to ChannelInfo
   */
  public static ChannelInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelInfo.class);
  }

  /**
   * Convert an instance of ChannelInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

