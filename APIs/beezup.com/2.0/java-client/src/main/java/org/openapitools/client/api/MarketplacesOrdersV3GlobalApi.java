/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountSynchronizationList;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ErrorResponseMessage;
import org.openapitools.client.model.ListOfValueItem;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketplacesOrdersV3GlobalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketplacesOrdersV3GlobalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketplacesOrdersV3GlobalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMarketplaceAccountsSynchronizationV3
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param storeIds StoredIds to filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched the list of MarketplaceBusinessCode ready for Order Management </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid store id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAccountsSynchronizationV3Call(String ifNoneMatch, List<String> storeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "storeIds", storeIds));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceAccountsSynchronizationV3ValidateBeforeCall(String ifNoneMatch, List<String> storeIds, final ApiCallback _callback) throws ApiException {
        return getMarketplaceAccountsSynchronizationV3Call(ifNoneMatch, storeIds, _callback);

    }

    /**
     * 
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param storeIds StoredIds to filter (optional)
     * @return AccountSynchronizationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched the list of MarketplaceBusinessCode ready for Order Management </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid store id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public AccountSynchronizationList getMarketplaceAccountsSynchronizationV3(String ifNoneMatch, List<String> storeIds) throws ApiException {
        ApiResponse<AccountSynchronizationList> localVarResp = getMarketplaceAccountsSynchronizationV3WithHttpInfo(ifNoneMatch, storeIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param storeIds StoredIds to filter (optional)
     * @return ApiResponse&lt;AccountSynchronizationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched the list of MarketplaceBusinessCode ready for Order Management </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid store id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSynchronizationList> getMarketplaceAccountsSynchronizationV3WithHttpInfo(String ifNoneMatch, List<String> storeIds) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceAccountsSynchronizationV3ValidateBeforeCall(ifNoneMatch, storeIds, null);
        Type localVarReturnType = new TypeToken<AccountSynchronizationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param storeIds StoredIds to filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched the list of MarketplaceBusinessCode ready for Order Management </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid store id </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceAccountsSynchronizationV3Async(String ifNoneMatch, List<String> storeIds, final ApiCallback<AccountSynchronizationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceAccountsSynchronizationV3ValidateBeforeCall(ifNoneMatch, storeIds, _callback);
        Type localVarReturnType = new TypeToken<AccountSynchronizationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderManagementReadyMarketplaceBusinessCode
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @param storeIds StoredIds to filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched current synchronization status </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderManagementReadyMarketplaceBusinessCodeCall(List<String> acceptLanguage, List<String> storeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/lov/orderManagementReadyMarketplaceBusinessCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "storeIds", storeIds));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderManagementReadyMarketplaceBusinessCodeValidateBeforeCall(List<String> acceptLanguage, List<String> storeIds, final ApiCallback _callback) throws ApiException {
        return getOrderManagementReadyMarketplaceBusinessCodeCall(acceptLanguage, storeIds, _callback);

    }

    /**
     * 
     * Get the list of MarketplaceBusinessCode ready for Order Management
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @param storeIds StoredIds to filter (optional)
     * @return List&lt;ListOfValueItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched current synchronization status </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public List<ListOfValueItem> getOrderManagementReadyMarketplaceBusinessCode(List<String> acceptLanguage, List<String> storeIds) throws ApiException {
        ApiResponse<List<ListOfValueItem>> localVarResp = getOrderManagementReadyMarketplaceBusinessCodeWithHttpInfo(acceptLanguage, storeIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of MarketplaceBusinessCode ready for Order Management
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @param storeIds StoredIds to filter (optional)
     * @return ApiResponse&lt;List&lt;ListOfValueItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched current synchronization status </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListOfValueItem>> getOrderManagementReadyMarketplaceBusinessCodeWithHttpInfo(List<String> acceptLanguage, List<String> storeIds) throws ApiException {
        okhttp3.Call localVarCall = getOrderManagementReadyMarketplaceBusinessCodeValidateBeforeCall(acceptLanguage, storeIds, null);
        Type localVarReturnType = new TypeToken<List<ListOfValueItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of MarketplaceBusinessCode ready for Order Management
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @param storeIds StoredIds to filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched current synchronization status </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderManagementReadyMarketplaceBusinessCodeAsync(List<String> acceptLanguage, List<String> storeIds, final ApiCallback<List<ListOfValueItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderManagementReadyMarketplaceBusinessCodeValidateBeforeCall(acceptLanguage, storeIds, _callback);
        Type localVarReturnType = new TypeToken<List<ListOfValueItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for harvestAllV3
     * @param storeId The StoreId to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent harvest request to all marketplaces </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestAllV3Call(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/harvest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeId", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call harvestAllV3ValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        return harvestAllV3Call(storeId, _callback);

    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @param storeId The StoreId to filter by (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent harvest request to all marketplaces </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void harvestAllV3(String storeId) throws ApiException {
        harvestAllV3WithHttpInfo(storeId);
    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @param storeId The StoreId to filter by (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent harvest request to all marketplaces </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> harvestAllV3WithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = harvestAllV3ValidateBeforeCall(storeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send harvest request to all your marketplaces (asynchronously)
     * 
     * @param storeId The StoreId to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent harvest request to all marketplaces </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Store could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestAllV3Async(String storeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = harvestAllV3ValidateBeforeCall(storeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
