/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalyticsProductColumnFilters;
import org.openapitools.client.model.BeezUPCommonCatalogCategoryFilter;
import org.openapitools.client.model.OrderByDirection;
import org.openapitools.client.model.PerformanceIndicatorFilter;
import org.openapitools.client.model.PerformanceIndicatorType;
import org.openapitools.client.model.ProductStateFilter;
import org.openapitools.client.model.ReportAdvancedFilters;
import org.openapitools.client.model.ReportFilterPeriodType;
import org.openapitools.client.model.ReportType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OptimiseAllRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OptimiseAllRequest {
  public static final String SERIALIZED_NAME_ADVANCED_FILTERS = "advancedFilters";
  @SerializedName(SERIALIZED_NAME_ADVANCED_FILTERS)
  private ReportAdvancedFilters advancedFilters;

  public static final String SERIALIZED_NAME_BEGIN_PERIOD_UTC_DATE = "beginPeriodUtcDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_PERIOD_UTC_DATE)
  private OffsetDateTime beginPeriodUtcDate;

  public static final String SERIALIZED_NAME_CATEGORY_FILTER = "categoryFilter";
  @SerializedName(SERIALIZED_NAME_CATEGORY_FILTER)
  private BeezUPCommonCatalogCategoryFilter categoryFilter;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_END_PERIOD_UTC_DATE = "endPeriodUtcDate";
  @SerializedName(SERIALIZED_NAME_END_PERIOD_UTC_DATE)
  private OffsetDateTime endPeriodUtcDate;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_FILTERS = "performanceIndicatorFilters";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_FILTERS)
  private List<PerformanceIndicatorFilter> performanceIndicatorFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "periodType";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private ReportFilterPeriodType periodType;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private PerformanceIndicatorType orderBy;

  public static final String SERIALIZED_NAME_ORDER_BY_DIRECTION = "orderByDirection";
  @SerializedName(SERIALIZED_NAME_ORDER_BY_DIRECTION)
  private OrderByDirection orderByDirection;

  public static final String SERIALIZED_NAME_ANALYTICS_PRODUCT_COLUMN_FILTERS = "analyticsProductColumnFilters";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_PRODUCT_COLUMN_FILTERS)
  private AnalyticsProductColumnFilters analyticsProductColumnFilters;

  public static final String SERIALIZED_NAME_PRODUCT_COLUMNS_TO_DISPLAY = "productColumnsToDisplay";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COLUMNS_TO_DISPLAY)
  private List<String> productColumnsToDisplay = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_STATE = "productState";
  @SerializedName(SERIALIZED_NAME_PRODUCT_STATE)
  private ProductStateFilter productState = ProductStateFilter.ALL;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private ReportType reportType;

  public OptimiseAllRequest() {
  }

  public OptimiseAllRequest advancedFilters(ReportAdvancedFilters advancedFilters) {
    this.advancedFilters = advancedFilters;
    return this;
  }

  /**
   * Get advancedFilters
   * @return advancedFilters
   */
  @javax.annotation.Nonnull
  public ReportAdvancedFilters getAdvancedFilters() {
    return advancedFilters;
  }

  public void setAdvancedFilters(ReportAdvancedFilters advancedFilters) {
    this.advancedFilters = advancedFilters;
  }


  public OptimiseAllRequest beginPeriodUtcDate(OffsetDateTime beginPeriodUtcDate) {
    this.beginPeriodUtcDate = beginPeriodUtcDate;
    return this;
  }

  /**
   * The begin date period you want to get the report. It&#39;s required only in case of custom period type !
   * @return beginPeriodUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getBeginPeriodUtcDate() {
    return beginPeriodUtcDate;
  }

  public void setBeginPeriodUtcDate(OffsetDateTime beginPeriodUtcDate) {
    this.beginPeriodUtcDate = beginPeriodUtcDate;
  }


  public OptimiseAllRequest categoryFilter(BeezUPCommonCatalogCategoryFilter categoryFilter) {
    this.categoryFilter = categoryFilter;
    return this;
  }

  /**
   * Get categoryFilter
   * @return categoryFilter
   */
  @javax.annotation.Nullable
  public BeezUPCommonCatalogCategoryFilter getCategoryFilter() {
    return categoryFilter;
  }

  public void setCategoryFilter(BeezUPCommonCatalogCategoryFilter categoryFilter) {
    this.categoryFilter = categoryFilter;
  }


  public OptimiseAllRequest channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The channel identifier
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public OptimiseAllRequest endPeriodUtcDate(OffsetDateTime endPeriodUtcDate) {
    this.endPeriodUtcDate = endPeriodUtcDate;
    return this;
  }

  /**
   * The end date period you want to get the report. It&#39;s required only in case of custom period type !
   * @return endPeriodUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndPeriodUtcDate() {
    return endPeriodUtcDate;
  }

  public void setEndPeriodUtcDate(OffsetDateTime endPeriodUtcDate) {
    this.endPeriodUtcDate = endPeriodUtcDate;
  }


  public OptimiseAllRequest performanceIndicatorFilters(List<PerformanceIndicatorFilter> performanceIndicatorFilters) {
    this.performanceIndicatorFilters = performanceIndicatorFilters;
    return this;
  }

  public OptimiseAllRequest addPerformanceIndicatorFiltersItem(PerformanceIndicatorFilter performanceIndicatorFiltersItem) {
    if (this.performanceIndicatorFilters == null) {
      this.performanceIndicatorFilters = new ArrayList<>();
    }
    this.performanceIndicatorFilters.add(performanceIndicatorFiltersItem);
    return this;
  }

  /**
   * Get performanceIndicatorFilters
   * @return performanceIndicatorFilters
   */
  @javax.annotation.Nullable
  public List<PerformanceIndicatorFilter> getPerformanceIndicatorFilters() {
    return performanceIndicatorFilters;
  }

  public void setPerformanceIndicatorFilters(List<PerformanceIndicatorFilter> performanceIndicatorFilters) {
    this.performanceIndicatorFilters = performanceIndicatorFilters;
  }


  public OptimiseAllRequest periodType(ReportFilterPeriodType periodType) {
    this.periodType = periodType;
    return this;
  }

  /**
   * Get periodType
   * @return periodType
   */
  @javax.annotation.Nonnull
  public ReportFilterPeriodType getPeriodType() {
    return periodType;
  }

  public void setPeriodType(ReportFilterPeriodType periodType) {
    this.periodType = periodType;
  }


  public OptimiseAllRequest orderBy(PerformanceIndicatorType orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public PerformanceIndicatorType getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(PerformanceIndicatorType orderBy) {
    this.orderBy = orderBy;
  }


  public OptimiseAllRequest orderByDirection(OrderByDirection orderByDirection) {
    this.orderByDirection = orderByDirection;
    return this;
  }

  /**
   * Get orderByDirection
   * @return orderByDirection
   */
  @javax.annotation.Nullable
  public OrderByDirection getOrderByDirection() {
    return orderByDirection;
  }

  public void setOrderByDirection(OrderByDirection orderByDirection) {
    this.orderByDirection = orderByDirection;
  }


  public OptimiseAllRequest analyticsProductColumnFilters(AnalyticsProductColumnFilters analyticsProductColumnFilters) {
    this.analyticsProductColumnFilters = analyticsProductColumnFilters;
    return this;
  }

  /**
   * Get analyticsProductColumnFilters
   * @return analyticsProductColumnFilters
   */
  @javax.annotation.Nullable
  public AnalyticsProductColumnFilters getAnalyticsProductColumnFilters() {
    return analyticsProductColumnFilters;
  }

  public void setAnalyticsProductColumnFilters(AnalyticsProductColumnFilters analyticsProductColumnFilters) {
    this.analyticsProductColumnFilters = analyticsProductColumnFilters;
  }


  public OptimiseAllRequest productColumnsToDisplay(List<String> productColumnsToDisplay) {
    this.productColumnsToDisplay = productColumnsToDisplay;
    return this;
  }

  public OptimiseAllRequest addProductColumnsToDisplayItem(String productColumnsToDisplayItem) {
    if (this.productColumnsToDisplay == null) {
      this.productColumnsToDisplay = new ArrayList<>();
    }
    this.productColumnsToDisplay.add(productColumnsToDisplayItem);
    return this;
  }

  /**
   * Get productColumnsToDisplay
   * @return productColumnsToDisplay
   */
  @javax.annotation.Nullable
  public List<String> getProductColumnsToDisplay() {
    return productColumnsToDisplay;
  }

  public void setProductColumnsToDisplay(List<String> productColumnsToDisplay) {
    this.productColumnsToDisplay = productColumnsToDisplay;
  }


  public OptimiseAllRequest productState(ProductStateFilter productState) {
    this.productState = productState;
    return this;
  }

  /**
   * Get productState
   * @return productState
   */
  @javax.annotation.Nullable
  public ProductStateFilter getProductState() {
    return productState;
  }

  public void setProductState(ProductStateFilter productState) {
    this.productState = productState;
  }


  public OptimiseAllRequest reportType(ReportType reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Get reportType
   * @return reportType
   */
  @javax.annotation.Nonnull
  public ReportType getReportType() {
    return reportType;
  }

  public void setReportType(ReportType reportType) {
    this.reportType = reportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimiseAllRequest optimiseAllRequest = (OptimiseAllRequest) o;
    return Objects.equals(this.advancedFilters, optimiseAllRequest.advancedFilters) &&
        Objects.equals(this.beginPeriodUtcDate, optimiseAllRequest.beginPeriodUtcDate) &&
        Objects.equals(this.categoryFilter, optimiseAllRequest.categoryFilter) &&
        Objects.equals(this.channelId, optimiseAllRequest.channelId) &&
        Objects.equals(this.endPeriodUtcDate, optimiseAllRequest.endPeriodUtcDate) &&
        Objects.equals(this.performanceIndicatorFilters, optimiseAllRequest.performanceIndicatorFilters) &&
        Objects.equals(this.periodType, optimiseAllRequest.periodType) &&
        Objects.equals(this.orderBy, optimiseAllRequest.orderBy) &&
        Objects.equals(this.orderByDirection, optimiseAllRequest.orderByDirection) &&
        Objects.equals(this.analyticsProductColumnFilters, optimiseAllRequest.analyticsProductColumnFilters) &&
        Objects.equals(this.productColumnsToDisplay, optimiseAllRequest.productColumnsToDisplay) &&
        Objects.equals(this.productState, optimiseAllRequest.productState) &&
        Objects.equals(this.reportType, optimiseAllRequest.reportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedFilters, beginPeriodUtcDate, categoryFilter, channelId, endPeriodUtcDate, performanceIndicatorFilters, periodType, orderBy, orderByDirection, analyticsProductColumnFilters, productColumnsToDisplay, productState, reportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimiseAllRequest {\n");
    sb.append("    advancedFilters: ").append(toIndentedString(advancedFilters)).append("\n");
    sb.append("    beginPeriodUtcDate: ").append(toIndentedString(beginPeriodUtcDate)).append("\n");
    sb.append("    categoryFilter: ").append(toIndentedString(categoryFilter)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    endPeriodUtcDate: ").append(toIndentedString(endPeriodUtcDate)).append("\n");
    sb.append("    performanceIndicatorFilters: ").append(toIndentedString(performanceIndicatorFilters)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    orderByDirection: ").append(toIndentedString(orderByDirection)).append("\n");
    sb.append("    analyticsProductColumnFilters: ").append(toIndentedString(analyticsProductColumnFilters)).append("\n");
    sb.append("    productColumnsToDisplay: ").append(toIndentedString(productColumnsToDisplay)).append("\n");
    sb.append("    productState: ").append(toIndentedString(productState)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedFilters");
    openapiFields.add("beginPeriodUtcDate");
    openapiFields.add("categoryFilter");
    openapiFields.add("channelId");
    openapiFields.add("endPeriodUtcDate");
    openapiFields.add("performanceIndicatorFilters");
    openapiFields.add("periodType");
    openapiFields.add("orderBy");
    openapiFields.add("orderByDirection");
    openapiFields.add("analyticsProductColumnFilters");
    openapiFields.add("productColumnsToDisplay");
    openapiFields.add("productState");
    openapiFields.add("reportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("advancedFilters");
    openapiRequiredFields.add("beginPeriodUtcDate");
    openapiRequiredFields.add("endPeriodUtcDate");
    openapiRequiredFields.add("periodType");
    openapiRequiredFields.add("reportType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OptimiseAllRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptimiseAllRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptimiseAllRequest is not found in the empty JSON string", OptimiseAllRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OptimiseAllRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OptimiseAllRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OptimiseAllRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `advancedFilters`
      ReportAdvancedFilters.validateJsonElement(jsonObj.get("advancedFilters"));
      // validate the optional field `categoryFilter`
      if (jsonObj.get("categoryFilter") != null && !jsonObj.get("categoryFilter").isJsonNull()) {
        BeezUPCommonCatalogCategoryFilter.validateJsonElement(jsonObj.get("categoryFilter"));
      }
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if (jsonObj.get("performanceIndicatorFilters") != null && !jsonObj.get("performanceIndicatorFilters").isJsonNull()) {
        JsonArray jsonArrayperformanceIndicatorFilters = jsonObj.getAsJsonArray("performanceIndicatorFilters");
        if (jsonArrayperformanceIndicatorFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("performanceIndicatorFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `performanceIndicatorFilters` to be an array in the JSON string but got `%s`", jsonObj.get("performanceIndicatorFilters").toString()));
          }

          // validate the optional field `performanceIndicatorFilters` (array)
          for (int i = 0; i < jsonArrayperformanceIndicatorFilters.size(); i++) {
            PerformanceIndicatorFilter.validateJsonElement(jsonArrayperformanceIndicatorFilters.get(i));
          };
        }
      }
      // validate the required field `periodType`
      ReportFilterPeriodType.validateJsonElement(jsonObj.get("periodType"));
      // validate the optional field `orderBy`
      if (jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) {
        PerformanceIndicatorType.validateJsonElement(jsonObj.get("orderBy"));
      }
      // validate the optional field `orderByDirection`
      if (jsonObj.get("orderByDirection") != null && !jsonObj.get("orderByDirection").isJsonNull()) {
        OrderByDirection.validateJsonElement(jsonObj.get("orderByDirection"));
      }
      // validate the optional field `analyticsProductColumnFilters`
      if (jsonObj.get("analyticsProductColumnFilters") != null && !jsonObj.get("analyticsProductColumnFilters").isJsonNull()) {
        AnalyticsProductColumnFilters.validateJsonElement(jsonObj.get("analyticsProductColumnFilters"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productColumnsToDisplay") != null && !jsonObj.get("productColumnsToDisplay").isJsonNull() && !jsonObj.get("productColumnsToDisplay").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productColumnsToDisplay` to be an array in the JSON string but got `%s`", jsonObj.get("productColumnsToDisplay").toString()));
      }
      // validate the optional field `productState`
      if (jsonObj.get("productState") != null && !jsonObj.get("productState").isJsonNull()) {
        ProductStateFilter.validateJsonElement(jsonObj.get("productState"));
      }
      // validate the required field `reportType`
      ReportType.validateJsonElement(jsonObj.get("reportType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptimiseAllRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptimiseAllRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptimiseAllRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptimiseAllRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OptimiseAllRequest>() {
           @Override
           public void write(JsonWriter out, OptimiseAllRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptimiseAllRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OptimiseAllRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OptimiseAllRequest
   * @throws IOException if the JSON string is invalid with respect to OptimiseAllRequest
   */
  public static OptimiseAllRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptimiseAllRequest.class);
  }

  /**
   * Convert an instance of OptimiseAllRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

