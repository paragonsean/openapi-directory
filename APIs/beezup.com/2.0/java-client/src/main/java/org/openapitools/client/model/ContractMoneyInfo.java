/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describe the pricing information related to the offer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContractMoneyInfo {
  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_AND_EXCLUDING_CODE_PROMO_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT = "amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_AND_EXCLUDING_CODE_PROMO_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT)
  private Double amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount;

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_AND_EXCLUDING_DISCOUNTS = "amountExcludingTaxesAndExcludingDiscounts";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_AND_EXCLUDING_DISCOUNTS)
  private Double amountExcludingTaxesAndExcludingDiscounts;

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_INCLUDING_DISCOUNTS = "amountExcludingTaxesIncludingDiscounts";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_INCLUDING_DISCOUNTS)
  private Double amountExcludingTaxesIncludingDiscounts;

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_INCLUDING_DISCOUNTS_PER_MONTH = "amountExcludingTaxesIncludingDiscountsPerMonth";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAXES_INCLUDING_DISCOUNTS_PER_MONTH)
  private Double amountExcludingTaxesIncludingDiscountsPerMonth;

  public static final String SERIALIZED_NAME_AMOUNT_INCLUDING_TAXES_EXCLUDING_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT = "amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount";
  @SerializedName(SERIALIZED_NAME_AMOUNT_INCLUDING_TAXES_EXCLUDING_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT)
  private Double amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount;

  public static final String SERIALIZED_NAME_AMOUNT_INCLUDING_TAXES_INCLUDING_DISCOUNTS = "amountIncludingTaxesIncludingDiscounts";
  @SerializedName(SERIALIZED_NAME_AMOUNT_INCLUDING_TAXES_INCLUDING_DISCOUNTS)
  private Double amountIncludingTaxesIncludingDiscounts;

  public static final String SERIALIZED_NAME_AMOUNT_TAXES_EXCLUDING_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT = "amountTaxesExcludingDiscountIncludingBillingPeriodDiscount";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TAXES_EXCLUDING_DISCOUNT_INCLUDING_BILLING_PERIOD_DISCOUNT)
  private Double amountTaxesExcludingDiscountIncludingBillingPeriodDiscount;

  public static final String SERIALIZED_NAME_AMOUNT_TAXES_INCLUDING_DISCOUNTS = "amountTaxesIncludingDiscounts";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TAXES_INCLUDING_DISCOUNTS)
  private Double amountTaxesIncludingDiscounts;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INITIAL_OFFER_FIXED_PRICE = "initialOfferFixedPrice";
  @SerializedName(SERIALIZED_NAME_INITIAL_OFFER_FIXED_PRICE)
  private Double initialOfferFixedPrice;

  public static final String SERIALIZED_NAME_VAT_PERCENT = "vatPercent";
  @SerializedName(SERIALIZED_NAME_VAT_PERCENT)
  private Double vatPercent;

  public ContractMoneyInfo() {
  }

  public ContractMoneyInfo amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount(Double amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount) {
    this.amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount = amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount;
    return this;
  }

  /**
   * The amount excluding taxes and excluding code promo discount including billing period discount.
   * @return amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount
   */
  @javax.annotation.Nullable
  public Double getAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount() {
    return amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount;
  }

  public void setAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount(Double amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount) {
    this.amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount = amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount;
  }


  public ContractMoneyInfo amountExcludingTaxesAndExcludingDiscounts(Double amountExcludingTaxesAndExcludingDiscounts) {
    this.amountExcludingTaxesAndExcludingDiscounts = amountExcludingTaxesAndExcludingDiscounts;
    return this;
  }

  /**
   * The amount excluding taxes and excluding discounts.
   * @return amountExcludingTaxesAndExcludingDiscounts
   */
  @javax.annotation.Nullable
  public Double getAmountExcludingTaxesAndExcludingDiscounts() {
    return amountExcludingTaxesAndExcludingDiscounts;
  }

  public void setAmountExcludingTaxesAndExcludingDiscounts(Double amountExcludingTaxesAndExcludingDiscounts) {
    this.amountExcludingTaxesAndExcludingDiscounts = amountExcludingTaxesAndExcludingDiscounts;
  }


  public ContractMoneyInfo amountExcludingTaxesIncludingDiscounts(Double amountExcludingTaxesIncludingDiscounts) {
    this.amountExcludingTaxesIncludingDiscounts = amountExcludingTaxesIncludingDiscounts;
    return this;
  }

  /**
   * The amount excluding taxes including discounts.
   * @return amountExcludingTaxesIncludingDiscounts
   */
  @javax.annotation.Nullable
  public Double getAmountExcludingTaxesIncludingDiscounts() {
    return amountExcludingTaxesIncludingDiscounts;
  }

  public void setAmountExcludingTaxesIncludingDiscounts(Double amountExcludingTaxesIncludingDiscounts) {
    this.amountExcludingTaxesIncludingDiscounts = amountExcludingTaxesIncludingDiscounts;
  }


  public ContractMoneyInfo amountExcludingTaxesIncludingDiscountsPerMonth(Double amountExcludingTaxesIncludingDiscountsPerMonth) {
    this.amountExcludingTaxesIncludingDiscountsPerMonth = amountExcludingTaxesIncludingDiscountsPerMonth;
    return this;
  }

  /**
   * The amount excluding taxes including discounts per month.
   * @return amountExcludingTaxesIncludingDiscountsPerMonth
   */
  @javax.annotation.Nullable
  public Double getAmountExcludingTaxesIncludingDiscountsPerMonth() {
    return amountExcludingTaxesIncludingDiscountsPerMonth;
  }

  public void setAmountExcludingTaxesIncludingDiscountsPerMonth(Double amountExcludingTaxesIncludingDiscountsPerMonth) {
    this.amountExcludingTaxesIncludingDiscountsPerMonth = amountExcludingTaxesIncludingDiscountsPerMonth;
  }


  public ContractMoneyInfo amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount(Double amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount) {
    this.amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount;
    return this;
  }

  /**
   * The amount including taxes excluding discount including billing period discount.
   * @return amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount
   */
  @javax.annotation.Nullable
  public Double getAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount() {
    return amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount;
  }

  public void setAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount(Double amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount) {
    this.amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount;
  }


  public ContractMoneyInfo amountIncludingTaxesIncludingDiscounts(Double amountIncludingTaxesIncludingDiscounts) {
    this.amountIncludingTaxesIncludingDiscounts = amountIncludingTaxesIncludingDiscounts;
    return this;
  }

  /**
   * The amount including taxes including discounts.
   * @return amountIncludingTaxesIncludingDiscounts
   */
  @javax.annotation.Nullable
  public Double getAmountIncludingTaxesIncludingDiscounts() {
    return amountIncludingTaxesIncludingDiscounts;
  }

  public void setAmountIncludingTaxesIncludingDiscounts(Double amountIncludingTaxesIncludingDiscounts) {
    this.amountIncludingTaxesIncludingDiscounts = amountIncludingTaxesIncludingDiscounts;
  }


  public ContractMoneyInfo amountTaxesExcludingDiscountIncludingBillingPeriodDiscount(Double amountTaxesExcludingDiscountIncludingBillingPeriodDiscount) {
    this.amountTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountTaxesExcludingDiscountIncludingBillingPeriodDiscount;
    return this;
  }

  /**
   * The taxes excluding discount including billing period discount.
   * @return amountTaxesExcludingDiscountIncludingBillingPeriodDiscount
   */
  @javax.annotation.Nullable
  public Double getAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount() {
    return amountTaxesExcludingDiscountIncludingBillingPeriodDiscount;
  }

  public void setAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount(Double amountTaxesExcludingDiscountIncludingBillingPeriodDiscount) {
    this.amountTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountTaxesExcludingDiscountIncludingBillingPeriodDiscount;
  }


  public ContractMoneyInfo amountTaxesIncludingDiscounts(Double amountTaxesIncludingDiscounts) {
    this.amountTaxesIncludingDiscounts = amountTaxesIncludingDiscounts;
    return this;
  }

  /**
   * Taxes including discounts.
   * @return amountTaxesIncludingDiscounts
   */
  @javax.annotation.Nullable
  public Double getAmountTaxesIncludingDiscounts() {
    return amountTaxesIncludingDiscounts;
  }

  public void setAmountTaxesIncludingDiscounts(Double amountTaxesIncludingDiscounts) {
    this.amountTaxesIncludingDiscounts = amountTaxesIncludingDiscounts;
  }


  public ContractMoneyInfo currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ContractMoneyInfo initialOfferFixedPrice(Double initialOfferFixedPrice) {
    this.initialOfferFixedPrice = initialOfferFixedPrice;
    return this;
  }

  /**
   * The initial offer fixed price.
   * @return initialOfferFixedPrice
   */
  @javax.annotation.Nullable
  public Double getInitialOfferFixedPrice() {
    return initialOfferFixedPrice;
  }

  public void setInitialOfferFixedPrice(Double initialOfferFixedPrice) {
    this.initialOfferFixedPrice = initialOfferFixedPrice;
  }


  public ContractMoneyInfo vatPercent(Double vatPercent) {
    this.vatPercent = vatPercent;
    return this;
  }

  /**
   * The VAT percent.
   * @return vatPercent
   */
  @javax.annotation.Nullable
  public Double getVatPercent() {
    return vatPercent;
  }

  public void setVatPercent(Double vatPercent) {
    this.vatPercent = vatPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractMoneyInfo contractMoneyInfo = (ContractMoneyInfo) o;
    return Objects.equals(this.amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount, contractMoneyInfo.amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount) &&
        Objects.equals(this.amountExcludingTaxesAndExcludingDiscounts, contractMoneyInfo.amountExcludingTaxesAndExcludingDiscounts) &&
        Objects.equals(this.amountExcludingTaxesIncludingDiscounts, contractMoneyInfo.amountExcludingTaxesIncludingDiscounts) &&
        Objects.equals(this.amountExcludingTaxesIncludingDiscountsPerMonth, contractMoneyInfo.amountExcludingTaxesIncludingDiscountsPerMonth) &&
        Objects.equals(this.amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount, contractMoneyInfo.amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount) &&
        Objects.equals(this.amountIncludingTaxesIncludingDiscounts, contractMoneyInfo.amountIncludingTaxesIncludingDiscounts) &&
        Objects.equals(this.amountTaxesExcludingDiscountIncludingBillingPeriodDiscount, contractMoneyInfo.amountTaxesExcludingDiscountIncludingBillingPeriodDiscount) &&
        Objects.equals(this.amountTaxesIncludingDiscounts, contractMoneyInfo.amountTaxesIncludingDiscounts) &&
        Objects.equals(this.currencyCode, contractMoneyInfo.currencyCode) &&
        Objects.equals(this.initialOfferFixedPrice, contractMoneyInfo.initialOfferFixedPrice) &&
        Objects.equals(this.vatPercent, contractMoneyInfo.vatPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount, amountExcludingTaxesAndExcludingDiscounts, amountExcludingTaxesIncludingDiscounts, amountExcludingTaxesIncludingDiscountsPerMonth, amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount, amountIncludingTaxesIncludingDiscounts, amountTaxesExcludingDiscountIncludingBillingPeriodDiscount, amountTaxesIncludingDiscounts, currencyCode, initialOfferFixedPrice, vatPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractMoneyInfo {\n");
    sb.append("    amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount: ").append(toIndentedString(amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount)).append("\n");
    sb.append("    amountExcludingTaxesAndExcludingDiscounts: ").append(toIndentedString(amountExcludingTaxesAndExcludingDiscounts)).append("\n");
    sb.append("    amountExcludingTaxesIncludingDiscounts: ").append(toIndentedString(amountExcludingTaxesIncludingDiscounts)).append("\n");
    sb.append("    amountExcludingTaxesIncludingDiscountsPerMonth: ").append(toIndentedString(amountExcludingTaxesIncludingDiscountsPerMonth)).append("\n");
    sb.append("    amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount: ").append(toIndentedString(amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount)).append("\n");
    sb.append("    amountIncludingTaxesIncludingDiscounts: ").append(toIndentedString(amountIncludingTaxesIncludingDiscounts)).append("\n");
    sb.append("    amountTaxesExcludingDiscountIncludingBillingPeriodDiscount: ").append(toIndentedString(amountTaxesExcludingDiscountIncludingBillingPeriodDiscount)).append("\n");
    sb.append("    amountTaxesIncludingDiscounts: ").append(toIndentedString(amountTaxesIncludingDiscounts)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    initialOfferFixedPrice: ").append(toIndentedString(initialOfferFixedPrice)).append("\n");
    sb.append("    vatPercent: ").append(toIndentedString(vatPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount");
    openapiFields.add("amountExcludingTaxesAndExcludingDiscounts");
    openapiFields.add("amountExcludingTaxesIncludingDiscounts");
    openapiFields.add("amountExcludingTaxesIncludingDiscountsPerMonth");
    openapiFields.add("amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount");
    openapiFields.add("amountIncludingTaxesIncludingDiscounts");
    openapiFields.add("amountTaxesExcludingDiscountIncludingBillingPeriodDiscount");
    openapiFields.add("amountTaxesIncludingDiscounts");
    openapiFields.add("currencyCode");
    openapiFields.add("initialOfferFixedPrice");
    openapiFields.add("vatPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractMoneyInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractMoneyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractMoneyInfo is not found in the empty JSON string", ContractMoneyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractMoneyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractMoneyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractMoneyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractMoneyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractMoneyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractMoneyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractMoneyInfo>() {
           @Override
           public void write(JsonWriter out, ContractMoneyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractMoneyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractMoneyInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractMoneyInfo
   * @throws IOException if the JSON string is invalid with respect to ContractMoneyInfo
   */
  public static ContractMoneyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractMoneyInfo.class);
  }

  /**
   * Convert an instance of ContractMoneyInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

