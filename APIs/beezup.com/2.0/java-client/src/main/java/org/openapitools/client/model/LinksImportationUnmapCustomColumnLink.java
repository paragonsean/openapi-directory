/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BeezUPCommonHttpMethod;
import org.openapitools.client.model.BeezUPCommonInfoSummaries;
import org.openapitools.client.model.BeezUPCommonLinkParameter3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LinksImportationUnmapCustomColumnLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinksImportationUnmapCustomColumnLink {
  public static final String SERIALIZED_NAME_ALL_OPTIONAL_PARAMS_PROVIDED = "allOptionalParamsProvided";
  @SerializedName(SERIALIZED_NAME_ALL_OPTIONAL_PARAMS_PROVIDED)
  private Boolean allOptionalParamsProvided;

  public static final String SERIALIZED_NAME_ALL_REQUIRED_PARAMS_PROVIDED = "allRequiredParamsProvided";
  @SerializedName(SERIALIZED_NAME_ALL_REQUIRED_PARAMS_PROVIDED)
  private Boolean allRequiredParamsProvided;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOC_URL = "docUrl";
  @SerializedName(SERIALIZED_NAME_DOC_URL)
  private URI docUrl;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private BeezUPCommonInfoSummaries info;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private BeezUPCommonHttpMethod method = BeezUPCommonHttpMethod.GET;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, BeezUPCommonLinkParameter3> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_URL_TEMPLATED = "urlTemplated";
  @SerializedName(SERIALIZED_NAME_URL_TEMPLATED)
  private Boolean urlTemplated;

  public LinksImportationUnmapCustomColumnLink() {
  }

  public LinksImportationUnmapCustomColumnLink allOptionalParamsProvided(Boolean allOptionalParamsProvided) {
    this.allOptionalParamsProvided = allOptionalParamsProvided;
    return this;
  }

  /**
   * indicates whether all optionals params have been provided
   * @return allOptionalParamsProvided
   */
  @javax.annotation.Nullable
  public Boolean getAllOptionalParamsProvided() {
    return allOptionalParamsProvided;
  }

  public void setAllOptionalParamsProvided(Boolean allOptionalParamsProvided) {
    this.allOptionalParamsProvided = allOptionalParamsProvided;
  }


  public LinksImportationUnmapCustomColumnLink allRequiredParamsProvided(Boolean allRequiredParamsProvided) {
    this.allRequiredParamsProvided = allRequiredParamsProvided;
    return this;
  }

  /**
   * indicates whether all required params have been provided
   * @return allRequiredParamsProvided
   */
  @javax.annotation.Nullable
  public Boolean getAllRequiredParamsProvided() {
    return allRequiredParamsProvided;
  }

  public void setAllRequiredParamsProvided(Boolean allRequiredParamsProvided) {
    this.allRequiredParamsProvided = allRequiredParamsProvided;
  }


  public LinksImportationUnmapCustomColumnLink description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the link
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LinksImportationUnmapCustomColumnLink docUrl(URI docUrl) {
    this.docUrl = docUrl;
    return this;
  }

  /**
   * The documentation related to this operation.
   * @return docUrl
   */
  @javax.annotation.Nullable
  public URI getDocUrl() {
    return docUrl;
  }

  public void setDocUrl(URI docUrl) {
    this.docUrl = docUrl;
  }


  public LinksImportationUnmapCustomColumnLink href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Indicate the relative uri for this link
   * @return href
   */
  @javax.annotation.Nonnull
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public LinksImportationUnmapCustomColumnLink info(BeezUPCommonInfoSummaries info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public BeezUPCommonInfoSummaries getInfo() {
    return info;
  }

  public void setInfo(BeezUPCommonInfoSummaries info) {
    this.info = info;
  }


  public LinksImportationUnmapCustomColumnLink label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public LinksImportationUnmapCustomColumnLink method(BeezUPCommonHttpMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public BeezUPCommonHttpMethod getMethod() {
    return method;
  }

  public void setMethod(BeezUPCommonHttpMethod method) {
    this.method = method;
  }


  public LinksImportationUnmapCustomColumnLink operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The operationId to call.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public LinksImportationUnmapCustomColumnLink parameters(Map<String, BeezUPCommonLinkParameter3> parameters) {
    this.parameters = parameters;
    return this;
  }

  public LinksImportationUnmapCustomColumnLink putParametersItem(String key, BeezUPCommonLinkParameter3 parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, BeezUPCommonLinkParameter3> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, BeezUPCommonLinkParameter3> parameters) {
    this.parameters = parameters;
  }


  public LinksImportationUnmapCustomColumnLink urlTemplated(Boolean urlTemplated) {
    this.urlTemplated = urlTemplated;
    return this;
  }

  /**
   * indicates whether the href is templated or not
   * @return urlTemplated
   */
  @javax.annotation.Nullable
  public Boolean getUrlTemplated() {
    return urlTemplated;
  }

  public void setUrlTemplated(Boolean urlTemplated) {
    this.urlTemplated = urlTemplated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinksImportationUnmapCustomColumnLink linksImportationUnmapCustomColumnLink = (LinksImportationUnmapCustomColumnLink) o;
    return Objects.equals(this.allOptionalParamsProvided, linksImportationUnmapCustomColumnLink.allOptionalParamsProvided) &&
        Objects.equals(this.allRequiredParamsProvided, linksImportationUnmapCustomColumnLink.allRequiredParamsProvided) &&
        Objects.equals(this.description, linksImportationUnmapCustomColumnLink.description) &&
        Objects.equals(this.docUrl, linksImportationUnmapCustomColumnLink.docUrl) &&
        Objects.equals(this.href, linksImportationUnmapCustomColumnLink.href) &&
        Objects.equals(this.info, linksImportationUnmapCustomColumnLink.info) &&
        Objects.equals(this.label, linksImportationUnmapCustomColumnLink.label) &&
        Objects.equals(this.method, linksImportationUnmapCustomColumnLink.method) &&
        Objects.equals(this.operationId, linksImportationUnmapCustomColumnLink.operationId) &&
        Objects.equals(this.parameters, linksImportationUnmapCustomColumnLink.parameters) &&
        Objects.equals(this.urlTemplated, linksImportationUnmapCustomColumnLink.urlTemplated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allOptionalParamsProvided, allRequiredParamsProvided, description, docUrl, href, info, label, method, operationId, parameters, urlTemplated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinksImportationUnmapCustomColumnLink {\n");
    sb.append("    allOptionalParamsProvided: ").append(toIndentedString(allOptionalParamsProvided)).append("\n");
    sb.append("    allRequiredParamsProvided: ").append(toIndentedString(allRequiredParamsProvided)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    docUrl: ").append(toIndentedString(docUrl)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    urlTemplated: ").append(toIndentedString(urlTemplated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allOptionalParamsProvided");
    openapiFields.add("allRequiredParamsProvided");
    openapiFields.add("description");
    openapiFields.add("docUrl");
    openapiFields.add("href");
    openapiFields.add("info");
    openapiFields.add("label");
    openapiFields.add("method");
    openapiFields.add("operationId");
    openapiFields.add("parameters");
    openapiFields.add("urlTemplated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("href");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinksImportationUnmapCustomColumnLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinksImportationUnmapCustomColumnLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinksImportationUnmapCustomColumnLink is not found in the empty JSON string", LinksImportationUnmapCustomColumnLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinksImportationUnmapCustomColumnLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinksImportationUnmapCustomColumnLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinksImportationUnmapCustomColumnLink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("docUrl") != null && !jsonObj.get("docUrl").isJsonNull()) && !jsonObj.get("docUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docUrl").toString()));
      }
      if (!jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        BeezUPCommonInfoSummaries.validateJsonElement(jsonObj.get("info"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        BeezUPCommonHttpMethod.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinksImportationUnmapCustomColumnLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinksImportationUnmapCustomColumnLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinksImportationUnmapCustomColumnLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinksImportationUnmapCustomColumnLink.class));

       return (TypeAdapter<T>) new TypeAdapter<LinksImportationUnmapCustomColumnLink>() {
           @Override
           public void write(JsonWriter out, LinksImportationUnmapCustomColumnLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinksImportationUnmapCustomColumnLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinksImportationUnmapCustomColumnLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinksImportationUnmapCustomColumnLink
   * @throws IOException if the JSON string is invalid with respect to LinksImportationUnmapCustomColumnLink
   */
  public static LinksImportationUnmapCustomColumnLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinksImportationUnmapCustomColumnLink.class);
  }

  /**
   * Convert an instance of LinksImportationUnmapCustomColumnLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

