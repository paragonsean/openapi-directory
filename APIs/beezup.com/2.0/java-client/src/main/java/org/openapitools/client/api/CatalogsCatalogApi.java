/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.CatalogColumnList;
import org.openapitools.client.model.CatalogStoreIndex;
import org.openapitools.client.model.CategoryList;
import org.openapitools.client.model.ChangeCustomColumnExpressionRequest;
import org.openapitools.client.model.ChangeUserColumnNameRequest;
import org.openapitools.client.model.ComputeExpressionRequest;
import org.openapitools.client.model.CreateCustomColumnRequest;
import org.openapitools.client.model.CustomColumnList;
import org.openapitools.client.model.GetProductsRequest;
import org.openapitools.client.model.ImportAlreadyInProgressResponse;
import org.openapitools.client.model.LastManualImportInputConfiguration;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductList;
import org.openapitools.client.model.RandomProductList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsCatalogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogsCatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsCatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for catalogChangeCatalogColumnUserName
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column user name changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCatalogColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeUserColumnNameRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogChangeCatalogColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCatalogColumnUserName(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCatalogColumnUserName(Async)");
        }

        // verify the required parameter 'changeUserColumnNameRequest' is set
        if (changeUserColumnNameRequest == null) {
            throw new ApiException("Missing the required parameter 'changeUserColumnNameRequest' when calling catalogChangeCatalogColumnUserName(Async)");
        }

        return catalogChangeCatalogColumnUserNameCall(storeId, columnId, changeUserColumnNameRequest, _callback);

    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column user name changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void catalogChangeCatalogColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest) throws ApiException {
        catalogChangeCatalogColumnUserNameWithHttpInfo(storeId, columnId, changeUserColumnNameRequest);
    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column user name changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogChangeCatalogColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, changeUserColumnNameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Catalog Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column user name changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCatalogColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, changeUserColumnNameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogChangeCustomColumnExpression
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnExpressionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column expression saved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the user try to change a custom column related to a Category. If you want to change this custom column expression you have to make a new manual importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCustomColumnExpressionCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeCustomColumnExpressionRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogChangeCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnExpression(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnExpression(Async)");
        }

        // verify the required parameter 'changeCustomColumnExpressionRequest' is set
        if (changeCustomColumnExpressionRequest == null) {
            throw new ApiException("Missing the required parameter 'changeCustomColumnExpressionRequest' when calling catalogChangeCustomColumnExpression(Async)");
        }

        return catalogChangeCustomColumnExpressionCall(storeId, columnId, changeCustomColumnExpressionRequest, _callback);

    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnExpressionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column expression saved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the user try to change a custom column related to a Category. If you want to change this custom column expression you have to make a new manual importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void catalogChangeCustomColumnExpression(String storeId, String columnId, ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest) throws ApiException {
        catalogChangeCustomColumnExpressionWithHttpInfo(storeId, columnId, changeCustomColumnExpressionRequest);
    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnExpressionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column expression saved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the user try to change a custom column related to a Category. If you want to change this custom column expression you have to make a new manual importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogChangeCustomColumnExpressionWithHttpInfo(String storeId, String columnId, ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, changeCustomColumnExpressionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnExpressionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column expression saved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the user try to change a custom column related to a Category. If you want to change this custom column expression you have to make a new manual importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCustomColumnExpressionAsync(String storeId, String columnId, ChangeCustomColumnExpressionRequest changeCustomColumnExpressionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, changeCustomColumnExpressionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogChangeCustomColumnUserName
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCustomColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeUserColumnNameRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogChangeCustomColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnUserName(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnUserName(Async)");
        }

        // verify the required parameter 'changeUserColumnNameRequest' is set
        if (changeUserColumnNameRequest == null) {
            throw new ApiException("Missing the required parameter 'changeUserColumnNameRequest' when calling catalogChangeCustomColumnUserName(Async)");
        }

        return catalogChangeCustomColumnUserNameCall(storeId, columnId, changeUserColumnNameRequest, _callback);

    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void catalogChangeCustomColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest) throws ApiException {
        catalogChangeCustomColumnUserNameWithHttpInfo(storeId, columnId, changeUserColumnNameRequest);
    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogChangeCustomColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, changeUserColumnNameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Custom Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param changeUserColumnNameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogChangeCustomColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest changeUserColumnNameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, changeUserColumnNameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogComputeExpression
     * @param storeId Your store identifier (required)
     * @param computeExpressionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute an expression </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the expression cannot be computed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogComputeExpressionCall(String storeId, ComputeExpressionRequest computeExpressionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = computeExpressionRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/computeExpression"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogComputeExpressionValidateBeforeCall(String storeId, ComputeExpressionRequest computeExpressionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogComputeExpression(Async)");
        }

        // verify the required parameter 'computeExpressionRequest' is set
        if (computeExpressionRequest == null) {
            throw new ApiException("Missing the required parameter 'computeExpressionRequest' when calling catalogComputeExpression(Async)");
        }

        return catalogComputeExpressionCall(storeId, computeExpressionRequest, _callback);

    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param computeExpressionRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute an expression </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the expression cannot be computed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public String catalogComputeExpression(String storeId, ComputeExpressionRequest computeExpressionRequest) throws ApiException {
        ApiResponse<String> localVarResp = catalogComputeExpressionWithHttpInfo(storeId, computeExpressionRequest);
        return localVarResp.getData();
    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param computeExpressionRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute an expression </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the expression cannot be computed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> catalogComputeExpressionWithHttpInfo(String storeId, ComputeExpressionRequest computeExpressionRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogComputeExpressionValidateBeforeCall(storeId, computeExpressionRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute the expression for this catalog. (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param computeExpressionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compute an expression </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when the expression cannot be computed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogComputeExpressionAsync(String storeId, ComputeExpressionRequest computeExpressionRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogComputeExpressionValidateBeforeCall(storeId, computeExpressionRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogDeleteCustomColumn
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the parent category is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogDeleteCustomColumnCall(String storeId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogDeleteCustomColumnValidateBeforeCall(String storeId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogDeleteCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogDeleteCustomColumn(Async)");
        }

        return catalogDeleteCustomColumnCall(storeId, columnId, _callback);

    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the parent category is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void catalogDeleteCustomColumn(String storeId, String columnId) throws ApiException {
        catalogDeleteCustomColumnWithHttpInfo(storeId, columnId);
    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the parent category is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogDeleteCustomColumnWithHttpInfo(String storeId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Occurs when the parent category is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When a catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogDeleteCustomColumnAsync(String storeId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCatalogColumns
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCatalogColumnsCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/catalogColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCatalogColumnsValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCatalogColumns(Async)");
        }

        return catalogGetCatalogColumnsCall(storeId, _callback);

    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return CatalogColumnList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CatalogColumnList catalogGetCatalogColumns(String storeId) throws ApiException {
        ApiResponse<CatalogColumnList> localVarResp = catalogGetCatalogColumnsWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CatalogColumnList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogColumnList> catalogGetCatalogColumnsWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCatalogColumnsValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<CatalogColumnList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get catalog column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCatalogColumnsAsync(String storeId, final ApiCallback<CatalogColumnList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCatalogColumnsValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<CatalogColumnList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCategories
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCategoriesCall(String storeId, List<String> acceptEncoding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/categories"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCategoriesValidateBeforeCall(String storeId, List<String> acceptEncoding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCategories(Async)");
        }

        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling catalogGetCategories(Async)");
        }

        return catalogGetCategoriesCall(storeId, acceptEncoding, _callback);

    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return CategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CategoryList catalogGetCategories(String storeId, List<String> acceptEncoding) throws ApiException {
        ApiResponse<CategoryList> localVarResp = catalogGetCategoriesWithHttpInfo(storeId, acceptEncoding);
        return localVarResp.getData();
    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ApiResponse&lt;CategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryList> catalogGetCategoriesWithHttpInfo(String storeId, List<String> acceptEncoding) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, null);
        Type localVarReturnType = new TypeToken<CategoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get category list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories </td><td>  * Content-Encoding - Indicates the compression use in the response <br>  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCategoriesAsync(String storeId, List<String> acceptEncoding, final ApiCallback<CategoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, _callback);
        Type localVarReturnType = new TypeToken<CategoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCustomColumnExpression
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCustomColumnExpressionCall(String storeId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumnExpression(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogGetCustomColumnExpression(Async)");
        }

        return catalogGetCustomColumnExpressionCall(storeId, columnId, _callback);

    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public String catalogGetCustomColumnExpression(String storeId, String columnId) throws ApiException {
        ApiResponse<String> localVarResp = catalogGetCustomColumnExpressionWithHttpInfo(storeId, columnId);
        return localVarResp.getData();
    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> catalogGetCustomColumnExpressionWithHttpInfo(String storeId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the encrypted custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when a catalog custom column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCustomColumnExpressionAsync(String storeId, String columnId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCustomColumns
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCustomColumnsCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCustomColumnsValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumns(Async)");
        }

        return catalogGetCustomColumnsCall(storeId, _callback);

    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return CustomColumnList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CustomColumnList catalogGetCustomColumns(String storeId) throws ApiException {
        ApiResponse<CustomColumnList> localVarResp = catalogGetCustomColumnsWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CustomColumnList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomColumnList> catalogGetCustomColumnsWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCustomColumnsValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<CustomColumnList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom column list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCustomColumnsAsync(String storeId, final ApiCallback<CustomColumnList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCustomColumnsValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<CustomColumnList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetProductByProductId
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductByProductIdCall(String storeId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products/{productId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetProductByProductIdValidateBeforeCall(String storeId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProductByProductId(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling catalogGetProductByProductId(Async)");
        }

        return catalogGetProductByProductIdCall(storeId, productId, _callback);

    }

    /**
     * Get product by ProductId
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public Product catalogGetProductByProductId(String storeId, String productId) throws ApiException {
        ApiResponse<Product> localVarResp = catalogGetProductByProductIdWithHttpInfo(storeId, productId);
        return localVarResp.getData();
    }

    /**
     * Get product by ProductId
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> catalogGetProductByProductIdWithHttpInfo(String storeId, String productId) throws ApiException {
        okhttp3.Call localVarCall = catalogGetProductByProductIdValidateBeforeCall(storeId, productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product by ProductId (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductByProductIdAsync(String storeId, String productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetProductByProductIdValidateBeforeCall(storeId, productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetProductBySku
     * @param storeId Your store identifier (required)
     * @param sku The product sku you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Product not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductBySkuCall(String storeId, String sku, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetProductBySkuValidateBeforeCall(String storeId, String sku, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProductBySku(Async)");
        }

        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling catalogGetProductBySku(Async)");
        }

        return catalogGetProductBySkuCall(storeId, sku, _callback);

    }

    /**
     * Get product by Sku
     * 
     * @param storeId Your store identifier (required)
     * @param sku The product sku you want to get (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Product not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public Product catalogGetProductBySku(String storeId, String sku) throws ApiException {
        ApiResponse<Product> localVarResp = catalogGetProductBySkuWithHttpInfo(storeId, sku);
        return localVarResp.getData();
    }

    /**
     * Get product by Sku
     * 
     * @param storeId Your store identifier (required)
     * @param sku The product sku you want to get (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Product not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> catalogGetProductBySkuWithHttpInfo(String storeId, String sku) throws ApiException {
        okhttp3.Call localVarCall = catalogGetProductBySkuValidateBeforeCall(storeId, sku, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product by Sku (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param sku The product sku you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Product not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductBySkuAsync(String storeId, String sku, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetProductBySkuValidateBeforeCall(storeId, sku, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetProducts
     * @param storeId Your store identifier (required)
     * @param getProductsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductsCall(String storeId, GetProductsRequest getProductsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getProductsRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products/list"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetProductsValidateBeforeCall(String storeId, GetProductsRequest getProductsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProducts(Async)");
        }

        // verify the required parameter 'getProductsRequest' is set
        if (getProductsRequest == null) {
            throw new ApiException("Missing the required parameter 'getProductsRequest' when calling catalogGetProducts(Async)");
        }

        return catalogGetProductsCall(storeId, getProductsRequest, _callback);

    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param getProductsRequest  (required)
     * @return ProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ProductList catalogGetProducts(String storeId, GetProductsRequest getProductsRequest) throws ApiException {
        ApiResponse<ProductList> localVarResp = catalogGetProductsWithHttpInfo(storeId, getProductsRequest);
        return localVarResp.getData();
    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param getProductsRequest  (required)
     * @return ApiResponse&lt;ProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductList> catalogGetProductsWithHttpInfo(String storeId, GetProductsRequest getProductsRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogGetProductsValidateBeforeCall(storeId, getProductsRequest, null);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param getProductsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProductsAsync(String storeId, GetProductsRequest getProductsRequest, final ApiCallback<ProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetProductsValidateBeforeCall(storeId, getProductsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetRandomProducts
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetRandomProductsCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products/random"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetRandomProductsValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetRandomProducts(Async)");
        }

        return catalogGetRandomProductsCall(storeId, _callback);

    }

    /**
     * Get random product list
     * We will return 10 products randomly selected with all product values
     * @param storeId Your store identifier (required)
     * @return RandomProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public RandomProductList catalogGetRandomProducts(String storeId) throws ApiException {
        ApiResponse<RandomProductList> localVarResp = catalogGetRandomProductsWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get random product list
     * We will return 10 products randomly selected with all product values
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;RandomProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RandomProductList> catalogGetRandomProductsWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = catalogGetRandomProductsValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<RandomProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get random product list (asynchronously)
     * We will return 10 products randomly selected with all product values
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Random product list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetRandomProductsAsync(String storeId, final ApiCallback<RandomProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetRandomProductsValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<RandomProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogSaveCustomColumn
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param createCustomColumnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when a catalog custom column id is already used by a catalog column. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogSaveCustomColumnCall(String storeId, String columnId, CreateCustomColumnRequest createCustomColumnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomColumnRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogSaveCustomColumnValidateBeforeCall(String storeId, String columnId, CreateCustomColumnRequest createCustomColumnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogSaveCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogSaveCustomColumn(Async)");
        }

        // verify the required parameter 'createCustomColumnRequest' is set
        if (createCustomColumnRequest == null) {
            throw new ApiException("Missing the required parameter 'createCustomColumnRequest' when calling catalogSaveCustomColumn(Async)");
        }

        return catalogSaveCustomColumnCall(storeId, columnId, createCustomColumnRequest, _callback);

    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param createCustomColumnRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when a catalog custom column id is already used by a catalog column. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void catalogSaveCustomColumn(String storeId, String columnId, CreateCustomColumnRequest createCustomColumnRequest) throws ApiException {
        catalogSaveCustomColumnWithHttpInfo(storeId, columnId, createCustomColumnRequest);
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param createCustomColumnRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when a catalog custom column id is already used by a catalog column. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogSaveCustomColumnWithHttpInfo(String storeId, String columnId, CreateCustomColumnRequest createCustomColumnRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, createCustomColumnRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or replace a custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param createCustomColumnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Occurs when a catalog custom column id is already used by a catalog column. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogSaveCustomColumnAsync(String storeId, String columnId, CreateCustomColumnRequest createCustomColumnRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, createCustomColumnRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogStoreIndex
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The catalog index </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogStoreIndexCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogStoreIndexValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogStoreIndex(Async)");
        }

        return catalogStoreIndexCall(storeId, _callback);

    }

    /**
     * Get the index of the catalog API for this store
     * The operation will give you all the operations you will be able to do on this store for this API.
     * @param storeId Your store identifier (required)
     * @return CatalogStoreIndex
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The catalog index </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CatalogStoreIndex catalogStoreIndex(String storeId) throws ApiException {
        ApiResponse<CatalogStoreIndex> localVarResp = catalogStoreIndexWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get the index of the catalog API for this store
     * The operation will give you all the operations you will be able to do on this store for this API.
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CatalogStoreIndex&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The catalog index </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogStoreIndex> catalogStoreIndexWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = catalogStoreIndexValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<CatalogStoreIndex>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the index of the catalog API for this store (asynchronously)
     * The operation will give you all the operations you will be able to do on this store for this API.
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The catalog index </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogStoreIndexAsync(String storeId, final ApiCallback<CatalogStoreIndex> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogStoreIndexValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<CatalogStoreIndex>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetManualUpdateLastInputConfig
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Manual Update last configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetManualUpdateLastInputConfigCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/inputConfiguration"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetManualUpdateLastInputConfigValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetManualUpdateLastInputConfig(Async)");
        }

        return importationGetManualUpdateLastInputConfigCall(storeId, _callback);

    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return LastManualImportInputConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Manual Update last configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public LastManualImportInputConfiguration importationGetManualUpdateLastInputConfig(String storeId) throws ApiException {
        ApiResponse<LastManualImportInputConfiguration> localVarResp = importationGetManualUpdateLastInputConfigWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;LastManualImportInputConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Manual Update last configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LastManualImportInputConfiguration> importationGetManualUpdateLastInputConfigWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the last input configuration (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId or Manual Update last configuration not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetManualUpdateLastInputConfigAsync(String storeId, final ApiCallback<LastManualImportInputConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
