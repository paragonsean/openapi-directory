/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateSearchType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderListRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<Integer> accountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEEZ_U_P_ORDER_STATUSES = "beezUPOrderStatuses";
  @SerializedName(SERIALIZED_NAME_BEEZ_U_P_ORDER_STATUSES)
  private List<String> beezUPOrderStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEGIN_PERIOD_UTC_DATE = "beginPeriodUtcDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_PERIOD_UTC_DATE)
  private OffsetDateTime beginPeriodUtcDate;

  public static final String SERIALIZED_NAME_DATE_SEARCH_TYPE = "dateSearchType";
  @SerializedName(SERIALIZED_NAME_DATE_SEARCH_TYPE)
  private DateSearchType dateSearchType = DateSearchType.MODIFICATION;

  public static final String SERIALIZED_NAME_END_PERIOD_UTC_DATE = "endPeriodUtcDate";
  @SerializedName(SERIALIZED_NAME_END_PERIOD_UTC_DATE)
  private OffsetDateTime endPeriodUtcDate;

  public static final String SERIALIZED_NAME_INVOICE_AVAILABILITY_TYPE = "invoiceAvailabilityType";
  @SerializedName(SERIALIZED_NAME_INVOICE_AVAILABILITY_TYPE)
  private String invoiceAvailabilityType;

  public static final String SERIALIZED_NAME_MARKETPLACE_BUSINESS_CODES = "marketplaceBusinessCodes";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_BUSINESS_CODES)
  private List<String> marketplaceBusinessCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_ORDER_IDS = "marketplaceOrderIds";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ORDER_IDS)
  private List<String> marketplaceOrderIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_TECHNICAL_CODES = "marketplaceTechnicalCodes";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_TECHNICAL_CODES)
  private List<String> marketplaceTechnicalCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_MERCHANT_INFO_SYNCHRONIZATION_STATUS = "orderMerchantInfoSynchronizationStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_MERCHANT_INFO_SYNCHRONIZATION_STATUS)
  private String orderMerchantInfoSynchronizationStatus;

  public static final String SERIALIZED_NAME_ORDER_BUYER_NAME = "order_Buyer_Name";
  @SerializedName(SERIALIZED_NAME_ORDER_BUYER_NAME)
  private String orderBuyerName;

  public static final String SERIALIZED_NAME_ORDER_MERCHANT_ORDER_IDS = "order_MerchantOrderIds";
  @SerializedName(SERIALIZED_NAME_ORDER_MERCHANT_ORDER_IDS)
  private List<String> orderMerchantOrderIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_IDS = "storeIds";
  @SerializedName(SERIALIZED_NAME_STORE_IDS)
  private List<String> storeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public OrderListRequest() {
  }

  public OrderListRequest accountIds(List<Integer> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public OrderListRequest addAccountIdsItem(Integer accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

  /**
   * Account Id list
   * @return accountIds
   */
  @javax.annotation.Nullable
  public List<Integer> getAccountIds() {
    return accountIds;
  }

  public void setAccountIds(List<Integer> accountIds) {
    this.accountIds = accountIds;
  }


  public OrderListRequest beezUPOrderStatuses(List<String> beezUPOrderStatuses) {
    this.beezUPOrderStatuses = beezUPOrderStatuses;
    return this;
  }

  public OrderListRequest addBeezUPOrderStatusesItem(String beezUPOrderStatusesItem) {
    if (this.beezUPOrderStatuses == null) {
      this.beezUPOrderStatuses = new ArrayList<>();
    }
    this.beezUPOrderStatuses.add(beezUPOrderStatusesItem);
    return this;
  }

  /**
   * Get beezUPOrderStatuses
   * @return beezUPOrderStatuses
   */
  @javax.annotation.Nullable
  public List<String> getBeezUPOrderStatuses() {
    return beezUPOrderStatuses;
  }

  public void setBeezUPOrderStatuses(List<String> beezUPOrderStatuses) {
    this.beezUPOrderStatuses = beezUPOrderStatuses;
  }


  public OrderListRequest beginPeriodUtcDate(OffsetDateTime beginPeriodUtcDate) {
    this.beginPeriodUtcDate = beginPeriodUtcDate;
    return this;
  }

  /**
   * The begin period you want to make the search. \\ The period MUST not be greater than 62 days. The begin period MUST be lower than the end period. 
   * @return beginPeriodUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getBeginPeriodUtcDate() {
    return beginPeriodUtcDate;
  }

  public void setBeginPeriodUtcDate(OffsetDateTime beginPeriodUtcDate) {
    this.beginPeriodUtcDate = beginPeriodUtcDate;
  }


  public OrderListRequest dateSearchType(DateSearchType dateSearchType) {
    this.dateSearchType = dateSearchType;
    return this;
  }

  /**
   * Get dateSearchType
   * @return dateSearchType
   */
  @javax.annotation.Nullable
  public DateSearchType getDateSearchType() {
    return dateSearchType;
  }

  public void setDateSearchType(DateSearchType dateSearchType) {
    this.dateSearchType = dateSearchType;
  }


  public OrderListRequest endPeriodUtcDate(OffsetDateTime endPeriodUtcDate) {
    this.endPeriodUtcDate = endPeriodUtcDate;
    return this;
  }

  /**
   * The end period of you search. \\ The period MUST not be greater than 62 days. \\ The end period MUST be greater than the begin period. The end period MUST be lower to the current date. 
   * @return endPeriodUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndPeriodUtcDate() {
    return endPeriodUtcDate;
  }

  public void setEndPeriodUtcDate(OffsetDateTime endPeriodUtcDate) {
    this.endPeriodUtcDate = endPeriodUtcDate;
  }


  public OrderListRequest invoiceAvailabilityType(String invoiceAvailabilityType) {
    this.invoiceAvailabilityType = invoiceAvailabilityType;
    return this;
  }

  /**
   * Indicates on which invoice availability to filter
   * @return invoiceAvailabilityType
   */
  @javax.annotation.Nullable
  public String getInvoiceAvailabilityType() {
    return invoiceAvailabilityType;
  }

  public void setInvoiceAvailabilityType(String invoiceAvailabilityType) {
    this.invoiceAvailabilityType = invoiceAvailabilityType;
  }


  public OrderListRequest marketplaceBusinessCodes(List<String> marketplaceBusinessCodes) {
    this.marketplaceBusinessCodes = marketplaceBusinessCodes;
    return this;
  }

  public OrderListRequest addMarketplaceBusinessCodesItem(String marketplaceBusinessCodesItem) {
    if (this.marketplaceBusinessCodes == null) {
      this.marketplaceBusinessCodes = new ArrayList<>();
    }
    this.marketplaceBusinessCodes.add(marketplaceBusinessCodesItem);
    return this;
  }

  /**
   * Get marketplaceBusinessCodes
   * @return marketplaceBusinessCodes
   */
  @javax.annotation.Nullable
  public List<String> getMarketplaceBusinessCodes() {
    return marketplaceBusinessCodes;
  }

  public void setMarketplaceBusinessCodes(List<String> marketplaceBusinessCodes) {
    this.marketplaceBusinessCodes = marketplaceBusinessCodes;
  }


  public OrderListRequest marketplaceOrderIds(List<String> marketplaceOrderIds) {
    this.marketplaceOrderIds = marketplaceOrderIds;
    return this;
  }

  public OrderListRequest addMarketplaceOrderIdsItem(String marketplaceOrderIdsItem) {
    if (this.marketplaceOrderIds == null) {
      this.marketplaceOrderIds = new ArrayList<>();
    }
    this.marketplaceOrderIds.add(marketplaceOrderIdsItem);
    return this;
  }

  /**
   * Get marketplaceOrderIds
   * @return marketplaceOrderIds
   */
  @javax.annotation.Nullable
  public List<String> getMarketplaceOrderIds() {
    return marketplaceOrderIds;
  }

  public void setMarketplaceOrderIds(List<String> marketplaceOrderIds) {
    this.marketplaceOrderIds = marketplaceOrderIds;
  }


  public OrderListRequest marketplaceTechnicalCodes(List<String> marketplaceTechnicalCodes) {
    this.marketplaceTechnicalCodes = marketplaceTechnicalCodes;
    return this;
  }

  public OrderListRequest addMarketplaceTechnicalCodesItem(String marketplaceTechnicalCodesItem) {
    if (this.marketplaceTechnicalCodes == null) {
      this.marketplaceTechnicalCodes = new ArrayList<>();
    }
    this.marketplaceTechnicalCodes.add(marketplaceTechnicalCodesItem);
    return this;
  }

  /**
   * Get marketplaceTechnicalCodes
   * @return marketplaceTechnicalCodes
   */
  @javax.annotation.Nullable
  public List<String> getMarketplaceTechnicalCodes() {
    return marketplaceTechnicalCodes;
  }

  public void setMarketplaceTechnicalCodes(List<String> marketplaceTechnicalCodes) {
    this.marketplaceTechnicalCodes = marketplaceTechnicalCodes;
  }


  public OrderListRequest orderMerchantInfoSynchronizationStatus(String orderMerchantInfoSynchronizationStatus) {
    this.orderMerchantInfoSynchronizationStatus = orderMerchantInfoSynchronizationStatus;
    return this;
  }

  /**
   * Indicates on which order merchant info synchronization status to filter
   * @return orderMerchantInfoSynchronizationStatus
   */
  @javax.annotation.Nullable
  public String getOrderMerchantInfoSynchronizationStatus() {
    return orderMerchantInfoSynchronizationStatus;
  }

  public void setOrderMerchantInfoSynchronizationStatus(String orderMerchantInfoSynchronizationStatus) {
    this.orderMerchantInfoSynchronizationStatus = orderMerchantInfoSynchronizationStatus;
  }


  public OrderListRequest orderBuyerName(String orderBuyerName) {
    this.orderBuyerName = orderBuyerName;
    return this;
  }

  /**
   * Buyer full name
   * @return orderBuyerName
   */
  @javax.annotation.Nullable
  public String getOrderBuyerName() {
    return orderBuyerName;
  }

  public void setOrderBuyerName(String orderBuyerName) {
    this.orderBuyerName = orderBuyerName;
  }


  public OrderListRequest orderMerchantOrderIds(List<String> orderMerchantOrderIds) {
    this.orderMerchantOrderIds = orderMerchantOrderIds;
    return this;
  }

  public OrderListRequest addOrderMerchantOrderIdsItem(String orderMerchantOrderIdsItem) {
    if (this.orderMerchantOrderIds == null) {
      this.orderMerchantOrderIds = new ArrayList<>();
    }
    this.orderMerchantOrderIds.add(orderMerchantOrderIdsItem);
    return this;
  }

  /**
   * Merchant order id list
   * @return orderMerchantOrderIds
   */
  @javax.annotation.Nullable
  public List<String> getOrderMerchantOrderIds() {
    return orderMerchantOrderIds;
  }

  public void setOrderMerchantOrderIds(List<String> orderMerchantOrderIds) {
    this.orderMerchantOrderIds = orderMerchantOrderIds;
  }


  public OrderListRequest storeIds(List<String> storeIds) {
    this.storeIds = storeIds;
    return this;
  }

  public OrderListRequest addStoreIdsItem(String storeIdsItem) {
    if (this.storeIds == null) {
      this.storeIds = new ArrayList<>();
    }
    this.storeIds.add(storeIdsItem);
    return this;
  }

  /**
   * Store Id list
   * @return storeIds
   */
  @javax.annotation.Nullable
  public List<String> getStoreIds() {
    return storeIds;
  }

  public void setStoreIds(List<String> storeIds) {
    this.storeIds = storeIds;
  }


  public OrderListRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Indicates the page number
   * minimum: 1
   * @return pageNumber
   */
  @javax.annotation.Nonnull
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public OrderListRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Indicate the order count per page
   * minimum: 25
   * maximum: 100
   * @return pageSize
   */
  @javax.annotation.Nonnull
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderListRequest orderListRequest = (OrderListRequest) o;
    return Objects.equals(this.accountIds, orderListRequest.accountIds) &&
        Objects.equals(this.beezUPOrderStatuses, orderListRequest.beezUPOrderStatuses) &&
        Objects.equals(this.beginPeriodUtcDate, orderListRequest.beginPeriodUtcDate) &&
        Objects.equals(this.dateSearchType, orderListRequest.dateSearchType) &&
        Objects.equals(this.endPeriodUtcDate, orderListRequest.endPeriodUtcDate) &&
        Objects.equals(this.invoiceAvailabilityType, orderListRequest.invoiceAvailabilityType) &&
        Objects.equals(this.marketplaceBusinessCodes, orderListRequest.marketplaceBusinessCodes) &&
        Objects.equals(this.marketplaceOrderIds, orderListRequest.marketplaceOrderIds) &&
        Objects.equals(this.marketplaceTechnicalCodes, orderListRequest.marketplaceTechnicalCodes) &&
        Objects.equals(this.orderMerchantInfoSynchronizationStatus, orderListRequest.orderMerchantInfoSynchronizationStatus) &&
        Objects.equals(this.orderBuyerName, orderListRequest.orderBuyerName) &&
        Objects.equals(this.orderMerchantOrderIds, orderListRequest.orderMerchantOrderIds) &&
        Objects.equals(this.storeIds, orderListRequest.storeIds) &&
        Objects.equals(this.pageNumber, orderListRequest.pageNumber) &&
        Objects.equals(this.pageSize, orderListRequest.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIds, beezUPOrderStatuses, beginPeriodUtcDate, dateSearchType, endPeriodUtcDate, invoiceAvailabilityType, marketplaceBusinessCodes, marketplaceOrderIds, marketplaceTechnicalCodes, orderMerchantInfoSynchronizationStatus, orderBuyerName, orderMerchantOrderIds, storeIds, pageNumber, pageSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderListRequest {\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    beezUPOrderStatuses: ").append(toIndentedString(beezUPOrderStatuses)).append("\n");
    sb.append("    beginPeriodUtcDate: ").append(toIndentedString(beginPeriodUtcDate)).append("\n");
    sb.append("    dateSearchType: ").append(toIndentedString(dateSearchType)).append("\n");
    sb.append("    endPeriodUtcDate: ").append(toIndentedString(endPeriodUtcDate)).append("\n");
    sb.append("    invoiceAvailabilityType: ").append(toIndentedString(invoiceAvailabilityType)).append("\n");
    sb.append("    marketplaceBusinessCodes: ").append(toIndentedString(marketplaceBusinessCodes)).append("\n");
    sb.append("    marketplaceOrderIds: ").append(toIndentedString(marketplaceOrderIds)).append("\n");
    sb.append("    marketplaceTechnicalCodes: ").append(toIndentedString(marketplaceTechnicalCodes)).append("\n");
    sb.append("    orderMerchantInfoSynchronizationStatus: ").append(toIndentedString(orderMerchantInfoSynchronizationStatus)).append("\n");
    sb.append("    orderBuyerName: ").append(toIndentedString(orderBuyerName)).append("\n");
    sb.append("    orderMerchantOrderIds: ").append(toIndentedString(orderMerchantOrderIds)).append("\n");
    sb.append("    storeIds: ").append(toIndentedString(storeIds)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountIds");
    openapiFields.add("beezUPOrderStatuses");
    openapiFields.add("beginPeriodUtcDate");
    openapiFields.add("dateSearchType");
    openapiFields.add("endPeriodUtcDate");
    openapiFields.add("invoiceAvailabilityType");
    openapiFields.add("marketplaceBusinessCodes");
    openapiFields.add("marketplaceOrderIds");
    openapiFields.add("marketplaceTechnicalCodes");
    openapiFields.add("orderMerchantInfoSynchronizationStatus");
    openapiFields.add("order_Buyer_Name");
    openapiFields.add("order_MerchantOrderIds");
    openapiFields.add("storeIds");
    openapiFields.add("pageNumber");
    openapiFields.add("pageSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beginPeriodUtcDate");
    openapiRequiredFields.add("endPeriodUtcDate");
    openapiRequiredFields.add("pageNumber");
    openapiRequiredFields.add("pageSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderListRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderListRequest is not found in the empty JSON string", OrderListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderListRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountIds") != null && !jsonObj.get("accountIds").isJsonNull() && !jsonObj.get("accountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("beezUPOrderStatuses") != null && !jsonObj.get("beezUPOrderStatuses").isJsonNull() && !jsonObj.get("beezUPOrderStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `beezUPOrderStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("beezUPOrderStatuses").toString()));
      }
      // validate the optional field `dateSearchType`
      if (jsonObj.get("dateSearchType") != null && !jsonObj.get("dateSearchType").isJsonNull()) {
        DateSearchType.validateJsonElement(jsonObj.get("dateSearchType"));
      }
      if ((jsonObj.get("invoiceAvailabilityType") != null && !jsonObj.get("invoiceAvailabilityType").isJsonNull()) && !jsonObj.get("invoiceAvailabilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceAvailabilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceAvailabilityType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketplaceBusinessCodes") != null && !jsonObj.get("marketplaceBusinessCodes").isJsonNull() && !jsonObj.get("marketplaceBusinessCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceBusinessCodes` to be an array in the JSON string but got `%s`", jsonObj.get("marketplaceBusinessCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketplaceOrderIds") != null && !jsonObj.get("marketplaceOrderIds").isJsonNull() && !jsonObj.get("marketplaceOrderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceOrderIds` to be an array in the JSON string but got `%s`", jsonObj.get("marketplaceOrderIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketplaceTechnicalCodes") != null && !jsonObj.get("marketplaceTechnicalCodes").isJsonNull() && !jsonObj.get("marketplaceTechnicalCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceTechnicalCodes` to be an array in the JSON string but got `%s`", jsonObj.get("marketplaceTechnicalCodes").toString()));
      }
      if ((jsonObj.get("orderMerchantInfoSynchronizationStatus") != null && !jsonObj.get("orderMerchantInfoSynchronizationStatus").isJsonNull()) && !jsonObj.get("orderMerchantInfoSynchronizationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderMerchantInfoSynchronizationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderMerchantInfoSynchronizationStatus").toString()));
      }
      if ((jsonObj.get("order_Buyer_Name") != null && !jsonObj.get("order_Buyer_Name").isJsonNull()) && !jsonObj.get("order_Buyer_Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Buyer_Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Buyer_Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("order_MerchantOrderIds") != null && !jsonObj.get("order_MerchantOrderIds").isJsonNull() && !jsonObj.get("order_MerchantOrderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_MerchantOrderIds` to be an array in the JSON string but got `%s`", jsonObj.get("order_MerchantOrderIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeIds") != null && !jsonObj.get("storeIds").isJsonNull() && !jsonObj.get("storeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeIds` to be an array in the JSON string but got `%s`", jsonObj.get("storeIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderListRequest>() {
           @Override
           public void write(JsonWriter out, OrderListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderListRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderListRequest
   * @throws IOException if the JSON string is invalid with respect to OrderListRequest
   */
  public static OrderListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderListRequest.class);
  }

  /**
   * Convert an instance of OrderListRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

