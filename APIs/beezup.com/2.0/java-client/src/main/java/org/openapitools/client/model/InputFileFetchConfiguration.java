/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompressionFormatStrategy;
import org.openapitools.client.model.Credential;
import org.openapitools.client.model.DownloadCatalogStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describe the way to download the file
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputFileFetchConfiguration {
  public static final String SERIALIZED_NAME_COMPRESSED_RELATIVE_PATH = "compressedRelativePath";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_RELATIVE_PATH)
  private String compressedRelativePath;

  public static final String SERIALIZED_NAME_COMPRESSION_FORMAT_STRATEGY = "compressionFormatStrategy";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_FORMAT_STRATEGY)
  private CompressionFormatStrategy compressionFormatStrategy;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private Credential credential;

  public static final String SERIALIZED_NAME_DOWNLOAD_CATALOG_STRATEGY = "downloadCatalogStrategy";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_CATALOG_STRATEGY)
  private DownloadCatalogStrategy downloadCatalogStrategy;

  public static final String SERIALIZED_NAME_DOWNLOAD_TIMEOUT = "downloadTimeout";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_TIMEOUT)
  private Integer downloadTimeout;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public InputFileFetchConfiguration() {
  }

  public InputFileFetchConfiguration compressedRelativePath(String compressedRelativePath) {
    this.compressedRelativePath = compressedRelativePath;
    return this;
  }

  /**
   * Indicate the relative path in the compressed file
   * @return compressedRelativePath
   */
  @javax.annotation.Nullable
  public String getCompressedRelativePath() {
    return compressedRelativePath;
  }

  public void setCompressedRelativePath(String compressedRelativePath) {
    this.compressedRelativePath = compressedRelativePath;
  }


  public InputFileFetchConfiguration compressionFormatStrategy(CompressionFormatStrategy compressionFormatStrategy) {
    this.compressionFormatStrategy = compressionFormatStrategy;
    return this;
  }

  /**
   * Get compressionFormatStrategy
   * @return compressionFormatStrategy
   */
  @javax.annotation.Nullable
  public CompressionFormatStrategy getCompressionFormatStrategy() {
    return compressionFormatStrategy;
  }

  public void setCompressionFormatStrategy(CompressionFormatStrategy compressionFormatStrategy) {
    this.compressionFormatStrategy = compressionFormatStrategy;
  }


  public InputFileFetchConfiguration credential(Credential credential) {
    this.credential = credential;
    return this;
  }

  /**
   * Get credential
   * @return credential
   */
  @javax.annotation.Nullable
  public Credential getCredential() {
    return credential;
  }

  public void setCredential(Credential credential) {
    this.credential = credential;
  }


  public InputFileFetchConfiguration downloadCatalogStrategy(DownloadCatalogStrategy downloadCatalogStrategy) {
    this.downloadCatalogStrategy = downloadCatalogStrategy;
    return this;
  }

  /**
   * Get downloadCatalogStrategy
   * @return downloadCatalogStrategy
   */
  @javax.annotation.Nonnull
  public DownloadCatalogStrategy getDownloadCatalogStrategy() {
    return downloadCatalogStrategy;
  }

  public void setDownloadCatalogStrategy(DownloadCatalogStrategy downloadCatalogStrategy) {
    this.downloadCatalogStrategy = downloadCatalogStrategy;
  }


  public InputFileFetchConfiguration downloadTimeout(Integer downloadTimeout) {
    this.downloadTimeout = downloadTimeout;
    return this;
  }

  /**
   * Indicate the download time out in second
   * @return downloadTimeout
   */
  @javax.annotation.Nullable
  public Integer getDownloadTimeout() {
    return downloadTimeout;
  }

  public void setDownloadTimeout(Integer downloadTimeout) {
    this.downloadTimeout = downloadTimeout;
  }


  public InputFileFetchConfiguration uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputFileFetchConfiguration inputFileFetchConfiguration = (InputFileFetchConfiguration) o;
    return Objects.equals(this.compressedRelativePath, inputFileFetchConfiguration.compressedRelativePath) &&
        Objects.equals(this.compressionFormatStrategy, inputFileFetchConfiguration.compressionFormatStrategy) &&
        Objects.equals(this.credential, inputFileFetchConfiguration.credential) &&
        Objects.equals(this.downloadCatalogStrategy, inputFileFetchConfiguration.downloadCatalogStrategy) &&
        Objects.equals(this.downloadTimeout, inputFileFetchConfiguration.downloadTimeout) &&
        Objects.equals(this.uri, inputFileFetchConfiguration.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compressedRelativePath, compressionFormatStrategy, credential, downloadCatalogStrategy, downloadTimeout, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputFileFetchConfiguration {\n");
    sb.append("    compressedRelativePath: ").append(toIndentedString(compressedRelativePath)).append("\n");
    sb.append("    compressionFormatStrategy: ").append(toIndentedString(compressionFormatStrategy)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    downloadCatalogStrategy: ").append(toIndentedString(downloadCatalogStrategy)).append("\n");
    sb.append("    downloadTimeout: ").append(toIndentedString(downloadTimeout)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compressedRelativePath");
    openapiFields.add("compressionFormatStrategy");
    openapiFields.add("credential");
    openapiFields.add("downloadCatalogStrategy");
    openapiFields.add("downloadTimeout");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("downloadCatalogStrategy");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputFileFetchConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputFileFetchConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputFileFetchConfiguration is not found in the empty JSON string", InputFileFetchConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputFileFetchConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputFileFetchConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputFileFetchConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compressedRelativePath") != null && !jsonObj.get("compressedRelativePath").isJsonNull()) && !jsonObj.get("compressedRelativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compressedRelativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compressedRelativePath").toString()));
      }
      // validate the optional field `compressionFormatStrategy`
      if (jsonObj.get("compressionFormatStrategy") != null && !jsonObj.get("compressionFormatStrategy").isJsonNull()) {
        CompressionFormatStrategy.validateJsonElement(jsonObj.get("compressionFormatStrategy"));
      }
      // validate the optional field `credential`
      if (jsonObj.get("credential") != null && !jsonObj.get("credential").isJsonNull()) {
        Credential.validateJsonElement(jsonObj.get("credential"));
      }
      // validate the required field `downloadCatalogStrategy`
      DownloadCatalogStrategy.validateJsonElement(jsonObj.get("downloadCatalogStrategy"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputFileFetchConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputFileFetchConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputFileFetchConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputFileFetchConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<InputFileFetchConfiguration>() {
           @Override
           public void write(JsonWriter out, InputFileFetchConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputFileFetchConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputFileFetchConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputFileFetchConfiguration
   * @throws IOException if the JSON string is invalid with respect to InputFileFetchConfiguration
   */
  public static InputFileFetchConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputFileFetchConfiguration.class);
  }

  /**
   * Convert an instance of InputFileFetchConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

