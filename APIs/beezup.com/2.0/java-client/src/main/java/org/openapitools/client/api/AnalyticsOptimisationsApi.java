/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.CopyOptimisationRequest;
import org.openapitools.client.model.CopyOptimisationResponse;
import org.openapitools.client.model.OptimiseAllRequest;
import org.openapitools.client.model.OptimiseRequest;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsOptimisationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsOptimisationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsOptimisationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copyOptimisation
     * @param storeId Your store identifier (required)
     * @param copyOptimisationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products optimisatisation copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyOptimisationCall(String storeId, CopyOptimisationRequest copyOptimisationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyOptimisationRequest;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/copy"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyOptimisationValidateBeforeCall(String storeId, CopyOptimisationRequest copyOptimisationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling copyOptimisation(Async)");
        }

        // verify the required parameter 'copyOptimisationRequest' is set
        if (copyOptimisationRequest == null) {
            throw new ApiException("Missing the required parameter 'copyOptimisationRequest' when calling copyOptimisation(Async)");
        }

        return copyOptimisationCall(storeId, copyOptimisationRequest, _callback);

    }

    /**
     * Copy product optimisations between 2 channels
     * 
     * @param storeId Your store identifier (required)
     * @param copyOptimisationRequest  (required)
     * @return CopyOptimisationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products optimisatisation copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CopyOptimisationResponse copyOptimisation(String storeId, CopyOptimisationRequest copyOptimisationRequest) throws ApiException {
        ApiResponse<CopyOptimisationResponse> localVarResp = copyOptimisationWithHttpInfo(storeId, copyOptimisationRequest);
        return localVarResp.getData();
    }

    /**
     * Copy product optimisations between 2 channels
     * 
     * @param storeId Your store identifier (required)
     * @param copyOptimisationRequest  (required)
     * @return ApiResponse&lt;CopyOptimisationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products optimisatisation copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyOptimisationResponse> copyOptimisationWithHttpInfo(String storeId, CopyOptimisationRequest copyOptimisationRequest) throws ApiException {
        okhttp3.Call localVarCall = copyOptimisationValidateBeforeCall(storeId, copyOptimisationRequest, null);
        Type localVarReturnType = new TypeToken<CopyOptimisationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy product optimisations between 2 channels (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param copyOptimisationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Products optimisatisation copied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyOptimisationAsync(String storeId, CopyOptimisationRequest copyOptimisationRequest, final ApiCallback<CopyOptimisationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyOptimisationValidateBeforeCall(storeId, copyOptimisationRequest, _callback);
        Type localVarReturnType = new TypeToken<CopyOptimisationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimise
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseCall(String storeId, String actionName, OptimiseRequest optimiseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optimiseRequest;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/{actionName}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimiseValidateBeforeCall(String storeId, String actionName, OptimiseRequest optimiseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimise(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimise(Async)");
        }

        // verify the required parameter 'optimiseRequest' is set
        if (optimiseRequest == null) {
            throw new ApiException("Missing the required parameter 'optimiseRequest' when calling optimise(Async)");
        }

        return optimiseCall(storeId, actionName, optimiseRequest, _callback);

    }

    /**
     * Optimise products by page
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void optimise(String storeId, String actionName, OptimiseRequest optimiseRequest) throws ApiException {
        optimiseWithHttpInfo(storeId, actionName, optimiseRequest);
    }

    /**
     * Optimise products by page
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimiseWithHttpInfo(String storeId, String actionName, OptimiseRequest optimiseRequest) throws ApiException {
        okhttp3.Call localVarCall = optimiseValidateBeforeCall(storeId, actionName, optimiseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Optimise products by page (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseAsync(String storeId, String actionName, OptimiseRequest optimiseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimiseValidateBeforeCall(storeId, actionName, optimiseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimiseAll
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseAllCall(String storeId, String actionName, OptimiseAllRequest optimiseAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optimiseAllRequest;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/all/{actionName}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimiseAllValidateBeforeCall(String storeId, String actionName, OptimiseAllRequest optimiseAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseAll(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseAll(Async)");
        }

        // verify the required parameter 'optimiseAllRequest' is set
        if (optimiseAllRequest == null) {
            throw new ApiException("Missing the required parameter 'optimiseAllRequest' when calling optimiseAll(Async)");
        }

        return optimiseAllCall(storeId, actionName, optimiseAllRequest, _callback);

    }

    /**
     * Optimise all products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseAllRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void optimiseAll(String storeId, String actionName, OptimiseAllRequest optimiseAllRequest) throws ApiException {
        optimiseAllWithHttpInfo(storeId, actionName, optimiseAllRequest);
    }

    /**
     * Optimise all products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseAllRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimiseAllWithHttpInfo(String storeId, String actionName, OptimiseAllRequest optimiseAllRequest) throws ApiException {
        okhttp3.Call localVarCall = optimiseAllValidateBeforeCall(storeId, actionName, optimiseAllRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Optimise all products (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param optimiseAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseAllAsync(String storeId, String actionName, OptimiseAllRequest optimiseAllRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimiseAllValidateBeforeCall(storeId, actionName, optimiseAllRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimiseByCategory
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByCategoryCall(String storeId, String catalogCategoryId, String actionName, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "catalogCategoryId" + "}", localVarApiClient.escapeString(catalogCategoryId.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimiseByCategoryValidateBeforeCall(String storeId, String catalogCategoryId, String actionName, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByCategory(Async)");
        }

        // verify the required parameter 'catalogCategoryId' is set
        if (catalogCategoryId == null) {
            throw new ApiException("Missing the required parameter 'catalogCategoryId' when calling optimiseByCategory(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByCategory(Async)");
        }

        return optimiseByCategoryCall(storeId, catalogCategoryId, actionName, requestBody, _callback);

    }

    /**
     * Optimise products by category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void optimiseByCategory(String storeId, String catalogCategoryId, String actionName, Set<String> requestBody) throws ApiException {
        optimiseByCategoryWithHttpInfo(storeId, catalogCategoryId, actionName, requestBody);
    }

    /**
     * Optimise products by category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimiseByCategoryWithHttpInfo(String storeId, String catalogCategoryId, String actionName, Set<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Optimise products by category (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByCategoryAsync(String storeId, String catalogCategoryId, String actionName, Set<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimiseByChannel
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByChannelCall(String storeId, String channelId, String actionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimiseByChannelValidateBeforeCall(String storeId, String channelId, String actionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling optimiseByChannel(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByChannel(Async)");
        }

        return optimiseByChannelCall(storeId, channelId, actionName, _callback);

    }

    /**
     * Optimise products by channel
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void optimiseByChannel(String storeId, String channelId, String actionName) throws ApiException {
        optimiseByChannelWithHttpInfo(storeId, channelId, actionName);
    }

    /**
     * Optimise products by channel
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimiseByChannelWithHttpInfo(String storeId, String channelId, String actionName) throws ApiException {
        okhttp3.Call localVarCall = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Optimise products by channel (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Products optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByChannelAsync(String storeId, String channelId, String actionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimiseByProduct
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product(s) optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByProductCall(String storeId, String productId, String actionName, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimiseByProductValidateBeforeCall(String storeId, String productId, String actionName, Set<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByProduct(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling optimiseByProduct(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByProduct(Async)");
        }

        return optimiseByProductCall(storeId, productId, actionName, requestBody, _callback);

    }

    /**
     * Optimise product
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product(s) optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void optimiseByProduct(String storeId, String productId, String actionName, Set<String> requestBody) throws ApiException {
        optimiseByProductWithHttpInfo(storeId, productId, actionName, requestBody);
    }

    /**
     * Optimise product
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product(s) optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimiseByProductWithHttpInfo(String storeId, String productId, String actionName, Set<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = optimiseByProductValidateBeforeCall(storeId, productId, actionName, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Optimise product (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body. 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param requestBody The channel identifier list concerned by this optimisation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product(s) optimisatized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Store or resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimiseByProductAsync(String storeId, String productId, String actionName, Set<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimiseByProductValidateBeforeCall(storeId, productId, actionName, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
