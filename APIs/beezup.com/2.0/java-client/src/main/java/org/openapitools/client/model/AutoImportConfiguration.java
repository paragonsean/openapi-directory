/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DuplicateProductValueConfiguration;
import org.openapitools.client.model.InputConfiguration;
import org.openapitools.client.model.SchedulingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoImportConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoImportConfiguration {
  public static final String SERIALIZED_NAME_DUPLICATE_PRODUCT_CONFIGURATION = "duplicateProductConfiguration";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_PRODUCT_CONFIGURATION)
  private DuplicateProductValueConfiguration duplicateProductConfiguration;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private InputConfiguration input;

  public static final String SERIALIZED_NAME_INPUT_CONFIGURED_BY_USER_ID = "inputConfiguredByUserId";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIGURED_BY_USER_ID)
  private String inputConfiguredByUserId;

  public static final String SERIALIZED_NAME_PAUSE_STATUS_CHANGED_BY_USER_ID = "pauseStatusChangedByUserId";
  @SerializedName(SERIALIZED_NAME_PAUSE_STATUS_CHANGED_BY_USER_ID)
  private String pauseStatusChangedByUserId;

  public static final String SERIALIZED_NAME_PAUSE_STATUS_CHANGED_UTC_DATE = "pauseStatusChangedUtcDate";
  @SerializedName(SERIALIZED_NAME_PAUSE_STATUS_CHANGED_UTC_DATE)
  private OffsetDateTime pauseStatusChangedUtcDate;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused = false;

  public static final String SERIALIZED_NAME_SCHEDULED_BY_USER_ID = "scheduledByUserId";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_BY_USER_ID)
  private String scheduledByUserId;

  public static final String SERIALIZED_NAME_SCHEDULING_LOCAL_TIME_ZONE_NAME = "schedulingLocalTimeZoneName";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_LOCAL_TIME_ZONE_NAME)
  private String schedulingLocalTimeZoneName = "Romance Standard Time";

  public static final String SERIALIZED_NAME_SCHEDULING_TYPE = "schedulingType";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_TYPE)
  private SchedulingType schedulingType = SchedulingType.INTERVAL;

  public static final String SERIALIZED_NAME_SCHEDULING_VALUE = "schedulingValue";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_VALUE)
  private List<String> schedulingValue = new ArrayList<>();

  public AutoImportConfiguration() {
  }

  public AutoImportConfiguration duplicateProductConfiguration(DuplicateProductValueConfiguration duplicateProductConfiguration) {
    this.duplicateProductConfiguration = duplicateProductConfiguration;
    return this;
  }

  /**
   * Get duplicateProductConfiguration
   * @return duplicateProductConfiguration
   */
  @javax.annotation.Nonnull
  public DuplicateProductValueConfiguration getDuplicateProductConfiguration() {
    return duplicateProductConfiguration;
  }

  public void setDuplicateProductConfiguration(DuplicateProductValueConfiguration duplicateProductConfiguration) {
    this.duplicateProductConfiguration = duplicateProductConfiguration;
  }


  public AutoImportConfiguration input(InputConfiguration input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nonnull
  public InputConfiguration getInput() {
    return input;
  }

  public void setInput(InputConfiguration input) {
    this.input = input;
  }


  public AutoImportConfiguration inputConfiguredByUserId(String inputConfiguredByUserId) {
    this.inputConfiguredByUserId = inputConfiguredByUserId;
    return this;
  }

  /**
   * The user identifier
   * @return inputConfiguredByUserId
   */
  @javax.annotation.Nonnull
  public String getInputConfiguredByUserId() {
    return inputConfiguredByUserId;
  }

  public void setInputConfiguredByUserId(String inputConfiguredByUserId) {
    this.inputConfiguredByUserId = inputConfiguredByUserId;
  }


  public AutoImportConfiguration pauseStatusChangedByUserId(String pauseStatusChangedByUserId) {
    this.pauseStatusChangedByUserId = pauseStatusChangedByUserId;
    return this;
  }

  /**
   * The user identifier
   * @return pauseStatusChangedByUserId
   */
  @javax.annotation.Nullable
  public String getPauseStatusChangedByUserId() {
    return pauseStatusChangedByUserId;
  }

  public void setPauseStatusChangedByUserId(String pauseStatusChangedByUserId) {
    this.pauseStatusChangedByUserId = pauseStatusChangedByUserId;
  }


  public AutoImportConfiguration pauseStatusChangedUtcDate(OffsetDateTime pauseStatusChangedUtcDate) {
    this.pauseStatusChangedUtcDate = pauseStatusChangedUtcDate;
    return this;
  }

  /**
   * Indicate when the pause status has changed in UTC date.
   * @return pauseStatusChangedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPauseStatusChangedUtcDate() {
    return pauseStatusChangedUtcDate;
  }

  public void setPauseStatusChangedUtcDate(OffsetDateTime pauseStatusChangedUtcDate) {
    this.pauseStatusChangedUtcDate = pauseStatusChangedUtcDate;
  }


  public AutoImportConfiguration paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

  /**
   * Indicate if the auto import is in pause or not.
   * @return paused
   */
  @javax.annotation.Nonnull
  public Boolean getPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public AutoImportConfiguration scheduledByUserId(String scheduledByUserId) {
    this.scheduledByUserId = scheduledByUserId;
    return this;
  }

  /**
   * The user identifier
   * @return scheduledByUserId
   */
  @javax.annotation.Nullable
  public String getScheduledByUserId() {
    return scheduledByUserId;
  }

  public void setScheduledByUserId(String scheduledByUserId) {
    this.scheduledByUserId = scheduledByUserId;
  }


  public AutoImportConfiguration schedulingLocalTimeZoneName(String schedulingLocalTimeZoneName) {
    this.schedulingLocalTimeZoneName = schedulingLocalTimeZoneName;
    return this;
  }

  /**
   * Indicate the time zone name of the scheduling. If the scheduling type is \&quot;Schedule\&quot;
   * @return schedulingLocalTimeZoneName
   */
  @javax.annotation.Nullable
  public String getSchedulingLocalTimeZoneName() {
    return schedulingLocalTimeZoneName;
  }

  public void setSchedulingLocalTimeZoneName(String schedulingLocalTimeZoneName) {
    this.schedulingLocalTimeZoneName = schedulingLocalTimeZoneName;
  }


  public AutoImportConfiguration schedulingType(SchedulingType schedulingType) {
    this.schedulingType = schedulingType;
    return this;
  }

  /**
   * Get schedulingType
   * @return schedulingType
   */
  @javax.annotation.Nonnull
  public SchedulingType getSchedulingType() {
    return schedulingType;
  }

  public void setSchedulingType(SchedulingType schedulingType) {
    this.schedulingType = schedulingType;
  }


  public AutoImportConfiguration schedulingValue(List<String> schedulingValue) {
    this.schedulingValue = schedulingValue;
    return this;
  }

  public AutoImportConfiguration addSchedulingValueItem(String schedulingValueItem) {
    if (this.schedulingValue == null) {
      this.schedulingValue = new ArrayList<>();
    }
    this.schedulingValue.add(schedulingValueItem);
    return this;
  }

  /**
   * Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.
   * @return schedulingValue
   */
  @javax.annotation.Nonnull
  public List<String> getSchedulingValue() {
    return schedulingValue;
  }

  public void setSchedulingValue(List<String> schedulingValue) {
    this.schedulingValue = schedulingValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoImportConfiguration autoImportConfiguration = (AutoImportConfiguration) o;
    return Objects.equals(this.duplicateProductConfiguration, autoImportConfiguration.duplicateProductConfiguration) &&
        Objects.equals(this.input, autoImportConfiguration.input) &&
        Objects.equals(this.inputConfiguredByUserId, autoImportConfiguration.inputConfiguredByUserId) &&
        Objects.equals(this.pauseStatusChangedByUserId, autoImportConfiguration.pauseStatusChangedByUserId) &&
        Objects.equals(this.pauseStatusChangedUtcDate, autoImportConfiguration.pauseStatusChangedUtcDate) &&
        Objects.equals(this.paused, autoImportConfiguration.paused) &&
        Objects.equals(this.scheduledByUserId, autoImportConfiguration.scheduledByUserId) &&
        Objects.equals(this.schedulingLocalTimeZoneName, autoImportConfiguration.schedulingLocalTimeZoneName) &&
        Objects.equals(this.schedulingType, autoImportConfiguration.schedulingType) &&
        Objects.equals(this.schedulingValue, autoImportConfiguration.schedulingValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duplicateProductConfiguration, input, inputConfiguredByUserId, pauseStatusChangedByUserId, pauseStatusChangedUtcDate, paused, scheduledByUserId, schedulingLocalTimeZoneName, schedulingType, schedulingValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoImportConfiguration {\n");
    sb.append("    duplicateProductConfiguration: ").append(toIndentedString(duplicateProductConfiguration)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    inputConfiguredByUserId: ").append(toIndentedString(inputConfiguredByUserId)).append("\n");
    sb.append("    pauseStatusChangedByUserId: ").append(toIndentedString(pauseStatusChangedByUserId)).append("\n");
    sb.append("    pauseStatusChangedUtcDate: ").append(toIndentedString(pauseStatusChangedUtcDate)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    scheduledByUserId: ").append(toIndentedString(scheduledByUserId)).append("\n");
    sb.append("    schedulingLocalTimeZoneName: ").append(toIndentedString(schedulingLocalTimeZoneName)).append("\n");
    sb.append("    schedulingType: ").append(toIndentedString(schedulingType)).append("\n");
    sb.append("    schedulingValue: ").append(toIndentedString(schedulingValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duplicateProductConfiguration");
    openapiFields.add("input");
    openapiFields.add("inputConfiguredByUserId");
    openapiFields.add("pauseStatusChangedByUserId");
    openapiFields.add("pauseStatusChangedUtcDate");
    openapiFields.add("paused");
    openapiFields.add("scheduledByUserId");
    openapiFields.add("schedulingLocalTimeZoneName");
    openapiFields.add("schedulingType");
    openapiFields.add("schedulingValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duplicateProductConfiguration");
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("inputConfiguredByUserId");
    openapiRequiredFields.add("paused");
    openapiRequiredFields.add("schedulingType");
    openapiRequiredFields.add("schedulingValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoImportConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoImportConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoImportConfiguration is not found in the empty JSON string", AutoImportConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoImportConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoImportConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoImportConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `duplicateProductConfiguration`
      DuplicateProductValueConfiguration.validateJsonElement(jsonObj.get("duplicateProductConfiguration"));
      // validate the required field `input`
      InputConfiguration.validateJsonElement(jsonObj.get("input"));
      if (!jsonObj.get("inputConfiguredByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputConfiguredByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputConfiguredByUserId").toString()));
      }
      if ((jsonObj.get("pauseStatusChangedByUserId") != null && !jsonObj.get("pauseStatusChangedByUserId").isJsonNull()) && !jsonObj.get("pauseStatusChangedByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauseStatusChangedByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pauseStatusChangedByUserId").toString()));
      }
      if ((jsonObj.get("scheduledByUserId") != null && !jsonObj.get("scheduledByUserId").isJsonNull()) && !jsonObj.get("scheduledByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledByUserId").toString()));
      }
      if ((jsonObj.get("schedulingLocalTimeZoneName") != null && !jsonObj.get("schedulingLocalTimeZoneName").isJsonNull()) && !jsonObj.get("schedulingLocalTimeZoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulingLocalTimeZoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedulingLocalTimeZoneName").toString()));
      }
      // validate the required field `schedulingType`
      SchedulingType.validateJsonElement(jsonObj.get("schedulingType"));
      // ensure the required json array is present
      if (jsonObj.get("schedulingValue") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schedulingValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulingValue` to be an array in the JSON string but got `%s`", jsonObj.get("schedulingValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoImportConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoImportConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoImportConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoImportConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoImportConfiguration>() {
           @Override
           public void write(JsonWriter out, AutoImportConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoImportConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoImportConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoImportConfiguration
   * @throws IOException if the JSON string is invalid with respect to AutoImportConfiguration
   */
  public static AutoImportConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoImportConfiguration.class);
  }

  /**
   * Convert an instance of AutoImportConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

