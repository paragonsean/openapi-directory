/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountInfo;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ChangeEmailRequest;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.CompanyInfo;
import org.openapitools.client.model.CreditCardInfo;
import org.openapitools.client.model.CreditCardInfoResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PersonalInfo;
import org.openapitools.client.model.ProfilePictureInfo;
import org.openapitools.client.model.ProfilePictureInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateUserAccount
     * @param body The email activation id received by email. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account activated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid email activation id </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User account already activated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateUserAccountCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/activate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateUserAccountValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling activateUserAccount(Async)");
        }

        return activateUserAccountCall(body, _callback);

    }

    /**
     * Activate the user account
     * 
     * @param body The email activation id received by email. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account activated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid email activation id </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User account already activated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void activateUserAccount(String body) throws ApiException {
        activateUserAccountWithHttpInfo(body);
    }

    /**
     * Activate the user account
     * 
     * @param body The email activation id received by email. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account activated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid email activation id </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User account already activated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateUserAccountWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = activateUserAccountValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate the user account (asynchronously)
     * 
     * @param body The email activation id received by email. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account activated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid email activation id </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User account already activated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateUserAccountAsync(String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateUserAccountValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeEmail
     * @param changeEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> New email does not respect the emails&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeEmailCall(ChangeEmailRequest changeEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeEmailRequest;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/changeEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeEmailValidateBeforeCall(ChangeEmailRequest changeEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeEmailRequest' is set
        if (changeEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'changeEmailRequest' when calling changeEmail(Async)");
        }

        return changeEmailCall(changeEmailRequest, _callback);

    }

    /**
     * Change user email
     * 
     * @param changeEmailRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> New email does not respect the emails&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void changeEmail(ChangeEmailRequest changeEmailRequest) throws ApiException {
        changeEmailWithHttpInfo(changeEmailRequest);
    }

    /**
     * Change user email
     * 
     * @param changeEmailRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> New email does not respect the emails&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeEmailWithHttpInfo(ChangeEmailRequest changeEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = changeEmailValidateBeforeCall(changeEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change user email (asynchronously)
     * 
     * @param changeEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> New email does not respect the emails&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeEmailAsync(ChangeEmailRequest changeEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeEmailValidateBeforeCall(changeEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePassword
     * @param changePasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Old password is invalid or the new password does not respect the password&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/changePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changePassword(Async)");
        }

        return changePasswordCall(changePasswordRequest, _callback);

    }

    /**
     * Change user password
     * 
     * @param changePasswordRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Old password is invalid or the new password does not respect the password&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(ChangePasswordRequest changePasswordRequest) throws ApiException {
        changePasswordWithHttpInfo(changePasswordRequest);
    }

    /**
     * Change user password
     * 
     * @param changePasswordRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Old password is invalid or the new password does not respect the password&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change user password (asynchronously)
     * 
     * @param changePasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Old password is invalid or the new password does not respect the password&#39;s constraints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(ChangePasswordRequest changePasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditCardInfo
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User credit card information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Credit Card not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> We are unable to get your credit card info. This is a temporary state. Please retry later </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditCardInfoCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/creditCardInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditCardInfoValidateBeforeCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return getCreditCardInfoCall(ifNoneMatch, _callback);

    }

    /**
     * Get credit card information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return CreditCardInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User credit card information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Credit Card not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> We are unable to get your credit card info. This is a temporary state. Please retry later </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public CreditCardInfoResponse getCreditCardInfo(String ifNoneMatch) throws ApiException {
        ApiResponse<CreditCardInfoResponse> localVarResp = getCreditCardInfoWithHttpInfo(ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get credit card information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;CreditCardInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User credit card information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Credit Card not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> We are unable to get your credit card info. This is a temporary state. Please retry later </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditCardInfoResponse> getCreditCardInfoWithHttpInfo(String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getCreditCardInfoValidateBeforeCall(ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<CreditCardInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get credit card information (asynchronously)
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User credit card information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Credit Card not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> We are unable to get your credit card info. This is a temporary state. Please retry later </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditCardInfoAsync(String ifNoneMatch, final ApiCallback<CreditCardInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditCardInfoValidateBeforeCall(ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<CreditCardInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfilePictureInfo
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilePictureInfoCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/profilePictureInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfilePictureInfoValidateBeforeCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return getProfilePictureInfoCall(ifNoneMatch, _callback);

    }

    /**
     * Get profile picture information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ProfilePictureInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ProfilePictureInfoResponse getProfilePictureInfo(String ifNoneMatch) throws ApiException {
        ApiResponse<ProfilePictureInfoResponse> localVarResp = getProfilePictureInfoWithHttpInfo(ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get profile picture information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;ProfilePictureInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfilePictureInfoResponse> getProfilePictureInfoWithHttpInfo(String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getProfilePictureInfoValidateBeforeCall(ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<ProfilePictureInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get profile picture information (asynchronously)
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilePictureInfoAsync(String ifNoneMatch, final ApiCallback<ProfilePictureInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfilePictureInfoValidateBeforeCall(ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<ProfilePictureInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAccountInfo
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User account information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountInfoCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAccountInfoValidateBeforeCall(String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return getUserAccountInfoCall(ifNoneMatch, _callback);

    }

    /**
     * Get user account information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return AccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User account information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfo getUserAccountInfo(String ifNoneMatch) throws ApiException {
        ApiResponse<AccountInfo> localVarResp = getUserAccountInfoWithHttpInfo(ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get user account information
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;AccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User account information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfo> getUserAccountInfoWithHttpInfo(String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getUserAccountInfoValidateBeforeCall(ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user account information (asynchronously)
     * 
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User account information </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountInfoAsync(String ifNoneMatch, final ApiCallback<AccountInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAccountInfoValidateBeforeCall(ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendEmailActivation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email activation resent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email activation not sent because of email problem. Ensure that your email is the correct one. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email activation not available because user account already activated. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Email activation sent recently, must retry later. (One per hour) </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 502 </td><td> Email activate send failed because of our email service. Ensure that your email is the correct one otherwise please contact our support if the problem persists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendEmailActivationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/resendEmailActivation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendEmailActivationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resendEmailActivationCall(_callback);

    }

    /**
     * Resend email activation
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email activation resent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email activation not sent because of email problem. Ensure that your email is the correct one. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email activation not available because user account already activated. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Email activation sent recently, must retry later. (One per hour) </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 502 </td><td> Email activate send failed because of our email service. Ensure that your email is the correct one otherwise please contact our support if the problem persists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void resendEmailActivation() throws ApiException {
        resendEmailActivationWithHttpInfo();
    }

    /**
     * Resend email activation
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email activation resent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email activation not sent because of email problem. Ensure that your email is the correct one. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email activation not available because user account already activated. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Email activation sent recently, must retry later. (One per hour) </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 502 </td><td> Email activate send failed because of our email service. Ensure that your email is the correct one otherwise please contact our support if the problem persists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendEmailActivationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resendEmailActivationValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend email activation (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email activation resent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email activation not sent because of email problem. Ensure that your email is the correct one. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email activation not available because user account already activated. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Email activation sent recently, must retry later. (One per hour) </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 502 </td><td> Email activate send failed because of our email service. Ensure that your email is the correct one otherwise please contact our support if the problem persists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendEmailActivationAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendEmailActivationValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCompanyInfo
     * @param companyInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Company information saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or invalid VATNumber. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not found or unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCompanyInfoCall(CompanyInfo companyInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyInfo;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/companyInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCompanyInfoValidateBeforeCall(CompanyInfo companyInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyInfo' is set
        if (companyInfo == null) {
            throw new ApiException("Missing the required parameter 'companyInfo' when calling saveCompanyInfo(Async)");
        }

        return saveCompanyInfoCall(companyInfo, _callback);

    }

    /**
     * Change company information
     * 
     * @param companyInfo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Company information saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or invalid VATNumber. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not found or unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void saveCompanyInfo(CompanyInfo companyInfo) throws ApiException {
        saveCompanyInfoWithHttpInfo(companyInfo);
    }

    /**
     * Change company information
     * 
     * @param companyInfo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Company information saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or invalid VATNumber. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not found or unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveCompanyInfoWithHttpInfo(CompanyInfo companyInfo) throws ApiException {
        okhttp3.Call localVarCall = saveCompanyInfoValidateBeforeCall(companyInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change company information (asynchronously)
     * 
     * @param companyInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Company information saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or invalid VATNumber. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not found or unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCompanyInfoAsync(CompanyInfo companyInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCompanyInfoValidateBeforeCall(companyInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCreditCardInfo
     * @param creditCardInfo Credit card info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The credit card information has been accepted for processing, the authorization will be processed shortly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Communication problem with our payment service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCreditCardInfoCall(CreditCardInfo creditCardInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditCardInfo;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/creditCardInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCreditCardInfoValidateBeforeCall(CreditCardInfo creditCardInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditCardInfo' is set
        if (creditCardInfo == null) {
            throw new ApiException("Missing the required parameter 'creditCardInfo' when calling saveCreditCardInfo(Async)");
        }

        return saveCreditCardInfoCall(creditCardInfo, _callback);

    }

    /**
     * Save user credit card info
     * 
     * @param creditCardInfo Credit card info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The credit card information has been accepted for processing, the authorization will be processed shortly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Communication problem with our payment service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void saveCreditCardInfo(CreditCardInfo creditCardInfo) throws ApiException {
        saveCreditCardInfoWithHttpInfo(creditCardInfo);
    }

    /**
     * Save user credit card info
     * 
     * @param creditCardInfo Credit card info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The credit card information has been accepted for processing, the authorization will be processed shortly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Communication problem with our payment service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveCreditCardInfoWithHttpInfo(CreditCardInfo creditCardInfo) throws ApiException {
        okhttp3.Call localVarCall = saveCreditCardInfoValidateBeforeCall(creditCardInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save user credit card info (asynchronously)
     * 
     * @param creditCardInfo Credit card info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The credit card information has been accepted for processing, the authorization will be processed shortly. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Communication problem with our payment service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCreditCardInfoAsync(CreditCardInfo creditCardInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCreditCardInfoValidateBeforeCall(creditCardInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savePersonalInfo
     * @param personalInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account information updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savePersonalInfoCall(PersonalInfo personalInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personalInfo;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/personalInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savePersonalInfoValidateBeforeCall(PersonalInfo personalInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personalInfo' is set
        if (personalInfo == null) {
            throw new ApiException("Missing the required parameter 'personalInfo' when calling savePersonalInfo(Async)");
        }

        return savePersonalInfoCall(personalInfo, _callback);

    }

    /**
     * Save user personal information
     * 
     * @param personalInfo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account information updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void savePersonalInfo(PersonalInfo personalInfo) throws ApiException {
        savePersonalInfoWithHttpInfo(personalInfo);
    }

    /**
     * Save user personal information
     * 
     * @param personalInfo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account information updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> savePersonalInfoWithHttpInfo(PersonalInfo personalInfo) throws ApiException {
        okhttp3.Call localVarCall = savePersonalInfoValidateBeforeCall(personalInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save user personal information (asynchronously)
     * 
     * @param personalInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User account information updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savePersonalInfoAsync(PersonalInfo personalInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savePersonalInfoValidateBeforeCall(personalInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveProfilePictureInfo
     * @param profilePictureInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User profile picture information saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest (Url invalid) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The picture size is too large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The content type of the image must be an image </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProfilePictureInfoCall(ProfilePictureInfo profilePictureInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profilePictureInfo;

        // create path and map variables
        String localVarPath = "/v2/user/customer/account/profilePictureInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveProfilePictureInfoValidateBeforeCall(ProfilePictureInfo profilePictureInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profilePictureInfo' is set
        if (profilePictureInfo == null) {
            throw new ApiException("Missing the required parameter 'profilePictureInfo' when calling saveProfilePictureInfo(Async)");
        }

        return saveProfilePictureInfoCall(profilePictureInfo, _callback);

    }

    /**
     * Change user picture information
     * 
     * @param profilePictureInfo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User profile picture information saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest (Url invalid) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The picture size is too large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The content type of the image must be an image </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void saveProfilePictureInfo(ProfilePictureInfo profilePictureInfo) throws ApiException {
        saveProfilePictureInfoWithHttpInfo(profilePictureInfo);
    }

    /**
     * Change user picture information
     * 
     * @param profilePictureInfo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User profile picture information saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest (Url invalid) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The picture size is too large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The content type of the image must be an image </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveProfilePictureInfoWithHttpInfo(ProfilePictureInfo profilePictureInfo) throws ApiException {
        okhttp3.Call localVarCall = saveProfilePictureInfoValidateBeforeCall(profilePictureInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change user picture information (asynchronously)
     * 
     * @param profilePictureInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User profile picture information saved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest (Url invalid) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> The picture size is too large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The content type of the image must be an image </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProfilePictureInfoAsync(ProfilePictureInfo profilePictureInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveProfilePictureInfoValidateBeforeCall(profilePictureInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
