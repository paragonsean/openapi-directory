/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BeezUPCommonLOVLink3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyticsIndexLovLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyticsIndexLovLinks {
  public static final String SERIALIZED_NAME_ANALYTICS_NUMERICAL_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV = "analyticsNumericalProductColumnFilterOperatorNameLov";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_NUMERICAL_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV)
  private BeezUPCommonLOVLink3 analyticsNumericalProductColumnFilterOperatorNameLov;

  public static final String SERIALIZED_NAME_ANALYTICS_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV = "analyticsProductColumnFilterOperatorNameLov";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV)
  private BeezUPCommonLOVLink3 analyticsProductColumnFilterOperatorNameLov;

  public static final String SERIALIZED_NAME_ANALYTICS_STRING_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV = "analyticsStringProductColumnFilterOperatorNameLov";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_STRING_PRODUCT_COLUMN_FILTER_OPERATOR_NAME_LOV)
  private BeezUPCommonLOVLink3 analyticsStringProductColumnFilterOperatorNameLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_FILTER_OPERATOR_NAME_LOV = "performanceIndicatorFilterOperatorNameLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_FILTER_OPERATOR_NAME_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorFilterOperatorNameLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_FORMULA_OPERATOR_NAME_LOV = "performanceIndicatorFormulaOperatorNameLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_FORMULA_OPERATOR_NAME_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorFormulaOperatorNameLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_FORMULA_PARAMETER_TYPE_LOV = "performanceIndicatorFormulaParameterTypeLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_FORMULA_PARAMETER_TYPE_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorFormulaParameterTypeLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_CATEGORY_LOV = "performanceIndicatorTypeForReportsByCategoryLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_CATEGORY_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByCategoryLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_CHANNEL_LOV = "performanceIndicatorTypeForReportsByChannelLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_CHANNEL_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByChannelLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_PRODUCT_LOV = "performanceIndicatorTypeForReportsByProductLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_FOR_REPORTS_BY_PRODUCT_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByProductLov;

  public static final String SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_LOV = "performanceIndicatorTypeLov";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_INDICATOR_TYPE_LOV)
  private BeezUPCommonLOVLink3 performanceIndicatorTypeLov;

  public static final String SERIALIZED_NAME_STORE_OPTIMISATION_RULE_EXECUTION_STATUS_LOV = "storeOptimisationRuleExecutionStatusLov";
  @SerializedName(SERIALIZED_NAME_STORE_OPTIMISATION_RULE_EXECUTION_STATUS_LOV)
  private BeezUPCommonLOVLink3 storeOptimisationRuleExecutionStatusLov;

  public AnalyticsIndexLovLinks() {
  }

  public AnalyticsIndexLovLinks analyticsNumericalProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsNumericalProductColumnFilterOperatorNameLov) {
    this.analyticsNumericalProductColumnFilterOperatorNameLov = analyticsNumericalProductColumnFilterOperatorNameLov;
    return this;
  }

  /**
   * Get analyticsNumericalProductColumnFilterOperatorNameLov
   * @return analyticsNumericalProductColumnFilterOperatorNameLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getAnalyticsNumericalProductColumnFilterOperatorNameLov() {
    return analyticsNumericalProductColumnFilterOperatorNameLov;
  }

  public void setAnalyticsNumericalProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsNumericalProductColumnFilterOperatorNameLov) {
    this.analyticsNumericalProductColumnFilterOperatorNameLov = analyticsNumericalProductColumnFilterOperatorNameLov;
  }


  public AnalyticsIndexLovLinks analyticsProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsProductColumnFilterOperatorNameLov) {
    this.analyticsProductColumnFilterOperatorNameLov = analyticsProductColumnFilterOperatorNameLov;
    return this;
  }

  /**
   * Get analyticsProductColumnFilterOperatorNameLov
   * @return analyticsProductColumnFilterOperatorNameLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getAnalyticsProductColumnFilterOperatorNameLov() {
    return analyticsProductColumnFilterOperatorNameLov;
  }

  public void setAnalyticsProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsProductColumnFilterOperatorNameLov) {
    this.analyticsProductColumnFilterOperatorNameLov = analyticsProductColumnFilterOperatorNameLov;
  }


  public AnalyticsIndexLovLinks analyticsStringProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsStringProductColumnFilterOperatorNameLov) {
    this.analyticsStringProductColumnFilterOperatorNameLov = analyticsStringProductColumnFilterOperatorNameLov;
    return this;
  }

  /**
   * Get analyticsStringProductColumnFilterOperatorNameLov
   * @return analyticsStringProductColumnFilterOperatorNameLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getAnalyticsStringProductColumnFilterOperatorNameLov() {
    return analyticsStringProductColumnFilterOperatorNameLov;
  }

  public void setAnalyticsStringProductColumnFilterOperatorNameLov(BeezUPCommonLOVLink3 analyticsStringProductColumnFilterOperatorNameLov) {
    this.analyticsStringProductColumnFilterOperatorNameLov = analyticsStringProductColumnFilterOperatorNameLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorFilterOperatorNameLov(BeezUPCommonLOVLink3 performanceIndicatorFilterOperatorNameLov) {
    this.performanceIndicatorFilterOperatorNameLov = performanceIndicatorFilterOperatorNameLov;
    return this;
  }

  /**
   * Get performanceIndicatorFilterOperatorNameLov
   * @return performanceIndicatorFilterOperatorNameLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorFilterOperatorNameLov() {
    return performanceIndicatorFilterOperatorNameLov;
  }

  public void setPerformanceIndicatorFilterOperatorNameLov(BeezUPCommonLOVLink3 performanceIndicatorFilterOperatorNameLov) {
    this.performanceIndicatorFilterOperatorNameLov = performanceIndicatorFilterOperatorNameLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorFormulaOperatorNameLov(BeezUPCommonLOVLink3 performanceIndicatorFormulaOperatorNameLov) {
    this.performanceIndicatorFormulaOperatorNameLov = performanceIndicatorFormulaOperatorNameLov;
    return this;
  }

  /**
   * Get performanceIndicatorFormulaOperatorNameLov
   * @return performanceIndicatorFormulaOperatorNameLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorFormulaOperatorNameLov() {
    return performanceIndicatorFormulaOperatorNameLov;
  }

  public void setPerformanceIndicatorFormulaOperatorNameLov(BeezUPCommonLOVLink3 performanceIndicatorFormulaOperatorNameLov) {
    this.performanceIndicatorFormulaOperatorNameLov = performanceIndicatorFormulaOperatorNameLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorFormulaParameterTypeLov(BeezUPCommonLOVLink3 performanceIndicatorFormulaParameterTypeLov) {
    this.performanceIndicatorFormulaParameterTypeLov = performanceIndicatorFormulaParameterTypeLov;
    return this;
  }

  /**
   * Get performanceIndicatorFormulaParameterTypeLov
   * @return performanceIndicatorFormulaParameterTypeLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorFormulaParameterTypeLov() {
    return performanceIndicatorFormulaParameterTypeLov;
  }

  public void setPerformanceIndicatorFormulaParameterTypeLov(BeezUPCommonLOVLink3 performanceIndicatorFormulaParameterTypeLov) {
    this.performanceIndicatorFormulaParameterTypeLov = performanceIndicatorFormulaParameterTypeLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorTypeForReportsByCategoryLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByCategoryLov) {
    this.performanceIndicatorTypeForReportsByCategoryLov = performanceIndicatorTypeForReportsByCategoryLov;
    return this;
  }

  /**
   * Get performanceIndicatorTypeForReportsByCategoryLov
   * @return performanceIndicatorTypeForReportsByCategoryLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorTypeForReportsByCategoryLov() {
    return performanceIndicatorTypeForReportsByCategoryLov;
  }

  public void setPerformanceIndicatorTypeForReportsByCategoryLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByCategoryLov) {
    this.performanceIndicatorTypeForReportsByCategoryLov = performanceIndicatorTypeForReportsByCategoryLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorTypeForReportsByChannelLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByChannelLov) {
    this.performanceIndicatorTypeForReportsByChannelLov = performanceIndicatorTypeForReportsByChannelLov;
    return this;
  }

  /**
   * Get performanceIndicatorTypeForReportsByChannelLov
   * @return performanceIndicatorTypeForReportsByChannelLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorTypeForReportsByChannelLov() {
    return performanceIndicatorTypeForReportsByChannelLov;
  }

  public void setPerformanceIndicatorTypeForReportsByChannelLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByChannelLov) {
    this.performanceIndicatorTypeForReportsByChannelLov = performanceIndicatorTypeForReportsByChannelLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorTypeForReportsByProductLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByProductLov) {
    this.performanceIndicatorTypeForReportsByProductLov = performanceIndicatorTypeForReportsByProductLov;
    return this;
  }

  /**
   * Get performanceIndicatorTypeForReportsByProductLov
   * @return performanceIndicatorTypeForReportsByProductLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorTypeForReportsByProductLov() {
    return performanceIndicatorTypeForReportsByProductLov;
  }

  public void setPerformanceIndicatorTypeForReportsByProductLov(BeezUPCommonLOVLink3 performanceIndicatorTypeForReportsByProductLov) {
    this.performanceIndicatorTypeForReportsByProductLov = performanceIndicatorTypeForReportsByProductLov;
  }


  public AnalyticsIndexLovLinks performanceIndicatorTypeLov(BeezUPCommonLOVLink3 performanceIndicatorTypeLov) {
    this.performanceIndicatorTypeLov = performanceIndicatorTypeLov;
    return this;
  }

  /**
   * Get performanceIndicatorTypeLov
   * @return performanceIndicatorTypeLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getPerformanceIndicatorTypeLov() {
    return performanceIndicatorTypeLov;
  }

  public void setPerformanceIndicatorTypeLov(BeezUPCommonLOVLink3 performanceIndicatorTypeLov) {
    this.performanceIndicatorTypeLov = performanceIndicatorTypeLov;
  }


  public AnalyticsIndexLovLinks storeOptimisationRuleExecutionStatusLov(BeezUPCommonLOVLink3 storeOptimisationRuleExecutionStatusLov) {
    this.storeOptimisationRuleExecutionStatusLov = storeOptimisationRuleExecutionStatusLov;
    return this;
  }

  /**
   * Get storeOptimisationRuleExecutionStatusLov
   * @return storeOptimisationRuleExecutionStatusLov
   */
  @javax.annotation.Nullable
  public BeezUPCommonLOVLink3 getStoreOptimisationRuleExecutionStatusLov() {
    return storeOptimisationRuleExecutionStatusLov;
  }

  public void setStoreOptimisationRuleExecutionStatusLov(BeezUPCommonLOVLink3 storeOptimisationRuleExecutionStatusLov) {
    this.storeOptimisationRuleExecutionStatusLov = storeOptimisationRuleExecutionStatusLov;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsIndexLovLinks analyticsIndexLovLinks = (AnalyticsIndexLovLinks) o;
    return Objects.equals(this.analyticsNumericalProductColumnFilterOperatorNameLov, analyticsIndexLovLinks.analyticsNumericalProductColumnFilterOperatorNameLov) &&
        Objects.equals(this.analyticsProductColumnFilterOperatorNameLov, analyticsIndexLovLinks.analyticsProductColumnFilterOperatorNameLov) &&
        Objects.equals(this.analyticsStringProductColumnFilterOperatorNameLov, analyticsIndexLovLinks.analyticsStringProductColumnFilterOperatorNameLov) &&
        Objects.equals(this.performanceIndicatorFilterOperatorNameLov, analyticsIndexLovLinks.performanceIndicatorFilterOperatorNameLov) &&
        Objects.equals(this.performanceIndicatorFormulaOperatorNameLov, analyticsIndexLovLinks.performanceIndicatorFormulaOperatorNameLov) &&
        Objects.equals(this.performanceIndicatorFormulaParameterTypeLov, analyticsIndexLovLinks.performanceIndicatorFormulaParameterTypeLov) &&
        Objects.equals(this.performanceIndicatorTypeForReportsByCategoryLov, analyticsIndexLovLinks.performanceIndicatorTypeForReportsByCategoryLov) &&
        Objects.equals(this.performanceIndicatorTypeForReportsByChannelLov, analyticsIndexLovLinks.performanceIndicatorTypeForReportsByChannelLov) &&
        Objects.equals(this.performanceIndicatorTypeForReportsByProductLov, analyticsIndexLovLinks.performanceIndicatorTypeForReportsByProductLov) &&
        Objects.equals(this.performanceIndicatorTypeLov, analyticsIndexLovLinks.performanceIndicatorTypeLov) &&
        Objects.equals(this.storeOptimisationRuleExecutionStatusLov, analyticsIndexLovLinks.storeOptimisationRuleExecutionStatusLov);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsNumericalProductColumnFilterOperatorNameLov, analyticsProductColumnFilterOperatorNameLov, analyticsStringProductColumnFilterOperatorNameLov, performanceIndicatorFilterOperatorNameLov, performanceIndicatorFormulaOperatorNameLov, performanceIndicatorFormulaParameterTypeLov, performanceIndicatorTypeForReportsByCategoryLov, performanceIndicatorTypeForReportsByChannelLov, performanceIndicatorTypeForReportsByProductLov, performanceIndicatorTypeLov, storeOptimisationRuleExecutionStatusLov);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsIndexLovLinks {\n");
    sb.append("    analyticsNumericalProductColumnFilterOperatorNameLov: ").append(toIndentedString(analyticsNumericalProductColumnFilterOperatorNameLov)).append("\n");
    sb.append("    analyticsProductColumnFilterOperatorNameLov: ").append(toIndentedString(analyticsProductColumnFilterOperatorNameLov)).append("\n");
    sb.append("    analyticsStringProductColumnFilterOperatorNameLov: ").append(toIndentedString(analyticsStringProductColumnFilterOperatorNameLov)).append("\n");
    sb.append("    performanceIndicatorFilterOperatorNameLov: ").append(toIndentedString(performanceIndicatorFilterOperatorNameLov)).append("\n");
    sb.append("    performanceIndicatorFormulaOperatorNameLov: ").append(toIndentedString(performanceIndicatorFormulaOperatorNameLov)).append("\n");
    sb.append("    performanceIndicatorFormulaParameterTypeLov: ").append(toIndentedString(performanceIndicatorFormulaParameterTypeLov)).append("\n");
    sb.append("    performanceIndicatorTypeForReportsByCategoryLov: ").append(toIndentedString(performanceIndicatorTypeForReportsByCategoryLov)).append("\n");
    sb.append("    performanceIndicatorTypeForReportsByChannelLov: ").append(toIndentedString(performanceIndicatorTypeForReportsByChannelLov)).append("\n");
    sb.append("    performanceIndicatorTypeForReportsByProductLov: ").append(toIndentedString(performanceIndicatorTypeForReportsByProductLov)).append("\n");
    sb.append("    performanceIndicatorTypeLov: ").append(toIndentedString(performanceIndicatorTypeLov)).append("\n");
    sb.append("    storeOptimisationRuleExecutionStatusLov: ").append(toIndentedString(storeOptimisationRuleExecutionStatusLov)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyticsNumericalProductColumnFilterOperatorNameLov");
    openapiFields.add("analyticsProductColumnFilterOperatorNameLov");
    openapiFields.add("analyticsStringProductColumnFilterOperatorNameLov");
    openapiFields.add("performanceIndicatorFilterOperatorNameLov");
    openapiFields.add("performanceIndicatorFormulaOperatorNameLov");
    openapiFields.add("performanceIndicatorFormulaParameterTypeLov");
    openapiFields.add("performanceIndicatorTypeForReportsByCategoryLov");
    openapiFields.add("performanceIndicatorTypeForReportsByChannelLov");
    openapiFields.add("performanceIndicatorTypeForReportsByProductLov");
    openapiFields.add("performanceIndicatorTypeLov");
    openapiFields.add("storeOptimisationRuleExecutionStatusLov");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyticsIndexLovLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyticsIndexLovLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticsIndexLovLinks is not found in the empty JSON string", AnalyticsIndexLovLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyticsIndexLovLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyticsIndexLovLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analyticsNumericalProductColumnFilterOperatorNameLov`
      if (jsonObj.get("analyticsNumericalProductColumnFilterOperatorNameLov") != null && !jsonObj.get("analyticsNumericalProductColumnFilterOperatorNameLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("analyticsNumericalProductColumnFilterOperatorNameLov"));
      }
      // validate the optional field `analyticsProductColumnFilterOperatorNameLov`
      if (jsonObj.get("analyticsProductColumnFilterOperatorNameLov") != null && !jsonObj.get("analyticsProductColumnFilterOperatorNameLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("analyticsProductColumnFilterOperatorNameLov"));
      }
      // validate the optional field `analyticsStringProductColumnFilterOperatorNameLov`
      if (jsonObj.get("analyticsStringProductColumnFilterOperatorNameLov") != null && !jsonObj.get("analyticsStringProductColumnFilterOperatorNameLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("analyticsStringProductColumnFilterOperatorNameLov"));
      }
      // validate the optional field `performanceIndicatorFilterOperatorNameLov`
      if (jsonObj.get("performanceIndicatorFilterOperatorNameLov") != null && !jsonObj.get("performanceIndicatorFilterOperatorNameLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorFilterOperatorNameLov"));
      }
      // validate the optional field `performanceIndicatorFormulaOperatorNameLov`
      if (jsonObj.get("performanceIndicatorFormulaOperatorNameLov") != null && !jsonObj.get("performanceIndicatorFormulaOperatorNameLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorFormulaOperatorNameLov"));
      }
      // validate the optional field `performanceIndicatorFormulaParameterTypeLov`
      if (jsonObj.get("performanceIndicatorFormulaParameterTypeLov") != null && !jsonObj.get("performanceIndicatorFormulaParameterTypeLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorFormulaParameterTypeLov"));
      }
      // validate the optional field `performanceIndicatorTypeForReportsByCategoryLov`
      if (jsonObj.get("performanceIndicatorTypeForReportsByCategoryLov") != null && !jsonObj.get("performanceIndicatorTypeForReportsByCategoryLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorTypeForReportsByCategoryLov"));
      }
      // validate the optional field `performanceIndicatorTypeForReportsByChannelLov`
      if (jsonObj.get("performanceIndicatorTypeForReportsByChannelLov") != null && !jsonObj.get("performanceIndicatorTypeForReportsByChannelLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorTypeForReportsByChannelLov"));
      }
      // validate the optional field `performanceIndicatorTypeForReportsByProductLov`
      if (jsonObj.get("performanceIndicatorTypeForReportsByProductLov") != null && !jsonObj.get("performanceIndicatorTypeForReportsByProductLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorTypeForReportsByProductLov"));
      }
      // validate the optional field `performanceIndicatorTypeLov`
      if (jsonObj.get("performanceIndicatorTypeLov") != null && !jsonObj.get("performanceIndicatorTypeLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("performanceIndicatorTypeLov"));
      }
      // validate the optional field `storeOptimisationRuleExecutionStatusLov`
      if (jsonObj.get("storeOptimisationRuleExecutionStatusLov") != null && !jsonObj.get("storeOptimisationRuleExecutionStatusLov").isJsonNull()) {
        BeezUPCommonLOVLink3.validateJsonElement(jsonObj.get("storeOptimisationRuleExecutionStatusLov"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticsIndexLovLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticsIndexLovLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticsIndexLovLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticsIndexLovLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticsIndexLovLinks>() {
           @Override
           public void write(JsonWriter out, AnalyticsIndexLovLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticsIndexLovLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyticsIndexLovLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyticsIndexLovLinks
   * @throws IOException if the JSON string is invalid with respect to AnalyticsIndexLovLinks
   */
  public static AnalyticsIndexLovLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticsIndexLovLinks.class);
  }

  /**
   * Convert an instance of AnalyticsIndexLovLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

