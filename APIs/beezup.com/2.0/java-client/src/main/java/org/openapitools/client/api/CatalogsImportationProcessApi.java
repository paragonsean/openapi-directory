/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.GetImportationProductsReportRequest;
import org.openapitools.client.model.GetImportationProductsReportResponse;
import org.openapitools.client.model.GetImportationReportResponse;
import org.openapitools.client.model.ImportAlreadyInProgressResponse;
import org.openapitools.client.model.ImportationMonitoring;
import org.openapitools.client.model.ImportationTechnicalProgression;
import org.openapitools.client.model.ImportationsResponse;
import org.openapitools.client.model.LinksImportationGetImportationMonitoringLink;
import org.openapitools.client.model.StartManualImportRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsImportationProcessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogsImportationProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsImportationProcessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for importationCancel
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation canceled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCancelCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/cancel"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationCancelValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCancel(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCancel(Async)");
        }

        return importationCancelCall(storeId, executionId, _callback);

    }

    /**
     * Cancel importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation canceled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationCancel(String storeId, String executionId) throws ApiException {
        importationCancelWithHttpInfo(storeId, executionId);
    }

    /**
     * Cancel importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation canceled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationCancelWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationCancelValidateBeforeCall(storeId, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation canceled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCancelAsync(String storeId, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationCancelValidateBeforeCall(storeId, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationCommit
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation committed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCommitCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationCommitValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCommit(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCommit(Async)");
        }

        return importationCommitCall(storeId, executionId, _callback);

    }

    /**
     * Commit Importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation committed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationCommit(String storeId, String executionId) throws ApiException {
        importationCommitWithHttpInfo(storeId, executionId);
    }

    /**
     * Commit Importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation committed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationCommitWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationCommitValidateBeforeCall(storeId, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Commit Importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog importation committed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCommitAsync(String storeId, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationCommitValidateBeforeCall(storeId, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationCommitColumns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Columns configuration have been committed. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. When the catalog column count limit has been reached. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCommitColumnsCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationCommitColumnsValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCommitColumns(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCommitColumns(Async)");
        }

        return importationCommitColumnsCall(storeId, executionId, _callback);

    }

    /**
     * Commit columns
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Columns configuration have been committed. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. When the catalog column count limit has been reached. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationCommitColumns(String storeId, String executionId) throws ApiException {
        importationCommitColumnsWithHttpInfo(storeId, executionId);
    }

    /**
     * Commit columns
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Columns configuration have been committed. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. When the catalog column count limit has been reached. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationCommitColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationCommitColumnsValidateBeforeCall(storeId, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Commit columns (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Columns configuration have been committed. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. When the catalog column count limit has been reached. When the catalog custom column count limit has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationCommitColumnsAsync(String storeId, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationCommitColumnsValidateBeforeCall(storeId, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationConfigureRemainingCatalogColumns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remaining catalog columns have been configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationConfigureRemainingCatalogColumnsCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationConfigureRemainingCatalogColumnsValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationConfigureRemainingCatalogColumns(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationConfigureRemainingCatalogColumns(Async)");
        }

        return importationConfigureRemainingCatalogColumnsCall(storeId, executionId, _callback);

    }

    /**
     * Configure remaining catalog columns
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remaining catalog columns have been configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationConfigureRemainingCatalogColumns(String storeId, String executionId) throws ApiException {
        importationConfigureRemainingCatalogColumnsWithHttpInfo(storeId, executionId);
    }

    /**
     * Configure remaining catalog columns
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remaining catalog columns have been configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationConfigureRemainingCatalogColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationConfigureRemainingCatalogColumnsValidateBeforeCall(storeId, executionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure remaining catalog columns (asynchronously)
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remaining catalog columns have been configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> When a user column name is duplicate. When the catalog column name are duplicate. When the BeezUP column have duplicate mapping. Occurs when the required beezup column is not mapped to any column. Occurs when the category hierarchy is not correctly mapped. Occurs when the duplicate strategy on {catalogColumnName} is not found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationConfigureRemainingCatalogColumnsAsync(String storeId, String executionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationConfigureRemainingCatalogColumnsValidateBeforeCall(storeId, executionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetImportationMonitoring
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec after the import has been started, please contact our support </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetImportationMonitoringCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetImportationMonitoringValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetImportationMonitoring(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetImportationMonitoring(Async)");
        }

        return importationGetImportationMonitoringCall(storeId, executionId, _callback);

    }

    /**
     * Get the importation status
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ImportationMonitoring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec after the import has been started, please contact our support </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ImportationMonitoring importationGetImportationMonitoring(String storeId, String executionId) throws ApiException {
        ApiResponse<ImportationMonitoring> localVarResp = importationGetImportationMonitoringWithHttpInfo(storeId, executionId);
        return localVarResp.getData();
    }

    /**
     * Get the importation status
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;ImportationMonitoring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec after the import has been started, please contact our support </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportationMonitoring> importationGetImportationMonitoringWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationGetImportationMonitoringValidateBeforeCall(storeId, executionId, null);
        Type localVarReturnType = new TypeToken<ImportationMonitoring>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the importation status (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec after the import has been started, please contact our support </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetImportationMonitoringAsync(String storeId, String executionId, final ApiCallback<ImportationMonitoring> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetImportationMonitoringValidateBeforeCall(storeId, executionId, _callback);
        Type localVarReturnType = new TypeToken<ImportationMonitoring>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetProductsReport
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param getImportationProductsReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Products Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductsReportCall(String storeId, String executionId, GetImportationProductsReportRequest getImportationProductsReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getImportationProductsReportRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/products/list"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetProductsReportValidateBeforeCall(String storeId, String executionId, GetImportationProductsReportRequest getImportationProductsReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetProductsReport(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetProductsReport(Async)");
        }

        // verify the required parameter 'getImportationProductsReportRequest' is set
        if (getImportationProductsReportRequest == null) {
            throw new ApiException("Missing the required parameter 'getImportationProductsReportRequest' when calling importationGetProductsReport(Async)");
        }

        return importationGetProductsReportCall(storeId, executionId, getImportationProductsReportRequest, _callback);

    }

    /**
     * Importation Get Products Report
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param getImportationProductsReportRequest  (required)
     * @return GetImportationProductsReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Products Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public GetImportationProductsReportResponse importationGetProductsReport(String storeId, String executionId, GetImportationProductsReportRequest getImportationProductsReportRequest) throws ApiException {
        ApiResponse<GetImportationProductsReportResponse> localVarResp = importationGetProductsReportWithHttpInfo(storeId, executionId, getImportationProductsReportRequest);
        return localVarResp.getData();
    }

    /**
     * Importation Get Products Report
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param getImportationProductsReportRequest  (required)
     * @return ApiResponse&lt;GetImportationProductsReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Products Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetImportationProductsReportResponse> importationGetProductsReportWithHttpInfo(String storeId, String executionId, GetImportationProductsReportRequest getImportationProductsReportRequest) throws ApiException {
        okhttp3.Call localVarCall = importationGetProductsReportValidateBeforeCall(storeId, executionId, getImportationProductsReportRequest, null);
        Type localVarReturnType = new TypeToken<GetImportationProductsReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Importation Get Products Report (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param getImportationProductsReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Products Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductsReportAsync(String storeId, String executionId, GetImportationProductsReportRequest getImportationProductsReportRequest, final ApiCallback<GetImportationProductsReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetProductsReportValidateBeforeCall(storeId, executionId, getImportationProductsReportRequest, _callback);
        Type localVarReturnType = new TypeToken<GetImportationProductsReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetReport
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/report"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetReportValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetReport(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetReport(Async)");
        }

        return importationGetReportCall(storeId, executionId, _callback);

    }

    /**
     * Importation Get Report
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return GetImportationReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public GetImportationReportResponse importationGetReport(String storeId, String executionId) throws ApiException {
        ApiResponse<GetImportationReportResponse> localVarResp = importationGetReportWithHttpInfo(storeId, executionId);
        return localVarResp.getData();
    }

    /**
     * Importation Get Report
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;GetImportationReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetImportationReportResponse> importationGetReportWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationGetReportValidateBeforeCall(storeId, executionId, null);
        Type localVarReturnType = new TypeToken<GetImportationReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Importation Get Report (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Report Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Report Not ready Yet. Please retry in a few minutes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportAsync(String storeId, String executionId, final ApiCallback<GetImportationReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetReportValidateBeforeCall(storeId, executionId, _callback);
        Type localVarReturnType = new TypeToken<GetImportationReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetReportings
     * @param storeId Your store identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportingsCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetReportingsValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetReportings(Async)");
        }

        return importationGetReportingsCall(storeId, _callback);

    }

    /**
     * Get the latest catalog importation reporting
     * 
     * @param storeId Your store identifier (required)
     * @return ImportationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ImportationsResponse importationGetReportings(String storeId) throws ApiException {
        ApiResponse<ImportationsResponse> localVarResp = importationGetReportingsWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * Get the latest catalog importation reporting
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;ImportationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportationsResponse> importationGetReportingsWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = importationGetReportingsValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<ImportationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest catalog importation reporting (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportingsAsync(String storeId, final ApiCallback<ImportationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetReportingsValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<ImportationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetReportingsAllStores
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportingsAllStoresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/importations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetReportingsAllStoresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return importationGetReportingsAllStoresCall(_callback);

    }

    /**
     * Get the latest catalog importation reporting for all your stores
     * 
     * @return Map&lt;String, ImportationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, ImportationsResponse> importationGetReportingsAllStores() throws ApiException {
        ApiResponse<Map<String, ImportationsResponse>> localVarResp = importationGetReportingsAllStoresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the latest catalog importation reporting for all your stores
     * 
     * @return ApiResponse&lt;Map&lt;String, ImportationsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, ImportationsResponse>> importationGetReportingsAllStoresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = importationGetReportingsAllStoresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, ImportationsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest catalog importation reporting for all your stores (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The last importation reportings </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserId not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetReportingsAllStoresAsync(final ApiCallback<Map<String, ImportationsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetReportingsAllStoresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, ImportationsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationStartManualUpdate
     * @param storeId Your store identifier (required)
     * @param startManualImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Missing Input configuration in the request Occurs when there is a duplicate file number in the input configuration Occurs when there is a duplicate file Uri in the input configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationStartManualUpdateCall(String storeId, StartManualImportRequest startManualImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startManualImportRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/start"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationStartManualUpdateValidateBeforeCall(String storeId, StartManualImportRequest startManualImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationStartManualUpdate(Async)");
        }

        // verify the required parameter 'startManualImportRequest' is set
        if (startManualImportRequest == null) {
            throw new ApiException("Missing the required parameter 'startManualImportRequest' when calling importationStartManualUpdate(Async)");
        }

        return importationStartManualUpdateCall(storeId, startManualImportRequest, _callback);

    }

    /**
     * Start Manual Import
     * 
     * @param storeId Your store identifier (required)
     * @param startManualImportRequest  (required)
     * @return LinksImportationGetImportationMonitoringLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Missing Input configuration in the request Occurs when there is a duplicate file number in the input configuration Occurs when there is a duplicate file Uri in the input configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public LinksImportationGetImportationMonitoringLink importationStartManualUpdate(String storeId, StartManualImportRequest startManualImportRequest) throws ApiException {
        ApiResponse<LinksImportationGetImportationMonitoringLink> localVarResp = importationStartManualUpdateWithHttpInfo(storeId, startManualImportRequest);
        return localVarResp.getData();
    }

    /**
     * Start Manual Import
     * 
     * @param storeId Your store identifier (required)
     * @param startManualImportRequest  (required)
     * @return ApiResponse&lt;LinksImportationGetImportationMonitoringLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Missing Input configuration in the request Occurs when there is a duplicate file number in the input configuration Occurs when there is a duplicate file Uri in the input configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinksImportationGetImportationMonitoringLink> importationStartManualUpdateWithHttpInfo(String storeId, StartManualImportRequest startManualImportRequest) throws ApiException {
        okhttp3.Call localVarCall = importationStartManualUpdateValidateBeforeCall(storeId, startManualImportRequest, null);
        Type localVarReturnType = new TypeToken<LinksImportationGetImportationMonitoringLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Manual Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param startManualImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Catalog importation started </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 400 </td><td> Missing Input configuration in the request Occurs when there is a duplicate file number in the input configuration Occurs when there is a duplicate file Uri in the input configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StoreId not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A catalog importation is already in progress! </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationStartManualUpdateAsync(String storeId, StartManualImportRequest startManualImportRequest, final ApiCallback<LinksImportationGetImportationMonitoringLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationStartManualUpdateValidateBeforeCall(storeId, startManualImportRequest, _callback);
        Type localVarReturnType = new TypeToken<LinksImportationGetImportationMonitoringLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationTechnicalProgression
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When the technical progression is correctly retrived </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationTechnicalProgressionCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationTechnicalProgressionValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationTechnicalProgression(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationTechnicalProgression(Async)");
        }

        return importationTechnicalProgressionCall(storeId, executionId, _callback);

    }

    /**
     * Get technical progression
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ImportationTechnicalProgression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When the technical progression is correctly retrived </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ImportationTechnicalProgression importationTechnicalProgression(String storeId, String executionId) throws ApiException {
        ApiResponse<ImportationTechnicalProgression> localVarResp = importationTechnicalProgressionWithHttpInfo(storeId, executionId);
        return localVarResp.getData();
    }

    /**
     * Get technical progression
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;ImportationTechnicalProgression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When the technical progression is correctly retrived </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportationTechnicalProgression> importationTechnicalProgressionWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationTechnicalProgressionValidateBeforeCall(storeId, executionId, null);
        Type localVarReturnType = new TypeToken<ImportationTechnicalProgression>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get technical progression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When the technical progression is correctly retrived </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationTechnicalProgressionAsync(String storeId, String executionId, final ApiCallback<ImportationTechnicalProgression> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationTechnicalProgressionValidateBeforeCall(storeId, executionId, _callback);
        Type localVarReturnType = new TypeToken<ImportationTechnicalProgression>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
