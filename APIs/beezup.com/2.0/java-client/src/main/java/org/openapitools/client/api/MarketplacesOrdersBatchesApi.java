/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchOrderOperationResponse;
import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ChangeOrderListRequest;
import org.openapitools.client.model.ClearMerchantOrderInfoListRequest;
import org.openapitools.client.model.SetMerchantOrderInfoListRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketplacesOrdersBatchesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketplacesOrdersBatchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketplacesOrdersBatchesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeOrderList
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param changeOrderListRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call changeOrderListCall(String changeOrderType, String userName, ChangeOrderListRequest changeOrderListRequest, Boolean testMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeOrderListRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}"
            .replace("{" + "changeOrderType" + "}", localVarApiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderListValidateBeforeCall(String changeOrderType, String userName, ChangeOrderListRequest changeOrderListRequest, Boolean testMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrderList(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrderList(Async)");
        }

        // verify the required parameter 'changeOrderListRequest' is set
        if (changeOrderListRequest == null) {
            throw new ApiException("Missing the required parameter 'changeOrderListRequest' when calling changeOrderList(Async)");
        }

        return changeOrderListCall(changeOrderType, userName, changeOrderListRequest, testMode, _callback);

    }

    /**
     * [DEPRECATED] Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.  Max 100 items per call. 
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param changeOrderListRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BatchOrderOperationResponse changeOrderList(String changeOrderType, String userName, ChangeOrderListRequest changeOrderListRequest, Boolean testMode) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> localVarResp = changeOrderListWithHttpInfo(changeOrderType, userName, changeOrderListRequest, testMode);
        return localVarResp.getData();
    }

    /**
     * [DEPRECATED] Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.  Max 100 items per call. 
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param changeOrderListRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BatchOrderOperationResponse> changeOrderListWithHttpInfo(String changeOrderType, String userName, ChangeOrderListRequest changeOrderListRequest, Boolean testMode) throws ApiException {
        okhttp3.Call localVarCall = changeOrderListValidateBeforeCall(changeOrderType, userName, changeOrderListRequest, testMode, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [DEPRECATED] Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call) (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.  Max 100 items per call. 
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param changeOrderListRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call changeOrderListAsync(String changeOrderType, String userName, ChangeOrderListRequest changeOrderListRequest, Boolean testMode, final ApiCallback<BatchOrderOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderListValidateBeforeCall(changeOrderType, userName, changeOrderListRequest, testMode, _callback);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearMerchantOrderInfoList
     * @param clearMerchantOrderInfoListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clearMerchantOrderInfoListCall(ClearMerchantOrderInfoListRequest clearMerchantOrderInfoListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clearMerchantOrderInfoListRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMerchantOrderInfoListValidateBeforeCall(ClearMerchantOrderInfoListRequest clearMerchantOrderInfoListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clearMerchantOrderInfoListRequest' is set
        if (clearMerchantOrderInfoListRequest == null) {
            throw new ApiException("Missing the required parameter 'clearMerchantOrderInfoListRequest' when calling clearMerchantOrderInfoList(Async)");
        }

        return clearMerchantOrderInfoListCall(clearMerchantOrderInfoListRequest, _callback);

    }

    /**
     * [DEPRECATED] Send a batch of operations to clear an Order&#39;s merchant information (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param clearMerchantOrderInfoListRequest  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BatchOrderOperationResponse clearMerchantOrderInfoList(ClearMerchantOrderInfoListRequest clearMerchantOrderInfoListRequest) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> localVarResp = clearMerchantOrderInfoListWithHttpInfo(clearMerchantOrderInfoListRequest);
        return localVarResp.getData();
    }

    /**
     * [DEPRECATED] Send a batch of operations to clear an Order&#39;s merchant information (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param clearMerchantOrderInfoListRequest  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BatchOrderOperationResponse> clearMerchantOrderInfoListWithHttpInfo(ClearMerchantOrderInfoListRequest clearMerchantOrderInfoListRequest) throws ApiException {
        okhttp3.Call localVarCall = clearMerchantOrderInfoListValidateBeforeCall(clearMerchantOrderInfoListRequest, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [DEPRECATED] Send a batch of operations to clear an Order&#39;s merchant information (max 100 items per call) (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param clearMerchantOrderInfoListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call clearMerchantOrderInfoListAsync(ClearMerchantOrderInfoListRequest clearMerchantOrderInfoListRequest, final ApiCallback<BatchOrderOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMerchantOrderInfoListValidateBeforeCall(clearMerchantOrderInfoListRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMerchantOrderInfoList
     * @param setMerchantOrderInfoListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setMerchantOrderInfoListCall(SetMerchantOrderInfoListRequest setMerchantOrderInfoListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setMerchantOrderInfoListRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMerchantOrderInfoListValidateBeforeCall(SetMerchantOrderInfoListRequest setMerchantOrderInfoListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setMerchantOrderInfoListRequest' is set
        if (setMerchantOrderInfoListRequest == null) {
            throw new ApiException("Missing the required parameter 'setMerchantOrderInfoListRequest' when calling setMerchantOrderInfoList(Async)");
        }

        return setMerchantOrderInfoListCall(setMerchantOrderInfoListRequest, _callback);

    }

    /**
     * [DEPRECATED] Send a batch of operations to set an Order&#39;s merchant information  (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param setMerchantOrderInfoListRequest  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BatchOrderOperationResponse setMerchantOrderInfoList(SetMerchantOrderInfoListRequest setMerchantOrderInfoListRequest) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> localVarResp = setMerchantOrderInfoListWithHttpInfo(setMerchantOrderInfoListRequest);
        return localVarResp.getData();
    }

    /**
     * [DEPRECATED] Send a batch of operations to set an Order&#39;s merchant information  (max 100 items per call)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param setMerchantOrderInfoListRequest  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BatchOrderOperationResponse> setMerchantOrderInfoListWithHttpInfo(SetMerchantOrderInfoListRequest setMerchantOrderInfoListRequest) throws ApiException {
        okhttp3.Call localVarCall = setMerchantOrderInfoListValidateBeforeCall(setMerchantOrderInfoListRequest, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [DEPRECATED] Send a batch of operations to set an Order&#39;s merchant information  (max 100 items per call) (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param setMerchantOrderInfoListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Succesfully received and processed batched operations. Please check response to see the status per operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requested too many batch operations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call setMerchantOrderInfoListAsync(SetMerchantOrderInfoListRequest setMerchantOrderInfoListRequest, final ApiCallback<BatchOrderOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMerchantOrderInfoListValidateBeforeCall(setMerchantOrderInfoListRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
