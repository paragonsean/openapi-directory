/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ErrorResponseMessage;
import java.io.File;
import org.openapitools.client.model.GenerateBatchOrderInvoiceErrorResponseItem;
import org.openapitools.client.model.GenerateBatchOrderInvoiceRequestItem;
import org.openapitools.client.model.GenerateOrderInvoiceRequest;
import org.openapitools.client.model.GenerateOrderInvoiceResponse;
import org.openapitools.client.model.GetOrderInvoicePdfFromHtmlInvoiceUrlRequest;
import org.openapitools.client.model.PreviewOrderInvoiceRequest;
import org.openapitools.client.model.PreviewOrderInvoiceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OmInvoiceApiGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OmInvoiceApiGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OmInvoiceApiGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateBatchOrderInvoice
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateBatchOrderInvoiceRequestItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The locations of the generated invoice. Might take a few seconds to be available </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> GenerateBatchOrderInvoiceErrorResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateBatchOrderInvoiceCall(String userName, List<GenerateBatchOrderInvoiceRequestItem> generateBatchOrderInvoiceRequestItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateBatchOrderInvoiceRequestItem;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateBatchOrderInvoiceValidateBeforeCall(String userName, List<GenerateBatchOrderInvoiceRequestItem> generateBatchOrderInvoiceRequestItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling generateBatchOrderInvoice(Async)");
        }

        // verify the required parameter 'generateBatchOrderInvoiceRequestItem' is set
        if (generateBatchOrderInvoiceRequestItem == null) {
            throw new ApiException("Missing the required parameter 'generateBatchOrderInvoiceRequestItem' when calling generateBatchOrderInvoice(Async)");
        }

        return generateBatchOrderInvoiceCall(userName, generateBatchOrderInvoiceRequestItem, _callback);

    }

    /**
     * Generate an Order Invoice batch
     * 
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateBatchOrderInvoiceRequestItem  (required)
     * @return List&lt;GenerateOrderInvoiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The locations of the generated invoice. Might take a few seconds to be available </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> GenerateBatchOrderInvoiceErrorResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public List<GenerateOrderInvoiceResponse> generateBatchOrderInvoice(String userName, List<GenerateBatchOrderInvoiceRequestItem> generateBatchOrderInvoiceRequestItem) throws ApiException {
        ApiResponse<List<GenerateOrderInvoiceResponse>> localVarResp = generateBatchOrderInvoiceWithHttpInfo(userName, generateBatchOrderInvoiceRequestItem);
        return localVarResp.getData();
    }

    /**
     * Generate an Order Invoice batch
     * 
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateBatchOrderInvoiceRequestItem  (required)
     * @return ApiResponse&lt;List&lt;GenerateOrderInvoiceResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The locations of the generated invoice. Might take a few seconds to be available </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> GenerateBatchOrderInvoiceErrorResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GenerateOrderInvoiceResponse>> generateBatchOrderInvoiceWithHttpInfo(String userName, List<GenerateBatchOrderInvoiceRequestItem> generateBatchOrderInvoiceRequestItem) throws ApiException {
        okhttp3.Call localVarCall = generateBatchOrderInvoiceValidateBeforeCall(userName, generateBatchOrderInvoiceRequestItem, null);
        Type localVarReturnType = new TypeToken<List<GenerateOrderInvoiceResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an Order Invoice batch (asynchronously)
     * 
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateBatchOrderInvoiceRequestItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The locations of the generated invoice. Might take a few seconds to be available </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> GenerateBatchOrderInvoiceErrorResponse </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateBatchOrderInvoiceAsync(String userName, List<GenerateBatchOrderInvoiceRequestItem> generateBatchOrderInvoiceRequestItem, final ApiCallback<List<GenerateOrderInvoiceResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateBatchOrderInvoiceValidateBeforeCall(userName, generateBatchOrderInvoiceRequestItem, _callback);
        Type localVarReturnType = new TypeToken<List<GenerateOrderInvoiceResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateOrderInvoice
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateOrderInvoiceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateOrderInvoiceCall(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, String userName, GenerateOrderInvoiceRequest generateOrderInvoiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOrderInvoiceRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/generate"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderUUID" + "}", localVarApiClient.escapeString(beezUPOrderUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateOrderInvoiceValidateBeforeCall(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, String userName, GenerateOrderInvoiceRequest generateOrderInvoiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling generateOrderInvoice(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling generateOrderInvoice(Async)");
        }

        // verify the required parameter 'beezUPOrderUUID' is set
        if (beezUPOrderUUID == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderUUID' when calling generateOrderInvoice(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling generateOrderInvoice(Async)");
        }

        // verify the required parameter 'generateOrderInvoiceRequest' is set
        if (generateOrderInvoiceRequest == null) {
            throw new ApiException("Missing the required parameter 'generateOrderInvoiceRequest' when calling generateOrderInvoice(Async)");
        }

        return generateOrderInvoiceCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, userName, generateOrderInvoiceRequest, _callback);

    }

    /**
     * Generate an Order Invoice
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateOrderInvoiceRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void generateOrderInvoice(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, String userName, GenerateOrderInvoiceRequest generateOrderInvoiceRequest) throws ApiException {
        generateOrderInvoiceWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderUUID, userName, generateOrderInvoiceRequest);
    }

    /**
     * Generate an Order Invoice
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateOrderInvoiceRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateOrderInvoiceWithHttpInfo(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, String userName, GenerateOrderInvoiceRequest generateOrderInvoiceRequest) throws ApiException {
        okhttp3.Call localVarCall = generateOrderInvoiceValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, userName, generateOrderInvoiceRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate an Order Invoice (asynchronously)
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param generateOrderInvoiceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request Accepted. </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many Requests. Please retry in a few seconds  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateOrderInvoiceAsync(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, String userName, GenerateOrderInvoiceRequest generateOrderInvoiceRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateOrderInvoiceValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, userName, generateOrderInvoiceRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderInvoicePdf
     * @param getOrderInvoicePdfFromHtmlInvoiceUrlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PDF version of the HTML invoice URL in the request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicePdfCall(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest getOrderInvoicePdfFromHtmlInvoiceUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getOrderInvoicePdfFromHtmlInvoiceUrlRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/getPdfInvoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoicePdfValidateBeforeCall(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest getOrderInvoicePdfFromHtmlInvoiceUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getOrderInvoicePdfFromHtmlInvoiceUrlRequest' is set
        if (getOrderInvoicePdfFromHtmlInvoiceUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'getOrderInvoicePdfFromHtmlInvoiceUrlRequest' when calling getOrderInvoicePdf(Async)");
        }

        return getOrderInvoicePdfCall(getOrderInvoicePdfFromHtmlInvoiceUrlRequest, _callback);

    }

    /**
     * Returns the PDF version of the invoice
     * 
     * @param getOrderInvoicePdfFromHtmlInvoiceUrlRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PDF version of the HTML invoice URL in the request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public File getOrderInvoicePdf(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest getOrderInvoicePdfFromHtmlInvoiceUrlRequest) throws ApiException {
        ApiResponse<File> localVarResp = getOrderInvoicePdfWithHttpInfo(getOrderInvoicePdfFromHtmlInvoiceUrlRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the PDF version of the invoice
     * 
     * @param getOrderInvoicePdfFromHtmlInvoiceUrlRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PDF version of the HTML invoice URL in the request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getOrderInvoicePdfWithHttpInfo(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest getOrderInvoicePdfFromHtmlInvoiceUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoicePdfValidateBeforeCall(getOrderInvoicePdfFromHtmlInvoiceUrlRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the PDF version of the invoice (asynchronously)
     * 
     * @param getOrderInvoicePdfFromHtmlInvoiceUrlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PDF version of the HTML invoice URL in the request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The ownerId is not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order invoice does not exist  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicePdfAsync(GetOrderInvoicePdfFromHtmlInvoiceUrlRequest getOrderInvoicePdfFromHtmlInvoiceUrlRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoicePdfValidateBeforeCall(getOrderInvoicePdfFromHtmlInvoiceUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderInvoicePreview
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param previewOrderInvoiceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Invoice preview successfully returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicePreviewCall(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, List<String> acceptEncoding, PreviewOrderInvoiceRequest previewOrderInvoiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = previewOrderInvoiceRequest;

        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/preview"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderUUID" + "}", localVarApiClient.escapeString(beezUPOrderUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderInvoicePreviewValidateBeforeCall(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, List<String> acceptEncoding, PreviewOrderInvoiceRequest previewOrderInvoiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderInvoicePreview(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderInvoicePreview(Async)");
        }

        // verify the required parameter 'beezUPOrderUUID' is set
        if (beezUPOrderUUID == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderUUID' when calling getOrderInvoicePreview(Async)");
        }

        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getOrderInvoicePreview(Async)");
        }

        // verify the required parameter 'previewOrderInvoiceRequest' is set
        if (previewOrderInvoiceRequest == null) {
            throw new ApiException("Missing the required parameter 'previewOrderInvoiceRequest' when calling getOrderInvoicePreview(Async)");
        }

        return getOrderInvoicePreviewCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, acceptEncoding, previewOrderInvoiceRequest, _callback);

    }

    /**
     * View a preview an Order Invoice
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param previewOrderInvoiceRequest  (required)
     * @return PreviewOrderInvoiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Invoice preview successfully returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public PreviewOrderInvoiceResponse getOrderInvoicePreview(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, List<String> acceptEncoding, PreviewOrderInvoiceRequest previewOrderInvoiceRequest) throws ApiException {
        ApiResponse<PreviewOrderInvoiceResponse> localVarResp = getOrderInvoicePreviewWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderUUID, acceptEncoding, previewOrderInvoiceRequest);
        return localVarResp.getData();
    }

    /**
     * View a preview an Order Invoice
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param previewOrderInvoiceRequest  (required)
     * @return ApiResponse&lt;PreviewOrderInvoiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Invoice preview successfully returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewOrderInvoiceResponse> getOrderInvoicePreviewWithHttpInfo(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, List<String> acceptEncoding, PreviewOrderInvoiceRequest previewOrderInvoiceRequest) throws ApiException {
        okhttp3.Call localVarCall = getOrderInvoicePreviewValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, acceptEncoding, previewOrderInvoiceRequest, null);
        Type localVarReturnType = new TypeToken<PreviewOrderInvoiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a preview an Order Invoice (asynchronously)
     * 
     * @param marketplaceTechnicalCode The Marketplace Technical Code (required)
     * @param accountId The Account Identifier (required)
     * @param beezUPOrderUUID The BeezUP Order UUID (required)
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param previewOrderInvoiceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Invoice preview successfully returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> OwnerId not authorized The required order invoice settings have not been set BeezUPOrderStatus forbidden  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The order cannot be retrieved  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The InvoiceNumber is already used There is already an invoice for this order  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderInvoicePreviewAsync(String marketplaceTechnicalCode, String accountId, String beezUPOrderUUID, List<String> acceptEncoding, PreviewOrderInvoiceRequest previewOrderInvoiceRequest, final ApiCallback<PreviewOrderInvoiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderInvoicePreviewValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderUUID, acceptEncoding, previewOrderInvoiceRequest, _callback);
        Type localVarReturnType = new TypeToken<PreviewOrderInvoiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
