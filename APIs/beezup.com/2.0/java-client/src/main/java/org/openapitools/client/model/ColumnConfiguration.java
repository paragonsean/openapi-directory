/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BeezUPCommonColumnDataType;
import org.openapitools.client.model.BeezUPCommonColumnImportance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates the configuration applied on the column (catalog or custom) during the importation process.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnConfiguration {
  public static final String SERIALIZED_NAME_BEEZ_U_P_COLUMN_NAME = "beezUPColumnName";
  @SerializedName(SERIALIZED_NAME_BEEZ_U_P_COLUMN_NAME)
  private String beezUPColumnName;

  public static final String SERIALIZED_NAME_CAN_BE_TRUNCATED = "canBeTruncated";
  @SerializedName(SERIALIZED_NAME_CAN_BE_TRUNCATED)
  private Boolean canBeTruncated = false;

  public static final String SERIALIZED_NAME_COLUMN_CULTURE_NAME = "columnCultureName";
  @SerializedName(SERIALIZED_NAME_COLUMN_CULTURE_NAME)
  private String columnCultureName;

  public static final String SERIALIZED_NAME_COLUMN_DATA_TYPE = "columnDataType";
  @SerializedName(SERIALIZED_NAME_COLUMN_DATA_TYPE)
  private BeezUPCommonColumnDataType columnDataType = BeezUPCommonColumnDataType.STRING;

  public static final String SERIALIZED_NAME_COLUMN_FORMAT = "columnFormat";
  @SerializedName(SERIALIZED_NAME_COLUMN_FORMAT)
  private String columnFormat;

  public static final String SERIALIZED_NAME_COLUMN_IMPORTANCE = "columnImportance";
  @SerializedName(SERIALIZED_NAME_COLUMN_IMPORTANCE)
  private BeezUPCommonColumnImportance columnImportance = BeezUPCommonColumnImportance.OPTIONAL;

  public static final String SERIALIZED_NAME_DISPLAY_GROUP_NAME = "displayGroupName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_GROUP_NAME)
  private String displayGroupName;

  public ColumnConfiguration() {
  }

  public ColumnConfiguration beezUPColumnName(String beezUPColumnName) {
    this.beezUPColumnName = beezUPColumnName;
    return this;
  }

  /**
   * The BeezUP column name
   * @return beezUPColumnName
   */
  @javax.annotation.Nullable
  public String getBeezUPColumnName() {
    return beezUPColumnName;
  }

  public void setBeezUPColumnName(String beezUPColumnName) {
    this.beezUPColumnName = beezUPColumnName;
  }


  public ColumnConfiguration canBeTruncated(Boolean canBeTruncated) {
    this.canBeTruncated = canBeTruncated;
    return this;
  }

  /**
   * If the size of the value is greater than the limit we can truncate the value instead of failing...
   * @return canBeTruncated
   */
  @javax.annotation.Nullable
  public Boolean getCanBeTruncated() {
    return canBeTruncated;
  }

  public void setCanBeTruncated(Boolean canBeTruncated) {
    this.canBeTruncated = canBeTruncated;
  }


  public ColumnConfiguration columnCultureName(String columnCultureName) {
    this.columnCultureName = columnCultureName;
    return this;
  }

  /**
   * If non null, culture used to parse the value to the storage type of this column\\r\\n will be used for parsing and for consolidation proces
   * @return columnCultureName
   */
  @javax.annotation.Nullable
  public String getColumnCultureName() {
    return columnCultureName;
  }

  public void setColumnCultureName(String columnCultureName) {
    this.columnCultureName = columnCultureName;
  }


  public ColumnConfiguration columnDataType(BeezUPCommonColumnDataType columnDataType) {
    this.columnDataType = columnDataType;
    return this;
  }

  /**
   * Get columnDataType
   * @return columnDataType
   */
  @javax.annotation.Nonnull
  public BeezUPCommonColumnDataType getColumnDataType() {
    return columnDataType;
  }

  public void setColumnDataType(BeezUPCommonColumnDataType columnDataType) {
    this.columnDataType = columnDataType;
  }


  public ColumnConfiguration columnFormat(String columnFormat) {
    this.columnFormat = columnFormat;
    return this;
  }

  /**
   * If non null, format used to parse the value to the storage type of this column\\r\\n will be used for parsing and for consolidation proces
   * @return columnFormat
   */
  @javax.annotation.Nullable
  public String getColumnFormat() {
    return columnFormat;
  }

  public void setColumnFormat(String columnFormat) {
    this.columnFormat = columnFormat;
  }


  public ColumnConfiguration columnImportance(BeezUPCommonColumnImportance columnImportance) {
    this.columnImportance = columnImportance;
    return this;
  }

  /**
   * Get columnImportance
   * @return columnImportance
   */
  @javax.annotation.Nonnull
  public BeezUPCommonColumnImportance getColumnImportance() {
    return columnImportance;
  }

  public void setColumnImportance(BeezUPCommonColumnImportance columnImportance) {
    this.columnImportance = columnImportance;
  }


  public ColumnConfiguration displayGroupName(String displayGroupName) {
    this.displayGroupName = displayGroupName;
    return this;
  }

  /**
   * Indicate the display group name where the column must be putted
   * @return displayGroupName
   */
  @javax.annotation.Nullable
  public String getDisplayGroupName() {
    return displayGroupName;
  }

  public void setDisplayGroupName(String displayGroupName) {
    this.displayGroupName = displayGroupName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnConfiguration columnConfiguration = (ColumnConfiguration) o;
    return Objects.equals(this.beezUPColumnName, columnConfiguration.beezUPColumnName) &&
        Objects.equals(this.canBeTruncated, columnConfiguration.canBeTruncated) &&
        Objects.equals(this.columnCultureName, columnConfiguration.columnCultureName) &&
        Objects.equals(this.columnDataType, columnConfiguration.columnDataType) &&
        Objects.equals(this.columnFormat, columnConfiguration.columnFormat) &&
        Objects.equals(this.columnImportance, columnConfiguration.columnImportance) &&
        Objects.equals(this.displayGroupName, columnConfiguration.displayGroupName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beezUPColumnName, canBeTruncated, columnCultureName, columnDataType, columnFormat, columnImportance, displayGroupName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnConfiguration {\n");
    sb.append("    beezUPColumnName: ").append(toIndentedString(beezUPColumnName)).append("\n");
    sb.append("    canBeTruncated: ").append(toIndentedString(canBeTruncated)).append("\n");
    sb.append("    columnCultureName: ").append(toIndentedString(columnCultureName)).append("\n");
    sb.append("    columnDataType: ").append(toIndentedString(columnDataType)).append("\n");
    sb.append("    columnFormat: ").append(toIndentedString(columnFormat)).append("\n");
    sb.append("    columnImportance: ").append(toIndentedString(columnImportance)).append("\n");
    sb.append("    displayGroupName: ").append(toIndentedString(displayGroupName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beezUPColumnName");
    openapiFields.add("canBeTruncated");
    openapiFields.add("columnCultureName");
    openapiFields.add("columnDataType");
    openapiFields.add("columnFormat");
    openapiFields.add("columnImportance");
    openapiFields.add("displayGroupName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columnDataType");
    openapiRequiredFields.add("columnImportance");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnConfiguration is not found in the empty JSON string", ColumnConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ColumnConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beezUPColumnName") != null && !jsonObj.get("beezUPColumnName").isJsonNull()) && !jsonObj.get("beezUPColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beezUPColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beezUPColumnName").toString()));
      }
      if ((jsonObj.get("columnCultureName") != null && !jsonObj.get("columnCultureName").isJsonNull()) && !jsonObj.get("columnCultureName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnCultureName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnCultureName").toString()));
      }
      // validate the required field `columnDataType`
      BeezUPCommonColumnDataType.validateJsonElement(jsonObj.get("columnDataType"));
      if ((jsonObj.get("columnFormat") != null && !jsonObj.get("columnFormat").isJsonNull()) && !jsonObj.get("columnFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnFormat").toString()));
      }
      // validate the required field `columnImportance`
      BeezUPCommonColumnImportance.validateJsonElement(jsonObj.get("columnImportance"));
      if ((jsonObj.get("displayGroupName") != null && !jsonObj.get("displayGroupName").isJsonNull()) && !jsonObj.get("displayGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayGroupName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnConfiguration>() {
           @Override
           public void write(JsonWriter out, ColumnConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnConfiguration
   * @throws IOException if the JSON string is invalid with respect to ColumnConfiguration
   */
  public static ColumnConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnConfiguration.class);
  }

  /**
   * Convert an instance of ColumnConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

