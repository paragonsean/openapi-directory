/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelInfoDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelInfoDetails {
  public static final String SERIALIZED_NAME_BUSINESS_MODEL = "businessModel";
  @SerializedName(SERIALIZED_NAME_BUSINESS_MODEL)
  private String businessModel;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private String channelType;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private String costs;

  public static final String SERIALIZED_NAME_HOME_URL = "homeUrl";
  @SerializedName(SERIALIZED_NAME_HOME_URL)
  private URI homeUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_LINK = "subscriptionLink";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_LINK)
  private String subscriptionLink;

  public static final String SERIALIZED_NAME_TRACKING_TYPE = "trackingType";
  @SerializedName(SERIALIZED_NAME_TRACKING_TYPE)
  private String trackingType;

  public ChannelInfoDetails() {
  }

  public ChannelInfoDetails businessModel(String businessModel) {
    this.businessModel = businessModel;
    return this;
  }

  /**
   * The business model of the channel
   * @return businessModel
   */
  @javax.annotation.Nullable
  public String getBusinessModel() {
    return businessModel;
  }

  public void setBusinessModel(String businessModel) {
    this.businessModel = businessModel;
  }


  public ChannelInfoDetails category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The channel category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public ChannelInfoDetails channelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  /**
   * The channel type
   * @return channelType
   */
  @javax.annotation.Nullable
  public String getChannelType() {
    return channelType;
  }

  public void setChannelType(String channelType) {
    this.channelType = channelType;
  }


  public ChannelInfoDetails costs(String costs) {
    this.costs = costs;
    return this;
  }

  /**
   * The cost&#39;s description of the channel
   * @return costs
   */
  @javax.annotation.Nullable
  public String getCosts() {
    return costs;
  }

  public void setCosts(String costs) {
    this.costs = costs;
  }


  public ChannelInfoDetails homeUrl(URI homeUrl) {
    this.homeUrl = homeUrl;
    return this;
  }

  /**
   * The home url of the channel
   * @return homeUrl
   */
  @javax.annotation.Nullable
  public URI getHomeUrl() {
    return homeUrl;
  }

  public void setHomeUrl(URI homeUrl) {
    this.homeUrl = homeUrl;
  }


  public ChannelInfoDetails subscriptionLink(String subscriptionLink) {
    this.subscriptionLink = subscriptionLink;
    return this;
  }

  /**
   * The subscription link to the channel
   * @return subscriptionLink
   */
  @javax.annotation.Nullable
  public String getSubscriptionLink() {
    return subscriptionLink;
  }

  public void setSubscriptionLink(String subscriptionLink) {
    this.subscriptionLink = subscriptionLink;
  }


  public ChannelInfoDetails trackingType(String trackingType) {
    this.trackingType = trackingType;
    return this;
  }

  /**
   * The tracking type
   * @return trackingType
   */
  @javax.annotation.Nullable
  public String getTrackingType() {
    return trackingType;
  }

  public void setTrackingType(String trackingType) {
    this.trackingType = trackingType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelInfoDetails channelInfoDetails = (ChannelInfoDetails) o;
    return Objects.equals(this.businessModel, channelInfoDetails.businessModel) &&
        Objects.equals(this.category, channelInfoDetails.category) &&
        Objects.equals(this.channelType, channelInfoDetails.channelType) &&
        Objects.equals(this.costs, channelInfoDetails.costs) &&
        Objects.equals(this.homeUrl, channelInfoDetails.homeUrl) &&
        Objects.equals(this.subscriptionLink, channelInfoDetails.subscriptionLink) &&
        Objects.equals(this.trackingType, channelInfoDetails.trackingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessModel, category, channelType, costs, homeUrl, subscriptionLink, trackingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelInfoDetails {\n");
    sb.append("    businessModel: ").append(toIndentedString(businessModel)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    homeUrl: ").append(toIndentedString(homeUrl)).append("\n");
    sb.append("    subscriptionLink: ").append(toIndentedString(subscriptionLink)).append("\n");
    sb.append("    trackingType: ").append(toIndentedString(trackingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessModel");
    openapiFields.add("category");
    openapiFields.add("channelType");
    openapiFields.add("costs");
    openapiFields.add("homeUrl");
    openapiFields.add("subscriptionLink");
    openapiFields.add("trackingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelInfoDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelInfoDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelInfoDetails is not found in the empty JSON string", ChannelInfoDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelInfoDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelInfoDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessModel") != null && !jsonObj.get("businessModel").isJsonNull()) && !jsonObj.get("businessModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessModel").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("channelType") != null && !jsonObj.get("channelType").isJsonNull()) && !jsonObj.get("channelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelType").toString()));
      }
      if ((jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) && !jsonObj.get("costs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costs").toString()));
      }
      if ((jsonObj.get("homeUrl") != null && !jsonObj.get("homeUrl").isJsonNull()) && !jsonObj.get("homeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeUrl").toString()));
      }
      if ((jsonObj.get("subscriptionLink") != null && !jsonObj.get("subscriptionLink").isJsonNull()) && !jsonObj.get("subscriptionLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionLink").toString()));
      }
      if ((jsonObj.get("trackingType") != null && !jsonObj.get("trackingType").isJsonNull()) && !jsonObj.get("trackingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelInfoDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelInfoDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelInfoDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelInfoDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelInfoDetails>() {
           @Override
           public void write(JsonWriter out, ChannelInfoDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelInfoDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelInfoDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelInfoDetails
   * @throws IOException if the JSON string is invalid with respect to ChannelInfoDetails
   */
  public static ChannelInfoDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelInfoDetails.class);
  }

  /**
   * Convert an instance of ChannelInfoDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

