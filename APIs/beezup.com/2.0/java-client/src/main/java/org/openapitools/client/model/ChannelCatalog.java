/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelCatalogCategoryMappingSettings;
import org.openapitools.client.model.ChannelCatalogColumnMappingWithName;
import org.openapitools.client.model.ChannelCatalogLinks;
import org.openapitools.client.model.ChannelCatalogState;
import org.openapitools.client.model.ChannelCategorySettings;
import org.openapitools.client.model.ChannelCostSettings;
import org.openapitools.client.model.CostSettings;
import org.openapitools.client.model.ExclusionFilter;
import org.openapitools.client.model.GeneralSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelCatalog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelCatalog {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_IMAGE_URL = "channelImageUrl";
  @SerializedName(SERIALIZED_NAME_CHANNEL_IMAGE_URL)
  private String channelImageUrl;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CATEGORY_MAPPING_SETTINGS = "categoryMappingSettings";
  @SerializedName(SERIALIZED_NAME_CATEGORY_MAPPING_SETTINGS)
  private ChannelCatalogCategoryMappingSettings categoryMappingSettings;

  public static final String SERIALIZED_NAME_CHANNEL_CATALOG_ID = "channelCatalogId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CATALOG_ID)
  private String channelCatalogId;

  public static final String SERIALIZED_NAME_CHANNEL_CATEGORY_SETTINGS = "channelCategorySettings";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CATEGORY_SETTINGS)
  private ChannelCategorySettings channelCategorySettings;

  public static final String SERIALIZED_NAME_CHANNEL_COST_SETTINGS = "channelCostSettings";
  @SerializedName(SERIALIZED_NAME_CHANNEL_COST_SETTINGS)
  private ChannelCostSettings channelCostSettings;

  public static final String SERIALIZED_NAME_COLUMN_MAPPINGS = "columnMappings";
  @SerializedName(SERIALIZED_NAME_COLUMN_MAPPINGS)
  private List<ChannelCatalogColumnMappingWithName> columnMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_COST_SETTINGS = "costSettings";
  @SerializedName(SERIALIZED_NAME_COST_SETTINGS)
  private CostSettings costSettings;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXCLUSION_FILTERS = "exclusionFilters";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_FILTERS)
  private List<ExclusionFilter> exclusionFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPORT_URL = "exportUrl";
  @SerializedName(SERIALIZED_NAME_EXPORT_URL)
  private String exportUrl;

  public static final String SERIALIZED_NAME_GENERAL_SETTINGS = "generalSettings";
  @SerializedName(SERIALIZED_NAME_GENERAL_SETTINGS)
  private GeneralSettings generalSettings;

  public static final String SERIALIZED_NAME_IS_MARKETPLACE = "isMarketplace";
  @SerializedName(SERIALIZED_NAME_IS_MARKETPLACE)
  private Boolean isMarketplace;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ChannelCatalogLinks links;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ChannelCatalogState state;

  public static final String SERIALIZED_NAME_STORE_ID = "storeId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public ChannelCatalog() {
  }

  public ChannelCatalog channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The channel identifier
   * @return channelId
   */
  @javax.annotation.Nonnull
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public ChannelCatalog channelImageUrl(String channelImageUrl) {
    this.channelImageUrl = channelImageUrl;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return channelImageUrl
   */
  @javax.annotation.Nonnull
  public String getChannelImageUrl() {
    return channelImageUrl;
  }

  public void setChannelImageUrl(String channelImageUrl) {
    this.channelImageUrl = channelImageUrl;
  }


  public ChannelCatalog channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * The channel name
   * @return channelName
   */
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public ChannelCatalog categoryMappingSettings(ChannelCatalogCategoryMappingSettings categoryMappingSettings) {
    this.categoryMappingSettings = categoryMappingSettings;
    return this;
  }

  /**
   * Get categoryMappingSettings
   * @return categoryMappingSettings
   */
  @javax.annotation.Nullable
  public ChannelCatalogCategoryMappingSettings getCategoryMappingSettings() {
    return categoryMappingSettings;
  }

  public void setCategoryMappingSettings(ChannelCatalogCategoryMappingSettings categoryMappingSettings) {
    this.categoryMappingSettings = categoryMappingSettings;
  }


  public ChannelCatalog channelCatalogId(String channelCatalogId) {
    this.channelCatalogId = channelCatalogId;
    return this;
  }

  /**
   * The channel catalog identifier
   * @return channelCatalogId
   */
  @javax.annotation.Nonnull
  public String getChannelCatalogId() {
    return channelCatalogId;
  }

  public void setChannelCatalogId(String channelCatalogId) {
    this.channelCatalogId = channelCatalogId;
  }


  public ChannelCatalog channelCategorySettings(ChannelCategorySettings channelCategorySettings) {
    this.channelCategorySettings = channelCategorySettings;
    return this;
  }

  /**
   * Get channelCategorySettings
   * @return channelCategorySettings
   */
  @javax.annotation.Nonnull
  public ChannelCategorySettings getChannelCategorySettings() {
    return channelCategorySettings;
  }

  public void setChannelCategorySettings(ChannelCategorySettings channelCategorySettings) {
    this.channelCategorySettings = channelCategorySettings;
  }


  public ChannelCatalog channelCostSettings(ChannelCostSettings channelCostSettings) {
    this.channelCostSettings = channelCostSettings;
    return this;
  }

  /**
   * Get channelCostSettings
   * @return channelCostSettings
   */
  @javax.annotation.Nonnull
  public ChannelCostSettings getChannelCostSettings() {
    return channelCostSettings;
  }

  public void setChannelCostSettings(ChannelCostSettings channelCostSettings) {
    this.channelCostSettings = channelCostSettings;
  }


  public ChannelCatalog columnMappings(List<ChannelCatalogColumnMappingWithName> columnMappings) {
    this.columnMappings = columnMappings;
    return this;
  }

  public ChannelCatalog addColumnMappingsItem(ChannelCatalogColumnMappingWithName columnMappingsItem) {
    if (this.columnMappings == null) {
      this.columnMappings = new ArrayList<>();
    }
    this.columnMappings.add(columnMappingsItem);
    return this;
  }

  /**
   * The column mapping list between a channel and a catalog
   * @return columnMappings
   */
  @javax.annotation.Nullable
  public List<ChannelCatalogColumnMappingWithName> getColumnMappings() {
    return columnMappings;
  }

  public void setColumnMappings(List<ChannelCatalogColumnMappingWithName> columnMappings) {
    this.columnMappings = columnMappings;
  }


  public ChannelCatalog costSettings(CostSettings costSettings) {
    this.costSettings = costSettings;
    return this;
  }

  /**
   * Get costSettings
   * @return costSettings
   */
  @javax.annotation.Nullable
  public CostSettings getCostSettings() {
    return costSettings;
  }

  public void setCostSettings(CostSettings costSettings) {
    this.costSettings = costSettings;
  }


  public ChannelCatalog enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates if the channel catalog is enable
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ChannelCatalog exclusionFilters(List<ExclusionFilter> exclusionFilters) {
    this.exclusionFilters = exclusionFilters;
    return this;
  }

  public ChannelCatalog addExclusionFiltersItem(ExclusionFilter exclusionFiltersItem) {
    if (this.exclusionFilters == null) {
      this.exclusionFilters = new ArrayList<>();
    }
    this.exclusionFilters.add(exclusionFiltersItem);
    return this;
  }

  /**
   * The exclusion filter list
   * @return exclusionFilters
   */
  @javax.annotation.Nullable
  public List<ExclusionFilter> getExclusionFilters() {
    return exclusionFilters;
  }

  public void setExclusionFilters(List<ExclusionFilter> exclusionFilters) {
    this.exclusionFilters = exclusionFilters;
  }


  public ChannelCatalog exportUrl(String exportUrl) {
    this.exportUrl = exportUrl;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return exportUrl
   */
  @javax.annotation.Nullable
  public String getExportUrl() {
    return exportUrl;
  }

  public void setExportUrl(String exportUrl) {
    this.exportUrl = exportUrl;
  }


  public ChannelCatalog generalSettings(GeneralSettings generalSettings) {
    this.generalSettings = generalSettings;
    return this;
  }

  /**
   * Get generalSettings
   * @return generalSettings
   */
  @javax.annotation.Nonnull
  public GeneralSettings getGeneralSettings() {
    return generalSettings;
  }

  public void setGeneralSettings(GeneralSettings generalSettings) {
    this.generalSettings = generalSettings;
  }


  public ChannelCatalog isMarketplace(Boolean isMarketplace) {
    this.isMarketplace = isMarketplace;
    return this;
  }

  /**
   * Indicates if this channel catalog is related to a marketplace
   * @return isMarketplace
   */
  @javax.annotation.Nonnull
  public Boolean getIsMarketplace() {
    return isMarketplace;
  }

  public void setIsMarketplace(Boolean isMarketplace) {
    this.isMarketplace = isMarketplace;
  }


  public ChannelCatalog links(ChannelCatalogLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public ChannelCatalogLinks getLinks() {
    return links;
  }

  public void setLinks(ChannelCatalogLinks links) {
    this.links = links;
  }


  public ChannelCatalog state(ChannelCatalogState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public ChannelCatalogState getState() {
    return state;
  }

  public void setState(ChannelCatalogState state) {
    this.state = state;
  }


  public ChannelCatalog storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * The store identifier
   * @return storeId
   */
  @javax.annotation.Nonnull
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public ChannelCatalog types(List<String> types) {
    this.types = types;
    return this;
  }

  public ChannelCatalog addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * The channel type list related to the channel
   * @return types
   */
  @javax.annotation.Nonnull
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelCatalog channelCatalog = (ChannelCatalog) o;
    return Objects.equals(this.channelId, channelCatalog.channelId) &&
        Objects.equals(this.channelImageUrl, channelCatalog.channelImageUrl) &&
        Objects.equals(this.channelName, channelCatalog.channelName) &&
        Objects.equals(this.categoryMappingSettings, channelCatalog.categoryMappingSettings) &&
        Objects.equals(this.channelCatalogId, channelCatalog.channelCatalogId) &&
        Objects.equals(this.channelCategorySettings, channelCatalog.channelCategorySettings) &&
        Objects.equals(this.channelCostSettings, channelCatalog.channelCostSettings) &&
        Objects.equals(this.columnMappings, channelCatalog.columnMappings) &&
        Objects.equals(this.costSettings, channelCatalog.costSettings) &&
        Objects.equals(this.enabled, channelCatalog.enabled) &&
        Objects.equals(this.exclusionFilters, channelCatalog.exclusionFilters) &&
        Objects.equals(this.exportUrl, channelCatalog.exportUrl) &&
        Objects.equals(this.generalSettings, channelCatalog.generalSettings) &&
        Objects.equals(this.isMarketplace, channelCatalog.isMarketplace) &&
        Objects.equals(this.links, channelCatalog.links) &&
        Objects.equals(this.state, channelCatalog.state) &&
        Objects.equals(this.storeId, channelCatalog.storeId) &&
        Objects.equals(this.types, channelCatalog.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelImageUrl, channelName, categoryMappingSettings, channelCatalogId, channelCategorySettings, channelCostSettings, columnMappings, costSettings, enabled, exclusionFilters, exportUrl, generalSettings, isMarketplace, links, state, storeId, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelCatalog {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelImageUrl: ").append(toIndentedString(channelImageUrl)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    categoryMappingSettings: ").append(toIndentedString(categoryMappingSettings)).append("\n");
    sb.append("    channelCatalogId: ").append(toIndentedString(channelCatalogId)).append("\n");
    sb.append("    channelCategorySettings: ").append(toIndentedString(channelCategorySettings)).append("\n");
    sb.append("    channelCostSettings: ").append(toIndentedString(channelCostSettings)).append("\n");
    sb.append("    columnMappings: ").append(toIndentedString(columnMappings)).append("\n");
    sb.append("    costSettings: ").append(toIndentedString(costSettings)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    exclusionFilters: ").append(toIndentedString(exclusionFilters)).append("\n");
    sb.append("    exportUrl: ").append(toIndentedString(exportUrl)).append("\n");
    sb.append("    generalSettings: ").append(toIndentedString(generalSettings)).append("\n");
    sb.append("    isMarketplace: ").append(toIndentedString(isMarketplace)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("channelImageUrl");
    openapiFields.add("channelName");
    openapiFields.add("categoryMappingSettings");
    openapiFields.add("channelCatalogId");
    openapiFields.add("channelCategorySettings");
    openapiFields.add("channelCostSettings");
    openapiFields.add("columnMappings");
    openapiFields.add("costSettings");
    openapiFields.add("enabled");
    openapiFields.add("exclusionFilters");
    openapiFields.add("exportUrl");
    openapiFields.add("generalSettings");
    openapiFields.add("isMarketplace");
    openapiFields.add("links");
    openapiFields.add("state");
    openapiFields.add("storeId");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("channelImageUrl");
    openapiRequiredFields.add("channelName");
    openapiRequiredFields.add("channelCatalogId");
    openapiRequiredFields.add("channelCategorySettings");
    openapiRequiredFields.add("channelCostSettings");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("generalSettings");
    openapiRequiredFields.add("isMarketplace");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("storeId");
    openapiRequiredFields.add("types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelCatalog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelCatalog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelCatalog is not found in the empty JSON string", ChannelCatalog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelCatalog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelCatalog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelCatalog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if (!jsonObj.get("channelImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelImageUrl").toString()));
      }
      if (!jsonObj.get("channelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelName").toString()));
      }
      // validate the optional field `categoryMappingSettings`
      if (jsonObj.get("categoryMappingSettings") != null && !jsonObj.get("categoryMappingSettings").isJsonNull()) {
        ChannelCatalogCategoryMappingSettings.validateJsonElement(jsonObj.get("categoryMappingSettings"));
      }
      if (!jsonObj.get("channelCatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCatalogId").toString()));
      }
      // validate the required field `channelCategorySettings`
      ChannelCategorySettings.validateJsonElement(jsonObj.get("channelCategorySettings"));
      // validate the required field `channelCostSettings`
      ChannelCostSettings.validateJsonElement(jsonObj.get("channelCostSettings"));
      if (jsonObj.get("columnMappings") != null && !jsonObj.get("columnMappings").isJsonNull()) {
        JsonArray jsonArraycolumnMappings = jsonObj.getAsJsonArray("columnMappings");
        if (jsonArraycolumnMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnMappings` to be an array in the JSON string but got `%s`", jsonObj.get("columnMappings").toString()));
          }

          // validate the optional field `columnMappings` (array)
          for (int i = 0; i < jsonArraycolumnMappings.size(); i++) {
            ChannelCatalogColumnMappingWithName.validateJsonElement(jsonArraycolumnMappings.get(i));
          };
        }
      }
      // validate the optional field `costSettings`
      if (jsonObj.get("costSettings") != null && !jsonObj.get("costSettings").isJsonNull()) {
        CostSettings.validateJsonElement(jsonObj.get("costSettings"));
      }
      if (jsonObj.get("exclusionFilters") != null && !jsonObj.get("exclusionFilters").isJsonNull()) {
        JsonArray jsonArrayexclusionFilters = jsonObj.getAsJsonArray("exclusionFilters");
        if (jsonArrayexclusionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("exclusionFilters").toString()));
          }

          // validate the optional field `exclusionFilters` (array)
          for (int i = 0; i < jsonArrayexclusionFilters.size(); i++) {
            ExclusionFilter.validateJsonElement(jsonArrayexclusionFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("exportUrl") != null && !jsonObj.get("exportUrl").isJsonNull()) && !jsonObj.get("exportUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportUrl").toString()));
      }
      // validate the required field `generalSettings`
      GeneralSettings.validateJsonElement(jsonObj.get("generalSettings"));
      // validate the required field `links`
      ChannelCatalogLinks.validateJsonElement(jsonObj.get("links"));
      // validate the required field `state`
      ChannelCatalogState.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("storeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelCatalog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelCatalog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelCatalog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelCatalog.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelCatalog>() {
           @Override
           public void write(JsonWriter out, ChannelCatalog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelCatalog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelCatalog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelCatalog
   * @throws IOException if the JSON string is invalid with respect to ChannelCatalog
   */
  public static ChannelCatalog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelCatalog.class);
  }

  /**
   * Convert an instance of ChannelCatalog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

