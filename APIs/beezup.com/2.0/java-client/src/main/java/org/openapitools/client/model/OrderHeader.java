/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.OrderHeaderLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderHeader {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_BEEZ_U_P_ORDER_ID = "beezUPOrderId";
  @SerializedName(SERIALIZED_NAME_BEEZ_U_P_ORDER_ID)
  private UUID beezUPOrderId;

  public static final String SERIALIZED_NAME_BEEZ_U_P_ORDER_URL = "beezUPOrderUrl";
  @SerializedName(SERIALIZED_NAME_BEEZ_U_P_ORDER_URL)
  private String beezUPOrderUrl;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private OrderHeaderLinks links;

  public static final String SERIALIZED_NAME_MARKETPLACE_BUSINESS_CODE = "marketplaceBusinessCode";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_BUSINESS_CODE)
  private String marketplaceBusinessCode;

  public static final String SERIALIZED_NAME_MARKETPLACE_TECHNICAL_CODE = "marketplaceTechnicalCode";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_TECHNICAL_CODE)
  private String marketplaceTechnicalCode;

  public static final String SERIALIZED_NAME_ORDER_BUYER_NAME = "order_Buyer_Name";
  @SerializedName(SERIALIZED_NAME_ORDER_BUYER_NAME)
  private String orderBuyerName;

  public static final String SERIALIZED_NAME_ORDER_CURRENCY_CODE = "order_CurrencyCode";
  @SerializedName(SERIALIZED_NAME_ORDER_CURRENCY_CODE)
  private String orderCurrencyCode;

  public static final String SERIALIZED_NAME_ORDER_INVOICE_NUMBER = "order_Invoice_Number";
  @SerializedName(SERIALIZED_NAME_ORDER_INVOICE_NUMBER)
  private String orderInvoiceNumber;

  public static final String SERIALIZED_NAME_ORDER_INVOICE_URI = "order_Invoice_Uri";
  @SerializedName(SERIALIZED_NAME_ORDER_INVOICE_URI)
  private String orderInvoiceUri;

  public static final String SERIALIZED_NAME_ORDER_LAST_MODIFICATION_UTC_DATE = "order_LastModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_ORDER_LAST_MODIFICATION_UTC_DATE)
  private OffsetDateTime orderLastModificationUtcDate;

  public static final String SERIALIZED_NAME_ORDER_MARKETPLACE_LAST_MODIFICATION_UTC_DATE = "order_MarketplaceLastModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_ORDER_MARKETPLACE_LAST_MODIFICATION_UTC_DATE)
  private OffsetDateTime orderMarketplaceLastModificationUtcDate;

  public static final String SERIALIZED_NAME_ORDER_MARKETPLACE_ORDER_ID = "order_MarketplaceOrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_MARKETPLACE_ORDER_ID)
  private String orderMarketplaceOrderId;

  public static final String SERIALIZED_NAME_ORDER_MERCHANT_E_COMMERCE_SOFTWARE_NAME = "order_MerchantECommerceSoftwareName";
  @SerializedName(SERIALIZED_NAME_ORDER_MERCHANT_E_COMMERCE_SOFTWARE_NAME)
  private String orderMerchantECommerceSoftwareName;

  public static final String SERIALIZED_NAME_ORDER_MERCHANT_E_COMMERCE_SOFTWARE_VERSION = "order_MerchantECommerceSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_ORDER_MERCHANT_E_COMMERCE_SOFTWARE_VERSION)
  private String orderMerchantECommerceSoftwareVersion;

  public static final String SERIALIZED_NAME_ORDER_MERCHANT_ORDER_ID = "order_MerchantOrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_MERCHANT_ORDER_ID)
  private String orderMerchantOrderId;

  public static final String SERIALIZED_NAME_ORDER_PURCHASE_UTC_DATE = "order_PurchaseUtcDate";
  @SerializedName(SERIALIZED_NAME_ORDER_PURCHASE_UTC_DATE)
  private OffsetDateTime orderPurchaseUtcDate;

  public static final String SERIALIZED_NAME_ORDER_STATUS_BEEZ_U_P_ORDER_STATUS = "order_Status_BeezUPOrderStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS_BEEZ_U_P_ORDER_STATUS)
  private String orderStatusBeezUPOrderStatus;

  public static final String SERIALIZED_NAME_ORDER_STATUS_MARKETPLACE_ORDER_STATUS = "order_Status_MarketplaceOrderStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS_MARKETPLACE_ORDER_STATUS)
  private String orderStatusMarketplaceOrderStatus;

  public static final String SERIALIZED_NAME_ORDER_TOTAL_PRICE = "order_TotalPrice";
  @SerializedName(SERIALIZED_NAME_ORDER_TOTAL_PRICE)
  private BigDecimal orderTotalPrice;

  public static final String SERIALIZED_NAME_PROCESSING = "processing";
  @SerializedName(SERIALIZED_NAME_PROCESSING)
  private Boolean processing;

  public OrderHeader() {
  }

  public OrderHeader accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public OrderHeader beezUPOrderId(UUID beezUPOrderId) {
    this.beezUPOrderId = beezUPOrderId;
    return this;
  }

  /**
   * The BeezUP Order identifier
   * @return beezUPOrderId
   */
  @javax.annotation.Nonnull
  public UUID getBeezUPOrderId() {
    return beezUPOrderId;
  }

  public void setBeezUPOrderId(UUID beezUPOrderId) {
    this.beezUPOrderId = beezUPOrderId;
  }


  public OrderHeader beezUPOrderUrl(String beezUPOrderUrl) {
    this.beezUPOrderUrl = beezUPOrderUrl;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return beezUPOrderUrl
   */
  @javax.annotation.Nullable
  public String getBeezUPOrderUrl() {
    return beezUPOrderUrl;
  }

  public void setBeezUPOrderUrl(String beezUPOrderUrl) {
    this.beezUPOrderUrl = beezUPOrderUrl;
  }


  public OrderHeader etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag value to identify the order.\\ This information is required for the operation GetOrder and ChangeOrder.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
   * @return etag
   */
  @javax.annotation.Nonnull
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public OrderHeader links(OrderHeaderLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public OrderHeaderLinks getLinks() {
    return links;
  }

  public void setLinks(OrderHeaderLinks links) {
    this.links = links;
  }


  public OrderHeader marketplaceBusinessCode(String marketplaceBusinessCode) {
    this.marketplaceBusinessCode = marketplaceBusinessCode;
    return this;
  }

  /**
   * In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
   * @return marketplaceBusinessCode
   */
  @javax.annotation.Nonnull
  public String getMarketplaceBusinessCode() {
    return marketplaceBusinessCode;
  }

  public void setMarketplaceBusinessCode(String marketplaceBusinessCode) {
    this.marketplaceBusinessCode = marketplaceBusinessCode;
  }


  public OrderHeader marketplaceTechnicalCode(String marketplaceTechnicalCode) {
    this.marketplaceTechnicalCode = marketplaceTechnicalCode;
    return this;
  }

  /**
   * The technical code of the marketplace.
   * @return marketplaceTechnicalCode
   */
  @javax.annotation.Nonnull
  public String getMarketplaceTechnicalCode() {
    return marketplaceTechnicalCode;
  }

  public void setMarketplaceTechnicalCode(String marketplaceTechnicalCode) {
    this.marketplaceTechnicalCode = marketplaceTechnicalCode;
  }


  public OrderHeader orderBuyerName(String orderBuyerName) {
    this.orderBuyerName = orderBuyerName;
    return this;
  }

  /**
   * Buyer full name
   * @return orderBuyerName
   */
  @javax.annotation.Nullable
  public String getOrderBuyerName() {
    return orderBuyerName;
  }

  public void setOrderBuyerName(String orderBuyerName) {
    this.orderBuyerName = orderBuyerName;
  }


  public OrderHeader orderCurrencyCode(String orderCurrencyCode) {
    this.orderCurrencyCode = orderCurrencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return orderCurrencyCode
   */
  @javax.annotation.Nullable
  public String getOrderCurrencyCode() {
    return orderCurrencyCode;
  }

  public void setOrderCurrencyCode(String orderCurrencyCode) {
    this.orderCurrencyCode = orderCurrencyCode;
  }


  public OrderHeader orderInvoiceNumber(String orderInvoiceNumber) {
    this.orderInvoiceNumber = orderInvoiceNumber;
    return this;
  }

  /**
   * The order invoice number
   * @return orderInvoiceNumber
   */
  @javax.annotation.Nullable
  public String getOrderInvoiceNumber() {
    return orderInvoiceNumber;
  }

  public void setOrderInvoiceNumber(String orderInvoiceNumber) {
    this.orderInvoiceNumber = orderInvoiceNumber;
  }


  public OrderHeader orderInvoiceUri(String orderInvoiceUri) {
    this.orderInvoiceUri = orderInvoiceUri;
    return this;
  }

  /**
   * The order invoice URI
   * @return orderInvoiceUri
   */
  @javax.annotation.Nullable
  public String getOrderInvoiceUri() {
    return orderInvoiceUri;
  }

  public void setOrderInvoiceUri(String orderInvoiceUri) {
    this.orderInvoiceUri = orderInvoiceUri;
  }


  public OrderHeader orderLastModificationUtcDate(OffsetDateTime orderLastModificationUtcDate) {
    this.orderLastModificationUtcDate = orderLastModificationUtcDate;
    return this;
  }

  /**
   * The last modification UTC date done by BeezUP of this order
   * @return orderLastModificationUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOrderLastModificationUtcDate() {
    return orderLastModificationUtcDate;
  }

  public void setOrderLastModificationUtcDate(OffsetDateTime orderLastModificationUtcDate) {
    this.orderLastModificationUtcDate = orderLastModificationUtcDate;
  }


  public OrderHeader orderMarketplaceLastModificationUtcDate(OffsetDateTime orderMarketplaceLastModificationUtcDate) {
    this.orderMarketplaceLastModificationUtcDate = orderMarketplaceLastModificationUtcDate;
    return this;
  }

  /**
   * The last modification UTC date done by the marketplace on this order
   * @return orderMarketplaceLastModificationUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOrderMarketplaceLastModificationUtcDate() {
    return orderMarketplaceLastModificationUtcDate;
  }

  public void setOrderMarketplaceLastModificationUtcDate(OffsetDateTime orderMarketplaceLastModificationUtcDate) {
    this.orderMarketplaceLastModificationUtcDate = orderMarketplaceLastModificationUtcDate;
  }


  public OrderHeader orderMarketplaceOrderId(String orderMarketplaceOrderId) {
    this.orderMarketplaceOrderId = orderMarketplaceOrderId;
    return this;
  }

  /**
   * The order marketplace identifier
   * @return orderMarketplaceOrderId
   */
  @javax.annotation.Nonnull
  public String getOrderMarketplaceOrderId() {
    return orderMarketplaceOrderId;
  }

  public void setOrderMarketplaceOrderId(String orderMarketplaceOrderId) {
    this.orderMarketplaceOrderId = orderMarketplaceOrderId;
  }


  public OrderHeader orderMerchantECommerceSoftwareName(String orderMerchantECommerceSoftwareName) {
    this.orderMerchantECommerceSoftwareName = orderMerchantECommerceSoftwareName;
    return this;
  }

  /**
   * The e-commerce software name of the merchant
   * @return orderMerchantECommerceSoftwareName
   */
  @javax.annotation.Nullable
  public String getOrderMerchantECommerceSoftwareName() {
    return orderMerchantECommerceSoftwareName;
  }

  public void setOrderMerchantECommerceSoftwareName(String orderMerchantECommerceSoftwareName) {
    this.orderMerchantECommerceSoftwareName = orderMerchantECommerceSoftwareName;
  }


  public OrderHeader orderMerchantECommerceSoftwareVersion(String orderMerchantECommerceSoftwareVersion) {
    this.orderMerchantECommerceSoftwareVersion = orderMerchantECommerceSoftwareVersion;
    return this;
  }

  /**
   * The e-commece software version of the merchant
   * @return orderMerchantECommerceSoftwareVersion
   */
  @javax.annotation.Nullable
  public String getOrderMerchantECommerceSoftwareVersion() {
    return orderMerchantECommerceSoftwareVersion;
  }

  public void setOrderMerchantECommerceSoftwareVersion(String orderMerchantECommerceSoftwareVersion) {
    this.orderMerchantECommerceSoftwareVersion = orderMerchantECommerceSoftwareVersion;
  }


  public OrderHeader orderMerchantOrderId(String orderMerchantOrderId) {
    this.orderMerchantOrderId = orderMerchantOrderId;
    return this;
  }

  /**
   * The order merchant identifier
   * @return orderMerchantOrderId
   */
  @javax.annotation.Nullable
  public String getOrderMerchantOrderId() {
    return orderMerchantOrderId;
  }

  public void setOrderMerchantOrderId(String orderMerchantOrderId) {
    this.orderMerchantOrderId = orderMerchantOrderId;
  }


  public OrderHeader orderPurchaseUtcDate(OffsetDateTime orderPurchaseUtcDate) {
    this.orderPurchaseUtcDate = orderPurchaseUtcDate;
    return this;
  }

  /**
   * The purchase date of this order
   * @return orderPurchaseUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOrderPurchaseUtcDate() {
    return orderPurchaseUtcDate;
  }

  public void setOrderPurchaseUtcDate(OffsetDateTime orderPurchaseUtcDate) {
    this.orderPurchaseUtcDate = orderPurchaseUtcDate;
  }


  public OrderHeader orderStatusBeezUPOrderStatus(String orderStatusBeezUPOrderStatus) {
    this.orderStatusBeezUPOrderStatus = orderStatusBeezUPOrderStatus;
    return this;
  }

  /**
   * BeezUP order status. Unified for all marketplaces.
   * @return orderStatusBeezUPOrderStatus
   */
  @javax.annotation.Nonnull
  public String getOrderStatusBeezUPOrderStatus() {
    return orderStatusBeezUPOrderStatus;
  }

  public void setOrderStatusBeezUPOrderStatus(String orderStatusBeezUPOrderStatus) {
    this.orderStatusBeezUPOrderStatus = orderStatusBeezUPOrderStatus;
  }


  public OrderHeader orderStatusMarketplaceOrderStatus(String orderStatusMarketplaceOrderStatus) {
    this.orderStatusMarketplaceOrderStatus = orderStatusMarketplaceOrderStatus;
    return this;
  }

  /**
   * The marketplace order state
   * @return orderStatusMarketplaceOrderStatus
   */
  @javax.annotation.Nullable
  public String getOrderStatusMarketplaceOrderStatus() {
    return orderStatusMarketplaceOrderStatus;
  }

  public void setOrderStatusMarketplaceOrderStatus(String orderStatusMarketplaceOrderStatus) {
    this.orderStatusMarketplaceOrderStatus = orderStatusMarketplaceOrderStatus;
  }


  public OrderHeader orderTotalPrice(BigDecimal orderTotalPrice) {
    this.orderTotalPrice = orderTotalPrice;
    return this;
  }

  /**
   * The total price of this order (corresponding to the amount paid by the customer)
   * @return orderTotalPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getOrderTotalPrice() {
    return orderTotalPrice;
  }

  public void setOrderTotalPrice(BigDecimal orderTotalPrice) {
    this.orderTotalPrice = orderTotalPrice;
  }


  public OrderHeader processing(Boolean processing) {
    this.processing = processing;
    return this;
  }

  /**
   * If true, there is currently a harvest or an order change in progress. Otherwise false.
   * @return processing
   */
  @javax.annotation.Nonnull
  public Boolean getProcessing() {
    return processing;
  }

  public void setProcessing(Boolean processing) {
    this.processing = processing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderHeader orderHeader = (OrderHeader) o;
    return Objects.equals(this.accountId, orderHeader.accountId) &&
        Objects.equals(this.beezUPOrderId, orderHeader.beezUPOrderId) &&
        Objects.equals(this.beezUPOrderUrl, orderHeader.beezUPOrderUrl) &&
        Objects.equals(this.etag, orderHeader.etag) &&
        Objects.equals(this.links, orderHeader.links) &&
        Objects.equals(this.marketplaceBusinessCode, orderHeader.marketplaceBusinessCode) &&
        Objects.equals(this.marketplaceTechnicalCode, orderHeader.marketplaceTechnicalCode) &&
        Objects.equals(this.orderBuyerName, orderHeader.orderBuyerName) &&
        Objects.equals(this.orderCurrencyCode, orderHeader.orderCurrencyCode) &&
        Objects.equals(this.orderInvoiceNumber, orderHeader.orderInvoiceNumber) &&
        Objects.equals(this.orderInvoiceUri, orderHeader.orderInvoiceUri) &&
        Objects.equals(this.orderLastModificationUtcDate, orderHeader.orderLastModificationUtcDate) &&
        Objects.equals(this.orderMarketplaceLastModificationUtcDate, orderHeader.orderMarketplaceLastModificationUtcDate) &&
        Objects.equals(this.orderMarketplaceOrderId, orderHeader.orderMarketplaceOrderId) &&
        Objects.equals(this.orderMerchantECommerceSoftwareName, orderHeader.orderMerchantECommerceSoftwareName) &&
        Objects.equals(this.orderMerchantECommerceSoftwareVersion, orderHeader.orderMerchantECommerceSoftwareVersion) &&
        Objects.equals(this.orderMerchantOrderId, orderHeader.orderMerchantOrderId) &&
        Objects.equals(this.orderPurchaseUtcDate, orderHeader.orderPurchaseUtcDate) &&
        Objects.equals(this.orderStatusBeezUPOrderStatus, orderHeader.orderStatusBeezUPOrderStatus) &&
        Objects.equals(this.orderStatusMarketplaceOrderStatus, orderHeader.orderStatusMarketplaceOrderStatus) &&
        Objects.equals(this.orderTotalPrice, orderHeader.orderTotalPrice) &&
        Objects.equals(this.processing, orderHeader.processing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, beezUPOrderId, beezUPOrderUrl, etag, links, marketplaceBusinessCode, marketplaceTechnicalCode, orderBuyerName, orderCurrencyCode, orderInvoiceNumber, orderInvoiceUri, orderLastModificationUtcDate, orderMarketplaceLastModificationUtcDate, orderMarketplaceOrderId, orderMerchantECommerceSoftwareName, orderMerchantECommerceSoftwareVersion, orderMerchantOrderId, orderPurchaseUtcDate, orderStatusBeezUPOrderStatus, orderStatusMarketplaceOrderStatus, orderTotalPrice, processing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderHeader {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    beezUPOrderId: ").append(toIndentedString(beezUPOrderId)).append("\n");
    sb.append("    beezUPOrderUrl: ").append(toIndentedString(beezUPOrderUrl)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    marketplaceBusinessCode: ").append(toIndentedString(marketplaceBusinessCode)).append("\n");
    sb.append("    marketplaceTechnicalCode: ").append(toIndentedString(marketplaceTechnicalCode)).append("\n");
    sb.append("    orderBuyerName: ").append(toIndentedString(orderBuyerName)).append("\n");
    sb.append("    orderCurrencyCode: ").append(toIndentedString(orderCurrencyCode)).append("\n");
    sb.append("    orderInvoiceNumber: ").append(toIndentedString(orderInvoiceNumber)).append("\n");
    sb.append("    orderInvoiceUri: ").append(toIndentedString(orderInvoiceUri)).append("\n");
    sb.append("    orderLastModificationUtcDate: ").append(toIndentedString(orderLastModificationUtcDate)).append("\n");
    sb.append("    orderMarketplaceLastModificationUtcDate: ").append(toIndentedString(orderMarketplaceLastModificationUtcDate)).append("\n");
    sb.append("    orderMarketplaceOrderId: ").append(toIndentedString(orderMarketplaceOrderId)).append("\n");
    sb.append("    orderMerchantECommerceSoftwareName: ").append(toIndentedString(orderMerchantECommerceSoftwareName)).append("\n");
    sb.append("    orderMerchantECommerceSoftwareVersion: ").append(toIndentedString(orderMerchantECommerceSoftwareVersion)).append("\n");
    sb.append("    orderMerchantOrderId: ").append(toIndentedString(orderMerchantOrderId)).append("\n");
    sb.append("    orderPurchaseUtcDate: ").append(toIndentedString(orderPurchaseUtcDate)).append("\n");
    sb.append("    orderStatusBeezUPOrderStatus: ").append(toIndentedString(orderStatusBeezUPOrderStatus)).append("\n");
    sb.append("    orderStatusMarketplaceOrderStatus: ").append(toIndentedString(orderStatusMarketplaceOrderStatus)).append("\n");
    sb.append("    orderTotalPrice: ").append(toIndentedString(orderTotalPrice)).append("\n");
    sb.append("    processing: ").append(toIndentedString(processing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("beezUPOrderId");
    openapiFields.add("beezUPOrderUrl");
    openapiFields.add("etag");
    openapiFields.add("links");
    openapiFields.add("marketplaceBusinessCode");
    openapiFields.add("marketplaceTechnicalCode");
    openapiFields.add("order_Buyer_Name");
    openapiFields.add("order_CurrencyCode");
    openapiFields.add("order_Invoice_Number");
    openapiFields.add("order_Invoice_Uri");
    openapiFields.add("order_LastModificationUtcDate");
    openapiFields.add("order_MarketplaceLastModificationUtcDate");
    openapiFields.add("order_MarketplaceOrderId");
    openapiFields.add("order_MerchantECommerceSoftwareName");
    openapiFields.add("order_MerchantECommerceSoftwareVersion");
    openapiFields.add("order_MerchantOrderId");
    openapiFields.add("order_PurchaseUtcDate");
    openapiFields.add("order_Status_BeezUPOrderStatus");
    openapiFields.add("order_Status_MarketplaceOrderStatus");
    openapiFields.add("order_TotalPrice");
    openapiFields.add("processing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("beezUPOrderId");
    openapiRequiredFields.add("etag");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("marketplaceBusinessCode");
    openapiRequiredFields.add("marketplaceTechnicalCode");
    openapiRequiredFields.add("order_LastModificationUtcDate");
    openapiRequiredFields.add("order_MarketplaceLastModificationUtcDate");
    openapiRequiredFields.add("order_MarketplaceOrderId");
    openapiRequiredFields.add("order_PurchaseUtcDate");
    openapiRequiredFields.add("order_Status_BeezUPOrderStatus");
    openapiRequiredFields.add("processing");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderHeader is not found in the empty JSON string", OrderHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderHeader.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("beezUPOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beezUPOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beezUPOrderId").toString()));
      }
      if ((jsonObj.get("beezUPOrderUrl") != null && !jsonObj.get("beezUPOrderUrl").isJsonNull()) && !jsonObj.get("beezUPOrderUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beezUPOrderUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beezUPOrderUrl").toString()));
      }
      if (!jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the required field `links`
      OrderHeaderLinks.validateJsonElement(jsonObj.get("links"));
      if (!jsonObj.get("marketplaceBusinessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceBusinessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceBusinessCode").toString()));
      }
      if (!jsonObj.get("marketplaceTechnicalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceTechnicalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceTechnicalCode").toString()));
      }
      if ((jsonObj.get("order_Buyer_Name") != null && !jsonObj.get("order_Buyer_Name").isJsonNull()) && !jsonObj.get("order_Buyer_Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Buyer_Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Buyer_Name").toString()));
      }
      if ((jsonObj.get("order_CurrencyCode") != null && !jsonObj.get("order_CurrencyCode").isJsonNull()) && !jsonObj.get("order_CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_CurrencyCode").toString()));
      }
      if ((jsonObj.get("order_Invoice_Number") != null && !jsonObj.get("order_Invoice_Number").isJsonNull()) && !jsonObj.get("order_Invoice_Number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Invoice_Number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Invoice_Number").toString()));
      }
      if ((jsonObj.get("order_Invoice_Uri") != null && !jsonObj.get("order_Invoice_Uri").isJsonNull()) && !jsonObj.get("order_Invoice_Uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Invoice_Uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Invoice_Uri").toString()));
      }
      if (!jsonObj.get("order_MarketplaceOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_MarketplaceOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_MarketplaceOrderId").toString()));
      }
      if ((jsonObj.get("order_MerchantECommerceSoftwareName") != null && !jsonObj.get("order_MerchantECommerceSoftwareName").isJsonNull()) && !jsonObj.get("order_MerchantECommerceSoftwareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_MerchantECommerceSoftwareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_MerchantECommerceSoftwareName").toString()));
      }
      if ((jsonObj.get("order_MerchantECommerceSoftwareVersion") != null && !jsonObj.get("order_MerchantECommerceSoftwareVersion").isJsonNull()) && !jsonObj.get("order_MerchantECommerceSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_MerchantECommerceSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_MerchantECommerceSoftwareVersion").toString()));
      }
      if ((jsonObj.get("order_MerchantOrderId") != null && !jsonObj.get("order_MerchantOrderId").isJsonNull()) && !jsonObj.get("order_MerchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_MerchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_MerchantOrderId").toString()));
      }
      if (!jsonObj.get("order_Status_BeezUPOrderStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Status_BeezUPOrderStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Status_BeezUPOrderStatus").toString()));
      }
      if ((jsonObj.get("order_Status_MarketplaceOrderStatus") != null && !jsonObj.get("order_Status_MarketplaceOrderStatus").isJsonNull()) && !jsonObj.get("order_Status_MarketplaceOrderStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_Status_MarketplaceOrderStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_Status_MarketplaceOrderStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderHeader>() {
           @Override
           public void write(JsonWriter out, OrderHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderHeader
   * @throws IOException if the JSON string is invalid with respect to OrderHeader
   */
  public static OrderHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderHeader.class);
  }

  /**
   * Convert an instance of OrderHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

