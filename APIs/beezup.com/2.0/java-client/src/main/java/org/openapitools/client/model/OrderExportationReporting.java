/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.OrderExportationReportingProcessingStatus;
import org.openapitools.client.model.SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represent the reporting of the Order report exportations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderExportationReporting {
  public static final String SERIALIZED_NAME_ABORTION_UTC_DATE = "abortionUtcDate";
  @SerializedName(SERIALIZED_NAME_ABORTION_UTC_DATE)
  private OffsetDateTime abortionUtcDate;

  public static final String SERIALIZED_NAME_BEGIN_UTC_DATE = "beginUtcDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_UTC_DATE)
  private OffsetDateTime beginUtcDate;

  public static final String SERIALIZED_NAME_BLOB_NAME_URI = "blobNameUri";
  @SerializedName(SERIALIZED_NAME_BLOB_NAME_URI)
  private String blobNameUri;

  public static final String SERIALIZED_NAME_END_UTC_DATE = "endUtcDate";
  @SerializedName(SERIALIZED_NAME_END_UTC_DATE)
  private OffsetDateTime endUtcDate;

  public static final String SERIALIZED_NAME_ENQUEUED_UTC_DATE = "enqueuedUtcDate";
  @SerializedName(SERIALIZED_NAME_ENQUEUED_UTC_DATE)
  private OffsetDateTime enqueuedUtcDate;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXECUTION_U_U_I_D = "executionUUID";
  @SerializedName(SERIALIZED_NAME_EXECUTION_U_U_I_D)
  private UUID executionUUID;

  public static final String SERIALIZED_NAME_EXPIRATION_UTC_DATE = "expirationUtcDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_UTC_DATE)
  private OffsetDateTime expirationUtcDate;

  public static final String SERIALIZED_NAME_FAILURE_UTC_DATE = "failureUtcDate";
  @SerializedName(SERIALIZED_NAME_FAILURE_UTC_DATE)
  private OffsetDateTime failureUtcDate;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_JSON_CRITERIA = "jsonCriteria";
  @SerializedName(SERIALIZED_NAME_JSON_CRITERIA)
  private String jsonCriteria;

  public static final String SERIALIZED_NAME_LAST_UPDATE_UTC_DATE = "lastUpdateUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_UTC_DATE)
  private OffsetDateTime lastUpdateUtcDate;

  public static final String SERIALIZED_NAME_ORDER_COUNT = "orderCount";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
  private Integer orderCount;

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "processingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private OrderExportationReportingProcessingStatus processingStatus;

  public static final String SERIALIZED_NAME_REMAINING_ORDER_COUNT = "remainingOrderCount";
  @SerializedName(SERIALIZED_NAME_REMAINING_ORDER_COUNT)
  private Integer remainingOrderCount;

  public static final String SERIALIZED_NAME_RESUMED_UTC_DATE = "resumedUtcDate";
  @SerializedName(SERIALIZED_NAME_RESUMED_UTC_DATE)
  private OffsetDateTime resumedUtcDate;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public static final String SERIALIZED_NAME_SOURCE_USER_ID = "sourceUserId";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_ID)
  private String sourceUserId;

  public static final String SERIALIZED_NAME_SOURCE_USER_NAME = "sourceUserName";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_NAME)
  private String sourceUserName;

  public static final String SERIALIZED_NAME_SUSPENDED_UTC_DATE = "suspendedUtcDate";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_UTC_DATE)
  private OffsetDateTime suspendedUtcDate;

  public static final String SERIALIZED_NAME_TIMEOUT_DURATION = "timeoutDuration";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_DURATION)
  private String timeoutDuration;

  public static final String SERIALIZED_NAME_WARNING_MESSAGE = "warningMessage";
  @SerializedName(SERIALIZED_NAME_WARNING_MESSAGE)
  private String warningMessage;

  public OrderExportationReporting() {
  }

  public OrderExportationReporting abortionUtcDate(OffsetDateTime abortionUtcDate) {
    this.abortionUtcDate = abortionUtcDate;
    return this;
  }

  /**
   * Get abortionUtcDate
   * @return abortionUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAbortionUtcDate() {
    return abortionUtcDate;
  }

  public void setAbortionUtcDate(OffsetDateTime abortionUtcDate) {
    this.abortionUtcDate = abortionUtcDate;
  }


  public OrderExportationReporting beginUtcDate(OffsetDateTime beginUtcDate) {
    this.beginUtcDate = beginUtcDate;
    return this;
  }

  /**
   * Get beginUtcDate
   * @return beginUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBeginUtcDate() {
    return beginUtcDate;
  }

  public void setBeginUtcDate(OffsetDateTime beginUtcDate) {
    this.beginUtcDate = beginUtcDate;
  }


  public OrderExportationReporting blobNameUri(String blobNameUri) {
    this.blobNameUri = blobNameUri;
    return this;
  }

  /**
   * Get blobNameUri
   * @return blobNameUri
   */
  @javax.annotation.Nullable
  public String getBlobNameUri() {
    return blobNameUri;
  }

  public void setBlobNameUri(String blobNameUri) {
    this.blobNameUri = blobNameUri;
  }


  public OrderExportationReporting endUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
    return this;
  }

  /**
   * Get endUtcDate
   * @return endUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndUtcDate() {
    return endUtcDate;
  }

  public void setEndUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
  }


  public OrderExportationReporting enqueuedUtcDate(OffsetDateTime enqueuedUtcDate) {
    this.enqueuedUtcDate = enqueuedUtcDate;
    return this;
  }

  /**
   * Get enqueuedUtcDate
   * @return enqueuedUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEnqueuedUtcDate() {
    return enqueuedUtcDate;
  }

  public void setEnqueuedUtcDate(OffsetDateTime enqueuedUtcDate) {
    this.enqueuedUtcDate = enqueuedUtcDate;
  }


  public OrderExportationReporting errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public OrderExportationReporting executionUUID(UUID executionUUID) {
    this.executionUUID = executionUUID;
    return this;
  }

  /**
   * Get executionUUID
   * @return executionUUID
   */
  @javax.annotation.Nonnull
  public UUID getExecutionUUID() {
    return executionUUID;
  }

  public void setExecutionUUID(UUID executionUUID) {
    this.executionUUID = executionUUID;
  }


  public OrderExportationReporting expirationUtcDate(OffsetDateTime expirationUtcDate) {
    this.expirationUtcDate = expirationUtcDate;
    return this;
  }

  /**
   * Get expirationUtcDate
   * @return expirationUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationUtcDate() {
    return expirationUtcDate;
  }

  public void setExpirationUtcDate(OffsetDateTime expirationUtcDate) {
    this.expirationUtcDate = expirationUtcDate;
  }


  public OrderExportationReporting failureUtcDate(OffsetDateTime failureUtcDate) {
    this.failureUtcDate = failureUtcDate;
    return this;
  }

  /**
   * Get failureUtcDate
   * @return failureUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFailureUtcDate() {
    return failureUtcDate;
  }

  public void setFailureUtcDate(OffsetDateTime failureUtcDate) {
    this.failureUtcDate = failureUtcDate;
  }


  public OrderExportationReporting ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nonnull
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public OrderExportationReporting jsonCriteria(String jsonCriteria) {
    this.jsonCriteria = jsonCriteria;
    return this;
  }

  /**
   * Raw representation of the JSON
   * @return jsonCriteria
   */
  @javax.annotation.Nullable
  public String getJsonCriteria() {
    return jsonCriteria;
  }

  public void setJsonCriteria(String jsonCriteria) {
    this.jsonCriteria = jsonCriteria;
  }


  public OrderExportationReporting lastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
    return this;
  }

  /**
   * Get lastUpdateUtcDate
   * @return lastUpdateUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateUtcDate() {
    return lastUpdateUtcDate;
  }

  public void setLastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
  }


  public OrderExportationReporting orderCount(Integer orderCount) {
    this.orderCount = orderCount;
    return this;
  }

  /**
   * Get orderCount
   * @return orderCount
   */
  @javax.annotation.Nullable
  public Integer getOrderCount() {
    return orderCount;
  }

  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }


  public OrderExportationReporting processingStatus(OrderExportationReportingProcessingStatus processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * Get processingStatus
   * @return processingStatus
   */
  @javax.annotation.Nonnull
  public OrderExportationReportingProcessingStatus getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(OrderExportationReportingProcessingStatus processingStatus) {
    this.processingStatus = processingStatus;
  }


  public OrderExportationReporting remainingOrderCount(Integer remainingOrderCount) {
    this.remainingOrderCount = remainingOrderCount;
    return this;
  }

  /**
   * Get remainingOrderCount
   * @return remainingOrderCount
   */
  @javax.annotation.Nullable
  public Integer getRemainingOrderCount() {
    return remainingOrderCount;
  }

  public void setRemainingOrderCount(Integer remainingOrderCount) {
    this.remainingOrderCount = remainingOrderCount;
  }


  public OrderExportationReporting resumedUtcDate(OffsetDateTime resumedUtcDate) {
    this.resumedUtcDate = resumedUtcDate;
    return this;
  }

  /**
   * Get resumedUtcDate
   * @return resumedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResumedUtcDate() {
    return resumedUtcDate;
  }

  public void setResumedUtcDate(OffsetDateTime resumedUtcDate) {
    this.resumedUtcDate = resumedUtcDate;
  }


  public OrderExportationReporting sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }


  public OrderExportationReporting sourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
    return this;
  }

  /**
   * The user identifier
   * @return sourceUserId
   */
  @javax.annotation.Nullable
  public String getSourceUserId() {
    return sourceUserId;
  }

  public void setSourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
  }


  public OrderExportationReporting sourceUserName(String sourceUserName) {
    this.sourceUserName = sourceUserName;
    return this;
  }

  /**
   * Get sourceUserName
   * @return sourceUserName
   */
  @javax.annotation.Nonnull
  public String getSourceUserName() {
    return sourceUserName;
  }

  public void setSourceUserName(String sourceUserName) {
    this.sourceUserName = sourceUserName;
  }


  public OrderExportationReporting suspendedUtcDate(OffsetDateTime suspendedUtcDate) {
    this.suspendedUtcDate = suspendedUtcDate;
    return this;
  }

  /**
   * Get suspendedUtcDate
   * @return suspendedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSuspendedUtcDate() {
    return suspendedUtcDate;
  }

  public void setSuspendedUtcDate(OffsetDateTime suspendedUtcDate) {
    this.suspendedUtcDate = suspendedUtcDate;
  }


  public OrderExportationReporting timeoutDuration(String timeoutDuration) {
    this.timeoutDuration = timeoutDuration;
    return this;
  }

  /**
   * Get timeoutDuration
   * @return timeoutDuration
   */
  @javax.annotation.Nullable
  public String getTimeoutDuration() {
    return timeoutDuration;
  }

  public void setTimeoutDuration(String timeoutDuration) {
    this.timeoutDuration = timeoutDuration;
  }


  public OrderExportationReporting warningMessage(String warningMessage) {
    this.warningMessage = warningMessage;
    return this;
  }

  /**
   * Get warningMessage
   * @return warningMessage
   */
  @javax.annotation.Nullable
  public String getWarningMessage() {
    return warningMessage;
  }

  public void setWarningMessage(String warningMessage) {
    this.warningMessage = warningMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderExportationReporting orderExportationReporting = (OrderExportationReporting) o;
    return Objects.equals(this.abortionUtcDate, orderExportationReporting.abortionUtcDate) &&
        Objects.equals(this.beginUtcDate, orderExportationReporting.beginUtcDate) &&
        Objects.equals(this.blobNameUri, orderExportationReporting.blobNameUri) &&
        Objects.equals(this.endUtcDate, orderExportationReporting.endUtcDate) &&
        Objects.equals(this.enqueuedUtcDate, orderExportationReporting.enqueuedUtcDate) &&
        Objects.equals(this.errorMessage, orderExportationReporting.errorMessage) &&
        Objects.equals(this.executionUUID, orderExportationReporting.executionUUID) &&
        Objects.equals(this.expirationUtcDate, orderExportationReporting.expirationUtcDate) &&
        Objects.equals(this.failureUtcDate, orderExportationReporting.failureUtcDate) &&
        Objects.equals(this.ipAddress, orderExportationReporting.ipAddress) &&
        Objects.equals(this.jsonCriteria, orderExportationReporting.jsonCriteria) &&
        Objects.equals(this.lastUpdateUtcDate, orderExportationReporting.lastUpdateUtcDate) &&
        Objects.equals(this.orderCount, orderExportationReporting.orderCount) &&
        Objects.equals(this.processingStatus, orderExportationReporting.processingStatus) &&
        Objects.equals(this.remainingOrderCount, orderExportationReporting.remainingOrderCount) &&
        Objects.equals(this.resumedUtcDate, orderExportationReporting.resumedUtcDate) &&
        Objects.equals(this.sourceType, orderExportationReporting.sourceType) &&
        Objects.equals(this.sourceUserId, orderExportationReporting.sourceUserId) &&
        Objects.equals(this.sourceUserName, orderExportationReporting.sourceUserName) &&
        Objects.equals(this.suspendedUtcDate, orderExportationReporting.suspendedUtcDate) &&
        Objects.equals(this.timeoutDuration, orderExportationReporting.timeoutDuration) &&
        Objects.equals(this.warningMessage, orderExportationReporting.warningMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abortionUtcDate, beginUtcDate, blobNameUri, endUtcDate, enqueuedUtcDate, errorMessage, executionUUID, expirationUtcDate, failureUtcDate, ipAddress, jsonCriteria, lastUpdateUtcDate, orderCount, processingStatus, remainingOrderCount, resumedUtcDate, sourceType, sourceUserId, sourceUserName, suspendedUtcDate, timeoutDuration, warningMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderExportationReporting {\n");
    sb.append("    abortionUtcDate: ").append(toIndentedString(abortionUtcDate)).append("\n");
    sb.append("    beginUtcDate: ").append(toIndentedString(beginUtcDate)).append("\n");
    sb.append("    blobNameUri: ").append(toIndentedString(blobNameUri)).append("\n");
    sb.append("    endUtcDate: ").append(toIndentedString(endUtcDate)).append("\n");
    sb.append("    enqueuedUtcDate: ").append(toIndentedString(enqueuedUtcDate)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executionUUID: ").append(toIndentedString(executionUUID)).append("\n");
    sb.append("    expirationUtcDate: ").append(toIndentedString(expirationUtcDate)).append("\n");
    sb.append("    failureUtcDate: ").append(toIndentedString(failureUtcDate)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    jsonCriteria: ").append(toIndentedString(jsonCriteria)).append("\n");
    sb.append("    lastUpdateUtcDate: ").append(toIndentedString(lastUpdateUtcDate)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    remainingOrderCount: ").append(toIndentedString(remainingOrderCount)).append("\n");
    sb.append("    resumedUtcDate: ").append(toIndentedString(resumedUtcDate)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceUserId: ").append(toIndentedString(sourceUserId)).append("\n");
    sb.append("    sourceUserName: ").append(toIndentedString(sourceUserName)).append("\n");
    sb.append("    suspendedUtcDate: ").append(toIndentedString(suspendedUtcDate)).append("\n");
    sb.append("    timeoutDuration: ").append(toIndentedString(timeoutDuration)).append("\n");
    sb.append("    warningMessage: ").append(toIndentedString(warningMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abortionUtcDate");
    openapiFields.add("beginUtcDate");
    openapiFields.add("blobNameUri");
    openapiFields.add("endUtcDate");
    openapiFields.add("enqueuedUtcDate");
    openapiFields.add("errorMessage");
    openapiFields.add("executionUUID");
    openapiFields.add("expirationUtcDate");
    openapiFields.add("failureUtcDate");
    openapiFields.add("ipAddress");
    openapiFields.add("jsonCriteria");
    openapiFields.add("lastUpdateUtcDate");
    openapiFields.add("orderCount");
    openapiFields.add("processingStatus");
    openapiFields.add("remainingOrderCount");
    openapiFields.add("resumedUtcDate");
    openapiFields.add("sourceType");
    openapiFields.add("sourceUserId");
    openapiFields.add("sourceUserName");
    openapiFields.add("suspendedUtcDate");
    openapiFields.add("timeoutDuration");
    openapiFields.add("warningMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enqueuedUtcDate");
    openapiRequiredFields.add("executionUUID");
    openapiRequiredFields.add("ipAddress");
    openapiRequiredFields.add("processingStatus");
    openapiRequiredFields.add("sourceType");
    openapiRequiredFields.add("sourceUserName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderExportationReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderExportationReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderExportationReporting is not found in the empty JSON string", OrderExportationReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderExportationReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderExportationReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderExportationReporting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobNameUri") != null && !jsonObj.get("blobNameUri").isJsonNull()) && !jsonObj.get("blobNameUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobNameUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobNameUri").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if (!jsonObj.get("executionUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionUUID").toString()));
      }
      if (!jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("jsonCriteria") != null && !jsonObj.get("jsonCriteria").isJsonNull()) && !jsonObj.get("jsonCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonCriteria").toString()));
      }
      // validate the required field `processingStatus`
      OrderExportationReportingProcessingStatus.validateJsonElement(jsonObj.get("processingStatus"));
      // validate the required field `sourceType`
      SourceType.validateJsonElement(jsonObj.get("sourceType"));
      if ((jsonObj.get("sourceUserId") != null && !jsonObj.get("sourceUserId").isJsonNull()) && !jsonObj.get("sourceUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUserId").toString()));
      }
      if (!jsonObj.get("sourceUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUserName").toString()));
      }
      if ((jsonObj.get("timeoutDuration") != null && !jsonObj.get("timeoutDuration").isJsonNull()) && !jsonObj.get("timeoutDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoutDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeoutDuration").toString()));
      }
      if ((jsonObj.get("warningMessage") != null && !jsonObj.get("warningMessage").isJsonNull()) && !jsonObj.get("warningMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warningMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warningMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderExportationReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderExportationReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderExportationReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderExportationReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderExportationReporting>() {
           @Override
           public void write(JsonWriter out, OrderExportationReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderExportationReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderExportationReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderExportationReporting
   * @throws IOException if the JSON string is invalid with respect to OrderExportationReporting
   */
  public static OrderExportationReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderExportationReporting.class);
  }

  /**
   * Convert an instance of OrderExportationReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

