/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BeezUPCommonUserErrorMessage;
import org.openapitools.client.model.ImportationReportingLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The catalog importation reporting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportationReporting {
  public static final String SERIALIZED_NAME_AUTO_IMPORTED = "autoImported";
  @SerializedName(SERIALIZED_NAME_AUTO_IMPORTED)
  private Boolean autoImported;

  public static final String SERIALIZED_NAME_BEGIN_UTC_DATE = "beginUtcDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_UTC_DATE)
  private OffsetDateTime beginUtcDate;

  public static final String SERIALIZED_NAME_END_UTC_DATE = "endUtcDate";
  @SerializedName(SERIALIZED_NAME_END_UTC_DATE)
  private OffsetDateTime endUtcDate;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<BeezUPCommonUserErrorMessage> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_INPUT_CONFIGURATION_URL = "inputConfigurationUrl";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIGURATION_URL)
  private URI inputConfigurationUrl;

  public static final String SERIALIZED_NAME_LAST_UPDATE_UTC_DATE = "lastUpdateUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_UTC_DATE)
  private OffsetDateTime lastUpdateUtcDate;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ImportationReportingLinks links;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private Map<String, Boolean> steps = new HashMap<>();

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TOTAL_PRODUCT_COUNT = "totalProductCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRODUCT_COUNT)
  private Integer totalProductCount;

  public static final String SERIALIZED_NAME_TOTAL_PRODUCT_ERROR_COUNT = "totalProductErrorCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRODUCT_ERROR_COUNT)
  private Integer totalProductErrorCount;

  public static final String SERIALIZED_NAME_TOTAL_PRODUCT_SUCCESS_COUNT = "totalProductSuccessCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRODUCT_SUCCESS_COUNT)
  private Integer totalProductSuccessCount;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ImportationReporting() {
  }

  public ImportationReporting autoImported(Boolean autoImported) {
    this.autoImported = autoImported;
    return this;
  }

  /**
   * Indicate if this importation is an auto import or not.
   * @return autoImported
   */
  @javax.annotation.Nullable
  public Boolean getAutoImported() {
    return autoImported;
  }

  public void setAutoImported(Boolean autoImported) {
    this.autoImported = autoImported;
  }


  public ImportationReporting beginUtcDate(OffsetDateTime beginUtcDate) {
    this.beginUtcDate = beginUtcDate;
    return this;
  }

  /**
   * Indicate the begin UTC date of this importation.
   * @return beginUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getBeginUtcDate() {
    return beginUtcDate;
  }

  public void setBeginUtcDate(OffsetDateTime beginUtcDate) {
    this.beginUtcDate = beginUtcDate;
  }


  public ImportationReporting endUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
    return this;
  }

  /**
   * Indicate the end UTC date of this importation.
   * @return endUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndUtcDate() {
    return endUtcDate;
  }

  public void setEndUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
  }


  public ImportationReporting errors(List<BeezUPCommonUserErrorMessage> errors) {
    this.errors = errors;
    return this;
  }

  public ImportationReporting addErrorsItem(BeezUPCommonUserErrorMessage errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Indicate the error message list related to this importation.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<BeezUPCommonUserErrorMessage> getErrors() {
    return errors;
  }

  public void setErrors(List<BeezUPCommonUserErrorMessage> errors) {
    this.errors = errors;
  }


  public ImportationReporting executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * The execution identifier of the catalog importation
   * @return executionId
   */
  @javax.annotation.Nonnull
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public ImportationReporting inputConfigurationUrl(URI inputConfigurationUrl) {
    this.inputConfigurationUrl = inputConfigurationUrl;
    return this;
  }

  /**
   * Indicate the input url of this importation.
   * @return inputConfigurationUrl
   */
  @javax.annotation.Nullable
  public URI getInputConfigurationUrl() {
    return inputConfigurationUrl;
  }

  public void setInputConfigurationUrl(URI inputConfigurationUrl) {
    this.inputConfigurationUrl = inputConfigurationUrl;
  }


  public ImportationReporting lastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
    return this;
  }

  /**
   * Indicate the last update UTC date of the reporting.
   * @return lastUpdateUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdateUtcDate() {
    return lastUpdateUtcDate;
  }

  public void setLastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
  }


  public ImportationReporting links(ImportationReportingLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public ImportationReportingLinks getLinks() {
    return links;
  }

  public void setLinks(ImportationReportingLinks links) {
    this.links = links;
  }


  public ImportationReporting stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * The last step name of the importation process
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public ImportationReporting steps(Map<String, Boolean> steps) {
    this.steps = steps;
    return this;
  }

  public ImportationReporting putStepsItem(String key, Boolean stepsItem) {
    if (this.steps == null) {
      this.steps = new HashMap<>();
    }
    this.steps.put(key, stepsItem);
    return this;
  }

  /**
   * Indicate the steps that have been passed during the importation process
   * @return steps
   */
  @javax.annotation.Nonnull
  public Map<String, Boolean> getSteps() {
    return steps;
  }

  public void setSteps(Map<String, Boolean> steps) {
    this.steps = steps;
  }


  public ImportationReporting success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Indicate if the importation succeed or not.
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public ImportationReporting totalProductCount(Integer totalProductCount) {
    this.totalProductCount = totalProductCount;
    return this;
  }

  /**
   * Indicate the total product count detected in the catalog during the importation.
   * @return totalProductCount
   */
  @javax.annotation.Nullable
  public Integer getTotalProductCount() {
    return totalProductCount;
  }

  public void setTotalProductCount(Integer totalProductCount) {
    this.totalProductCount = totalProductCount;
  }


  public ImportationReporting totalProductErrorCount(Integer totalProductErrorCount) {
    this.totalProductErrorCount = totalProductErrorCount;
    return this;
  }

  /**
   * Indicate the total product count in error detected in the catalog during the importation.
   * @return totalProductErrorCount
   */
  @javax.annotation.Nullable
  public Integer getTotalProductErrorCount() {
    return totalProductErrorCount;
  }

  public void setTotalProductErrorCount(Integer totalProductErrorCount) {
    this.totalProductErrorCount = totalProductErrorCount;
  }


  public ImportationReporting totalProductSuccessCount(Integer totalProductSuccessCount) {
    this.totalProductSuccessCount = totalProductSuccessCount;
    return this;
  }

  /**
   * Indicate the total product count in success in the catalog during the importation.
   * @return totalProductSuccessCount
   */
  @javax.annotation.Nullable
  public Integer getTotalProductSuccessCount() {
    return totalProductSuccessCount;
  }

  public void setTotalProductSuccessCount(Integer totalProductSuccessCount) {
    this.totalProductSuccessCount = totalProductSuccessCount;
  }


  public ImportationReporting userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The user identifier
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportationReporting importationReporting = (ImportationReporting) o;
    return Objects.equals(this.autoImported, importationReporting.autoImported) &&
        Objects.equals(this.beginUtcDate, importationReporting.beginUtcDate) &&
        Objects.equals(this.endUtcDate, importationReporting.endUtcDate) &&
        Objects.equals(this.errors, importationReporting.errors) &&
        Objects.equals(this.executionId, importationReporting.executionId) &&
        Objects.equals(this.inputConfigurationUrl, importationReporting.inputConfigurationUrl) &&
        Objects.equals(this.lastUpdateUtcDate, importationReporting.lastUpdateUtcDate) &&
        Objects.equals(this.links, importationReporting.links) &&
        Objects.equals(this.stepName, importationReporting.stepName) &&
        Objects.equals(this.steps, importationReporting.steps) &&
        Objects.equals(this.success, importationReporting.success) &&
        Objects.equals(this.totalProductCount, importationReporting.totalProductCount) &&
        Objects.equals(this.totalProductErrorCount, importationReporting.totalProductErrorCount) &&
        Objects.equals(this.totalProductSuccessCount, importationReporting.totalProductSuccessCount) &&
        Objects.equals(this.userId, importationReporting.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoImported, beginUtcDate, endUtcDate, errors, executionId, inputConfigurationUrl, lastUpdateUtcDate, links, stepName, steps, success, totalProductCount, totalProductErrorCount, totalProductSuccessCount, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportationReporting {\n");
    sb.append("    autoImported: ").append(toIndentedString(autoImported)).append("\n");
    sb.append("    beginUtcDate: ").append(toIndentedString(beginUtcDate)).append("\n");
    sb.append("    endUtcDate: ").append(toIndentedString(endUtcDate)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    inputConfigurationUrl: ").append(toIndentedString(inputConfigurationUrl)).append("\n");
    sb.append("    lastUpdateUtcDate: ").append(toIndentedString(lastUpdateUtcDate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    totalProductCount: ").append(toIndentedString(totalProductCount)).append("\n");
    sb.append("    totalProductErrorCount: ").append(toIndentedString(totalProductErrorCount)).append("\n");
    sb.append("    totalProductSuccessCount: ").append(toIndentedString(totalProductSuccessCount)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoImported");
    openapiFields.add("beginUtcDate");
    openapiFields.add("endUtcDate");
    openapiFields.add("errors");
    openapiFields.add("executionId");
    openapiFields.add("inputConfigurationUrl");
    openapiFields.add("lastUpdateUtcDate");
    openapiFields.add("links");
    openapiFields.add("stepName");
    openapiFields.add("steps");
    openapiFields.add("success");
    openapiFields.add("totalProductCount");
    openapiFields.add("totalProductErrorCount");
    openapiFields.add("totalProductSuccessCount");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beginUtcDate");
    openapiRequiredFields.add("executionId");
    openapiRequiredFields.add("lastUpdateUtcDate");
    openapiRequiredFields.add("steps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportationReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportationReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportationReporting is not found in the empty JSON string", ImportationReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportationReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportationReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportationReporting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            BeezUPCommonUserErrorMessage.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (!jsonObj.get("executionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionId").toString()));
      }
      if ((jsonObj.get("inputConfigurationUrl") != null && !jsonObj.get("inputConfigurationUrl").isJsonNull()) && !jsonObj.get("inputConfigurationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputConfigurationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputConfigurationUrl").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        ImportationReportingLinks.validateJsonElement(jsonObj.get("links"));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportationReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportationReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportationReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportationReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportationReporting>() {
           @Override
           public void write(JsonWriter out, ImportationReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportationReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportationReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportationReporting
   * @throws IOException if the JSON string is invalid with respect to ImportationReporting
   */
  public static ImportationReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportationReporting.class);
  }

  /**
   * Convert an instance of ImportationReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

