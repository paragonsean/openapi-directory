/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The reporting related to a change order operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeOrderReporting {
  public static final String SERIALIZED_NAME_CHANGE_ORDER_TYPE = "changeOrderType";
  @SerializedName(SERIALIZED_NAME_CHANGE_ORDER_TYPE)
  private String changeOrderType;

  public static final String SERIALIZED_NAME_CREATION_UTC_DATE = "creationUtcDate";
  @SerializedName(SERIALIZED_NAME_CREATION_UTC_DATE)
  private OffsetDateTime creationUtcDate;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Map<String, Object> details = new HashMap<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXECUTION_U_U_I_D = "executionUUID";
  @SerializedName(SERIALIZED_NAME_EXECUTION_U_U_I_D)
  private UUID executionUUID;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_UPDATE_UTC_DATE = "lastUpdateUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_UTC_DATE)
  private OffsetDateTime lastUpdateUtcDate;

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "processingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private String processingStatus;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public static final String SERIALIZED_NAME_SOURCE_USER_ID = "sourceUserId";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_ID)
  private String sourceUserId;

  public static final String SERIALIZED_NAME_SOURCE_USER_NAME = "sourceUserName";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_NAME)
  private String sourceUserName;

  public static final String SERIALIZED_NAME_TEST_MODE = "testMode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private Boolean testMode;

  public ChangeOrderReporting() {
  }

  public ChangeOrderReporting changeOrderType(String changeOrderType) {
    this.changeOrderType = changeOrderType;
    return this;
  }

  /**
   * Get changeOrderType
   * @return changeOrderType
   */
  @javax.annotation.Nullable
  public String getChangeOrderType() {
    return changeOrderType;
  }

  public void setChangeOrderType(String changeOrderType) {
    this.changeOrderType = changeOrderType;
  }


  public ChangeOrderReporting creationUtcDate(OffsetDateTime creationUtcDate) {
    this.creationUtcDate = creationUtcDate;
    return this;
  }

  /**
   * The creation UTC date of the execution
   * @return creationUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationUtcDate() {
    return creationUtcDate;
  }

  public void setCreationUtcDate(OffsetDateTime creationUtcDate) {
    this.creationUtcDate = creationUtcDate;
  }


  public ChangeOrderReporting details(Map<String, Object> details) {
    this.details = details;
    return this;
  }

  public ChangeOrderReporting putDetailsItem(String key, Object detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public Map<String, Object> getDetails() {
    return details;
  }

  public void setDetails(Map<String, Object> details) {
    this.details = details;
  }


  public ChangeOrderReporting errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The error message during the execution
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ChangeOrderReporting executionUUID(UUID executionUUID) {
    this.executionUUID = executionUUID;
    return this;
  }

  /**
   * The execution identifier
   * @return executionUUID
   */
  @javax.annotation.Nullable
  public UUID getExecutionUUID() {
    return executionUUID;
  }

  public void setExecutionUUID(UUID executionUUID) {
    this.executionUUID = executionUUID;
  }


  public ChangeOrderReporting ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The IP address who request this operation
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ChangeOrderReporting lastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
    return this;
  }

  /**
   * The last update UTC date of the execution
   * @return lastUpdateUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateUtcDate() {
    return lastUpdateUtcDate;
  }

  public void setLastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
    this.lastUpdateUtcDate = lastUpdateUtcDate;
  }


  public ChangeOrderReporting processingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * The processing status of the execution
   * @return processingStatus
   */
  @javax.annotation.Nullable
  public String getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
  }


  public ChangeOrderReporting sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }


  public ChangeOrderReporting sourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
    return this;
  }

  /**
   * The user identifier
   * @return sourceUserId
   */
  @javax.annotation.Nullable
  public String getSourceUserId() {
    return sourceUserId;
  }

  public void setSourceUserId(String sourceUserId) {
    this.sourceUserId = sourceUserId;
  }


  public ChangeOrderReporting sourceUserName(String sourceUserName) {
    this.sourceUserName = sourceUserName;
    return this;
  }

  /**
   * Get sourceUserName
   * @return sourceUserName
   */
  @javax.annotation.Nullable
  public String getSourceUserName() {
    return sourceUserName;
  }

  public void setSourceUserName(String sourceUserName) {
    this.sourceUserName = sourceUserName;
  }


  public ChangeOrderReporting testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

  /**
   * This operation was a test
   * @return testMode
   */
  @javax.annotation.Nullable
  public Boolean getTestMode() {
    return testMode;
  }

  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeOrderReporting changeOrderReporting = (ChangeOrderReporting) o;
    return Objects.equals(this.changeOrderType, changeOrderReporting.changeOrderType) &&
        Objects.equals(this.creationUtcDate, changeOrderReporting.creationUtcDate) &&
        Objects.equals(this.details, changeOrderReporting.details) &&
        Objects.equals(this.errorMessage, changeOrderReporting.errorMessage) &&
        Objects.equals(this.executionUUID, changeOrderReporting.executionUUID) &&
        Objects.equals(this.ipAddress, changeOrderReporting.ipAddress) &&
        Objects.equals(this.lastUpdateUtcDate, changeOrderReporting.lastUpdateUtcDate) &&
        Objects.equals(this.processingStatus, changeOrderReporting.processingStatus) &&
        Objects.equals(this.sourceType, changeOrderReporting.sourceType) &&
        Objects.equals(this.sourceUserId, changeOrderReporting.sourceUserId) &&
        Objects.equals(this.sourceUserName, changeOrderReporting.sourceUserName) &&
        Objects.equals(this.testMode, changeOrderReporting.testMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeOrderType, creationUtcDate, details, errorMessage, executionUUID, ipAddress, lastUpdateUtcDate, processingStatus, sourceType, sourceUserId, sourceUserName, testMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeOrderReporting {\n");
    sb.append("    changeOrderType: ").append(toIndentedString(changeOrderType)).append("\n");
    sb.append("    creationUtcDate: ").append(toIndentedString(creationUtcDate)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executionUUID: ").append(toIndentedString(executionUUID)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastUpdateUtcDate: ").append(toIndentedString(lastUpdateUtcDate)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceUserId: ").append(toIndentedString(sourceUserId)).append("\n");
    sb.append("    sourceUserName: ").append(toIndentedString(sourceUserName)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeOrderType");
    openapiFields.add("creationUtcDate");
    openapiFields.add("details");
    openapiFields.add("errorMessage");
    openapiFields.add("executionUUID");
    openapiFields.add("ipAddress");
    openapiFields.add("lastUpdateUtcDate");
    openapiFields.add("processingStatus");
    openapiFields.add("sourceType");
    openapiFields.add("sourceUserId");
    openapiFields.add("sourceUserName");
    openapiFields.add("testMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeOrderReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeOrderReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeOrderReporting is not found in the empty JSON string", ChangeOrderReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeOrderReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeOrderReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeOrderType") != null && !jsonObj.get("changeOrderType").isJsonNull()) && !jsonObj.get("changeOrderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeOrderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeOrderType").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("executionUUID") != null && !jsonObj.get("executionUUID").isJsonNull()) && !jsonObj.get("executionUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionUUID").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("processingStatus") != null && !jsonObj.get("processingStatus").isJsonNull()) && !jsonObj.get("processingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingStatus").toString()));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceType.validateJsonElement(jsonObj.get("sourceType"));
      }
      if ((jsonObj.get("sourceUserId") != null && !jsonObj.get("sourceUserId").isJsonNull()) && !jsonObj.get("sourceUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUserId").toString()));
      }
      if ((jsonObj.get("sourceUserName") != null && !jsonObj.get("sourceUserName").isJsonNull()) && !jsonObj.get("sourceUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUserName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeOrderReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeOrderReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeOrderReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeOrderReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeOrderReporting>() {
           @Override
           public void write(JsonWriter out, ChangeOrderReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeOrderReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeOrderReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeOrderReporting
   * @throws IOException if the JSON string is invalid with respect to ChangeOrderReporting
   */
  public static ChangeOrderReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeOrderReporting.class);
  }

  /**
   * Convert an instance of ChangeOrderReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

