/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BeezUPCommonChannelBasicInfo;
import org.openapitools.client.model.TrackedOrderProduct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrackedOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackedOrder {
  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private BeezUPCommonChannelBasicInfo channel;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_PAYMENT_VALIDATED = "paymentValidated";
  @SerializedName(SERIALIZED_NAME_PAYMENT_VALIDATED)
  private Boolean paymentValidated;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<TrackedOrderProduct> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_UTC_DATE = "utcDate";
  @SerializedName(SERIALIZED_NAME_UTC_DATE)
  private OffsetDateTime utcDate;

  public TrackedOrder() {
  }

  public TrackedOrder channel(BeezUPCommonChannelBasicInfo channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public BeezUPCommonChannelBasicInfo getChannel() {
    return channel;
  }

  public void setChannel(BeezUPCommonChannelBasicInfo channel) {
    this.channel = channel;
  }


  public TrackedOrder currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public TrackedOrder merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

  /**
   * The merchant order identifier
   * @return merchantOrderId
   */
  @javax.annotation.Nonnull
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public TrackedOrder paymentValidated(Boolean paymentValidated) {
    this.paymentValidated = paymentValidated;
    return this;
  }

  /**
   * Indicate if the payment of this order has been validated or not
   * @return paymentValidated
   */
  @javax.annotation.Nonnull
  public Boolean getPaymentValidated() {
    return paymentValidated;
  }

  public void setPaymentValidated(Boolean paymentValidated) {
    this.paymentValidated = paymentValidated;
  }


  public TrackedOrder products(List<TrackedOrderProduct> products) {
    this.products = products;
    return this;
  }

  public TrackedOrder addProductsItem(TrackedOrderProduct productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * The product list of this order
   * @return products
   */
  @javax.annotation.Nonnull
  public List<TrackedOrderProduct> getProducts() {
    return products;
  }

  public void setProducts(List<TrackedOrderProduct> products) {
    this.products = products;
  }


  public TrackedOrder totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * The total amount of the order
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public TrackedOrder utcDate(OffsetDateTime utcDate) {
    this.utcDate = utcDate;
    return this;
  }

  /**
   * The utc date of the order
   * @return utcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUtcDate() {
    return utcDate;
  }

  public void setUtcDate(OffsetDateTime utcDate) {
    this.utcDate = utcDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackedOrder trackedOrder = (TrackedOrder) o;
    return Objects.equals(this.channel, trackedOrder.channel) &&
        Objects.equals(this.currencyCode, trackedOrder.currencyCode) &&
        Objects.equals(this.merchantOrderId, trackedOrder.merchantOrderId) &&
        Objects.equals(this.paymentValidated, trackedOrder.paymentValidated) &&
        Objects.equals(this.products, trackedOrder.products) &&
        Objects.equals(this.totalAmount, trackedOrder.totalAmount) &&
        Objects.equals(this.utcDate, trackedOrder.utcDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, currencyCode, merchantOrderId, paymentValidated, products, totalAmount, utcDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackedOrder {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    paymentValidated: ").append(toIndentedString(paymentValidated)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    utcDate: ").append(toIndentedString(utcDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("currencyCode");
    openapiFields.add("merchantOrderId");
    openapiFields.add("paymentValidated");
    openapiFields.add("products");
    openapiFields.add("totalAmount");
    openapiFields.add("utcDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("merchantOrderId");
    openapiRequiredFields.add("paymentValidated");
    openapiRequiredFields.add("products");
    openapiRequiredFields.add("totalAmount");
    openapiRequiredFields.add("utcDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackedOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackedOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackedOrder is not found in the empty JSON string", TrackedOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackedOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackedOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrackedOrder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `channel`
      BeezUPCommonChannelBasicInfo.validateJsonElement(jsonObj.get("channel"));
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (!jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }

      JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
      // validate the required field `products` (array)
      for (int i = 0; i < jsonArrayproducts.size(); i++) {
        TrackedOrderProduct.validateJsonElement(jsonArrayproducts.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackedOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackedOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackedOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackedOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackedOrder>() {
           @Override
           public void write(JsonWriter out, TrackedOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackedOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackedOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackedOrder
   * @throws IOException if the JSON string is invalid with respect to TrackedOrder
   */
  public static TrackedOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackedOrder.class);
  }

  /**
   * Convert an instance of TrackedOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

