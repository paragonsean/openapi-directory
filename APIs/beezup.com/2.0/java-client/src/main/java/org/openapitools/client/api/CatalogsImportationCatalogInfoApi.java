/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ChangeCustomColumnRequest;
import org.openapitools.client.model.ConfigureCatalogColumnCatalogRequest;
import org.openapitools.client.model.DetectedCatalogColumnList;
import org.openapitools.client.model.ImportationCustomColumnList;
import org.openapitools.client.model.MapBeezUPColumnRequest;
import org.openapitools.client.model.ProductSample;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsImportationCatalogInfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogsImportationCatalogInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsImportationCatalogInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for importationConfigureCatalogColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param configureCatalogColumnCatalogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the catalog column name is not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationConfigureCatalogColumnCall(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest configureCatalogColumnCatalogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configureCatalogColumnCatalogRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationConfigureCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest configureCatalogColumnCatalogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationConfigureCatalogColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationConfigureCatalogColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationConfigureCatalogColumn(Async)");
        }

        // verify the required parameter 'configureCatalogColumnCatalogRequest' is set
        if (configureCatalogColumnCatalogRequest == null) {
            throw new ApiException("Missing the required parameter 'configureCatalogColumnCatalogRequest' when calling importationConfigureCatalogColumn(Async)");
        }

        return importationConfigureCatalogColumnCall(storeId, executionId, columnId, configureCatalogColumnCatalogRequest, _callback);

    }

    /**
     * Configure catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param configureCatalogColumnCatalogRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the catalog column name is not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationConfigureCatalogColumn(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest configureCatalogColumnCatalogRequest) throws ApiException {
        importationConfigureCatalogColumnWithHttpInfo(storeId, executionId, columnId, configureCatalogColumnCatalogRequest);
    }

    /**
     * Configure catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param configureCatalogColumnCatalogRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the catalog column name is not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationConfigureCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest configureCatalogColumnCatalogRequest) throws ApiException {
        okhttp3.Call localVarCall = importationConfigureCatalogColumnValidateBeforeCall(storeId, executionId, columnId, configureCatalogColumnCatalogRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure catalog column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param configureCatalogColumnCatalogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  When the catalog column name is not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationConfigureCatalogColumnAsync(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest configureCatalogColumnCatalogRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationConfigureCatalogColumnValidateBeforeCall(storeId, executionId, columnId, configureCatalogColumnCatalogRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationDeleteCustomColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When the custom column for this importation is correctly deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationDeleteCustomColumnCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationDeleteCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationDeleteCustomColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationDeleteCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationDeleteCustomColumn(Async)");
        }

        return importationDeleteCustomColumnCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Delete Custom Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When the custom column for this importation is correctly deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationDeleteCustomColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationDeleteCustomColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Delete Custom Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When the custom column for this importation is correctly deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationDeleteCustomColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationDeleteCustomColumnValidateBeforeCall(storeId, executionId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Custom Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When the custom column for this importation is correctly deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationDeleteCustomColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationDeleteCustomColumnValidateBeforeCall(storeId, executionId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetCustomColumnExpression
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetCustomColumnExpressionCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetCustomColumnExpressionValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetCustomColumnExpression(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetCustomColumnExpression(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationGetCustomColumnExpression(Async)");
        }

        return importationGetCustomColumnExpressionCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Get the encrypted custom column expression in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public String importationGetCustomColumnExpression(String storeId, String executionId, String columnId) throws ApiException {
        ApiResponse<String> localVarResp = importationGetCustomColumnExpressionWithHttpInfo(storeId, executionId, columnId);
        return localVarResp.getData();
    }

    /**
     * Get the encrypted custom column expression in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> importationGetCustomColumnExpressionWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationGetCustomColumnExpressionValidateBeforeCall(storeId, executionId, columnId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the encrypted custom column expression in this importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Encrypted expression </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetCustomColumnExpressionAsync(String storeId, String executionId, String columnId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetCustomColumnExpressionValidateBeforeCall(storeId, executionId, columnId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetCustomColumns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom columns of current Importation successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetCustomColumnsCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetCustomColumnsValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetCustomColumns(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetCustomColumns(Async)");
        }

        return importationGetCustomColumnsCall(storeId, executionId, _callback);

    }

    /**
     * Get custom columns currently place in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ImportationCustomColumnList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom columns of current Importation successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ImportationCustomColumnList importationGetCustomColumns(String storeId, String executionId) throws ApiException {
        ApiResponse<ImportationCustomColumnList> localVarResp = importationGetCustomColumnsWithHttpInfo(storeId, executionId);
        return localVarResp.getData();
    }

    /**
     * Get custom columns currently place in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;ImportationCustomColumnList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom columns of current Importation successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportationCustomColumnList> importationGetCustomColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationGetCustomColumnsValidateBeforeCall(storeId, executionId, null);
        Type localVarReturnType = new TypeToken<ImportationCustomColumnList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom columns currently place in this importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom columns of current Importation successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetCustomColumnsAsync(String storeId, String executionId, final ApiCallback<ImportationCustomColumnList> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetCustomColumnsValidateBeforeCall(storeId, executionId, _callback);
        Type localVarReturnType = new TypeToken<ImportationCustomColumnList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetDetectedCatalogColumns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetDetectedCatalogColumnsCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetDetectedCatalogColumnsValidateBeforeCall(String storeId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetDetectedCatalogColumns(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetDetectedCatalogColumns(Async)");
        }

        return importationGetDetectedCatalogColumnsCall(storeId, executionId, _callback);

    }

    /**
     * Get detected catalog columns during this importation.
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return DetectedCatalogColumnList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public DetectedCatalogColumnList importationGetDetectedCatalogColumns(String storeId, String executionId) throws ApiException {
        ApiResponse<DetectedCatalogColumnList> localVarResp = importationGetDetectedCatalogColumnsWithHttpInfo(storeId, executionId);
        return localVarResp.getData();
    }

    /**
     * Get detected catalog columns during this importation.
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;DetectedCatalogColumnList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectedCatalogColumnList> importationGetDetectedCatalogColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = importationGetDetectedCatalogColumnsValidateBeforeCall(storeId, executionId, null);
        Type localVarReturnType = new TypeToken<DetectedCatalogColumnList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detected catalog columns during this importation. (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetDetectedCatalogColumnsAsync(String storeId, String executionId, final ApiCallback<DetectedCatalogColumnList> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetDetectedCatalogColumnsValidateBeforeCall(storeId, executionId, _callback);
        Type localVarReturnType = new TypeToken<DetectedCatalogColumnList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetProductSample
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support       schema: $ref: &#39;https://api.beezup.com/swaggerhub/domains/BeezUP/api.beezup.com/v2#/definitions/BeezUP.Common.ErrorResponseMessage&#39; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductSampleCall(String storeId, String executionId, Integer productSampleIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "productSampleIndex" + "}", localVarApiClient.escapeString(productSampleIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetProductSampleValidateBeforeCall(String storeId, String executionId, Integer productSampleIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetProductSample(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetProductSample(Async)");
        }

        // verify the required parameter 'productSampleIndex' is set
        if (productSampleIndex == null) {
            throw new ApiException("Missing the required parameter 'productSampleIndex' when calling importationGetProductSample(Async)");
        }

        return importationGetProductSampleCall(storeId, executionId, productSampleIndex, _callback);

    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @return ProductSample
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support       schema: $ref: &#39;https://api.beezup.com/swaggerhub/domains/BeezUP/api.beezup.com/v2#/definitions/BeezUP.Common.ErrorResponseMessage&#39; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ProductSample importationGetProductSample(String storeId, String executionId, Integer productSampleIndex) throws ApiException {
        ApiResponse<ProductSample> localVarResp = importationGetProductSampleWithHttpInfo(storeId, executionId, productSampleIndex);
        return localVarResp.getData();
    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @return ApiResponse&lt;ProductSample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support       schema: $ref: &#39;https://api.beezup.com/swaggerhub/domains/BeezUP/api.beezup.com/v2#/definitions/BeezUP.Common.ErrorResponseMessage&#39; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSample> importationGetProductSampleWithHttpInfo(String storeId, String executionId, Integer productSampleIndex) throws ApiException {
        okhttp3.Call localVarCall = importationGetProductSampleValidateBeforeCall(storeId, executionId, productSampleIndex, null);
        Type localVarReturnType = new TypeToken<ProductSample>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom) (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support       schema: $ref: &#39;https://api.beezup.com/swaggerhub/domains/BeezUP/api.beezup.com/v2#/definitions/BeezUP.Common.ErrorResponseMessage&#39; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductSampleAsync(String storeId, String executionId, Integer productSampleIndex, final ApiCallback<ProductSample> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetProductSampleValidateBeforeCall(storeId, executionId, productSampleIndex, _callback);
        Type localVarReturnType = new TypeToken<ProductSample>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationGetProductSampleCustomColumnValue
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product sample custom column value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductSampleCustomColumnValueCall(String storeId, String executionId, Integer productSampleIndex, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "productSampleIndex" + "}", localVarApiClient.escapeString(productSampleIndex.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationGetProductSampleCustomColumnValueValidateBeforeCall(String storeId, String executionId, Integer productSampleIndex, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }

        // verify the required parameter 'productSampleIndex' is set
        if (productSampleIndex == null) {
            throw new ApiException("Missing the required parameter 'productSampleIndex' when calling importationGetProductSampleCustomColumnValue(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }

        return importationGetProductSampleCustomColumnValueCall(storeId, executionId, productSampleIndex, columnId, _callback);

    }

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product sample custom column value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public String importationGetProductSampleCustomColumnValue(String storeId, String executionId, Integer productSampleIndex, String columnId) throws ApiException {
        ApiResponse<String> localVarResp = importationGetProductSampleCustomColumnValueWithHttpInfo(storeId, executionId, productSampleIndex, columnId);
        return localVarResp.getData();
    }

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product sample custom column value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> importationGetProductSampleCustomColumnValueWithHttpInfo(String storeId, String executionId, Integer productSampleIndex, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationGetProductSampleCustomColumnValueValidateBeforeCall(storeId, executionId, productSampleIndex, columnId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product sample custom column value related to this importation. (asynchronously)
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product sample custom column value </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ExecutionId not found or not yet synchronized. If not synchronized within 30 sec, please contact our support </td><td>  * Retry-After - The duration in second to wait before polling this resource <br>  </td></tr>
        <tr><td> 409 </td><td> Catalog preparation read step is not completed. Please refer to the reporting of this execution for more details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationGetProductSampleCustomColumnValueAsync(String storeId, String executionId, Integer productSampleIndex, String columnId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationGetProductSampleCustomColumnValueValidateBeforeCall(storeId, executionId, productSampleIndex, columnId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationIgnoreColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column ignored. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationIgnoreColumnCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationIgnoreColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationIgnoreColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationIgnoreColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationIgnoreColumn(Async)");
        }

        return importationIgnoreColumnCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Ignore Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column ignored. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationIgnoreColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationIgnoreColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Ignore Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column ignored. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationIgnoreColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationIgnoreColumnValidateBeforeCall(storeId, executionId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Ignore Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column ignored. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationIgnoreColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationIgnoreColumnValidateBeforeCall(storeId, executionId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationMapCatalogColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationMapCatalogColumnCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapBeezUPColumnRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationMapCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationMapCatalogColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationMapCatalogColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationMapCatalogColumn(Async)");
        }

        // verify the required parameter 'mapBeezUPColumnRequest' is set
        if (mapBeezUPColumnRequest == null) {
            throw new ApiException("Missing the required parameter 'mapBeezUPColumnRequest' when calling importationMapCatalogColumn(Async)");
        }

        return importationMapCatalogColumnCall(storeId, executionId, columnId, mapBeezUPColumnRequest, _callback);

    }

    /**
     * Map catalog column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationMapCatalogColumn(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest) throws ApiException {
        importationMapCatalogColumnWithHttpInfo(storeId, executionId, columnId, mapBeezUPColumnRequest);
    }

    /**
     * Map catalog column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationMapCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest) throws ApiException {
        okhttp3.Call localVarCall = importationMapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, mapBeezUPColumnRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Map catalog column to a BeezUP column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationMapCatalogColumnAsync(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationMapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, mapBeezUPColumnRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationMapCustomColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationMapCustomColumnCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapBeezUPColumnRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationMapCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationMapCustomColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationMapCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationMapCustomColumn(Async)");
        }

        // verify the required parameter 'mapBeezUPColumnRequest' is set
        if (mapBeezUPColumnRequest == null) {
            throw new ApiException("Missing the required parameter 'mapBeezUPColumnRequest' when calling importationMapCustomColumn(Async)");
        }

        return importationMapCustomColumnCall(storeId, executionId, columnId, mapBeezUPColumnRequest, _callback);

    }

    /**
     * Map custom column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationMapCustomColumn(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest) throws ApiException {
        importationMapCustomColumnWithHttpInfo(storeId, executionId, columnId, mapBeezUPColumnRequest);
    }

    /**
     * Map custom column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationMapCustomColumnWithHttpInfo(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest) throws ApiException {
        okhttp3.Call localVarCall = importationMapCustomColumnValidateBeforeCall(storeId, executionId, columnId, mapBeezUPColumnRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Map custom column to a BeezUP column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param mapBeezUPColumnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column mapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationMapCustomColumnAsync(String storeId, String executionId, String columnId, MapBeezUPColumnRequest mapBeezUPColumnRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationMapCustomColumnValidateBeforeCall(storeId, executionId, columnId, mapBeezUPColumnRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationReattendColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column reattended. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationReattendColumnCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationReattendColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationReattendColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationReattendColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationReattendColumn(Async)");
        }

        return importationReattendColumnCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Reattend Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column reattended. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationReattendColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationReattendColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Reattend Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column reattended. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationReattendColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationReattendColumnValidateBeforeCall(storeId, executionId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reattend Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog column reattended. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationReattendColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationReattendColumnValidateBeforeCall(storeId, executionId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationSaveCustomColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationSaveCustomColumnCall(String storeId, String executionId, String columnId, ChangeCustomColumnRequest changeCustomColumnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeCustomColumnRequest;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationSaveCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, ChangeCustomColumnRequest changeCustomColumnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationSaveCustomColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationSaveCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationSaveCustomColumn(Async)");
        }

        // verify the required parameter 'changeCustomColumnRequest' is set
        if (changeCustomColumnRequest == null) {
            throw new ApiException("Missing the required parameter 'changeCustomColumnRequest' when calling importationSaveCustomColumn(Async)");
        }

        return importationSaveCustomColumnCall(storeId, executionId, columnId, changeCustomColumnRequest, _callback);

    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationSaveCustomColumn(String storeId, String executionId, String columnId, ChangeCustomColumnRequest changeCustomColumnRequest) throws ApiException {
        importationSaveCustomColumnWithHttpInfo(storeId, executionId, columnId, changeCustomColumnRequest);
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationSaveCustomColumnWithHttpInfo(String storeId, String executionId, String columnId, ChangeCustomColumnRequest changeCustomColumnRequest) throws ApiException {
        okhttp3.Call localVarCall = importationSaveCustomColumnValidateBeforeCall(storeId, executionId, columnId, changeCustomColumnRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or replace a custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param changeCustomColumnRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column configured. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationSaveCustomColumnAsync(String storeId, String executionId, String columnId, ChangeCustomColumnRequest changeCustomColumnRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationSaveCustomColumnValidateBeforeCall(storeId, executionId, columnId, changeCustomColumnRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationUnmapCatalogColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog Column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationUnmapCatalogColumnCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationUnmapCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationUnmapCatalogColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationUnmapCatalogColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationUnmapCatalogColumn(Async)");
        }

        return importationUnmapCatalogColumnCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Unmap catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog Column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationUnmapCatalogColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationUnmapCatalogColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Unmap catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog Column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationUnmapCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationUnmapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unmap catalog column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalog Column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationUnmapCatalogColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationUnmapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importationUnmapCustomColumn
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationUnmapCustomColumnCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap"
            .replace("{" + "storeId" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "columnId" + "}", localVarApiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importationUnmapCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationUnmapCustomColumn(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationUnmapCustomColumn(Async)");
        }

        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationUnmapCustomColumn(Async)");
        }

        return importationUnmapCustomColumnCall(storeId, executionId, columnId, _callback);

    }

    /**
     * Unmap custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void importationUnmapCustomColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationUnmapCustomColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Unmap custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importationUnmapCustomColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        okhttp3.Call localVarCall = importationUnmapCustomColumnValidateBeforeCall(storeId, executionId, columnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unmap custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Custom column unmapped. This operation has no impact on the current catalog until you commit the catalog importation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Occurs when a user tries to work on the wrong store. Occurs when the message concerns the wrong execution. Occurs when a catalog column is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Occurs when this importation is already finished. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importationUnmapCustomColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importationUnmapCustomColumnValidateBeforeCall(storeId, executionId, columnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
