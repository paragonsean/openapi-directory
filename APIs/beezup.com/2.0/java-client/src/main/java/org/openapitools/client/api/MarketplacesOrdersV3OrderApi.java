/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.ChangeOrderReporting;
import org.openapitools.client.model.ErrorResponseMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderHistory;
import org.openapitools.client.model.OrderWithLinks;
import org.openapitools.client.model.SetMerchantOrderInfoRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketplacesOrdersV3OrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketplacesOrdersV3OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketplacesOrdersV3OrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeOrderV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, Boolean testMode, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()))
            .replace("{" + "changeOrderType" + "}", localVarApiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, Boolean testMode, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrderV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeOrderV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling changeOrderV3(Async)");
        }

        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrderV3(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrderV3(Async)");
        }

        return changeOrderV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, testMode, requestBody, _callback);

    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void changeOrderV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, Boolean testMode, Map<String, String> requestBody) throws ApiException {
        changeOrderV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, testMode, requestBody);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeOrderV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, Boolean testMode, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = changeOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, testMode, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.) (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Order change request accepted </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid order change request, could not be send to the marketplace. Please check the body of this request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already processing a change request for this Order.\\ Please refresh your clients Order information and retry later.  </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 412 </td><td> The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource. </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String changeOrderType, String userName, Boolean testMode, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, testMode, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearMerchantOrderInfoV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Clear Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMerchantOrderInfoV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, Boolean testMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMerchantOrderInfoV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, Boolean testMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfoV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling clearMerchantOrderInfoV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfoV3(Async)");
        }

        return clearMerchantOrderInfoV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, testMode, _callback);

    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Clear Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void clearMerchantOrderInfoV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, Boolean testMode) throws ApiException {
        clearMerchantOrderInfoV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, testMode);
    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Clear Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clearMerchantOrderInfoV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, Boolean testMode) throws ApiException {
        okhttp3.Call localVarCall = clearMerchantOrderInfoV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, testMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Clear an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Clear Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMerchantOrderInfoV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, Boolean testMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMerchantOrderInfoV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, testMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderChangeReportingV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param orderChangeExecutionUUID The order change execution id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order change reporting </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderChangeReportingV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String orderChangeExecutionUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history/{orderChangeExecutionUUID}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()))
            .replace("{" + "orderChangeExecutionUUID" + "}", localVarApiClient.escapeString(orderChangeExecutionUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderChangeReportingV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String orderChangeExecutionUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderChangeReportingV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderChangeReportingV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderChangeReportingV3(Async)");
        }

        // verify the required parameter 'orderChangeExecutionUUID' is set
        if (orderChangeExecutionUUID == null) {
            throw new ApiException("Missing the required parameter 'orderChangeExecutionUUID' when calling getOrderChangeReportingV3(Async)");
        }

        return getOrderChangeReportingV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID, _callback);

    }

    /**
     * Get the order change reporting
     * This operation will help you to know the status of your order change operation
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param orderChangeExecutionUUID The order change execution id (required)
     * @return ChangeOrderReporting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order change reporting </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ChangeOrderReporting getOrderChangeReportingV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String orderChangeExecutionUUID) throws ApiException {
        ApiResponse<ChangeOrderReporting> localVarResp = getOrderChangeReportingV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID);
        return localVarResp.getData();
    }

    /**
     * Get the order change reporting
     * This operation will help you to know the status of your order change operation
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param orderChangeExecutionUUID The order change execution id (required)
     * @return ApiResponse&lt;ChangeOrderReporting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order change reporting </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeOrderReporting> getOrderChangeReportingV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String orderChangeExecutionUUID) throws ApiException {
        okhttp3.Call localVarCall = getOrderChangeReportingV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID, null);
        Type localVarReturnType = new TypeToken<ChangeOrderReporting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the order change reporting (asynchronously)
     * This operation will help you to know the status of your order change operation
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param orderChangeExecutionUUID The order change execution id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order change reporting </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderChangeReportingV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String orderChangeExecutionUUID, final ApiCallback<ChangeOrderReporting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderChangeReportingV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID, _callback);
        Type localVarReturnType = new TypeToken<ChangeOrderReporting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderHistoryV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHistoryV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderHistoryV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistoryV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderHistoryV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderHistoryV3(Async)");
        }

        return getOrderHistoryV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);

    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return OrderHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public OrderHistory getOrderHistoryV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        ApiResponse<OrderHistory> localVarResp = getOrderHistoryV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        return localVarResp.getData();
    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;OrderHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderHistory> getOrderHistoryV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderHistoryV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Order&#39;s harvest and change history (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order history </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHistoryV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback<OrderHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderHistoryV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderV3(Async)");
        }

        return getOrderV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);

    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return OrderWithLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public OrderWithLinks getOrderV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        ApiResponse<OrderWithLinks> localVarResp = getOrderV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;OrderWithLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderWithLinks> getOrderV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<OrderWithLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get full Order and Order Item(s) properties (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback<OrderWithLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<OrderWithLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for harvestAccount
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param marketplaceOrderId  (optional)
     * @param beezUPOrderId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Account Or beezUPOrderId could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestAccountCall(String marketplaceTechnicalCode, Integer accountId, String marketplaceOrderId, String beezUPOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/harvest"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketplaceOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceOrderId", marketplaceOrderId));
        }

        if (beezUPOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beezUPOrderId", beezUPOrderId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call harvestAccountValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String marketplaceOrderId, String beezUPOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestAccount(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestAccount(Async)");
        }

        return harvestAccountCall(marketplaceTechnicalCode, accountId, marketplaceOrderId, beezUPOrderId, _callback);

    }

    /**
     * Send harvest request for an Account
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param marketplaceOrderId  (optional)
     * @param beezUPOrderId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Account Or beezUPOrderId could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void harvestAccount(String marketplaceTechnicalCode, Integer accountId, String marketplaceOrderId, String beezUPOrderId) throws ApiException {
        harvestAccountWithHttpInfo(marketplaceTechnicalCode, accountId, marketplaceOrderId, beezUPOrderId);
    }

    /**
     * Send harvest request for an Account
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param marketplaceOrderId  (optional)
     * @param beezUPOrderId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Account Or beezUPOrderId could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> harvestAccountWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String marketplaceOrderId, String beezUPOrderId) throws ApiException {
        okhttp3.Call localVarCall = harvestAccountValidateBeforeCall(marketplaceTechnicalCode, accountId, marketplaceOrderId, beezUPOrderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send harvest request for an Account (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param marketplaceOrderId  (optional)
     * @param beezUPOrderId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Account Or beezUPOrderId could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestAccountAsync(String marketplaceTechnicalCode, Integer accountId, String marketplaceOrderId, String beezUPOrderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = harvestAccountValidateBeforeCall(marketplaceTechnicalCode, accountId, marketplaceOrderId, beezUPOrderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for harvestOrderV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestOrderV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call harvestOrderV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrderV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestOrderV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling harvestOrderV3(Async)");
        }

        return harvestOrderV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);

    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void harvestOrderV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        harvestOrderV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> harvestOrderV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId) throws ApiException {
        okhttp3.Call localVarCall = harvestOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send harvest request for a single Order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully sent Order harvest request </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Failed to send harvest request because allowed rate limits have been exceeded </td><td>  * Retry-After - Indicates the duration in seconds to wait to be able to make this request again <br>  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call harvestOrderV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = harvestOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for headOrderV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headOrderV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headOrderV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling headOrderV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling headOrderV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling headOrderV3(Async)");
        }

        return headOrderV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);

    }

    /**
     * Get the meta information about the order (ETag, Last-Modified)
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void headOrderV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        headOrderV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
    }

    /**
     * Get the meta information about the order (ETag, Last-Modified)
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> headOrderV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = headOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the meta information about the order (ETag, Last-Modified) (asynchronously)
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched Order and Order Item(s) properties </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 304 </td><td> The ETag sent in the http header If-None-Match did not change. So you are up to date ! </td><td>  * ETag - The ETag value to identify the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  <br>  * Last-Modified - Last modification UTC date of the resource\\ For more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2  <br>  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headOrderV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = headOrderV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMerchantOrderInfoV3
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Set Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantOrderInfoV3Call(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, Boolean testMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setMerchantOrderInfoRequest;

        // create path and map variables
        String localVarPath = "/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo"
            .replace("{" + "marketplaceTechnicalCode" + "}", localVarApiClient.escapeString(marketplaceTechnicalCode.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "beezUPOrderId" + "}", localVarApiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testMode", testMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMerchantOrderInfoV3ValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, Boolean testMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfoV3(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setMerchantOrderInfoV3(Async)");
        }

        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfoV3(Async)");
        }

        // verify the required parameter 'setMerchantOrderInfoRequest' is set
        if (setMerchantOrderInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'setMerchantOrderInfoRequest' when calling setMerchantOrderInfoV3(Async)");
        }

        return setMerchantOrderInfoV3Call(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, testMode, _callback);

    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Set Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public void setMerchantOrderInfoV3(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, Boolean testMode) throws ApiException {
        setMerchantOrderInfoV3WithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, testMode);
    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Set Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setMerchantOrderInfoV3WithHttpInfo(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, Boolean testMode) throws ApiException {
        okhttp3.Call localVarCall = setMerchantOrderInfoV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, testMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId  (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param setMerchantOrderInfoRequest  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Set Order merchant order info accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not update Order merchant information. Please see body for more information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested Order could not be found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantOrderInfoV3Async(String marketplaceTechnicalCode, Integer accountId, UUID beezUPOrderId, SetMerchantOrderInfoRequest setMerchantOrderInfoRequest, Boolean testMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMerchantOrderInfoV3ValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, testMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
