/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OfferFunctionality;
import org.openapitools.client.model.StandardOfferLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StandardOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardOffer {
  public static final String SERIALIZED_NAME_ADDITIONAL_CLICK_PRICE = "additionalClickPrice";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CLICK_PRICE)
  private Double additionalClickPrice;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "fixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_FUNCTIONALITIES = "functionalities";
  @SerializedName(SERIALIZED_NAME_FUNCTIONALITIES)
  private List<OfferFunctionality> functionalities = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_CLICK = "includedClick";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CLICK)
  private Integer includedClick;

  public static final String SERIALIZED_NAME_IS_MOST_POPULAR = "isMostPopular";
  @SerializedName(SERIALIZED_NAME_IS_MOST_POPULAR)
  private Boolean isMostPopular;

  public static final String SERIALIZED_NAME_IS_OLD_OFFER = "isOldOffer";
  @SerializedName(SERIALIZED_NAME_IS_OLD_OFFER)
  private Boolean isOldOffer;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private StandardOfferLinks links;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private Integer offerId;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public StandardOffer() {
  }

  public StandardOffer additionalClickPrice(Double additionalClickPrice) {
    this.additionalClickPrice = additionalClickPrice;
    return this;
  }

  /**
   * The additional click price
   * @return additionalClickPrice
   */
  @javax.annotation.Nullable
  public Double getAdditionalClickPrice() {
    return additionalClickPrice;
  }

  public void setAdditionalClickPrice(Double additionalClickPrice) {
    this.additionalClickPrice = additionalClickPrice;
  }


  public StandardOffer currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public StandardOffer fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * The fixed price of the offer
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public StandardOffer functionalities(List<OfferFunctionality> functionalities) {
    this.functionalities = functionalities;
    return this;
  }

  public StandardOffer addFunctionalitiesItem(OfferFunctionality functionalitiesItem) {
    if (this.functionalities == null) {
      this.functionalities = new ArrayList<>();
    }
    this.functionalities.add(functionalitiesItem);
    return this;
  }

  /**
   * Get functionalities
   * @return functionalities
   */
  @javax.annotation.Nullable
  public List<OfferFunctionality> getFunctionalities() {
    return functionalities;
  }

  public void setFunctionalities(List<OfferFunctionality> functionalities) {
    this.functionalities = functionalities;
  }


  public StandardOffer includedClick(Integer includedClick) {
    this.includedClick = includedClick;
    return this;
  }

  /**
   * The included click
   * @return includedClick
   */
  @javax.annotation.Nullable
  public Integer getIncludedClick() {
    return includedClick;
  }

  public void setIncludedClick(Integer includedClick) {
    this.includedClick = includedClick;
  }


  public StandardOffer isMostPopular(Boolean isMostPopular) {
    this.isMostPopular = isMostPopular;
    return this;
  }

  /**
   * UI purpose. Is the offer is the most popular
   * @return isMostPopular
   */
  @javax.annotation.Nullable
  public Boolean getIsMostPopular() {
    return isMostPopular;
  }

  public void setIsMostPopular(Boolean isMostPopular) {
    this.isMostPopular = isMostPopular;
  }


  public StandardOffer isOldOffer(Boolean isOldOffer) {
    this.isOldOffer = isOldOffer;
    return this;
  }

  /**
   * Is an old offer
   * @return isOldOffer
   */
  @javax.annotation.Nullable
  public Boolean getIsOldOffer() {
    return isOldOffer;
  }

  public void setIsOldOffer(Boolean isOldOffer) {
    this.isOldOffer = isOldOffer;
  }


  public StandardOffer links(StandardOfferLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public StandardOfferLinks getLinks() {
    return links;
  }

  public void setLinks(StandardOfferLinks links) {
    this.links = links;
  }


  public StandardOffer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The offer name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StandardOffer offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * The offer Id
   * @return offerId
   */
  @javax.annotation.Nonnull
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }


  public StandardOffer position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * UI purpose. The position of the offer
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardOffer standardOffer = (StandardOffer) o;
    return Objects.equals(this.additionalClickPrice, standardOffer.additionalClickPrice) &&
        Objects.equals(this.currencyCode, standardOffer.currencyCode) &&
        Objects.equals(this.fixedPrice, standardOffer.fixedPrice) &&
        Objects.equals(this.functionalities, standardOffer.functionalities) &&
        Objects.equals(this.includedClick, standardOffer.includedClick) &&
        Objects.equals(this.isMostPopular, standardOffer.isMostPopular) &&
        Objects.equals(this.isOldOffer, standardOffer.isOldOffer) &&
        Objects.equals(this.links, standardOffer.links) &&
        Objects.equals(this.name, standardOffer.name) &&
        Objects.equals(this.offerId, standardOffer.offerId) &&
        Objects.equals(this.position, standardOffer.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalClickPrice, currencyCode, fixedPrice, functionalities, includedClick, isMostPopular, isOldOffer, links, name, offerId, position);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardOffer {\n");
    sb.append("    additionalClickPrice: ").append(toIndentedString(additionalClickPrice)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    functionalities: ").append(toIndentedString(functionalities)).append("\n");
    sb.append("    includedClick: ").append(toIndentedString(includedClick)).append("\n");
    sb.append("    isMostPopular: ").append(toIndentedString(isMostPopular)).append("\n");
    sb.append("    isOldOffer: ").append(toIndentedString(isOldOffer)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalClickPrice");
    openapiFields.add("currencyCode");
    openapiFields.add("fixedPrice");
    openapiFields.add("functionalities");
    openapiFields.add("includedClick");
    openapiFields.add("isMostPopular");
    openapiFields.add("isOldOffer");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("offerId");
    openapiFields.add("position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("offerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardOffer is not found in the empty JSON string", StandardOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StandardOffer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (jsonObj.get("functionalities") != null && !jsonObj.get("functionalities").isJsonNull()) {
        JsonArray jsonArrayfunctionalities = jsonObj.getAsJsonArray("functionalities");
        if (jsonArrayfunctionalities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("functionalities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `functionalities` to be an array in the JSON string but got `%s`", jsonObj.get("functionalities").toString()));
          }

          // validate the optional field `functionalities` (array)
          for (int i = 0; i < jsonArrayfunctionalities.size(); i++) {
            OfferFunctionality.validateJsonElement(jsonArrayfunctionalities.get(i));
          };
        }
      }
      // validate the required field `links`
      StandardOfferLinks.validateJsonElement(jsonObj.get("links"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardOffer>() {
           @Override
           public void write(JsonWriter out, StandardOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardOffer
   * @throws IOException if the JSON string is invalid with respect to StandardOffer
   */
  public static StandardOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardOffer.class);
  }

  /**
   * Convert an instance of StandardOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

