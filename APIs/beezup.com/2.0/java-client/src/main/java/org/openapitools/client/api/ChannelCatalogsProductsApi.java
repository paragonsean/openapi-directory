/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeezUPCommonErrorResponseMessage;
import org.openapitools.client.model.BeezUPCommonLink3;
import org.openapitools.client.model.ChannelCatalogProductByChannelCatalogRequest;
import org.openapitools.client.model.ChannelCatalogProductByChannelCatalogResponse;
import org.openapitools.client.model.ChannelCatalogProductInfo;
import org.openapitools.client.model.ChannelCatalogProductInfoList;
import org.openapitools.client.model.ChannelCatalogProductsCounters;
import org.openapitools.client.model.GetChannelCatalogProductInfoListRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelCatalogsProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelCatalogsProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelCatalogsProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportChannelCatalogProductInfoList
     * @param channelCatalogId The channel catalog identifier (required)
     * @param format The file type of the exportation (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information list exported </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportChannelCatalogProductInfoListCall(String channelCatalogId, String format, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChannelCatalogProductInfoListRequest;

        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/export"
            .replace("{" + "channelCatalogId" + "}", localVarApiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportChannelCatalogProductInfoListValidateBeforeCall(String channelCatalogId, String format, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling exportChannelCatalogProductInfoList(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportChannelCatalogProductInfoList(Async)");
        }

        // verify the required parameter 'getChannelCatalogProductInfoListRequest' is set
        if (getChannelCatalogProductInfoListRequest == null) {
            throw new ApiException("Missing the required parameter 'getChannelCatalogProductInfoListRequest' when calling exportChannelCatalogProductInfoList(Async)");
        }

        return exportChannelCatalogProductInfoListCall(channelCatalogId, format, getChannelCatalogProductInfoListRequest, _callback);

    }

    /**
     * Export channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param format The file type of the exportation (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @return BeezUPCommonLink3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information list exported </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public BeezUPCommonLink3 exportChannelCatalogProductInfoList(String channelCatalogId, String format, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest) throws ApiException {
        ApiResponse<BeezUPCommonLink3> localVarResp = exportChannelCatalogProductInfoListWithHttpInfo(channelCatalogId, format, getChannelCatalogProductInfoListRequest);
        return localVarResp.getData();
    }

    /**
     * Export channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param format The file type of the exportation (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @return ApiResponse&lt;BeezUPCommonLink3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information list exported </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeezUPCommonLink3> exportChannelCatalogProductInfoListWithHttpInfo(String channelCatalogId, String format, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest) throws ApiException {
        okhttp3.Call localVarCall = exportChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, format, getChannelCatalogProductInfoListRequest, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export channel catalog product information list (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param format The file type of the exportation (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information list exported </td><td>  * Location - The location of the generated invoice. Might take a few seconds to be available <br>  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportChannelCatalogProductInfoListAsync(String channelCatalogId, String format, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback<BeezUPCommonLink3> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, format, getChannelCatalogProductInfoListRequest, _callback);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCatalogProductByChannelCatalog
     * @param channelCatalogProductByChannelCatalogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel catalog product by channel catalog </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductByChannelCatalogCall(ChannelCatalogProductByChannelCatalogRequest channelCatalogProductByChannelCatalogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelCatalogProductByChannelCatalogRequest;

        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCatalogProductByChannelCatalogValidateBeforeCall(ChannelCatalogProductByChannelCatalogRequest channelCatalogProductByChannelCatalogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelCatalogProductByChannelCatalogRequest' is set
        if (channelCatalogProductByChannelCatalogRequest == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogProductByChannelCatalogRequest' when calling getChannelCatalogProductByChannelCatalog(Async)");
        }

        return getChannelCatalogProductByChannelCatalogCall(channelCatalogProductByChannelCatalogRequest, _callback);

    }

    /**
     * Get channel catalog products related to these channel catalogs
     * 
     * @param channelCatalogProductByChannelCatalogRequest  (required)
     * @return ChannelCatalogProductByChannelCatalogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel catalog product by channel catalog </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ChannelCatalogProductByChannelCatalogResponse getChannelCatalogProductByChannelCatalog(ChannelCatalogProductByChannelCatalogRequest channelCatalogProductByChannelCatalogRequest) throws ApiException {
        ApiResponse<ChannelCatalogProductByChannelCatalogResponse> localVarResp = getChannelCatalogProductByChannelCatalogWithHttpInfo(channelCatalogProductByChannelCatalogRequest);
        return localVarResp.getData();
    }

    /**
     * Get channel catalog products related to these channel catalogs
     * 
     * @param channelCatalogProductByChannelCatalogRequest  (required)
     * @return ApiResponse&lt;ChannelCatalogProductByChannelCatalogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel catalog product by channel catalog </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelCatalogProductByChannelCatalogResponse> getChannelCatalogProductByChannelCatalogWithHttpInfo(ChannelCatalogProductByChannelCatalogRequest channelCatalogProductByChannelCatalogRequest) throws ApiException {
        okhttp3.Call localVarCall = getChannelCatalogProductByChannelCatalogValidateBeforeCall(channelCatalogProductByChannelCatalogRequest, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductByChannelCatalogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel catalog products related to these channel catalogs (asynchronously)
     * 
     * @param channelCatalogProductByChannelCatalogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel catalog product by channel catalog </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductByChannelCatalogAsync(ChannelCatalogProductByChannelCatalogRequest channelCatalogProductByChannelCatalogRequest, final ApiCallback<ChannelCatalogProductByChannelCatalogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCatalogProductByChannelCatalogValidateBeforeCall(channelCatalogProductByChannelCatalogRequest, _callback);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductByChannelCatalogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCatalogProductInfo
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalog or ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductInfoCall(String channelCatalogId, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}"
            .replace("{" + "channelCatalogId" + "}", localVarApiClient.escapeString(channelCatalogId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCatalogProductInfoValidateBeforeCall(String channelCatalogId, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfo(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getChannelCatalogProductInfo(Async)");
        }

        return getChannelCatalogProductInfoCall(channelCatalogId, productId, _callback);

    }

    /**
     * Get channel catalog product information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ChannelCatalogProductInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalog or ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ChannelCatalogProductInfo getChannelCatalogProductInfo(String channelCatalogId, String productId) throws ApiException {
        ApiResponse<ChannelCatalogProductInfo> localVarResp = getChannelCatalogProductInfoWithHttpInfo(channelCatalogId, productId);
        return localVarResp.getData();
    }

    /**
     * Get channel catalog product information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ApiResponse&lt;ChannelCatalogProductInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalog or ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelCatalogProductInfo> getChannelCatalogProductInfoWithHttpInfo(String channelCatalogId, String productId) throws ApiException {
        okhttp3.Call localVarCall = getChannelCatalogProductInfoValidateBeforeCall(channelCatalogId, productId, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel catalog product information (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalog or ProductId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductInfoAsync(String channelCatalogId, String productId, final ApiCallback<ChannelCatalogProductInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCatalogProductInfoValidateBeforeCall(channelCatalogId, productId, _callback);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCatalogProductInfoList
     * @param channelCatalogId The channel catalog identifier (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductInfoListCall(String channelCatalogId, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChannelCatalogProductInfoListRequest;

        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products"
            .replace("{" + "channelCatalogId" + "}", localVarApiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCatalogProductInfoListValidateBeforeCall(String channelCatalogId, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfoList(Async)");
        }

        // verify the required parameter 'getChannelCatalogProductInfoListRequest' is set
        if (getChannelCatalogProductInfoListRequest == null) {
            throw new ApiException("Missing the required parameter 'getChannelCatalogProductInfoListRequest' when calling getChannelCatalogProductInfoList(Async)");
        }

        return getChannelCatalogProductInfoListCall(channelCatalogId, getChannelCatalogProductInfoListRequest, _callback);

    }

    /**
     * Get channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @return ChannelCatalogProductInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ChannelCatalogProductInfoList getChannelCatalogProductInfoList(String channelCatalogId, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest) throws ApiException {
        ApiResponse<ChannelCatalogProductInfoList> localVarResp = getChannelCatalogProductInfoListWithHttpInfo(channelCatalogId, getChannelCatalogProductInfoListRequest);
        return localVarResp.getData();
    }

    /**
     * Get channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @return ApiResponse&lt;ChannelCatalogProductInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelCatalogProductInfoList> getChannelCatalogProductInfoListWithHttpInfo(String channelCatalogId, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest) throws ApiException {
        okhttp3.Call localVarCall = getChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, getChannelCatalogProductInfoListRequest, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel catalog product information list (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param getChannelCatalogProductInfoListRequest The channel catalog product list filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog product information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductInfoListAsync(String channelCatalogId, GetChannelCatalogProductInfoListRequest getChannelCatalogProductInfoListRequest, final ApiCallback<ChannelCatalogProductInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, getChannelCatalogProductInfoListRequest, _callback);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCatalogProductsCounters
     * @param channelCatalogId The channel catalog identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog products&#39; counters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductsCountersCall(String channelCatalogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/counters"
            .replace("{" + "channelCatalogId" + "}", localVarApiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCatalogProductsCountersValidateBeforeCall(String channelCatalogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductsCounters(Async)");
        }

        return getChannelCatalogProductsCountersCall(channelCatalogId, _callback);

    }

    /**
     * Get channel catalog products&#39; counters
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ChannelCatalogProductsCounters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog products&#39; counters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ChannelCatalogProductsCounters getChannelCatalogProductsCounters(String channelCatalogId) throws ApiException {
        ApiResponse<ChannelCatalogProductsCounters> localVarResp = getChannelCatalogProductsCountersWithHttpInfo(channelCatalogId);
        return localVarResp.getData();
    }

    /**
     * Get channel catalog products&#39; counters
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ApiResponse&lt;ChannelCatalogProductsCounters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog products&#39; counters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelCatalogProductsCounters> getChannelCatalogProductsCountersWithHttpInfo(String channelCatalogId) throws ApiException {
        okhttp3.Call localVarCall = getChannelCatalogProductsCountersValidateBeforeCall(channelCatalogId, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductsCounters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get channel catalog products&#39; counters (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel catalog products&#39; counters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ChannelCatalogId not found or not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Occurs when something goes wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCatalogProductsCountersAsync(String channelCatalogId, final ApiCallback<ChannelCatalogProductsCounters> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCatalogProductsCountersValidateBeforeCall(channelCatalogId, _callback);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductsCounters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
