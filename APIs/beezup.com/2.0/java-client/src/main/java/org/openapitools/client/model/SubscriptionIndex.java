/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ConsumptionAvailabilityStatus;
import org.openapitools.client.model.ErrorResponseMessage;
import org.openapitools.client.model.SubscriptionLinks;
import org.openapitools.client.model.SubscriptionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionIndex
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionIndex {
  public static final String SERIALIZED_NAME_CONSUMER_HEALTH_STATUS = "consumerHealthStatus";
  @SerializedName(SERIALIZED_NAME_CONSUMER_HEALTH_STATUS)
  private ConsumptionAvailabilityStatus consumerHealthStatus;

  public static final String SERIALIZED_NAME_CONSUMER_LAST_REQUEST_SENT_URI = "consumerLastRequestSentUri";
  @SerializedName(SERIALIZED_NAME_CONSUMER_LAST_REQUEST_SENT_URI)
  private String consumerLastRequestSentUri;

  public static final String SERIALIZED_NAME_CONSUMER_UNVAILABLE_SINCE_UTC_DATE = "consumerUnvailableSinceUtcDate";
  @SerializedName(SERIALIZED_NAME_CONSUMER_UNVAILABLE_SINCE_UTC_DATE)
  private OffsetDateTime consumerUnvailableSinceUtcDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_ERROR_MESSAGE = "lastErrorMessage";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_MESSAGE)
  private ErrorResponseMessage lastErrorMessage;

  public static final String SERIALIZED_NAME_LAST_ORDER_PUSHED_MODIFICATION_UTC_DATE = "lastOrderPushedModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_ORDER_PUSHED_MODIFICATION_UTC_DATE)
  private OffsetDateTime lastOrderPushedModificationUtcDate;

  public static final String SERIALIZED_NAME_LAST_RETRY_UTC_DATE = "lastRetryUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_RETRY_UTC_DATE)
  private OffsetDateTime lastRetryUtcDate;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_ORDER_PUSHED_UTC_DATE = "lastSuccessfulOrderPushedUtcDate";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_ORDER_PUSHED_UTC_DATE)
  private OffsetDateTime lastSuccessfulOrderPushedUtcDate;

  public static final String SERIALIZED_NAME_MAX_RETRY_COUNT = "maxRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_RETRY_COUNT)
  private Integer maxRetryCount;

  public static final String SERIALIZED_NAME_MERCHANT_APPLICATION_NAME = "merchantApplicationName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_APPLICATION_NAME)
  private String merchantApplicationName;

  public static final String SERIALIZED_NAME_MERCHANT_APPLICATION_VERSION = "merchantApplicationVersion";
  @SerializedName(SERIALIZED_NAME_MERCHANT_APPLICATION_VERSION)
  private String merchantApplicationVersion = "1.0";

  public static final String SERIALIZED_NAME_MERCHANT_EMAIL_ALERT = "merchantEmailAlert";
  @SerializedName(SERIALIZED_NAME_MERCHANT_EMAIL_ALERT)
  private String merchantEmailAlert;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_SCHEDULED_RETRY_UTC_DATE = "nextScheduledRetryUtcDate";
  @SerializedName(SERIALIZED_NAME_NEXT_SCHEDULED_RETRY_UTC_DATE)
  private OffsetDateTime nextScheduledRetryUtcDate;

  public static final String SERIALIZED_NAME_RECOVER_BEGIN_PERIOD_ORDER_LAST_MODIFICATION_UTC_DATE = "recoverBeginPeriodOrderLastModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_RECOVER_BEGIN_PERIOD_ORDER_LAST_MODIFICATION_UTC_DATE)
  private OffsetDateTime recoverBeginPeriodOrderLastModificationUtcDate;

  public static final String SERIALIZED_NAME_RECOVER_END_PERIOD_ORDER_LAST_MODIFICATION_UTC_DATE = "recoverEndPeriodOrderLastModificationUtcDate";
  @SerializedName(SERIALIZED_NAME_RECOVER_END_PERIOD_ORDER_LAST_MODIFICATION_UTC_DATE)
  private OffsetDateTime recoverEndPeriodOrderLastModificationUtcDate;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SubscriptionStatus status;

  public static final String SERIALIZED_NAME_TARGET_URL = "targetUrl";
  @SerializedName(SERIALIZED_NAME_TARGET_URL)
  private String targetUrl;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SubscriptionLinks links;

  public SubscriptionIndex() {
  }

  public SubscriptionIndex consumerHealthStatus(ConsumptionAvailabilityStatus consumerHealthStatus) {
    this.consumerHealthStatus = consumerHealthStatus;
    return this;
  }

  /**
   * Get consumerHealthStatus
   * @return consumerHealthStatus
   */
  @javax.annotation.Nullable
  public ConsumptionAvailabilityStatus getConsumerHealthStatus() {
    return consumerHealthStatus;
  }

  public void setConsumerHealthStatus(ConsumptionAvailabilityStatus consumerHealthStatus) {
    this.consumerHealthStatus = consumerHealthStatus;
  }


  public SubscriptionIndex consumerLastRequestSentUri(String consumerLastRequestSentUri) {
    this.consumerLastRequestSentUri = consumerLastRequestSentUri;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return consumerLastRequestSentUri
   */
  @javax.annotation.Nullable
  public String getConsumerLastRequestSentUri() {
    return consumerLastRequestSentUri;
  }

  public void setConsumerLastRequestSentUri(String consumerLastRequestSentUri) {
    this.consumerLastRequestSentUri = consumerLastRequestSentUri;
  }


  public SubscriptionIndex consumerUnvailableSinceUtcDate(OffsetDateTime consumerUnvailableSinceUtcDate) {
    this.consumerUnvailableSinceUtcDate = consumerUnvailableSinceUtcDate;
    return this;
  }

  /**
   * This date indicates since when the subscription consumer is unavailable
   * @return consumerUnvailableSinceUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConsumerUnvailableSinceUtcDate() {
    return consumerUnvailableSinceUtcDate;
  }

  public void setConsumerUnvailableSinceUtcDate(OffsetDateTime consumerUnvailableSinceUtcDate) {
    this.consumerUnvailableSinceUtcDate = consumerUnvailableSinceUtcDate;
  }


  public SubscriptionIndex id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the subscription to the orders for a merchant
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubscriptionIndex lastErrorMessage(ErrorResponseMessage lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
    return this;
  }

  /**
   * Get lastErrorMessage
   * @return lastErrorMessage
   */
  @javax.annotation.Nullable
  public ErrorResponseMessage getLastErrorMessage() {
    return lastErrorMessage;
  }

  public void setLastErrorMessage(ErrorResponseMessage lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
  }


  public SubscriptionIndex lastOrderPushedModificationUtcDate(OffsetDateTime lastOrderPushedModificationUtcDate) {
    this.lastOrderPushedModificationUtcDate = lastOrderPushedModificationUtcDate;
    return this;
  }

  /**
   * This modification date correspond to the last order pushed by your subscription consumer
   * @return lastOrderPushedModificationUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastOrderPushedModificationUtcDate() {
    return lastOrderPushedModificationUtcDate;
  }

  public void setLastOrderPushedModificationUtcDate(OffsetDateTime lastOrderPushedModificationUtcDate) {
    this.lastOrderPushedModificationUtcDate = lastOrderPushedModificationUtcDate;
  }


  public SubscriptionIndex lastRetryUtcDate(OffsetDateTime lastRetryUtcDate) {
    this.lastRetryUtcDate = lastRetryUtcDate;
    return this;
  }

  /**
   * The last date we retry to send orders
   * @return lastRetryUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRetryUtcDate() {
    return lastRetryUtcDate;
  }

  public void setLastRetryUtcDate(OffsetDateTime lastRetryUtcDate) {
    this.lastRetryUtcDate = lastRetryUtcDate;
  }


  public SubscriptionIndex lastSuccessfulOrderPushedUtcDate(OffsetDateTime lastSuccessfulOrderPushedUtcDate) {
    this.lastSuccessfulOrderPushedUtcDate = lastSuccessfulOrderPushedUtcDate;
    return this;
  }

  /**
   * The date of the last pushed order successfully received by your subscription consumer
   * @return lastSuccessfulOrderPushedUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulOrderPushedUtcDate() {
    return lastSuccessfulOrderPushedUtcDate;
  }

  public void setLastSuccessfulOrderPushedUtcDate(OffsetDateTime lastSuccessfulOrderPushedUtcDate) {
    this.lastSuccessfulOrderPushedUtcDate = lastSuccessfulOrderPushedUtcDate;
  }


  public SubscriptionIndex maxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
    return this;
  }

  /**
   * The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
   * @return maxRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxRetryCount() {
    return maxRetryCount;
  }

  public void setMaxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
  }


  public SubscriptionIndex merchantApplicationName(String merchantApplicationName) {
    this.merchantApplicationName = merchantApplicationName;
    return this;
  }

  /**
   * The name of your application
   * @return merchantApplicationName
   */
  @javax.annotation.Nonnull
  public String getMerchantApplicationName() {
    return merchantApplicationName;
  }

  public void setMerchantApplicationName(String merchantApplicationName) {
    this.merchantApplicationName = merchantApplicationName;
  }


  public SubscriptionIndex merchantApplicationVersion(String merchantApplicationVersion) {
    this.merchantApplicationVersion = merchantApplicationVersion;
    return this;
  }

  /**
   * The version of your application
   * @return merchantApplicationVersion
   */
  @javax.annotation.Nonnull
  public String getMerchantApplicationVersion() {
    return merchantApplicationVersion;
  }

  public void setMerchantApplicationVersion(String merchantApplicationVersion) {
    this.merchantApplicationVersion = merchantApplicationVersion;
  }


  public SubscriptionIndex merchantEmailAlert(String merchantEmailAlert) {
    this.merchantEmailAlert = merchantEmailAlert;
    return this;
  }

  /**
   * The email
   * @return merchantEmailAlert
   */
  @javax.annotation.Nullable
  public String getMerchantEmailAlert() {
    return merchantEmailAlert;
  }

  public void setMerchantEmailAlert(String merchantEmailAlert) {
    this.merchantEmailAlert = merchantEmailAlert;
  }


  public SubscriptionIndex name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The subscription name you want to use
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SubscriptionIndex nextScheduledRetryUtcDate(OffsetDateTime nextScheduledRetryUtcDate) {
    this.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate;
    return this;
  }

  /**
   * The next scheduled  date we retry to send orders
   * @return nextScheduledRetryUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextScheduledRetryUtcDate() {
    return nextScheduledRetryUtcDate;
  }

  public void setNextScheduledRetryUtcDate(OffsetDateTime nextScheduledRetryUtcDate) {
    this.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate;
  }


  public SubscriptionIndex recoverBeginPeriodOrderLastModificationUtcDate(OffsetDateTime recoverBeginPeriodOrderLastModificationUtcDate) {
    this.recoverBeginPeriodOrderLastModificationUtcDate = recoverBeginPeriodOrderLastModificationUtcDate;
    return this;
  }

  /**
   * Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
   * @return recoverBeginPeriodOrderLastModificationUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRecoverBeginPeriodOrderLastModificationUtcDate() {
    return recoverBeginPeriodOrderLastModificationUtcDate;
  }

  public void setRecoverBeginPeriodOrderLastModificationUtcDate(OffsetDateTime recoverBeginPeriodOrderLastModificationUtcDate) {
    this.recoverBeginPeriodOrderLastModificationUtcDate = recoverBeginPeriodOrderLastModificationUtcDate;
  }


  public SubscriptionIndex recoverEndPeriodOrderLastModificationUtcDate(OffsetDateTime recoverEndPeriodOrderLastModificationUtcDate) {
    this.recoverEndPeriodOrderLastModificationUtcDate = recoverEndPeriodOrderLastModificationUtcDate;
    return this;
  }

  /**
   * Recover existing orders using the begin and the end period order last modification date. Otherwise, you will receive new/updated orders in real-time. 
   * @return recoverEndPeriodOrderLastModificationUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRecoverEndPeriodOrderLastModificationUtcDate() {
    return recoverEndPeriodOrderLastModificationUtcDate;
  }

  public void setRecoverEndPeriodOrderLastModificationUtcDate(OffsetDateTime recoverEndPeriodOrderLastModificationUtcDate) {
    this.recoverEndPeriodOrderLastModificationUtcDate = recoverEndPeriodOrderLastModificationUtcDate;
  }


  public SubscriptionIndex retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

  /**
   * The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
   * @return retryCount
   */
  @javax.annotation.Nullable
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public SubscriptionIndex status(SubscriptionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public SubscriptionStatus getStatus() {
    return status;
  }

  public void setStatus(SubscriptionStatus status) {
    this.status = status;
  }


  public SubscriptionIndex targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * The URL &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/URL\&quot;&gt;https://en.wikipedia.org/wiki/URL&lt;/a&gt;
   * @return targetUrl
   */
  @javax.annotation.Nonnull
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }


  public SubscriptionIndex links(SubscriptionLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SubscriptionLinks getLinks() {
    return links;
  }

  public void setLinks(SubscriptionLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionIndex subscriptionIndex = (SubscriptionIndex) o;
    return Objects.equals(this.consumerHealthStatus, subscriptionIndex.consumerHealthStatus) &&
        Objects.equals(this.consumerLastRequestSentUri, subscriptionIndex.consumerLastRequestSentUri) &&
        Objects.equals(this.consumerUnvailableSinceUtcDate, subscriptionIndex.consumerUnvailableSinceUtcDate) &&
        Objects.equals(this.id, subscriptionIndex.id) &&
        Objects.equals(this.lastErrorMessage, subscriptionIndex.lastErrorMessage) &&
        Objects.equals(this.lastOrderPushedModificationUtcDate, subscriptionIndex.lastOrderPushedModificationUtcDate) &&
        Objects.equals(this.lastRetryUtcDate, subscriptionIndex.lastRetryUtcDate) &&
        Objects.equals(this.lastSuccessfulOrderPushedUtcDate, subscriptionIndex.lastSuccessfulOrderPushedUtcDate) &&
        Objects.equals(this.maxRetryCount, subscriptionIndex.maxRetryCount) &&
        Objects.equals(this.merchantApplicationName, subscriptionIndex.merchantApplicationName) &&
        Objects.equals(this.merchantApplicationVersion, subscriptionIndex.merchantApplicationVersion) &&
        Objects.equals(this.merchantEmailAlert, subscriptionIndex.merchantEmailAlert) &&
        Objects.equals(this.name, subscriptionIndex.name) &&
        Objects.equals(this.nextScheduledRetryUtcDate, subscriptionIndex.nextScheduledRetryUtcDate) &&
        Objects.equals(this.recoverBeginPeriodOrderLastModificationUtcDate, subscriptionIndex.recoverBeginPeriodOrderLastModificationUtcDate) &&
        Objects.equals(this.recoverEndPeriodOrderLastModificationUtcDate, subscriptionIndex.recoverEndPeriodOrderLastModificationUtcDate) &&
        Objects.equals(this.retryCount, subscriptionIndex.retryCount) &&
        Objects.equals(this.status, subscriptionIndex.status) &&
        Objects.equals(this.targetUrl, subscriptionIndex.targetUrl) &&
        Objects.equals(this.links, subscriptionIndex.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerHealthStatus, consumerLastRequestSentUri, consumerUnvailableSinceUtcDate, id, lastErrorMessage, lastOrderPushedModificationUtcDate, lastRetryUtcDate, lastSuccessfulOrderPushedUtcDate, maxRetryCount, merchantApplicationName, merchantApplicationVersion, merchantEmailAlert, name, nextScheduledRetryUtcDate, recoverBeginPeriodOrderLastModificationUtcDate, recoverEndPeriodOrderLastModificationUtcDate, retryCount, status, targetUrl, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionIndex {\n");
    sb.append("    consumerHealthStatus: ").append(toIndentedString(consumerHealthStatus)).append("\n");
    sb.append("    consumerLastRequestSentUri: ").append(toIndentedString(consumerLastRequestSentUri)).append("\n");
    sb.append("    consumerUnvailableSinceUtcDate: ").append(toIndentedString(consumerUnvailableSinceUtcDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("    lastOrderPushedModificationUtcDate: ").append(toIndentedString(lastOrderPushedModificationUtcDate)).append("\n");
    sb.append("    lastRetryUtcDate: ").append(toIndentedString(lastRetryUtcDate)).append("\n");
    sb.append("    lastSuccessfulOrderPushedUtcDate: ").append(toIndentedString(lastSuccessfulOrderPushedUtcDate)).append("\n");
    sb.append("    maxRetryCount: ").append(toIndentedString(maxRetryCount)).append("\n");
    sb.append("    merchantApplicationName: ").append(toIndentedString(merchantApplicationName)).append("\n");
    sb.append("    merchantApplicationVersion: ").append(toIndentedString(merchantApplicationVersion)).append("\n");
    sb.append("    merchantEmailAlert: ").append(toIndentedString(merchantEmailAlert)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextScheduledRetryUtcDate: ").append(toIndentedString(nextScheduledRetryUtcDate)).append("\n");
    sb.append("    recoverBeginPeriodOrderLastModificationUtcDate: ").append(toIndentedString(recoverBeginPeriodOrderLastModificationUtcDate)).append("\n");
    sb.append("    recoverEndPeriodOrderLastModificationUtcDate: ").append(toIndentedString(recoverEndPeriodOrderLastModificationUtcDate)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerHealthStatus");
    openapiFields.add("consumerLastRequestSentUri");
    openapiFields.add("consumerUnvailableSinceUtcDate");
    openapiFields.add("id");
    openapiFields.add("lastErrorMessage");
    openapiFields.add("lastOrderPushedModificationUtcDate");
    openapiFields.add("lastRetryUtcDate");
    openapiFields.add("lastSuccessfulOrderPushedUtcDate");
    openapiFields.add("maxRetryCount");
    openapiFields.add("merchantApplicationName");
    openapiFields.add("merchantApplicationVersion");
    openapiFields.add("merchantEmailAlert");
    openapiFields.add("name");
    openapiFields.add("nextScheduledRetryUtcDate");
    openapiFields.add("recoverBeginPeriodOrderLastModificationUtcDate");
    openapiFields.add("recoverEndPeriodOrderLastModificationUtcDate");
    openapiFields.add("retryCount");
    openapiFields.add("status");
    openapiFields.add("targetUrl");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("merchantApplicationName");
    openapiRequiredFields.add("merchantApplicationVersion");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("targetUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionIndex
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionIndex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionIndex is not found in the empty JSON string", SubscriptionIndex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionIndex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionIndex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionIndex.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `consumerHealthStatus`
      if (jsonObj.get("consumerHealthStatus") != null && !jsonObj.get("consumerHealthStatus").isJsonNull()) {
        ConsumptionAvailabilityStatus.validateJsonElement(jsonObj.get("consumerHealthStatus"));
      }
      if ((jsonObj.get("consumerLastRequestSentUri") != null && !jsonObj.get("consumerLastRequestSentUri").isJsonNull()) && !jsonObj.get("consumerLastRequestSentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerLastRequestSentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerLastRequestSentUri").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `lastErrorMessage`
      if (jsonObj.get("lastErrorMessage") != null && !jsonObj.get("lastErrorMessage").isJsonNull()) {
        ErrorResponseMessage.validateJsonElement(jsonObj.get("lastErrorMessage"));
      }
      if (!jsonObj.get("merchantApplicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantApplicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantApplicationName").toString()));
      }
      if (!jsonObj.get("merchantApplicationVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantApplicationVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantApplicationVersion").toString()));
      }
      if ((jsonObj.get("merchantEmailAlert") != null && !jsonObj.get("merchantEmailAlert").isJsonNull()) && !jsonObj.get("merchantEmailAlert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantEmailAlert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantEmailAlert").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `status`
      SubscriptionStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("targetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetUrl").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        SubscriptionLinks.validateJsonElement(jsonObj.get("links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionIndex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionIndex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionIndex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionIndex.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionIndex>() {
           @Override
           public void write(JsonWriter out, SubscriptionIndex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionIndex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionIndex given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionIndex
   * @throws IOException if the JSON string is invalid with respect to SubscriptionIndex
   */
  public static SubscriptionIndex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionIndex.class);
  }

  /**
   * Convert an instance of SubscriptionIndex to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

