/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StoreLinks;
import org.openapitools.client.model.StoreStatus;
import org.openapitools.client.model.StoreUserRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Store
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Store {
  public static final String SERIALIZED_NAME_COUNTRY_ISO_CODE_ALPHA3 = "countryIsoCodeAlpha3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO_CODE_ALPHA3)
  private String countryIsoCodeAlpha3;

  public static final String SERIALIZED_NAME_CREATION_UTC_DATE = "creationUtcDate";
  @SerializedName(SERIALIZED_NAME_CREATION_UTC_DATE)
  private OffsetDateTime creationUtcDate;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_GO_VERSION = "goVersion";
  @SerializedName(SERIALIZED_NAME_GO_VERSION)
  private Integer goVersion;

  public static final String SERIALIZED_NAME_IS_TEST = "isTest";
  @SerializedName(SERIALIZED_NAME_IS_TEST)
  private Boolean isTest;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private StoreLinks links;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private Integer offerId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_OWNER_USER_ID = "ownerUserId";
  @SerializedName(SERIALIZED_NAME_OWNER_USER_ID)
  private String ownerUserId;

  public static final String SERIALIZED_NAME_SECTORS = "sectors";
  @SerializedName(SERIALIZED_NAME_SECTORS)
  private List<String> sectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARE_COUNT = "shareCount";
  @SerializedName(SERIALIZED_NAME_SHARE_COUNT)
  private Integer shareCount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StoreStatus status;

  public static final String SERIALIZED_NAME_STORE_ID = "storeId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ROLE = "userRole";
  @SerializedName(SERIALIZED_NAME_USER_ROLE)
  private StoreUserRole userRole;

  public Store() {
  }

  public Store countryIsoCodeAlpha3(String countryIsoCodeAlpha3) {
    this.countryIsoCodeAlpha3 = countryIsoCodeAlpha3;
    return this;
  }

  /**
   * The country iso code alpha 3 based on the list of values /user/lov/StoreCountry
   * @return countryIsoCodeAlpha3
   */
  @javax.annotation.Nonnull
  public String getCountryIsoCodeAlpha3() {
    return countryIsoCodeAlpha3;
  }

  public void setCountryIsoCodeAlpha3(String countryIsoCodeAlpha3) {
    this.countryIsoCodeAlpha3 = countryIsoCodeAlpha3;
  }


  public Store creationUtcDate(OffsetDateTime creationUtcDate) {
    this.creationUtcDate = creationUtcDate;
    return this;
  }

  /**
   * The creation date of the store
   * @return creationUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationUtcDate() {
    return creationUtcDate;
  }

  public void setCreationUtcDate(OffsetDateTime creationUtcDate) {
    this.creationUtcDate = creationUtcDate;
  }


  public Store currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Store goVersion(Integer goVersion) {
    this.goVersion = goVersion;
    return this;
  }

  /**
   * The version of GO to use
   * @return goVersion
   */
  @javax.annotation.Nonnull
  public Integer getGoVersion() {
    return goVersion;
  }

  public void setGoVersion(Integer goVersion) {
    this.goVersion = goVersion;
  }


  public Store isTest(Boolean isTest) {
    this.isTest = isTest;
    return this;
  }

  /**
   * Is the store a test or a production store
   * @return isTest
   */
  @javax.annotation.Nonnull
  public Boolean getIsTest() {
    return isTest;
  }

  public void setIsTest(Boolean isTest) {
    this.isTest = isTest;
  }


  public Store links(StoreLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public StoreLinks getLinks() {
    return links;
  }

  public void setLinks(StoreLinks links) {
    this.links = links;
  }


  public Store name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The store name. Must be unique.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Store offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * The offer id based on /offers. Not a free offer of course.
   * minimum: 1
   * @return offerId
   */
  @javax.annotation.Nonnull
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }


  public Store offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * The offer Name
   * @return offerName
   */
  @javax.annotation.Nonnull
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public Store ownerUserId(String ownerUserId) {
    this.ownerUserId = ownerUserId;
    return this;
  }

  /**
   * The user id of the owner of the store
   * @return ownerUserId
   */
  @javax.annotation.Nonnull
  public String getOwnerUserId() {
    return ownerUserId;
  }

  public void setOwnerUserId(String ownerUserId) {
    this.ownerUserId = ownerUserId;
  }


  public Store sectors(List<String> sectors) {
    this.sectors = sectors;
    return this;
  }

  public Store addSectorsItem(String sectorsItem) {
    if (this.sectors == null) {
      this.sectors = new ArrayList<>();
    }
    this.sectors.add(sectorsItem);
    return this;
  }

  /**
   * The store&#39;s sectors based on the list of values /user/lov/ParamSector
   * @return sectors
   */
  @javax.annotation.Nonnull
  public List<String> getSectors() {
    return sectors;
  }

  public void setSectors(List<String> sectors) {
    this.sectors = sectors;
  }


  public Store shareCount(Integer shareCount) {
    this.shareCount = shareCount;
    return this;
  }

  /**
   * The share count related to this store
   * @return shareCount
   */
  @javax.annotation.Nonnull
  public Integer getShareCount() {
    return shareCount;
  }

  public void setShareCount(Integer shareCount) {
    this.shareCount = shareCount;
  }


  public Store status(StoreStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StoreStatus getStatus() {
    return status;
  }

  public void setStatus(StoreStatus status) {
    this.status = status;
  }


  public Store storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * The store identifier
   * @return storeId
   */
  @javax.annotation.Nonnull
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public Store url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url of your store
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Store userRole(StoreUserRole userRole) {
    this.userRole = userRole;
    return this;
  }

  /**
   * Get userRole
   * @return userRole
   */
  @javax.annotation.Nonnull
  public StoreUserRole getUserRole() {
    return userRole;
  }

  public void setUserRole(StoreUserRole userRole) {
    this.userRole = userRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Store store = (Store) o;
    return Objects.equals(this.countryIsoCodeAlpha3, store.countryIsoCodeAlpha3) &&
        Objects.equals(this.creationUtcDate, store.creationUtcDate) &&
        Objects.equals(this.currencyCode, store.currencyCode) &&
        Objects.equals(this.goVersion, store.goVersion) &&
        Objects.equals(this.isTest, store.isTest) &&
        Objects.equals(this.links, store.links) &&
        Objects.equals(this.name, store.name) &&
        Objects.equals(this.offerId, store.offerId) &&
        Objects.equals(this.offerName, store.offerName) &&
        Objects.equals(this.ownerUserId, store.ownerUserId) &&
        Objects.equals(this.sectors, store.sectors) &&
        Objects.equals(this.shareCount, store.shareCount) &&
        Objects.equals(this.status, store.status) &&
        Objects.equals(this.storeId, store.storeId) &&
        Objects.equals(this.url, store.url) &&
        Objects.equals(this.userRole, store.userRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryIsoCodeAlpha3, creationUtcDate, currencyCode, goVersion, isTest, links, name, offerId, offerName, ownerUserId, sectors, shareCount, status, storeId, url, userRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Store {\n");
    sb.append("    countryIsoCodeAlpha3: ").append(toIndentedString(countryIsoCodeAlpha3)).append("\n");
    sb.append("    creationUtcDate: ").append(toIndentedString(creationUtcDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    isTest: ").append(toIndentedString(isTest)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    ownerUserId: ").append(toIndentedString(ownerUserId)).append("\n");
    sb.append("    sectors: ").append(toIndentedString(sectors)).append("\n");
    sb.append("    shareCount: ").append(toIndentedString(shareCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userRole: ").append(toIndentedString(userRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryIsoCodeAlpha3");
    openapiFields.add("creationUtcDate");
    openapiFields.add("currencyCode");
    openapiFields.add("goVersion");
    openapiFields.add("isTest");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("offerId");
    openapiFields.add("offerName");
    openapiFields.add("ownerUserId");
    openapiFields.add("sectors");
    openapiFields.add("shareCount");
    openapiFields.add("status");
    openapiFields.add("storeId");
    openapiFields.add("url");
    openapiFields.add("userRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countryIsoCodeAlpha3");
    openapiRequiredFields.add("creationUtcDate");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("goVersion");
    openapiRequiredFields.add("isTest");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("offerId");
    openapiRequiredFields.add("offerName");
    openapiRequiredFields.add("ownerUserId");
    openapiRequiredFields.add("sectors");
    openapiRequiredFields.add("shareCount");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("storeId");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("userRole");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Store
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Store.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Store is not found in the empty JSON string", Store.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Store.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Store` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Store.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("countryIsoCodeAlpha3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIsoCodeAlpha3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIsoCodeAlpha3").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the required field `links`
      StoreLinks.validateJsonElement(jsonObj.get("links"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      if (!jsonObj.get("ownerUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerUserId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sectors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sectors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectors` to be an array in the JSON string but got `%s`", jsonObj.get("sectors").toString()));
      }
      // validate the required field `status`
      StoreStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("storeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeId").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `userRole`
      StoreUserRole.validateJsonElement(jsonObj.get("userRole"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Store.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Store' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Store> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Store.class));

       return (TypeAdapter<T>) new TypeAdapter<Store>() {
           @Override
           public void write(JsonWriter out, Store value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Store read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Store given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Store
   * @throws IOException if the JSON string is invalid with respect to Store
   */
  public static Store fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Store.class);
  }

  /**
   * Convert an instance of Store to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

