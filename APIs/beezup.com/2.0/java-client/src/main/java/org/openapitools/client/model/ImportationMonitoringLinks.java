/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LinksImportationActivateAutoImportLink;
import org.openapitools.client.model.LinksImportationCancelLink;
import org.openapitools.client.model.LinksImportationCommitColumnsLink;
import org.openapitools.client.model.LinksImportationCommitLink;
import org.openapitools.client.model.LinksImportationConfigureRemainingCatalogColumnsLink;
import org.openapitools.client.model.LinksImportationGetCustomColumnsLink;
import org.openapitools.client.model.LinksImportationGetDetectedCatalogColumnsLink;
import org.openapitools.client.model.LinksImportationGetImportationMonitoringLink;
import org.openapitools.client.model.LinksImportationGetProductSampleLink;
import org.openapitools.client.model.LinksImportationTechnicalProgressionLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Applicable operations considering the state of the importation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportationMonitoringLinks {
  public static final String SERIALIZED_NAME_ACTIVATE_AUTO_IMPORT = "activateAutoImport";
  @SerializedName(SERIALIZED_NAME_ACTIVATE_AUTO_IMPORT)
  private LinksImportationActivateAutoImportLink activateAutoImport;

  public static final String SERIALIZED_NAME_CANCEL = "cancel";
  @SerializedName(SERIALIZED_NAME_CANCEL)
  private LinksImportationCancelLink cancel;

  public static final String SERIALIZED_NAME_CATALOG_COLUMNS = "catalogColumns";
  @SerializedName(SERIALIZED_NAME_CATALOG_COLUMNS)
  private LinksImportationGetDetectedCatalogColumnsLink catalogColumns;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private LinksImportationCommitLink commit;

  public static final String SERIALIZED_NAME_COMMIT_COLUMNS = "commitColumns";
  @SerializedName(SERIALIZED_NAME_COMMIT_COLUMNS)
  private LinksImportationCommitColumnsLink commitColumns;

  public static final String SERIALIZED_NAME_CONFIGURE_REMAINING_CATALOG_COLUMNS = "configureRemainingCatalogColumns";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_REMAINING_CATALOG_COLUMNS)
  private LinksImportationConfigureRemainingCatalogColumnsLink configureRemainingCatalogColumns;

  public static final String SERIALIZED_NAME_CUSTOM_COLUMNS = "customColumns";
  @SerializedName(SERIALIZED_NAME_CUSTOM_COLUMNS)
  private LinksImportationGetCustomColumnsLink customColumns;

  public static final String SERIALIZED_NAME_PRODUCT_SAMPLES = "productSamples";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SAMPLES)
  private LinksImportationGetProductSampleLink productSamples;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private LinksImportationGetImportationMonitoringLink self;

  public static final String SERIALIZED_NAME_TECHNICAL_PROGRESSION = "technicalProgression";
  @SerializedName(SERIALIZED_NAME_TECHNICAL_PROGRESSION)
  private LinksImportationTechnicalProgressionLink technicalProgression;

  public ImportationMonitoringLinks() {
  }

  public ImportationMonitoringLinks activateAutoImport(LinksImportationActivateAutoImportLink activateAutoImport) {
    this.activateAutoImport = activateAutoImport;
    return this;
  }

  /**
   * Get activateAutoImport
   * @return activateAutoImport
   */
  @javax.annotation.Nullable
  public LinksImportationActivateAutoImportLink getActivateAutoImport() {
    return activateAutoImport;
  }

  public void setActivateAutoImport(LinksImportationActivateAutoImportLink activateAutoImport) {
    this.activateAutoImport = activateAutoImport;
  }


  public ImportationMonitoringLinks cancel(LinksImportationCancelLink cancel) {
    this.cancel = cancel;
    return this;
  }

  /**
   * Get cancel
   * @return cancel
   */
  @javax.annotation.Nullable
  public LinksImportationCancelLink getCancel() {
    return cancel;
  }

  public void setCancel(LinksImportationCancelLink cancel) {
    this.cancel = cancel;
  }


  public ImportationMonitoringLinks catalogColumns(LinksImportationGetDetectedCatalogColumnsLink catalogColumns) {
    this.catalogColumns = catalogColumns;
    return this;
  }

  /**
   * Get catalogColumns
   * @return catalogColumns
   */
  @javax.annotation.Nullable
  public LinksImportationGetDetectedCatalogColumnsLink getCatalogColumns() {
    return catalogColumns;
  }

  public void setCatalogColumns(LinksImportationGetDetectedCatalogColumnsLink catalogColumns) {
    this.catalogColumns = catalogColumns;
  }


  public ImportationMonitoringLinks commit(LinksImportationCommitLink commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  public LinksImportationCommitLink getCommit() {
    return commit;
  }

  public void setCommit(LinksImportationCommitLink commit) {
    this.commit = commit;
  }


  public ImportationMonitoringLinks commitColumns(LinksImportationCommitColumnsLink commitColumns) {
    this.commitColumns = commitColumns;
    return this;
  }

  /**
   * Get commitColumns
   * @return commitColumns
   */
  @javax.annotation.Nullable
  public LinksImportationCommitColumnsLink getCommitColumns() {
    return commitColumns;
  }

  public void setCommitColumns(LinksImportationCommitColumnsLink commitColumns) {
    this.commitColumns = commitColumns;
  }


  public ImportationMonitoringLinks configureRemainingCatalogColumns(LinksImportationConfigureRemainingCatalogColumnsLink configureRemainingCatalogColumns) {
    this.configureRemainingCatalogColumns = configureRemainingCatalogColumns;
    return this;
  }

  /**
   * Get configureRemainingCatalogColumns
   * @return configureRemainingCatalogColumns
   */
  @javax.annotation.Nullable
  public LinksImportationConfigureRemainingCatalogColumnsLink getConfigureRemainingCatalogColumns() {
    return configureRemainingCatalogColumns;
  }

  public void setConfigureRemainingCatalogColumns(LinksImportationConfigureRemainingCatalogColumnsLink configureRemainingCatalogColumns) {
    this.configureRemainingCatalogColumns = configureRemainingCatalogColumns;
  }


  public ImportationMonitoringLinks customColumns(LinksImportationGetCustomColumnsLink customColumns) {
    this.customColumns = customColumns;
    return this;
  }

  /**
   * Get customColumns
   * @return customColumns
   */
  @javax.annotation.Nullable
  public LinksImportationGetCustomColumnsLink getCustomColumns() {
    return customColumns;
  }

  public void setCustomColumns(LinksImportationGetCustomColumnsLink customColumns) {
    this.customColumns = customColumns;
  }


  public ImportationMonitoringLinks productSamples(LinksImportationGetProductSampleLink productSamples) {
    this.productSamples = productSamples;
    return this;
  }

  /**
   * Get productSamples
   * @return productSamples
   */
  @javax.annotation.Nullable
  public LinksImportationGetProductSampleLink getProductSamples() {
    return productSamples;
  }

  public void setProductSamples(LinksImportationGetProductSampleLink productSamples) {
    this.productSamples = productSamples;
  }


  public ImportationMonitoringLinks self(LinksImportationGetImportationMonitoringLink self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nonnull
  public LinksImportationGetImportationMonitoringLink getSelf() {
    return self;
  }

  public void setSelf(LinksImportationGetImportationMonitoringLink self) {
    this.self = self;
  }


  public ImportationMonitoringLinks technicalProgression(LinksImportationTechnicalProgressionLink technicalProgression) {
    this.technicalProgression = technicalProgression;
    return this;
  }

  /**
   * Get technicalProgression
   * @return technicalProgression
   */
  @javax.annotation.Nonnull
  public LinksImportationTechnicalProgressionLink getTechnicalProgression() {
    return technicalProgression;
  }

  public void setTechnicalProgression(LinksImportationTechnicalProgressionLink technicalProgression) {
    this.technicalProgression = technicalProgression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportationMonitoringLinks importationMonitoringLinks = (ImportationMonitoringLinks) o;
    return Objects.equals(this.activateAutoImport, importationMonitoringLinks.activateAutoImport) &&
        Objects.equals(this.cancel, importationMonitoringLinks.cancel) &&
        Objects.equals(this.catalogColumns, importationMonitoringLinks.catalogColumns) &&
        Objects.equals(this.commit, importationMonitoringLinks.commit) &&
        Objects.equals(this.commitColumns, importationMonitoringLinks.commitColumns) &&
        Objects.equals(this.configureRemainingCatalogColumns, importationMonitoringLinks.configureRemainingCatalogColumns) &&
        Objects.equals(this.customColumns, importationMonitoringLinks.customColumns) &&
        Objects.equals(this.productSamples, importationMonitoringLinks.productSamples) &&
        Objects.equals(this.self, importationMonitoringLinks.self) &&
        Objects.equals(this.technicalProgression, importationMonitoringLinks.technicalProgression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activateAutoImport, cancel, catalogColumns, commit, commitColumns, configureRemainingCatalogColumns, customColumns, productSamples, self, technicalProgression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportationMonitoringLinks {\n");
    sb.append("    activateAutoImport: ").append(toIndentedString(activateAutoImport)).append("\n");
    sb.append("    cancel: ").append(toIndentedString(cancel)).append("\n");
    sb.append("    catalogColumns: ").append(toIndentedString(catalogColumns)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    commitColumns: ").append(toIndentedString(commitColumns)).append("\n");
    sb.append("    configureRemainingCatalogColumns: ").append(toIndentedString(configureRemainingCatalogColumns)).append("\n");
    sb.append("    customColumns: ").append(toIndentedString(customColumns)).append("\n");
    sb.append("    productSamples: ").append(toIndentedString(productSamples)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    technicalProgression: ").append(toIndentedString(technicalProgression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activateAutoImport");
    openapiFields.add("cancel");
    openapiFields.add("catalogColumns");
    openapiFields.add("commit");
    openapiFields.add("commitColumns");
    openapiFields.add("configureRemainingCatalogColumns");
    openapiFields.add("customColumns");
    openapiFields.add("productSamples");
    openapiFields.add("self");
    openapiFields.add("technicalProgression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("self");
    openapiRequiredFields.add("technicalProgression");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportationMonitoringLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportationMonitoringLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportationMonitoringLinks is not found in the empty JSON string", ImportationMonitoringLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportationMonitoringLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportationMonitoringLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportationMonitoringLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activateAutoImport`
      if (jsonObj.get("activateAutoImport") != null && !jsonObj.get("activateAutoImport").isJsonNull()) {
        LinksImportationActivateAutoImportLink.validateJsonElement(jsonObj.get("activateAutoImport"));
      }
      // validate the optional field `cancel`
      if (jsonObj.get("cancel") != null && !jsonObj.get("cancel").isJsonNull()) {
        LinksImportationCancelLink.validateJsonElement(jsonObj.get("cancel"));
      }
      // validate the optional field `catalogColumns`
      if (jsonObj.get("catalogColumns") != null && !jsonObj.get("catalogColumns").isJsonNull()) {
        LinksImportationGetDetectedCatalogColumnsLink.validateJsonElement(jsonObj.get("catalogColumns"));
      }
      // validate the optional field `commit`
      if (jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) {
        LinksImportationCommitLink.validateJsonElement(jsonObj.get("commit"));
      }
      // validate the optional field `commitColumns`
      if (jsonObj.get("commitColumns") != null && !jsonObj.get("commitColumns").isJsonNull()) {
        LinksImportationCommitColumnsLink.validateJsonElement(jsonObj.get("commitColumns"));
      }
      // validate the optional field `configureRemainingCatalogColumns`
      if (jsonObj.get("configureRemainingCatalogColumns") != null && !jsonObj.get("configureRemainingCatalogColumns").isJsonNull()) {
        LinksImportationConfigureRemainingCatalogColumnsLink.validateJsonElement(jsonObj.get("configureRemainingCatalogColumns"));
      }
      // validate the optional field `customColumns`
      if (jsonObj.get("customColumns") != null && !jsonObj.get("customColumns").isJsonNull()) {
        LinksImportationGetCustomColumnsLink.validateJsonElement(jsonObj.get("customColumns"));
      }
      // validate the optional field `productSamples`
      if (jsonObj.get("productSamples") != null && !jsonObj.get("productSamples").isJsonNull()) {
        LinksImportationGetProductSampleLink.validateJsonElement(jsonObj.get("productSamples"));
      }
      // validate the required field `self`
      LinksImportationGetImportationMonitoringLink.validateJsonElement(jsonObj.get("self"));
      // validate the required field `technicalProgression`
      LinksImportationTechnicalProgressionLink.validateJsonElement(jsonObj.get("technicalProgression"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportationMonitoringLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportationMonitoringLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportationMonitoringLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportationMonitoringLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportationMonitoringLinks>() {
           @Override
           public void write(JsonWriter out, ImportationMonitoringLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportationMonitoringLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportationMonitoringLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportationMonitoringLinks
   * @throws IOException if the JSON string is invalid with respect to ImportationMonitoringLinks
   */
  public static ImportationMonitoringLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportationMonitoringLinks.class);
  }

  /**
   * Convert an instance of ImportationMonitoringLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

