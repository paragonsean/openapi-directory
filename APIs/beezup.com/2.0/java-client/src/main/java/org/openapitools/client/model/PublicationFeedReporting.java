/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FeedType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Publication feed reporting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicationFeedReporting {
  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_END_UTC_DATE = "endUtcDate";
  @SerializedName(SERIALIZED_NAME_END_UTC_DATE)
  private OffsetDateTime endUtcDate;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXPORTED_PRODUCTS = "exportedProducts";
  @SerializedName(SERIALIZED_NAME_EXPORTED_PRODUCTS)
  private Integer exportedProducts;

  public static final String SERIALIZED_NAME_FAILED_ITEMS = "failedItems";
  @SerializedName(SERIALIZED_NAME_FAILED_ITEMS)
  private Integer failedItems;

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private FeedType feedType;

  public static final String SERIALIZED_NAME_HTML_REPORT_GENERATION_ERROR_MESSAGE = "htmlReportGenerationErrorMessage";
  @SerializedName(SERIALIZED_NAME_HTML_REPORT_GENERATION_ERROR_MESSAGE)
  private String htmlReportGenerationErrorMessage;

  public static final String SERIALIZED_NAME_HTML_REPORT_URL = "htmlReportUrl";
  @SerializedName(SERIALIZED_NAME_HTML_REPORT_URL)
  private URI htmlReportUrl;

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "processingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private String processingStatus;

  public static final String SERIALIZED_NAME_PUBLISHED_ITEMS = "publishedItems";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_ITEMS)
  private Integer publishedItems;

  public static final String SERIALIZED_NAME_PUBLISHED_ITEMS_WITH_WARNING = "publishedItemsWithWarning";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_ITEMS_WITH_WARNING)
  private Integer publishedItemsWithWarning;

  public static final String SERIALIZED_NAME_START_UTC_DATE = "startUtcDate";
  @SerializedName(SERIALIZED_NAME_START_UTC_DATE)
  private OffsetDateTime startUtcDate;

  public static final String SERIALIZED_NAME_TRANSMITTED_ITEMS = "transmittedItems";
  @SerializedName(SERIALIZED_NAME_TRANSMITTED_ITEMS)
  private Integer transmittedItems;

  public PublicationFeedReporting() {
  }

  public PublicationFeedReporting completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Indicates if the publication is completed or not
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public PublicationFeedReporting endUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
    return this;
  }

  /**
   * The feed publication end time (UTC timezone)
   * @return endUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndUtcDate() {
    return endUtcDate;
  }

  public void setEndUtcDate(OffsetDateTime endUtcDate) {
    this.endUtcDate = endUtcDate;
  }


  public PublicationFeedReporting errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The error message
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public PublicationFeedReporting exportedProducts(Integer exportedProducts) {
    this.exportedProducts = exportedProducts;
    return this;
  }

  /**
   * The product count downloaded from BeezUP Export
   * @return exportedProducts
   */
  @javax.annotation.Nullable
  public Integer getExportedProducts() {
    return exportedProducts;
  }

  public void setExportedProducts(Integer exportedProducts) {
    this.exportedProducts = exportedProducts;
  }


  public PublicationFeedReporting failedItems(Integer failedItems) {
    this.failedItems = failedItems;
    return this;
  }

  /**
   * The item count (products or offers) the marketplace flagged as failed
   * @return failedItems
   */
  @javax.annotation.Nullable
  public Integer getFailedItems() {
    return failedItems;
  }

  public void setFailedItems(Integer failedItems) {
    this.failedItems = failedItems;
  }


  public PublicationFeedReporting feedType(FeedType feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * Get feedType
   * @return feedType
   */
  @javax.annotation.Nonnull
  public FeedType getFeedType() {
    return feedType;
  }

  public void setFeedType(FeedType feedType) {
    this.feedType = feedType;
  }


  public PublicationFeedReporting htmlReportGenerationErrorMessage(String htmlReportGenerationErrorMessage) {
    this.htmlReportGenerationErrorMessage = htmlReportGenerationErrorMessage;
    return this;
  }

  /**
   * The error message if the Html Report generation failed
   * @return htmlReportGenerationErrorMessage
   */
  @javax.annotation.Nullable
  public String getHtmlReportGenerationErrorMessage() {
    return htmlReportGenerationErrorMessage;
  }

  public void setHtmlReportGenerationErrorMessage(String htmlReportGenerationErrorMessage) {
    this.htmlReportGenerationErrorMessage = htmlReportGenerationErrorMessage;
  }


  public PublicationFeedReporting htmlReportUrl(URI htmlReportUrl) {
    this.htmlReportUrl = htmlReportUrl;
    return this;
  }

  /**
   * The Url for the Html Report generated
   * @return htmlReportUrl
   */
  @javax.annotation.Nullable
  public URI getHtmlReportUrl() {
    return htmlReportUrl;
  }

  public void setHtmlReportUrl(URI htmlReportUrl) {
    this.htmlReportUrl = htmlReportUrl;
  }


  public PublicationFeedReporting processingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * The processing status
   * @return processingStatus
   */
  @javax.annotation.Nonnull
  public String getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
  }


  public PublicationFeedReporting publishedItems(Integer publishedItems) {
    this.publishedItems = publishedItems;
    return this;
  }

  /**
   * The item count (products or offers) the marketplace flagged as successful
   * @return publishedItems
   */
  @javax.annotation.Nullable
  public Integer getPublishedItems() {
    return publishedItems;
  }

  public void setPublishedItems(Integer publishedItems) {
    this.publishedItems = publishedItems;
  }


  public PublicationFeedReporting publishedItemsWithWarning(Integer publishedItemsWithWarning) {
    this.publishedItemsWithWarning = publishedItemsWithWarning;
    return this;
  }

  /**
   * The item count (products or offers) the marketplace flagged as successful with warnings
   * @return publishedItemsWithWarning
   */
  @javax.annotation.Nullable
  public Integer getPublishedItemsWithWarning() {
    return publishedItemsWithWarning;
  }

  public void setPublishedItemsWithWarning(Integer publishedItemsWithWarning) {
    this.publishedItemsWithWarning = publishedItemsWithWarning;
  }


  public PublicationFeedReporting startUtcDate(OffsetDateTime startUtcDate) {
    this.startUtcDate = startUtcDate;
    return this;
  }

  /**
   * The feed publication start time (UTC timezone)
   * @return startUtcDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartUtcDate() {
    return startUtcDate;
  }

  public void setStartUtcDate(OffsetDateTime startUtcDate) {
    this.startUtcDate = startUtcDate;
  }


  public PublicationFeedReporting transmittedItems(Integer transmittedItems) {
    this.transmittedItems = transmittedItems;
    return this;
  }

  /**
   * The item count (products or offers) sent to the marketplace
   * @return transmittedItems
   */
  @javax.annotation.Nullable
  public Integer getTransmittedItems() {
    return transmittedItems;
  }

  public void setTransmittedItems(Integer transmittedItems) {
    this.transmittedItems = transmittedItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicationFeedReporting publicationFeedReporting = (PublicationFeedReporting) o;
    return Objects.equals(this.completed, publicationFeedReporting.completed) &&
        Objects.equals(this.endUtcDate, publicationFeedReporting.endUtcDate) &&
        Objects.equals(this.errorMessage, publicationFeedReporting.errorMessage) &&
        Objects.equals(this.exportedProducts, publicationFeedReporting.exportedProducts) &&
        Objects.equals(this.failedItems, publicationFeedReporting.failedItems) &&
        Objects.equals(this.feedType, publicationFeedReporting.feedType) &&
        Objects.equals(this.htmlReportGenerationErrorMessage, publicationFeedReporting.htmlReportGenerationErrorMessage) &&
        Objects.equals(this.htmlReportUrl, publicationFeedReporting.htmlReportUrl) &&
        Objects.equals(this.processingStatus, publicationFeedReporting.processingStatus) &&
        Objects.equals(this.publishedItems, publicationFeedReporting.publishedItems) &&
        Objects.equals(this.publishedItemsWithWarning, publicationFeedReporting.publishedItemsWithWarning) &&
        Objects.equals(this.startUtcDate, publicationFeedReporting.startUtcDate) &&
        Objects.equals(this.transmittedItems, publicationFeedReporting.transmittedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, endUtcDate, errorMessage, exportedProducts, failedItems, feedType, htmlReportGenerationErrorMessage, htmlReportUrl, processingStatus, publishedItems, publishedItemsWithWarning, startUtcDate, transmittedItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicationFeedReporting {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    endUtcDate: ").append(toIndentedString(endUtcDate)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    exportedProducts: ").append(toIndentedString(exportedProducts)).append("\n");
    sb.append("    failedItems: ").append(toIndentedString(failedItems)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    htmlReportGenerationErrorMessage: ").append(toIndentedString(htmlReportGenerationErrorMessage)).append("\n");
    sb.append("    htmlReportUrl: ").append(toIndentedString(htmlReportUrl)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    publishedItems: ").append(toIndentedString(publishedItems)).append("\n");
    sb.append("    publishedItemsWithWarning: ").append(toIndentedString(publishedItemsWithWarning)).append("\n");
    sb.append("    startUtcDate: ").append(toIndentedString(startUtcDate)).append("\n");
    sb.append("    transmittedItems: ").append(toIndentedString(transmittedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed");
    openapiFields.add("endUtcDate");
    openapiFields.add("errorMessage");
    openapiFields.add("exportedProducts");
    openapiFields.add("failedItems");
    openapiFields.add("feedType");
    openapiFields.add("htmlReportGenerationErrorMessage");
    openapiFields.add("htmlReportUrl");
    openapiFields.add("processingStatus");
    openapiFields.add("publishedItems");
    openapiFields.add("publishedItemsWithWarning");
    openapiFields.add("startUtcDate");
    openapiFields.add("transmittedItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("feedType");
    openapiRequiredFields.add("processingStatus");
    openapiRequiredFields.add("startUtcDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicationFeedReporting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicationFeedReporting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicationFeedReporting is not found in the empty JSON string", PublicationFeedReporting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicationFeedReporting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicationFeedReporting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicationFeedReporting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // validate the required field `feedType`
      FeedType.validateJsonElement(jsonObj.get("feedType"));
      if ((jsonObj.get("htmlReportGenerationErrorMessage") != null && !jsonObj.get("htmlReportGenerationErrorMessage").isJsonNull()) && !jsonObj.get("htmlReportGenerationErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlReportGenerationErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlReportGenerationErrorMessage").toString()));
      }
      if ((jsonObj.get("htmlReportUrl") != null && !jsonObj.get("htmlReportUrl").isJsonNull()) && !jsonObj.get("htmlReportUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlReportUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlReportUrl").toString()));
      }
      if (!jsonObj.get("processingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicationFeedReporting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicationFeedReporting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicationFeedReporting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicationFeedReporting.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicationFeedReporting>() {
           @Override
           public void write(JsonWriter out, PublicationFeedReporting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicationFeedReporting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicationFeedReporting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicationFeedReporting
   * @throws IOException if the JSON string is invalid with respect to PublicationFeedReporting
   */
  public static PublicationFeedReporting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicationFeedReporting.class);
  }

  /**
   * Convert an instance of PublicationFeedReporting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

