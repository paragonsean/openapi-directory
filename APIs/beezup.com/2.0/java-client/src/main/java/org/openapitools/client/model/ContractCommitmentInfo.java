/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FixedAndVariableClickModelInfo;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.VariableModelInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describe the commitment information related to the offer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContractCommitmentInfo {
  public static final String SERIALIZED_NAME_COMMERCIAL_CREATOR_USER_ID = "commercialCreatorUserId";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_CREATOR_USER_ID)
  private String commercialCreatorUserId;

  public static final String SERIALIZED_NAME_COMMERCIAL_USER_ID = "commercialUserId";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_USER_ID)
  private String commercialUserId;

  public static final String SERIALIZED_NAME_COMMITMENT_CALCULATED_FINISH_DATE = "commitmentCalculatedFinishDate";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_CALCULATED_FINISH_DATE)
  private LocalDate commitmentCalculatedFinishDate;

  public static final String SERIALIZED_NAME_COMMITMENT_PERIOD_IN_MONTH = "commitmentPeriodInMonth";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PERIOD_IN_MONTH)
  private Integer commitmentPeriodInMonth;

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private Integer contractType;

  public static final String SERIALIZED_NAME_COUPON_OFFER_CODE = "couponOfferCode";
  @SerializedName(SERIALIZED_NAME_COUPON_OFFER_CODE)
  private String couponOfferCode;

  public static final String SERIALIZED_NAME_CURRENT_CONTRACT_ID = "currentContractId";
  @SerializedName(SERIALIZED_NAME_CURRENT_CONTRACT_ID)
  private String currentContractId;

  public static final String SERIALIZED_NAME_CURRENT_CONTRACT_TERMINATION_DATE = "currentContractTerminationDate";
  @SerializedName(SERIALIZED_NAME_CURRENT_CONTRACT_TERMINATION_DATE)
  private LocalDate currentContractTerminationDate;

  public static final String SERIALIZED_NAME_CURRENT_CUSTOMER_PAYMENT_METHOD = "currentCustomerPaymentMethod";
  @SerializedName(SERIALIZED_NAME_CURRENT_CUSTOMER_PAYMENT_METHOD)
  private PaymentMethod currentCustomerPaymentMethod = PaymentMethod.ONLINE_PAYMENT;

  public static final String SERIALIZED_NAME_FIXED_AND_VARIABLE_CLICK_INFO = "fixedAndVariableClickInfo";
  @SerializedName(SERIALIZED_NAME_FIXED_AND_VARIABLE_CLICK_INFO)
  private FixedAndVariableClickModelInfo fixedAndVariableClickInfo;

  public static final String SERIALIZED_NAME_IS_CUSTOMER_WANTS_TO_TERMINATE_HIS_CONTRACT = "isCustomerWantsToTerminateHisContract";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOMER_WANTS_TO_TERMINATE_HIS_CONTRACT)
  private Boolean isCustomerWantsToTerminateHisContract;

  public static final String SERIALIZED_NAME_IS_MODEL_MUST_BE_TRANSMITTED_IN_NEW_CONTRACT = "isModelMustBeTransmittedInNewContract";
  @SerializedName(SERIALIZED_NAME_IS_MODEL_MUST_BE_TRANSMITTED_IN_NEW_CONTRACT)
  private Boolean isModelMustBeTransmittedInNewContract;

  public static final String SERIALIZED_NAME_MIN_BILLING_PERIOD_IN_MONTHS = "minBillingPeriodInMonths";
  @SerializedName(SERIALIZED_NAME_MIN_BILLING_PERIOD_IN_MONTHS)
  private Integer minBillingPeriodInMonths;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NEW_CONTRACT_START_DATE = "newContractStartDate";
  @SerializedName(SERIALIZED_NAME_NEW_CONTRACT_START_DATE)
  private OffsetDateTime newContractStartDate;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private Integer offerId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_PAYMENT_DELAY_IN_DAYS = "paymentDelayInDays";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DELAY_IN_DAYS)
  private Integer paymentDelayInDays;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_AUTHORIZED = "paymentMethodAuthorized";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_AUTHORIZED)
  private PaymentMethod paymentMethodAuthorized = PaymentMethod.ONLINE_PAYMENT;

  public static final String SERIALIZED_NAME_REQUESTED_PAYMENT_METHOD = "requestedPaymentMethod";
  @SerializedName(SERIALIZED_NAME_REQUESTED_PAYMENT_METHOD)
  private PaymentMethod requestedPaymentMethod = PaymentMethod.ONLINE_PAYMENT;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_FINISH_DATE = "trialPeriodFinishDate";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_FINISH_DATE)
  private LocalDate trialPeriodFinishDate;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_IN_MONTH = "trialPeriodInMonth";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_IN_MONTH)
  private Integer trialPeriodInMonth;

  public static final String SERIALIZED_NAME_VARIABLE_MODEL_INFO = "variableModelInfo";
  @SerializedName(SERIALIZED_NAME_VARIABLE_MODEL_INFO)
  private VariableModelInfo variableModelInfo;

  public ContractCommitmentInfo() {
  }

  public ContractCommitmentInfo commercialCreatorUserId(String commercialCreatorUserId) {
    this.commercialCreatorUserId = commercialCreatorUserId;
    return this;
  }

  /**
   * The commercial that is responsible of the creation of your account
   * @return commercialCreatorUserId
   */
  @javax.annotation.Nullable
  public String getCommercialCreatorUserId() {
    return commercialCreatorUserId;
  }

  public void setCommercialCreatorUserId(String commercialCreatorUserId) {
    this.commercialCreatorUserId = commercialCreatorUserId;
  }


  public ContractCommitmentInfo commercialUserId(String commercialUserId) {
    this.commercialUserId = commercialUserId;
    return this;
  }

  /**
   * Your current commercial user id
   * @return commercialUserId
   */
  @javax.annotation.Nullable
  public String getCommercialUserId() {
    return commercialUserId;
  }

  public void setCommercialUserId(String commercialUserId) {
    this.commercialUserId = commercialUserId;
  }


  public ContractCommitmentInfo commitmentCalculatedFinishDate(LocalDate commitmentCalculatedFinishDate) {
    this.commitmentCalculatedFinishDate = commitmentCalculatedFinishDate;
    return this;
  }

  /**
   * The commitment end date related to the offer
   * @return commitmentCalculatedFinishDate
   */
  @javax.annotation.Nullable
  public LocalDate getCommitmentCalculatedFinishDate() {
    return commitmentCalculatedFinishDate;
  }

  public void setCommitmentCalculatedFinishDate(LocalDate commitmentCalculatedFinishDate) {
    this.commitmentCalculatedFinishDate = commitmentCalculatedFinishDate;
  }


  public ContractCommitmentInfo commitmentPeriodInMonth(Integer commitmentPeriodInMonth) {
    this.commitmentPeriodInMonth = commitmentPeriodInMonth;
    return this;
  }

  /**
   * The commitment period in month related to the offer
   * @return commitmentPeriodInMonth
   */
  @javax.annotation.Nullable
  public Integer getCommitmentPeriodInMonth() {
    return commitmentPeriodInMonth;
  }

  public void setCommitmentPeriodInMonth(Integer commitmentPeriodInMonth) {
    this.commitmentPeriodInMonth = commitmentPeriodInMonth;
  }


  public ContractCommitmentInfo contractType(Integer contractType) {
    this.contractType = contractType;
    return this;
  }

  /**
   * Internal usage: Old offer type. Your contract type
   * @return contractType
   */
  @javax.annotation.Nullable
  public Integer getContractType() {
    return contractType;
  }

  public void setContractType(Integer contractType) {
    this.contractType = contractType;
  }


  public ContractCommitmentInfo couponOfferCode(String couponOfferCode) {
    this.couponOfferCode = couponOfferCode;
    return this;
  }

  /**
   * Your special coupon offer identifier
   * @return couponOfferCode
   */
  @javax.annotation.Nullable
  public String getCouponOfferCode() {
    return couponOfferCode;
  }

  public void setCouponOfferCode(String couponOfferCode) {
    this.couponOfferCode = couponOfferCode;
  }


  public ContractCommitmentInfo currentContractId(String currentContractId) {
    this.currentContractId = currentContractId;
    return this;
  }

  /**
   * Your current contract id
   * @return currentContractId
   */
  @javax.annotation.Nullable
  public String getCurrentContractId() {
    return currentContractId;
  }

  public void setCurrentContractId(String currentContractId) {
    this.currentContractId = currentContractId;
  }


  public ContractCommitmentInfo currentContractTerminationDate(LocalDate currentContractTerminationDate) {
    this.currentContractTerminationDate = currentContractTerminationDate;
    return this;
  }

  /**
   * The current contract termination date
   * @return currentContractTerminationDate
   */
  @javax.annotation.Nullable
  public LocalDate getCurrentContractTerminationDate() {
    return currentContractTerminationDate;
  }

  public void setCurrentContractTerminationDate(LocalDate currentContractTerminationDate) {
    this.currentContractTerminationDate = currentContractTerminationDate;
  }


  public ContractCommitmentInfo currentCustomerPaymentMethod(PaymentMethod currentCustomerPaymentMethod) {
    this.currentCustomerPaymentMethod = currentCustomerPaymentMethod;
    return this;
  }

  /**
   * Get currentCustomerPaymentMethod
   * @return currentCustomerPaymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethod getCurrentCustomerPaymentMethod() {
    return currentCustomerPaymentMethod;
  }

  public void setCurrentCustomerPaymentMethod(PaymentMethod currentCustomerPaymentMethod) {
    this.currentCustomerPaymentMethod = currentCustomerPaymentMethod;
  }


  public ContractCommitmentInfo fixedAndVariableClickInfo(FixedAndVariableClickModelInfo fixedAndVariableClickInfo) {
    this.fixedAndVariableClickInfo = fixedAndVariableClickInfo;
    return this;
  }

  /**
   * Get fixedAndVariableClickInfo
   * @return fixedAndVariableClickInfo
   */
  @javax.annotation.Nullable
  public FixedAndVariableClickModelInfo getFixedAndVariableClickInfo() {
    return fixedAndVariableClickInfo;
  }

  public void setFixedAndVariableClickInfo(FixedAndVariableClickModelInfo fixedAndVariableClickInfo) {
    this.fixedAndVariableClickInfo = fixedAndVariableClickInfo;
  }


  public ContractCommitmentInfo isCustomerWantsToTerminateHisContract(Boolean isCustomerWantsToTerminateHisContract) {
    this.isCustomerWantsToTerminateHisContract = isCustomerWantsToTerminateHisContract;
    return this;
  }

  /**
   * If true, this means you want to leave us and that&#39;s sad... :&#39;-(
   * @return isCustomerWantsToTerminateHisContract
   */
  @javax.annotation.Nullable
  public Boolean getIsCustomerWantsToTerminateHisContract() {
    return isCustomerWantsToTerminateHisContract;
  }

  public void setIsCustomerWantsToTerminateHisContract(Boolean isCustomerWantsToTerminateHisContract) {
    this.isCustomerWantsToTerminateHisContract = isCustomerWantsToTerminateHisContract;
  }


  public ContractCommitmentInfo isModelMustBeTransmittedInNewContract(Boolean isModelMustBeTransmittedInNewContract) {
    this.isModelMustBeTransmittedInNewContract = isModelMustBeTransmittedInNewContract;
    return this;
  }

  /**
   * Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type
   * @return isModelMustBeTransmittedInNewContract
   */
  @javax.annotation.Nullable
  public Boolean getIsModelMustBeTransmittedInNewContract() {
    return isModelMustBeTransmittedInNewContract;
  }

  public void setIsModelMustBeTransmittedInNewContract(Boolean isModelMustBeTransmittedInNewContract) {
    this.isModelMustBeTransmittedInNewContract = isModelMustBeTransmittedInNewContract;
  }


  public ContractCommitmentInfo minBillingPeriodInMonths(Integer minBillingPeriodInMonths) {
    this.minBillingPeriodInMonths = minBillingPeriodInMonths;
    return this;
  }

  /**
   * The minimum billing period in month authorized for this offer.
   * @return minBillingPeriodInMonths
   */
  @javax.annotation.Nullable
  public Integer getMinBillingPeriodInMonths() {
    return minBillingPeriodInMonths;
  }

  public void setMinBillingPeriodInMonths(Integer minBillingPeriodInMonths) {
    this.minBillingPeriodInMonths = minBillingPeriodInMonths;
  }


  public ContractCommitmentInfo model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Interal usage: Old offer type. The model description
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ContractCommitmentInfo newContractStartDate(OffsetDateTime newContractStartDate) {
    this.newContractStartDate = newContractStartDate;
    return this;
  }

  /**
   * The start date related to the offer
   * @return newContractStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNewContractStartDate() {
    return newContractStartDate;
  }

  public void setNewContractStartDate(OffsetDateTime newContractStartDate) {
    this.newContractStartDate = newContractStartDate;
  }


  public ContractCommitmentInfo offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * The offer id based on /offers. Not a free offer of course.
   * minimum: 1
   * @return offerId
   */
  @javax.annotation.Nullable
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }


  public ContractCommitmentInfo offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * The offer Name
   * @return offerName
   */
  @javax.annotation.Nullable
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public ContractCommitmentInfo paymentDelayInDays(Integer paymentDelayInDays) {
    this.paymentDelayInDays = paymentDelayInDays;
    return this;
  }

  /**
   * The payment delay in days related to the offer
   * @return paymentDelayInDays
   */
  @javax.annotation.Nullable
  public Integer getPaymentDelayInDays() {
    return paymentDelayInDays;
  }

  public void setPaymentDelayInDays(Integer paymentDelayInDays) {
    this.paymentDelayInDays = paymentDelayInDays;
  }


  public ContractCommitmentInfo paymentMethodAuthorized(PaymentMethod paymentMethodAuthorized) {
    this.paymentMethodAuthorized = paymentMethodAuthorized;
    return this;
  }

  /**
   * Get paymentMethodAuthorized
   * @return paymentMethodAuthorized
   */
  @javax.annotation.Nullable
  public PaymentMethod getPaymentMethodAuthorized() {
    return paymentMethodAuthorized;
  }

  public void setPaymentMethodAuthorized(PaymentMethod paymentMethodAuthorized) {
    this.paymentMethodAuthorized = paymentMethodAuthorized;
  }


  public ContractCommitmentInfo requestedPaymentMethod(PaymentMethod requestedPaymentMethod) {
    this.requestedPaymentMethod = requestedPaymentMethod;
    return this;
  }

  /**
   * Get requestedPaymentMethod
   * @return requestedPaymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethod getRequestedPaymentMethod() {
    return requestedPaymentMethod;
  }

  public void setRequestedPaymentMethod(PaymentMethod requestedPaymentMethod) {
    this.requestedPaymentMethod = requestedPaymentMethod;
  }


  public ContractCommitmentInfo trialPeriodFinishDate(LocalDate trialPeriodFinishDate) {
    this.trialPeriodFinishDate = trialPeriodFinishDate;
    return this;
  }

  /**
   * The trial period end date related to the offer
   * @return trialPeriodFinishDate
   */
  @javax.annotation.Nullable
  public LocalDate getTrialPeriodFinishDate() {
    return trialPeriodFinishDate;
  }

  public void setTrialPeriodFinishDate(LocalDate trialPeriodFinishDate) {
    this.trialPeriodFinishDate = trialPeriodFinishDate;
  }


  public ContractCommitmentInfo trialPeriodInMonth(Integer trialPeriodInMonth) {
    this.trialPeriodInMonth = trialPeriodInMonth;
    return this;
  }

  /**
   * The trial period in month related to the offer
   * @return trialPeriodInMonth
   */
  @javax.annotation.Nullable
  public Integer getTrialPeriodInMonth() {
    return trialPeriodInMonth;
  }

  public void setTrialPeriodInMonth(Integer trialPeriodInMonth) {
    this.trialPeriodInMonth = trialPeriodInMonth;
  }


  public ContractCommitmentInfo variableModelInfo(VariableModelInfo variableModelInfo) {
    this.variableModelInfo = variableModelInfo;
    return this;
  }

  /**
   * Get variableModelInfo
   * @return variableModelInfo
   */
  @javax.annotation.Nullable
  public VariableModelInfo getVariableModelInfo() {
    return variableModelInfo;
  }

  public void setVariableModelInfo(VariableModelInfo variableModelInfo) {
    this.variableModelInfo = variableModelInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractCommitmentInfo contractCommitmentInfo = (ContractCommitmentInfo) o;
    return Objects.equals(this.commercialCreatorUserId, contractCommitmentInfo.commercialCreatorUserId) &&
        Objects.equals(this.commercialUserId, contractCommitmentInfo.commercialUserId) &&
        Objects.equals(this.commitmentCalculatedFinishDate, contractCommitmentInfo.commitmentCalculatedFinishDate) &&
        Objects.equals(this.commitmentPeriodInMonth, contractCommitmentInfo.commitmentPeriodInMonth) &&
        Objects.equals(this.contractType, contractCommitmentInfo.contractType) &&
        Objects.equals(this.couponOfferCode, contractCommitmentInfo.couponOfferCode) &&
        Objects.equals(this.currentContractId, contractCommitmentInfo.currentContractId) &&
        Objects.equals(this.currentContractTerminationDate, contractCommitmentInfo.currentContractTerminationDate) &&
        Objects.equals(this.currentCustomerPaymentMethod, contractCommitmentInfo.currentCustomerPaymentMethod) &&
        Objects.equals(this.fixedAndVariableClickInfo, contractCommitmentInfo.fixedAndVariableClickInfo) &&
        Objects.equals(this.isCustomerWantsToTerminateHisContract, contractCommitmentInfo.isCustomerWantsToTerminateHisContract) &&
        Objects.equals(this.isModelMustBeTransmittedInNewContract, contractCommitmentInfo.isModelMustBeTransmittedInNewContract) &&
        Objects.equals(this.minBillingPeriodInMonths, contractCommitmentInfo.minBillingPeriodInMonths) &&
        Objects.equals(this.model, contractCommitmentInfo.model) &&
        Objects.equals(this.newContractStartDate, contractCommitmentInfo.newContractStartDate) &&
        Objects.equals(this.offerId, contractCommitmentInfo.offerId) &&
        Objects.equals(this.offerName, contractCommitmentInfo.offerName) &&
        Objects.equals(this.paymentDelayInDays, contractCommitmentInfo.paymentDelayInDays) &&
        Objects.equals(this.paymentMethodAuthorized, contractCommitmentInfo.paymentMethodAuthorized) &&
        Objects.equals(this.requestedPaymentMethod, contractCommitmentInfo.requestedPaymentMethod) &&
        Objects.equals(this.trialPeriodFinishDate, contractCommitmentInfo.trialPeriodFinishDate) &&
        Objects.equals(this.trialPeriodInMonth, contractCommitmentInfo.trialPeriodInMonth) &&
        Objects.equals(this.variableModelInfo, contractCommitmentInfo.variableModelInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commercialCreatorUserId, commercialUserId, commitmentCalculatedFinishDate, commitmentPeriodInMonth, contractType, couponOfferCode, currentContractId, currentContractTerminationDate, currentCustomerPaymentMethod, fixedAndVariableClickInfo, isCustomerWantsToTerminateHisContract, isModelMustBeTransmittedInNewContract, minBillingPeriodInMonths, model, newContractStartDate, offerId, offerName, paymentDelayInDays, paymentMethodAuthorized, requestedPaymentMethod, trialPeriodFinishDate, trialPeriodInMonth, variableModelInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractCommitmentInfo {\n");
    sb.append("    commercialCreatorUserId: ").append(toIndentedString(commercialCreatorUserId)).append("\n");
    sb.append("    commercialUserId: ").append(toIndentedString(commercialUserId)).append("\n");
    sb.append("    commitmentCalculatedFinishDate: ").append(toIndentedString(commitmentCalculatedFinishDate)).append("\n");
    sb.append("    commitmentPeriodInMonth: ").append(toIndentedString(commitmentPeriodInMonth)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    couponOfferCode: ").append(toIndentedString(couponOfferCode)).append("\n");
    sb.append("    currentContractId: ").append(toIndentedString(currentContractId)).append("\n");
    sb.append("    currentContractTerminationDate: ").append(toIndentedString(currentContractTerminationDate)).append("\n");
    sb.append("    currentCustomerPaymentMethod: ").append(toIndentedString(currentCustomerPaymentMethod)).append("\n");
    sb.append("    fixedAndVariableClickInfo: ").append(toIndentedString(fixedAndVariableClickInfo)).append("\n");
    sb.append("    isCustomerWantsToTerminateHisContract: ").append(toIndentedString(isCustomerWantsToTerminateHisContract)).append("\n");
    sb.append("    isModelMustBeTransmittedInNewContract: ").append(toIndentedString(isModelMustBeTransmittedInNewContract)).append("\n");
    sb.append("    minBillingPeriodInMonths: ").append(toIndentedString(minBillingPeriodInMonths)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    newContractStartDate: ").append(toIndentedString(newContractStartDate)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    paymentDelayInDays: ").append(toIndentedString(paymentDelayInDays)).append("\n");
    sb.append("    paymentMethodAuthorized: ").append(toIndentedString(paymentMethodAuthorized)).append("\n");
    sb.append("    requestedPaymentMethod: ").append(toIndentedString(requestedPaymentMethod)).append("\n");
    sb.append("    trialPeriodFinishDate: ").append(toIndentedString(trialPeriodFinishDate)).append("\n");
    sb.append("    trialPeriodInMonth: ").append(toIndentedString(trialPeriodInMonth)).append("\n");
    sb.append("    variableModelInfo: ").append(toIndentedString(variableModelInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commercialCreatorUserId");
    openapiFields.add("commercialUserId");
    openapiFields.add("commitmentCalculatedFinishDate");
    openapiFields.add("commitmentPeriodInMonth");
    openapiFields.add("contractType");
    openapiFields.add("couponOfferCode");
    openapiFields.add("currentContractId");
    openapiFields.add("currentContractTerminationDate");
    openapiFields.add("currentCustomerPaymentMethod");
    openapiFields.add("fixedAndVariableClickInfo");
    openapiFields.add("isCustomerWantsToTerminateHisContract");
    openapiFields.add("isModelMustBeTransmittedInNewContract");
    openapiFields.add("minBillingPeriodInMonths");
    openapiFields.add("model");
    openapiFields.add("newContractStartDate");
    openapiFields.add("offerId");
    openapiFields.add("offerName");
    openapiFields.add("paymentDelayInDays");
    openapiFields.add("paymentMethodAuthorized");
    openapiFields.add("requestedPaymentMethod");
    openapiFields.add("trialPeriodFinishDate");
    openapiFields.add("trialPeriodInMonth");
    openapiFields.add("variableModelInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractCommitmentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractCommitmentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractCommitmentInfo is not found in the empty JSON string", ContractCommitmentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractCommitmentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractCommitmentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commercialCreatorUserId") != null && !jsonObj.get("commercialCreatorUserId").isJsonNull()) && !jsonObj.get("commercialCreatorUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialCreatorUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialCreatorUserId").toString()));
      }
      if ((jsonObj.get("commercialUserId") != null && !jsonObj.get("commercialUserId").isJsonNull()) && !jsonObj.get("commercialUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialUserId").toString()));
      }
      if ((jsonObj.get("couponOfferCode") != null && !jsonObj.get("couponOfferCode").isJsonNull()) && !jsonObj.get("couponOfferCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponOfferCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("couponOfferCode").toString()));
      }
      if ((jsonObj.get("currentContractId") != null && !jsonObj.get("currentContractId").isJsonNull()) && !jsonObj.get("currentContractId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentContractId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentContractId").toString()));
      }
      // validate the optional field `currentCustomerPaymentMethod`
      if (jsonObj.get("currentCustomerPaymentMethod") != null && !jsonObj.get("currentCustomerPaymentMethod").isJsonNull()) {
        PaymentMethod.validateJsonElement(jsonObj.get("currentCustomerPaymentMethod"));
      }
      // validate the optional field `fixedAndVariableClickInfo`
      if (jsonObj.get("fixedAndVariableClickInfo") != null && !jsonObj.get("fixedAndVariableClickInfo").isJsonNull()) {
        FixedAndVariableClickModelInfo.validateJsonElement(jsonObj.get("fixedAndVariableClickInfo"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("offerName") != null && !jsonObj.get("offerName").isJsonNull()) && !jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      // validate the optional field `paymentMethodAuthorized`
      if (jsonObj.get("paymentMethodAuthorized") != null && !jsonObj.get("paymentMethodAuthorized").isJsonNull()) {
        PaymentMethod.validateJsonElement(jsonObj.get("paymentMethodAuthorized"));
      }
      // validate the optional field `requestedPaymentMethod`
      if (jsonObj.get("requestedPaymentMethod") != null && !jsonObj.get("requestedPaymentMethod").isJsonNull()) {
        PaymentMethod.validateJsonElement(jsonObj.get("requestedPaymentMethod"));
      }
      // validate the optional field `variableModelInfo`
      if (jsonObj.get("variableModelInfo") != null && !jsonObj.get("variableModelInfo").isJsonNull()) {
        VariableModelInfo.validateJsonElement(jsonObj.get("variableModelInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractCommitmentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractCommitmentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractCommitmentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractCommitmentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractCommitmentInfo>() {
           @Override
           public void write(JsonWriter out, ContractCommitmentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractCommitmentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractCommitmentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractCommitmentInfo
   * @throws IOException if the JSON string is invalid with respect to ContractCommitmentInfo
   */
  public static ContractCommitmentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractCommitmentInfo.class);
  }

  /**
   * Convert an instance of ContractCommitmentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

