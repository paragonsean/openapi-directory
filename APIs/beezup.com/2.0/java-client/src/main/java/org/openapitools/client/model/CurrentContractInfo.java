/*
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CurrentContractInfoLinks;
import org.openapitools.client.model.FixedAndVariableClickModelInfo;
import org.openapitools.client.model.VariableModelInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrentContractInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:53.401769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrentContractInfo {
  public static final String SERIALIZED_NAME_ADDITIONAL_CLICK_PRICE = "additionalClickPrice";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CLICK_PRICE)
  private Double additionalClickPrice;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_IN_MONTH = "billingPeriodInMonth";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_IN_MONTH)
  private Integer billingPeriodInMonth;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_PERCENT_DISCOUNT = "billingPeriodPercentDiscount";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_PERCENT_DISCOUNT)
  private Double billingPeriodPercentDiscount;

  public static final String SERIALIZED_NAME_CLICK_INCLUDED = "clickIncluded";
  @SerializedName(SERIALIZED_NAME_CLICK_INCLUDED)
  private Integer clickIncluded;

  public static final String SERIALIZED_NAME_COMMITMENT_CALCULATED_FINISH_UTC_DATE = "commitmentCalculatedFinishUtcDate";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_CALCULATED_FINISH_UTC_DATE)
  private OffsetDateTime commitmentCalculatedFinishUtcDate;

  public static final String SERIALIZED_NAME_COMMITMENT_PERIOD_IN_MONTH = "commitmentPeriodInMonth";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PERIOD_IN_MONTH)
  private Integer commitmentPeriodInMonth;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "contractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private String contractId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DISCOUNT_DURATION_IN_MONTH = "discountDurationInMonth";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_DURATION_IN_MONTH)
  private Integer discountDurationInMonth;

  public static final String SERIALIZED_NAME_DISCOUNT_END_UTC_DATE = "discountEndUtcDate";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_END_UTC_DATE)
  private OffsetDateTime discountEndUtcDate;

  public static final String SERIALIZED_NAME_FIXED_AND_VARIABLE_CLICK_INFO = "fixedAndVariableClickInfo";
  @SerializedName(SERIALIZED_NAME_FIXED_AND_VARIABLE_CLICK_INFO)
  private FixedAndVariableClickModelInfo fixedAndVariableClickInfo;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "fixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_IP_USER_CREATION = "ipUserCreation";
  @SerializedName(SERIALIZED_NAME_IP_USER_CREATION)
  private String ipUserCreation;

  public static final String SERIALIZED_NAME_IP_USER_MODIFICATION = "ipUserModification";
  @SerializedName(SERIALIZED_NAME_IP_USER_MODIFICATION)
  private String ipUserModification;

  public static final String SERIALIZED_NAME_IS_COMMITMENT_RENEWAL_AUTOMATICALLY = "isCommitmentRenewalAutomatically";
  @SerializedName(SERIALIZED_NAME_IS_COMMITMENT_RENEWAL_AUTOMATICALLY)
  private Boolean isCommitmentRenewalAutomatically;

  public static final String SERIALIZED_NAME_IS_MODIFIABLE_CONTRACT = "isModifiableContract";
  @SerializedName(SERIALIZED_NAME_IS_MODIFIABLE_CONTRACT)
  private Boolean isModifiableContract;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private Integer offerId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_PERCENT_DISCOUNT = "percentDiscount";
  @SerializedName(SERIALIZED_NAME_PERCENT_DISCOUNT)
  private Double percentDiscount;

  public static final String SERIALIZED_NAME_START_UTC_DATE = "startUtcDate";
  @SerializedName(SERIALIZED_NAME_START_UTC_DATE)
  private OffsetDateTime startUtcDate;

  public static final String SERIALIZED_NAME_STORE_COUNT = "storeCount";
  @SerializedName(SERIALIZED_NAME_STORE_COUNT)
  private Integer storeCount;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_IN_MONTH = "trialPeriodInMonth";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_IN_MONTH)
  private Integer trialPeriodInMonth;

  public static final String SERIALIZED_NAME_VARIABLE_MODEL_INFO = "variableModelInfo";
  @SerializedName(SERIALIZED_NAME_VARIABLE_MODEL_INFO)
  private VariableModelInfo variableModelInfo;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private CurrentContractInfoLinks links;

  public CurrentContractInfo() {
  }

  public CurrentContractInfo additionalClickPrice(Double additionalClickPrice) {
    this.additionalClickPrice = additionalClickPrice;
    return this;
  }

  /**
   * Additional click price
   * @return additionalClickPrice
   */
  @javax.annotation.Nullable
  public Double getAdditionalClickPrice() {
    return additionalClickPrice;
  }

  public void setAdditionalClickPrice(Double additionalClickPrice) {
    this.additionalClickPrice = additionalClickPrice;
  }


  public CurrentContractInfo billingPeriodInMonth(Integer billingPeriodInMonth) {
    this.billingPeriodInMonth = billingPeriodInMonth;
    return this;
  }

  /**
   * The billing period in month
   * @return billingPeriodInMonth
   */
  @javax.annotation.Nullable
  public Integer getBillingPeriodInMonth() {
    return billingPeriodInMonth;
  }

  public void setBillingPeriodInMonth(Integer billingPeriodInMonth) {
    this.billingPeriodInMonth = billingPeriodInMonth;
  }


  public CurrentContractInfo billingPeriodPercentDiscount(Double billingPeriodPercentDiscount) {
    this.billingPeriodPercentDiscount = billingPeriodPercentDiscount;
    return this;
  }

  /**
   * The percent discount related to the billing period
   * @return billingPeriodPercentDiscount
   */
  @javax.annotation.Nullable
  public Double getBillingPeriodPercentDiscount() {
    return billingPeriodPercentDiscount;
  }

  public void setBillingPeriodPercentDiscount(Double billingPeriodPercentDiscount) {
    this.billingPeriodPercentDiscount = billingPeriodPercentDiscount;
  }


  public CurrentContractInfo clickIncluded(Integer clickIncluded) {
    this.clickIncluded = clickIncluded;
    return this;
  }

  /**
   * The click included
   * @return clickIncluded
   */
  @javax.annotation.Nullable
  public Integer getClickIncluded() {
    return clickIncluded;
  }

  public void setClickIncluded(Integer clickIncluded) {
    this.clickIncluded = clickIncluded;
  }


  public CurrentContractInfo commitmentCalculatedFinishUtcDate(OffsetDateTime commitmentCalculatedFinishUtcDate) {
    this.commitmentCalculatedFinishUtcDate = commitmentCalculatedFinishUtcDate;
    return this;
  }

  /**
   * The calculated end date of commitment
   * @return commitmentCalculatedFinishUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommitmentCalculatedFinishUtcDate() {
    return commitmentCalculatedFinishUtcDate;
  }

  public void setCommitmentCalculatedFinishUtcDate(OffsetDateTime commitmentCalculatedFinishUtcDate) {
    this.commitmentCalculatedFinishUtcDate = commitmentCalculatedFinishUtcDate;
  }


  public CurrentContractInfo commitmentPeriodInMonth(Integer commitmentPeriodInMonth) {
    this.commitmentPeriodInMonth = commitmentPeriodInMonth;
    return this;
  }

  /**
   * The commitment period in month
   * @return commitmentPeriodInMonth
   */
  @javax.annotation.Nullable
  public Integer getCommitmentPeriodInMonth() {
    return commitmentPeriodInMonth;
  }

  public void setCommitmentPeriodInMonth(Integer commitmentPeriodInMonth) {
    this.commitmentPeriodInMonth = commitmentPeriodInMonth;
  }


  public CurrentContractInfo contractId(String contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Your contract identifier
   * @return contractId
   */
  @javax.annotation.Nullable
  public String getContractId() {
    return contractId;
  }

  public void setContractId(String contractId) {
    this.contractId = contractId;
  }


  public CurrentContractInfo currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;(ISO 4217)&lt;/a&gt; 
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CurrentContractInfo discountDurationInMonth(Integer discountDurationInMonth) {
    this.discountDurationInMonth = discountDurationInMonth;
    return this;
  }

  /**
   * The discount duration in month
   * @return discountDurationInMonth
   */
  @javax.annotation.Nullable
  public Integer getDiscountDurationInMonth() {
    return discountDurationInMonth;
  }

  public void setDiscountDurationInMonth(Integer discountDurationInMonth) {
    this.discountDurationInMonth = discountDurationInMonth;
  }


  public CurrentContractInfo discountEndUtcDate(OffsetDateTime discountEndUtcDate) {
    this.discountEndUtcDate = discountEndUtcDate;
    return this;
  }

  /**
   * The end of your discount
   * @return discountEndUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDiscountEndUtcDate() {
    return discountEndUtcDate;
  }

  public void setDiscountEndUtcDate(OffsetDateTime discountEndUtcDate) {
    this.discountEndUtcDate = discountEndUtcDate;
  }


  public CurrentContractInfo fixedAndVariableClickInfo(FixedAndVariableClickModelInfo fixedAndVariableClickInfo) {
    this.fixedAndVariableClickInfo = fixedAndVariableClickInfo;
    return this;
  }

  /**
   * Get fixedAndVariableClickInfo
   * @return fixedAndVariableClickInfo
   */
  @javax.annotation.Nullable
  public FixedAndVariableClickModelInfo getFixedAndVariableClickInfo() {
    return fixedAndVariableClickInfo;
  }

  public void setFixedAndVariableClickInfo(FixedAndVariableClickModelInfo fixedAndVariableClickInfo) {
    this.fixedAndVariableClickInfo = fixedAndVariableClickInfo;
  }


  public CurrentContractInfo fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * The fixed price of your contract
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public CurrentContractInfo ipUserCreation(String ipUserCreation) {
    this.ipUserCreation = ipUserCreation;
    return this;
  }

  /**
   * The IP of the user who creates the contract
   * @return ipUserCreation
   */
  @javax.annotation.Nullable
  public String getIpUserCreation() {
    return ipUserCreation;
  }

  public void setIpUserCreation(String ipUserCreation) {
    this.ipUserCreation = ipUserCreation;
  }


  public CurrentContractInfo ipUserModification(String ipUserModification) {
    this.ipUserModification = ipUserModification;
    return this;
  }

  /**
   * The IP of the user who modified the contract
   * @return ipUserModification
   */
  @javax.annotation.Nullable
  public String getIpUserModification() {
    return ipUserModification;
  }

  public void setIpUserModification(String ipUserModification) {
    this.ipUserModification = ipUserModification;
  }


  public CurrentContractInfo isCommitmentRenewalAutomatically(Boolean isCommitmentRenewalAutomatically) {
    this.isCommitmentRenewalAutomatically = isCommitmentRenewalAutomatically;
    return this;
  }

  /**
   * Is commitment is automatically renewed
   * @return isCommitmentRenewalAutomatically
   */
  @javax.annotation.Nullable
  public Boolean getIsCommitmentRenewalAutomatically() {
    return isCommitmentRenewalAutomatically;
  }

  public void setIsCommitmentRenewalAutomatically(Boolean isCommitmentRenewalAutomatically) {
    this.isCommitmentRenewalAutomatically = isCommitmentRenewalAutomatically;
  }


  public CurrentContractInfo isModifiableContract(Boolean isModifiableContract) {
    this.isModifiableContract = isModifiableContract;
    return this;
  }

  /**
   * Is the contract is modifiable ?
   * @return isModifiableContract
   */
  @javax.annotation.Nullable
  public Boolean getIsModifiableContract() {
    return isModifiableContract;
  }

  public void setIsModifiableContract(Boolean isModifiableContract) {
    this.isModifiableContract = isModifiableContract;
  }


  public CurrentContractInfo offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * The offer id based on /offers. Not a free offer of course.
   * minimum: 1
   * @return offerId
   */
  @javax.annotation.Nullable
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }


  public CurrentContractInfo offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * The offer name based on /offers
   * @return offerName
   */
  @javax.annotation.Nullable
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public CurrentContractInfo percentDiscount(Double percentDiscount) {
    this.percentDiscount = percentDiscount;
    return this;
  }

  /**
   * The percent of the discount
   * @return percentDiscount
   */
  @javax.annotation.Nullable
  public Double getPercentDiscount() {
    return percentDiscount;
  }

  public void setPercentDiscount(Double percentDiscount) {
    this.percentDiscount = percentDiscount;
  }


  public CurrentContractInfo startUtcDate(OffsetDateTime startUtcDate) {
    this.startUtcDate = startUtcDate;
    return this;
  }

  /**
   * The start date of your contract
   * @return startUtcDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartUtcDate() {
    return startUtcDate;
  }

  public void setStartUtcDate(OffsetDateTime startUtcDate) {
    this.startUtcDate = startUtcDate;
  }


  public CurrentContractInfo storeCount(Integer storeCount) {
    this.storeCount = storeCount;
    return this;
  }

  /**
   * The store count you want to have in your contract.
   * minimum: 1
   * @return storeCount
   */
  @javax.annotation.Nullable
  public Integer getStoreCount() {
    return storeCount;
  }

  public void setStoreCount(Integer storeCount) {
    this.storeCount = storeCount;
  }


  public CurrentContractInfo trialPeriodInMonth(Integer trialPeriodInMonth) {
    this.trialPeriodInMonth = trialPeriodInMonth;
    return this;
  }

  /**
   * The trial period in month
   * @return trialPeriodInMonth
   */
  @javax.annotation.Nullable
  public Integer getTrialPeriodInMonth() {
    return trialPeriodInMonth;
  }

  public void setTrialPeriodInMonth(Integer trialPeriodInMonth) {
    this.trialPeriodInMonth = trialPeriodInMonth;
  }


  public CurrentContractInfo variableModelInfo(VariableModelInfo variableModelInfo) {
    this.variableModelInfo = variableModelInfo;
    return this;
  }

  /**
   * Get variableModelInfo
   * @return variableModelInfo
   */
  @javax.annotation.Nullable
  public VariableModelInfo getVariableModelInfo() {
    return variableModelInfo;
  }

  public void setVariableModelInfo(VariableModelInfo variableModelInfo) {
    this.variableModelInfo = variableModelInfo;
  }


  public CurrentContractInfo links(CurrentContractInfoLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public CurrentContractInfoLinks getLinks() {
    return links;
  }

  public void setLinks(CurrentContractInfoLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentContractInfo currentContractInfo = (CurrentContractInfo) o;
    return Objects.equals(this.additionalClickPrice, currentContractInfo.additionalClickPrice) &&
        Objects.equals(this.billingPeriodInMonth, currentContractInfo.billingPeriodInMonth) &&
        Objects.equals(this.billingPeriodPercentDiscount, currentContractInfo.billingPeriodPercentDiscount) &&
        Objects.equals(this.clickIncluded, currentContractInfo.clickIncluded) &&
        Objects.equals(this.commitmentCalculatedFinishUtcDate, currentContractInfo.commitmentCalculatedFinishUtcDate) &&
        Objects.equals(this.commitmentPeriodInMonth, currentContractInfo.commitmentPeriodInMonth) &&
        Objects.equals(this.contractId, currentContractInfo.contractId) &&
        Objects.equals(this.currencyCode, currentContractInfo.currencyCode) &&
        Objects.equals(this.discountDurationInMonth, currentContractInfo.discountDurationInMonth) &&
        Objects.equals(this.discountEndUtcDate, currentContractInfo.discountEndUtcDate) &&
        Objects.equals(this.fixedAndVariableClickInfo, currentContractInfo.fixedAndVariableClickInfo) &&
        Objects.equals(this.fixedPrice, currentContractInfo.fixedPrice) &&
        Objects.equals(this.ipUserCreation, currentContractInfo.ipUserCreation) &&
        Objects.equals(this.ipUserModification, currentContractInfo.ipUserModification) &&
        Objects.equals(this.isCommitmentRenewalAutomatically, currentContractInfo.isCommitmentRenewalAutomatically) &&
        Objects.equals(this.isModifiableContract, currentContractInfo.isModifiableContract) &&
        Objects.equals(this.offerId, currentContractInfo.offerId) &&
        Objects.equals(this.offerName, currentContractInfo.offerName) &&
        Objects.equals(this.percentDiscount, currentContractInfo.percentDiscount) &&
        Objects.equals(this.startUtcDate, currentContractInfo.startUtcDate) &&
        Objects.equals(this.storeCount, currentContractInfo.storeCount) &&
        Objects.equals(this.trialPeriodInMonth, currentContractInfo.trialPeriodInMonth) &&
        Objects.equals(this.variableModelInfo, currentContractInfo.variableModelInfo) &&
        Objects.equals(this.links, currentContractInfo.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalClickPrice, billingPeriodInMonth, billingPeriodPercentDiscount, clickIncluded, commitmentCalculatedFinishUtcDate, commitmentPeriodInMonth, contractId, currencyCode, discountDurationInMonth, discountEndUtcDate, fixedAndVariableClickInfo, fixedPrice, ipUserCreation, ipUserModification, isCommitmentRenewalAutomatically, isModifiableContract, offerId, offerName, percentDiscount, startUtcDate, storeCount, trialPeriodInMonth, variableModelInfo, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentContractInfo {\n");
    sb.append("    additionalClickPrice: ").append(toIndentedString(additionalClickPrice)).append("\n");
    sb.append("    billingPeriodInMonth: ").append(toIndentedString(billingPeriodInMonth)).append("\n");
    sb.append("    billingPeriodPercentDiscount: ").append(toIndentedString(billingPeriodPercentDiscount)).append("\n");
    sb.append("    clickIncluded: ").append(toIndentedString(clickIncluded)).append("\n");
    sb.append("    commitmentCalculatedFinishUtcDate: ").append(toIndentedString(commitmentCalculatedFinishUtcDate)).append("\n");
    sb.append("    commitmentPeriodInMonth: ").append(toIndentedString(commitmentPeriodInMonth)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    discountDurationInMonth: ").append(toIndentedString(discountDurationInMonth)).append("\n");
    sb.append("    discountEndUtcDate: ").append(toIndentedString(discountEndUtcDate)).append("\n");
    sb.append("    fixedAndVariableClickInfo: ").append(toIndentedString(fixedAndVariableClickInfo)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    ipUserCreation: ").append(toIndentedString(ipUserCreation)).append("\n");
    sb.append("    ipUserModification: ").append(toIndentedString(ipUserModification)).append("\n");
    sb.append("    isCommitmentRenewalAutomatically: ").append(toIndentedString(isCommitmentRenewalAutomatically)).append("\n");
    sb.append("    isModifiableContract: ").append(toIndentedString(isModifiableContract)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    percentDiscount: ").append(toIndentedString(percentDiscount)).append("\n");
    sb.append("    startUtcDate: ").append(toIndentedString(startUtcDate)).append("\n");
    sb.append("    storeCount: ").append(toIndentedString(storeCount)).append("\n");
    sb.append("    trialPeriodInMonth: ").append(toIndentedString(trialPeriodInMonth)).append("\n");
    sb.append("    variableModelInfo: ").append(toIndentedString(variableModelInfo)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalClickPrice");
    openapiFields.add("billingPeriodInMonth");
    openapiFields.add("billingPeriodPercentDiscount");
    openapiFields.add("clickIncluded");
    openapiFields.add("commitmentCalculatedFinishUtcDate");
    openapiFields.add("commitmentPeriodInMonth");
    openapiFields.add("contractId");
    openapiFields.add("currencyCode");
    openapiFields.add("discountDurationInMonth");
    openapiFields.add("discountEndUtcDate");
    openapiFields.add("fixedAndVariableClickInfo");
    openapiFields.add("fixedPrice");
    openapiFields.add("ipUserCreation");
    openapiFields.add("ipUserModification");
    openapiFields.add("isCommitmentRenewalAutomatically");
    openapiFields.add("isModifiableContract");
    openapiFields.add("offerId");
    openapiFields.add("offerName");
    openapiFields.add("percentDiscount");
    openapiFields.add("startUtcDate");
    openapiFields.add("storeCount");
    openapiFields.add("trialPeriodInMonth");
    openapiFields.add("variableModelInfo");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("links");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentContractInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentContractInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentContractInfo is not found in the empty JSON string", CurrentContractInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentContractInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentContractInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrentContractInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contractId") != null && !jsonObj.get("contractId").isJsonNull()) && !jsonObj.get("contractId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `fixedAndVariableClickInfo`
      if (jsonObj.get("fixedAndVariableClickInfo") != null && !jsonObj.get("fixedAndVariableClickInfo").isJsonNull()) {
        FixedAndVariableClickModelInfo.validateJsonElement(jsonObj.get("fixedAndVariableClickInfo"));
      }
      if ((jsonObj.get("ipUserCreation") != null && !jsonObj.get("ipUserCreation").isJsonNull()) && !jsonObj.get("ipUserCreation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipUserCreation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipUserCreation").toString()));
      }
      if ((jsonObj.get("ipUserModification") != null && !jsonObj.get("ipUserModification").isJsonNull()) && !jsonObj.get("ipUserModification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipUserModification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipUserModification").toString()));
      }
      if ((jsonObj.get("offerName") != null && !jsonObj.get("offerName").isJsonNull()) && !jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      // validate the optional field `variableModelInfo`
      if (jsonObj.get("variableModelInfo") != null && !jsonObj.get("variableModelInfo").isJsonNull()) {
        VariableModelInfo.validateJsonElement(jsonObj.get("variableModelInfo"));
      }
      // validate the required field `links`
      CurrentContractInfoLinks.validateJsonElement(jsonObj.get("links"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentContractInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentContractInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentContractInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentContractInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentContractInfo>() {
           @Override
           public void write(JsonWriter out, CurrentContractInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentContractInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentContractInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentContractInfo
   * @throws IOException if the JSON string is invalid with respect to CurrentContractInfo
   */
  public static CurrentContractInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentContractInfo.class);
  }

  /**
   * Convert an instance of CurrentContractInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

