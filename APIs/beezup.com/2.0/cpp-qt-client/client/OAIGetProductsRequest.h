/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetProductsRequest.h
 *
 * The request message to get products based on these filters
 */

#ifndef OAIGetProductsRequest_H
#define OAIGetProductsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetProductsRequest : public OAIObject {
public:
    OAIGetProductsRequest();
    OAIGetProductsRequest(QString json);
    ~OAIGetProductsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCategoryPath() const;
    void setCategoryPath(const QList<QString> &category_path);
    bool is_category_path_Set() const;
    bool is_category_path_Valid() const;

    QList<QString> getColumnIdList() const;
    void setColumnIdList(const QList<QString> &column_id_list);
    bool is_column_id_list_Set() const;
    bool is_column_id_list_Valid() const;

    QString getEan() const;
    void setEan(const QString &ean);
    bool is_ean_Set() const;
    bool is_ean_Valid() const;

    bool isExists() const;
    void setExists(const bool &exists);
    bool is_exists_Set() const;
    bool is_exists_Valid() const;

    QString getMpn() const;
    void setMpn(const QString &mpn);
    bool is_mpn_Set() const;
    bool is_mpn_Valid() const;

    QString getOrderByCatalogColumnId() const;
    void setOrderByCatalogColumnId(const QString &order_by_catalog_column_id);
    bool is_order_by_catalog_column_id_Set() const;
    bool is_order_by_catalog_column_id_Valid() const;

    qint32 getPageNumber() const;
    void setPageNumber(const qint32 &page_number);
    bool is_page_number_Set() const;
    bool is_page_number_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    QList<QString> getProductIdList() const;
    void setProductIdList(const QList<QString> &product_id_list);
    bool is_product_id_list_Set() const;
    bool is_product_id_list_Valid() const;

    QString getSku() const;
    void setSku(const QString &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    bool isWithoutSubCategories() const;
    void setWithoutSubCategories(const bool &without_sub_categories);
    bool is_without_sub_categories_Set() const;
    bool is_without_sub_categories_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_category_path;
    bool m_category_path_isSet;
    bool m_category_path_isValid;

    QList<QString> m_column_id_list;
    bool m_column_id_list_isSet;
    bool m_column_id_list_isValid;

    QString m_ean;
    bool m_ean_isSet;
    bool m_ean_isValid;

    bool m_exists;
    bool m_exists_isSet;
    bool m_exists_isValid;

    QString m_mpn;
    bool m_mpn_isSet;
    bool m_mpn_isValid;

    QString m_order_by_catalog_column_id;
    bool m_order_by_catalog_column_id_isSet;
    bool m_order_by_catalog_column_id_isValid;

    qint32 m_page_number;
    bool m_page_number_isSet;
    bool m_page_number_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    QList<QString> m_product_id_list;
    bool m_product_id_list_isSet;
    bool m_product_id_list_isValid;

    QString m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    bool m_without_sub_categories;
    bool m_without_sub_categories_isSet;
    bool m_without_sub_categories_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetProductsRequest)

#endif // OAIGetProductsRequest_H
