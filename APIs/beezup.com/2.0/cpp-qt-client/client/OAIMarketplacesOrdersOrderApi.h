/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketplacesOrdersOrderApi_H
#define OAI_OAIMarketplacesOrdersOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIOrder.h"
#include "OAIOrderHistory.h"
#include "OAISetMerchantOrderInfoRequest.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketplacesOrdersOrderApi : public QObject {
    Q_OBJECT

public:
    OAIMarketplacesOrdersOrderApi(const int timeOut = 0);
    ~OAIMarketplacesOrdersOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  change_order_type QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  test_mode bool [optional]
    * @param[in]  request_body QMap<QString, QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void changeOrder(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const QString &change_order_type, const QString &user_name, const QString &if_match, const ::OpenAPI::OptionalParam<bool> &test_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &request_body = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void clearMerchantOrderInfo(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getOrder(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getOrderHistory(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void harvestOrder(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    Q_DECL_DEPRECATED virtual void headOrder(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  oai_set_merchant_order_info_request OAISetMerchantOrderInfoRequest [required]
    */
    Q_DECL_DEPRECATED virtual void setMerchantOrderInfo(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const OAISetMerchantOrderInfoRequest &oai_set_merchant_order_info_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeOrderCallback(OAIHttpRequestWorker *worker);
    void clearMerchantOrderInfoCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getOrderHistoryCallback(OAIHttpRequestWorker *worker);
    void harvestOrderCallback(OAIHttpRequestWorker *worker);
    void headOrderCallback(OAIHttpRequestWorker *worker);
    void setMerchantOrderInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeOrderSignal();
    void clearMerchantOrderInfoSignal();
    void getOrderSignal(OAIOrder summary);
    void getOrderHistorySignal(OAIOrderHistory summary);
    void harvestOrderSignal();
    void headOrderSignal();
    void setMerchantOrderInfoSignal();


    void changeOrderSignalFull(OAIHttpRequestWorker *worker);
    void clearMerchantOrderInfoSignalFull(OAIHttpRequestWorker *worker);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void getOrderHistorySignalFull(OAIHttpRequestWorker *worker, OAIOrderHistory summary);
    void harvestOrderSignalFull(OAIHttpRequestWorker *worker);
    void headOrderSignalFull(OAIHttpRequestWorker *worker);
    void setMerchantOrderInfoSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use changeOrderSignalError() instead")
    void changeOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clearMerchantOrderInfoSignalError() instead")
    void clearMerchantOrderInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clearMerchantOrderInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderHistorySignalError() instead")
    void getOrderHistorySignalE(OAIOrderHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderHistorySignalError(OAIOrderHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestOrderSignalError() instead")
    void harvestOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void harvestOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headOrderSignalError() instead")
    void headOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void headOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMerchantOrderInfoSignalError() instead")
    void setMerchantOrderInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setMerchantOrderInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeOrderSignalErrorFull() instead")
    void changeOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clearMerchantOrderInfoSignalErrorFull() instead")
    void clearMerchantOrderInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clearMerchantOrderInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderHistorySignalErrorFull() instead")
    void getOrderHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestOrderSignalErrorFull() instead")
    void harvestOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void harvestOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headOrderSignalErrorFull() instead")
    void headOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMerchantOrderInfoSignalErrorFull() instead")
    void setMerchantOrderInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setMerchantOrderInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
