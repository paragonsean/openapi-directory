/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalyticsRulesApi_H
#define OAI_OAIAnalyticsRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAICreateRuleRequest.h"
#include "OAIRule.h"
#include "OAIRuleExecutionReportings.h"
#include "OAIRuleList.h"
#include "OAIUpdateRuleRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalyticsRulesApi : public QObject {
    Q_OBJECT

public:
    OAIAnalyticsRulesApi(const int timeOut = 0);
    ~OAIAnalyticsRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_create_rule_request OAICreateRuleRequest [required]
    */
    virtual void createRule(const QString &store_id, const OAICreateRuleRequest &oai_create_rule_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void deleteRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void disableRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void enableRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void getRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void getRules(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  page_number qint32 [required]
    * @param[in]  page_size qint32 [required]
    */
    virtual void getRulesExecutions(const QString &store_id, const qint32 &page_number, const qint32 &page_size);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void moveDownRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void moveUpRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void runRule(const QString &store_id, const QString &rule_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void runRules(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_update_rule_request OAIUpdateRuleRequest [required]
    */
    virtual void updateRule(const QString &store_id, const QString &rule_id, const OAIUpdateRuleRequest &oai_update_rule_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRuleCallback(OAIHttpRequestWorker *worker);
    void deleteRuleCallback(OAIHttpRequestWorker *worker);
    void disableRuleCallback(OAIHttpRequestWorker *worker);
    void enableRuleCallback(OAIHttpRequestWorker *worker);
    void getRuleCallback(OAIHttpRequestWorker *worker);
    void getRulesCallback(OAIHttpRequestWorker *worker);
    void getRulesExecutionsCallback(OAIHttpRequestWorker *worker);
    void moveDownRuleCallback(OAIHttpRequestWorker *worker);
    void moveUpRuleCallback(OAIHttpRequestWorker *worker);
    void runRuleCallback(OAIHttpRequestWorker *worker);
    void runRulesCallback(OAIHttpRequestWorker *worker);
    void updateRuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRuleSignal();
    void deleteRuleSignal();
    void disableRuleSignal();
    void enableRuleSignal();
    void getRuleSignal(OAIRule summary);
    void getRulesSignal(OAIRuleList summary);
    void getRulesExecutionsSignal(OAIRuleExecutionReportings summary);
    void moveDownRuleSignal();
    void moveUpRuleSignal();
    void runRuleSignal();
    void runRulesSignal();
    void updateRuleSignal();


    void createRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteRuleSignalFull(OAIHttpRequestWorker *worker);
    void disableRuleSignalFull(OAIHttpRequestWorker *worker);
    void enableRuleSignalFull(OAIHttpRequestWorker *worker);
    void getRuleSignalFull(OAIHttpRequestWorker *worker, OAIRule summary);
    void getRulesSignalFull(OAIHttpRequestWorker *worker, OAIRuleList summary);
    void getRulesExecutionsSignalFull(OAIHttpRequestWorker *worker, OAIRuleExecutionReportings summary);
    void moveDownRuleSignalFull(OAIHttpRequestWorker *worker);
    void moveUpRuleSignalFull(OAIHttpRequestWorker *worker);
    void runRuleSignalFull(OAIHttpRequestWorker *worker);
    void runRulesSignalFull(OAIHttpRequestWorker *worker);
    void updateRuleSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createRuleSignalError() instead")
    void createRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalError() instead")
    void deleteRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableRuleSignalError() instead")
    void disableRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableRuleSignalError() instead")
    void enableRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalError() instead")
    void getRuleSignalE(OAIRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalError(OAIRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalError() instead")
    void getRulesSignalE(OAIRuleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalError(OAIRuleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesExecutionsSignalError() instead")
    void getRulesExecutionsSignalE(OAIRuleExecutionReportings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesExecutionsSignalError(OAIRuleExecutionReportings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveDownRuleSignalError() instead")
    void moveDownRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveDownRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveUpRuleSignalError() instead")
    void moveUpRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveUpRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleSignalError() instead")
    void runRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRulesSignalError() instead")
    void runRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void runRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalError() instead")
    void updateRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRuleSignalErrorFull() instead")
    void createRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalErrorFull() instead")
    void deleteRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableRuleSignalErrorFull() instead")
    void disableRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableRuleSignalErrorFull() instead")
    void enableRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalErrorFull() instead")
    void getRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalErrorFull() instead")
    void getRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesExecutionsSignalErrorFull() instead")
    void getRulesExecutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesExecutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveDownRuleSignalErrorFull() instead")
    void moveDownRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveDownRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveUpRuleSignalErrorFull() instead")
    void moveUpRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveUpRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleSignalErrorFull() instead")
    void runRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRulesSignalErrorFull() instead")
    void runRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalErrorFull() instead")
    void updateRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
