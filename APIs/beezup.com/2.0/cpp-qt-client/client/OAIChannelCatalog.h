/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannelCatalog.h
 *
 * 
 */

#ifndef OAIChannelCatalog_H
#define OAIChannelCatalog_H

#include <QJsonObject>

#include "OAIChannelCatalogCategoryMappingSettings.h"
#include "OAIChannelCatalogColumnMappingWithName.h"
#include "OAIChannelCatalogLinks.h"
#include "OAIChannelCatalogState.h"
#include "OAIChannelCategorySettings.h"
#include "OAIChannelCostSettings.h"
#include "OAICostSettings.h"
#include "OAIExclusionFilter.h"
#include "OAIGeneralSettings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelCatalogCategoryMappingSettings;
class OAIChannelCategorySettings;
class OAIChannelCostSettings;
class OAIChannelCatalogColumnMappingWithName;
class OAICostSettings;
class OAIExclusionFilter;
class OAIGeneralSettings;
class OAIChannelCatalogLinks;
class OAIChannelCatalogState;

class OAIChannelCatalog : public OAIObject {
public:
    OAIChannelCatalog();
    OAIChannelCatalog(QString json);
    ~OAIChannelCatalog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelImageUrl() const;
    void setChannelImageUrl(const QString &channel_image_url);
    bool is_channel_image_url_Set() const;
    bool is_channel_image_url_Valid() const;

    QString getChannelName() const;
    void setChannelName(const QString &channel_name);
    bool is_channel_name_Set() const;
    bool is_channel_name_Valid() const;

    OAIChannelCatalogCategoryMappingSettings getCategoryMappingSettings() const;
    void setCategoryMappingSettings(const OAIChannelCatalogCategoryMappingSettings &category_mapping_settings);
    bool is_category_mapping_settings_Set() const;
    bool is_category_mapping_settings_Valid() const;

    QString getChannelCatalogId() const;
    void setChannelCatalogId(const QString &channel_catalog_id);
    bool is_channel_catalog_id_Set() const;
    bool is_channel_catalog_id_Valid() const;

    OAIChannelCategorySettings getChannelCategorySettings() const;
    void setChannelCategorySettings(const OAIChannelCategorySettings &channel_category_settings);
    bool is_channel_category_settings_Set() const;
    bool is_channel_category_settings_Valid() const;

    OAIChannelCostSettings getChannelCostSettings() const;
    void setChannelCostSettings(const OAIChannelCostSettings &channel_cost_settings);
    bool is_channel_cost_settings_Set() const;
    bool is_channel_cost_settings_Valid() const;

    QList<OAIChannelCatalogColumnMappingWithName> getColumnMappings() const;
    void setColumnMappings(const QList<OAIChannelCatalogColumnMappingWithName> &column_mappings);
    bool is_column_mappings_Set() const;
    bool is_column_mappings_Valid() const;

    OAICostSettings getCostSettings() const;
    void setCostSettings(const OAICostSettings &cost_settings);
    bool is_cost_settings_Set() const;
    bool is_cost_settings_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<OAIExclusionFilter> getExclusionFilters() const;
    void setExclusionFilters(const QList<OAIExclusionFilter> &exclusion_filters);
    bool is_exclusion_filters_Set() const;
    bool is_exclusion_filters_Valid() const;

    QString getExportUrl() const;
    void setExportUrl(const QString &export_url);
    bool is_export_url_Set() const;
    bool is_export_url_Valid() const;

    OAIGeneralSettings getGeneralSettings() const;
    void setGeneralSettings(const OAIGeneralSettings &general_settings);
    bool is_general_settings_Set() const;
    bool is_general_settings_Valid() const;

    bool isIsMarketplace() const;
    void setIsMarketplace(const bool &is_marketplace);
    bool is_is_marketplace_Set() const;
    bool is_is_marketplace_Valid() const;

    OAIChannelCatalogLinks getLinks() const;
    void setLinks(const OAIChannelCatalogLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAIChannelCatalogState getState() const;
    void setState(const OAIChannelCatalogState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStoreId() const;
    void setStoreId(const QString &store_id);
    bool is_store_id_Set() const;
    bool is_store_id_Valid() const;

    QList<QString> getTypes() const;
    void setTypes(const QList<QString> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_image_url;
    bool m_channel_image_url_isSet;
    bool m_channel_image_url_isValid;

    QString m_channel_name;
    bool m_channel_name_isSet;
    bool m_channel_name_isValid;

    OAIChannelCatalogCategoryMappingSettings m_category_mapping_settings;
    bool m_category_mapping_settings_isSet;
    bool m_category_mapping_settings_isValid;

    QString m_channel_catalog_id;
    bool m_channel_catalog_id_isSet;
    bool m_channel_catalog_id_isValid;

    OAIChannelCategorySettings m_channel_category_settings;
    bool m_channel_category_settings_isSet;
    bool m_channel_category_settings_isValid;

    OAIChannelCostSettings m_channel_cost_settings;
    bool m_channel_cost_settings_isSet;
    bool m_channel_cost_settings_isValid;

    QList<OAIChannelCatalogColumnMappingWithName> m_column_mappings;
    bool m_column_mappings_isSet;
    bool m_column_mappings_isValid;

    OAICostSettings m_cost_settings;
    bool m_cost_settings_isSet;
    bool m_cost_settings_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<OAIExclusionFilter> m_exclusion_filters;
    bool m_exclusion_filters_isSet;
    bool m_exclusion_filters_isValid;

    QString m_export_url;
    bool m_export_url_isSet;
    bool m_export_url_isValid;

    OAIGeneralSettings m_general_settings;
    bool m_general_settings_isSet;
    bool m_general_settings_isValid;

    bool m_is_marketplace;
    bool m_is_marketplace_isSet;
    bool m_is_marketplace_isValid;

    OAIChannelCatalogLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAIChannelCatalogState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_store_id;
    bool m_store_id_isSet;
    bool m_store_id_isValid;

    QList<QString> m_types;
    bool m_types_isSet;
    bool m_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannelCatalog)

#endif // OAIChannelCatalog_H
