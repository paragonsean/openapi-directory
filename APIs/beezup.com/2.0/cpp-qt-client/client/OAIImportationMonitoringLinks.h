/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportationMonitoringLinks.h
 *
 * Applicable operations considering the state of the importation
 */

#ifndef OAIImportationMonitoringLinks_H
#define OAIImportationMonitoringLinks_H

#include <QJsonObject>

#include "OAILinks_Importation_ActivateAutoImportLink.h"
#include "OAILinks_Importation_CancelLink.h"
#include "OAILinks_Importation_CommitColumnsLink.h"
#include "OAILinks_Importation_CommitLink.h"
#include "OAILinks_Importation_ConfigureRemainingCatalogColumnsLink.h"
#include "OAILinks_Importation_GetCustomColumnsLink.h"
#include "OAILinks_Importation_GetDetectedCatalogColumnsLink.h"
#include "OAILinks_Importation_GetImportationMonitoringLink.h"
#include "OAILinks_Importation_GetProductSampleLink.h"
#include "OAILinks_Importation_TechnicalProgressionLink.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILinks_Importation_ActivateAutoImportLink;
class OAILinks_Importation_CancelLink;
class OAILinks_Importation_GetDetectedCatalogColumnsLink;
class OAILinks_Importation_CommitLink;
class OAILinks_Importation_CommitColumnsLink;
class OAILinks_Importation_ConfigureRemainingCatalogColumnsLink;
class OAILinks_Importation_GetCustomColumnsLink;
class OAILinks_Importation_GetProductSampleLink;
class OAILinks_Importation_GetImportationMonitoringLink;
class OAILinks_Importation_TechnicalProgressionLink;

class OAIImportationMonitoringLinks : public OAIObject {
public:
    OAIImportationMonitoringLinks();
    OAIImportationMonitoringLinks(QString json);
    ~OAIImportationMonitoringLinks() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILinks_Importation_ActivateAutoImportLink getActivateAutoImport() const;
    void setActivateAutoImport(const OAILinks_Importation_ActivateAutoImportLink &activate_auto_import);
    bool is_activate_auto_import_Set() const;
    bool is_activate_auto_import_Valid() const;

    OAILinks_Importation_CancelLink getCancel() const;
    void setCancel(const OAILinks_Importation_CancelLink &cancel);
    bool is_cancel_Set() const;
    bool is_cancel_Valid() const;

    OAILinks_Importation_GetDetectedCatalogColumnsLink getCatalogColumns() const;
    void setCatalogColumns(const OAILinks_Importation_GetDetectedCatalogColumnsLink &catalog_columns);
    bool is_catalog_columns_Set() const;
    bool is_catalog_columns_Valid() const;

    OAILinks_Importation_CommitLink getCommit() const;
    void setCommit(const OAILinks_Importation_CommitLink &commit);
    bool is_commit_Set() const;
    bool is_commit_Valid() const;

    OAILinks_Importation_CommitColumnsLink getCommitColumns() const;
    void setCommitColumns(const OAILinks_Importation_CommitColumnsLink &commit_columns);
    bool is_commit_columns_Set() const;
    bool is_commit_columns_Valid() const;

    OAILinks_Importation_ConfigureRemainingCatalogColumnsLink getConfigureRemainingCatalogColumns() const;
    void setConfigureRemainingCatalogColumns(const OAILinks_Importation_ConfigureRemainingCatalogColumnsLink &configure_remaining_catalog_columns);
    bool is_configure_remaining_catalog_columns_Set() const;
    bool is_configure_remaining_catalog_columns_Valid() const;

    OAILinks_Importation_GetCustomColumnsLink getCustomColumns() const;
    void setCustomColumns(const OAILinks_Importation_GetCustomColumnsLink &custom_columns);
    bool is_custom_columns_Set() const;
    bool is_custom_columns_Valid() const;

    OAILinks_Importation_GetProductSampleLink getProductSamples() const;
    void setProductSamples(const OAILinks_Importation_GetProductSampleLink &product_samples);
    bool is_product_samples_Set() const;
    bool is_product_samples_Valid() const;

    OAILinks_Importation_GetImportationMonitoringLink getSelf() const;
    void setSelf(const OAILinks_Importation_GetImportationMonitoringLink &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    OAILinks_Importation_TechnicalProgressionLink getTechnicalProgression() const;
    void setTechnicalProgression(const OAILinks_Importation_TechnicalProgressionLink &technical_progression);
    bool is_technical_progression_Set() const;
    bool is_technical_progression_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILinks_Importation_ActivateAutoImportLink m_activate_auto_import;
    bool m_activate_auto_import_isSet;
    bool m_activate_auto_import_isValid;

    OAILinks_Importation_CancelLink m_cancel;
    bool m_cancel_isSet;
    bool m_cancel_isValid;

    OAILinks_Importation_GetDetectedCatalogColumnsLink m_catalog_columns;
    bool m_catalog_columns_isSet;
    bool m_catalog_columns_isValid;

    OAILinks_Importation_CommitLink m_commit;
    bool m_commit_isSet;
    bool m_commit_isValid;

    OAILinks_Importation_CommitColumnsLink m_commit_columns;
    bool m_commit_columns_isSet;
    bool m_commit_columns_isValid;

    OAILinks_Importation_ConfigureRemainingCatalogColumnsLink m_configure_remaining_catalog_columns;
    bool m_configure_remaining_catalog_columns_isSet;
    bool m_configure_remaining_catalog_columns_isValid;

    OAILinks_Importation_GetCustomColumnsLink m_custom_columns;
    bool m_custom_columns_isSet;
    bool m_custom_columns_isValid;

    OAILinks_Importation_GetProductSampleLink m_product_samples;
    bool m_product_samples_isSet;
    bool m_product_samples_isValid;

    OAILinks_Importation_GetImportationMonitoringLink m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    OAILinks_Importation_TechnicalProgressionLink m_technical_progression;
    bool m_technical_progression_isSet;
    bool m_technical_progression_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportationMonitoringLinks)

#endif // OAIImportationMonitoringLinks_H
