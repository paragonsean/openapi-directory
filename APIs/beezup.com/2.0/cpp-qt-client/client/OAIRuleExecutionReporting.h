/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRuleExecutionReporting.h
 *
 * 
 */

#ifndef OAIRuleExecutionReporting_H
#define OAIRuleExecutionReporting_H

#include <QJsonObject>

#include "OAIOptimisationActionName.h"
#include "OAIRuleExecutionReportingErrorType.h"
#include "OAIRuleExecutionReportingExecutionSource.h"
#include "OAIRuleExecutionReportingLinks.h"
#include "OAIRuleExecutionReportingStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleExecutionReportingLinks;

class OAIRuleExecutionReporting : public OAIObject {
public:
    OAIRuleExecutionReporting();
    OAIRuleExecutionReporting(QString json);
    ~OAIRuleExecutionReporting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveAffectedProductCount() const;
    void setActiveAffectedProductCount(const qint32 &active_affected_product_count);
    bool is_active_affected_product_count_Set() const;
    bool is_active_affected_product_count_Valid() const;

    qint32 getAffectedChannelCount() const;
    void setAffectedChannelCount(const qint32 &affected_channel_count);
    bool is_affected_channel_count_Set() const;
    bool is_affected_channel_count_Valid() const;

    qint32 getAffectedProductCount() const;
    void setAffectedProductCount(const qint32 &affected_product_count);
    bool is_affected_product_count_Set() const;
    bool is_affected_product_count_Valid() const;

    QDateTime getCompletedUtcDate() const;
    void setCompletedUtcDate(const QDateTime &completed_utc_date);
    bool is_completed_utc_date_Set() const;
    bool is_completed_utc_date_Valid() const;

    OAIRuleExecutionReportingErrorType getErrorType() const;
    void setErrorType(const OAIRuleExecutionReportingErrorType &error_type);
    bool is_error_type_Set() const;
    bool is_error_type_Valid() const;

    OAIRuleExecutionReportingExecutionSource getExecutionSource() const;
    void setExecutionSource(const OAIRuleExecutionReportingExecutionSource &execution_source);
    bool is_execution_source_Set() const;
    bool is_execution_source_Valid() const;

    OAIRuleExecutionReportingLinks getLinks() const;
    void setLinks(const OAIRuleExecutionReportingLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAIOptimisationActionName getOptimisationActionName() const;
    void setOptimisationActionName(const OAIOptimisationActionName &optimisation_action_name);
    bool is_optimisation_action_name_Set() const;
    bool is_optimisation_action_name_Valid() const;

    QString getReportUrl() const;
    void setReportUrl(const QString &report_url);
    bool is_report_url_Set() const;
    bool is_report_url_Valid() const;

    QString getRuleId() const;
    void setRuleId(const QString &rule_id);
    bool is_rule_id_Set() const;
    bool is_rule_id_Valid() const;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QDateTime getStartedUtcDate() const;
    void setStartedUtcDate(const QDateTime &started_utc_date);
    bool is_started_utc_date_Set() const;
    bool is_started_utc_date_Valid() const;

    OAIRuleExecutionReportingStatus getStatus() const;
    void setStatus(const OAIRuleExecutionReportingStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_affected_product_count;
    bool m_active_affected_product_count_isSet;
    bool m_active_affected_product_count_isValid;

    qint32 m_affected_channel_count;
    bool m_affected_channel_count_isSet;
    bool m_affected_channel_count_isValid;

    qint32 m_affected_product_count;
    bool m_affected_product_count_isSet;
    bool m_affected_product_count_isValid;

    QDateTime m_completed_utc_date;
    bool m_completed_utc_date_isSet;
    bool m_completed_utc_date_isValid;

    OAIRuleExecutionReportingErrorType m_error_type;
    bool m_error_type_isSet;
    bool m_error_type_isValid;

    OAIRuleExecutionReportingExecutionSource m_execution_source;
    bool m_execution_source_isSet;
    bool m_execution_source_isValid;

    OAIRuleExecutionReportingLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAIOptimisationActionName m_optimisation_action_name;
    bool m_optimisation_action_name_isSet;
    bool m_optimisation_action_name_isValid;

    QString m_report_url;
    bool m_report_url_isSet;
    bool m_report_url_isValid;

    QString m_rule_id;
    bool m_rule_id_isSet;
    bool m_rule_id_isValid;

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QDateTime m_started_utc_date;
    bool m_started_utc_date_isSet;
    bool m_started_utc_date_isValid;

    OAIRuleExecutionReportingStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRuleExecutionReporting)

#endif // OAIRuleExecutionReporting_H
