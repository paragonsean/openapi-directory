/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannelInfo_details.h
 *
 * 
 */

#ifndef OAIChannelInfo_details_H
#define OAIChannelInfo_details_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChannelInfo_details : public OAIObject {
public:
    OAIChannelInfo_details();
    OAIChannelInfo_details(QString json);
    ~OAIChannelInfo_details() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBusinessModel() const;
    void setBusinessModel(const QString &business_model);
    bool is_business_model_Set() const;
    bool is_business_model_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getChannelType() const;
    void setChannelType(const QString &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QString getCosts() const;
    void setCosts(const QString &costs);
    bool is_costs_Set() const;
    bool is_costs_Valid() const;

    QString getHomeUrl() const;
    void setHomeUrl(const QString &home_url);
    bool is_home_url_Set() const;
    bool is_home_url_Valid() const;

    QString getSubscriptionLink() const;
    void setSubscriptionLink(const QString &subscription_link);
    bool is_subscription_link_Set() const;
    bool is_subscription_link_Valid() const;

    QString getTrackingType() const;
    void setTrackingType(const QString &tracking_type);
    bool is_tracking_type_Set() const;
    bool is_tracking_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_business_model;
    bool m_business_model_isSet;
    bool m_business_model_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QString m_costs;
    bool m_costs_isSet;
    bool m_costs_isValid;

    QString m_home_url;
    bool m_home_url_isSet;
    bool m_home_url_isValid;

    QString m_subscription_link;
    bool m_subscription_link_isSet;
    bool m_subscription_link_isValid;

    QString m_tracking_type;
    bool m_tracking_type_isSet;
    bool m_tracking_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannelInfo_details)

#endif // OAIChannelInfo_details_H
