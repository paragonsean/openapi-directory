/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsImportationCatalogInfoApi_H
#define OAI_OAICatalogsImportationCatalogInfoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIChangeCustomColumnRequest.h"
#include "OAIConfigureCatalogColumnCatalogRequest.h"
#include "OAIDetectedCatalogColumnList.h"
#include "OAIImportationCustomColumnList.h"
#include "OAIMapBeezUPColumnRequest.h"
#include "OAIProductSample.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsImportationCatalogInfoApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsImportationCatalogInfoApi(const int timeOut = 0);
    ~OAICatalogsImportationCatalogInfoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_configure_catalog_column_catalog_request OAIConfigureCatalogColumnCatalogRequest [required]
    */
    virtual void importationConfigureCatalogColumn(const QString &store_id, const QString &execution_id, const QString &column_id, const OAIConfigureCatalogColumnCatalogRequest &oai_configure_catalog_column_catalog_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationDeleteCustomColumn(const QString &store_id, const QString &execution_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationGetCustomColumnExpression(const QString &store_id, const QString &execution_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationGetCustomColumns(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationGetDetectedCatalogColumns(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  product_sample_index qint32 [required]
    */
    virtual void importationGetProductSample(const QString &store_id, const QString &execution_id, const qint32 &product_sample_index);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  product_sample_index qint32 [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationGetProductSampleCustomColumnValue(const QString &store_id, const QString &execution_id, const qint32 &product_sample_index, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationIgnoreColumn(const QString &store_id, const QString &execution_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_map_beez_up_column_request OAIMapBeezUPColumnRequest [required]
    */
    virtual void importationMapCatalogColumn(const QString &store_id, const QString &execution_id, const QString &column_id, const OAIMapBeezUPColumnRequest &oai_map_beez_up_column_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_map_beez_up_column_request OAIMapBeezUPColumnRequest [required]
    */
    virtual void importationMapCustomColumn(const QString &store_id, const QString &execution_id, const QString &column_id, const OAIMapBeezUPColumnRequest &oai_map_beez_up_column_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationReattendColumn(const QString &store_id, const QString &execution_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_change_custom_column_request OAIChangeCustomColumnRequest [required]
    */
    virtual void importationSaveCustomColumn(const QString &store_id, const QString &execution_id, const QString &column_id, const OAIChangeCustomColumnRequest &oai_change_custom_column_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationUnmapCatalogColumn(const QString &store_id, const QString &execution_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void importationUnmapCustomColumn(const QString &store_id, const QString &execution_id, const QString &column_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void importationConfigureCatalogColumnCallback(OAIHttpRequestWorker *worker);
    void importationDeleteCustomColumnCallback(OAIHttpRequestWorker *worker);
    void importationGetCustomColumnExpressionCallback(OAIHttpRequestWorker *worker);
    void importationGetCustomColumnsCallback(OAIHttpRequestWorker *worker);
    void importationGetDetectedCatalogColumnsCallback(OAIHttpRequestWorker *worker);
    void importationGetProductSampleCallback(OAIHttpRequestWorker *worker);
    void importationGetProductSampleCustomColumnValueCallback(OAIHttpRequestWorker *worker);
    void importationIgnoreColumnCallback(OAIHttpRequestWorker *worker);
    void importationMapCatalogColumnCallback(OAIHttpRequestWorker *worker);
    void importationMapCustomColumnCallback(OAIHttpRequestWorker *worker);
    void importationReattendColumnCallback(OAIHttpRequestWorker *worker);
    void importationSaveCustomColumnCallback(OAIHttpRequestWorker *worker);
    void importationUnmapCatalogColumnCallback(OAIHttpRequestWorker *worker);
    void importationUnmapCustomColumnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void importationConfigureCatalogColumnSignal();
    void importationDeleteCustomColumnSignal();
    void importationGetCustomColumnExpressionSignal(QString summary);
    void importationGetCustomColumnsSignal(OAIImportationCustomColumnList summary);
    void importationGetDetectedCatalogColumnsSignal(OAIDetectedCatalogColumnList summary);
    void importationGetProductSampleSignal(OAIProductSample summary);
    void importationGetProductSampleCustomColumnValueSignal(QString summary);
    void importationIgnoreColumnSignal();
    void importationMapCatalogColumnSignal();
    void importationMapCustomColumnSignal();
    void importationReattendColumnSignal();
    void importationSaveCustomColumnSignal();
    void importationUnmapCatalogColumnSignal();
    void importationUnmapCustomColumnSignal();


    void importationConfigureCatalogColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationDeleteCustomColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationGetCustomColumnExpressionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void importationGetCustomColumnsSignalFull(OAIHttpRequestWorker *worker, OAIImportationCustomColumnList summary);
    void importationGetDetectedCatalogColumnsSignalFull(OAIHttpRequestWorker *worker, OAIDetectedCatalogColumnList summary);
    void importationGetProductSampleSignalFull(OAIHttpRequestWorker *worker, OAIProductSample summary);
    void importationGetProductSampleCustomColumnValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void importationIgnoreColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationMapCatalogColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationMapCustomColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationReattendColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationSaveCustomColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationUnmapCatalogColumnSignalFull(OAIHttpRequestWorker *worker);
    void importationUnmapCustomColumnSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use importationConfigureCatalogColumnSignalError() instead")
    void importationConfigureCatalogColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationConfigureCatalogColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationDeleteCustomColumnSignalError() instead")
    void importationDeleteCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationDeleteCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetCustomColumnExpressionSignalError() instead")
    void importationGetCustomColumnExpressionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetCustomColumnExpressionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetCustomColumnsSignalError() instead")
    void importationGetCustomColumnsSignalE(OAIImportationCustomColumnList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetCustomColumnsSignalError(OAIImportationCustomColumnList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetDetectedCatalogColumnsSignalError() instead")
    void importationGetDetectedCatalogColumnsSignalE(OAIDetectedCatalogColumnList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetDetectedCatalogColumnsSignalError(OAIDetectedCatalogColumnList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductSampleSignalError() instead")
    void importationGetProductSampleSignalE(OAIProductSample summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductSampleSignalError(OAIProductSample summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductSampleCustomColumnValueSignalError() instead")
    void importationGetProductSampleCustomColumnValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductSampleCustomColumnValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationIgnoreColumnSignalError() instead")
    void importationIgnoreColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationIgnoreColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationMapCatalogColumnSignalError() instead")
    void importationMapCatalogColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationMapCatalogColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationMapCustomColumnSignalError() instead")
    void importationMapCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationMapCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationReattendColumnSignalError() instead")
    void importationReattendColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationReattendColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationSaveCustomColumnSignalError() instead")
    void importationSaveCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationSaveCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationUnmapCatalogColumnSignalError() instead")
    void importationUnmapCatalogColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationUnmapCatalogColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationUnmapCustomColumnSignalError() instead")
    void importationUnmapCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationUnmapCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use importationConfigureCatalogColumnSignalErrorFull() instead")
    void importationConfigureCatalogColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationConfigureCatalogColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationDeleteCustomColumnSignalErrorFull() instead")
    void importationDeleteCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationDeleteCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetCustomColumnExpressionSignalErrorFull() instead")
    void importationGetCustomColumnExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetCustomColumnExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetCustomColumnsSignalErrorFull() instead")
    void importationGetCustomColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetCustomColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetDetectedCatalogColumnsSignalErrorFull() instead")
    void importationGetDetectedCatalogColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetDetectedCatalogColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductSampleSignalErrorFull() instead")
    void importationGetProductSampleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductSampleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductSampleCustomColumnValueSignalErrorFull() instead")
    void importationGetProductSampleCustomColumnValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductSampleCustomColumnValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationIgnoreColumnSignalErrorFull() instead")
    void importationIgnoreColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationIgnoreColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationMapCatalogColumnSignalErrorFull() instead")
    void importationMapCatalogColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationMapCatalogColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationMapCustomColumnSignalErrorFull() instead")
    void importationMapCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationMapCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationReattendColumnSignalErrorFull() instead")
    void importationReattendColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationReattendColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationSaveCustomColumnSignalErrorFull() instead")
    void importationSaveCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationSaveCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationUnmapCatalogColumnSignalErrorFull() instead")
    void importationUnmapCatalogColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationUnmapCatalogColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationUnmapCustomColumnSignalErrorFull() instead")
    void importationUnmapCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationUnmapCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
