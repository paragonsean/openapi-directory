/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStandardOffer.h
 *
 * 
 */

#ifndef OAIStandardOffer_H
#define OAIStandardOffer_H

#include <QJsonObject>

#include "OAIOfferFunctionality.h"
#include "OAIStandardOfferLinks.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOfferFunctionality;
class OAIStandardOfferLinks;

class OAIStandardOffer : public OAIObject {
public:
    OAIStandardOffer();
    OAIStandardOffer(QString json);
    ~OAIStandardOffer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAdditionalClickPrice() const;
    void setAdditionalClickPrice(const double &additional_click_price);
    bool is_additional_click_price_Set() const;
    bool is_additional_click_price_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    QList<OAIOfferFunctionality> getFunctionalities() const;
    void setFunctionalities(const QList<OAIOfferFunctionality> &functionalities);
    bool is_functionalities_Set() const;
    bool is_functionalities_Valid() const;

    qint32 getIncludedClick() const;
    void setIncludedClick(const qint32 &included_click);
    bool is_included_click_Set() const;
    bool is_included_click_Valid() const;

    bool isIsMostPopular() const;
    void setIsMostPopular(const bool &is_most_popular);
    bool is_is_most_popular_Set() const;
    bool is_is_most_popular_Valid() const;

    bool isIsOldOffer() const;
    void setIsOldOffer(const bool &is_old_offer);
    bool is_is_old_offer_Set() const;
    bool is_is_old_offer_Valid() const;

    OAIStandardOfferLinks getLinks() const;
    void setLinks(const OAIStandardOfferLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOfferId() const;
    void setOfferId(const qint32 &offer_id);
    bool is_offer_id_Set() const;
    bool is_offer_id_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_additional_click_price;
    bool m_additional_click_price_isSet;
    bool m_additional_click_price_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    QList<OAIOfferFunctionality> m_functionalities;
    bool m_functionalities_isSet;
    bool m_functionalities_isValid;

    qint32 m_included_click;
    bool m_included_click_isSet;
    bool m_included_click_isValid;

    bool m_is_most_popular;
    bool m_is_most_popular_isSet;
    bool m_is_most_popular_isValid;

    bool m_is_old_offer;
    bool m_is_old_offer_isSet;
    bool m_is_old_offer_isValid;

    OAIStandardOfferLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_offer_id;
    bool m_offer_id_isSet;
    bool m_offer_id_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStandardOffer)

#endif // OAIStandardOffer_H
