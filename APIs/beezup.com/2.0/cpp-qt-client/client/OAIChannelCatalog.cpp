/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelCatalog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelCatalog::OAIChannelCatalog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelCatalog::OAIChannelCatalog() {
    this->initializeModel();
}

OAIChannelCatalog::~OAIChannelCatalog() {}

void OAIChannelCatalog::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_image_url_isSet = false;
    m_channel_image_url_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_category_mapping_settings_isSet = false;
    m_category_mapping_settings_isValid = false;

    m_channel_catalog_id_isSet = false;
    m_channel_catalog_id_isValid = false;

    m_channel_category_settings_isSet = false;
    m_channel_category_settings_isValid = false;

    m_channel_cost_settings_isSet = false;
    m_channel_cost_settings_isValid = false;

    m_column_mappings_isSet = false;
    m_column_mappings_isValid = false;

    m_cost_settings_isSet = false;
    m_cost_settings_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_exclusion_filters_isSet = false;
    m_exclusion_filters_isValid = false;

    m_export_url_isSet = false;
    m_export_url_isValid = false;

    m_general_settings_isSet = false;
    m_general_settings_isValid = false;

    m_is_marketplace_isSet = false;
    m_is_marketplace_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIChannelCatalog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelCatalog::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_image_url_isValid = ::OpenAPI::fromJsonValue(m_channel_image_url, json[QString("channelImageUrl")]);
    m_channel_image_url_isSet = !json[QString("channelImageUrl")].isNull() && m_channel_image_url_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("channelName")]);
    m_channel_name_isSet = !json[QString("channelName")].isNull() && m_channel_name_isValid;

    m_category_mapping_settings_isValid = ::OpenAPI::fromJsonValue(m_category_mapping_settings, json[QString("categoryMappingSettings")]);
    m_category_mapping_settings_isSet = !json[QString("categoryMappingSettings")].isNull() && m_category_mapping_settings_isValid;

    m_channel_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_channel_catalog_id, json[QString("channelCatalogId")]);
    m_channel_catalog_id_isSet = !json[QString("channelCatalogId")].isNull() && m_channel_catalog_id_isValid;

    m_channel_category_settings_isValid = ::OpenAPI::fromJsonValue(m_channel_category_settings, json[QString("channelCategorySettings")]);
    m_channel_category_settings_isSet = !json[QString("channelCategorySettings")].isNull() && m_channel_category_settings_isValid;

    m_channel_cost_settings_isValid = ::OpenAPI::fromJsonValue(m_channel_cost_settings, json[QString("channelCostSettings")]);
    m_channel_cost_settings_isSet = !json[QString("channelCostSettings")].isNull() && m_channel_cost_settings_isValid;

    m_column_mappings_isValid = ::OpenAPI::fromJsonValue(m_column_mappings, json[QString("columnMappings")]);
    m_column_mappings_isSet = !json[QString("columnMappings")].isNull() && m_column_mappings_isValid;

    m_cost_settings_isValid = ::OpenAPI::fromJsonValue(m_cost_settings, json[QString("costSettings")]);
    m_cost_settings_isSet = !json[QString("costSettings")].isNull() && m_cost_settings_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_exclusion_filters_isValid = ::OpenAPI::fromJsonValue(m_exclusion_filters, json[QString("exclusionFilters")]);
    m_exclusion_filters_isSet = !json[QString("exclusionFilters")].isNull() && m_exclusion_filters_isValid;

    m_export_url_isValid = ::OpenAPI::fromJsonValue(m_export_url, json[QString("exportUrl")]);
    m_export_url_isSet = !json[QString("exportUrl")].isNull() && m_export_url_isValid;

    m_general_settings_isValid = ::OpenAPI::fromJsonValue(m_general_settings, json[QString("generalSettings")]);
    m_general_settings_isSet = !json[QString("generalSettings")].isNull() && m_general_settings_isValid;

    m_is_marketplace_isValid = ::OpenAPI::fromJsonValue(m_is_marketplace, json[QString("isMarketplace")]);
    m_is_marketplace_isSet = !json[QString("isMarketplace")].isNull() && m_is_marketplace_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIChannelCatalog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelCatalog::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_image_url_isSet) {
        obj.insert(QString("channelImageUrl"), ::OpenAPI::toJsonValue(m_channel_image_url));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("channelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_category_mapping_settings.isSet()) {
        obj.insert(QString("categoryMappingSettings"), ::OpenAPI::toJsonValue(m_category_mapping_settings));
    }
    if (m_channel_catalog_id_isSet) {
        obj.insert(QString("channelCatalogId"), ::OpenAPI::toJsonValue(m_channel_catalog_id));
    }
    if (m_channel_category_settings.isSet()) {
        obj.insert(QString("channelCategorySettings"), ::OpenAPI::toJsonValue(m_channel_category_settings));
    }
    if (m_channel_cost_settings.isSet()) {
        obj.insert(QString("channelCostSettings"), ::OpenAPI::toJsonValue(m_channel_cost_settings));
    }
    if (m_column_mappings.size() > 0) {
        obj.insert(QString("columnMappings"), ::OpenAPI::toJsonValue(m_column_mappings));
    }
    if (m_cost_settings.isSet()) {
        obj.insert(QString("costSettings"), ::OpenAPI::toJsonValue(m_cost_settings));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_exclusion_filters.size() > 0) {
        obj.insert(QString("exclusionFilters"), ::OpenAPI::toJsonValue(m_exclusion_filters));
    }
    if (m_export_url_isSet) {
        obj.insert(QString("exportUrl"), ::OpenAPI::toJsonValue(m_export_url));
    }
    if (m_general_settings.isSet()) {
        obj.insert(QString("generalSettings"), ::OpenAPI::toJsonValue(m_general_settings));
    }
    if (m_is_marketplace_isSet) {
        obj.insert(QString("isMarketplace"), ::OpenAPI::toJsonValue(m_is_marketplace));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIChannelCatalog::getChannelId() const {
    return m_channel_id;
}
void OAIChannelCatalog::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannelCatalog::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannelCatalog::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIChannelCatalog::getChannelImageUrl() const {
    return m_channel_image_url;
}
void OAIChannelCatalog::setChannelImageUrl(const QString &channel_image_url) {
    m_channel_image_url = channel_image_url;
    m_channel_image_url_isSet = true;
}

bool OAIChannelCatalog::is_channel_image_url_Set() const{
    return m_channel_image_url_isSet;
}

bool OAIChannelCatalog::is_channel_image_url_Valid() const{
    return m_channel_image_url_isValid;
}

QString OAIChannelCatalog::getChannelName() const {
    return m_channel_name;
}
void OAIChannelCatalog::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIChannelCatalog::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIChannelCatalog::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

OAIChannelCatalogCategoryMappingSettings OAIChannelCatalog::getCategoryMappingSettings() const {
    return m_category_mapping_settings;
}
void OAIChannelCatalog::setCategoryMappingSettings(const OAIChannelCatalogCategoryMappingSettings &category_mapping_settings) {
    m_category_mapping_settings = category_mapping_settings;
    m_category_mapping_settings_isSet = true;
}

bool OAIChannelCatalog::is_category_mapping_settings_Set() const{
    return m_category_mapping_settings_isSet;
}

bool OAIChannelCatalog::is_category_mapping_settings_Valid() const{
    return m_category_mapping_settings_isValid;
}

QString OAIChannelCatalog::getChannelCatalogId() const {
    return m_channel_catalog_id;
}
void OAIChannelCatalog::setChannelCatalogId(const QString &channel_catalog_id) {
    m_channel_catalog_id = channel_catalog_id;
    m_channel_catalog_id_isSet = true;
}

bool OAIChannelCatalog::is_channel_catalog_id_Set() const{
    return m_channel_catalog_id_isSet;
}

bool OAIChannelCatalog::is_channel_catalog_id_Valid() const{
    return m_channel_catalog_id_isValid;
}

OAIChannelCategorySettings OAIChannelCatalog::getChannelCategorySettings() const {
    return m_channel_category_settings;
}
void OAIChannelCatalog::setChannelCategorySettings(const OAIChannelCategorySettings &channel_category_settings) {
    m_channel_category_settings = channel_category_settings;
    m_channel_category_settings_isSet = true;
}

bool OAIChannelCatalog::is_channel_category_settings_Set() const{
    return m_channel_category_settings_isSet;
}

bool OAIChannelCatalog::is_channel_category_settings_Valid() const{
    return m_channel_category_settings_isValid;
}

OAIChannelCostSettings OAIChannelCatalog::getChannelCostSettings() const {
    return m_channel_cost_settings;
}
void OAIChannelCatalog::setChannelCostSettings(const OAIChannelCostSettings &channel_cost_settings) {
    m_channel_cost_settings = channel_cost_settings;
    m_channel_cost_settings_isSet = true;
}

bool OAIChannelCatalog::is_channel_cost_settings_Set() const{
    return m_channel_cost_settings_isSet;
}

bool OAIChannelCatalog::is_channel_cost_settings_Valid() const{
    return m_channel_cost_settings_isValid;
}

QList<OAIChannelCatalogColumnMappingWithName> OAIChannelCatalog::getColumnMappings() const {
    return m_column_mappings;
}
void OAIChannelCatalog::setColumnMappings(const QList<OAIChannelCatalogColumnMappingWithName> &column_mappings) {
    m_column_mappings = column_mappings;
    m_column_mappings_isSet = true;
}

bool OAIChannelCatalog::is_column_mappings_Set() const{
    return m_column_mappings_isSet;
}

bool OAIChannelCatalog::is_column_mappings_Valid() const{
    return m_column_mappings_isValid;
}

OAICostSettings OAIChannelCatalog::getCostSettings() const {
    return m_cost_settings;
}
void OAIChannelCatalog::setCostSettings(const OAICostSettings &cost_settings) {
    m_cost_settings = cost_settings;
    m_cost_settings_isSet = true;
}

bool OAIChannelCatalog::is_cost_settings_Set() const{
    return m_cost_settings_isSet;
}

bool OAIChannelCatalog::is_cost_settings_Valid() const{
    return m_cost_settings_isValid;
}

bool OAIChannelCatalog::isEnabled() const {
    return m_enabled;
}
void OAIChannelCatalog::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIChannelCatalog::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIChannelCatalog::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIExclusionFilter> OAIChannelCatalog::getExclusionFilters() const {
    return m_exclusion_filters;
}
void OAIChannelCatalog::setExclusionFilters(const QList<OAIExclusionFilter> &exclusion_filters) {
    m_exclusion_filters = exclusion_filters;
    m_exclusion_filters_isSet = true;
}

bool OAIChannelCatalog::is_exclusion_filters_Set() const{
    return m_exclusion_filters_isSet;
}

bool OAIChannelCatalog::is_exclusion_filters_Valid() const{
    return m_exclusion_filters_isValid;
}

QString OAIChannelCatalog::getExportUrl() const {
    return m_export_url;
}
void OAIChannelCatalog::setExportUrl(const QString &export_url) {
    m_export_url = export_url;
    m_export_url_isSet = true;
}

bool OAIChannelCatalog::is_export_url_Set() const{
    return m_export_url_isSet;
}

bool OAIChannelCatalog::is_export_url_Valid() const{
    return m_export_url_isValid;
}

OAIGeneralSettings OAIChannelCatalog::getGeneralSettings() const {
    return m_general_settings;
}
void OAIChannelCatalog::setGeneralSettings(const OAIGeneralSettings &general_settings) {
    m_general_settings = general_settings;
    m_general_settings_isSet = true;
}

bool OAIChannelCatalog::is_general_settings_Set() const{
    return m_general_settings_isSet;
}

bool OAIChannelCatalog::is_general_settings_Valid() const{
    return m_general_settings_isValid;
}

bool OAIChannelCatalog::isIsMarketplace() const {
    return m_is_marketplace;
}
void OAIChannelCatalog::setIsMarketplace(const bool &is_marketplace) {
    m_is_marketplace = is_marketplace;
    m_is_marketplace_isSet = true;
}

bool OAIChannelCatalog::is_is_marketplace_Set() const{
    return m_is_marketplace_isSet;
}

bool OAIChannelCatalog::is_is_marketplace_Valid() const{
    return m_is_marketplace_isValid;
}

OAIChannelCatalogLinks OAIChannelCatalog::getLinks() const {
    return m_links;
}
void OAIChannelCatalog::setLinks(const OAIChannelCatalogLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIChannelCatalog::is_links_Set() const{
    return m_links_isSet;
}

bool OAIChannelCatalog::is_links_Valid() const{
    return m_links_isValid;
}

OAIChannelCatalogState OAIChannelCatalog::getState() const {
    return m_state;
}
void OAIChannelCatalog::setState(const OAIChannelCatalogState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIChannelCatalog::is_state_Set() const{
    return m_state_isSet;
}

bool OAIChannelCatalog::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIChannelCatalog::getStoreId() const {
    return m_store_id;
}
void OAIChannelCatalog::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIChannelCatalog::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIChannelCatalog::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QList<QString> OAIChannelCatalog::getTypes() const {
    return m_types;
}
void OAIChannelCatalog::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIChannelCatalog::is_types_Set() const{
    return m_types_isSet;
}

bool OAIChannelCatalog::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIChannelCatalog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_mapping_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_category_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_cost_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_marketplace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelCatalog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_channel_image_url_isValid && m_channel_name_isValid && m_channel_catalog_id_isValid && m_channel_category_settings_isValid && m_channel_cost_settings_isValid && m_enabled_isValid && m_general_settings_isValid && m_is_marketplace_isValid && m_links_isValid && m_state_isValid && m_store_id_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
