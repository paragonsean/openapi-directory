/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionPushReporting.h
 *
 * The subscription push reporting
 */

#ifndef OAISubscriptionPushReporting_H
#define OAISubscriptionPushReporting_H

#include <QJsonObject>

#include "OAIErrorResponseMessage.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorResponseMessage;

class OAISubscriptionPushReporting : public OAIObject {
public:
    OAISubscriptionPushReporting();
    OAISubscriptionPushReporting(QString json);
    ~OAISubscriptionPushReporting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    OAIErrorResponseMessage getErrorMessage() const;
    void setErrorMessage(const OAIErrorResponseMessage &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    qint32 getHttpStatus() const;
    void setHttpStatus(const qint32 &http_status);
    bool is_http_status_Set() const;
    bool is_http_status_Valid() const;

    QDateTime getLastOrderModificationUtcDate() const;
    void setLastOrderModificationUtcDate(const QDateTime &last_order_modification_utc_date);
    bool is_last_order_modification_utc_date_Set() const;
    bool is_last_order_modification_utc_date_Valid() const;

    qint32 getMaxRetryCount() const;
    void setMaxRetryCount(const qint32 &max_retry_count);
    bool is_max_retry_count_Set() const;
    bool is_max_retry_count_Valid() const;

    QDateTime getNextScheduledRetryUtcDate() const;
    void setNextScheduledRetryUtcDate(const QDateTime &next_scheduled_retry_utc_date);
    bool is_next_scheduled_retry_utc_date_Set() const;
    bool is_next_scheduled_retry_utc_date_Valid() const;

    qint32 getOrderCount() const;
    void setOrderCount(const qint32 &order_count);
    bool is_order_count_Set() const;
    bool is_order_count_Valid() const;

    QString getRequestUri() const;
    void setRequestUri(const QString &request_uri);
    bool is_request_uri_Set() const;
    bool is_request_uri_Valid() const;

    QString getResponseUri() const;
    void setResponseUri(const QString &response_uri);
    bool is_response_uri_Set() const;
    bool is_response_uri_Valid() const;

    qint32 getRetryCount() const;
    void setRetryCount(const qint32 &retry_count);
    bool is_retry_count_Set() const;
    bool is_retry_count_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    bool isSucceed() const;
    void setSucceed(const bool &succeed);
    bool is_succeed_Set() const;
    bool is_succeed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    OAIErrorResponseMessage m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    qint32 m_http_status;
    bool m_http_status_isSet;
    bool m_http_status_isValid;

    QDateTime m_last_order_modification_utc_date;
    bool m_last_order_modification_utc_date_isSet;
    bool m_last_order_modification_utc_date_isValid;

    qint32 m_max_retry_count;
    bool m_max_retry_count_isSet;
    bool m_max_retry_count_isValid;

    QDateTime m_next_scheduled_retry_utc_date;
    bool m_next_scheduled_retry_utc_date_isSet;
    bool m_next_scheduled_retry_utc_date_isValid;

    qint32 m_order_count;
    bool m_order_count_isSet;
    bool m_order_count_isValid;

    QString m_request_uri;
    bool m_request_uri_isSet;
    bool m_request_uri_isValid;

    QString m_response_uri;
    bool m_response_uri_isSet;
    bool m_response_uri_isValid;

    qint32 m_retry_count;
    bool m_retry_count_isSet;
    bool m_retry_count_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    bool m_succeed;
    bool m_succeed_isSet;
    bool m_succeed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionPushReporting)

#endif // OAISubscriptionPushReporting_H
