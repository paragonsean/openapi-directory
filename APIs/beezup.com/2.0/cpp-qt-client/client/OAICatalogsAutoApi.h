/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsAutoApi_H
#define OAI_OAICatalogsAutoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoImportConfiguration.h"
#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIConfigureAutoImportIntervalRequest.h"
#include "OAILinks_Importation_GetImportationMonitoringLink.h"
#include "OAIScheduleAutoImportRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsAutoApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsAutoApi(const int timeOut = 0);
    ~OAICatalogsAutoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_configure_auto_import_interval_request OAIConfigureAutoImportIntervalRequest [required]
    */
    virtual void autoConfigureAutoImportInterval(const QString &store_id, const OAIConfigureAutoImportIntervalRequest &oai_configure_auto_import_interval_request);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void autoDeleteAutoImport(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void autoGetAutoImportConfiguration(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void autoPauseAutoImport(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void autoResumeAutoImport(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_schedule_auto_import_request OAIScheduleAutoImportRequest [required]
    */
    virtual void autoScheduleAutoImport(const QString &store_id, const OAIScheduleAutoImportRequest &oai_schedule_auto_import_request);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void autoStartAutoImport(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void importationActivateAutoImport(const QString &store_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autoConfigureAutoImportIntervalCallback(OAIHttpRequestWorker *worker);
    void autoDeleteAutoImportCallback(OAIHttpRequestWorker *worker);
    void autoGetAutoImportConfigurationCallback(OAIHttpRequestWorker *worker);
    void autoPauseAutoImportCallback(OAIHttpRequestWorker *worker);
    void autoResumeAutoImportCallback(OAIHttpRequestWorker *worker);
    void autoScheduleAutoImportCallback(OAIHttpRequestWorker *worker);
    void autoStartAutoImportCallback(OAIHttpRequestWorker *worker);
    void importationActivateAutoImportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autoConfigureAutoImportIntervalSignal();
    void autoDeleteAutoImportSignal();
    void autoGetAutoImportConfigurationSignal(OAIAutoImportConfiguration summary);
    void autoPauseAutoImportSignal();
    void autoResumeAutoImportSignal();
    void autoScheduleAutoImportSignal();
    void autoStartAutoImportSignal(OAILinks_Importation_GetImportationMonitoringLink summary);
    void importationActivateAutoImportSignal();


    void autoConfigureAutoImportIntervalSignalFull(OAIHttpRequestWorker *worker);
    void autoDeleteAutoImportSignalFull(OAIHttpRequestWorker *worker);
    void autoGetAutoImportConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIAutoImportConfiguration summary);
    void autoPauseAutoImportSignalFull(OAIHttpRequestWorker *worker);
    void autoResumeAutoImportSignalFull(OAIHttpRequestWorker *worker);
    void autoScheduleAutoImportSignalFull(OAIHttpRequestWorker *worker);
    void autoStartAutoImportSignalFull(OAIHttpRequestWorker *worker, OAILinks_Importation_GetImportationMonitoringLink summary);
    void importationActivateAutoImportSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use autoConfigureAutoImportIntervalSignalError() instead")
    void autoConfigureAutoImportIntervalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoConfigureAutoImportIntervalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoDeleteAutoImportSignalError() instead")
    void autoDeleteAutoImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoDeleteAutoImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoGetAutoImportConfigurationSignalError() instead")
    void autoGetAutoImportConfigurationSignalE(OAIAutoImportConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoGetAutoImportConfigurationSignalError(OAIAutoImportConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoPauseAutoImportSignalError() instead")
    void autoPauseAutoImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoPauseAutoImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoResumeAutoImportSignalError() instead")
    void autoResumeAutoImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoResumeAutoImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoScheduleAutoImportSignalError() instead")
    void autoScheduleAutoImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoScheduleAutoImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoStartAutoImportSignalError() instead")
    void autoStartAutoImportSignalE(OAILinks_Importation_GetImportationMonitoringLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoStartAutoImportSignalError(OAILinks_Importation_GetImportationMonitoringLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationActivateAutoImportSignalError() instead")
    void importationActivateAutoImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationActivateAutoImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autoConfigureAutoImportIntervalSignalErrorFull() instead")
    void autoConfigureAutoImportIntervalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoConfigureAutoImportIntervalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoDeleteAutoImportSignalErrorFull() instead")
    void autoDeleteAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoDeleteAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoGetAutoImportConfigurationSignalErrorFull() instead")
    void autoGetAutoImportConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoGetAutoImportConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoPauseAutoImportSignalErrorFull() instead")
    void autoPauseAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoPauseAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoResumeAutoImportSignalErrorFull() instead")
    void autoResumeAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoResumeAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoScheduleAutoImportSignalErrorFull() instead")
    void autoScheduleAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoScheduleAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoStartAutoImportSignalErrorFull() instead")
    void autoStartAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoStartAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationActivateAutoImportSignalErrorFull() instead")
    void importationActivateAutoImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationActivateAutoImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
