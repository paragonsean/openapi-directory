/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOMInvoiceAPISettingsApi_H
#define OAI_OAIOMInvoiceAPISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIErrorResponseMessage.h"
#include "OAIGetOrderInvoiceDesignPreviewResponse.h"
#include "OAIGetOrderInvoiceGeneralSettingsResponse.h"
#include "OAIOrderInvoiceDesignSettings.h"
#include "OAIOrderInvoiceGeneralSettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOMInvoiceAPISettingsApi : public QObject {
    Q_OBJECT

public:
    OAIOMInvoiceAPISettingsApi(const int timeOut = 0);
    ~OAIOMInvoiceAPISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getOrderInvoiceDesignSettings();

    /**
    * @param[in]  accept_encoding QList<QString> [required]
    * @param[in]  oai_order_invoice_design_settings OAIOrderInvoiceDesignSettings [required]
    */
    virtual void getOrderInvoiceDesignSettingsPreview(const QList<QString> &accept_encoding, const OAIOrderInvoiceDesignSettings &oai_order_invoice_design_settings);


    virtual void getOrderInvoiceGeneralSettings();

    /**
    * @param[in]  oai_order_invoice_design_settings OAIOrderInvoiceDesignSettings [required]
    */
    virtual void saveOrderInvoiceDesignSettings(const OAIOrderInvoiceDesignSettings &oai_order_invoice_design_settings);

    /**
    * @param[in]  oai_order_invoice_general_settings OAIOrderInvoiceGeneralSettings [required]
    */
    virtual void saveOrderInvoiceGeneralSettings(const OAIOrderInvoiceGeneralSettings &oai_order_invoice_general_settings);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOrderInvoiceDesignSettingsCallback(OAIHttpRequestWorker *worker);
    void getOrderInvoiceDesignSettingsPreviewCallback(OAIHttpRequestWorker *worker);
    void getOrderInvoiceGeneralSettingsCallback(OAIHttpRequestWorker *worker);
    void saveOrderInvoiceDesignSettingsCallback(OAIHttpRequestWorker *worker);
    void saveOrderInvoiceGeneralSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOrderInvoiceDesignSettingsSignal(OAIOrderInvoiceDesignSettings summary);
    void getOrderInvoiceDesignSettingsPreviewSignal(OAIGetOrderInvoiceDesignPreviewResponse summary);
    void getOrderInvoiceGeneralSettingsSignal(OAIGetOrderInvoiceGeneralSettingsResponse summary);
    void saveOrderInvoiceDesignSettingsSignal();
    void saveOrderInvoiceGeneralSettingsSignal();


    void getOrderInvoiceDesignSettingsSignalFull(OAIHttpRequestWorker *worker, OAIOrderInvoiceDesignSettings summary);
    void getOrderInvoiceDesignSettingsPreviewSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderInvoiceDesignPreviewResponse summary);
    void getOrderInvoiceGeneralSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetOrderInvoiceGeneralSettingsResponse summary);
    void saveOrderInvoiceDesignSettingsSignalFull(OAIHttpRequestWorker *worker);
    void saveOrderInvoiceGeneralSettingsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getOrderInvoiceDesignSettingsSignalError() instead")
    void getOrderInvoiceDesignSettingsSignalE(OAIOrderInvoiceDesignSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceDesignSettingsSignalError(OAIOrderInvoiceDesignSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoiceDesignSettingsPreviewSignalError() instead")
    void getOrderInvoiceDesignSettingsPreviewSignalE(OAIGetOrderInvoiceDesignPreviewResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceDesignSettingsPreviewSignalError(OAIGetOrderInvoiceDesignPreviewResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoiceGeneralSettingsSignalError() instead")
    void getOrderInvoiceGeneralSettingsSignalE(OAIGetOrderInvoiceGeneralSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceGeneralSettingsSignalError(OAIGetOrderInvoiceGeneralSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveOrderInvoiceDesignSettingsSignalError() instead")
    void saveOrderInvoiceDesignSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveOrderInvoiceDesignSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveOrderInvoiceGeneralSettingsSignalError() instead")
    void saveOrderInvoiceGeneralSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveOrderInvoiceGeneralSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOrderInvoiceDesignSettingsSignalErrorFull() instead")
    void getOrderInvoiceDesignSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceDesignSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoiceDesignSettingsPreviewSignalErrorFull() instead")
    void getOrderInvoiceDesignSettingsPreviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceDesignSettingsPreviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoiceGeneralSettingsSignalErrorFull() instead")
    void getOrderInvoiceGeneralSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoiceGeneralSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveOrderInvoiceDesignSettingsSignalErrorFull() instead")
    void saveOrderInvoiceDesignSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveOrderInvoiceDesignSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveOrderInvoiceGeneralSettingsSignalErrorFull() instead")
    void saveOrderInvoiceGeneralSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveOrderInvoiceGeneralSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
