/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelCatalogMarketplaceIntegerProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelCatalogMarketplaceIntegerProperty::OAIChannelCatalogMarketplaceIntegerProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelCatalogMarketplaceIntegerProperty::OAIChannelCatalogMarketplaceIntegerProperty() {
    this->initializeModel();
}

OAIChannelCatalogMarketplaceIntegerProperty::~OAIChannelCatalogMarketplaceIntegerProperty() {}

void OAIChannelCatalogMarketplaceIntegerProperty::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_discriminator_type_isSet = false;
    m_discriminator_type_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_lov_link_isSet = false;
    m_lov_link_isValid = false;

    m_lov_required_isSet = false;
    m_lov_required_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_min_items_isSet = false;
    m_min_items_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offer_id_required_isSet = false;
    m_offer_id_required_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;
}

void OAIChannelCatalogMarketplaceIntegerProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelCatalogMarketplaceIntegerProperty::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discriminator_type_isValid = ::OpenAPI::fromJsonValue(m_discriminator_type, json[QString("discriminatorType")]);
    m_discriminator_type_isSet = !json[QString("discriminatorType")].isNull() && m_discriminator_type_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_lov_link_isValid = ::OpenAPI::fromJsonValue(m_lov_link, json[QString("lovLink")]);
    m_lov_link_isSet = !json[QString("lovLink")].isNull() && m_lov_link_isValid;

    m_lov_required_isValid = ::OpenAPI::fromJsonValue(m_lov_required, json[QString("lovRequired")]);
    m_lov_required_isSet = !json[QString("lovRequired")].isNull() && m_lov_required_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("maxItems")]);
    m_max_items_isSet = !json[QString("maxItems")].isNull() && m_max_items_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_min_items_isValid = ::OpenAPI::fromJsonValue(m_min_items, json[QString("minItems")]);
    m_min_items_isSet = !json[QString("minItems")].isNull() && m_min_items_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("minLength")]);
    m_min_length_isSet = !json[QString("minLength")].isNull() && m_min_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offer_id_required_isValid = ::OpenAPI::fromJsonValue(m_offer_id_required, json[QString("offerIdRequired")]);
    m_offer_id_required_isSet = !json[QString("offerIdRequired")].isNull() && m_offer_id_required_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;
}

QString OAIChannelCatalogMarketplaceIntegerProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelCatalogMarketplaceIntegerProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discriminator_type.isSet()) {
        obj.insert(QString("discriminatorType"), ::OpenAPI::toJsonValue(m_discriminator_type));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_lov_link.isSet()) {
        obj.insert(QString("lovLink"), ::OpenAPI::toJsonValue(m_lov_link));
    }
    if (m_lov_required_isSet) {
        obj.insert(QString("lovRequired"), ::OpenAPI::toJsonValue(m_lov_required));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("maxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_min_items_isSet) {
        obj.insert(QString("minItems"), ::OpenAPI::toJsonValue(m_min_items));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("minLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offer_id_required_isSet) {
        obj.insert(QString("offerIdRequired"), ::OpenAPI::toJsonValue(m_offer_id_required));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_r_default.size() > 0) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    return obj;
}

QString OAIChannelCatalogMarketplaceIntegerProperty::getDescription() const {
    return m_description;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_description_Valid() const{
    return m_description_isValid;
}

OAIChannelCatalogMarketplacePropertyDiscriminatorType OAIChannelCatalogMarketplaceIntegerProperty::getDiscriminatorType() const {
    return m_discriminator_type;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setDiscriminatorType(const OAIChannelCatalogMarketplacePropertyDiscriminatorType &discriminator_type) {
    m_discriminator_type = discriminator_type;
    m_discriminator_type_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_discriminator_type_Set() const{
    return m_discriminator_type_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_discriminator_type_Valid() const{
    return m_discriminator_type_isValid;
}

OAIBeezUP_Common_InfoSummaries OAIChannelCatalogMarketplaceIntegerProperty::getInfo() const {
    return m_info;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setInfo(const OAIBeezUP_Common_InfoSummaries &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_info_Set() const{
    return m_info_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_info_Valid() const{
    return m_info_isValid;
}

OAIBeezUP_Common_LOVLink3 OAIChannelCatalogMarketplaceIntegerProperty::getLovLink() const {
    return m_lov_link;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setLovLink(const OAIBeezUP_Common_LOVLink3 &lov_link) {
    m_lov_link = lov_link;
    m_lov_link_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_lov_link_Set() const{
    return m_lov_link_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_lov_link_Valid() const{
    return m_lov_link_isValid;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isLovRequired() const {
    return m_lov_required;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setLovRequired(const bool &lov_required) {
    m_lov_required = lov_required;
    m_lov_required_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_lov_required_Set() const{
    return m_lov_required_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_lov_required_Valid() const{
    return m_lov_required_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getMaxItems() const {
    return m_max_items;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_max_items_Valid() const{
    return m_max_items_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getMaxLength() const {
    return m_max_length;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_max_length_Valid() const{
    return m_max_length_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getMinItems() const {
    return m_min_items;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setMinItems(const qint32 &min_items) {
    m_min_items = min_items;
    m_min_items_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_min_items_Set() const{
    return m_min_items_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_min_items_Valid() const{
    return m_min_items_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getMinLength() const {
    return m_min_length;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_min_length_Valid() const{
    return m_min_length_isValid;
}

QString OAIChannelCatalogMarketplaceIntegerProperty::getName() const {
    return m_name;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getOfferIdRequired() const {
    return m_offer_id_required;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setOfferIdRequired(const qint32 &offer_id_required) {
    m_offer_id_required = offer_id_required;
    m_offer_id_required_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_offer_id_required_Set() const{
    return m_offer_id_required_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_offer_id_required_Valid() const{
    return m_offer_id_required_isValid;
}

QString OAIChannelCatalogMarketplaceIntegerProperty::getPattern() const {
    return m_pattern;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_pattern_Valid() const{
    return m_pattern_isValid;
}

qint32 OAIChannelCatalogMarketplaceIntegerProperty::getPosition() const {
    return m_position;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_position_Set() const{
    return m_position_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isReadOnly() const {
    return m_read_only;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isRequired() const {
    return m_required;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_required_Set() const{
    return m_required_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_required_Valid() const{
    return m_required_isValid;
}

OAIType OAIChannelCatalogMarketplaceIntegerProperty::getType() const {
    return m_type;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isVisible() const {
    return m_visible;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_visible_Valid() const{
    return m_visible_isValid;
}

QList<qint32> OAIChannelCatalogMarketplaceIntegerProperty::getRDefault() const {
    return m_r_default;
}
void OAIChannelCatalogMarketplaceIntegerProperty::setRDefault(const QList<qint32> &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::is_r_default_Valid() const{
    return m_r_default_isValid;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discriminator_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lov_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lov_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelCatalogMarketplaceIntegerProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discriminator_type_isValid && m_name_isValid && m_position_isValid && m_read_only_isValid && m_required_isValid && m_type_isValid && m_visible_isValid && true;
}

} // namespace OpenAPI
