/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublicationFeedReporting.h
 *
 * Publication feed reporting
 */

#ifndef OAIPublicationFeedReporting_H
#define OAIPublicationFeedReporting_H

#include <QJsonObject>

#include "OAIFeedType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPublicationFeedReporting : public OAIObject {
public:
    OAIPublicationFeedReporting();
    OAIPublicationFeedReporting(QString json);
    ~OAIPublicationFeedReporting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCompleted() const;
    void setCompleted(const bool &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    QDateTime getEndUtcDate() const;
    void setEndUtcDate(const QDateTime &end_utc_date);
    bool is_end_utc_date_Set() const;
    bool is_end_utc_date_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    qint32 getExportedProducts() const;
    void setExportedProducts(const qint32 &exported_products);
    bool is_exported_products_Set() const;
    bool is_exported_products_Valid() const;

    qint32 getFailedItems() const;
    void setFailedItems(const qint32 &failed_items);
    bool is_failed_items_Set() const;
    bool is_failed_items_Valid() const;

    OAIFeedType getFeedType() const;
    void setFeedType(const OAIFeedType &feed_type);
    bool is_feed_type_Set() const;
    bool is_feed_type_Valid() const;

    QString getHtmlReportGenerationErrorMessage() const;
    void setHtmlReportGenerationErrorMessage(const QString &html_report_generation_error_message);
    bool is_html_report_generation_error_message_Set() const;
    bool is_html_report_generation_error_message_Valid() const;

    QString getHtmlReportUrl() const;
    void setHtmlReportUrl(const QString &html_report_url);
    bool is_html_report_url_Set() const;
    bool is_html_report_url_Valid() const;

    QString getProcessingStatus() const;
    void setProcessingStatus(const QString &processing_status);
    bool is_processing_status_Set() const;
    bool is_processing_status_Valid() const;

    qint32 getPublishedItems() const;
    void setPublishedItems(const qint32 &published_items);
    bool is_published_items_Set() const;
    bool is_published_items_Valid() const;

    qint32 getPublishedItemsWithWarning() const;
    void setPublishedItemsWithWarning(const qint32 &published_items_with_warning);
    bool is_published_items_with_warning_Set() const;
    bool is_published_items_with_warning_Valid() const;

    QDateTime getStartUtcDate() const;
    void setStartUtcDate(const QDateTime &start_utc_date);
    bool is_start_utc_date_Set() const;
    bool is_start_utc_date_Valid() const;

    qint32 getTransmittedItems() const;
    void setTransmittedItems(const qint32 &transmitted_items);
    bool is_transmitted_items_Set() const;
    bool is_transmitted_items_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    QDateTime m_end_utc_date;
    bool m_end_utc_date_isSet;
    bool m_end_utc_date_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    qint32 m_exported_products;
    bool m_exported_products_isSet;
    bool m_exported_products_isValid;

    qint32 m_failed_items;
    bool m_failed_items_isSet;
    bool m_failed_items_isValid;

    OAIFeedType m_feed_type;
    bool m_feed_type_isSet;
    bool m_feed_type_isValid;

    QString m_html_report_generation_error_message;
    bool m_html_report_generation_error_message_isSet;
    bool m_html_report_generation_error_message_isValid;

    QString m_html_report_url;
    bool m_html_report_url_isSet;
    bool m_html_report_url_isValid;

    QString m_processing_status;
    bool m_processing_status_isSet;
    bool m_processing_status_isValid;

    qint32 m_published_items;
    bool m_published_items_isSet;
    bool m_published_items_isValid;

    qint32 m_published_items_with_warning;
    bool m_published_items_with_warning_isSet;
    bool m_published_items_with_warning_isValid;

    QDateTime m_start_utc_date;
    bool m_start_utc_date_isSet;
    bool m_start_utc_date_isValid;

    qint32 m_transmitted_items;
    bool m_transmitted_items_isSet;
    bool m_transmitted_items_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublicationFeedReporting)

#endif // OAIPublicationFeedReporting_H
