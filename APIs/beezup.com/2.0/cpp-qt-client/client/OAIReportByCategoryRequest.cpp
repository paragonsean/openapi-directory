/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportByCategoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportByCategoryRequest::OAIReportByCategoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportByCategoryRequest::OAIReportByCategoryRequest() {
    this->initializeModel();
}

OAIReportByCategoryRequest::~OAIReportByCategoryRequest() {}

void OAIReportByCategoryRequest::initializeModel() {

    m_advanced_filters_isSet = false;
    m_advanced_filters_isValid = false;

    m_begin_period_utc_date_isSet = false;
    m_begin_period_utc_date_isValid = false;

    m_category_filter_isSet = false;
    m_category_filter_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_end_period_utc_date_isSet = false;
    m_end_period_utc_date_isValid = false;

    m_performance_indicator_filters_isSet = false;
    m_performance_indicator_filters_isValid = false;

    m_period_type_isSet = false;
    m_period_type_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_order_by_direction_isSet = false;
    m_order_by_direction_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIReportByCategoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportByCategoryRequest::fromJsonObject(QJsonObject json) {

    m_advanced_filters_isValid = ::OpenAPI::fromJsonValue(m_advanced_filters, json[QString("advancedFilters")]);
    m_advanced_filters_isSet = !json[QString("advancedFilters")].isNull() && m_advanced_filters_isValid;

    m_begin_period_utc_date_isValid = ::OpenAPI::fromJsonValue(m_begin_period_utc_date, json[QString("beginPeriodUtcDate")]);
    m_begin_period_utc_date_isSet = !json[QString("beginPeriodUtcDate")].isNull() && m_begin_period_utc_date_isValid;

    m_category_filter_isValid = ::OpenAPI::fromJsonValue(m_category_filter, json[QString("categoryFilter")]);
    m_category_filter_isSet = !json[QString("categoryFilter")].isNull() && m_category_filter_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_end_period_utc_date_isValid = ::OpenAPI::fromJsonValue(m_end_period_utc_date, json[QString("endPeriodUtcDate")]);
    m_end_period_utc_date_isSet = !json[QString("endPeriodUtcDate")].isNull() && m_end_period_utc_date_isValid;

    m_performance_indicator_filters_isValid = ::OpenAPI::fromJsonValue(m_performance_indicator_filters, json[QString("performanceIndicatorFilters")]);
    m_performance_indicator_filters_isSet = !json[QString("performanceIndicatorFilters")].isNull() && m_performance_indicator_filters_isValid;

    m_period_type_isValid = ::OpenAPI::fromJsonValue(m_period_type, json[QString("periodType")]);
    m_period_type_isSet = !json[QString("periodType")].isNull() && m_period_type_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_order_by_direction_isValid = ::OpenAPI::fromJsonValue(m_order_by_direction, json[QString("orderByDirection")]);
    m_order_by_direction_isSet = !json[QString("orderByDirection")].isNull() && m_order_by_direction_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;
}

QString OAIReportByCategoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportByCategoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_filters.isSet()) {
        obj.insert(QString("advancedFilters"), ::OpenAPI::toJsonValue(m_advanced_filters));
    }
    if (m_begin_period_utc_date_isSet) {
        obj.insert(QString("beginPeriodUtcDate"), ::OpenAPI::toJsonValue(m_begin_period_utc_date));
    }
    if (m_category_filter.isSet()) {
        obj.insert(QString("categoryFilter"), ::OpenAPI::toJsonValue(m_category_filter));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_end_period_utc_date_isSet) {
        obj.insert(QString("endPeriodUtcDate"), ::OpenAPI::toJsonValue(m_end_period_utc_date));
    }
    if (m_performance_indicator_filters.size() > 0) {
        obj.insert(QString("performanceIndicatorFilters"), ::OpenAPI::toJsonValue(m_performance_indicator_filters));
    }
    if (m_period_type.isSet()) {
        obj.insert(QString("periodType"), ::OpenAPI::toJsonValue(m_period_type));
    }
    if (m_order_by.isSet()) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_order_by_direction.isSet()) {
        obj.insert(QString("orderByDirection"), ::OpenAPI::toJsonValue(m_order_by_direction));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

OAIReportAdvancedFilters OAIReportByCategoryRequest::getAdvancedFilters() const {
    return m_advanced_filters;
}
void OAIReportByCategoryRequest::setAdvancedFilters(const OAIReportAdvancedFilters &advanced_filters) {
    m_advanced_filters = advanced_filters;
    m_advanced_filters_isSet = true;
}

bool OAIReportByCategoryRequest::is_advanced_filters_Set() const{
    return m_advanced_filters_isSet;
}

bool OAIReportByCategoryRequest::is_advanced_filters_Valid() const{
    return m_advanced_filters_isValid;
}

QDateTime OAIReportByCategoryRequest::getBeginPeriodUtcDate() const {
    return m_begin_period_utc_date;
}
void OAIReportByCategoryRequest::setBeginPeriodUtcDate(const QDateTime &begin_period_utc_date) {
    m_begin_period_utc_date = begin_period_utc_date;
    m_begin_period_utc_date_isSet = true;
}

bool OAIReportByCategoryRequest::is_begin_period_utc_date_Set() const{
    return m_begin_period_utc_date_isSet;
}

bool OAIReportByCategoryRequest::is_begin_period_utc_date_Valid() const{
    return m_begin_period_utc_date_isValid;
}

OAIBeezUP_Common_CatalogCategoryFilter OAIReportByCategoryRequest::getCategoryFilter() const {
    return m_category_filter;
}
void OAIReportByCategoryRequest::setCategoryFilter(const OAIBeezUP_Common_CatalogCategoryFilter &category_filter) {
    m_category_filter = category_filter;
    m_category_filter_isSet = true;
}

bool OAIReportByCategoryRequest::is_category_filter_Set() const{
    return m_category_filter_isSet;
}

bool OAIReportByCategoryRequest::is_category_filter_Valid() const{
    return m_category_filter_isValid;
}

QString OAIReportByCategoryRequest::getChannelId() const {
    return m_channel_id;
}
void OAIReportByCategoryRequest::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIReportByCategoryRequest::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIReportByCategoryRequest::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QDateTime OAIReportByCategoryRequest::getEndPeriodUtcDate() const {
    return m_end_period_utc_date;
}
void OAIReportByCategoryRequest::setEndPeriodUtcDate(const QDateTime &end_period_utc_date) {
    m_end_period_utc_date = end_period_utc_date;
    m_end_period_utc_date_isSet = true;
}

bool OAIReportByCategoryRequest::is_end_period_utc_date_Set() const{
    return m_end_period_utc_date_isSet;
}

bool OAIReportByCategoryRequest::is_end_period_utc_date_Valid() const{
    return m_end_period_utc_date_isValid;
}

QList<OAIPerformanceIndicatorFilter> OAIReportByCategoryRequest::getPerformanceIndicatorFilters() const {
    return m_performance_indicator_filters;
}
void OAIReportByCategoryRequest::setPerformanceIndicatorFilters(const QList<OAIPerformanceIndicatorFilter> &performance_indicator_filters) {
    m_performance_indicator_filters = performance_indicator_filters;
    m_performance_indicator_filters_isSet = true;
}

bool OAIReportByCategoryRequest::is_performance_indicator_filters_Set() const{
    return m_performance_indicator_filters_isSet;
}

bool OAIReportByCategoryRequest::is_performance_indicator_filters_Valid() const{
    return m_performance_indicator_filters_isValid;
}

OAIReportFilterPeriodType OAIReportByCategoryRequest::getPeriodType() const {
    return m_period_type;
}
void OAIReportByCategoryRequest::setPeriodType(const OAIReportFilterPeriodType &period_type) {
    m_period_type = period_type;
    m_period_type_isSet = true;
}

bool OAIReportByCategoryRequest::is_period_type_Set() const{
    return m_period_type_isSet;
}

bool OAIReportByCategoryRequest::is_period_type_Valid() const{
    return m_period_type_isValid;
}

OAIPerformanceIndicatorType OAIReportByCategoryRequest::getOrderBy() const {
    return m_order_by;
}
void OAIReportByCategoryRequest::setOrderBy(const OAIPerformanceIndicatorType &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIReportByCategoryRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIReportByCategoryRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

OAIOrderByDirection OAIReportByCategoryRequest::getOrderByDirection() const {
    return m_order_by_direction;
}
void OAIReportByCategoryRequest::setOrderByDirection(const OAIOrderByDirection &order_by_direction) {
    m_order_by_direction = order_by_direction;
    m_order_by_direction_isSet = true;
}

bool OAIReportByCategoryRequest::is_order_by_direction_Set() const{
    return m_order_by_direction_isSet;
}

bool OAIReportByCategoryRequest::is_order_by_direction_Valid() const{
    return m_order_by_direction_isValid;
}

qint32 OAIReportByCategoryRequest::getPageNumber() const {
    return m_page_number;
}
void OAIReportByCategoryRequest::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIReportByCategoryRequest::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIReportByCategoryRequest::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIReportByCategoryRequest::getPageSize() const {
    return m_page_size;
}
void OAIReportByCategoryRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIReportByCategoryRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIReportByCategoryRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIReportByCategoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_period_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_period_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_indicator_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportByCategoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_advanced_filters_isValid && m_period_type_isValid && true;
}

} // namespace OpenAPI
