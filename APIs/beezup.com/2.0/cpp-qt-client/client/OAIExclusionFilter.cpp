/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExclusionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExclusionFilter::OAIExclusionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExclusionFilter::OAIExclusionFilter() {
    this->initializeModel();
}

OAIExclusionFilter::~OAIExclusionFilter() {}

void OAIExclusionFilter::initializeModel() {

    m_channel_column_id_isSet = false;
    m_channel_column_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_in_group_isSet = false;
    m_position_in_group_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIExclusionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExclusionFilter::fromJsonObject(QJsonObject json) {

    m_channel_column_id_isValid = ::OpenAPI::fromJsonValue(m_channel_column_id, json[QString("channelColumnId")]);
    m_channel_column_id_isSet = !json[QString("channelColumnId")].isNull() && m_channel_column_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("operatorName")]);
    m_operator_name_isSet = !json[QString("operatorName")].isNull() && m_operator_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_position_in_group_isValid = ::OpenAPI::fromJsonValue(m_position_in_group, json[QString("positionInGroup")]);
    m_position_in_group_isSet = !json[QString("positionInGroup")].isNull() && m_position_in_group_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIExclusionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExclusionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_column_id_isSet) {
        obj.insert(QString("channelColumnId"), ::OpenAPI::toJsonValue(m_channel_column_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("operatorName"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_in_group_isSet) {
        obj.insert(QString("positionInGroup"), ::OpenAPI::toJsonValue(m_position_in_group));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIExclusionFilter::getChannelColumnId() const {
    return m_channel_column_id;
}
void OAIExclusionFilter::setChannelColumnId(const QString &channel_column_id) {
    m_channel_column_id = channel_column_id;
    m_channel_column_id_isSet = true;
}

bool OAIExclusionFilter::is_channel_column_id_Set() const{
    return m_channel_column_id_isSet;
}

bool OAIExclusionFilter::is_channel_column_id_Valid() const{
    return m_channel_column_id_isValid;
}

bool OAIExclusionFilter::isEnabled() const {
    return m_enabled;
}
void OAIExclusionFilter::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIExclusionFilter::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIExclusionFilter::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIExclusionFilter::getGroupId() const {
    return m_group_id;
}
void OAIExclusionFilter::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIExclusionFilter::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIExclusionFilter::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIExclusionFilter::getName() const {
    return m_name;
}
void OAIExclusionFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExclusionFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExclusionFilter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExclusionFilter::getOperatorName() const {
    return m_operator_name;
}
void OAIExclusionFilter::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAIExclusionFilter::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAIExclusionFilter::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

qint32 OAIExclusionFilter::getPosition() const {
    return m_position;
}
void OAIExclusionFilter::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIExclusionFilter::is_position_Set() const{
    return m_position_isSet;
}

bool OAIExclusionFilter::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIExclusionFilter::getPositionInGroup() const {
    return m_position_in_group;
}
void OAIExclusionFilter::setPositionInGroup(const qint32 &position_in_group) {
    m_position_in_group = position_in_group;
    m_position_in_group_isSet = true;
}

bool OAIExclusionFilter::is_position_in_group_Set() const{
    return m_position_in_group_isSet;
}

bool OAIExclusionFilter::is_position_in_group_Valid() const{
    return m_position_in_group_isValid;
}

QString OAIExclusionFilter::getValue() const {
    return m_value;
}
void OAIExclusionFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExclusionFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExclusionFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExclusionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_in_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExclusionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_column_id_isValid && m_enabled_isValid && m_group_id_isValid && m_name_isValid && m_operator_name_isValid && m_position_isValid && m_position_in_group_isValid && true;
}

} // namespace OpenAPI
