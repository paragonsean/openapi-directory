/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplacesChannelCatalogsSettingsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMarketplacesChannelCatalogsSettingsApi::OAIMarketplacesChannelCatalogsSettingsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMarketplacesChannelCatalogsSettingsApi::~OAIMarketplacesChannelCatalogsSettingsApi() {
}

void OAIMarketplacesChannelCatalogsSettingsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.beezup.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getChannelCatalogMarketplaceProperties", defaultConf);
    _serverIndices.insert("getChannelCatalogMarketplaceProperties", 0);
    _serverConfigs.insert("getChannelCatalogMarketplaceSettings", defaultConf);
    _serverIndices.insert("getChannelCatalogMarketplaceSettings", 0);
    _serverConfigs.insert("setChannelCatalogMarketplaceSettings", defaultConf);
    _serverIndices.insert("setChannelCatalogMarketplaceSettings", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMarketplacesChannelCatalogsSettingsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMarketplacesChannelCatalogsSettingsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMarketplacesChannelCatalogsSettingsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMarketplacesChannelCatalogsSettingsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMarketplacesChannelCatalogsSettingsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMarketplacesChannelCatalogsSettingsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMarketplacesChannelCatalogsSettingsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMarketplacesChannelCatalogsSettingsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMarketplacesChannelCatalogsSettingsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMarketplacesChannelCatalogsSettingsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMarketplacesChannelCatalogsSettingsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMarketplacesChannelCatalogsSettingsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMarketplacesChannelCatalogsSettingsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMarketplacesChannelCatalogsSettingsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMarketplacesChannelCatalogsSettingsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMarketplacesChannelCatalogsSettingsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMarketplacesChannelCatalogsSettingsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMarketplacesChannelCatalogsSettingsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMarketplacesChannelCatalogsSettingsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplaceProperties(const QString &channel_catalog_id, const QString &redirection_page_url, const ::OpenAPI::OptionalParam<QList<QString>> &accept_language) {
    QString fullPath = QString(_serverConfigs["getChannelCatalogMarketplaceProperties"][_serverIndices.value("getChannelCatalogMarketplaceProperties")].URL()+"/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties");
    
    
    {
        QString channel_catalog_idPathParam("{");
        channel_catalog_idPathParam.append("channelCatalogId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelCatalogId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelCatalogId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_catalog_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_catalog_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "redirectionPageUrl", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("redirectionPageUrl")).append(querySuffix).append(QUrl::toPercentEncoding(redirection_page_url));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept_language.hasValue())
    {

        QString headerString;
        if (accept_language.value().size() > 0) {
            qint32 count = 0;
            for (QString t : accept_language.value()) {
                if (count > 0) {
                    headerString.append(",");
                }
                headerString.append(::OpenAPI::toStringValue(t));
                count++;
            }
            input.headers.insert("Accept-Language", headerString);
        }
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplacePropertiesCallback);
    connect(this, &OAIMarketplacesChannelCatalogsSettingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplacePropertiesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChannelCatalogMarketplaceProperties output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChannelCatalogMarketplacePropertiesSignal(output);
        Q_EMIT getChannelCatalogMarketplacePropertiesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChannelCatalogMarketplacePropertiesSignalE(output, error_type, error_str);
        Q_EMIT getChannelCatalogMarketplacePropertiesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChannelCatalogMarketplacePropertiesSignalError(output, error_type, error_str);
        Q_EMIT getChannelCatalogMarketplacePropertiesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplaceSettings(const QString &channel_catalog_id) {
    QString fullPath = QString(_serverConfigs["getChannelCatalogMarketplaceSettings"][_serverIndices.value("getChannelCatalogMarketplaceSettings")].URL()+"/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings");
    
    
    {
        QString channel_catalog_idPathParam("{");
        channel_catalog_idPathParam.append("channelCatalogId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelCatalogId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelCatalogId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_catalog_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_catalog_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplaceSettingsCallback);
    connect(this, &OAIMarketplacesChannelCatalogsSettingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMarketplacesChannelCatalogsSettingsApi::getChannelCatalogMarketplaceSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChannelCatalogMarketplaceSettings output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getChannelCatalogMarketplaceSettingsSignal(output);
        Q_EMIT getChannelCatalogMarketplaceSettingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getChannelCatalogMarketplaceSettingsSignalE(output, error_type, error_str);
        Q_EMIT getChannelCatalogMarketplaceSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getChannelCatalogMarketplaceSettingsSignalError(output, error_type, error_str);
        Q_EMIT getChannelCatalogMarketplaceSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMarketplacesChannelCatalogsSettingsApi::setChannelCatalogMarketplaceSettings(const QString &channel_catalog_id, const OAISetChannelCatalogMarketplaceSettingsRequest &oai_set_channel_catalog_marketplace_settings_request) {
    QString fullPath = QString(_serverConfigs["setChannelCatalogMarketplaceSettings"][_serverIndices.value("setChannelCatalogMarketplaceSettings")].URL()+"/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings");
    
    
    {
        QString channel_catalog_idPathParam("{");
        channel_catalog_idPathParam.append("channelCatalogId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelCatalogId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelCatalogId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_catalog_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_catalog_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_set_channel_catalog_marketplace_settings_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMarketplacesChannelCatalogsSettingsApi::setChannelCatalogMarketplaceSettingsCallback);
    connect(this, &OAIMarketplacesChannelCatalogsSettingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMarketplacesChannelCatalogsSettingsApi::setChannelCatalogMarketplaceSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setChannelCatalogMarketplaceSettingsSignal();
        Q_EMIT setChannelCatalogMarketplaceSettingsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setChannelCatalogMarketplaceSettingsSignalE(error_type, error_str);
        Q_EMIT setChannelCatalogMarketplaceSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setChannelCatalogMarketplaceSettingsSignalError(error_type, error_str);
        Q_EMIT setChannelCatalogMarketplaceSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMarketplacesChannelCatalogsSettingsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
