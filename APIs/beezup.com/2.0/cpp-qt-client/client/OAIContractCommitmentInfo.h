/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContractCommitmentInfo.h
 *
 * Describe the commitment information related to the offer.
 */

#ifndef OAIContractCommitmentInfo_H
#define OAIContractCommitmentInfo_H

#include <QJsonObject>

#include "OAIFixedAndVariableClickModelInfo.h"
#include "OAIPaymentMethod.h"
#include "OAIVariableModelInfo.h"
#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFixedAndVariableClickModelInfo;
class OAIVariableModelInfo;

class OAIContractCommitmentInfo : public OAIObject {
public:
    OAIContractCommitmentInfo();
    OAIContractCommitmentInfo(QString json);
    ~OAIContractCommitmentInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommercialCreatorUserId() const;
    void setCommercialCreatorUserId(const QString &commercial_creator_user_id);
    bool is_commercial_creator_user_id_Set() const;
    bool is_commercial_creator_user_id_Valid() const;

    QString getCommercialUserId() const;
    void setCommercialUserId(const QString &commercial_user_id);
    bool is_commercial_user_id_Set() const;
    bool is_commercial_user_id_Valid() const;

    QDate getCommitmentCalculatedFinishDate() const;
    void setCommitmentCalculatedFinishDate(const QDate &commitment_calculated_finish_date);
    bool is_commitment_calculated_finish_date_Set() const;
    bool is_commitment_calculated_finish_date_Valid() const;

    qint32 getCommitmentPeriodInMonth() const;
    void setCommitmentPeriodInMonth(const qint32 &commitment_period_in_month);
    bool is_commitment_period_in_month_Set() const;
    bool is_commitment_period_in_month_Valid() const;

    qint32 getContractType() const;
    void setContractType(const qint32 &contract_type);
    bool is_contract_type_Set() const;
    bool is_contract_type_Valid() const;

    QString getCouponOfferCode() const;
    void setCouponOfferCode(const QString &coupon_offer_code);
    bool is_coupon_offer_code_Set() const;
    bool is_coupon_offer_code_Valid() const;

    QString getCurrentContractId() const;
    void setCurrentContractId(const QString &current_contract_id);
    bool is_current_contract_id_Set() const;
    bool is_current_contract_id_Valid() const;

    QDate getCurrentContractTerminationDate() const;
    void setCurrentContractTerminationDate(const QDate &current_contract_termination_date);
    bool is_current_contract_termination_date_Set() const;
    bool is_current_contract_termination_date_Valid() const;

    OAIPaymentMethod getCurrentCustomerPaymentMethod() const;
    void setCurrentCustomerPaymentMethod(const OAIPaymentMethod &current_customer_payment_method);
    bool is_current_customer_payment_method_Set() const;
    bool is_current_customer_payment_method_Valid() const;

    OAIFixedAndVariableClickModelInfo getFixedAndVariableClickInfo() const;
    void setFixedAndVariableClickInfo(const OAIFixedAndVariableClickModelInfo &fixed_and_variable_click_info);
    bool is_fixed_and_variable_click_info_Set() const;
    bool is_fixed_and_variable_click_info_Valid() const;

    bool isIsCustomerWantsToTerminateHisContract() const;
    void setIsCustomerWantsToTerminateHisContract(const bool &is_customer_wants_to_terminate_his_contract);
    bool is_is_customer_wants_to_terminate_his_contract_Set() const;
    bool is_is_customer_wants_to_terminate_his_contract_Valid() const;

    bool isIsModelMustBeTransmittedInNewContract() const;
    void setIsModelMustBeTransmittedInNewContract(const bool &is_model_must_be_transmitted_in_new_contract);
    bool is_is_model_must_be_transmitted_in_new_contract_Set() const;
    bool is_is_model_must_be_transmitted_in_new_contract_Valid() const;

    qint32 getMinBillingPeriodInMonths() const;
    void setMinBillingPeriodInMonths(const qint32 &min_billing_period_in_months);
    bool is_min_billing_period_in_months_Set() const;
    bool is_min_billing_period_in_months_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QDateTime getNewContractStartDate() const;
    void setNewContractStartDate(const QDateTime &new_contract_start_date);
    bool is_new_contract_start_date_Set() const;
    bool is_new_contract_start_date_Valid() const;

    qint32 getOfferId() const;
    void setOfferId(const qint32 &offer_id);
    bool is_offer_id_Set() const;
    bool is_offer_id_Valid() const;

    QString getOfferName() const;
    void setOfferName(const QString &offer_name);
    bool is_offer_name_Set() const;
    bool is_offer_name_Valid() const;

    qint32 getPaymentDelayInDays() const;
    void setPaymentDelayInDays(const qint32 &payment_delay_in_days);
    bool is_payment_delay_in_days_Set() const;
    bool is_payment_delay_in_days_Valid() const;

    OAIPaymentMethod getPaymentMethodAuthorized() const;
    void setPaymentMethodAuthorized(const OAIPaymentMethod &payment_method_authorized);
    bool is_payment_method_authorized_Set() const;
    bool is_payment_method_authorized_Valid() const;

    OAIPaymentMethod getRequestedPaymentMethod() const;
    void setRequestedPaymentMethod(const OAIPaymentMethod &requested_payment_method);
    bool is_requested_payment_method_Set() const;
    bool is_requested_payment_method_Valid() const;

    QDate getTrialPeriodFinishDate() const;
    void setTrialPeriodFinishDate(const QDate &trial_period_finish_date);
    bool is_trial_period_finish_date_Set() const;
    bool is_trial_period_finish_date_Valid() const;

    qint32 getTrialPeriodInMonth() const;
    void setTrialPeriodInMonth(const qint32 &trial_period_in_month);
    bool is_trial_period_in_month_Set() const;
    bool is_trial_period_in_month_Valid() const;

    OAIVariableModelInfo getVariableModelInfo() const;
    void setVariableModelInfo(const OAIVariableModelInfo &variable_model_info);
    bool is_variable_model_info_Set() const;
    bool is_variable_model_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_commercial_creator_user_id;
    bool m_commercial_creator_user_id_isSet;
    bool m_commercial_creator_user_id_isValid;

    QString m_commercial_user_id;
    bool m_commercial_user_id_isSet;
    bool m_commercial_user_id_isValid;

    QDate m_commitment_calculated_finish_date;
    bool m_commitment_calculated_finish_date_isSet;
    bool m_commitment_calculated_finish_date_isValid;

    qint32 m_commitment_period_in_month;
    bool m_commitment_period_in_month_isSet;
    bool m_commitment_period_in_month_isValid;

    qint32 m_contract_type;
    bool m_contract_type_isSet;
    bool m_contract_type_isValid;

    QString m_coupon_offer_code;
    bool m_coupon_offer_code_isSet;
    bool m_coupon_offer_code_isValid;

    QString m_current_contract_id;
    bool m_current_contract_id_isSet;
    bool m_current_contract_id_isValid;

    QDate m_current_contract_termination_date;
    bool m_current_contract_termination_date_isSet;
    bool m_current_contract_termination_date_isValid;

    OAIPaymentMethod m_current_customer_payment_method;
    bool m_current_customer_payment_method_isSet;
    bool m_current_customer_payment_method_isValid;

    OAIFixedAndVariableClickModelInfo m_fixed_and_variable_click_info;
    bool m_fixed_and_variable_click_info_isSet;
    bool m_fixed_and_variable_click_info_isValid;

    bool m_is_customer_wants_to_terminate_his_contract;
    bool m_is_customer_wants_to_terminate_his_contract_isSet;
    bool m_is_customer_wants_to_terminate_his_contract_isValid;

    bool m_is_model_must_be_transmitted_in_new_contract;
    bool m_is_model_must_be_transmitted_in_new_contract_isSet;
    bool m_is_model_must_be_transmitted_in_new_contract_isValid;

    qint32 m_min_billing_period_in_months;
    bool m_min_billing_period_in_months_isSet;
    bool m_min_billing_period_in_months_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QDateTime m_new_contract_start_date;
    bool m_new_contract_start_date_isSet;
    bool m_new_contract_start_date_isValid;

    qint32 m_offer_id;
    bool m_offer_id_isSet;
    bool m_offer_id_isValid;

    QString m_offer_name;
    bool m_offer_name_isSet;
    bool m_offer_name_isValid;

    qint32 m_payment_delay_in_days;
    bool m_payment_delay_in_days_isSet;
    bool m_payment_delay_in_days_isValid;

    OAIPaymentMethod m_payment_method_authorized;
    bool m_payment_method_authorized_isSet;
    bool m_payment_method_authorized_isValid;

    OAIPaymentMethod m_requested_payment_method;
    bool m_requested_payment_method_isSet;
    bool m_requested_payment_method_isValid;

    QDate m_trial_period_finish_date;
    bool m_trial_period_finish_date_isSet;
    bool m_trial_period_finish_date_isValid;

    qint32 m_trial_period_in_month;
    bool m_trial_period_in_month_isSet;
    bool m_trial_period_in_month_isValid;

    OAIVariableModelInfo m_variable_model_info;
    bool m_variable_model_info_isSet;
    bool m_variable_model_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContractCommitmentInfo)

#endif // OAIContractCommitmentInfo_H
