/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOrderInvoiceGeneralSettingsResponse.h
 *
 * 
 */

#ifndef OAIGetOrderInvoiceGeneralSettingsResponse_H
#define OAIGetOrderInvoiceGeneralSettingsResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetOrderInvoiceGeneralSettingsResponse : public OAIObject {
public:
    OAIGetOrderInvoiceGeneralSettingsResponse();
    OAIGetOrderInvoiceGeneralSettingsResponse(QString json);
    ~OAIGetOrderInvoiceGeneralSettingsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCultureName() const;
    void setCultureName(const QString &culture_name);
    bool is_culture_name_Set() const;
    bool is_culture_name_Valid() const;

    QString getInvoicePrefix() const;
    void setInvoicePrefix(const QString &invoice_prefix);
    bool is_invoice_prefix_Set() const;
    bool is_invoice_prefix_Valid() const;

    qint32 getInvoiceStartingSequenceNumber() const;
    void setInvoiceStartingSequenceNumber(const qint32 &invoice_starting_sequence_number);
    bool is_invoice_starting_sequence_number_Set() const;
    bool is_invoice_starting_sequence_number_Valid() const;

    double getProductVatPercent() const;
    void setProductVatPercent(const double &product_vat_percent);
    bool is_product_vat_percent_Set() const;
    bool is_product_vat_percent_Valid() const;

    double getShippingVatPercent() const;
    void setShippingVatPercent(const double &shipping_vat_percent);
    bool is_shipping_vat_percent_Set() const;
    bool is_shipping_vat_percent_Valid() const;

    qint32 getLastInvoiceSequenceNumber() const;
    void setLastInvoiceSequenceNumber(const qint32 &last_invoice_sequence_number);
    bool is_last_invoice_sequence_number_Set() const;
    bool is_last_invoice_sequence_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_culture_name;
    bool m_culture_name_isSet;
    bool m_culture_name_isValid;

    QString m_invoice_prefix;
    bool m_invoice_prefix_isSet;
    bool m_invoice_prefix_isValid;

    qint32 m_invoice_starting_sequence_number;
    bool m_invoice_starting_sequence_number_isSet;
    bool m_invoice_starting_sequence_number_isValid;

    double m_product_vat_percent;
    bool m_product_vat_percent_isSet;
    bool m_product_vat_percent_isValid;

    double m_shipping_vat_percent;
    bool m_shipping_vat_percent_isSet;
    bool m_shipping_vat_percent_isValid;

    qint32 m_last_invoice_sequence_number;
    bool m_last_invoice_sequence_number_isSet;
    bool m_last_invoice_sequence_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOrderInvoiceGeneralSettingsResponse)

#endif // OAIGetOrderInvoiceGeneralSettingsResponse_H
