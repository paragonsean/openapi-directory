/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILinks_Catalog_ChangeCatalogColumnUserNameLink.h
 *
 * 
 */

#ifndef OAILinks_Catalog_ChangeCatalogColumnUserNameLink_H
#define OAILinks_Catalog_ChangeCatalogColumnUserNameLink_H

#include <QJsonObject>

#include "OAIBeezUP_Common_HttpMethod.h"
#include "OAIBeezUP_Common_InfoSummaries.h"
#include "OAIBeezUP_Common_LinkParameter3.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBeezUP_Common_InfoSummaries;
class OAIBeezUP_Common_LinkParameter3;

class OAILinks_Catalog_ChangeCatalogColumnUserNameLink : public OAIObject {
public:
    OAILinks_Catalog_ChangeCatalogColumnUserNameLink();
    OAILinks_Catalog_ChangeCatalogColumnUserNameLink(QString json);
    ~OAILinks_Catalog_ChangeCatalogColumnUserNameLink() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllOptionalParamsProvided() const;
    void setAllOptionalParamsProvided(const bool &all_optional_params_provided);
    bool is_all_optional_params_provided_Set() const;
    bool is_all_optional_params_provided_Valid() const;

    bool isAllRequiredParamsProvided() const;
    void setAllRequiredParamsProvided(const bool &all_required_params_provided);
    bool is_all_required_params_provided_Set() const;
    bool is_all_required_params_provided_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDocUrl() const;
    void setDocUrl(const QString &doc_url);
    bool is_doc_url_Set() const;
    bool is_doc_url_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    OAIBeezUP_Common_InfoSummaries getInfo() const;
    void setInfo(const OAIBeezUP_Common_InfoSummaries &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    OAIBeezUP_Common_HttpMethod getMethod() const;
    void setMethod(const OAIBeezUP_Common_HttpMethod &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    QString getOperationId() const;
    void setOperationId(const QString &operation_id);
    bool is_operation_id_Set() const;
    bool is_operation_id_Valid() const;

    QMap<QString, OAIBeezUP_Common_LinkParameter3> getParameters() const;
    void setParameters(const QMap<QString, OAIBeezUP_Common_LinkParameter3> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    bool isUrlTemplated() const;
    void setUrlTemplated(const bool &url_templated);
    bool is_url_templated_Set() const;
    bool is_url_templated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_optional_params_provided;
    bool m_all_optional_params_provided_isSet;
    bool m_all_optional_params_provided_isValid;

    bool m_all_required_params_provided;
    bool m_all_required_params_provided_isSet;
    bool m_all_required_params_provided_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_doc_url;
    bool m_doc_url_isSet;
    bool m_doc_url_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    OAIBeezUP_Common_InfoSummaries m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    OAIBeezUP_Common_HttpMethod m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    QString m_operation_id;
    bool m_operation_id_isSet;
    bool m_operation_id_isValid;

    QMap<QString, OAIBeezUP_Common_LinkParameter3> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    bool m_url_templated;
    bool m_url_templated_isSet;
    bool m_url_templated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILinks_Catalog_ChangeCatalogColumnUserNameLink)

#endif // OAILinks_Catalog_ChangeCatalogColumnUserNameLink_H
