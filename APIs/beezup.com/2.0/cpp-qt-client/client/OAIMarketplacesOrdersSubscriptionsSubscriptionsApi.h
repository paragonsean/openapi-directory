/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketplacesOrdersSubscriptionsSubscriptionsApi_H
#define OAI_OAIMarketplacesOrdersSubscriptionsSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateSubscriptionRequest.h"
#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAICreateSubscriptionRequest.h"
#include "OAIErrorResponseMessage.h"
#include "OAISubscriptionIndex.h"
#include "OAISubscriptionPushReporting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketplacesOrdersSubscriptionsSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAIMarketplacesOrdersSubscriptionsSubscriptionsApi(const int timeOut = 0);
    ~OAIMarketplacesOrdersSubscriptionsSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_activate_subscription_request OAIActivateSubscriptionRequest [optional]
    */
    virtual void activateSubscription(const QString &id, const ::OpenAPI::OptionalParam<OAIActivateSubscriptionRequest> &oai_activate_subscription_request = ::OpenAPI::OptionalParam<OAIActivateSubscriptionRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_subscription_request OAICreateSubscriptionRequest [required]
    */
    virtual void createSubscription(const QString &id, const OAICreateSubscriptionRequest &oai_create_subscription_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deactivateSubscription(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteSubscription(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getSubscription(const QString &id);


    virtual void getSubscriptionList();

    /**
    * @param[in]  id QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getSubscriptionPushReporting(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void retryPushOrders(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateSubscriptionCallback(OAIHttpRequestWorker *worker);
    void createSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deactivateSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionListCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionPushReportingCallback(OAIHttpRequestWorker *worker);
    void retryPushOrdersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateSubscriptionSignal();
    void createSubscriptionSignal();
    void deactivateSubscriptionSignal();
    void deleteSubscriptionSignal();
    void getSubscriptionSignal(OAISubscriptionIndex summary);
    void getSubscriptionListSignal(QList<OAISubscriptionIndex> summary);
    void getSubscriptionPushReportingSignal(QList<OAISubscriptionPushReporting> summary);
    void retryPushOrdersSignal();


    void activateSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void createSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void deactivateSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void getSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionIndex summary);
    void getSubscriptionListSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionIndex> summary);
    void getSubscriptionPushReportingSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionPushReporting> summary);
    void retryPushOrdersSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activateSubscriptionSignalError() instead")
    void activateSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalError() instead")
    void createSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateSubscriptionSignalError() instead")
    void deactivateSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalError() instead")
    void deleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalError() instead")
    void getSubscriptionSignalE(OAISubscriptionIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalError(OAISubscriptionIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionListSignalError() instead")
    void getSubscriptionListSignalE(QList<OAISubscriptionIndex> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionListSignalError(QList<OAISubscriptionIndex> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionPushReportingSignalError() instead")
    void getSubscriptionPushReportingSignalE(QList<OAISubscriptionPushReporting> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionPushReportingSignalError(QList<OAISubscriptionPushReporting> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retryPushOrdersSignalError() instead")
    void retryPushOrdersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void retryPushOrdersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateSubscriptionSignalErrorFull() instead")
    void activateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalErrorFull() instead")
    void createSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateSubscriptionSignalErrorFull() instead")
    void deactivateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalErrorFull() instead")
    void deleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalErrorFull() instead")
    void getSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionListSignalErrorFull() instead")
    void getSubscriptionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionPushReportingSignalErrorFull() instead")
    void getSubscriptionPushReportingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionPushReportingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retryPushOrdersSignalErrorFull() instead")
    void retryPushOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retryPushOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
