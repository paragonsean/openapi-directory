/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannelInfo.h
 *
 * 
 */

#ifndef OAIChannelInfo_H
#define OAIChannelInfo_H

#include <QJsonObject>

#include "OAIChannelInfo_details.h"
#include "OAIChannelInfo_keyNumbers.h"
#include "OAIChannelInfo_salesContact.h"
#include "OAIChannelInfo_technicalContact.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelInfo_details;
class OAIChannelInfo_keyNumbers;
class OAIChannelInfo_salesContact;
class OAIChannelInfo_technicalContact;

class OAIChannelInfo : public OAIObject {
public:
    OAIChannelInfo();
    OAIChannelInfo(QString json);
    ~OAIChannelInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBeezUpOffer() const;
    void setBeezUpOffer(const QString &beez_up_offer);
    bool is_beez_up_offer_Set() const;
    bool is_beez_up_offer_Valid() const;

    QString getChannelDescription() const;
    void setChannelDescription(const QString &channel_description);
    bool is_channel_description_Set() const;
    bool is_channel_description_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelLogoUrl() const;
    void setChannelLogoUrl(const QString &channel_logo_url);
    bool is_channel_logo_url_Set() const;
    bool is_channel_logo_url_Valid() const;

    QString getChannelName() const;
    void setChannelName(const QString &channel_name);
    bool is_channel_name_Set() const;
    bool is_channel_name_Valid() const;

    OAIChannelInfo_details getDetails() const;
    void setDetails(const OAIChannelInfo_details &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    OAIChannelInfo_keyNumbers getKeyNumbers() const;
    void setKeyNumbers(const OAIChannelInfo_keyNumbers &key_numbers);
    bool is_key_numbers_Set() const;
    bool is_key_numbers_Valid() const;

    OAIChannelInfo_salesContact getSalesContact() const;
    void setSalesContact(const OAIChannelInfo_salesContact &sales_contact);
    bool is_sales_contact_Set() const;
    bool is_sales_contact_Valid() const;

    OAIChannelInfo_technicalContact getTechnicalContact() const;
    void setTechnicalContact(const OAIChannelInfo_technicalContact &technical_contact);
    bool is_technical_contact_Set() const;
    bool is_technical_contact_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_beez_up_offer;
    bool m_beez_up_offer_isSet;
    bool m_beez_up_offer_isValid;

    QString m_channel_description;
    bool m_channel_description_isSet;
    bool m_channel_description_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_logo_url;
    bool m_channel_logo_url_isSet;
    bool m_channel_logo_url_isValid;

    QString m_channel_name;
    bool m_channel_name_isSet;
    bool m_channel_name_isValid;

    OAIChannelInfo_details m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    OAIChannelInfo_keyNumbers m_key_numbers;
    bool m_key_numbers_isSet;
    bool m_key_numbers_isValid;

    OAIChannelInfo_salesContact m_sales_contact;
    bool m_sales_contact_isSet;
    bool m_sales_contact_isValid;

    OAIChannelInfo_technicalContact m_technical_contact;
    bool m_technical_contact_isSet;
    bool m_technical_contact_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannelInfo)

#endif // OAIChannelInfo_H
