/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelCatalogLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelCatalogLinks::OAIChannelCatalogLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelCatalogLinks::OAIChannelCatalogLinks() {
    this->initializeModel();
}

OAIChannelCatalogLinks::~OAIChannelCatalogLinks() {}

void OAIChannelCatalogLinks::initializeModel() {

    m_category_mappings_isSet = false;
    m_category_mappings_isValid = false;

    m_channel_info_isSet = false;
    m_channel_info_isValid = false;

    m_configure_column_mappings_isSet = false;
    m_configure_column_mappings_isValid = false;

    m_configure_cost_settings_isSet = false;
    m_configure_cost_settings_isValid = false;

    m_configure_general_settings_isSet = false;
    m_configure_general_settings_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_disable_isSet = false;
    m_disable_isValid = false;

    m_disable_category_mappings_isSet = false;
    m_disable_category_mappings_isValid = false;

    m_enable_isSet = false;
    m_enable_isValid = false;

    m_exclusion_filters_isSet = false;
    m_exclusion_filters_isValid = false;

    m_exportation_cache_info_isSet = false;
    m_exportation_cache_info_isValid = false;

    m_marketplace_settings_isSet = false;
    m_marketplace_settings_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_reenable_category_mappings_isSet = false;
    m_reenable_category_mappings_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIChannelCatalogLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelCatalogLinks::fromJsonObject(QJsonObject json) {

    m_category_mappings_isValid = ::OpenAPI::fromJsonValue(m_category_mappings, json[QString("categoryMappings")]);
    m_category_mappings_isSet = !json[QString("categoryMappings")].isNull() && m_category_mappings_isValid;

    m_channel_info_isValid = ::OpenAPI::fromJsonValue(m_channel_info, json[QString("channelInfo")]);
    m_channel_info_isSet = !json[QString("channelInfo")].isNull() && m_channel_info_isValid;

    m_configure_column_mappings_isValid = ::OpenAPI::fromJsonValue(m_configure_column_mappings, json[QString("configureColumnMappings")]);
    m_configure_column_mappings_isSet = !json[QString("configureColumnMappings")].isNull() && m_configure_column_mappings_isValid;

    m_configure_cost_settings_isValid = ::OpenAPI::fromJsonValue(m_configure_cost_settings, json[QString("configureCostSettings")]);
    m_configure_cost_settings_isSet = !json[QString("configureCostSettings")].isNull() && m_configure_cost_settings_isValid;

    m_configure_general_settings_isValid = ::OpenAPI::fromJsonValue(m_configure_general_settings, json[QString("configureGeneralSettings")]);
    m_configure_general_settings_isSet = !json[QString("configureGeneralSettings")].isNull() && m_configure_general_settings_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_disable_isValid = ::OpenAPI::fromJsonValue(m_disable, json[QString("disable")]);
    m_disable_isSet = !json[QString("disable")].isNull() && m_disable_isValid;

    m_disable_category_mappings_isValid = ::OpenAPI::fromJsonValue(m_disable_category_mappings, json[QString("disableCategoryMappings")]);
    m_disable_category_mappings_isSet = !json[QString("disableCategoryMappings")].isNull() && m_disable_category_mappings_isValid;

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("enable")]);
    m_enable_isSet = !json[QString("enable")].isNull() && m_enable_isValid;

    m_exclusion_filters_isValid = ::OpenAPI::fromJsonValue(m_exclusion_filters, json[QString("exclusionFilters")]);
    m_exclusion_filters_isSet = !json[QString("exclusionFilters")].isNull() && m_exclusion_filters_isValid;

    m_exportation_cache_info_isValid = ::OpenAPI::fromJsonValue(m_exportation_cache_info, json[QString("exportationCacheInfo")]);
    m_exportation_cache_info_isSet = !json[QString("exportationCacheInfo")].isNull() && m_exportation_cache_info_isValid;

    m_marketplace_settings_isValid = ::OpenAPI::fromJsonValue(m_marketplace_settings, json[QString("marketplaceSettings")]);
    m_marketplace_settings_isSet = !json[QString("marketplaceSettings")].isNull() && m_marketplace_settings_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_reenable_category_mappings_isValid = ::OpenAPI::fromJsonValue(m_reenable_category_mappings, json[QString("reenableCategoryMappings")]);
    m_reenable_category_mappings_isSet = !json[QString("reenableCategoryMappings")].isNull() && m_reenable_category_mappings_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIChannelCatalogLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelCatalogLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_category_mappings.isSet()) {
        obj.insert(QString("categoryMappings"), ::OpenAPI::toJsonValue(m_category_mappings));
    }
    if (m_channel_info.isSet()) {
        obj.insert(QString("channelInfo"), ::OpenAPI::toJsonValue(m_channel_info));
    }
    if (m_configure_column_mappings.isSet()) {
        obj.insert(QString("configureColumnMappings"), ::OpenAPI::toJsonValue(m_configure_column_mappings));
    }
    if (m_configure_cost_settings.isSet()) {
        obj.insert(QString("configureCostSettings"), ::OpenAPI::toJsonValue(m_configure_cost_settings));
    }
    if (m_configure_general_settings.isSet()) {
        obj.insert(QString("configureGeneralSettings"), ::OpenAPI::toJsonValue(m_configure_general_settings));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_disable.isSet()) {
        obj.insert(QString("disable"), ::OpenAPI::toJsonValue(m_disable));
    }
    if (m_disable_category_mappings.isSet()) {
        obj.insert(QString("disableCategoryMappings"), ::OpenAPI::toJsonValue(m_disable_category_mappings));
    }
    if (m_enable.isSet()) {
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    if (m_exclusion_filters.isSet()) {
        obj.insert(QString("exclusionFilters"), ::OpenAPI::toJsonValue(m_exclusion_filters));
    }
    if (m_exportation_cache_info.isSet()) {
        obj.insert(QString("exportationCacheInfo"), ::OpenAPI::toJsonValue(m_exportation_cache_info));
    }
    if (m_marketplace_settings.isSet()) {
        obj.insert(QString("marketplaceSettings"), ::OpenAPI::toJsonValue(m_marketplace_settings));
    }
    if (m_products.isSet()) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_reenable_category_mappings.isSet()) {
        obj.insert(QString("reenableCategoryMappings"), ::OpenAPI::toJsonValue(m_reenable_category_mappings));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAILinks_GetChannelCatalogCategoriesLink OAIChannelCatalogLinks::getCategoryMappings() const {
    return m_category_mappings;
}
void OAIChannelCatalogLinks::setCategoryMappings(const OAILinks_GetChannelCatalogCategoriesLink &category_mappings) {
    m_category_mappings = category_mappings;
    m_category_mappings_isSet = true;
}

bool OAIChannelCatalogLinks::is_category_mappings_Set() const{
    return m_category_mappings_isSet;
}

bool OAIChannelCatalogLinks::is_category_mappings_Valid() const{
    return m_category_mappings_isValid;
}

OAIExternalLinks_GetChannelInfoLink OAIChannelCatalogLinks::getChannelInfo() const {
    return m_channel_info;
}
void OAIChannelCatalogLinks::setChannelInfo(const OAIExternalLinks_GetChannelInfoLink &channel_info) {
    m_channel_info = channel_info;
    m_channel_info_isSet = true;
}

bool OAIChannelCatalogLinks::is_channel_info_Set() const{
    return m_channel_info_isSet;
}

bool OAIChannelCatalogLinks::is_channel_info_Valid() const{
    return m_channel_info_isValid;
}

OAILinks_ConfigureChannelCatalogColumnMappingsLink OAIChannelCatalogLinks::getConfigureColumnMappings() const {
    return m_configure_column_mappings;
}
void OAIChannelCatalogLinks::setConfigureColumnMappings(const OAILinks_ConfigureChannelCatalogColumnMappingsLink &configure_column_mappings) {
    m_configure_column_mappings = configure_column_mappings;
    m_configure_column_mappings_isSet = true;
}

bool OAIChannelCatalogLinks::is_configure_column_mappings_Set() const{
    return m_configure_column_mappings_isSet;
}

bool OAIChannelCatalogLinks::is_configure_column_mappings_Valid() const{
    return m_configure_column_mappings_isValid;
}

OAILinks_ConfigureChannelCatalogCostSettingsLink OAIChannelCatalogLinks::getConfigureCostSettings() const {
    return m_configure_cost_settings;
}
void OAIChannelCatalogLinks::setConfigureCostSettings(const OAILinks_ConfigureChannelCatalogCostSettingsLink &configure_cost_settings) {
    m_configure_cost_settings = configure_cost_settings;
    m_configure_cost_settings_isSet = true;
}

bool OAIChannelCatalogLinks::is_configure_cost_settings_Set() const{
    return m_configure_cost_settings_isSet;
}

bool OAIChannelCatalogLinks::is_configure_cost_settings_Valid() const{
    return m_configure_cost_settings_isValid;
}

OAILinks_ConfigureChannelCatalogGeneralSettingsLink OAIChannelCatalogLinks::getConfigureGeneralSettings() const {
    return m_configure_general_settings;
}
void OAIChannelCatalogLinks::setConfigureGeneralSettings(const OAILinks_ConfigureChannelCatalogGeneralSettingsLink &configure_general_settings) {
    m_configure_general_settings = configure_general_settings;
    m_configure_general_settings_isSet = true;
}

bool OAIChannelCatalogLinks::is_configure_general_settings_Set() const{
    return m_configure_general_settings_isSet;
}

bool OAIChannelCatalogLinks::is_configure_general_settings_Valid() const{
    return m_configure_general_settings_isValid;
}

OAILinks_DeleteChannelCatalogLink OAIChannelCatalogLinks::getRDelete() const {
    return m_r_delete;
}
void OAIChannelCatalogLinks::setRDelete(const OAILinks_DeleteChannelCatalogLink &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIChannelCatalogLinks::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIChannelCatalogLinks::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAILinks_DisableChannelCatalogLink OAIChannelCatalogLinks::getDisable() const {
    return m_disable;
}
void OAIChannelCatalogLinks::setDisable(const OAILinks_DisableChannelCatalogLink &disable) {
    m_disable = disable;
    m_disable_isSet = true;
}

bool OAIChannelCatalogLinks::is_disable_Set() const{
    return m_disable_isSet;
}

bool OAIChannelCatalogLinks::is_disable_Valid() const{
    return m_disable_isValid;
}

OAILinks_DisableChannelCatalogCategoryMappingLink OAIChannelCatalogLinks::getDisableCategoryMappings() const {
    return m_disable_category_mappings;
}
void OAIChannelCatalogLinks::setDisableCategoryMappings(const OAILinks_DisableChannelCatalogCategoryMappingLink &disable_category_mappings) {
    m_disable_category_mappings = disable_category_mappings;
    m_disable_category_mappings_isSet = true;
}

bool OAIChannelCatalogLinks::is_disable_category_mappings_Set() const{
    return m_disable_category_mappings_isSet;
}

bool OAIChannelCatalogLinks::is_disable_category_mappings_Valid() const{
    return m_disable_category_mappings_isValid;
}

OAILinks_EnableChannelCatalogLink OAIChannelCatalogLinks::getEnable() const {
    return m_enable;
}
void OAIChannelCatalogLinks::setEnable(const OAILinks_EnableChannelCatalogLink &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAIChannelCatalogLinks::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAIChannelCatalogLinks::is_enable_Valid() const{
    return m_enable_isValid;
}

OAILinks_GetChannelCatalogExclusionFiltersLink OAIChannelCatalogLinks::getExclusionFilters() const {
    return m_exclusion_filters;
}
void OAIChannelCatalogLinks::setExclusionFilters(const OAILinks_GetChannelCatalogExclusionFiltersLink &exclusion_filters) {
    m_exclusion_filters = exclusion_filters;
    m_exclusion_filters_isSet = true;
}

bool OAIChannelCatalogLinks::is_exclusion_filters_Set() const{
    return m_exclusion_filters_isSet;
}

bool OAIChannelCatalogLinks::is_exclusion_filters_Valid() const{
    return m_exclusion_filters_isValid;
}

OAILinks_GetChannelCatalogExportationCacheInfoLink OAIChannelCatalogLinks::getExportationCacheInfo() const {
    return m_exportation_cache_info;
}
void OAIChannelCatalogLinks::setExportationCacheInfo(const OAILinks_GetChannelCatalogExportationCacheInfoLink &exportation_cache_info) {
    m_exportation_cache_info = exportation_cache_info;
    m_exportation_cache_info_isSet = true;
}

bool OAIChannelCatalogLinks::is_exportation_cache_info_Set() const{
    return m_exportation_cache_info_isSet;
}

bool OAIChannelCatalogLinks::is_exportation_cache_info_Valid() const{
    return m_exportation_cache_info_isValid;
}

OAIExternalLinks_GetChannelCatalogMarketplaceSettingsLink OAIChannelCatalogLinks::getMarketplaceSettings() const {
    return m_marketplace_settings;
}
void OAIChannelCatalogLinks::setMarketplaceSettings(const OAIExternalLinks_GetChannelCatalogMarketplaceSettingsLink &marketplace_settings) {
    m_marketplace_settings = marketplace_settings;
    m_marketplace_settings_isSet = true;
}

bool OAIChannelCatalogLinks::is_marketplace_settings_Set() const{
    return m_marketplace_settings_isSet;
}

bool OAIChannelCatalogLinks::is_marketplace_settings_Valid() const{
    return m_marketplace_settings_isValid;
}

OAILinks_GetChannelCatalogProductInfoListLink OAIChannelCatalogLinks::getProducts() const {
    return m_products;
}
void OAIChannelCatalogLinks::setProducts(const OAILinks_GetChannelCatalogProductInfoListLink &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIChannelCatalogLinks::is_products_Set() const{
    return m_products_isSet;
}

bool OAIChannelCatalogLinks::is_products_Valid() const{
    return m_products_isValid;
}

OAILinks_ReenableChannelCatalogCategoryMappingLink OAIChannelCatalogLinks::getReenableCategoryMappings() const {
    return m_reenable_category_mappings;
}
void OAIChannelCatalogLinks::setReenableCategoryMappings(const OAILinks_ReenableChannelCatalogCategoryMappingLink &reenable_category_mappings) {
    m_reenable_category_mappings = reenable_category_mappings;
    m_reenable_category_mappings_isSet = true;
}

bool OAIChannelCatalogLinks::is_reenable_category_mappings_Set() const{
    return m_reenable_category_mappings_isSet;
}

bool OAIChannelCatalogLinks::is_reenable_category_mappings_Valid() const{
    return m_reenable_category_mappings_isValid;
}

OAILinks_GetChannelCatalogLink OAIChannelCatalogLinks::getSelf() const {
    return m_self;
}
void OAIChannelCatalogLinks::setSelf(const OAILinks_GetChannelCatalogLink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIChannelCatalogLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIChannelCatalogLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIChannelCatalogLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_column_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_cost_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_general_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_category_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exportation_cache_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reenable_category_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelCatalogLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_self_isValid && true;
}

} // namespace OpenAPI
