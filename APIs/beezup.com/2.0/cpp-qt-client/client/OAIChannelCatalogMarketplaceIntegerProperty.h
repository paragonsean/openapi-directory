/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannelCatalogMarketplaceIntegerProperty.h
 *
 * 
 */

#ifndef OAIChannelCatalogMarketplaceIntegerProperty_H
#define OAIChannelCatalogMarketplaceIntegerProperty_H

#include <QJsonObject>

#include "OAIBeezUP_Common_InfoSummaries.h"
#include "OAIBeezUP_Common_LOVLink3.h"
#include "OAIChannelCatalogMarketplaceProperty.h"
#include "OAIChannelCatalogMarketplacePropertyDiscriminatorType.h"
#include "OAIType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBeezUP_Common_InfoSummaries;
class OAIBeezUP_Common_LOVLink3;

class OAIChannelCatalogMarketplaceIntegerProperty : public OAIObject {
public:
    OAIChannelCatalogMarketplaceIntegerProperty();
    OAIChannelCatalogMarketplaceIntegerProperty(QString json);
    ~OAIChannelCatalogMarketplaceIntegerProperty() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIChannelCatalogMarketplacePropertyDiscriminatorType getDiscriminatorType() const;
    void setDiscriminatorType(const OAIChannelCatalogMarketplacePropertyDiscriminatorType &discriminator_type);
    bool is_discriminator_type_Set() const;
    bool is_discriminator_type_Valid() const;

    OAIBeezUP_Common_InfoSummaries getInfo() const;
    void setInfo(const OAIBeezUP_Common_InfoSummaries &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    OAIBeezUP_Common_LOVLink3 getLovLink() const;
    void setLovLink(const OAIBeezUP_Common_LOVLink3 &lov_link);
    bool is_lov_link_Set() const;
    bool is_lov_link_Valid() const;

    bool isLovRequired() const;
    void setLovRequired(const bool &lov_required);
    bool is_lov_required_Set() const;
    bool is_lov_required_Valid() const;

    qint32 getMaxItems() const;
    void setMaxItems(const qint32 &max_items);
    bool is_max_items_Set() const;
    bool is_max_items_Valid() const;

    qint32 getMaxLength() const;
    void setMaxLength(const qint32 &max_length);
    bool is_max_length_Set() const;
    bool is_max_length_Valid() const;

    qint32 getMinItems() const;
    void setMinItems(const qint32 &min_items);
    bool is_min_items_Set() const;
    bool is_min_items_Valid() const;

    qint32 getMinLength() const;
    void setMinLength(const qint32 &min_length);
    bool is_min_length_Set() const;
    bool is_min_length_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOfferIdRequired() const;
    void setOfferIdRequired(const qint32 &offer_id_required);
    bool is_offer_id_required_Set() const;
    bool is_offer_id_required_Valid() const;

    QString getPattern() const;
    void setPattern(const QString &pattern);
    bool is_pattern_Set() const;
    bool is_pattern_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    bool isReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    bool isRequired() const;
    void setRequired(const bool &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    OAIType getType() const;
    void setType(const OAIType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    QList<qint32> getRDefault() const;
    void setRDefault(const QList<qint32> &r_default);
    bool is_r_default_Set() const;
    bool is_r_default_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIChannelCatalogMarketplacePropertyDiscriminatorType m_discriminator_type;
    bool m_discriminator_type_isSet;
    bool m_discriminator_type_isValid;

    OAIBeezUP_Common_InfoSummaries m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    OAIBeezUP_Common_LOVLink3 m_lov_link;
    bool m_lov_link_isSet;
    bool m_lov_link_isValid;

    bool m_lov_required;
    bool m_lov_required_isSet;
    bool m_lov_required_isValid;

    qint32 m_max_items;
    bool m_max_items_isSet;
    bool m_max_items_isValid;

    qint32 m_max_length;
    bool m_max_length_isSet;
    bool m_max_length_isValid;

    qint32 m_min_items;
    bool m_min_items_isSet;
    bool m_min_items_isValid;

    qint32 m_min_length;
    bool m_min_length_isSet;
    bool m_min_length_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_offer_id_required;
    bool m_offer_id_required_isSet;
    bool m_offer_id_required_isValid;

    QString m_pattern;
    bool m_pattern_isSet;
    bool m_pattern_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;

    bool m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    OAIType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;

    QList<qint32> m_r_default;
    bool m_r_default_isSet;
    bool m_r_default_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannelCatalogMarketplaceIntegerProperty)

#endif // OAIChannelCatalogMarketplaceIntegerProperty_H
