/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsCatalogApi_H
#define OAI_OAICatalogsCatalogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAICatalogColumnList.h"
#include "OAICatalogStoreIndex.h"
#include "OAICategoryList.h"
#include "OAIChangeCustomColumnExpressionRequest.h"
#include "OAIChangeUserColumnNameRequest.h"
#include "OAIComputeExpressionRequest.h"
#include "OAICreateCustomColumnRequest.h"
#include "OAICustomColumnList.h"
#include "OAIGetProductsRequest.h"
#include "OAIImportAlreadyInProgressResponse.h"
#include "OAILastManualImportInputConfiguration.h"
#include "OAIProduct.h"
#include "OAIProductList.h"
#include "OAIRandomProductList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsCatalogApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsCatalogApi(const int timeOut = 0);
    ~OAICatalogsCatalogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_change_user_column_name_request OAIChangeUserColumnNameRequest [required]
    */
    virtual void catalogChangeCatalogColumnUserName(const QString &store_id, const QString &column_id, const OAIChangeUserColumnNameRequest &oai_change_user_column_name_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_change_custom_column_expression_request OAIChangeCustomColumnExpressionRequest [required]
    */
    virtual void catalogChangeCustomColumnExpression(const QString &store_id, const QString &column_id, const OAIChangeCustomColumnExpressionRequest &oai_change_custom_column_expression_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_change_user_column_name_request OAIChangeUserColumnNameRequest [required]
    */
    virtual void catalogChangeCustomColumnUserName(const QString &store_id, const QString &column_id, const OAIChangeUserColumnNameRequest &oai_change_user_column_name_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_compute_expression_request OAIComputeExpressionRequest [required]
    */
    virtual void catalogComputeExpression(const QString &store_id, const OAIComputeExpressionRequest &oai_compute_expression_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void catalogDeleteCustomColumn(const QString &store_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void catalogGetCatalogColumns(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  accept_encoding QList<QString> [required]
    */
    virtual void catalogGetCategories(const QString &store_id, const QList<QString> &accept_encoding);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    */
    virtual void catalogGetCustomColumnExpression(const QString &store_id, const QString &column_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void catalogGetCustomColumns(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void catalogGetProductByProductId(const QString &store_id, const QString &product_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  sku QString [required]
    */
    virtual void catalogGetProductBySku(const QString &store_id, const QString &sku);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_get_products_request OAIGetProductsRequest [required]
    */
    virtual void catalogGetProducts(const QString &store_id, const OAIGetProductsRequest &oai_get_products_request);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void catalogGetRandomProducts(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  column_id QString [required]
    * @param[in]  oai_create_custom_column_request OAICreateCustomColumnRequest [required]
    */
    virtual void catalogSaveCustomColumn(const QString &store_id, const QString &column_id, const OAICreateCustomColumnRequest &oai_create_custom_column_request);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void catalogStoreIndex(const QString &store_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void importationGetManualUpdateLastInputConfig(const QString &store_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void catalogChangeCatalogColumnUserNameCallback(OAIHttpRequestWorker *worker);
    void catalogChangeCustomColumnExpressionCallback(OAIHttpRequestWorker *worker);
    void catalogChangeCustomColumnUserNameCallback(OAIHttpRequestWorker *worker);
    void catalogComputeExpressionCallback(OAIHttpRequestWorker *worker);
    void catalogDeleteCustomColumnCallback(OAIHttpRequestWorker *worker);
    void catalogGetCatalogColumnsCallback(OAIHttpRequestWorker *worker);
    void catalogGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void catalogGetCustomColumnExpressionCallback(OAIHttpRequestWorker *worker);
    void catalogGetCustomColumnsCallback(OAIHttpRequestWorker *worker);
    void catalogGetProductByProductIdCallback(OAIHttpRequestWorker *worker);
    void catalogGetProductBySkuCallback(OAIHttpRequestWorker *worker);
    void catalogGetProductsCallback(OAIHttpRequestWorker *worker);
    void catalogGetRandomProductsCallback(OAIHttpRequestWorker *worker);
    void catalogSaveCustomColumnCallback(OAIHttpRequestWorker *worker);
    void catalogStoreIndexCallback(OAIHttpRequestWorker *worker);
    void importationGetManualUpdateLastInputConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void catalogChangeCatalogColumnUserNameSignal();
    void catalogChangeCustomColumnExpressionSignal();
    void catalogChangeCustomColumnUserNameSignal();
    void catalogComputeExpressionSignal(QString summary);
    void catalogDeleteCustomColumnSignal();
    void catalogGetCatalogColumnsSignal(OAICatalogColumnList summary);
    void catalogGetCategoriesSignal(OAICategoryList summary);
    void catalogGetCustomColumnExpressionSignal(QString summary);
    void catalogGetCustomColumnsSignal(OAICustomColumnList summary);
    void catalogGetProductByProductIdSignal(OAIProduct summary);
    void catalogGetProductBySkuSignal(OAIProduct summary);
    void catalogGetProductsSignal(OAIProductList summary);
    void catalogGetRandomProductsSignal(OAIRandomProductList summary);
    void catalogSaveCustomColumnSignal();
    void catalogStoreIndexSignal(OAICatalogStoreIndex summary);
    void importationGetManualUpdateLastInputConfigSignal(OAILastManualImportInputConfiguration summary);


    void catalogChangeCatalogColumnUserNameSignalFull(OAIHttpRequestWorker *worker);
    void catalogChangeCustomColumnExpressionSignalFull(OAIHttpRequestWorker *worker);
    void catalogChangeCustomColumnUserNameSignalFull(OAIHttpRequestWorker *worker);
    void catalogComputeExpressionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void catalogDeleteCustomColumnSignalFull(OAIHttpRequestWorker *worker);
    void catalogGetCatalogColumnsSignalFull(OAIHttpRequestWorker *worker, OAICatalogColumnList summary);
    void catalogGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAICategoryList summary);
    void catalogGetCustomColumnExpressionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void catalogGetCustomColumnsSignalFull(OAIHttpRequestWorker *worker, OAICustomColumnList summary);
    void catalogGetProductByProductIdSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void catalogGetProductBySkuSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void catalogGetProductsSignalFull(OAIHttpRequestWorker *worker, OAIProductList summary);
    void catalogGetRandomProductsSignalFull(OAIHttpRequestWorker *worker, OAIRandomProductList summary);
    void catalogSaveCustomColumnSignalFull(OAIHttpRequestWorker *worker);
    void catalogStoreIndexSignalFull(OAIHttpRequestWorker *worker, OAICatalogStoreIndex summary);
    void importationGetManualUpdateLastInputConfigSignalFull(OAIHttpRequestWorker *worker, OAILastManualImportInputConfiguration summary);

    Q_DECL_DEPRECATED_X("Use catalogChangeCatalogColumnUserNameSignalError() instead")
    void catalogChangeCatalogColumnUserNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCatalogColumnUserNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogChangeCustomColumnExpressionSignalError() instead")
    void catalogChangeCustomColumnExpressionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCustomColumnExpressionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogChangeCustomColumnUserNameSignalError() instead")
    void catalogChangeCustomColumnUserNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCustomColumnUserNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogComputeExpressionSignalError() instead")
    void catalogComputeExpressionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogComputeExpressionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteCustomColumnSignalError() instead")
    void catalogDeleteCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCatalogColumnsSignalError() instead")
    void catalogGetCatalogColumnsSignalE(OAICatalogColumnList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCatalogColumnsSignalError(OAICatalogColumnList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCategoriesSignalError() instead")
    void catalogGetCategoriesSignalE(OAICategoryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCategoriesSignalError(OAICategoryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCustomColumnExpressionSignalError() instead")
    void catalogGetCustomColumnExpressionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCustomColumnExpressionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCustomColumnsSignalError() instead")
    void catalogGetCustomColumnsSignalE(OAICustomColumnList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCustomColumnsSignalError(OAICustomColumnList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductByProductIdSignalError() instead")
    void catalogGetProductByProductIdSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductByProductIdSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductBySkuSignalError() instead")
    void catalogGetProductBySkuSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductBySkuSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductsSignalError() instead")
    void catalogGetProductsSignalE(OAIProductList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductsSignalError(OAIProductList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetRandomProductsSignalError() instead")
    void catalogGetRandomProductsSignalE(OAIRandomProductList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetRandomProductsSignalError(OAIRandomProductList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogSaveCustomColumnSignalError() instead")
    void catalogSaveCustomColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogSaveCustomColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogStoreIndexSignalError() instead")
    void catalogStoreIndexSignalE(OAICatalogStoreIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogStoreIndexSignalError(OAICatalogStoreIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetManualUpdateLastInputConfigSignalError() instead")
    void importationGetManualUpdateLastInputConfigSignalE(OAILastManualImportInputConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetManualUpdateLastInputConfigSignalError(OAILastManualImportInputConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use catalogChangeCatalogColumnUserNameSignalErrorFull() instead")
    void catalogChangeCatalogColumnUserNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCatalogColumnUserNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogChangeCustomColumnExpressionSignalErrorFull() instead")
    void catalogChangeCustomColumnExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCustomColumnExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogChangeCustomColumnUserNameSignalErrorFull() instead")
    void catalogChangeCustomColumnUserNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogChangeCustomColumnUserNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogComputeExpressionSignalErrorFull() instead")
    void catalogComputeExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogComputeExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteCustomColumnSignalErrorFull() instead")
    void catalogDeleteCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCatalogColumnsSignalErrorFull() instead")
    void catalogGetCatalogColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCatalogColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCategoriesSignalErrorFull() instead")
    void catalogGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCustomColumnExpressionSignalErrorFull() instead")
    void catalogGetCustomColumnExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCustomColumnExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCustomColumnsSignalErrorFull() instead")
    void catalogGetCustomColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCustomColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductByProductIdSignalErrorFull() instead")
    void catalogGetProductByProductIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductByProductIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductBySkuSignalErrorFull() instead")
    void catalogGetProductBySkuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductBySkuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProductsSignalErrorFull() instead")
    void catalogGetProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetRandomProductsSignalErrorFull() instead")
    void catalogGetRandomProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetRandomProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogSaveCustomColumnSignalErrorFull() instead")
    void catalogSaveCustomColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogSaveCustomColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogStoreIndexSignalErrorFull() instead")
    void catalogStoreIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogStoreIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetManualUpdateLastInputConfigSignalErrorFull() instead")
    void importationGetManualUpdateLastInputConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetManualUpdateLastInputConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
