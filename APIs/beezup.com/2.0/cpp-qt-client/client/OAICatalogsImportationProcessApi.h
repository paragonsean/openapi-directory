/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsImportationProcessApi_H
#define OAI_OAICatalogsImportationProcessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIGetImportationProductsReportRequest.h"
#include "OAIGetImportationProductsReportResponse.h"
#include "OAIGetImportationReportResponse.h"
#include "OAIImportAlreadyInProgressResponse.h"
#include "OAIImportationMonitoring.h"
#include "OAIImportationTechnicalProgression.h"
#include "OAIImportationsResponse.h"
#include "OAILinks_Importation_GetImportationMonitoringLink.h"
#include "OAIStartManualImportRequest.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsImportationProcessApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsImportationProcessApi(const int timeOut = 0);
    ~OAICatalogsImportationProcessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationCancel(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationCommit(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationCommitColumns(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationConfigureRemainingCatalogColumns(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationGetImportationMonitoring(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  oai_get_importation_products_report_request OAIGetImportationProductsReportRequest [required]
    */
    virtual void importationGetProductsReport(const QString &store_id, const QString &execution_id, const OAIGetImportationProductsReportRequest &oai_get_importation_products_report_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationGetReport(const QString &store_id, const QString &execution_id);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void importationGetReportings(const QString &store_id);


    virtual void importationGetReportingsAllStores();

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_start_manual_import_request OAIStartManualImportRequest [required]
    */
    virtual void importationStartManualUpdate(const QString &store_id, const OAIStartManualImportRequest &oai_start_manual_import_request);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void importationTechnicalProgression(const QString &store_id, const QString &execution_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void importationCancelCallback(OAIHttpRequestWorker *worker);
    void importationCommitCallback(OAIHttpRequestWorker *worker);
    void importationCommitColumnsCallback(OAIHttpRequestWorker *worker);
    void importationConfigureRemainingCatalogColumnsCallback(OAIHttpRequestWorker *worker);
    void importationGetImportationMonitoringCallback(OAIHttpRequestWorker *worker);
    void importationGetProductsReportCallback(OAIHttpRequestWorker *worker);
    void importationGetReportCallback(OAIHttpRequestWorker *worker);
    void importationGetReportingsCallback(OAIHttpRequestWorker *worker);
    void importationGetReportingsAllStoresCallback(OAIHttpRequestWorker *worker);
    void importationStartManualUpdateCallback(OAIHttpRequestWorker *worker);
    void importationTechnicalProgressionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void importationCancelSignal();
    void importationCommitSignal();
    void importationCommitColumnsSignal();
    void importationConfigureRemainingCatalogColumnsSignal();
    void importationGetImportationMonitoringSignal(OAIImportationMonitoring summary);
    void importationGetProductsReportSignal(OAIGetImportationProductsReportResponse summary);
    void importationGetReportSignal(OAIGetImportationReportResponse summary);
    void importationGetReportingsSignal(OAIImportationsResponse summary);
    void importationGetReportingsAllStoresSignal(QMap<QString, OAIImportationsResponse> summary);
    void importationStartManualUpdateSignal(OAILinks_Importation_GetImportationMonitoringLink summary);
    void importationTechnicalProgressionSignal(OAIImportationTechnicalProgression summary);


    void importationCancelSignalFull(OAIHttpRequestWorker *worker);
    void importationCommitSignalFull(OAIHttpRequestWorker *worker);
    void importationCommitColumnsSignalFull(OAIHttpRequestWorker *worker);
    void importationConfigureRemainingCatalogColumnsSignalFull(OAIHttpRequestWorker *worker);
    void importationGetImportationMonitoringSignalFull(OAIHttpRequestWorker *worker, OAIImportationMonitoring summary);
    void importationGetProductsReportSignalFull(OAIHttpRequestWorker *worker, OAIGetImportationProductsReportResponse summary);
    void importationGetReportSignalFull(OAIHttpRequestWorker *worker, OAIGetImportationReportResponse summary);
    void importationGetReportingsSignalFull(OAIHttpRequestWorker *worker, OAIImportationsResponse summary);
    void importationGetReportingsAllStoresSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIImportationsResponse> summary);
    void importationStartManualUpdateSignalFull(OAIHttpRequestWorker *worker, OAILinks_Importation_GetImportationMonitoringLink summary);
    void importationTechnicalProgressionSignalFull(OAIHttpRequestWorker *worker, OAIImportationTechnicalProgression summary);

    Q_DECL_DEPRECATED_X("Use importationCancelSignalError() instead")
    void importationCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationCommitSignalError() instead")
    void importationCommitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationCommitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationCommitColumnsSignalError() instead")
    void importationCommitColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationCommitColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationConfigureRemainingCatalogColumnsSignalError() instead")
    void importationConfigureRemainingCatalogColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importationConfigureRemainingCatalogColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetImportationMonitoringSignalError() instead")
    void importationGetImportationMonitoringSignalE(OAIImportationMonitoring summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetImportationMonitoringSignalError(OAIImportationMonitoring summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductsReportSignalError() instead")
    void importationGetProductsReportSignalE(OAIGetImportationProductsReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductsReportSignalError(OAIGetImportationProductsReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportSignalError() instead")
    void importationGetReportSignalE(OAIGetImportationReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportSignalError(OAIGetImportationReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportingsSignalError() instead")
    void importationGetReportingsSignalE(OAIImportationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportingsSignalError(OAIImportationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportingsAllStoresSignalError() instead")
    void importationGetReportingsAllStoresSignalE(QMap<QString, OAIImportationsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportingsAllStoresSignalError(QMap<QString, OAIImportationsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationStartManualUpdateSignalError() instead")
    void importationStartManualUpdateSignalE(OAILinks_Importation_GetImportationMonitoringLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationStartManualUpdateSignalError(OAILinks_Importation_GetImportationMonitoringLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationTechnicalProgressionSignalError() instead")
    void importationTechnicalProgressionSignalE(OAIImportationTechnicalProgression summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importationTechnicalProgressionSignalError(OAIImportationTechnicalProgression summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use importationCancelSignalErrorFull() instead")
    void importationCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationCommitSignalErrorFull() instead")
    void importationCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationCommitColumnsSignalErrorFull() instead")
    void importationCommitColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationCommitColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationConfigureRemainingCatalogColumnsSignalErrorFull() instead")
    void importationConfigureRemainingCatalogColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationConfigureRemainingCatalogColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetImportationMonitoringSignalErrorFull() instead")
    void importationGetImportationMonitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetImportationMonitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetProductsReportSignalErrorFull() instead")
    void importationGetProductsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetProductsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportSignalErrorFull() instead")
    void importationGetReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportingsSignalErrorFull() instead")
    void importationGetReportingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationGetReportingsAllStoresSignalErrorFull() instead")
    void importationGetReportingsAllStoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationGetReportingsAllStoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationStartManualUpdateSignalErrorFull() instead")
    void importationStartManualUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationStartManualUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importationTechnicalProgressionSignalErrorFull() instead")
    void importationTechnicalProgressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importationTechnicalProgressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
