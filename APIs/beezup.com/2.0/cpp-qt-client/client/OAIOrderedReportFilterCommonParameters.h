/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrderedReportFilterCommonParameters.h
 *
 * Contains common filter parameters with Order By functionnality
 */

#ifndef OAIOrderedReportFilterCommonParameters_H
#define OAIOrderedReportFilterCommonParameters_H

#include <QJsonObject>

#include "OAIBeezUP_Common_CatalogCategoryFilter.h"
#include "OAIOrderByDirection.h"
#include "OAIPerformanceIndicatorFilter.h"
#include "OAIPerformanceIndicatorType.h"
#include "OAIReportAdvancedFilters.h"
#include "OAIReportFilterPeriodType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReportAdvancedFilters;
class OAIBeezUP_Common_CatalogCategoryFilter;
class OAIPerformanceIndicatorFilter;

class OAIOrderedReportFilterCommonParameters : public OAIObject {
public:
    OAIOrderedReportFilterCommonParameters();
    OAIOrderedReportFilterCommonParameters(QString json);
    ~OAIOrderedReportFilterCommonParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIReportAdvancedFilters getAdvancedFilters() const;
    void setAdvancedFilters(const OAIReportAdvancedFilters &advanced_filters);
    bool is_advanced_filters_Set() const;
    bool is_advanced_filters_Valid() const;

    QDateTime getBeginPeriodUtcDate() const;
    void setBeginPeriodUtcDate(const QDateTime &begin_period_utc_date);
    bool is_begin_period_utc_date_Set() const;
    bool is_begin_period_utc_date_Valid() const;

    OAIBeezUP_Common_CatalogCategoryFilter getCategoryFilter() const;
    void setCategoryFilter(const OAIBeezUP_Common_CatalogCategoryFilter &category_filter);
    bool is_category_filter_Set() const;
    bool is_category_filter_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QDateTime getEndPeriodUtcDate() const;
    void setEndPeriodUtcDate(const QDateTime &end_period_utc_date);
    bool is_end_period_utc_date_Set() const;
    bool is_end_period_utc_date_Valid() const;

    QList<OAIPerformanceIndicatorFilter> getPerformanceIndicatorFilters() const;
    void setPerformanceIndicatorFilters(const QList<OAIPerformanceIndicatorFilter> &performance_indicator_filters);
    bool is_performance_indicator_filters_Set() const;
    bool is_performance_indicator_filters_Valid() const;

    OAIReportFilterPeriodType getPeriodType() const;
    void setPeriodType(const OAIReportFilterPeriodType &period_type);
    bool is_period_type_Set() const;
    bool is_period_type_Valid() const;

    OAIPerformanceIndicatorType getOrderBy() const;
    void setOrderBy(const OAIPerformanceIndicatorType &order_by);
    bool is_order_by_Set() const;
    bool is_order_by_Valid() const;

    OAIOrderByDirection getOrderByDirection() const;
    void setOrderByDirection(const OAIOrderByDirection &order_by_direction);
    bool is_order_by_direction_Set() const;
    bool is_order_by_direction_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIReportAdvancedFilters m_advanced_filters;
    bool m_advanced_filters_isSet;
    bool m_advanced_filters_isValid;

    QDateTime m_begin_period_utc_date;
    bool m_begin_period_utc_date_isSet;
    bool m_begin_period_utc_date_isValid;

    OAIBeezUP_Common_CatalogCategoryFilter m_category_filter;
    bool m_category_filter_isSet;
    bool m_category_filter_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QDateTime m_end_period_utc_date;
    bool m_end_period_utc_date_isSet;
    bool m_end_period_utc_date_isValid;

    QList<OAIPerformanceIndicatorFilter> m_performance_indicator_filters;
    bool m_performance_indicator_filters_isSet;
    bool m_performance_indicator_filters_isValid;

    OAIReportFilterPeriodType m_period_type;
    bool m_period_type_isSet;
    bool m_period_type_isValid;

    OAIPerformanceIndicatorType m_order_by;
    bool m_order_by_isSet;
    bool m_order_by_isValid;

    OAIOrderByDirection m_order_by_direction;
    bool m_order_by_direction_isSet;
    bool m_order_by_direction_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrderedReportFilterCommonParameters)

#endif // OAIOrderedReportFilterCommonParameters_H
