/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderHeaderWithLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderHeaderWithLinks::OAIOrderHeaderWithLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderHeaderWithLinks::OAIOrderHeaderWithLinks() {
    this->initializeModel();
}

OAIOrderHeaderWithLinks::~OAIOrderHeaderWithLinks() {}

void OAIOrderHeaderWithLinks::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_beez_up_order_id_isSet = false;
    m_beez_up_order_id_isValid = false;

    m_beez_up_order_url_isSet = false;
    m_beez_up_order_url_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_marketplace_business_code_isSet = false;
    m_marketplace_business_code_isValid = false;

    m_marketplace_technical_code_isSet = false;
    m_marketplace_technical_code_isValid = false;

    m_order_buyer_name_isSet = false;
    m_order_buyer_name_isValid = false;

    m_order_currency_code_isSet = false;
    m_order_currency_code_isValid = false;

    m_order_invoice_number_isSet = false;
    m_order_invoice_number_isValid = false;

    m_order_invoice_uri_isSet = false;
    m_order_invoice_uri_isValid = false;

    m_order_last_modification_utc_date_isSet = false;
    m_order_last_modification_utc_date_isValid = false;

    m_order_marketplace_last_modification_utc_date_isSet = false;
    m_order_marketplace_last_modification_utc_date_isValid = false;

    m_order_marketplace_order_id_isSet = false;
    m_order_marketplace_order_id_isValid = false;

    m_order_merchant_e_commerce_software_name_isSet = false;
    m_order_merchant_e_commerce_software_name_isValid = false;

    m_order_merchant_e_commerce_software_version_isSet = false;
    m_order_merchant_e_commerce_software_version_isValid = false;

    m_order_merchant_order_id_isSet = false;
    m_order_merchant_order_id_isValid = false;

    m_order_purchase_utc_date_isSet = false;
    m_order_purchase_utc_date_isValid = false;

    m_order_status_beez_up_order_status_isSet = false;
    m_order_status_beez_up_order_status_isValid = false;

    m_order_status_marketplace_order_status_isSet = false;
    m_order_status_marketplace_order_status_isValid = false;

    m_order_total_price_isSet = false;
    m_order_total_price_isValid = false;

    m_processing_isSet = false;
    m_processing_isValid = false;
}

void OAIOrderHeaderWithLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderHeaderWithLinks::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_beez_up_order_id_isValid = ::OpenAPI::fromJsonValue(m_beez_up_order_id, json[QString("beezUPOrderId")]);
    m_beez_up_order_id_isSet = !json[QString("beezUPOrderId")].isNull() && m_beez_up_order_id_isValid;

    m_beez_up_order_url_isValid = ::OpenAPI::fromJsonValue(m_beez_up_order_url, json[QString("beezUPOrderUrl")]);
    m_beez_up_order_url_isSet = !json[QString("beezUPOrderUrl")].isNull() && m_beez_up_order_url_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_marketplace_business_code_isValid = ::OpenAPI::fromJsonValue(m_marketplace_business_code, json[QString("marketplaceBusinessCode")]);
    m_marketplace_business_code_isSet = !json[QString("marketplaceBusinessCode")].isNull() && m_marketplace_business_code_isValid;

    m_marketplace_technical_code_isValid = ::OpenAPI::fromJsonValue(m_marketplace_technical_code, json[QString("marketplaceTechnicalCode")]);
    m_marketplace_technical_code_isSet = !json[QString("marketplaceTechnicalCode")].isNull() && m_marketplace_technical_code_isValid;

    m_order_buyer_name_isValid = ::OpenAPI::fromJsonValue(m_order_buyer_name, json[QString("order_Buyer_Name")]);
    m_order_buyer_name_isSet = !json[QString("order_Buyer_Name")].isNull() && m_order_buyer_name_isValid;

    m_order_currency_code_isValid = ::OpenAPI::fromJsonValue(m_order_currency_code, json[QString("order_CurrencyCode")]);
    m_order_currency_code_isSet = !json[QString("order_CurrencyCode")].isNull() && m_order_currency_code_isValid;

    m_order_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_order_invoice_number, json[QString("order_Invoice_Number")]);
    m_order_invoice_number_isSet = !json[QString("order_Invoice_Number")].isNull() && m_order_invoice_number_isValid;

    m_order_invoice_uri_isValid = ::OpenAPI::fromJsonValue(m_order_invoice_uri, json[QString("order_Invoice_Uri")]);
    m_order_invoice_uri_isSet = !json[QString("order_Invoice_Uri")].isNull() && m_order_invoice_uri_isValid;

    m_order_last_modification_utc_date_isValid = ::OpenAPI::fromJsonValue(m_order_last_modification_utc_date, json[QString("order_LastModificationUtcDate")]);
    m_order_last_modification_utc_date_isSet = !json[QString("order_LastModificationUtcDate")].isNull() && m_order_last_modification_utc_date_isValid;

    m_order_marketplace_last_modification_utc_date_isValid = ::OpenAPI::fromJsonValue(m_order_marketplace_last_modification_utc_date, json[QString("order_MarketplaceLastModificationUtcDate")]);
    m_order_marketplace_last_modification_utc_date_isSet = !json[QString("order_MarketplaceLastModificationUtcDate")].isNull() && m_order_marketplace_last_modification_utc_date_isValid;

    m_order_marketplace_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_marketplace_order_id, json[QString("order_MarketplaceOrderId")]);
    m_order_marketplace_order_id_isSet = !json[QString("order_MarketplaceOrderId")].isNull() && m_order_marketplace_order_id_isValid;

    m_order_merchant_e_commerce_software_name_isValid = ::OpenAPI::fromJsonValue(m_order_merchant_e_commerce_software_name, json[QString("order_MerchantECommerceSoftwareName")]);
    m_order_merchant_e_commerce_software_name_isSet = !json[QString("order_MerchantECommerceSoftwareName")].isNull() && m_order_merchant_e_commerce_software_name_isValid;

    m_order_merchant_e_commerce_software_version_isValid = ::OpenAPI::fromJsonValue(m_order_merchant_e_commerce_software_version, json[QString("order_MerchantECommerceSoftwareVersion")]);
    m_order_merchant_e_commerce_software_version_isSet = !json[QString("order_MerchantECommerceSoftwareVersion")].isNull() && m_order_merchant_e_commerce_software_version_isValid;

    m_order_merchant_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_merchant_order_id, json[QString("order_MerchantOrderId")]);
    m_order_merchant_order_id_isSet = !json[QString("order_MerchantOrderId")].isNull() && m_order_merchant_order_id_isValid;

    m_order_purchase_utc_date_isValid = ::OpenAPI::fromJsonValue(m_order_purchase_utc_date, json[QString("order_PurchaseUtcDate")]);
    m_order_purchase_utc_date_isSet = !json[QString("order_PurchaseUtcDate")].isNull() && m_order_purchase_utc_date_isValid;

    m_order_status_beez_up_order_status_isValid = ::OpenAPI::fromJsonValue(m_order_status_beez_up_order_status, json[QString("order_Status_BeezUPOrderStatus")]);
    m_order_status_beez_up_order_status_isSet = !json[QString("order_Status_BeezUPOrderStatus")].isNull() && m_order_status_beez_up_order_status_isValid;

    m_order_status_marketplace_order_status_isValid = ::OpenAPI::fromJsonValue(m_order_status_marketplace_order_status, json[QString("order_Status_MarketplaceOrderStatus")]);
    m_order_status_marketplace_order_status_isSet = !json[QString("order_Status_MarketplaceOrderStatus")].isNull() && m_order_status_marketplace_order_status_isValid;

    m_order_total_price_isValid = ::OpenAPI::fromJsonValue(m_order_total_price, json[QString("order_TotalPrice")]);
    m_order_total_price_isSet = !json[QString("order_TotalPrice")].isNull() && m_order_total_price_isValid;

    m_processing_isValid = ::OpenAPI::fromJsonValue(m_processing, json[QString("processing")]);
    m_processing_isSet = !json[QString("processing")].isNull() && m_processing_isValid;
}

QString OAIOrderHeaderWithLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderHeaderWithLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_beez_up_order_id_isSet) {
        obj.insert(QString("beezUPOrderId"), ::OpenAPI::toJsonValue(m_beez_up_order_id));
    }
    if (m_beez_up_order_url_isSet) {
        obj.insert(QString("beezUPOrderUrl"), ::OpenAPI::toJsonValue(m_beez_up_order_url));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_marketplace_business_code_isSet) {
        obj.insert(QString("marketplaceBusinessCode"), ::OpenAPI::toJsonValue(m_marketplace_business_code));
    }
    if (m_marketplace_technical_code_isSet) {
        obj.insert(QString("marketplaceTechnicalCode"), ::OpenAPI::toJsonValue(m_marketplace_technical_code));
    }
    if (m_order_buyer_name_isSet) {
        obj.insert(QString("order_Buyer_Name"), ::OpenAPI::toJsonValue(m_order_buyer_name));
    }
    if (m_order_currency_code_isSet) {
        obj.insert(QString("order_CurrencyCode"), ::OpenAPI::toJsonValue(m_order_currency_code));
    }
    if (m_order_invoice_number_isSet) {
        obj.insert(QString("order_Invoice_Number"), ::OpenAPI::toJsonValue(m_order_invoice_number));
    }
    if (m_order_invoice_uri_isSet) {
        obj.insert(QString("order_Invoice_Uri"), ::OpenAPI::toJsonValue(m_order_invoice_uri));
    }
    if (m_order_last_modification_utc_date_isSet) {
        obj.insert(QString("order_LastModificationUtcDate"), ::OpenAPI::toJsonValue(m_order_last_modification_utc_date));
    }
    if (m_order_marketplace_last_modification_utc_date_isSet) {
        obj.insert(QString("order_MarketplaceLastModificationUtcDate"), ::OpenAPI::toJsonValue(m_order_marketplace_last_modification_utc_date));
    }
    if (m_order_marketplace_order_id_isSet) {
        obj.insert(QString("order_MarketplaceOrderId"), ::OpenAPI::toJsonValue(m_order_marketplace_order_id));
    }
    if (m_order_merchant_e_commerce_software_name_isSet) {
        obj.insert(QString("order_MerchantECommerceSoftwareName"), ::OpenAPI::toJsonValue(m_order_merchant_e_commerce_software_name));
    }
    if (m_order_merchant_e_commerce_software_version_isSet) {
        obj.insert(QString("order_MerchantECommerceSoftwareVersion"), ::OpenAPI::toJsonValue(m_order_merchant_e_commerce_software_version));
    }
    if (m_order_merchant_order_id_isSet) {
        obj.insert(QString("order_MerchantOrderId"), ::OpenAPI::toJsonValue(m_order_merchant_order_id));
    }
    if (m_order_purchase_utc_date_isSet) {
        obj.insert(QString("order_PurchaseUtcDate"), ::OpenAPI::toJsonValue(m_order_purchase_utc_date));
    }
    if (m_order_status_beez_up_order_status_isSet) {
        obj.insert(QString("order_Status_BeezUPOrderStatus"), ::OpenAPI::toJsonValue(m_order_status_beez_up_order_status));
    }
    if (m_order_status_marketplace_order_status_isSet) {
        obj.insert(QString("order_Status_MarketplaceOrderStatus"), ::OpenAPI::toJsonValue(m_order_status_marketplace_order_status));
    }
    if (m_order_total_price_isSet) {
        obj.insert(QString("order_TotalPrice"), ::OpenAPI::toJsonValue(m_order_total_price));
    }
    if (m_processing_isSet) {
        obj.insert(QString("processing"), ::OpenAPI::toJsonValue(m_processing));
    }
    return obj;
}

qint32 OAIOrderHeaderWithLinks::getAccountId() const {
    return m_account_id;
}
void OAIOrderHeaderWithLinks::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIOrderHeaderWithLinks::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIOrderHeaderWithLinks::getBeezUpOrderId() const {
    return m_beez_up_order_id;
}
void OAIOrderHeaderWithLinks::setBeezUpOrderId(const QString &beez_up_order_id) {
    m_beez_up_order_id = beez_up_order_id;
    m_beez_up_order_id_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_beez_up_order_id_Set() const{
    return m_beez_up_order_id_isSet;
}

bool OAIOrderHeaderWithLinks::is_beez_up_order_id_Valid() const{
    return m_beez_up_order_id_isValid;
}

QString OAIOrderHeaderWithLinks::getBeezUpOrderUrl() const {
    return m_beez_up_order_url;
}
void OAIOrderHeaderWithLinks::setBeezUpOrderUrl(const QString &beez_up_order_url) {
    m_beez_up_order_url = beez_up_order_url;
    m_beez_up_order_url_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_beez_up_order_url_Set() const{
    return m_beez_up_order_url_isSet;
}

bool OAIOrderHeaderWithLinks::is_beez_up_order_url_Valid() const{
    return m_beez_up_order_url_isValid;
}

QString OAIOrderHeaderWithLinks::getEtag() const {
    return m_etag;
}
void OAIOrderHeaderWithLinks::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIOrderHeaderWithLinks::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIOrderHeaderLinks OAIOrderHeaderWithLinks::getLinks() const {
    return m_links;
}
void OAIOrderHeaderWithLinks::setLinks(const OAIOrderHeaderLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_links_Set() const{
    return m_links_isSet;
}

bool OAIOrderHeaderWithLinks::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIOrderHeaderWithLinks::getMarketplaceBusinessCode() const {
    return m_marketplace_business_code;
}
void OAIOrderHeaderWithLinks::setMarketplaceBusinessCode(const QString &marketplace_business_code) {
    m_marketplace_business_code = marketplace_business_code;
    m_marketplace_business_code_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_marketplace_business_code_Set() const{
    return m_marketplace_business_code_isSet;
}

bool OAIOrderHeaderWithLinks::is_marketplace_business_code_Valid() const{
    return m_marketplace_business_code_isValid;
}

QString OAIOrderHeaderWithLinks::getMarketplaceTechnicalCode() const {
    return m_marketplace_technical_code;
}
void OAIOrderHeaderWithLinks::setMarketplaceTechnicalCode(const QString &marketplace_technical_code) {
    m_marketplace_technical_code = marketplace_technical_code;
    m_marketplace_technical_code_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_marketplace_technical_code_Set() const{
    return m_marketplace_technical_code_isSet;
}

bool OAIOrderHeaderWithLinks::is_marketplace_technical_code_Valid() const{
    return m_marketplace_technical_code_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderBuyerName() const {
    return m_order_buyer_name;
}
void OAIOrderHeaderWithLinks::setOrderBuyerName(const QString &order_buyer_name) {
    m_order_buyer_name = order_buyer_name;
    m_order_buyer_name_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_buyer_name_Set() const{
    return m_order_buyer_name_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_buyer_name_Valid() const{
    return m_order_buyer_name_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderCurrencyCode() const {
    return m_order_currency_code;
}
void OAIOrderHeaderWithLinks::setOrderCurrencyCode(const QString &order_currency_code) {
    m_order_currency_code = order_currency_code;
    m_order_currency_code_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_currency_code_Set() const{
    return m_order_currency_code_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_currency_code_Valid() const{
    return m_order_currency_code_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderInvoiceNumber() const {
    return m_order_invoice_number;
}
void OAIOrderHeaderWithLinks::setOrderInvoiceNumber(const QString &order_invoice_number) {
    m_order_invoice_number = order_invoice_number;
    m_order_invoice_number_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_invoice_number_Set() const{
    return m_order_invoice_number_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_invoice_number_Valid() const{
    return m_order_invoice_number_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderInvoiceUri() const {
    return m_order_invoice_uri;
}
void OAIOrderHeaderWithLinks::setOrderInvoiceUri(const QString &order_invoice_uri) {
    m_order_invoice_uri = order_invoice_uri;
    m_order_invoice_uri_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_invoice_uri_Set() const{
    return m_order_invoice_uri_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_invoice_uri_Valid() const{
    return m_order_invoice_uri_isValid;
}

QDateTime OAIOrderHeaderWithLinks::getOrderLastModificationUtcDate() const {
    return m_order_last_modification_utc_date;
}
void OAIOrderHeaderWithLinks::setOrderLastModificationUtcDate(const QDateTime &order_last_modification_utc_date) {
    m_order_last_modification_utc_date = order_last_modification_utc_date;
    m_order_last_modification_utc_date_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_last_modification_utc_date_Set() const{
    return m_order_last_modification_utc_date_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_last_modification_utc_date_Valid() const{
    return m_order_last_modification_utc_date_isValid;
}

QDateTime OAIOrderHeaderWithLinks::getOrderMarketplaceLastModificationUtcDate() const {
    return m_order_marketplace_last_modification_utc_date;
}
void OAIOrderHeaderWithLinks::setOrderMarketplaceLastModificationUtcDate(const QDateTime &order_marketplace_last_modification_utc_date) {
    m_order_marketplace_last_modification_utc_date = order_marketplace_last_modification_utc_date;
    m_order_marketplace_last_modification_utc_date_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_marketplace_last_modification_utc_date_Set() const{
    return m_order_marketplace_last_modification_utc_date_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_marketplace_last_modification_utc_date_Valid() const{
    return m_order_marketplace_last_modification_utc_date_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderMarketplaceOrderId() const {
    return m_order_marketplace_order_id;
}
void OAIOrderHeaderWithLinks::setOrderMarketplaceOrderId(const QString &order_marketplace_order_id) {
    m_order_marketplace_order_id = order_marketplace_order_id;
    m_order_marketplace_order_id_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_marketplace_order_id_Set() const{
    return m_order_marketplace_order_id_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_marketplace_order_id_Valid() const{
    return m_order_marketplace_order_id_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderMerchantECommerceSoftwareName() const {
    return m_order_merchant_e_commerce_software_name;
}
void OAIOrderHeaderWithLinks::setOrderMerchantECommerceSoftwareName(const QString &order_merchant_e_commerce_software_name) {
    m_order_merchant_e_commerce_software_name = order_merchant_e_commerce_software_name;
    m_order_merchant_e_commerce_software_name_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_e_commerce_software_name_Set() const{
    return m_order_merchant_e_commerce_software_name_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_e_commerce_software_name_Valid() const{
    return m_order_merchant_e_commerce_software_name_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderMerchantECommerceSoftwareVersion() const {
    return m_order_merchant_e_commerce_software_version;
}
void OAIOrderHeaderWithLinks::setOrderMerchantECommerceSoftwareVersion(const QString &order_merchant_e_commerce_software_version) {
    m_order_merchant_e_commerce_software_version = order_merchant_e_commerce_software_version;
    m_order_merchant_e_commerce_software_version_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_e_commerce_software_version_Set() const{
    return m_order_merchant_e_commerce_software_version_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_e_commerce_software_version_Valid() const{
    return m_order_merchant_e_commerce_software_version_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderMerchantOrderId() const {
    return m_order_merchant_order_id;
}
void OAIOrderHeaderWithLinks::setOrderMerchantOrderId(const QString &order_merchant_order_id) {
    m_order_merchant_order_id = order_merchant_order_id;
    m_order_merchant_order_id_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_order_id_Set() const{
    return m_order_merchant_order_id_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_merchant_order_id_Valid() const{
    return m_order_merchant_order_id_isValid;
}

QDateTime OAIOrderHeaderWithLinks::getOrderPurchaseUtcDate() const {
    return m_order_purchase_utc_date;
}
void OAIOrderHeaderWithLinks::setOrderPurchaseUtcDate(const QDateTime &order_purchase_utc_date) {
    m_order_purchase_utc_date = order_purchase_utc_date;
    m_order_purchase_utc_date_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_purchase_utc_date_Set() const{
    return m_order_purchase_utc_date_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_purchase_utc_date_Valid() const{
    return m_order_purchase_utc_date_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderStatusBeezUpOrderStatus() const {
    return m_order_status_beez_up_order_status;
}
void OAIOrderHeaderWithLinks::setOrderStatusBeezUpOrderStatus(const QString &order_status_beez_up_order_status) {
    m_order_status_beez_up_order_status = order_status_beez_up_order_status;
    m_order_status_beez_up_order_status_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_status_beez_up_order_status_Set() const{
    return m_order_status_beez_up_order_status_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_status_beez_up_order_status_Valid() const{
    return m_order_status_beez_up_order_status_isValid;
}

QString OAIOrderHeaderWithLinks::getOrderStatusMarketplaceOrderStatus() const {
    return m_order_status_marketplace_order_status;
}
void OAIOrderHeaderWithLinks::setOrderStatusMarketplaceOrderStatus(const QString &order_status_marketplace_order_status) {
    m_order_status_marketplace_order_status = order_status_marketplace_order_status;
    m_order_status_marketplace_order_status_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_status_marketplace_order_status_Set() const{
    return m_order_status_marketplace_order_status_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_status_marketplace_order_status_Valid() const{
    return m_order_status_marketplace_order_status_isValid;
}

double OAIOrderHeaderWithLinks::getOrderTotalPrice() const {
    return m_order_total_price;
}
void OAIOrderHeaderWithLinks::setOrderTotalPrice(const double &order_total_price) {
    m_order_total_price = order_total_price;
    m_order_total_price_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_order_total_price_Set() const{
    return m_order_total_price_isSet;
}

bool OAIOrderHeaderWithLinks::is_order_total_price_Valid() const{
    return m_order_total_price_isValid;
}

bool OAIOrderHeaderWithLinks::isProcessing() const {
    return m_processing;
}
void OAIOrderHeaderWithLinks::setProcessing(const bool &processing) {
    m_processing = processing;
    m_processing_isSet = true;
}

bool OAIOrderHeaderWithLinks::is_processing_Set() const{
    return m_processing_isSet;
}

bool OAIOrderHeaderWithLinks::is_processing_Valid() const{
    return m_processing_isValid;
}

bool OAIOrderHeaderWithLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beez_up_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beez_up_order_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_business_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_technical_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_buyer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_invoice_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_last_modification_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_marketplace_last_modification_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_marketplace_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_merchant_e_commerce_software_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_merchant_e_commerce_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_merchant_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_purchase_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_status_beez_up_order_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_status_marketplace_order_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderHeaderWithLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_beez_up_order_id_isValid && m_etag_isValid && m_links_isValid && m_marketplace_business_code_isValid && m_marketplace_technical_code_isValid && m_order_last_modification_utc_date_isValid && m_order_marketplace_last_modification_utc_date_isValid && m_order_marketplace_order_id_isValid && m_order_purchase_utc_date_isValid && m_order_status_beez_up_order_status_isValid && m_processing_isValid && true;
}

} // namespace OpenAPI
