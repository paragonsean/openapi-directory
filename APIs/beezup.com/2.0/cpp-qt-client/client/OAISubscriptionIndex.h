/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionIndex.h
 *
 * 
 */

#ifndef OAISubscriptionIndex_H
#define OAISubscriptionIndex_H

#include <QJsonObject>

#include "OAIConsumptionAvailabilityStatus.h"
#include "OAIErrorResponseMessage.h"
#include "OAISubscriptionLinks.h"
#include "OAISubscriptionStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorResponseMessage;
class OAISubscriptionLinks;

class OAISubscriptionIndex : public OAIObject {
public:
    OAISubscriptionIndex();
    OAISubscriptionIndex(QString json);
    ~OAISubscriptionIndex() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConsumptionAvailabilityStatus getConsumerHealthStatus() const;
    void setConsumerHealthStatus(const OAIConsumptionAvailabilityStatus &consumer_health_status);
    bool is_consumer_health_status_Set() const;
    bool is_consumer_health_status_Valid() const;

    QString getConsumerLastRequestSentUri() const;
    void setConsumerLastRequestSentUri(const QString &consumer_last_request_sent_uri);
    bool is_consumer_last_request_sent_uri_Set() const;
    bool is_consumer_last_request_sent_uri_Valid() const;

    QDateTime getConsumerUnvailableSinceUtcDate() const;
    void setConsumerUnvailableSinceUtcDate(const QDateTime &consumer_unvailable_since_utc_date);
    bool is_consumer_unvailable_since_utc_date_Set() const;
    bool is_consumer_unvailable_since_utc_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIErrorResponseMessage getLastErrorMessage() const;
    void setLastErrorMessage(const OAIErrorResponseMessage &last_error_message);
    bool is_last_error_message_Set() const;
    bool is_last_error_message_Valid() const;

    QDateTime getLastOrderPushedModificationUtcDate() const;
    void setLastOrderPushedModificationUtcDate(const QDateTime &last_order_pushed_modification_utc_date);
    bool is_last_order_pushed_modification_utc_date_Set() const;
    bool is_last_order_pushed_modification_utc_date_Valid() const;

    QDateTime getLastRetryUtcDate() const;
    void setLastRetryUtcDate(const QDateTime &last_retry_utc_date);
    bool is_last_retry_utc_date_Set() const;
    bool is_last_retry_utc_date_Valid() const;

    QDateTime getLastSuccessfulOrderPushedUtcDate() const;
    void setLastSuccessfulOrderPushedUtcDate(const QDateTime &last_successful_order_pushed_utc_date);
    bool is_last_successful_order_pushed_utc_date_Set() const;
    bool is_last_successful_order_pushed_utc_date_Valid() const;

    qint32 getMaxRetryCount() const;
    void setMaxRetryCount(const qint32 &max_retry_count);
    bool is_max_retry_count_Set() const;
    bool is_max_retry_count_Valid() const;

    QString getMerchantApplicationName() const;
    void setMerchantApplicationName(const QString &merchant_application_name);
    bool is_merchant_application_name_Set() const;
    bool is_merchant_application_name_Valid() const;

    QString getMerchantApplicationVersion() const;
    void setMerchantApplicationVersion(const QString &merchant_application_version);
    bool is_merchant_application_version_Set() const;
    bool is_merchant_application_version_Valid() const;

    QString getMerchantEmailAlert() const;
    void setMerchantEmailAlert(const QString &merchant_email_alert);
    bool is_merchant_email_alert_Set() const;
    bool is_merchant_email_alert_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getNextScheduledRetryUtcDate() const;
    void setNextScheduledRetryUtcDate(const QDateTime &next_scheduled_retry_utc_date);
    bool is_next_scheduled_retry_utc_date_Set() const;
    bool is_next_scheduled_retry_utc_date_Valid() const;

    QDateTime getRecoverBeginPeriodOrderLastModificationUtcDate() const;
    void setRecoverBeginPeriodOrderLastModificationUtcDate(const QDateTime &recover_begin_period_order_last_modification_utc_date);
    bool is_recover_begin_period_order_last_modification_utc_date_Set() const;
    bool is_recover_begin_period_order_last_modification_utc_date_Valid() const;

    QDateTime getRecoverEndPeriodOrderLastModificationUtcDate() const;
    void setRecoverEndPeriodOrderLastModificationUtcDate(const QDateTime &recover_end_period_order_last_modification_utc_date);
    bool is_recover_end_period_order_last_modification_utc_date_Set() const;
    bool is_recover_end_period_order_last_modification_utc_date_Valid() const;

    qint32 getRetryCount() const;
    void setRetryCount(const qint32 &retry_count);
    bool is_retry_count_Set() const;
    bool is_retry_count_Valid() const;

    OAISubscriptionStatus getStatus() const;
    void setStatus(const OAISubscriptionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTargetUrl() const;
    void setTargetUrl(const QString &target_url);
    bool is_target_url_Set() const;
    bool is_target_url_Valid() const;

    OAISubscriptionLinks getLinks() const;
    void setLinks(const OAISubscriptionLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConsumptionAvailabilityStatus m_consumer_health_status;
    bool m_consumer_health_status_isSet;
    bool m_consumer_health_status_isValid;

    QString m_consumer_last_request_sent_uri;
    bool m_consumer_last_request_sent_uri_isSet;
    bool m_consumer_last_request_sent_uri_isValid;

    QDateTime m_consumer_unvailable_since_utc_date;
    bool m_consumer_unvailable_since_utc_date_isSet;
    bool m_consumer_unvailable_since_utc_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIErrorResponseMessage m_last_error_message;
    bool m_last_error_message_isSet;
    bool m_last_error_message_isValid;

    QDateTime m_last_order_pushed_modification_utc_date;
    bool m_last_order_pushed_modification_utc_date_isSet;
    bool m_last_order_pushed_modification_utc_date_isValid;

    QDateTime m_last_retry_utc_date;
    bool m_last_retry_utc_date_isSet;
    bool m_last_retry_utc_date_isValid;

    QDateTime m_last_successful_order_pushed_utc_date;
    bool m_last_successful_order_pushed_utc_date_isSet;
    bool m_last_successful_order_pushed_utc_date_isValid;

    qint32 m_max_retry_count;
    bool m_max_retry_count_isSet;
    bool m_max_retry_count_isValid;

    QString m_merchant_application_name;
    bool m_merchant_application_name_isSet;
    bool m_merchant_application_name_isValid;

    QString m_merchant_application_version;
    bool m_merchant_application_version_isSet;
    bool m_merchant_application_version_isValid;

    QString m_merchant_email_alert;
    bool m_merchant_email_alert_isSet;
    bool m_merchant_email_alert_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_next_scheduled_retry_utc_date;
    bool m_next_scheduled_retry_utc_date_isSet;
    bool m_next_scheduled_retry_utc_date_isValid;

    QDateTime m_recover_begin_period_order_last_modification_utc_date;
    bool m_recover_begin_period_order_last_modification_utc_date_isSet;
    bool m_recover_begin_period_order_last_modification_utc_date_isValid;

    QDateTime m_recover_end_period_order_last_modification_utc_date;
    bool m_recover_end_period_order_last_modification_utc_date_isSet;
    bool m_recover_end_period_order_last_modification_utc_date_isValid;

    qint32 m_retry_count;
    bool m_retry_count_isSet;
    bool m_retry_count_isValid;

    OAISubscriptionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_target_url;
    bool m_target_url_isSet;
    bool m_target_url_isValid;

    OAISubscriptionLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionIndex)

#endif // OAISubscriptionIndex_H
