/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContractInfo.h
 *
 * Describe the conditions of a contract
 */

#ifndef OAIContractInfo_H
#define OAIContractInfo_H

#include <QJsonObject>

#include "OAIFixedAndVariableClickModelInfo.h"
#include "OAIVariableModelInfo.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFixedAndVariableClickModelInfo;
class OAIVariableModelInfo;

class OAIContractInfo : public OAIObject {
public:
    OAIContractInfo();
    OAIContractInfo(QString json);
    ~OAIContractInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAdditionalClickPrice() const;
    void setAdditionalClickPrice(const double &additional_click_price);
    bool is_additional_click_price_Set() const;
    bool is_additional_click_price_Valid() const;

    qint32 getBillingPeriodInMonth() const;
    void setBillingPeriodInMonth(const qint32 &billing_period_in_month);
    bool is_billing_period_in_month_Set() const;
    bool is_billing_period_in_month_Valid() const;

    double getBillingPeriodPercentDiscount() const;
    void setBillingPeriodPercentDiscount(const double &billing_period_percent_discount);
    bool is_billing_period_percent_discount_Set() const;
    bool is_billing_period_percent_discount_Valid() const;

    qint32 getClickIncluded() const;
    void setClickIncluded(const qint32 &click_included);
    bool is_click_included_Set() const;
    bool is_click_included_Valid() const;

    QDateTime getCommitmentCalculatedFinishUtcDate() const;
    void setCommitmentCalculatedFinishUtcDate(const QDateTime &commitment_calculated_finish_utc_date);
    bool is_commitment_calculated_finish_utc_date_Set() const;
    bool is_commitment_calculated_finish_utc_date_Valid() const;

    qint32 getCommitmentPeriodInMonth() const;
    void setCommitmentPeriodInMonth(const qint32 &commitment_period_in_month);
    bool is_commitment_period_in_month_Set() const;
    bool is_commitment_period_in_month_Valid() const;

    QString getContractId() const;
    void setContractId(const QString &contract_id);
    bool is_contract_id_Set() const;
    bool is_contract_id_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getDiscountDurationInMonth() const;
    void setDiscountDurationInMonth(const qint32 &discount_duration_in_month);
    bool is_discount_duration_in_month_Set() const;
    bool is_discount_duration_in_month_Valid() const;

    QDateTime getDiscountEndUtcDate() const;
    void setDiscountEndUtcDate(const QDateTime &discount_end_utc_date);
    bool is_discount_end_utc_date_Set() const;
    bool is_discount_end_utc_date_Valid() const;

    OAIFixedAndVariableClickModelInfo getFixedAndVariableClickInfo() const;
    void setFixedAndVariableClickInfo(const OAIFixedAndVariableClickModelInfo &fixed_and_variable_click_info);
    bool is_fixed_and_variable_click_info_Set() const;
    bool is_fixed_and_variable_click_info_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    QString getIpUserCreation() const;
    void setIpUserCreation(const QString &ip_user_creation);
    bool is_ip_user_creation_Set() const;
    bool is_ip_user_creation_Valid() const;

    QString getIpUserModification() const;
    void setIpUserModification(const QString &ip_user_modification);
    bool is_ip_user_modification_Set() const;
    bool is_ip_user_modification_Valid() const;

    bool isIsCommitmentRenewalAutomatically() const;
    void setIsCommitmentRenewalAutomatically(const bool &is_commitment_renewal_automatically);
    bool is_is_commitment_renewal_automatically_Set() const;
    bool is_is_commitment_renewal_automatically_Valid() const;

    bool isIsModifiableContract() const;
    void setIsModifiableContract(const bool &is_modifiable_contract);
    bool is_is_modifiable_contract_Set() const;
    bool is_is_modifiable_contract_Valid() const;

    qint32 getOfferId() const;
    void setOfferId(const qint32 &offer_id);
    bool is_offer_id_Set() const;
    bool is_offer_id_Valid() const;

    QString getOfferName() const;
    void setOfferName(const QString &offer_name);
    bool is_offer_name_Set() const;
    bool is_offer_name_Valid() const;

    double getPercentDiscount() const;
    void setPercentDiscount(const double &percent_discount);
    bool is_percent_discount_Set() const;
    bool is_percent_discount_Valid() const;

    QDateTime getStartUtcDate() const;
    void setStartUtcDate(const QDateTime &start_utc_date);
    bool is_start_utc_date_Set() const;
    bool is_start_utc_date_Valid() const;

    qint32 getStoreCount() const;
    void setStoreCount(const qint32 &store_count);
    bool is_store_count_Set() const;
    bool is_store_count_Valid() const;

    qint32 getTrialPeriodInMonth() const;
    void setTrialPeriodInMonth(const qint32 &trial_period_in_month);
    bool is_trial_period_in_month_Set() const;
    bool is_trial_period_in_month_Valid() const;

    OAIVariableModelInfo getVariableModelInfo() const;
    void setVariableModelInfo(const OAIVariableModelInfo &variable_model_info);
    bool is_variable_model_info_Set() const;
    bool is_variable_model_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_additional_click_price;
    bool m_additional_click_price_isSet;
    bool m_additional_click_price_isValid;

    qint32 m_billing_period_in_month;
    bool m_billing_period_in_month_isSet;
    bool m_billing_period_in_month_isValid;

    double m_billing_period_percent_discount;
    bool m_billing_period_percent_discount_isSet;
    bool m_billing_period_percent_discount_isValid;

    qint32 m_click_included;
    bool m_click_included_isSet;
    bool m_click_included_isValid;

    QDateTime m_commitment_calculated_finish_utc_date;
    bool m_commitment_calculated_finish_utc_date_isSet;
    bool m_commitment_calculated_finish_utc_date_isValid;

    qint32 m_commitment_period_in_month;
    bool m_commitment_period_in_month_isSet;
    bool m_commitment_period_in_month_isValid;

    QString m_contract_id;
    bool m_contract_id_isSet;
    bool m_contract_id_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_discount_duration_in_month;
    bool m_discount_duration_in_month_isSet;
    bool m_discount_duration_in_month_isValid;

    QDateTime m_discount_end_utc_date;
    bool m_discount_end_utc_date_isSet;
    bool m_discount_end_utc_date_isValid;

    OAIFixedAndVariableClickModelInfo m_fixed_and_variable_click_info;
    bool m_fixed_and_variable_click_info_isSet;
    bool m_fixed_and_variable_click_info_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    QString m_ip_user_creation;
    bool m_ip_user_creation_isSet;
    bool m_ip_user_creation_isValid;

    QString m_ip_user_modification;
    bool m_ip_user_modification_isSet;
    bool m_ip_user_modification_isValid;

    bool m_is_commitment_renewal_automatically;
    bool m_is_commitment_renewal_automatically_isSet;
    bool m_is_commitment_renewal_automatically_isValid;

    bool m_is_modifiable_contract;
    bool m_is_modifiable_contract_isSet;
    bool m_is_modifiable_contract_isValid;

    qint32 m_offer_id;
    bool m_offer_id_isSet;
    bool m_offer_id_isValid;

    QString m_offer_name;
    bool m_offer_name_isSet;
    bool m_offer_name_isValid;

    double m_percent_discount;
    bool m_percent_discount_isSet;
    bool m_percent_discount_isValid;

    QDateTime m_start_utc_date;
    bool m_start_utc_date_isSet;
    bool m_start_utc_date_isValid;

    qint32 m_store_count;
    bool m_store_count_isSet;
    bool m_store_count_isValid;

    qint32 m_trial_period_in_month;
    bool m_trial_period_in_month_isSet;
    bool m_trial_period_in_month_isValid;

    OAIVariableModelInfo m_variable_model_info;
    bool m_variable_model_info_isSet;
    bool m_variable_model_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContractInfo)

#endif // OAIContractInfo_H
