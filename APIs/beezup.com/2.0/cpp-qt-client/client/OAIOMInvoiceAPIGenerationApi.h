/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOMInvoiceAPIGenerationApi_H
#define OAI_OAIOMInvoiceAPIGenerationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIErrorResponseMessage.h"
#include "OAIGenerateBatchOrderInvoiceErrorResponseItem.h"
#include "OAIGenerateBatchOrderInvoiceRequestItem.h"
#include "OAIGenerateOrderInvoiceRequest.h"
#include "OAIGenerateOrderInvoiceResponse.h"
#include "OAIGetOrderInvoicePdfFromHtmlInvoiceUrlRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIPreviewOrderInvoiceRequest.h"
#include "OAIPreviewOrderInvoiceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOMInvoiceAPIGenerationApi : public QObject {
    Q_OBJECT

public:
    OAIOMInvoiceAPIGenerationApi(const int timeOut = 0);
    ~OAIOMInvoiceAPIGenerationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  oai_generate_batch_order_invoice_request_item QList<OAIGenerateBatchOrderInvoiceRequestItem> [required]
    */
    virtual void generateBatchOrderInvoice(const QString &user_name, const QList<OAIGenerateBatchOrderInvoiceRequestItem> &oai_generate_batch_order_invoice_request_item);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  beez_up_order_uuid QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  oai_generate_order_invoice_request OAIGenerateOrderInvoiceRequest [required]
    */
    virtual void generateOrderInvoice(const QString &marketplace_technical_code, const QString &account_id, const QString &beez_up_order_uuid, const QString &user_name, const OAIGenerateOrderInvoiceRequest &oai_generate_order_invoice_request);

    /**
    * @param[in]  oai_get_order_invoice_pdf_from_html_invoice_url_request OAIGetOrderInvoicePdfFromHtmlInvoiceUrlRequest [required]
    */
    virtual void getOrderInvoicePdf(const OAIGetOrderInvoicePdfFromHtmlInvoiceUrlRequest &oai_get_order_invoice_pdf_from_html_invoice_url_request);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  beez_up_order_uuid QString [required]
    * @param[in]  accept_encoding QList<QString> [required]
    * @param[in]  oai_preview_order_invoice_request OAIPreviewOrderInvoiceRequest [required]
    */
    virtual void getOrderInvoicePreview(const QString &marketplace_technical_code, const QString &account_id, const QString &beez_up_order_uuid, const QList<QString> &accept_encoding, const OAIPreviewOrderInvoiceRequest &oai_preview_order_invoice_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateBatchOrderInvoiceCallback(OAIHttpRequestWorker *worker);
    void generateOrderInvoiceCallback(OAIHttpRequestWorker *worker);
    void getOrderInvoicePdfCallback(OAIHttpRequestWorker *worker);
    void getOrderInvoicePreviewCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateBatchOrderInvoiceSignal(QList<OAIGenerateOrderInvoiceResponse> summary);
    void generateOrderInvoiceSignal();
    void getOrderInvoicePdfSignal(OAIHttpFileElement summary);
    void getOrderInvoicePreviewSignal(OAIPreviewOrderInvoiceResponse summary);


    void generateBatchOrderInvoiceSignalFull(OAIHttpRequestWorker *worker, QList<OAIGenerateOrderInvoiceResponse> summary);
    void generateOrderInvoiceSignalFull(OAIHttpRequestWorker *worker);
    void getOrderInvoicePdfSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getOrderInvoicePreviewSignalFull(OAIHttpRequestWorker *worker, OAIPreviewOrderInvoiceResponse summary);

    Q_DECL_DEPRECATED_X("Use generateBatchOrderInvoiceSignalError() instead")
    void generateBatchOrderInvoiceSignalE(QList<OAIGenerateOrderInvoiceResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBatchOrderInvoiceSignalError(QList<OAIGenerateOrderInvoiceResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderInvoiceSignalError() instead")
    void generateOrderInvoiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderInvoiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoicePdfSignalError() instead")
    void getOrderInvoicePdfSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoicePdfSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoicePreviewSignalError() instead")
    void getOrderInvoicePreviewSignalE(OAIPreviewOrderInvoiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoicePreviewSignalError(OAIPreviewOrderInvoiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateBatchOrderInvoiceSignalErrorFull() instead")
    void generateBatchOrderInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateBatchOrderInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateOrderInvoiceSignalErrorFull() instead")
    void generateOrderInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateOrderInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoicePdfSignalErrorFull() instead")
    void getOrderInvoicePdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoicePdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderInvoicePreviewSignalErrorFull() instead")
    void getOrderInvoicePreviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderInvoicePreviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
