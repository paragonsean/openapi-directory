/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerIndexLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerIndexLinks::OAICustomerIndexLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerIndexLinks::OAICustomerIndexLinks() {
    this->initializeModel();
}

OAICustomerIndexLinks::~OAICustomerIndexLinks() {}

void OAICustomerIndexLinks::initializeModel() {

    m_account_info_isSet = false;
    m_account_info_isValid = false;

    m_billing_periods_isSet = false;
    m_billing_periods_isValid = false;

    m_contracts_isSet = false;
    m_contracts_isValid = false;

    m_friend_info_isSet = false;
    m_friend_info_isValid = false;

    m_get_offer_isSet = false;
    m_get_offer_isValid = false;

    m_invoices_isSet = false;
    m_invoices_isValid = false;

    m_logout_isSet = false;
    m_logout_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_standard_offers_isSet = false;
    m_standard_offers_isValid = false;

    m_stores_isSet = false;
    m_stores_isValid = false;
}

void OAICustomerIndexLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerIndexLinks::fromJsonObject(QJsonObject json) {

    m_account_info_isValid = ::OpenAPI::fromJsonValue(m_account_info, json[QString("accountInfo")]);
    m_account_info_isSet = !json[QString("accountInfo")].isNull() && m_account_info_isValid;

    m_billing_periods_isValid = ::OpenAPI::fromJsonValue(m_billing_periods, json[QString("billingPeriods")]);
    m_billing_periods_isSet = !json[QString("billingPeriods")].isNull() && m_billing_periods_isValid;

    m_contracts_isValid = ::OpenAPI::fromJsonValue(m_contracts, json[QString("contracts")]);
    m_contracts_isSet = !json[QString("contracts")].isNull() && m_contracts_isValid;

    m_friend_info_isValid = ::OpenAPI::fromJsonValue(m_friend_info, json[QString("friendInfo")]);
    m_friend_info_isSet = !json[QString("friendInfo")].isNull() && m_friend_info_isValid;

    m_get_offer_isValid = ::OpenAPI::fromJsonValue(m_get_offer, json[QString("getOffer")]);
    m_get_offer_isSet = !json[QString("getOffer")].isNull() && m_get_offer_isValid;

    m_invoices_isValid = ::OpenAPI::fromJsonValue(m_invoices, json[QString("invoices")]);
    m_invoices_isSet = !json[QString("invoices")].isNull() && m_invoices_isValid;

    m_logout_isValid = ::OpenAPI::fromJsonValue(m_logout, json[QString("logout")]);
    m_logout_isSet = !json[QString("logout")].isNull() && m_logout_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_standard_offers_isValid = ::OpenAPI::fromJsonValue(m_standard_offers, json[QString("standardOffers")]);
    m_standard_offers_isSet = !json[QString("standardOffers")].isNull() && m_standard_offers_isValid;

    m_stores_isValid = ::OpenAPI::fromJsonValue(m_stores, json[QString("stores")]);
    m_stores_isSet = !json[QString("stores")].isNull() && m_stores_isValid;
}

QString OAICustomerIndexLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerIndexLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_account_info.isSet()) {
        obj.insert(QString("accountInfo"), ::OpenAPI::toJsonValue(m_account_info));
    }
    if (m_billing_periods.isSet()) {
        obj.insert(QString("billingPeriods"), ::OpenAPI::toJsonValue(m_billing_periods));
    }
    if (m_contracts.isSet()) {
        obj.insert(QString("contracts"), ::OpenAPI::toJsonValue(m_contracts));
    }
    if (m_friend_info.isSet()) {
        obj.insert(QString("friendInfo"), ::OpenAPI::toJsonValue(m_friend_info));
    }
    if (m_get_offer.isSet()) {
        obj.insert(QString("getOffer"), ::OpenAPI::toJsonValue(m_get_offer));
    }
    if (m_invoices.isSet()) {
        obj.insert(QString("invoices"), ::OpenAPI::toJsonValue(m_invoices));
    }
    if (m_logout.isSet()) {
        obj.insert(QString("logout"), ::OpenAPI::toJsonValue(m_logout));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_standard_offers.isSet()) {
        obj.insert(QString("standardOffers"), ::OpenAPI::toJsonValue(m_standard_offers));
    }
    if (m_stores.isSet()) {
        obj.insert(QString("stores"), ::OpenAPI::toJsonValue(m_stores));
    }
    return obj;
}

OAILinks_getUserAccountInfoLink OAICustomerIndexLinks::getAccountInfo() const {
    return m_account_info;
}
void OAICustomerIndexLinks::setAccountInfo(const OAILinks_getUserAccountInfoLink &account_info) {
    m_account_info = account_info;
    m_account_info_isSet = true;
}

bool OAICustomerIndexLinks::is_account_info_Set() const{
    return m_account_info_isSet;
}

bool OAICustomerIndexLinks::is_account_info_Valid() const{
    return m_account_info_isValid;
}

OAILinks_getBillingPeriodsLink OAICustomerIndexLinks::getBillingPeriods() const {
    return m_billing_periods;
}
void OAICustomerIndexLinks::setBillingPeriods(const OAILinks_getBillingPeriodsLink &billing_periods) {
    m_billing_periods = billing_periods;
    m_billing_periods_isSet = true;
}

bool OAICustomerIndexLinks::is_billing_periods_Set() const{
    return m_billing_periods_isSet;
}

bool OAICustomerIndexLinks::is_billing_periods_Valid() const{
    return m_billing_periods_isValid;
}

OAILinks_getContractsLink OAICustomerIndexLinks::getContracts() const {
    return m_contracts;
}
void OAICustomerIndexLinks::setContracts(const OAILinks_getContractsLink &contracts) {
    m_contracts = contracts;
    m_contracts_isSet = true;
}

bool OAICustomerIndexLinks::is_contracts_Set() const{
    return m_contracts_isSet;
}

bool OAICustomerIndexLinks::is_contracts_Valid() const{
    return m_contracts_isValid;
}

OAILinks_getFriendInfoLink OAICustomerIndexLinks::getFriendInfo() const {
    return m_friend_info;
}
void OAICustomerIndexLinks::setFriendInfo(const OAILinks_getFriendInfoLink &friend_info) {
    m_friend_info = friend_info;
    m_friend_info_isSet = true;
}

bool OAICustomerIndexLinks::is_friend_info_Set() const{
    return m_friend_info_isSet;
}

bool OAICustomerIndexLinks::is_friend_info_Valid() const{
    return m_friend_info_isValid;
}

OAILinks_getOfferLink OAICustomerIndexLinks::getGetOffer() const {
    return m_get_offer;
}
void OAICustomerIndexLinks::setGetOffer(const OAILinks_getOfferLink &get_offer) {
    m_get_offer = get_offer;
    m_get_offer_isSet = true;
}

bool OAICustomerIndexLinks::is_get_offer_Set() const{
    return m_get_offer_isSet;
}

bool OAICustomerIndexLinks::is_get_offer_Valid() const{
    return m_get_offer_isValid;
}

OAILinks_getInvoicesLink OAICustomerIndexLinks::getInvoices() const {
    return m_invoices;
}
void OAICustomerIndexLinks::setInvoices(const OAILinks_getInvoicesLink &invoices) {
    m_invoices = invoices;
    m_invoices_isSet = true;
}

bool OAICustomerIndexLinks::is_invoices_Set() const{
    return m_invoices_isSet;
}

bool OAICustomerIndexLinks::is_invoices_Valid() const{
    return m_invoices_isValid;
}

OAILinks_logoutLink OAICustomerIndexLinks::getLogout() const {
    return m_logout;
}
void OAICustomerIndexLinks::setLogout(const OAILinks_logoutLink &logout) {
    m_logout = logout;
    m_logout_isSet = true;
}

bool OAICustomerIndexLinks::is_logout_Set() const{
    return m_logout_isSet;
}

bool OAICustomerIndexLinks::is_logout_Valid() const{
    return m_logout_isValid;
}

OAILinks_GetCustomerIndexLink OAICustomerIndexLinks::getSelf() const {
    return m_self;
}
void OAICustomerIndexLinks::setSelf(const OAILinks_GetCustomerIndexLink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAICustomerIndexLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAICustomerIndexLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAILinks_getStandardOffersLink OAICustomerIndexLinks::getStandardOffers() const {
    return m_standard_offers;
}
void OAICustomerIndexLinks::setStandardOffers(const OAILinks_getStandardOffersLink &standard_offers) {
    m_standard_offers = standard_offers;
    m_standard_offers_isSet = true;
}

bool OAICustomerIndexLinks::is_standard_offers_Set() const{
    return m_standard_offers_isSet;
}

bool OAICustomerIndexLinks::is_standard_offers_Valid() const{
    return m_standard_offers_isValid;
}

OAILinks_getStoresLink OAICustomerIndexLinks::getStores() const {
    return m_stores;
}
void OAICustomerIndexLinks::setStores(const OAILinks_getStoresLink &stores) {
    m_stores = stores;
    m_stores_isSet = true;
}

bool OAICustomerIndexLinks::is_stores_Set() const{
    return m_stores_isSet;
}

bool OAICustomerIndexLinks::is_stores_Valid() const{
    return m_stores_isValid;
}

bool OAICustomerIndexLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_periods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contracts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friend_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_offers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerIndexLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_info_isValid && m_billing_periods_isValid && m_friend_info_isValid && m_self_isValid && m_standard_offers_isValid && true;
}

} // namespace OpenAPI
