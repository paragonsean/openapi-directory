/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProductsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProductsRequest::OAIGetProductsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProductsRequest::OAIGetProductsRequest() {
    this->initializeModel();
}

OAIGetProductsRequest::~OAIGetProductsRequest() {}

void OAIGetProductsRequest::initializeModel() {

    m_category_path_isSet = false;
    m_category_path_isValid = false;

    m_column_id_list_isSet = false;
    m_column_id_list_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_exists_isSet = false;
    m_exists_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_order_by_catalog_column_id_isSet = false;
    m_order_by_catalog_column_id_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_product_id_list_isSet = false;
    m_product_id_list_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_without_sub_categories_isSet = false;
    m_without_sub_categories_isValid = false;
}

void OAIGetProductsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProductsRequest::fromJsonObject(QJsonObject json) {

    m_category_path_isValid = ::OpenAPI::fromJsonValue(m_category_path, json[QString("categoryPath")]);
    m_category_path_isSet = !json[QString("categoryPath")].isNull() && m_category_path_isValid;

    m_column_id_list_isValid = ::OpenAPI::fromJsonValue(m_column_id_list, json[QString("columnIdList")]);
    m_column_id_list_isSet = !json[QString("columnIdList")].isNull() && m_column_id_list_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_exists_isValid = ::OpenAPI::fromJsonValue(m_exists, json[QString("exists")]);
    m_exists_isSet = !json[QString("exists")].isNull() && m_exists_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_order_by_catalog_column_id_isValid = ::OpenAPI::fromJsonValue(m_order_by_catalog_column_id, json[QString("orderByCatalogColumnId")]);
    m_order_by_catalog_column_id_isSet = !json[QString("orderByCatalogColumnId")].isNull() && m_order_by_catalog_column_id_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_product_id_list_isValid = ::OpenAPI::fromJsonValue(m_product_id_list, json[QString("productIdList")]);
    m_product_id_list_isSet = !json[QString("productIdList")].isNull() && m_product_id_list_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_without_sub_categories_isValid = ::OpenAPI::fromJsonValue(m_without_sub_categories, json[QString("withoutSubCategories")]);
    m_without_sub_categories_isSet = !json[QString("withoutSubCategories")].isNull() && m_without_sub_categories_isValid;
}

QString OAIGetProductsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProductsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_path.size() > 0) {
        obj.insert(QString("categoryPath"), ::OpenAPI::toJsonValue(m_category_path));
    }
    if (m_column_id_list.size() > 0) {
        obj.insert(QString("columnIdList"), ::OpenAPI::toJsonValue(m_column_id_list));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_exists_isSet) {
        obj.insert(QString("exists"), ::OpenAPI::toJsonValue(m_exists));
    }
    if (m_mpn_isSet) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_order_by_catalog_column_id_isSet) {
        obj.insert(QString("orderByCatalogColumnId"), ::OpenAPI::toJsonValue(m_order_by_catalog_column_id));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_product_id_list.size() > 0) {
        obj.insert(QString("productIdList"), ::OpenAPI::toJsonValue(m_product_id_list));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_without_sub_categories_isSet) {
        obj.insert(QString("withoutSubCategories"), ::OpenAPI::toJsonValue(m_without_sub_categories));
    }
    return obj;
}

QList<QString> OAIGetProductsRequest::getCategoryPath() const {
    return m_category_path;
}
void OAIGetProductsRequest::setCategoryPath(const QList<QString> &category_path) {
    m_category_path = category_path;
    m_category_path_isSet = true;
}

bool OAIGetProductsRequest::is_category_path_Set() const{
    return m_category_path_isSet;
}

bool OAIGetProductsRequest::is_category_path_Valid() const{
    return m_category_path_isValid;
}

QList<QString> OAIGetProductsRequest::getColumnIdList() const {
    return m_column_id_list;
}
void OAIGetProductsRequest::setColumnIdList(const QList<QString> &column_id_list) {
    m_column_id_list = column_id_list;
    m_column_id_list_isSet = true;
}

bool OAIGetProductsRequest::is_column_id_list_Set() const{
    return m_column_id_list_isSet;
}

bool OAIGetProductsRequest::is_column_id_list_Valid() const{
    return m_column_id_list_isValid;
}

QString OAIGetProductsRequest::getEan() const {
    return m_ean;
}
void OAIGetProductsRequest::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIGetProductsRequest::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIGetProductsRequest::is_ean_Valid() const{
    return m_ean_isValid;
}

bool OAIGetProductsRequest::isExists() const {
    return m_exists;
}
void OAIGetProductsRequest::setExists(const bool &exists) {
    m_exists = exists;
    m_exists_isSet = true;
}

bool OAIGetProductsRequest::is_exists_Set() const{
    return m_exists_isSet;
}

bool OAIGetProductsRequest::is_exists_Valid() const{
    return m_exists_isValid;
}

QString OAIGetProductsRequest::getMpn() const {
    return m_mpn;
}
void OAIGetProductsRequest::setMpn(const QString &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIGetProductsRequest::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIGetProductsRequest::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QString OAIGetProductsRequest::getOrderByCatalogColumnId() const {
    return m_order_by_catalog_column_id;
}
void OAIGetProductsRequest::setOrderByCatalogColumnId(const QString &order_by_catalog_column_id) {
    m_order_by_catalog_column_id = order_by_catalog_column_id;
    m_order_by_catalog_column_id_isSet = true;
}

bool OAIGetProductsRequest::is_order_by_catalog_column_id_Set() const{
    return m_order_by_catalog_column_id_isSet;
}

bool OAIGetProductsRequest::is_order_by_catalog_column_id_Valid() const{
    return m_order_by_catalog_column_id_isValid;
}

qint32 OAIGetProductsRequest::getPageNumber() const {
    return m_page_number;
}
void OAIGetProductsRequest::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIGetProductsRequest::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIGetProductsRequest::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIGetProductsRequest::getPageSize() const {
    return m_page_size;
}
void OAIGetProductsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGetProductsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGetProductsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<QString> OAIGetProductsRequest::getProductIdList() const {
    return m_product_id_list;
}
void OAIGetProductsRequest::setProductIdList(const QList<QString> &product_id_list) {
    m_product_id_list = product_id_list;
    m_product_id_list_isSet = true;
}

bool OAIGetProductsRequest::is_product_id_list_Set() const{
    return m_product_id_list_isSet;
}

bool OAIGetProductsRequest::is_product_id_list_Valid() const{
    return m_product_id_list_isValid;
}

QString OAIGetProductsRequest::getSku() const {
    return m_sku;
}
void OAIGetProductsRequest::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIGetProductsRequest::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIGetProductsRequest::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIGetProductsRequest::getTitle() const {
    return m_title;
}
void OAIGetProductsRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetProductsRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetProductsRequest::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGetProductsRequest::isWithoutSubCategories() const {
    return m_without_sub_categories;
}
void OAIGetProductsRequest::setWithoutSubCategories(const bool &without_sub_categories) {
    m_without_sub_categories = without_sub_categories;
    m_without_sub_categories_isSet = true;
}

bool OAIGetProductsRequest::is_without_sub_categories_Set() const{
    return m_without_sub_categories_isSet;
}

bool OAIGetProductsRequest::is_without_sub_categories_Valid() const{
    return m_without_sub_categories_isValid;
}

bool OAIGetProductsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_path.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_catalog_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_without_sub_categories_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProductsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_number_isValid && m_page_size_isValid && true;
}

} // namespace OpenAPI
