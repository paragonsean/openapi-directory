/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStore.h
 *
 * 
 */

#ifndef OAIStore_H
#define OAIStore_H

#include <QJsonObject>

#include "OAIStoreLinks.h"
#include "OAIStoreStatus.h"
#include "OAIStoreUserRole.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStoreLinks;

class OAIStore : public OAIObject {
public:
    OAIStore();
    OAIStore(QString json);
    ~OAIStore() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryIsoCodeAlpha3() const;
    void setCountryIsoCodeAlpha3(const QString &country_iso_code_alpha3);
    bool is_country_iso_code_alpha3_Set() const;
    bool is_country_iso_code_alpha3_Valid() const;

    QDateTime getCreationUtcDate() const;
    void setCreationUtcDate(const QDateTime &creation_utc_date);
    bool is_creation_utc_date_Set() const;
    bool is_creation_utc_date_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getGoVersion() const;
    void setGoVersion(const qint32 &go_version);
    bool is_go_version_Set() const;
    bool is_go_version_Valid() const;

    bool isIsTest() const;
    void setIsTest(const bool &is_test);
    bool is_is_test_Set() const;
    bool is_is_test_Valid() const;

    OAIStoreLinks getLinks() const;
    void setLinks(const OAIStoreLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOfferId() const;
    void setOfferId(const qint32 &offer_id);
    bool is_offer_id_Set() const;
    bool is_offer_id_Valid() const;

    QString getOfferName() const;
    void setOfferName(const QString &offer_name);
    bool is_offer_name_Set() const;
    bool is_offer_name_Valid() const;

    QString getOwnerUserId() const;
    void setOwnerUserId(const QString &owner_user_id);
    bool is_owner_user_id_Set() const;
    bool is_owner_user_id_Valid() const;

    QList<QString> getSectors() const;
    void setSectors(const QList<QString> &sectors);
    bool is_sectors_Set() const;
    bool is_sectors_Valid() const;

    qint32 getShareCount() const;
    void setShareCount(const qint32 &share_count);
    bool is_share_count_Set() const;
    bool is_share_count_Valid() const;

    OAIStoreStatus getStatus() const;
    void setStatus(const OAIStoreStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStoreId() const;
    void setStoreId(const QString &store_id);
    bool is_store_id_Set() const;
    bool is_store_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAIStoreUserRole getUserRole() const;
    void setUserRole(const OAIStoreUserRole &user_role);
    bool is_user_role_Set() const;
    bool is_user_role_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_iso_code_alpha3;
    bool m_country_iso_code_alpha3_isSet;
    bool m_country_iso_code_alpha3_isValid;

    QDateTime m_creation_utc_date;
    bool m_creation_utc_date_isSet;
    bool m_creation_utc_date_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_go_version;
    bool m_go_version_isSet;
    bool m_go_version_isValid;

    bool m_is_test;
    bool m_is_test_isSet;
    bool m_is_test_isValid;

    OAIStoreLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_offer_id;
    bool m_offer_id_isSet;
    bool m_offer_id_isValid;

    QString m_offer_name;
    bool m_offer_name_isSet;
    bool m_offer_name_isValid;

    QString m_owner_user_id;
    bool m_owner_user_id_isSet;
    bool m_owner_user_id_isValid;

    QList<QString> m_sectors;
    bool m_sectors_isSet;
    bool m_sectors_isValid;

    qint32 m_share_count;
    bool m_share_count_isSet;
    bool m_share_count_isValid;

    OAIStoreStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_store_id;
    bool m_store_id_isSet;
    bool m_store_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAIStoreUserRole m_user_role;
    bool m_user_role_isSet;
    bool m_user_role_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStore)

#endif // OAIStore_H
