/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_consumer_health_status_isSet = false;
    m_consumer_health_status_isValid = false;

    m_consumer_last_request_sent_uri_isSet = false;
    m_consumer_last_request_sent_uri_isValid = false;

    m_consumer_unvailable_since_utc_date_isSet = false;
    m_consumer_unvailable_since_utc_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_error_message_isSet = false;
    m_last_error_message_isValid = false;

    m_last_order_pushed_modification_utc_date_isSet = false;
    m_last_order_pushed_modification_utc_date_isValid = false;

    m_last_retry_utc_date_isSet = false;
    m_last_retry_utc_date_isValid = false;

    m_last_successful_order_pushed_utc_date_isSet = false;
    m_last_successful_order_pushed_utc_date_isValid = false;

    m_max_retry_count_isSet = false;
    m_max_retry_count_isValid = false;

    m_merchant_application_name_isSet = false;
    m_merchant_application_name_isValid = false;

    m_merchant_application_version_isSet = false;
    m_merchant_application_version_isValid = false;

    m_merchant_email_alert_isSet = false;
    m_merchant_email_alert_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_scheduled_retry_utc_date_isSet = false;
    m_next_scheduled_retry_utc_date_isValid = false;

    m_recover_begin_period_order_last_modification_utc_date_isSet = false;
    m_recover_begin_period_order_last_modification_utc_date_isValid = false;

    m_recover_end_period_order_last_modification_utc_date_isSet = false;
    m_recover_end_period_order_last_modification_utc_date_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_consumer_health_status_isValid = ::OpenAPI::fromJsonValue(m_consumer_health_status, json[QString("consumerHealthStatus")]);
    m_consumer_health_status_isSet = !json[QString("consumerHealthStatus")].isNull() && m_consumer_health_status_isValid;

    m_consumer_last_request_sent_uri_isValid = ::OpenAPI::fromJsonValue(m_consumer_last_request_sent_uri, json[QString("consumerLastRequestSentUri")]);
    m_consumer_last_request_sent_uri_isSet = !json[QString("consumerLastRequestSentUri")].isNull() && m_consumer_last_request_sent_uri_isValid;

    m_consumer_unvailable_since_utc_date_isValid = ::OpenAPI::fromJsonValue(m_consumer_unvailable_since_utc_date, json[QString("consumerUnvailableSinceUtcDate")]);
    m_consumer_unvailable_since_utc_date_isSet = !json[QString("consumerUnvailableSinceUtcDate")].isNull() && m_consumer_unvailable_since_utc_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_error_message_isValid = ::OpenAPI::fromJsonValue(m_last_error_message, json[QString("lastErrorMessage")]);
    m_last_error_message_isSet = !json[QString("lastErrorMessage")].isNull() && m_last_error_message_isValid;

    m_last_order_pushed_modification_utc_date_isValid = ::OpenAPI::fromJsonValue(m_last_order_pushed_modification_utc_date, json[QString("lastOrderPushedModificationUtcDate")]);
    m_last_order_pushed_modification_utc_date_isSet = !json[QString("lastOrderPushedModificationUtcDate")].isNull() && m_last_order_pushed_modification_utc_date_isValid;

    m_last_retry_utc_date_isValid = ::OpenAPI::fromJsonValue(m_last_retry_utc_date, json[QString("lastRetryUtcDate")]);
    m_last_retry_utc_date_isSet = !json[QString("lastRetryUtcDate")].isNull() && m_last_retry_utc_date_isValid;

    m_last_successful_order_pushed_utc_date_isValid = ::OpenAPI::fromJsonValue(m_last_successful_order_pushed_utc_date, json[QString("lastSuccessfulOrderPushedUtcDate")]);
    m_last_successful_order_pushed_utc_date_isSet = !json[QString("lastSuccessfulOrderPushedUtcDate")].isNull() && m_last_successful_order_pushed_utc_date_isValid;

    m_max_retry_count_isValid = ::OpenAPI::fromJsonValue(m_max_retry_count, json[QString("maxRetryCount")]);
    m_max_retry_count_isSet = !json[QString("maxRetryCount")].isNull() && m_max_retry_count_isValid;

    m_merchant_application_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_application_name, json[QString("merchantApplicationName")]);
    m_merchant_application_name_isSet = !json[QString("merchantApplicationName")].isNull() && m_merchant_application_name_isValid;

    m_merchant_application_version_isValid = ::OpenAPI::fromJsonValue(m_merchant_application_version, json[QString("merchantApplicationVersion")]);
    m_merchant_application_version_isSet = !json[QString("merchantApplicationVersion")].isNull() && m_merchant_application_version_isValid;

    m_merchant_email_alert_isValid = ::OpenAPI::fromJsonValue(m_merchant_email_alert, json[QString("merchantEmailAlert")]);
    m_merchant_email_alert_isSet = !json[QString("merchantEmailAlert")].isNull() && m_merchant_email_alert_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_scheduled_retry_utc_date_isValid = ::OpenAPI::fromJsonValue(m_next_scheduled_retry_utc_date, json[QString("nextScheduledRetryUtcDate")]);
    m_next_scheduled_retry_utc_date_isSet = !json[QString("nextScheduledRetryUtcDate")].isNull() && m_next_scheduled_retry_utc_date_isValid;

    m_recover_begin_period_order_last_modification_utc_date_isValid = ::OpenAPI::fromJsonValue(m_recover_begin_period_order_last_modification_utc_date, json[QString("recoverBeginPeriodOrderLastModificationUtcDate")]);
    m_recover_begin_period_order_last_modification_utc_date_isSet = !json[QString("recoverBeginPeriodOrderLastModificationUtcDate")].isNull() && m_recover_begin_period_order_last_modification_utc_date_isValid;

    m_recover_end_period_order_last_modification_utc_date_isValid = ::OpenAPI::fromJsonValue(m_recover_end_period_order_last_modification_utc_date, json[QString("recoverEndPeriodOrderLastModificationUtcDate")]);
    m_recover_end_period_order_last_modification_utc_date_isSet = !json[QString("recoverEndPeriodOrderLastModificationUtcDate")].isNull() && m_recover_end_period_order_last_modification_utc_date_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_health_status.isSet()) {
        obj.insert(QString("consumerHealthStatus"), ::OpenAPI::toJsonValue(m_consumer_health_status));
    }
    if (m_consumer_last_request_sent_uri_isSet) {
        obj.insert(QString("consumerLastRequestSentUri"), ::OpenAPI::toJsonValue(m_consumer_last_request_sent_uri));
    }
    if (m_consumer_unvailable_since_utc_date_isSet) {
        obj.insert(QString("consumerUnvailableSinceUtcDate"), ::OpenAPI::toJsonValue(m_consumer_unvailable_since_utc_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_error_message.isSet()) {
        obj.insert(QString("lastErrorMessage"), ::OpenAPI::toJsonValue(m_last_error_message));
    }
    if (m_last_order_pushed_modification_utc_date_isSet) {
        obj.insert(QString("lastOrderPushedModificationUtcDate"), ::OpenAPI::toJsonValue(m_last_order_pushed_modification_utc_date));
    }
    if (m_last_retry_utc_date_isSet) {
        obj.insert(QString("lastRetryUtcDate"), ::OpenAPI::toJsonValue(m_last_retry_utc_date));
    }
    if (m_last_successful_order_pushed_utc_date_isSet) {
        obj.insert(QString("lastSuccessfulOrderPushedUtcDate"), ::OpenAPI::toJsonValue(m_last_successful_order_pushed_utc_date));
    }
    if (m_max_retry_count_isSet) {
        obj.insert(QString("maxRetryCount"), ::OpenAPI::toJsonValue(m_max_retry_count));
    }
    if (m_merchant_application_name_isSet) {
        obj.insert(QString("merchantApplicationName"), ::OpenAPI::toJsonValue(m_merchant_application_name));
    }
    if (m_merchant_application_version_isSet) {
        obj.insert(QString("merchantApplicationVersion"), ::OpenAPI::toJsonValue(m_merchant_application_version));
    }
    if (m_merchant_email_alert_isSet) {
        obj.insert(QString("merchantEmailAlert"), ::OpenAPI::toJsonValue(m_merchant_email_alert));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_scheduled_retry_utc_date_isSet) {
        obj.insert(QString("nextScheduledRetryUtcDate"), ::OpenAPI::toJsonValue(m_next_scheduled_retry_utc_date));
    }
    if (m_recover_begin_period_order_last_modification_utc_date_isSet) {
        obj.insert(QString("recoverBeginPeriodOrderLastModificationUtcDate"), ::OpenAPI::toJsonValue(m_recover_begin_period_order_last_modification_utc_date));
    }
    if (m_recover_end_period_order_last_modification_utc_date_isSet) {
        obj.insert(QString("recoverEndPeriodOrderLastModificationUtcDate"), ::OpenAPI::toJsonValue(m_recover_end_period_order_last_modification_utc_date));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

OAIConsumptionAvailabilityStatus OAISubscription::getConsumerHealthStatus() const {
    return m_consumer_health_status;
}
void OAISubscription::setConsumerHealthStatus(const OAIConsumptionAvailabilityStatus &consumer_health_status) {
    m_consumer_health_status = consumer_health_status;
    m_consumer_health_status_isSet = true;
}

bool OAISubscription::is_consumer_health_status_Set() const{
    return m_consumer_health_status_isSet;
}

bool OAISubscription::is_consumer_health_status_Valid() const{
    return m_consumer_health_status_isValid;
}

QString OAISubscription::getConsumerLastRequestSentUri() const {
    return m_consumer_last_request_sent_uri;
}
void OAISubscription::setConsumerLastRequestSentUri(const QString &consumer_last_request_sent_uri) {
    m_consumer_last_request_sent_uri = consumer_last_request_sent_uri;
    m_consumer_last_request_sent_uri_isSet = true;
}

bool OAISubscription::is_consumer_last_request_sent_uri_Set() const{
    return m_consumer_last_request_sent_uri_isSet;
}

bool OAISubscription::is_consumer_last_request_sent_uri_Valid() const{
    return m_consumer_last_request_sent_uri_isValid;
}

QDateTime OAISubscription::getConsumerUnvailableSinceUtcDate() const {
    return m_consumer_unvailable_since_utc_date;
}
void OAISubscription::setConsumerUnvailableSinceUtcDate(const QDateTime &consumer_unvailable_since_utc_date) {
    m_consumer_unvailable_since_utc_date = consumer_unvailable_since_utc_date;
    m_consumer_unvailable_since_utc_date_isSet = true;
}

bool OAISubscription::is_consumer_unvailable_since_utc_date_Set() const{
    return m_consumer_unvailable_since_utc_date_isSet;
}

bool OAISubscription::is_consumer_unvailable_since_utc_date_Valid() const{
    return m_consumer_unvailable_since_utc_date_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

OAIErrorResponseMessage OAISubscription::getLastErrorMessage() const {
    return m_last_error_message;
}
void OAISubscription::setLastErrorMessage(const OAIErrorResponseMessage &last_error_message) {
    m_last_error_message = last_error_message;
    m_last_error_message_isSet = true;
}

bool OAISubscription::is_last_error_message_Set() const{
    return m_last_error_message_isSet;
}

bool OAISubscription::is_last_error_message_Valid() const{
    return m_last_error_message_isValid;
}

QDateTime OAISubscription::getLastOrderPushedModificationUtcDate() const {
    return m_last_order_pushed_modification_utc_date;
}
void OAISubscription::setLastOrderPushedModificationUtcDate(const QDateTime &last_order_pushed_modification_utc_date) {
    m_last_order_pushed_modification_utc_date = last_order_pushed_modification_utc_date;
    m_last_order_pushed_modification_utc_date_isSet = true;
}

bool OAISubscription::is_last_order_pushed_modification_utc_date_Set() const{
    return m_last_order_pushed_modification_utc_date_isSet;
}

bool OAISubscription::is_last_order_pushed_modification_utc_date_Valid() const{
    return m_last_order_pushed_modification_utc_date_isValid;
}

QDateTime OAISubscription::getLastRetryUtcDate() const {
    return m_last_retry_utc_date;
}
void OAISubscription::setLastRetryUtcDate(const QDateTime &last_retry_utc_date) {
    m_last_retry_utc_date = last_retry_utc_date;
    m_last_retry_utc_date_isSet = true;
}

bool OAISubscription::is_last_retry_utc_date_Set() const{
    return m_last_retry_utc_date_isSet;
}

bool OAISubscription::is_last_retry_utc_date_Valid() const{
    return m_last_retry_utc_date_isValid;
}

QDateTime OAISubscription::getLastSuccessfulOrderPushedUtcDate() const {
    return m_last_successful_order_pushed_utc_date;
}
void OAISubscription::setLastSuccessfulOrderPushedUtcDate(const QDateTime &last_successful_order_pushed_utc_date) {
    m_last_successful_order_pushed_utc_date = last_successful_order_pushed_utc_date;
    m_last_successful_order_pushed_utc_date_isSet = true;
}

bool OAISubscription::is_last_successful_order_pushed_utc_date_Set() const{
    return m_last_successful_order_pushed_utc_date_isSet;
}

bool OAISubscription::is_last_successful_order_pushed_utc_date_Valid() const{
    return m_last_successful_order_pushed_utc_date_isValid;
}

qint32 OAISubscription::getMaxRetryCount() const {
    return m_max_retry_count;
}
void OAISubscription::setMaxRetryCount(const qint32 &max_retry_count) {
    m_max_retry_count = max_retry_count;
    m_max_retry_count_isSet = true;
}

bool OAISubscription::is_max_retry_count_Set() const{
    return m_max_retry_count_isSet;
}

bool OAISubscription::is_max_retry_count_Valid() const{
    return m_max_retry_count_isValid;
}

QString OAISubscription::getMerchantApplicationName() const {
    return m_merchant_application_name;
}
void OAISubscription::setMerchantApplicationName(const QString &merchant_application_name) {
    m_merchant_application_name = merchant_application_name;
    m_merchant_application_name_isSet = true;
}

bool OAISubscription::is_merchant_application_name_Set() const{
    return m_merchant_application_name_isSet;
}

bool OAISubscription::is_merchant_application_name_Valid() const{
    return m_merchant_application_name_isValid;
}

QString OAISubscription::getMerchantApplicationVersion() const {
    return m_merchant_application_version;
}
void OAISubscription::setMerchantApplicationVersion(const QString &merchant_application_version) {
    m_merchant_application_version = merchant_application_version;
    m_merchant_application_version_isSet = true;
}

bool OAISubscription::is_merchant_application_version_Set() const{
    return m_merchant_application_version_isSet;
}

bool OAISubscription::is_merchant_application_version_Valid() const{
    return m_merchant_application_version_isValid;
}

QString OAISubscription::getMerchantEmailAlert() const {
    return m_merchant_email_alert;
}
void OAISubscription::setMerchantEmailAlert(const QString &merchant_email_alert) {
    m_merchant_email_alert = merchant_email_alert;
    m_merchant_email_alert_isSet = true;
}

bool OAISubscription::is_merchant_email_alert_Set() const{
    return m_merchant_email_alert_isSet;
}

bool OAISubscription::is_merchant_email_alert_Valid() const{
    return m_merchant_email_alert_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAISubscription::getNextScheduledRetryUtcDate() const {
    return m_next_scheduled_retry_utc_date;
}
void OAISubscription::setNextScheduledRetryUtcDate(const QDateTime &next_scheduled_retry_utc_date) {
    m_next_scheduled_retry_utc_date = next_scheduled_retry_utc_date;
    m_next_scheduled_retry_utc_date_isSet = true;
}

bool OAISubscription::is_next_scheduled_retry_utc_date_Set() const{
    return m_next_scheduled_retry_utc_date_isSet;
}

bool OAISubscription::is_next_scheduled_retry_utc_date_Valid() const{
    return m_next_scheduled_retry_utc_date_isValid;
}

QDateTime OAISubscription::getRecoverBeginPeriodOrderLastModificationUtcDate() const {
    return m_recover_begin_period_order_last_modification_utc_date;
}
void OAISubscription::setRecoverBeginPeriodOrderLastModificationUtcDate(const QDateTime &recover_begin_period_order_last_modification_utc_date) {
    m_recover_begin_period_order_last_modification_utc_date = recover_begin_period_order_last_modification_utc_date;
    m_recover_begin_period_order_last_modification_utc_date_isSet = true;
}

bool OAISubscription::is_recover_begin_period_order_last_modification_utc_date_Set() const{
    return m_recover_begin_period_order_last_modification_utc_date_isSet;
}

bool OAISubscription::is_recover_begin_period_order_last_modification_utc_date_Valid() const{
    return m_recover_begin_period_order_last_modification_utc_date_isValid;
}

QDateTime OAISubscription::getRecoverEndPeriodOrderLastModificationUtcDate() const {
    return m_recover_end_period_order_last_modification_utc_date;
}
void OAISubscription::setRecoverEndPeriodOrderLastModificationUtcDate(const QDateTime &recover_end_period_order_last_modification_utc_date) {
    m_recover_end_period_order_last_modification_utc_date = recover_end_period_order_last_modification_utc_date;
    m_recover_end_period_order_last_modification_utc_date_isSet = true;
}

bool OAISubscription::is_recover_end_period_order_last_modification_utc_date_Set() const{
    return m_recover_end_period_order_last_modification_utc_date_isSet;
}

bool OAISubscription::is_recover_end_period_order_last_modification_utc_date_Valid() const{
    return m_recover_end_period_order_last_modification_utc_date_isValid;
}

qint32 OAISubscription::getRetryCount() const {
    return m_retry_count;
}
void OAISubscription::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAISubscription::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAISubscription::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

OAISubscriptionStatus OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const OAISubscriptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscription::getTargetUrl() const {
    return m_target_url;
}
void OAISubscription::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAISubscription::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAISubscription::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_last_request_sent_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_unvailable_since_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_order_pushed_modification_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_retry_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_order_pushed_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_email_alert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_scheduled_retry_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recover_begin_period_order_last_modification_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recover_end_period_order_last_modification_utc_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_merchant_application_name_isValid && m_merchant_application_version_isValid && m_name_isValid && m_status_isValid && m_target_url_isValid && true;
}

} // namespace OpenAPI
