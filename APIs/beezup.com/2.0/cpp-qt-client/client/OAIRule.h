/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule.h
 *
 * 
 */

#ifndef OAIRule_H
#define OAIRule_H

#include <QJsonObject>

#include "OAIOptimisationActionName.h"
#include "OAIRuleLastExecutionStatus.h"
#include "OAIRuleLinks.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleLinks;

class OAIRule : public OAIObject {
public:
    OAIRule();
    OAIRule(QString json);
    ~OAIRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOptimisationActionName getActionName() const;
    void setActionName(const OAIOptimisationActionName &action_name);
    bool is_action_name_Set() const;
    bool is_action_name_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAIRuleLastExecutionStatus getLastExecutionStatus() const;
    void setLastExecutionStatus(const OAIRuleLastExecutionStatus &last_execution_status);
    bool is_last_execution_status_Set() const;
    bool is_last_execution_status_Valid() const;

    QDateTime getLastExecutionUtcDate() const;
    void setLastExecutionUtcDate(const QDateTime &last_execution_utc_date);
    bool is_last_execution_utc_date_Set() const;
    bool is_last_execution_utc_date_Valid() const;

    OAIRuleLinks getLinks() const;
    void setLinks(const OAIRuleLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getReportFilterId() const;
    void setReportFilterId(const QString &report_filter_id);
    bool is_report_filter_id_Set() const;
    bool is_report_filter_id_Valid() const;

    QString getRuleId() const;
    void setRuleId(const QString &rule_id);
    bool is_rule_id_Set() const;
    bool is_rule_id_Valid() const;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    QDateTime getValidityEndUtcDate() const;
    void setValidityEndUtcDate(const QDateTime &validity_end_utc_date);
    bool is_validity_end_utc_date_Set() const;
    bool is_validity_end_utc_date_Valid() const;

    QDateTime getValidityStartUtcDate() const;
    void setValidityStartUtcDate(const QDateTime &validity_start_utc_date);
    bool is_validity_start_utc_date_Set() const;
    bool is_validity_start_utc_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOptimisationActionName m_action_name;
    bool m_action_name_isSet;
    bool m_action_name_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAIRuleLastExecutionStatus m_last_execution_status;
    bool m_last_execution_status_isSet;
    bool m_last_execution_status_isValid;

    QDateTime m_last_execution_utc_date;
    bool m_last_execution_utc_date_isSet;
    bool m_last_execution_utc_date_isValid;

    OAIRuleLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_report_filter_id;
    bool m_report_filter_id_isSet;
    bool m_report_filter_id_isValid;

    QString m_rule_id;
    bool m_rule_id_isSet;
    bool m_rule_id_isValid;

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    QDateTime m_validity_end_utc_date;
    bool m_validity_end_utc_date_isSet;
    bool m_validity_end_utc_date_isValid;

    QDateTime m_validity_start_utc_date;
    bool m_validity_start_utc_date_isSet;
    bool m_validity_start_utc_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule)

#endif // OAIRule_H
