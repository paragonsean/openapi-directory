/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetectedCatalogColumn.h
 *
 * 
 */

#ifndef OAIDetectedCatalogColumn_H
#define OAIDetectedCatalogColumn_H

#include <QJsonObject>

#include "OAIColumnConfiguration.h"
#include "OAIDetectedCatalogColumnLinks.h"
#include "OAIDuplicateProductValueConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColumnConfiguration;
class OAIDuplicateProductValueConfiguration;
class OAIDetectedCatalogColumnLinks;

class OAIDetectedCatalogColumn : public OAIObject {
public:
    OAIDetectedCatalogColumn();
    OAIDetectedCatalogColumn(QString json);
    ~OAIDetectedCatalogColumn() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCatalogColumnName() const;
    void setCatalogColumnName(const QString &catalog_column_name);
    bool is_catalog_column_name_Set() const;
    bool is_catalog_column_name_Valid() const;

    OAIColumnConfiguration getConfiguration() const;
    void setConfiguration(const OAIColumnConfiguration &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    OAIDuplicateProductValueConfiguration getDuplicateProductValueConfiguration() const;
    void setDuplicateProductValueConfiguration(const OAIDuplicateProductValueConfiguration &duplicate_product_value_configuration);
    bool is_duplicate_product_value_configuration_Set() const;
    bool is_duplicate_product_value_configuration_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIgnored() const;
    void setIgnored(const bool &ignored);
    bool is_ignored_Set() const;
    bool is_ignored_Valid() const;

    OAIDetectedCatalogColumnLinks getLinks() const;
    void setLinks(const OAIDetectedCatalogColumnLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getUserColumName() const;
    void setUserColumName(const QString &user_colum_name);
    bool is_user_colum_name_Set() const;
    bool is_user_colum_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_catalog_column_name;
    bool m_catalog_column_name_isSet;
    bool m_catalog_column_name_isValid;

    OAIColumnConfiguration m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    OAIDuplicateProductValueConfiguration m_duplicate_product_value_configuration;
    bool m_duplicate_product_value_configuration_isSet;
    bool m_duplicate_product_value_configuration_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_ignored;
    bool m_ignored_isSet;
    bool m_ignored_isValid;

    OAIDetectedCatalogColumnLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_user_colum_name;
    bool m_user_colum_name_isSet;
    bool m_user_colum_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetectedCatalogColumn)

#endif // OAIDetectedCatalogColumn_H
