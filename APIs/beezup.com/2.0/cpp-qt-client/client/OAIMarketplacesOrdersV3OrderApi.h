/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketplacesOrdersV3OrderApi_H
#define OAI_OAIMarketplacesOrdersV3OrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeezUP_Common_ErrorResponseMessage.h"
#include "OAIChangeOrderReporting.h"
#include "OAIErrorResponseMessage.h"
#include "OAIOrderHistory.h"
#include "OAIOrderWithLinks.h"
#include "OAISetMerchantOrderInfoRequest.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketplacesOrdersV3OrderApi : public QObject {
    Q_OBJECT

public:
    OAIMarketplacesOrdersV3OrderApi(const int timeOut = 0);
    ~OAIMarketplacesOrdersV3OrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  change_order_type QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  test_mode bool [optional]
    * @param[in]  request_body QMap<QString, QString> [optional]
    */
    virtual void changeOrderV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const QString &change_order_type, const QString &user_name, const ::OpenAPI::OptionalParam<bool> &test_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &request_body = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  test_mode bool [optional]
    */
    virtual void clearMerchantOrderInfoV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<bool> &test_mode = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  order_change_execution_uuid QString [required]
    */
    virtual void getOrderChangeReportingV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const QString &order_change_execution_uuid);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    */
    virtual void getOrderHistoryV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void getOrderV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  marketplace_order_id QString [optional]
    * @param[in]  beez_up_order_id QString [optional]
    */
    virtual void harvestAccount(const QString &marketplace_technical_code, const qint32 &account_id, const ::OpenAPI::OptionalParam<QString> &marketplace_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &beez_up_order_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    */
    virtual void harvestOrderV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id);

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void headOrderV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_technical_code QString [required]
    * @param[in]  account_id qint32 [required]
    * @param[in]  beez_up_order_id QString [required]
    * @param[in]  oai_set_merchant_order_info_request OAISetMerchantOrderInfoRequest [required]
    * @param[in]  test_mode bool [optional]
    */
    virtual void setMerchantOrderInfoV3(const QString &marketplace_technical_code, const qint32 &account_id, const QString &beez_up_order_id, const OAISetMerchantOrderInfoRequest &oai_set_merchant_order_info_request, const ::OpenAPI::OptionalParam<bool> &test_mode = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeOrderV3Callback(OAIHttpRequestWorker *worker);
    void clearMerchantOrderInfoV3Callback(OAIHttpRequestWorker *worker);
    void getOrderChangeReportingV3Callback(OAIHttpRequestWorker *worker);
    void getOrderHistoryV3Callback(OAIHttpRequestWorker *worker);
    void getOrderV3Callback(OAIHttpRequestWorker *worker);
    void harvestAccountCallback(OAIHttpRequestWorker *worker);
    void harvestOrderV3Callback(OAIHttpRequestWorker *worker);
    void headOrderV3Callback(OAIHttpRequestWorker *worker);
    void setMerchantOrderInfoV3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeOrderV3Signal();
    void clearMerchantOrderInfoV3Signal();
    void getOrderChangeReportingV3Signal(OAIChangeOrderReporting summary);
    void getOrderHistoryV3Signal(OAIOrderHistory summary);
    void getOrderV3Signal(OAIOrderWithLinks summary);
    void harvestAccountSignal();
    void harvestOrderV3Signal();
    void headOrderV3Signal();
    void setMerchantOrderInfoV3Signal();


    void changeOrderV3SignalFull(OAIHttpRequestWorker *worker);
    void clearMerchantOrderInfoV3SignalFull(OAIHttpRequestWorker *worker);
    void getOrderChangeReportingV3SignalFull(OAIHttpRequestWorker *worker, OAIChangeOrderReporting summary);
    void getOrderHistoryV3SignalFull(OAIHttpRequestWorker *worker, OAIOrderHistory summary);
    void getOrderV3SignalFull(OAIHttpRequestWorker *worker, OAIOrderWithLinks summary);
    void harvestAccountSignalFull(OAIHttpRequestWorker *worker);
    void harvestOrderV3SignalFull(OAIHttpRequestWorker *worker);
    void headOrderV3SignalFull(OAIHttpRequestWorker *worker);
    void setMerchantOrderInfoV3SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use changeOrderV3SignalError() instead")
    void changeOrderV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeOrderV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clearMerchantOrderInfoV3SignalError() instead")
    void clearMerchantOrderInfoV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clearMerchantOrderInfoV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderChangeReportingV3SignalError() instead")
    void getOrderChangeReportingV3SignalE(OAIChangeOrderReporting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderChangeReportingV3SignalError(OAIChangeOrderReporting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderHistoryV3SignalError() instead")
    void getOrderHistoryV3SignalE(OAIOrderHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderHistoryV3SignalError(OAIOrderHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderV3SignalError() instead")
    void getOrderV3SignalE(OAIOrderWithLinks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderV3SignalError(OAIOrderWithLinks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestAccountSignalError() instead")
    void harvestAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void harvestAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestOrderV3SignalError() instead")
    void harvestOrderV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void harvestOrderV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headOrderV3SignalError() instead")
    void headOrderV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void headOrderV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMerchantOrderInfoV3SignalError() instead")
    void setMerchantOrderInfoV3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setMerchantOrderInfoV3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeOrderV3SignalErrorFull() instead")
    void changeOrderV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeOrderV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clearMerchantOrderInfoV3SignalErrorFull() instead")
    void clearMerchantOrderInfoV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clearMerchantOrderInfoV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderChangeReportingV3SignalErrorFull() instead")
    void getOrderChangeReportingV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderChangeReportingV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderHistoryV3SignalErrorFull() instead")
    void getOrderHistoryV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderHistoryV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderV3SignalErrorFull() instead")
    void getOrderV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestAccountSignalErrorFull() instead")
    void harvestAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void harvestAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use harvestOrderV3SignalErrorFull() instead")
    void harvestOrderV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void harvestOrderV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headOrderV3SignalErrorFull() instead")
    void headOrderV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headOrderV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMerchantOrderInfoV3SignalErrorFull() instead")
    void setMerchantOrderInfoV3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setMerchantOrderInfoV3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
