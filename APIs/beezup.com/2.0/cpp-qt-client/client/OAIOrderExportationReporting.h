/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrderExportationReporting.h
 *
 * Represent the reporting of the Order report exportations
 */

#ifndef OAIOrderExportationReporting_H
#define OAIOrderExportationReporting_H

#include <QJsonObject>

#include "OAIOrderExportationReportingProcessingStatus.h"
#include "OAISourceType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOrderExportationReporting : public OAIObject {
public:
    OAIOrderExportationReporting();
    OAIOrderExportationReporting(QString json);
    ~OAIOrderExportationReporting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAbortionUtcDate() const;
    void setAbortionUtcDate(const QDateTime &abortion_utc_date);
    bool is_abortion_utc_date_Set() const;
    bool is_abortion_utc_date_Valid() const;

    QDateTime getBeginUtcDate() const;
    void setBeginUtcDate(const QDateTime &begin_utc_date);
    bool is_begin_utc_date_Set() const;
    bool is_begin_utc_date_Valid() const;

    QString getBlobNameUri() const;
    void setBlobNameUri(const QString &blob_name_uri);
    bool is_blob_name_uri_Set() const;
    bool is_blob_name_uri_Valid() const;

    QDateTime getEndUtcDate() const;
    void setEndUtcDate(const QDateTime &end_utc_date);
    bool is_end_utc_date_Set() const;
    bool is_end_utc_date_Valid() const;

    QDateTime getEnqueuedUtcDate() const;
    void setEnqueuedUtcDate(const QDateTime &enqueued_utc_date);
    bool is_enqueued_utc_date_Set() const;
    bool is_enqueued_utc_date_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getExecutionUuid() const;
    void setExecutionUuid(const QString &execution_uuid);
    bool is_execution_uuid_Set() const;
    bool is_execution_uuid_Valid() const;

    QDateTime getExpirationUtcDate() const;
    void setExpirationUtcDate(const QDateTime &expiration_utc_date);
    bool is_expiration_utc_date_Set() const;
    bool is_expiration_utc_date_Valid() const;

    QDateTime getFailureUtcDate() const;
    void setFailureUtcDate(const QDateTime &failure_utc_date);
    bool is_failure_utc_date_Set() const;
    bool is_failure_utc_date_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getJsonCriteria() const;
    void setJsonCriteria(const QString &json_criteria);
    bool is_json_criteria_Set() const;
    bool is_json_criteria_Valid() const;

    QDateTime getLastUpdateUtcDate() const;
    void setLastUpdateUtcDate(const QDateTime &last_update_utc_date);
    bool is_last_update_utc_date_Set() const;
    bool is_last_update_utc_date_Valid() const;

    qint32 getOrderCount() const;
    void setOrderCount(const qint32 &order_count);
    bool is_order_count_Set() const;
    bool is_order_count_Valid() const;

    OAIOrderExportationReportingProcessingStatus getProcessingStatus() const;
    void setProcessingStatus(const OAIOrderExportationReportingProcessingStatus &processing_status);
    bool is_processing_status_Set() const;
    bool is_processing_status_Valid() const;

    qint32 getRemainingOrderCount() const;
    void setRemainingOrderCount(const qint32 &remaining_order_count);
    bool is_remaining_order_count_Set() const;
    bool is_remaining_order_count_Valid() const;

    QDateTime getResumedUtcDate() const;
    void setResumedUtcDate(const QDateTime &resumed_utc_date);
    bool is_resumed_utc_date_Set() const;
    bool is_resumed_utc_date_Valid() const;

    OAISourceType getSourceType() const;
    void setSourceType(const OAISourceType &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    QString getSourceUserId() const;
    void setSourceUserId(const QString &source_user_id);
    bool is_source_user_id_Set() const;
    bool is_source_user_id_Valid() const;

    QString getSourceUserName() const;
    void setSourceUserName(const QString &source_user_name);
    bool is_source_user_name_Set() const;
    bool is_source_user_name_Valid() const;

    QDateTime getSuspendedUtcDate() const;
    void setSuspendedUtcDate(const QDateTime &suspended_utc_date);
    bool is_suspended_utc_date_Set() const;
    bool is_suspended_utc_date_Valid() const;

    QString getTimeoutDuration() const;
    void setTimeoutDuration(const QString &timeout_duration);
    bool is_timeout_duration_Set() const;
    bool is_timeout_duration_Valid() const;

    QString getWarningMessage() const;
    void setWarningMessage(const QString &warning_message);
    bool is_warning_message_Set() const;
    bool is_warning_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_abortion_utc_date;
    bool m_abortion_utc_date_isSet;
    bool m_abortion_utc_date_isValid;

    QDateTime m_begin_utc_date;
    bool m_begin_utc_date_isSet;
    bool m_begin_utc_date_isValid;

    QString m_blob_name_uri;
    bool m_blob_name_uri_isSet;
    bool m_blob_name_uri_isValid;

    QDateTime m_end_utc_date;
    bool m_end_utc_date_isSet;
    bool m_end_utc_date_isValid;

    QDateTime m_enqueued_utc_date;
    bool m_enqueued_utc_date_isSet;
    bool m_enqueued_utc_date_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_execution_uuid;
    bool m_execution_uuid_isSet;
    bool m_execution_uuid_isValid;

    QDateTime m_expiration_utc_date;
    bool m_expiration_utc_date_isSet;
    bool m_expiration_utc_date_isValid;

    QDateTime m_failure_utc_date;
    bool m_failure_utc_date_isSet;
    bool m_failure_utc_date_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_json_criteria;
    bool m_json_criteria_isSet;
    bool m_json_criteria_isValid;

    QDateTime m_last_update_utc_date;
    bool m_last_update_utc_date_isSet;
    bool m_last_update_utc_date_isValid;

    qint32 m_order_count;
    bool m_order_count_isSet;
    bool m_order_count_isValid;

    OAIOrderExportationReportingProcessingStatus m_processing_status;
    bool m_processing_status_isSet;
    bool m_processing_status_isValid;

    qint32 m_remaining_order_count;
    bool m_remaining_order_count_isSet;
    bool m_remaining_order_count_isValid;

    QDateTime m_resumed_utc_date;
    bool m_resumed_utc_date_isSet;
    bool m_resumed_utc_date_isValid;

    OAISourceType m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    QString m_source_user_id;
    bool m_source_user_id_isSet;
    bool m_source_user_id_isValid;

    QString m_source_user_name;
    bool m_source_user_name_isSet;
    bool m_source_user_name_isValid;

    QDateTime m_suspended_utc_date;
    bool m_suspended_utc_date_isSet;
    bool m_suspended_utc_date_isValid;

    QString m_timeout_duration;
    bool m_timeout_duration_isSet;
    bool m_timeout_duration_isValid;

    QString m_warning_message;
    bool m_warning_message_isSet;
    bool m_warning_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrderExportationReporting)

#endif // OAIOrderExportationReporting_H
