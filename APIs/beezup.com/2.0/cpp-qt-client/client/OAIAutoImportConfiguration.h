/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAutoImportConfiguration.h
 *
 * 
 */

#ifndef OAIAutoImportConfiguration_H
#define OAIAutoImportConfiguration_H

#include <QJsonObject>

#include "OAIDuplicateProductValueConfiguration.h"
#include "OAIInputConfiguration.h"
#include "OAISchedulingType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDuplicateProductValueConfiguration;
class OAIInputConfiguration;

class OAIAutoImportConfiguration : public OAIObject {
public:
    OAIAutoImportConfiguration();
    OAIAutoImportConfiguration(QString json);
    ~OAIAutoImportConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDuplicateProductValueConfiguration getDuplicateProductConfiguration() const;
    void setDuplicateProductConfiguration(const OAIDuplicateProductValueConfiguration &duplicate_product_configuration);
    bool is_duplicate_product_configuration_Set() const;
    bool is_duplicate_product_configuration_Valid() const;

    OAIInputConfiguration getInput() const;
    void setInput(const OAIInputConfiguration &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QString getInputConfiguredByUserId() const;
    void setInputConfiguredByUserId(const QString &input_configured_by_user_id);
    bool is_input_configured_by_user_id_Set() const;
    bool is_input_configured_by_user_id_Valid() const;

    QString getPauseStatusChangedByUserId() const;
    void setPauseStatusChangedByUserId(const QString &pause_status_changed_by_user_id);
    bool is_pause_status_changed_by_user_id_Set() const;
    bool is_pause_status_changed_by_user_id_Valid() const;

    QDateTime getPauseStatusChangedUtcDate() const;
    void setPauseStatusChangedUtcDate(const QDateTime &pause_status_changed_utc_date);
    bool is_pause_status_changed_utc_date_Set() const;
    bool is_pause_status_changed_utc_date_Valid() const;

    bool isPaused() const;
    void setPaused(const bool &paused);
    bool is_paused_Set() const;
    bool is_paused_Valid() const;

    QString getScheduledByUserId() const;
    void setScheduledByUserId(const QString &scheduled_by_user_id);
    bool is_scheduled_by_user_id_Set() const;
    bool is_scheduled_by_user_id_Valid() const;

    QString getSchedulingLocalTimeZoneName() const;
    void setSchedulingLocalTimeZoneName(const QString &scheduling_local_time_zone_name);
    bool is_scheduling_local_time_zone_name_Set() const;
    bool is_scheduling_local_time_zone_name_Valid() const;

    OAISchedulingType getSchedulingType() const;
    void setSchedulingType(const OAISchedulingType &scheduling_type);
    bool is_scheduling_type_Set() const;
    bool is_scheduling_type_Valid() const;

    QList<QString> getSchedulingValue() const;
    void setSchedulingValue(const QList<QString> &scheduling_value);
    bool is_scheduling_value_Set() const;
    bool is_scheduling_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDuplicateProductValueConfiguration m_duplicate_product_configuration;
    bool m_duplicate_product_configuration_isSet;
    bool m_duplicate_product_configuration_isValid;

    OAIInputConfiguration m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QString m_input_configured_by_user_id;
    bool m_input_configured_by_user_id_isSet;
    bool m_input_configured_by_user_id_isValid;

    QString m_pause_status_changed_by_user_id;
    bool m_pause_status_changed_by_user_id_isSet;
    bool m_pause_status_changed_by_user_id_isValid;

    QDateTime m_pause_status_changed_utc_date;
    bool m_pause_status_changed_utc_date_isSet;
    bool m_pause_status_changed_utc_date_isValid;

    bool m_paused;
    bool m_paused_isSet;
    bool m_paused_isValid;

    QString m_scheduled_by_user_id;
    bool m_scheduled_by_user_id_isSet;
    bool m_scheduled_by_user_id_isValid;

    QString m_scheduling_local_time_zone_name;
    bool m_scheduling_local_time_zone_name_isSet;
    bool m_scheduling_local_time_zone_name_isValid;

    OAISchedulingType m_scheduling_type;
    bool m_scheduling_type_isSet;
    bool m_scheduling_type_isValid;

    QList<QString> m_scheduling_value;
    bool m_scheduling_value_isSet;
    bool m_scheduling_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAutoImportConfiguration)

#endif // OAIAutoImportConfiguration_H
