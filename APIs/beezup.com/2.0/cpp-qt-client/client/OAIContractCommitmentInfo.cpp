/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractCommitmentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractCommitmentInfo::OAIContractCommitmentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractCommitmentInfo::OAIContractCommitmentInfo() {
    this->initializeModel();
}

OAIContractCommitmentInfo::~OAIContractCommitmentInfo() {}

void OAIContractCommitmentInfo::initializeModel() {

    m_commercial_creator_user_id_isSet = false;
    m_commercial_creator_user_id_isValid = false;

    m_commercial_user_id_isSet = false;
    m_commercial_user_id_isValid = false;

    m_commitment_calculated_finish_date_isSet = false;
    m_commitment_calculated_finish_date_isValid = false;

    m_commitment_period_in_month_isSet = false;
    m_commitment_period_in_month_isValid = false;

    m_contract_type_isSet = false;
    m_contract_type_isValid = false;

    m_coupon_offer_code_isSet = false;
    m_coupon_offer_code_isValid = false;

    m_current_contract_id_isSet = false;
    m_current_contract_id_isValid = false;

    m_current_contract_termination_date_isSet = false;
    m_current_contract_termination_date_isValid = false;

    m_current_customer_payment_method_isSet = false;
    m_current_customer_payment_method_isValid = false;

    m_fixed_and_variable_click_info_isSet = false;
    m_fixed_and_variable_click_info_isValid = false;

    m_is_customer_wants_to_terminate_his_contract_isSet = false;
    m_is_customer_wants_to_terminate_his_contract_isValid = false;

    m_is_model_must_be_transmitted_in_new_contract_isSet = false;
    m_is_model_must_be_transmitted_in_new_contract_isValid = false;

    m_min_billing_period_in_months_isSet = false;
    m_min_billing_period_in_months_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_new_contract_start_date_isSet = false;
    m_new_contract_start_date_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_payment_delay_in_days_isSet = false;
    m_payment_delay_in_days_isValid = false;

    m_payment_method_authorized_isSet = false;
    m_payment_method_authorized_isValid = false;

    m_requested_payment_method_isSet = false;
    m_requested_payment_method_isValid = false;

    m_trial_period_finish_date_isSet = false;
    m_trial_period_finish_date_isValid = false;

    m_trial_period_in_month_isSet = false;
    m_trial_period_in_month_isValid = false;

    m_variable_model_info_isSet = false;
    m_variable_model_info_isValid = false;
}

void OAIContractCommitmentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractCommitmentInfo::fromJsonObject(QJsonObject json) {

    m_commercial_creator_user_id_isValid = ::OpenAPI::fromJsonValue(m_commercial_creator_user_id, json[QString("commercialCreatorUserId")]);
    m_commercial_creator_user_id_isSet = !json[QString("commercialCreatorUserId")].isNull() && m_commercial_creator_user_id_isValid;

    m_commercial_user_id_isValid = ::OpenAPI::fromJsonValue(m_commercial_user_id, json[QString("commercialUserId")]);
    m_commercial_user_id_isSet = !json[QString("commercialUserId")].isNull() && m_commercial_user_id_isValid;

    m_commitment_calculated_finish_date_isValid = ::OpenAPI::fromJsonValue(m_commitment_calculated_finish_date, json[QString("commitmentCalculatedFinishDate")]);
    m_commitment_calculated_finish_date_isSet = !json[QString("commitmentCalculatedFinishDate")].isNull() && m_commitment_calculated_finish_date_isValid;

    m_commitment_period_in_month_isValid = ::OpenAPI::fromJsonValue(m_commitment_period_in_month, json[QString("commitmentPeriodInMonth")]);
    m_commitment_period_in_month_isSet = !json[QString("commitmentPeriodInMonth")].isNull() && m_commitment_period_in_month_isValid;

    m_contract_type_isValid = ::OpenAPI::fromJsonValue(m_contract_type, json[QString("contractType")]);
    m_contract_type_isSet = !json[QString("contractType")].isNull() && m_contract_type_isValid;

    m_coupon_offer_code_isValid = ::OpenAPI::fromJsonValue(m_coupon_offer_code, json[QString("couponOfferCode")]);
    m_coupon_offer_code_isSet = !json[QString("couponOfferCode")].isNull() && m_coupon_offer_code_isValid;

    m_current_contract_id_isValid = ::OpenAPI::fromJsonValue(m_current_contract_id, json[QString("currentContractId")]);
    m_current_contract_id_isSet = !json[QString("currentContractId")].isNull() && m_current_contract_id_isValid;

    m_current_contract_termination_date_isValid = ::OpenAPI::fromJsonValue(m_current_contract_termination_date, json[QString("currentContractTerminationDate")]);
    m_current_contract_termination_date_isSet = !json[QString("currentContractTerminationDate")].isNull() && m_current_contract_termination_date_isValid;

    m_current_customer_payment_method_isValid = ::OpenAPI::fromJsonValue(m_current_customer_payment_method, json[QString("currentCustomerPaymentMethod")]);
    m_current_customer_payment_method_isSet = !json[QString("currentCustomerPaymentMethod")].isNull() && m_current_customer_payment_method_isValid;

    m_fixed_and_variable_click_info_isValid = ::OpenAPI::fromJsonValue(m_fixed_and_variable_click_info, json[QString("fixedAndVariableClickInfo")]);
    m_fixed_and_variable_click_info_isSet = !json[QString("fixedAndVariableClickInfo")].isNull() && m_fixed_and_variable_click_info_isValid;

    m_is_customer_wants_to_terminate_his_contract_isValid = ::OpenAPI::fromJsonValue(m_is_customer_wants_to_terminate_his_contract, json[QString("isCustomerWantsToTerminateHisContract")]);
    m_is_customer_wants_to_terminate_his_contract_isSet = !json[QString("isCustomerWantsToTerminateHisContract")].isNull() && m_is_customer_wants_to_terminate_his_contract_isValid;

    m_is_model_must_be_transmitted_in_new_contract_isValid = ::OpenAPI::fromJsonValue(m_is_model_must_be_transmitted_in_new_contract, json[QString("isModelMustBeTransmittedInNewContract")]);
    m_is_model_must_be_transmitted_in_new_contract_isSet = !json[QString("isModelMustBeTransmittedInNewContract")].isNull() && m_is_model_must_be_transmitted_in_new_contract_isValid;

    m_min_billing_period_in_months_isValid = ::OpenAPI::fromJsonValue(m_min_billing_period_in_months, json[QString("minBillingPeriodInMonths")]);
    m_min_billing_period_in_months_isSet = !json[QString("minBillingPeriodInMonths")].isNull() && m_min_billing_period_in_months_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_new_contract_start_date_isValid = ::OpenAPI::fromJsonValue(m_new_contract_start_date, json[QString("newContractStartDate")]);
    m_new_contract_start_date_isSet = !json[QString("newContractStartDate")].isNull() && m_new_contract_start_date_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(m_offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_payment_delay_in_days_isValid = ::OpenAPI::fromJsonValue(m_payment_delay_in_days, json[QString("paymentDelayInDays")]);
    m_payment_delay_in_days_isSet = !json[QString("paymentDelayInDays")].isNull() && m_payment_delay_in_days_isValid;

    m_payment_method_authorized_isValid = ::OpenAPI::fromJsonValue(m_payment_method_authorized, json[QString("paymentMethodAuthorized")]);
    m_payment_method_authorized_isSet = !json[QString("paymentMethodAuthorized")].isNull() && m_payment_method_authorized_isValid;

    m_requested_payment_method_isValid = ::OpenAPI::fromJsonValue(m_requested_payment_method, json[QString("requestedPaymentMethod")]);
    m_requested_payment_method_isSet = !json[QString("requestedPaymentMethod")].isNull() && m_requested_payment_method_isValid;

    m_trial_period_finish_date_isValid = ::OpenAPI::fromJsonValue(m_trial_period_finish_date, json[QString("trialPeriodFinishDate")]);
    m_trial_period_finish_date_isSet = !json[QString("trialPeriodFinishDate")].isNull() && m_trial_period_finish_date_isValid;

    m_trial_period_in_month_isValid = ::OpenAPI::fromJsonValue(m_trial_period_in_month, json[QString("trialPeriodInMonth")]);
    m_trial_period_in_month_isSet = !json[QString("trialPeriodInMonth")].isNull() && m_trial_period_in_month_isValid;

    m_variable_model_info_isValid = ::OpenAPI::fromJsonValue(m_variable_model_info, json[QString("variableModelInfo")]);
    m_variable_model_info_isSet = !json[QString("variableModelInfo")].isNull() && m_variable_model_info_isValid;
}

QString OAIContractCommitmentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractCommitmentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_commercial_creator_user_id_isSet) {
        obj.insert(QString("commercialCreatorUserId"), ::OpenAPI::toJsonValue(m_commercial_creator_user_id));
    }
    if (m_commercial_user_id_isSet) {
        obj.insert(QString("commercialUserId"), ::OpenAPI::toJsonValue(m_commercial_user_id));
    }
    if (m_commitment_calculated_finish_date_isSet) {
        obj.insert(QString("commitmentCalculatedFinishDate"), ::OpenAPI::toJsonValue(m_commitment_calculated_finish_date));
    }
    if (m_commitment_period_in_month_isSet) {
        obj.insert(QString("commitmentPeriodInMonth"), ::OpenAPI::toJsonValue(m_commitment_period_in_month));
    }
    if (m_contract_type_isSet) {
        obj.insert(QString("contractType"), ::OpenAPI::toJsonValue(m_contract_type));
    }
    if (m_coupon_offer_code_isSet) {
        obj.insert(QString("couponOfferCode"), ::OpenAPI::toJsonValue(m_coupon_offer_code));
    }
    if (m_current_contract_id_isSet) {
        obj.insert(QString("currentContractId"), ::OpenAPI::toJsonValue(m_current_contract_id));
    }
    if (m_current_contract_termination_date_isSet) {
        obj.insert(QString("currentContractTerminationDate"), ::OpenAPI::toJsonValue(m_current_contract_termination_date));
    }
    if (m_current_customer_payment_method.isSet()) {
        obj.insert(QString("currentCustomerPaymentMethod"), ::OpenAPI::toJsonValue(m_current_customer_payment_method));
    }
    if (m_fixed_and_variable_click_info.isSet()) {
        obj.insert(QString("fixedAndVariableClickInfo"), ::OpenAPI::toJsonValue(m_fixed_and_variable_click_info));
    }
    if (m_is_customer_wants_to_terminate_his_contract_isSet) {
        obj.insert(QString("isCustomerWantsToTerminateHisContract"), ::OpenAPI::toJsonValue(m_is_customer_wants_to_terminate_his_contract));
    }
    if (m_is_model_must_be_transmitted_in_new_contract_isSet) {
        obj.insert(QString("isModelMustBeTransmittedInNewContract"), ::OpenAPI::toJsonValue(m_is_model_must_be_transmitted_in_new_contract));
    }
    if (m_min_billing_period_in_months_isSet) {
        obj.insert(QString("minBillingPeriodInMonths"), ::OpenAPI::toJsonValue(m_min_billing_period_in_months));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_new_contract_start_date_isSet) {
        obj.insert(QString("newContractStartDate"), ::OpenAPI::toJsonValue(m_new_contract_start_date));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(m_offer_name));
    }
    if (m_payment_delay_in_days_isSet) {
        obj.insert(QString("paymentDelayInDays"), ::OpenAPI::toJsonValue(m_payment_delay_in_days));
    }
    if (m_payment_method_authorized.isSet()) {
        obj.insert(QString("paymentMethodAuthorized"), ::OpenAPI::toJsonValue(m_payment_method_authorized));
    }
    if (m_requested_payment_method.isSet()) {
        obj.insert(QString("requestedPaymentMethod"), ::OpenAPI::toJsonValue(m_requested_payment_method));
    }
    if (m_trial_period_finish_date_isSet) {
        obj.insert(QString("trialPeriodFinishDate"), ::OpenAPI::toJsonValue(m_trial_period_finish_date));
    }
    if (m_trial_period_in_month_isSet) {
        obj.insert(QString("trialPeriodInMonth"), ::OpenAPI::toJsonValue(m_trial_period_in_month));
    }
    if (m_variable_model_info.isSet()) {
        obj.insert(QString("variableModelInfo"), ::OpenAPI::toJsonValue(m_variable_model_info));
    }
    return obj;
}

QString OAIContractCommitmentInfo::getCommercialCreatorUserId() const {
    return m_commercial_creator_user_id;
}
void OAIContractCommitmentInfo::setCommercialCreatorUserId(const QString &commercial_creator_user_id) {
    m_commercial_creator_user_id = commercial_creator_user_id;
    m_commercial_creator_user_id_isSet = true;
}

bool OAIContractCommitmentInfo::is_commercial_creator_user_id_Set() const{
    return m_commercial_creator_user_id_isSet;
}

bool OAIContractCommitmentInfo::is_commercial_creator_user_id_Valid() const{
    return m_commercial_creator_user_id_isValid;
}

QString OAIContractCommitmentInfo::getCommercialUserId() const {
    return m_commercial_user_id;
}
void OAIContractCommitmentInfo::setCommercialUserId(const QString &commercial_user_id) {
    m_commercial_user_id = commercial_user_id;
    m_commercial_user_id_isSet = true;
}

bool OAIContractCommitmentInfo::is_commercial_user_id_Set() const{
    return m_commercial_user_id_isSet;
}

bool OAIContractCommitmentInfo::is_commercial_user_id_Valid() const{
    return m_commercial_user_id_isValid;
}

QDate OAIContractCommitmentInfo::getCommitmentCalculatedFinishDate() const {
    return m_commitment_calculated_finish_date;
}
void OAIContractCommitmentInfo::setCommitmentCalculatedFinishDate(const QDate &commitment_calculated_finish_date) {
    m_commitment_calculated_finish_date = commitment_calculated_finish_date;
    m_commitment_calculated_finish_date_isSet = true;
}

bool OAIContractCommitmentInfo::is_commitment_calculated_finish_date_Set() const{
    return m_commitment_calculated_finish_date_isSet;
}

bool OAIContractCommitmentInfo::is_commitment_calculated_finish_date_Valid() const{
    return m_commitment_calculated_finish_date_isValid;
}

qint32 OAIContractCommitmentInfo::getCommitmentPeriodInMonth() const {
    return m_commitment_period_in_month;
}
void OAIContractCommitmentInfo::setCommitmentPeriodInMonth(const qint32 &commitment_period_in_month) {
    m_commitment_period_in_month = commitment_period_in_month;
    m_commitment_period_in_month_isSet = true;
}

bool OAIContractCommitmentInfo::is_commitment_period_in_month_Set() const{
    return m_commitment_period_in_month_isSet;
}

bool OAIContractCommitmentInfo::is_commitment_period_in_month_Valid() const{
    return m_commitment_period_in_month_isValid;
}

qint32 OAIContractCommitmentInfo::getContractType() const {
    return m_contract_type;
}
void OAIContractCommitmentInfo::setContractType(const qint32 &contract_type) {
    m_contract_type = contract_type;
    m_contract_type_isSet = true;
}

bool OAIContractCommitmentInfo::is_contract_type_Set() const{
    return m_contract_type_isSet;
}

bool OAIContractCommitmentInfo::is_contract_type_Valid() const{
    return m_contract_type_isValid;
}

QString OAIContractCommitmentInfo::getCouponOfferCode() const {
    return m_coupon_offer_code;
}
void OAIContractCommitmentInfo::setCouponOfferCode(const QString &coupon_offer_code) {
    m_coupon_offer_code = coupon_offer_code;
    m_coupon_offer_code_isSet = true;
}

bool OAIContractCommitmentInfo::is_coupon_offer_code_Set() const{
    return m_coupon_offer_code_isSet;
}

bool OAIContractCommitmentInfo::is_coupon_offer_code_Valid() const{
    return m_coupon_offer_code_isValid;
}

QString OAIContractCommitmentInfo::getCurrentContractId() const {
    return m_current_contract_id;
}
void OAIContractCommitmentInfo::setCurrentContractId(const QString &current_contract_id) {
    m_current_contract_id = current_contract_id;
    m_current_contract_id_isSet = true;
}

bool OAIContractCommitmentInfo::is_current_contract_id_Set() const{
    return m_current_contract_id_isSet;
}

bool OAIContractCommitmentInfo::is_current_contract_id_Valid() const{
    return m_current_contract_id_isValid;
}

QDate OAIContractCommitmentInfo::getCurrentContractTerminationDate() const {
    return m_current_contract_termination_date;
}
void OAIContractCommitmentInfo::setCurrentContractTerminationDate(const QDate &current_contract_termination_date) {
    m_current_contract_termination_date = current_contract_termination_date;
    m_current_contract_termination_date_isSet = true;
}

bool OAIContractCommitmentInfo::is_current_contract_termination_date_Set() const{
    return m_current_contract_termination_date_isSet;
}

bool OAIContractCommitmentInfo::is_current_contract_termination_date_Valid() const{
    return m_current_contract_termination_date_isValid;
}

OAIPaymentMethod OAIContractCommitmentInfo::getCurrentCustomerPaymentMethod() const {
    return m_current_customer_payment_method;
}
void OAIContractCommitmentInfo::setCurrentCustomerPaymentMethod(const OAIPaymentMethod &current_customer_payment_method) {
    m_current_customer_payment_method = current_customer_payment_method;
    m_current_customer_payment_method_isSet = true;
}

bool OAIContractCommitmentInfo::is_current_customer_payment_method_Set() const{
    return m_current_customer_payment_method_isSet;
}

bool OAIContractCommitmentInfo::is_current_customer_payment_method_Valid() const{
    return m_current_customer_payment_method_isValid;
}

OAIFixedAndVariableClickModelInfo OAIContractCommitmentInfo::getFixedAndVariableClickInfo() const {
    return m_fixed_and_variable_click_info;
}
void OAIContractCommitmentInfo::setFixedAndVariableClickInfo(const OAIFixedAndVariableClickModelInfo &fixed_and_variable_click_info) {
    m_fixed_and_variable_click_info = fixed_and_variable_click_info;
    m_fixed_and_variable_click_info_isSet = true;
}

bool OAIContractCommitmentInfo::is_fixed_and_variable_click_info_Set() const{
    return m_fixed_and_variable_click_info_isSet;
}

bool OAIContractCommitmentInfo::is_fixed_and_variable_click_info_Valid() const{
    return m_fixed_and_variable_click_info_isValid;
}

bool OAIContractCommitmentInfo::isIsCustomerWantsToTerminateHisContract() const {
    return m_is_customer_wants_to_terminate_his_contract;
}
void OAIContractCommitmentInfo::setIsCustomerWantsToTerminateHisContract(const bool &is_customer_wants_to_terminate_his_contract) {
    m_is_customer_wants_to_terminate_his_contract = is_customer_wants_to_terminate_his_contract;
    m_is_customer_wants_to_terminate_his_contract_isSet = true;
}

bool OAIContractCommitmentInfo::is_is_customer_wants_to_terminate_his_contract_Set() const{
    return m_is_customer_wants_to_terminate_his_contract_isSet;
}

bool OAIContractCommitmentInfo::is_is_customer_wants_to_terminate_his_contract_Valid() const{
    return m_is_customer_wants_to_terminate_his_contract_isValid;
}

bool OAIContractCommitmentInfo::isIsModelMustBeTransmittedInNewContract() const {
    return m_is_model_must_be_transmitted_in_new_contract;
}
void OAIContractCommitmentInfo::setIsModelMustBeTransmittedInNewContract(const bool &is_model_must_be_transmitted_in_new_contract) {
    m_is_model_must_be_transmitted_in_new_contract = is_model_must_be_transmitted_in_new_contract;
    m_is_model_must_be_transmitted_in_new_contract_isSet = true;
}

bool OAIContractCommitmentInfo::is_is_model_must_be_transmitted_in_new_contract_Set() const{
    return m_is_model_must_be_transmitted_in_new_contract_isSet;
}

bool OAIContractCommitmentInfo::is_is_model_must_be_transmitted_in_new_contract_Valid() const{
    return m_is_model_must_be_transmitted_in_new_contract_isValid;
}

qint32 OAIContractCommitmentInfo::getMinBillingPeriodInMonths() const {
    return m_min_billing_period_in_months;
}
void OAIContractCommitmentInfo::setMinBillingPeriodInMonths(const qint32 &min_billing_period_in_months) {
    m_min_billing_period_in_months = min_billing_period_in_months;
    m_min_billing_period_in_months_isSet = true;
}

bool OAIContractCommitmentInfo::is_min_billing_period_in_months_Set() const{
    return m_min_billing_period_in_months_isSet;
}

bool OAIContractCommitmentInfo::is_min_billing_period_in_months_Valid() const{
    return m_min_billing_period_in_months_isValid;
}

QString OAIContractCommitmentInfo::getModel() const {
    return m_model;
}
void OAIContractCommitmentInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIContractCommitmentInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIContractCommitmentInfo::is_model_Valid() const{
    return m_model_isValid;
}

QDateTime OAIContractCommitmentInfo::getNewContractStartDate() const {
    return m_new_contract_start_date;
}
void OAIContractCommitmentInfo::setNewContractStartDate(const QDateTime &new_contract_start_date) {
    m_new_contract_start_date = new_contract_start_date;
    m_new_contract_start_date_isSet = true;
}

bool OAIContractCommitmentInfo::is_new_contract_start_date_Set() const{
    return m_new_contract_start_date_isSet;
}

bool OAIContractCommitmentInfo::is_new_contract_start_date_Valid() const{
    return m_new_contract_start_date_isValid;
}

qint32 OAIContractCommitmentInfo::getOfferId() const {
    return m_offer_id;
}
void OAIContractCommitmentInfo::setOfferId(const qint32 &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIContractCommitmentInfo::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIContractCommitmentInfo::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIContractCommitmentInfo::getOfferName() const {
    return m_offer_name;
}
void OAIContractCommitmentInfo::setOfferName(const QString &offer_name) {
    m_offer_name = offer_name;
    m_offer_name_isSet = true;
}

bool OAIContractCommitmentInfo::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIContractCommitmentInfo::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

qint32 OAIContractCommitmentInfo::getPaymentDelayInDays() const {
    return m_payment_delay_in_days;
}
void OAIContractCommitmentInfo::setPaymentDelayInDays(const qint32 &payment_delay_in_days) {
    m_payment_delay_in_days = payment_delay_in_days;
    m_payment_delay_in_days_isSet = true;
}

bool OAIContractCommitmentInfo::is_payment_delay_in_days_Set() const{
    return m_payment_delay_in_days_isSet;
}

bool OAIContractCommitmentInfo::is_payment_delay_in_days_Valid() const{
    return m_payment_delay_in_days_isValid;
}

OAIPaymentMethod OAIContractCommitmentInfo::getPaymentMethodAuthorized() const {
    return m_payment_method_authorized;
}
void OAIContractCommitmentInfo::setPaymentMethodAuthorized(const OAIPaymentMethod &payment_method_authorized) {
    m_payment_method_authorized = payment_method_authorized;
    m_payment_method_authorized_isSet = true;
}

bool OAIContractCommitmentInfo::is_payment_method_authorized_Set() const{
    return m_payment_method_authorized_isSet;
}

bool OAIContractCommitmentInfo::is_payment_method_authorized_Valid() const{
    return m_payment_method_authorized_isValid;
}

OAIPaymentMethod OAIContractCommitmentInfo::getRequestedPaymentMethod() const {
    return m_requested_payment_method;
}
void OAIContractCommitmentInfo::setRequestedPaymentMethod(const OAIPaymentMethod &requested_payment_method) {
    m_requested_payment_method = requested_payment_method;
    m_requested_payment_method_isSet = true;
}

bool OAIContractCommitmentInfo::is_requested_payment_method_Set() const{
    return m_requested_payment_method_isSet;
}

bool OAIContractCommitmentInfo::is_requested_payment_method_Valid() const{
    return m_requested_payment_method_isValid;
}

QDate OAIContractCommitmentInfo::getTrialPeriodFinishDate() const {
    return m_trial_period_finish_date;
}
void OAIContractCommitmentInfo::setTrialPeriodFinishDate(const QDate &trial_period_finish_date) {
    m_trial_period_finish_date = trial_period_finish_date;
    m_trial_period_finish_date_isSet = true;
}

bool OAIContractCommitmentInfo::is_trial_period_finish_date_Set() const{
    return m_trial_period_finish_date_isSet;
}

bool OAIContractCommitmentInfo::is_trial_period_finish_date_Valid() const{
    return m_trial_period_finish_date_isValid;
}

qint32 OAIContractCommitmentInfo::getTrialPeriodInMonth() const {
    return m_trial_period_in_month;
}
void OAIContractCommitmentInfo::setTrialPeriodInMonth(const qint32 &trial_period_in_month) {
    m_trial_period_in_month = trial_period_in_month;
    m_trial_period_in_month_isSet = true;
}

bool OAIContractCommitmentInfo::is_trial_period_in_month_Set() const{
    return m_trial_period_in_month_isSet;
}

bool OAIContractCommitmentInfo::is_trial_period_in_month_Valid() const{
    return m_trial_period_in_month_isValid;
}

OAIVariableModelInfo OAIContractCommitmentInfo::getVariableModelInfo() const {
    return m_variable_model_info;
}
void OAIContractCommitmentInfo::setVariableModelInfo(const OAIVariableModelInfo &variable_model_info) {
    m_variable_model_info = variable_model_info;
    m_variable_model_info_isSet = true;
}

bool OAIContractCommitmentInfo::is_variable_model_info_Set() const{
    return m_variable_model_info_isSet;
}

bool OAIContractCommitmentInfo::is_variable_model_info_Valid() const{
    return m_variable_model_info_isValid;
}

bool OAIContractCommitmentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commercial_creator_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_calculated_finish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_period_in_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_offer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_contract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_contract_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_customer_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_and_variable_click_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_customer_wants_to_terminate_his_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_model_must_be_transmitted_in_new_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_billing_period_in_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_contract_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_delay_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_authorized.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_finish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_in_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_model_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractCommitmentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
