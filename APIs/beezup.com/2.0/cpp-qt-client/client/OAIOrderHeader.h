/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrderHeader.h
 *
 * Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
 */

#ifndef OAIOrderHeader_H
#define OAIOrderHeader_H

#include <QJsonObject>

#include "OAIOrderHeaderLinks.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrderHeaderLinks;

class OAIOrderHeader : public OAIObject {
public:
    OAIOrderHeader();
    OAIOrderHeader(QString json);
    ~OAIOrderHeader() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getBeezUpOrderId() const;
    void setBeezUpOrderId(const QString &beez_up_order_id);
    bool is_beez_up_order_id_Set() const;
    bool is_beez_up_order_id_Valid() const;

    QString getBeezUpOrderUrl() const;
    void setBeezUpOrderUrl(const QString &beez_up_order_url);
    bool is_beez_up_order_url_Set() const;
    bool is_beez_up_order_url_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    OAIOrderHeaderLinks getLinks() const;
    void setLinks(const OAIOrderHeaderLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getMarketplaceBusinessCode() const;
    void setMarketplaceBusinessCode(const QString &marketplace_business_code);
    bool is_marketplace_business_code_Set() const;
    bool is_marketplace_business_code_Valid() const;

    QString getMarketplaceTechnicalCode() const;
    void setMarketplaceTechnicalCode(const QString &marketplace_technical_code);
    bool is_marketplace_technical_code_Set() const;
    bool is_marketplace_technical_code_Valid() const;

    QString getOrderBuyerName() const;
    void setOrderBuyerName(const QString &order_buyer_name);
    bool is_order_buyer_name_Set() const;
    bool is_order_buyer_name_Valid() const;

    QString getOrderCurrencyCode() const;
    void setOrderCurrencyCode(const QString &order_currency_code);
    bool is_order_currency_code_Set() const;
    bool is_order_currency_code_Valid() const;

    QString getOrderInvoiceNumber() const;
    void setOrderInvoiceNumber(const QString &order_invoice_number);
    bool is_order_invoice_number_Set() const;
    bool is_order_invoice_number_Valid() const;

    QString getOrderInvoiceUri() const;
    void setOrderInvoiceUri(const QString &order_invoice_uri);
    bool is_order_invoice_uri_Set() const;
    bool is_order_invoice_uri_Valid() const;

    QDateTime getOrderLastModificationUtcDate() const;
    void setOrderLastModificationUtcDate(const QDateTime &order_last_modification_utc_date);
    bool is_order_last_modification_utc_date_Set() const;
    bool is_order_last_modification_utc_date_Valid() const;

    QDateTime getOrderMarketplaceLastModificationUtcDate() const;
    void setOrderMarketplaceLastModificationUtcDate(const QDateTime &order_marketplace_last_modification_utc_date);
    bool is_order_marketplace_last_modification_utc_date_Set() const;
    bool is_order_marketplace_last_modification_utc_date_Valid() const;

    QString getOrderMarketplaceOrderId() const;
    void setOrderMarketplaceOrderId(const QString &order_marketplace_order_id);
    bool is_order_marketplace_order_id_Set() const;
    bool is_order_marketplace_order_id_Valid() const;

    QString getOrderMerchantECommerceSoftwareName() const;
    void setOrderMerchantECommerceSoftwareName(const QString &order_merchant_e_commerce_software_name);
    bool is_order_merchant_e_commerce_software_name_Set() const;
    bool is_order_merchant_e_commerce_software_name_Valid() const;

    QString getOrderMerchantECommerceSoftwareVersion() const;
    void setOrderMerchantECommerceSoftwareVersion(const QString &order_merchant_e_commerce_software_version);
    bool is_order_merchant_e_commerce_software_version_Set() const;
    bool is_order_merchant_e_commerce_software_version_Valid() const;

    QString getOrderMerchantOrderId() const;
    void setOrderMerchantOrderId(const QString &order_merchant_order_id);
    bool is_order_merchant_order_id_Set() const;
    bool is_order_merchant_order_id_Valid() const;

    QDateTime getOrderPurchaseUtcDate() const;
    void setOrderPurchaseUtcDate(const QDateTime &order_purchase_utc_date);
    bool is_order_purchase_utc_date_Set() const;
    bool is_order_purchase_utc_date_Valid() const;

    QString getOrderStatusBeezUpOrderStatus() const;
    void setOrderStatusBeezUpOrderStatus(const QString &order_status_beez_up_order_status);
    bool is_order_status_beez_up_order_status_Set() const;
    bool is_order_status_beez_up_order_status_Valid() const;

    QString getOrderStatusMarketplaceOrderStatus() const;
    void setOrderStatusMarketplaceOrderStatus(const QString &order_status_marketplace_order_status);
    bool is_order_status_marketplace_order_status_Set() const;
    bool is_order_status_marketplace_order_status_Valid() const;

    double getOrderTotalPrice() const;
    void setOrderTotalPrice(const double &order_total_price);
    bool is_order_total_price_Set() const;
    bool is_order_total_price_Valid() const;

    bool isProcessing() const;
    void setProcessing(const bool &processing);
    bool is_processing_Set() const;
    bool is_processing_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_beez_up_order_id;
    bool m_beez_up_order_id_isSet;
    bool m_beez_up_order_id_isValid;

    QString m_beez_up_order_url;
    bool m_beez_up_order_url_isSet;
    bool m_beez_up_order_url_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    OAIOrderHeaderLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_marketplace_business_code;
    bool m_marketplace_business_code_isSet;
    bool m_marketplace_business_code_isValid;

    QString m_marketplace_technical_code;
    bool m_marketplace_technical_code_isSet;
    bool m_marketplace_technical_code_isValid;

    QString m_order_buyer_name;
    bool m_order_buyer_name_isSet;
    bool m_order_buyer_name_isValid;

    QString m_order_currency_code;
    bool m_order_currency_code_isSet;
    bool m_order_currency_code_isValid;

    QString m_order_invoice_number;
    bool m_order_invoice_number_isSet;
    bool m_order_invoice_number_isValid;

    QString m_order_invoice_uri;
    bool m_order_invoice_uri_isSet;
    bool m_order_invoice_uri_isValid;

    QDateTime m_order_last_modification_utc_date;
    bool m_order_last_modification_utc_date_isSet;
    bool m_order_last_modification_utc_date_isValid;

    QDateTime m_order_marketplace_last_modification_utc_date;
    bool m_order_marketplace_last_modification_utc_date_isSet;
    bool m_order_marketplace_last_modification_utc_date_isValid;

    QString m_order_marketplace_order_id;
    bool m_order_marketplace_order_id_isSet;
    bool m_order_marketplace_order_id_isValid;

    QString m_order_merchant_e_commerce_software_name;
    bool m_order_merchant_e_commerce_software_name_isSet;
    bool m_order_merchant_e_commerce_software_name_isValid;

    QString m_order_merchant_e_commerce_software_version;
    bool m_order_merchant_e_commerce_software_version_isSet;
    bool m_order_merchant_e_commerce_software_version_isValid;

    QString m_order_merchant_order_id;
    bool m_order_merchant_order_id_isSet;
    bool m_order_merchant_order_id_isValid;

    QDateTime m_order_purchase_utc_date;
    bool m_order_purchase_utc_date_isSet;
    bool m_order_purchase_utc_date_isValid;

    QString m_order_status_beez_up_order_status;
    bool m_order_status_beez_up_order_status_isSet;
    bool m_order_status_beez_up_order_status_isValid;

    QString m_order_status_marketplace_order_status;
    bool m_order_status_marketplace_order_status_isSet;
    bool m_order_status_marketplace_order_status_isValid;

    double m_order_total_price;
    bool m_order_total_price_isSet;
    bool m_order_total_price_isValid;

    bool m_processing;
    bool m_processing_isSet;
    bool m_processing_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrderHeader)

#endif // OAIOrderHeader_H
