/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountInfoLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountInfoLinks::OAIAccountInfoLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountInfoLinks::OAIAccountInfoLinks() {
    this->initializeModel();
}

OAIAccountInfoLinks::~OAIAccountInfoLinks() {}

void OAIAccountInfoLinks::initializeModel() {

    m_activate_user_account_isSet = false;
    m_activate_user_account_isValid = false;

    m_change_email_isSet = false;
    m_change_email_isValid = false;

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_get_credit_card_info_isSet = false;
    m_get_credit_card_info_isValid = false;

    m_get_profile_picture_info_isSet = false;
    m_get_profile_picture_info_isValid = false;

    m_save_company_info_isSet = false;
    m_save_company_info_isValid = false;

    m_save_credit_card_info_isSet = false;
    m_save_credit_card_info_isValid = false;

    m_save_personal_info_isSet = false;
    m_save_personal_info_isValid = false;

    m_save_profile_picture_info_isSet = false;
    m_save_profile_picture_info_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIAccountInfoLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountInfoLinks::fromJsonObject(QJsonObject json) {

    m_activate_user_account_isValid = ::OpenAPI::fromJsonValue(m_activate_user_account, json[QString("activateUserAccount")]);
    m_activate_user_account_isSet = !json[QString("activateUserAccount")].isNull() && m_activate_user_account_isValid;

    m_change_email_isValid = ::OpenAPI::fromJsonValue(m_change_email, json[QString("changeEmail")]);
    m_change_email_isSet = !json[QString("changeEmail")].isNull() && m_change_email_isValid;

    m_change_password_isValid = ::OpenAPI::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_get_credit_card_info_isValid = ::OpenAPI::fromJsonValue(m_get_credit_card_info, json[QString("getCreditCardInfo")]);
    m_get_credit_card_info_isSet = !json[QString("getCreditCardInfo")].isNull() && m_get_credit_card_info_isValid;

    m_get_profile_picture_info_isValid = ::OpenAPI::fromJsonValue(m_get_profile_picture_info, json[QString("getProfilePictureInfo")]);
    m_get_profile_picture_info_isSet = !json[QString("getProfilePictureInfo")].isNull() && m_get_profile_picture_info_isValid;

    m_save_company_info_isValid = ::OpenAPI::fromJsonValue(m_save_company_info, json[QString("saveCompanyInfo")]);
    m_save_company_info_isSet = !json[QString("saveCompanyInfo")].isNull() && m_save_company_info_isValid;

    m_save_credit_card_info_isValid = ::OpenAPI::fromJsonValue(m_save_credit_card_info, json[QString("saveCreditCardInfo")]);
    m_save_credit_card_info_isSet = !json[QString("saveCreditCardInfo")].isNull() && m_save_credit_card_info_isValid;

    m_save_personal_info_isValid = ::OpenAPI::fromJsonValue(m_save_personal_info, json[QString("savePersonalInfo")]);
    m_save_personal_info_isSet = !json[QString("savePersonalInfo")].isNull() && m_save_personal_info_isValid;

    m_save_profile_picture_info_isValid = ::OpenAPI::fromJsonValue(m_save_profile_picture_info, json[QString("saveProfilePictureInfo")]);
    m_save_profile_picture_info_isSet = !json[QString("saveProfilePictureInfo")].isNull() && m_save_profile_picture_info_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIAccountInfoLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountInfoLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_activate_user_account.isSet()) {
        obj.insert(QString("activateUserAccount"), ::OpenAPI::toJsonValue(m_activate_user_account));
    }
    if (m_change_email.isSet()) {
        obj.insert(QString("changeEmail"), ::OpenAPI::toJsonValue(m_change_email));
    }
    if (m_change_password.isSet()) {
        obj.insert(QString("changePassword"), ::OpenAPI::toJsonValue(m_change_password));
    }
    if (m_get_credit_card_info.isSet()) {
        obj.insert(QString("getCreditCardInfo"), ::OpenAPI::toJsonValue(m_get_credit_card_info));
    }
    if (m_get_profile_picture_info.isSet()) {
        obj.insert(QString("getProfilePictureInfo"), ::OpenAPI::toJsonValue(m_get_profile_picture_info));
    }
    if (m_save_company_info.isSet()) {
        obj.insert(QString("saveCompanyInfo"), ::OpenAPI::toJsonValue(m_save_company_info));
    }
    if (m_save_credit_card_info.isSet()) {
        obj.insert(QString("saveCreditCardInfo"), ::OpenAPI::toJsonValue(m_save_credit_card_info));
    }
    if (m_save_personal_info.isSet()) {
        obj.insert(QString("savePersonalInfo"), ::OpenAPI::toJsonValue(m_save_personal_info));
    }
    if (m_save_profile_picture_info.isSet()) {
        obj.insert(QString("saveProfilePictureInfo"), ::OpenAPI::toJsonValue(m_save_profile_picture_info));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAILinks_activateUserAccountLink OAIAccountInfoLinks::getActivateUserAccount() const {
    return m_activate_user_account;
}
void OAIAccountInfoLinks::setActivateUserAccount(const OAILinks_activateUserAccountLink &activate_user_account) {
    m_activate_user_account = activate_user_account;
    m_activate_user_account_isSet = true;
}

bool OAIAccountInfoLinks::is_activate_user_account_Set() const{
    return m_activate_user_account_isSet;
}

bool OAIAccountInfoLinks::is_activate_user_account_Valid() const{
    return m_activate_user_account_isValid;
}

OAILinks_changeEmailLink OAIAccountInfoLinks::getChangeEmail() const {
    return m_change_email;
}
void OAIAccountInfoLinks::setChangeEmail(const OAILinks_changeEmailLink &change_email) {
    m_change_email = change_email;
    m_change_email_isSet = true;
}

bool OAIAccountInfoLinks::is_change_email_Set() const{
    return m_change_email_isSet;
}

bool OAIAccountInfoLinks::is_change_email_Valid() const{
    return m_change_email_isValid;
}

OAILinks_changePasswordLink OAIAccountInfoLinks::getChangePassword() const {
    return m_change_password;
}
void OAIAccountInfoLinks::setChangePassword(const OAILinks_changePasswordLink &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool OAIAccountInfoLinks::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool OAIAccountInfoLinks::is_change_password_Valid() const{
    return m_change_password_isValid;
}

OAILinks_getCreditCardInfoLink OAIAccountInfoLinks::getGetCreditCardInfo() const {
    return m_get_credit_card_info;
}
void OAIAccountInfoLinks::setGetCreditCardInfo(const OAILinks_getCreditCardInfoLink &get_credit_card_info) {
    m_get_credit_card_info = get_credit_card_info;
    m_get_credit_card_info_isSet = true;
}

bool OAIAccountInfoLinks::is_get_credit_card_info_Set() const{
    return m_get_credit_card_info_isSet;
}

bool OAIAccountInfoLinks::is_get_credit_card_info_Valid() const{
    return m_get_credit_card_info_isValid;
}

OAILinks_getProfilePictureInfoLink OAIAccountInfoLinks::getGetProfilePictureInfo() const {
    return m_get_profile_picture_info;
}
void OAIAccountInfoLinks::setGetProfilePictureInfo(const OAILinks_getProfilePictureInfoLink &get_profile_picture_info) {
    m_get_profile_picture_info = get_profile_picture_info;
    m_get_profile_picture_info_isSet = true;
}

bool OAIAccountInfoLinks::is_get_profile_picture_info_Set() const{
    return m_get_profile_picture_info_isSet;
}

bool OAIAccountInfoLinks::is_get_profile_picture_info_Valid() const{
    return m_get_profile_picture_info_isValid;
}

OAILinks_saveCompanyInfoLink OAIAccountInfoLinks::getSaveCompanyInfo() const {
    return m_save_company_info;
}
void OAIAccountInfoLinks::setSaveCompanyInfo(const OAILinks_saveCompanyInfoLink &save_company_info) {
    m_save_company_info = save_company_info;
    m_save_company_info_isSet = true;
}

bool OAIAccountInfoLinks::is_save_company_info_Set() const{
    return m_save_company_info_isSet;
}

bool OAIAccountInfoLinks::is_save_company_info_Valid() const{
    return m_save_company_info_isValid;
}

OAILinks_saveCreditCardInfoLink OAIAccountInfoLinks::getSaveCreditCardInfo() const {
    return m_save_credit_card_info;
}
void OAIAccountInfoLinks::setSaveCreditCardInfo(const OAILinks_saveCreditCardInfoLink &save_credit_card_info) {
    m_save_credit_card_info = save_credit_card_info;
    m_save_credit_card_info_isSet = true;
}

bool OAIAccountInfoLinks::is_save_credit_card_info_Set() const{
    return m_save_credit_card_info_isSet;
}

bool OAIAccountInfoLinks::is_save_credit_card_info_Valid() const{
    return m_save_credit_card_info_isValid;
}

OAILinks_savePersonalInfoLink OAIAccountInfoLinks::getSavePersonalInfo() const {
    return m_save_personal_info;
}
void OAIAccountInfoLinks::setSavePersonalInfo(const OAILinks_savePersonalInfoLink &save_personal_info) {
    m_save_personal_info = save_personal_info;
    m_save_personal_info_isSet = true;
}

bool OAIAccountInfoLinks::is_save_personal_info_Set() const{
    return m_save_personal_info_isSet;
}

bool OAIAccountInfoLinks::is_save_personal_info_Valid() const{
    return m_save_personal_info_isValid;
}

OAILinks_saveProfilePictureInfoLink OAIAccountInfoLinks::getSaveProfilePictureInfo() const {
    return m_save_profile_picture_info;
}
void OAIAccountInfoLinks::setSaveProfilePictureInfo(const OAILinks_saveProfilePictureInfoLink &save_profile_picture_info) {
    m_save_profile_picture_info = save_profile_picture_info;
    m_save_profile_picture_info_isSet = true;
}

bool OAIAccountInfoLinks::is_save_profile_picture_info_Set() const{
    return m_save_profile_picture_info_isSet;
}

bool OAIAccountInfoLinks::is_save_profile_picture_info_Valid() const{
    return m_save_profile_picture_info_isValid;
}

OAILinks_getUserAccountInfoLink OAIAccountInfoLinks::getSelf() const {
    return m_self;
}
void OAIAccountInfoLinks::setSelf(const OAILinks_getUserAccountInfoLink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAccountInfoLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAccountInfoLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIAccountInfoLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activate_user_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_credit_card_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_profile_picture_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_company_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_credit_card_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_personal_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_profile_picture_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountInfoLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_email_isValid && m_change_password_isValid && m_get_credit_card_info_isValid && m_get_profile_picture_info_isValid && m_save_company_info_isValid && m_save_credit_card_info_isValid && m_save_personal_info_isValid && m_save_profile_picture_info_isValid && m_self_isValid && true;
}

} // namespace OpenAPI
