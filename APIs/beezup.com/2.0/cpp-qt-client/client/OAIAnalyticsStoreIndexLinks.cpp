/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsStoreIndexLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsStoreIndexLinks::OAIAnalyticsStoreIndexLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsStoreIndexLinks::OAIAnalyticsStoreIndexLinks() {
    this->initializeModel();
}

OAIAnalyticsStoreIndexLinks::~OAIAnalyticsStoreIndexLinks() {}

void OAIAnalyticsStoreIndexLinks::initializeModel() {

    m_optimise_isSet = false;
    m_optimise_isValid = false;

    m_optimise_all_isSet = false;
    m_optimise_all_isValid = false;

    m_optimise_by_category_isSet = false;
    m_optimise_by_category_isValid = false;

    m_optimise_by_channel_isSet = false;
    m_optimise_by_channel_isValid = false;

    m_optimise_by_product_isSet = false;
    m_optimise_by_product_isValid = false;

    m_report_by_category_isSet = false;
    m_report_by_category_isValid = false;

    m_report_by_channel_isSet = false;
    m_report_by_channel_isValid = false;

    m_report_by_day_isSet = false;
    m_report_by_day_isValid = false;

    m_report_by_product_isSet = false;
    m_report_by_product_isValid = false;

    m_report_filters_isSet = false;
    m_report_filters_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_tracked_clicks_isSet = false;
    m_tracked_clicks_isValid = false;

    m_tracked_external_orders_isSet = false;
    m_tracked_external_orders_isValid = false;

    m_tracked_orders_isSet = false;
    m_tracked_orders_isValid = false;

    m_tracking_status_isSet = false;
    m_tracking_status_isValid = false;
}

void OAIAnalyticsStoreIndexLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyticsStoreIndexLinks::fromJsonObject(QJsonObject json) {

    m_optimise_isValid = ::OpenAPI::fromJsonValue(m_optimise, json[QString("optimise")]);
    m_optimise_isSet = !json[QString("optimise")].isNull() && m_optimise_isValid;

    m_optimise_all_isValid = ::OpenAPI::fromJsonValue(m_optimise_all, json[QString("optimiseAll")]);
    m_optimise_all_isSet = !json[QString("optimiseAll")].isNull() && m_optimise_all_isValid;

    m_optimise_by_category_isValid = ::OpenAPI::fromJsonValue(m_optimise_by_category, json[QString("optimiseByCategory")]);
    m_optimise_by_category_isSet = !json[QString("optimiseByCategory")].isNull() && m_optimise_by_category_isValid;

    m_optimise_by_channel_isValid = ::OpenAPI::fromJsonValue(m_optimise_by_channel, json[QString("optimiseByChannel")]);
    m_optimise_by_channel_isSet = !json[QString("optimiseByChannel")].isNull() && m_optimise_by_channel_isValid;

    m_optimise_by_product_isValid = ::OpenAPI::fromJsonValue(m_optimise_by_product, json[QString("optimiseByProduct")]);
    m_optimise_by_product_isSet = !json[QString("optimiseByProduct")].isNull() && m_optimise_by_product_isValid;

    m_report_by_category_isValid = ::OpenAPI::fromJsonValue(m_report_by_category, json[QString("reportByCategory")]);
    m_report_by_category_isSet = !json[QString("reportByCategory")].isNull() && m_report_by_category_isValid;

    m_report_by_channel_isValid = ::OpenAPI::fromJsonValue(m_report_by_channel, json[QString("reportByChannel")]);
    m_report_by_channel_isSet = !json[QString("reportByChannel")].isNull() && m_report_by_channel_isValid;

    m_report_by_day_isValid = ::OpenAPI::fromJsonValue(m_report_by_day, json[QString("reportByDay")]);
    m_report_by_day_isSet = !json[QString("reportByDay")].isNull() && m_report_by_day_isValid;

    m_report_by_product_isValid = ::OpenAPI::fromJsonValue(m_report_by_product, json[QString("reportByProduct")]);
    m_report_by_product_isSet = !json[QString("reportByProduct")].isNull() && m_report_by_product_isValid;

    m_report_filters_isValid = ::OpenAPI::fromJsonValue(m_report_filters, json[QString("reportFilters")]);
    m_report_filters_isSet = !json[QString("reportFilters")].isNull() && m_report_filters_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_tracked_clicks_isValid = ::OpenAPI::fromJsonValue(m_tracked_clicks, json[QString("trackedClicks")]);
    m_tracked_clicks_isSet = !json[QString("trackedClicks")].isNull() && m_tracked_clicks_isValid;

    m_tracked_external_orders_isValid = ::OpenAPI::fromJsonValue(m_tracked_external_orders, json[QString("trackedExternalOrders")]);
    m_tracked_external_orders_isSet = !json[QString("trackedExternalOrders")].isNull() && m_tracked_external_orders_isValid;

    m_tracked_orders_isValid = ::OpenAPI::fromJsonValue(m_tracked_orders, json[QString("trackedOrders")]);
    m_tracked_orders_isSet = !json[QString("trackedOrders")].isNull() && m_tracked_orders_isValid;

    m_tracking_status_isValid = ::OpenAPI::fromJsonValue(m_tracking_status, json[QString("trackingStatus")]);
    m_tracking_status_isSet = !json[QString("trackingStatus")].isNull() && m_tracking_status_isValid;
}

QString OAIAnalyticsStoreIndexLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyticsStoreIndexLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_optimise.isSet()) {
        obj.insert(QString("optimise"), ::OpenAPI::toJsonValue(m_optimise));
    }
    if (m_optimise_all.isSet()) {
        obj.insert(QString("optimiseAll"), ::OpenAPI::toJsonValue(m_optimise_all));
    }
    if (m_optimise_by_category.isSet()) {
        obj.insert(QString("optimiseByCategory"), ::OpenAPI::toJsonValue(m_optimise_by_category));
    }
    if (m_optimise_by_channel.isSet()) {
        obj.insert(QString("optimiseByChannel"), ::OpenAPI::toJsonValue(m_optimise_by_channel));
    }
    if (m_optimise_by_product.isSet()) {
        obj.insert(QString("optimiseByProduct"), ::OpenAPI::toJsonValue(m_optimise_by_product));
    }
    if (m_report_by_category.isSet()) {
        obj.insert(QString("reportByCategory"), ::OpenAPI::toJsonValue(m_report_by_category));
    }
    if (m_report_by_channel.isSet()) {
        obj.insert(QString("reportByChannel"), ::OpenAPI::toJsonValue(m_report_by_channel));
    }
    if (m_report_by_day.isSet()) {
        obj.insert(QString("reportByDay"), ::OpenAPI::toJsonValue(m_report_by_day));
    }
    if (m_report_by_product.isSet()) {
        obj.insert(QString("reportByProduct"), ::OpenAPI::toJsonValue(m_report_by_product));
    }
    if (m_report_filters.isSet()) {
        obj.insert(QString("reportFilters"), ::OpenAPI::toJsonValue(m_report_filters));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_tracked_clicks.isSet()) {
        obj.insert(QString("trackedClicks"), ::OpenAPI::toJsonValue(m_tracked_clicks));
    }
    if (m_tracked_external_orders.isSet()) {
        obj.insert(QString("trackedExternalOrders"), ::OpenAPI::toJsonValue(m_tracked_external_orders));
    }
    if (m_tracked_orders.isSet()) {
        obj.insert(QString("trackedOrders"), ::OpenAPI::toJsonValue(m_tracked_orders));
    }
    if (m_tracking_status.isSet()) {
        obj.insert(QString("trackingStatus"), ::OpenAPI::toJsonValue(m_tracking_status));
    }
    return obj;
}

OAILinks_OptimiseLink OAIAnalyticsStoreIndexLinks::getOptimise() const {
    return m_optimise;
}
void OAIAnalyticsStoreIndexLinks::setOptimise(const OAILinks_OptimiseLink &optimise) {
    m_optimise = optimise;
    m_optimise_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_Set() const{
    return m_optimise_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_Valid() const{
    return m_optimise_isValid;
}

OAILinks_OptimiseAllLink OAIAnalyticsStoreIndexLinks::getOptimiseAll() const {
    return m_optimise_all;
}
void OAIAnalyticsStoreIndexLinks::setOptimiseAll(const OAILinks_OptimiseAllLink &optimise_all) {
    m_optimise_all = optimise_all;
    m_optimise_all_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_all_Set() const{
    return m_optimise_all_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_all_Valid() const{
    return m_optimise_all_isValid;
}

OAILinks_OptimiseByCategoryLink OAIAnalyticsStoreIndexLinks::getOptimiseByCategory() const {
    return m_optimise_by_category;
}
void OAIAnalyticsStoreIndexLinks::setOptimiseByCategory(const OAILinks_OptimiseByCategoryLink &optimise_by_category) {
    m_optimise_by_category = optimise_by_category;
    m_optimise_by_category_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_category_Set() const{
    return m_optimise_by_category_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_category_Valid() const{
    return m_optimise_by_category_isValid;
}

OAILinks_OptimiseByChannelLink OAIAnalyticsStoreIndexLinks::getOptimiseByChannel() const {
    return m_optimise_by_channel;
}
void OAIAnalyticsStoreIndexLinks::setOptimiseByChannel(const OAILinks_OptimiseByChannelLink &optimise_by_channel) {
    m_optimise_by_channel = optimise_by_channel;
    m_optimise_by_channel_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_channel_Set() const{
    return m_optimise_by_channel_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_channel_Valid() const{
    return m_optimise_by_channel_isValid;
}

OAILinks_OptimiseByProductLink OAIAnalyticsStoreIndexLinks::getOptimiseByProduct() const {
    return m_optimise_by_product;
}
void OAIAnalyticsStoreIndexLinks::setOptimiseByProduct(const OAILinks_OptimiseByProductLink &optimise_by_product) {
    m_optimise_by_product = optimise_by_product;
    m_optimise_by_product_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_product_Set() const{
    return m_optimise_by_product_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_optimise_by_product_Valid() const{
    return m_optimise_by_product_isValid;
}

OAILinks_GetStoreReportByCategoryLink OAIAnalyticsStoreIndexLinks::getReportByCategory() const {
    return m_report_by_category;
}
void OAIAnalyticsStoreIndexLinks::setReportByCategory(const OAILinks_GetStoreReportByCategoryLink &report_by_category) {
    m_report_by_category = report_by_category;
    m_report_by_category_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_category_Set() const{
    return m_report_by_category_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_category_Valid() const{
    return m_report_by_category_isValid;
}

OAILinks_GetStoreReportByChannelLink OAIAnalyticsStoreIndexLinks::getReportByChannel() const {
    return m_report_by_channel;
}
void OAIAnalyticsStoreIndexLinks::setReportByChannel(const OAILinks_GetStoreReportByChannelLink &report_by_channel) {
    m_report_by_channel = report_by_channel;
    m_report_by_channel_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_channel_Set() const{
    return m_report_by_channel_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_channel_Valid() const{
    return m_report_by_channel_isValid;
}

OAILinks_GetStoreReportByDayLink OAIAnalyticsStoreIndexLinks::getReportByDay() const {
    return m_report_by_day;
}
void OAIAnalyticsStoreIndexLinks::setReportByDay(const OAILinks_GetStoreReportByDayLink &report_by_day) {
    m_report_by_day = report_by_day;
    m_report_by_day_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_day_Set() const{
    return m_report_by_day_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_day_Valid() const{
    return m_report_by_day_isValid;
}

OAILinks_GetStoreReportByProductLink OAIAnalyticsStoreIndexLinks::getReportByProduct() const {
    return m_report_by_product;
}
void OAIAnalyticsStoreIndexLinks::setReportByProduct(const OAILinks_GetStoreReportByProductLink &report_by_product) {
    m_report_by_product = report_by_product;
    m_report_by_product_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_product_Set() const{
    return m_report_by_product_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_report_by_product_Valid() const{
    return m_report_by_product_isValid;
}

OAILinks_GetReportFiltersLink OAIAnalyticsStoreIndexLinks::getReportFilters() const {
    return m_report_filters;
}
void OAIAnalyticsStoreIndexLinks::setReportFilters(const OAILinks_GetReportFiltersLink &report_filters) {
    m_report_filters = report_filters;
    m_report_filters_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_report_filters_Set() const{
    return m_report_filters_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_report_filters_Valid() const{
    return m_report_filters_isValid;
}

OAILinks_GetRulesLink OAIAnalyticsStoreIndexLinks::getRules() const {
    return m_rules;
}
void OAIAnalyticsStoreIndexLinks::setRules(const OAILinks_GetRulesLink &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_rules_Valid() const{
    return m_rules_isValid;
}

OAILinks_AnalyticsIndexLink OAIAnalyticsStoreIndexLinks::getSelf() const {
    return m_self;
}
void OAIAnalyticsStoreIndexLinks::setSelf(const OAILinks_AnalyticsIndexLink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAILinks_GetStoreTrackedClicksLink OAIAnalyticsStoreIndexLinks::getTrackedClicks() const {
    return m_tracked_clicks;
}
void OAIAnalyticsStoreIndexLinks::setTrackedClicks(const OAILinks_GetStoreTrackedClicksLink &tracked_clicks) {
    m_tracked_clicks = tracked_clicks;
    m_tracked_clicks_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_clicks_Set() const{
    return m_tracked_clicks_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_clicks_Valid() const{
    return m_tracked_clicks_isValid;
}

OAILinks_GetStoreTrackedExternalOrdersLink OAIAnalyticsStoreIndexLinks::getTrackedExternalOrders() const {
    return m_tracked_external_orders;
}
void OAIAnalyticsStoreIndexLinks::setTrackedExternalOrders(const OAILinks_GetStoreTrackedExternalOrdersLink &tracked_external_orders) {
    m_tracked_external_orders = tracked_external_orders;
    m_tracked_external_orders_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_external_orders_Set() const{
    return m_tracked_external_orders_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_external_orders_Valid() const{
    return m_tracked_external_orders_isValid;
}

OAILinks_GetStoreTrackedOrdersLink OAIAnalyticsStoreIndexLinks::getTrackedOrders() const {
    return m_tracked_orders;
}
void OAIAnalyticsStoreIndexLinks::setTrackedOrders(const OAILinks_GetStoreTrackedOrdersLink &tracked_orders) {
    m_tracked_orders = tracked_orders;
    m_tracked_orders_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_orders_Set() const{
    return m_tracked_orders_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_tracked_orders_Valid() const{
    return m_tracked_orders_isValid;
}

OAILinks_GetStoreTrackingStatusLink OAIAnalyticsStoreIndexLinks::getTrackingStatus() const {
    return m_tracking_status;
}
void OAIAnalyticsStoreIndexLinks::setTrackingStatus(const OAILinks_GetStoreTrackingStatusLink &tracking_status) {
    m_tracking_status = tracking_status;
    m_tracking_status_isSet = true;
}

bool OAIAnalyticsStoreIndexLinks::is_tracking_status_Set() const{
    return m_tracking_status_isSet;
}

bool OAIAnalyticsStoreIndexLinks::is_tracking_status_Valid() const{
    return m_tracking_status_isValid;
}

bool OAIAnalyticsStoreIndexLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_optimise.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimise_all.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimise_by_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimise_by_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimise_by_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_by_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_by_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_by_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_by_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_clicks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_external_orders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_orders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyticsStoreIndexLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_filters_isValid && m_self_isValid && m_tracked_clicks_isValid && m_tracked_orders_isValid && m_tracking_status_isValid && true;
}

} // namespace OpenAPI
