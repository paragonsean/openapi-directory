/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpMethod from './HttpMethod';
import InfoSummaries from './InfoSummaries';
import Link3 from './Link3';
import LinkParameter3 from './LinkParameter3';

/**
 * The LinksSetMerchantOrderInfoListV3Link model module.
 * @module model/LinksSetMerchantOrderInfoListV3Link
 * @version 2.0
 */
class LinksSetMerchantOrderInfoListV3Link {
    /**
     * Constructs a new <code>LinksSetMerchantOrderInfoListV3Link</code>.
     * @alias module:model/LinksSetMerchantOrderInfoListV3Link
     * @implements module:model/Link3
     * @param href {String} Indicate the relative uri for this link
     */
    constructor(href) { 
        Link3.initialize(this, href);
        LinksSetMerchantOrderInfoListV3Link.initialize(this, href);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href) { 
        obj['href'] = href;
    }

    /**
     * Constructs a <code>LinksSetMerchantOrderInfoListV3Link</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinksSetMerchantOrderInfoListV3Link} obj Optional instance to populate.
     * @return {module:model/LinksSetMerchantOrderInfoListV3Link} The populated <code>LinksSetMerchantOrderInfoListV3Link</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinksSetMerchantOrderInfoListV3Link();
            Link3.constructFromObject(data, obj);

            if (data.hasOwnProperty('allOptionalParamsProvided')) {
                obj['allOptionalParamsProvided'] = ApiClient.convertToType(data['allOptionalParamsProvided'], 'Boolean');
            }
            if (data.hasOwnProperty('allRequiredParamsProvided')) {
                obj['allRequiredParamsProvided'] = ApiClient.convertToType(data['allRequiredParamsProvided'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('docUrl')) {
                obj['docUrl'] = ApiClient.convertToType(data['docUrl'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = InfoSummaries.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = HttpMethod.constructFromObject(data['method']);
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': LinkParameter3});
            }
            if (data.hasOwnProperty('rel')) {
                obj['rel'] = ApiClient.convertToType(data['rel'], 'String');
            }
            if (data.hasOwnProperty('urlTemplated')) {
                obj['urlTemplated'] = ApiClient.convertToType(data['urlTemplated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinksSetMerchantOrderInfoListV3Link</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinksSetMerchantOrderInfoListV3Link</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinksSetMerchantOrderInfoListV3Link.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['docUrl'] && !(typeof data['docUrl'] === 'string' || data['docUrl'] instanceof String)) {
            throw new Error("Expected the field `docUrl` to be a primitive type in the JSON string but got " + data['docUrl']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // validate the optional field `info`
        if (data['info']) { // data not null
          InfoSummaries.validateJSON(data['info']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['rel'] && !(typeof data['rel'] === 'string' || data['rel'] instanceof String)) {
            throw new Error("Expected the field `rel` to be a primitive type in the JSON string but got " + data['rel']);
        }

        return true;
    }


}

LinksSetMerchantOrderInfoListV3Link.RequiredProperties = ["href"];

/**
 * indicates whether all optionals params have been provided
 * @member {Boolean} allOptionalParamsProvided
 */
LinksSetMerchantOrderInfoListV3Link.prototype['allOptionalParamsProvided'] = undefined;

/**
 * indicates whether all required params have been provided
 * @member {Boolean} allRequiredParamsProvided
 */
LinksSetMerchantOrderInfoListV3Link.prototype['allRequiredParamsProvided'] = undefined;

/**
 * The description of the link
 * @member {String} description
 */
LinksSetMerchantOrderInfoListV3Link.prototype['description'] = undefined;

/**
 * The documentation related to this operation.
 * @member {String} docUrl
 */
LinksSetMerchantOrderInfoListV3Link.prototype['docUrl'] = undefined;

/**
 * Indicate the relative uri for this link
 * @member {String} href
 */
LinksSetMerchantOrderInfoListV3Link.prototype['href'] = undefined;

/**
 * @member {module:model/InfoSummaries} info
 */
LinksSetMerchantOrderInfoListV3Link.prototype['info'] = undefined;

/**
 * The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
 * @member {String} label
 */
LinksSetMerchantOrderInfoListV3Link.prototype['label'] = undefined;

/**
 * @member {module:model/HttpMethod} method
 */
LinksSetMerchantOrderInfoListV3Link.prototype['method'] = undefined;

/**
 * The operationId to call.
 * @member {String} operationId
 */
LinksSetMerchantOrderInfoListV3Link.prototype['operationId'] = undefined;

/**
 * @member {Object.<String, module:model/LinkParameter3>} parameters
 */
LinksSetMerchantOrderInfoListV3Link.prototype['parameters'] = undefined;

/**
 * Indicate the relation name related to the link
 * @member {String} rel
 */
LinksSetMerchantOrderInfoListV3Link.prototype['rel'] = undefined;

/**
 * indicates whether the href is templated or not
 * @member {Boolean} urlTemplated
 */
LinksSetMerchantOrderInfoListV3Link.prototype['urlTemplated'] = undefined;


// Implement Link3 interface:
/**
 * indicates whether all optionals params have been provided
 * @member {Boolean} allOptionalParamsProvided
 */
Link3.prototype['allOptionalParamsProvided'] = undefined;
/**
 * indicates whether all required params have been provided
 * @member {Boolean} allRequiredParamsProvided
 */
Link3.prototype['allRequiredParamsProvided'] = undefined;
/**
 * The description of the link
 * @member {String} description
 */
Link3.prototype['description'] = undefined;
/**
 * The documentation related to this operation.
 * @member {String} docUrl
 */
Link3.prototype['docUrl'] = undefined;
/**
 * Indicate the relative uri for this link
 * @member {String} href
 */
Link3.prototype['href'] = undefined;
/**
 * @member {module:model/InfoSummaries} info
 */
Link3.prototype['info'] = undefined;
/**
 * The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
 * @member {String} label
 */
Link3.prototype['label'] = undefined;
/**
 * @member {module:model/HttpMethod} method
 */
Link3.prototype['method'] = undefined;
/**
 * The operationId to call.
 * @member {String} operationId
 */
Link3.prototype['operationId'] = undefined;
/**
 * @member {Object.<String, module:model/LinkParameter3>} parameters
 */
Link3.prototype['parameters'] = undefined;
/**
 * Indicate the relation name related to the link
 * @member {String} rel
 */
Link3.prototype['rel'] = undefined;
/**
 * indicates whether the href is templated or not
 * @member {Boolean} urlTemplated
 */
Link3.prototype['urlTemplated'] = undefined;




export default LinksSetMerchantOrderInfoListV3Link;

