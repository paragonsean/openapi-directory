/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BeezUPCommonErrorResponseMessage from '../model/BeezUPCommonErrorResponseMessage';
import ChangeOrderReporting from '../model/ChangeOrderReporting';
import ErrorResponseMessage from '../model/ErrorResponseMessage';
import OrderHistory from '../model/OrderHistory';
import OrderWithLinks from '../model/OrderWithLinks';
import SetMerchantOrderInfoRequest from '../model/SetMerchantOrderInfoRequest';

/**
* MarketplacesOrdersV3Order service.
* @module api/MarketplacesOrdersV3OrderApi
* @version 2.0
*/
export default class MarketplacesOrdersV3OrderApi {

    /**
    * Constructs a new MarketplacesOrdersV3OrderApi. 
    * @alias module:api/MarketplacesOrdersV3OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeOrderV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~changeOrderV3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {String} changeOrderType The Order change type
     * @param {String} userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [testMode = false)] If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
     * @param {Object.<String, {String: String}>} [requestBody] 
     * @param {module:api/MarketplacesOrdersV3OrderApi~changeOrderV3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    changeOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrderV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling changeOrderV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling changeOrderV3");
      }
      // verify the required parameter 'changeOrderType' is set
      if (changeOrderType === undefined || changeOrderType === null) {
        throw new Error("Missing the required parameter 'changeOrderType' when calling changeOrderV3");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling changeOrderV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId,
        'changeOrderType': changeOrderType
      };
      let queryParams = {
        'userName': userName,
        'testMode': opts['testMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearMerchantOrderInfoV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~clearMerchantOrderInfoV3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear an Order's merchant information
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [testMode = false)] If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
     * @param {module:api/MarketplacesOrdersV3OrderApi~clearMerchantOrderInfoV3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    clearMerchantOrderInfoV3(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfoV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling clearMerchantOrderInfoV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfoV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
        'testMode': opts['testMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderChangeReportingV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~getOrderChangeReportingV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeOrderReporting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the order change reporting
     * This operation will help you to know the status of your order change operation
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {String} orderChangeExecutionUUID The order change execution id
     * @param {module:api/MarketplacesOrdersV3OrderApi~getOrderChangeReportingV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeOrderReporting}
     */
    getOrderChangeReportingV3(marketplaceTechnicalCode, accountId, beezUPOrderId, orderChangeExecutionUUID, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderChangeReportingV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getOrderChangeReportingV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling getOrderChangeReportingV3");
      }
      // verify the required parameter 'orderChangeExecutionUUID' is set
      if (orderChangeExecutionUUID === undefined || orderChangeExecutionUUID === null) {
        throw new Error("Missing the required parameter 'orderChangeExecutionUUID' when calling getOrderChangeReportingV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId,
        'orderChangeExecutionUUID': orderChangeExecutionUUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChangeOrderReporting;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history/{orderChangeExecutionUUID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderHistoryV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~getOrderHistoryV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Order's harvest and change history
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:api/MarketplacesOrdersV3OrderApi~getOrderHistoryV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderHistory}
     */
    getOrderHistoryV3(marketplaceTechnicalCode, accountId, beezUPOrderId, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistoryV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getOrderHistoryV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling getOrderHistoryV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderHistory;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~getOrderV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderWithLinks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full Order and Order Item(s) properties
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/MarketplacesOrdersV3OrderApi~getOrderV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderWithLinks}
     */
    getOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getOrderV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling getOrderV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderWithLinks;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the harvestAccount operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~harvestAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send harvest request for an Account
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {Object} opts Optional parameters
     * @param {String} [marketplaceOrderId] 
     * @param {String} [beezUPOrderId] 
     * @param {module:api/MarketplacesOrdersV3OrderApi~harvestAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    harvestAccount(marketplaceTechnicalCode, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestAccount");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling harvestAccount");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId
      };
      let queryParams = {
        'marketplaceOrderId': opts['marketplaceOrderId'],
        'beezUPOrderId': opts['beezUPOrderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/harvest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the harvestOrderV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~harvestOrderV3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send harvest request for a single Order
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:api/MarketplacesOrdersV3OrderApi~harvestOrderV3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    harvestOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrderV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling harvestOrderV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling harvestOrderV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headOrderV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~headOrderV3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the meta information about the order (ETag, Last-Modified)
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/MarketplacesOrdersV3OrderApi~headOrderV3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    headOrderV3(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling headOrderV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling headOrderV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling headOrderV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMerchantOrderInfoV3 operation.
     * @callback module:api/MarketplacesOrdersV3OrderApi~setMerchantOrderInfoV3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an Order's merchant information
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId 
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:model/SetMerchantOrderInfoRequest} setMerchantOrderInfoRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [testMode = false)] If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
     * @param {module:api/MarketplacesOrdersV3OrderApi~setMerchantOrderInfoV3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    setMerchantOrderInfoV3(marketplaceTechnicalCode, accountId, beezUPOrderId, setMerchantOrderInfoRequest, opts, callback) {
      opts = opts || {};
      let postBody = setMerchantOrderInfoRequest;
      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode === undefined || marketplaceTechnicalCode === null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfoV3");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling setMerchantOrderInfoV3");
      }
      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId === undefined || beezUPOrderId === null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfoV3");
      }
      // verify the required parameter 'setMerchantOrderInfoRequest' is set
      if (setMerchantOrderInfoRequest === undefined || setMerchantOrderInfoRequest === null) {
        throw new Error("Missing the required parameter 'setMerchantOrderInfoRequest' when calling setMerchantOrderInfoV3");
      }

      let pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      let queryParams = {
        'testMode': opts['testMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/v3/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
