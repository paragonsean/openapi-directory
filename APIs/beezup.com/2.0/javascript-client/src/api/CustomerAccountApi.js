/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountInfo from '../model/AccountInfo';
import BeezUPCommonErrorResponseMessage from '../model/BeezUPCommonErrorResponseMessage';
import ChangeEmailRequest from '../model/ChangeEmailRequest';
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import CompanyInfo from '../model/CompanyInfo';
import CreditCardInfo from '../model/CreditCardInfo';
import CreditCardInfoResponse from '../model/CreditCardInfoResponse';
import PersonalInfo from '../model/PersonalInfo';
import ProfilePictureInfo from '../model/ProfilePictureInfo';
import ProfilePictureInfoResponse from '../model/ProfilePictureInfoResponse';

/**
* CustomerAccount service.
* @module api/CustomerAccountApi
* @version 2.0
*/
export default class CustomerAccountApi {

    /**
    * Constructs a new CustomerAccountApi. 
    * @alias module:api/CustomerAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateUserAccount operation.
     * @callback module:api/CustomerAccountApi~activateUserAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate the user account
     * @param {String} body The email activation id received by email.
     * @param {module:api/CustomerAccountApi~activateUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateUserAccount(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling activateUserAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeEmail operation.
     * @callback module:api/CustomerAccountApi~changeEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user email
     * @param {module:model/ChangeEmailRequest} changeEmailRequest 
     * @param {module:api/CustomerAccountApi~changeEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeEmail(changeEmailRequest, callback) {
      let postBody = changeEmailRequest;
      // verify the required parameter 'changeEmailRequest' is set
      if (changeEmailRequest === undefined || changeEmailRequest === null) {
        throw new Error("Missing the required parameter 'changeEmailRequest' when calling changeEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/changeEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/CustomerAccountApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user password
     * @param {module:model/ChangePasswordRequest} changePasswordRequest 
     * @param {module:api/CustomerAccountApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(changePasswordRequest, callback) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCardInfo operation.
     * @callback module:api/CustomerAccountApi~getCreditCardInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCardInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit card information
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/CustomerAccountApi~getCreditCardInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCardInfoResponse}
     */
    getCreditCardInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditCardInfoResponse;
      return this.apiClient.callApi(
        '/v2/user/customer/account/creditCardInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfilePictureInfo operation.
     * @callback module:api/CustomerAccountApi~getProfilePictureInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePictureInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile picture information
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/CustomerAccountApi~getProfilePictureInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePictureInfoResponse}
     */
    getProfilePictureInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfilePictureInfoResponse;
      return this.apiClient.callApi(
        '/v2/user/customer/account/profilePictureInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAccountInfo operation.
     * @callback module:api/CustomerAccountApi~getUserAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user account information
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/CustomerAccountApi~getUserAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountInfo}
     */
    getUserAccountInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountInfo;
      return this.apiClient.callApi(
        '/v2/user/customer/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendEmailActivation operation.
     * @callback module:api/CustomerAccountApi~resendEmailActivationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend email activation
     * @param {module:api/CustomerAccountApi~resendEmailActivationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendEmailActivation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/resendEmailActivation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyInfo operation.
     * @callback module:api/CustomerAccountApi~saveCompanyInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change company information
     * @param {module:model/CompanyInfo} companyInfo 
     * @param {module:api/CustomerAccountApi~saveCompanyInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCompanyInfo(companyInfo, callback) {
      let postBody = companyInfo;
      // verify the required parameter 'companyInfo' is set
      if (companyInfo === undefined || companyInfo === null) {
        throw new Error("Missing the required parameter 'companyInfo' when calling saveCompanyInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/companyInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCreditCardInfo operation.
     * @callback module:api/CustomerAccountApi~saveCreditCardInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save user credit card info
     * @param {module:model/CreditCardInfo} creditCardInfo Credit card info
     * @param {module:api/CustomerAccountApi~saveCreditCardInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCreditCardInfo(creditCardInfo, callback) {
      let postBody = creditCardInfo;
      // verify the required parameter 'creditCardInfo' is set
      if (creditCardInfo === undefined || creditCardInfo === null) {
        throw new Error("Missing the required parameter 'creditCardInfo' when calling saveCreditCardInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/creditCardInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savePersonalInfo operation.
     * @callback module:api/CustomerAccountApi~savePersonalInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save user personal information
     * @param {module:model/PersonalInfo} personalInfo 
     * @param {module:api/CustomerAccountApi~savePersonalInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    savePersonalInfo(personalInfo, callback) {
      let postBody = personalInfo;
      // verify the required parameter 'personalInfo' is set
      if (personalInfo === undefined || personalInfo === null) {
        throw new Error("Missing the required parameter 'personalInfo' when calling savePersonalInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/personalInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProfilePictureInfo operation.
     * @callback module:api/CustomerAccountApi~saveProfilePictureInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user picture information
     * @param {module:model/ProfilePictureInfo} profilePictureInfo 
     * @param {module:api/CustomerAccountApi~saveProfilePictureInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveProfilePictureInfo(profilePictureInfo, callback) {
      let postBody = profilePictureInfo;
      // verify the required parameter 'profilePictureInfo' is set
      if (profilePictureInfo === undefined || profilePictureInfo === null) {
        throw new Error("Missing the required parameter 'profilePictureInfo' when calling saveProfilePictureInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/customer/account/profilePictureInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
