/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BeezUPCommonErrorResponseMessage from '../model/BeezUPCommonErrorResponseMessage';
import CatalogColumnList from '../model/CatalogColumnList';
import CatalogStoreIndex from '../model/CatalogStoreIndex';
import CategoryList from '../model/CategoryList';
import ChangeCustomColumnExpressionRequest from '../model/ChangeCustomColumnExpressionRequest';
import ChangeUserColumnNameRequest from '../model/ChangeUserColumnNameRequest';
import ComputeExpressionRequest from '../model/ComputeExpressionRequest';
import CreateCustomColumnRequest from '../model/CreateCustomColumnRequest';
import CustomColumnList from '../model/CustomColumnList';
import GetProductsRequest from '../model/GetProductsRequest';
import ImportAlreadyInProgressResponse from '../model/ImportAlreadyInProgressResponse';
import LastManualImportInputConfiguration from '../model/LastManualImportInputConfiguration';
import Product from '../model/Product';
import ProductList from '../model/ProductList';
import RandomProductList from '../model/RandomProductList';

/**
* CatalogsCatalog service.
* @module api/CatalogsCatalogApi
* @version 2.0
*/
export default class CatalogsCatalogApi {

    /**
    * Constructs a new CatalogsCatalogApi. 
    * @alias module:api/CatalogsCatalogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the catalogChangeCatalogColumnUserName operation.
     * @callback module:api/CatalogsCatalogApi~catalogChangeCatalogColumnUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Catalog Column User Name
     * @param {String} storeId Your store identifier
     * @param {String} columnId The catalog column identifier
     * @param {module:model/ChangeUserColumnNameRequest} changeUserColumnNameRequest 
     * @param {module:api/CatalogsCatalogApi~catalogChangeCatalogColumnUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogChangeCatalogColumnUserName(storeId, columnId, changeUserColumnNameRequest, callback) {
      let postBody = changeUserColumnNameRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCatalogColumnUserName");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCatalogColumnUserName");
      }
      // verify the required parameter 'changeUserColumnNameRequest' is set
      if (changeUserColumnNameRequest === undefined || changeUserColumnNameRequest === null) {
        throw new Error("Missing the required parameter 'changeUserColumnNameRequest' when calling catalogChangeCatalogColumnUserName");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogChangeCustomColumnExpression operation.
     * @callback module:api/CatalogsCatalogApi~catalogChangeCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change custom column expression
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeCustomColumnExpressionRequest} changeCustomColumnExpressionRequest 
     * @param {module:api/CatalogsCatalogApi~catalogChangeCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogChangeCustomColumnExpression(storeId, columnId, changeCustomColumnExpressionRequest, callback) {
      let postBody = changeCustomColumnExpressionRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnExpression");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnExpression");
      }
      // verify the required parameter 'changeCustomColumnExpressionRequest' is set
      if (changeCustomColumnExpressionRequest === undefined || changeCustomColumnExpressionRequest === null) {
        throw new Error("Missing the required parameter 'changeCustomColumnExpressionRequest' when calling catalogChangeCustomColumnExpression");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogChangeCustomColumnUserName operation.
     * @callback module:api/CatalogsCatalogApi~catalogChangeCustomColumnUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Custom Column User Name
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeUserColumnNameRequest} changeUserColumnNameRequest 
     * @param {module:api/CatalogsCatalogApi~catalogChangeCustomColumnUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogChangeCustomColumnUserName(storeId, columnId, changeUserColumnNameRequest, callback) {
      let postBody = changeUserColumnNameRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnUserName");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnUserName");
      }
      // verify the required parameter 'changeUserColumnNameRequest' is set
      if (changeUserColumnNameRequest === undefined || changeUserColumnNameRequest === null) {
        throw new Error("Missing the required parameter 'changeUserColumnNameRequest' when calling catalogChangeCustomColumnUserName");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogComputeExpression operation.
     * @callback module:api/CatalogsCatalogApi~catalogComputeExpressionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute the expression for this catalog.
     * @param {String} storeId Your store identifier
     * @param {module:model/ComputeExpressionRequest} computeExpressionRequest 
     * @param {module:api/CatalogsCatalogApi~catalogComputeExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    catalogComputeExpression(storeId, computeExpressionRequest, callback) {
      let postBody = computeExpressionRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogComputeExpression");
      }
      // verify the required parameter 'computeExpressionRequest' is set
      if (computeExpressionRequest === undefined || computeExpressionRequest === null) {
        throw new Error("Missing the required parameter 'computeExpressionRequest' when calling catalogComputeExpression");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/computeExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogDeleteCustomColumn operation.
     * @callback module:api/CatalogsCatalogApi~catalogDeleteCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom column
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsCatalogApi~catalogDeleteCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogDeleteCustomColumn(storeId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogDeleteCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogDeleteCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/{columnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCatalogColumns operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogColumnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get catalog column list
     * @param {String} storeId Your store identifier
     * @param {module:api/CatalogsCatalogApi~catalogGetCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogColumnList}
     */
    catalogGetCatalogColumns(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCatalogColumns");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogColumnList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/catalogColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCategories operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get category list
     * @param {String} storeId Your store identifier
     * @param {Array.<String>} acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
     * @param {module:api/CatalogsCatalogApi~catalogGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryList}
     */
    catalogGetCategories(storeId, acceptEncoding, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCategories");
      }
      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding === undefined || acceptEncoding === null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling catalogGetCategories");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCustomColumnExpression operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the encrypted custom column expression
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsCatalogApi~catalogGetCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    catalogGetCustomColumnExpression(storeId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCustomColumnExpression");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogGetCustomColumnExpression");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCustomColumns operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetCustomColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomColumnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom column list
     * @param {String} storeId Your store identifier
     * @param {module:api/CatalogsCatalogApi~catalogGetCustomColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomColumnList}
     */
    catalogGetCustomColumns(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCustomColumns");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomColumnList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProductByProductId operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetProductByProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product by ProductId
     * @param {String} storeId Your store identifier
     * @param {String} productId The product identifier you want to get
     * @param {module:api/CatalogsCatalogApi~catalogGetProductByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    catalogGetProductByProductId(storeId, productId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetProductByProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling catalogGetProductByProductId");
      }

      let pathParams = {
        'storeId': storeId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProductBySku operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetProductBySkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product by Sku
     * @param {String} storeId Your store identifier
     * @param {String} sku The product sku you want to get
     * @param {module:api/CatalogsCatalogApi~catalogGetProductBySkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    catalogGetProductBySku(storeId, sku, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetProductBySku");
      }
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling catalogGetProductBySku");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        'sku': sku
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProducts operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product list
     * @param {String} storeId Your store identifier
     * @param {module:model/GetProductsRequest} getProductsRequest 
     * @param {module:api/CatalogsCatalogApi~catalogGetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductList}
     */
    catalogGetProducts(storeId, getProductsRequest, callback) {
      let postBody = getProductsRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetProducts");
      }
      // verify the required parameter 'getProductsRequest' is set
      if (getProductsRequest === undefined || getProductsRequest === null) {
        throw new Error("Missing the required parameter 'getProductsRequest' when calling catalogGetProducts");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/products/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetRandomProducts operation.
     * @callback module:api/CatalogsCatalogApi~catalogGetRandomProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get random product list
     * We will return 10 products randomly selected with all product values
     * @param {String} storeId Your store identifier
     * @param {module:api/CatalogsCatalogApi~catalogGetRandomProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomProductList}
     */
    catalogGetRandomProducts(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetRandomProducts");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomProductList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/products/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogSaveCustomColumn operation.
     * @callback module:api/CatalogsCatalogApi~catalogSaveCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace a custom column
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/CreateCustomColumnRequest} createCustomColumnRequest 
     * @param {module:api/CatalogsCatalogApi~catalogSaveCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogSaveCustomColumn(storeId, columnId, createCustomColumnRequest, callback) {
      let postBody = createCustomColumnRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogSaveCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogSaveCustomColumn");
      }
      // verify the required parameter 'createCustomColumnRequest' is set
      if (createCustomColumnRequest === undefined || createCustomColumnRequest === null) {
        throw new Error("Missing the required parameter 'createCustomColumnRequest' when calling catalogSaveCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/customColumns/{columnId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogStoreIndex operation.
     * @callback module:api/CatalogsCatalogApi~catalogStoreIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogStoreIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the index of the catalog API for this store
     * The operation will give you all the operations you will be able to do on this store for this API.
     * @param {String} storeId Your store identifier
     * @param {module:api/CatalogsCatalogApi~catalogStoreIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogStoreIndex}
     */
    catalogStoreIndex(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogStoreIndex");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogStoreIndex;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetManualUpdateLastInputConfig operation.
     * @callback module:api/CatalogsCatalogApi~importationGetManualUpdateLastInputConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastManualImportInputConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last input configuration
     * @param {String} storeId Your store identifier
     * @param {module:api/CatalogsCatalogApi~importationGetManualUpdateLastInputConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastManualImportInputConfiguration}
     */
    importationGetManualUpdateLastInputConfig(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetManualUpdateLastInputConfig");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LastManualImportInputConfiguration;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/inputConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
