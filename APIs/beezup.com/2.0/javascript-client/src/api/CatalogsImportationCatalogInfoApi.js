/**
 * BeezUP Merchant API 
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: help@beezup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BeezUPCommonErrorResponseMessage from '../model/BeezUPCommonErrorResponseMessage';
import ChangeCustomColumnRequest from '../model/ChangeCustomColumnRequest';
import ConfigureCatalogColumnCatalogRequest from '../model/ConfigureCatalogColumnCatalogRequest';
import DetectedCatalogColumnList from '../model/DetectedCatalogColumnList';
import ImportationCustomColumnList from '../model/ImportationCustomColumnList';
import MapBeezUPColumnRequest from '../model/MapBeezUPColumnRequest';
import ProductSample from '../model/ProductSample';

/**
* CatalogsImportationCatalogInfo service.
* @module api/CatalogsImportationCatalogInfoApi
* @version 2.0
*/
export default class CatalogsImportationCatalogInfoApi {

    /**
    * Constructs a new CatalogsImportationCatalogInfoApi. 
    * @alias module:api/CatalogsImportationCatalogInfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the importationConfigureCatalogColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationConfigureCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure catalog column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/ConfigureCatalogColumnCatalogRequest} configureCatalogColumnCatalogRequest 
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationConfigureCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationConfigureCatalogColumn(storeId, executionId, columnId, configureCatalogColumnCatalogRequest, callback) {
      let postBody = configureCatalogColumnCatalogRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationConfigureCatalogColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationConfigureCatalogColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationConfigureCatalogColumn");
      }
      // verify the required parameter 'configureCatalogColumnCatalogRequest' is set
      if (configureCatalogColumnCatalogRequest === undefined || configureCatalogColumnCatalogRequest === null) {
        throw new Error("Missing the required parameter 'configureCatalogColumnCatalogRequest' when calling importationConfigureCatalogColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationDeleteCustomColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationDeleteCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationDeleteCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationDeleteCustomColumn(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationDeleteCustomColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationDeleteCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationDeleteCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetCustomColumnExpression operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationGetCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the encrypted custom column expression in this importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationGetCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    importationGetCustomColumnExpression(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetCustomColumnExpression");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetCustomColumnExpression");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationGetCustomColumnExpression");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetCustomColumns operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationGetCustomColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportationCustomColumnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom columns currently place in this importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationGetCustomColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportationCustomColumnList}
     */
    importationGetCustomColumns(storeId, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetCustomColumns");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetCustomColumns");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportationCustomColumnList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetDetectedCatalogColumns operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationGetDetectedCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectedCatalogColumnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detected catalog columns during this importation.
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationGetDetectedCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectedCatalogColumnList}
     */
    importationGetDetectedCatalogColumns(storeId, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetDetectedCatalogColumns");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetDetectedCatalogColumns");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectedCatalogColumnList;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetProductSample operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationGetProductSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {Number} productSampleIndex Index of the product sample. Starting from 0 to 99.
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationGetProductSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSample}
     */
    importationGetProductSample(storeId, executionId, productSampleIndex, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetProductSample");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetProductSample");
      }
      // verify the required parameter 'productSampleIndex' is set
      if (productSampleIndex === undefined || productSampleIndex === null) {
        throw new Error("Missing the required parameter 'productSampleIndex' when calling importationGetProductSample");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'productSampleIndex': productSampleIndex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductSample;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetProductSampleCustomColumnValue operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationGetProductSampleCustomColumnValueCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {Number} productSampleIndex Index of the product sample. Starting from 0 to 99.
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationGetProductSampleCustomColumnValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    importationGetProductSampleCustomColumnValue(storeId, executionId, productSampleIndex, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetProductSampleCustomColumnValue");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetProductSampleCustomColumnValue");
      }
      // verify the required parameter 'productSampleIndex' is set
      if (productSampleIndex === undefined || productSampleIndex === null) {
        throw new Error("Missing the required parameter 'productSampleIndex' when calling importationGetProductSampleCustomColumnValue");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationGetProductSampleCustomColumnValue");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'productSampleIndex': productSampleIndex,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationIgnoreColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationIgnoreColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ignore Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationIgnoreColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationIgnoreColumn(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationIgnoreColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationIgnoreColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationIgnoreColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationMapCatalogColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationMapCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map catalog column to a BeezUP column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The catalog column identifier
     * @param {module:model/MapBeezUPColumnRequest} mapBeezUPColumnRequest 
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationMapCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationMapCatalogColumn(storeId, executionId, columnId, mapBeezUPColumnRequest, callback) {
      let postBody = mapBeezUPColumnRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationMapCatalogColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationMapCatalogColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationMapCatalogColumn");
      }
      // verify the required parameter 'mapBeezUPColumnRequest' is set
      if (mapBeezUPColumnRequest === undefined || mapBeezUPColumnRequest === null) {
        throw new Error("Missing the required parameter 'mapBeezUPColumnRequest' when calling importationMapCatalogColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationMapCustomColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationMapCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map custom column to a BeezUP column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/MapBeezUPColumnRequest} mapBeezUPColumnRequest 
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationMapCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationMapCustomColumn(storeId, executionId, columnId, mapBeezUPColumnRequest, callback) {
      let postBody = mapBeezUPColumnRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationMapCustomColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationMapCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationMapCustomColumn");
      }
      // verify the required parameter 'mapBeezUPColumnRequest' is set
      if (mapBeezUPColumnRequest === undefined || mapBeezUPColumnRequest === null) {
        throw new Error("Missing the required parameter 'mapBeezUPColumnRequest' when calling importationMapCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationReattendColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationReattendColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reattend Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationReattendColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationReattendColumn(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationReattendColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationReattendColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationReattendColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationSaveCustomColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationSaveCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace a custom column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeCustomColumnRequest} changeCustomColumnRequest 
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationSaveCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationSaveCustomColumn(storeId, executionId, columnId, changeCustomColumnRequest, callback) {
      let postBody = changeCustomColumnRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationSaveCustomColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationSaveCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationSaveCustomColumn");
      }
      // verify the required parameter 'changeCustomColumnRequest' is set
      if (changeCustomColumnRequest === undefined || changeCustomColumnRequest === null) {
        throw new Error("Missing the required parameter 'changeCustomColumnRequest' when calling importationSaveCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationUnmapCatalogColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationUnmapCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmap catalog column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The catalog column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationUnmapCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationUnmapCatalogColumn(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationUnmapCatalogColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationUnmapCatalogColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationUnmapCatalogColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importationUnmapCustomColumn operation.
     * @callback module:api/CatalogsImportationCatalogInfoApi~importationUnmapCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmap custom column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/CatalogsImportationCatalogInfoApi~importationUnmapCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importationUnmapCustomColumn(storeId, executionId, columnId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationUnmapCustomColumn");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationUnmapCustomColumn");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationUnmapCustomColumn");
      }

      let pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
