# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a_e: str=None, a_p: float=None, a_s: int=None, b_e: str=None, b_p: float=None, b_s: int=None, c: int=None, t: int=None):
        """Quote - a model defined in OpenAPI

        :param a_e: The a_e of this Quote.
        :param a_p: The a_p of this Quote.
        :param a_s: The a_s of this Quote.
        :param b_e: The b_e of this Quote.
        :param b_p: The b_p of this Quote.
        :param b_s: The b_s of this Quote.
        :param c: The c of this Quote.
        :param t: The t of this Quote.
        """
        self.openapi_types = {
            'a_e': str,
            'a_p': float,
            'a_s': int,
            'b_e': str,
            'b_p': float,
            'b_s': int,
            'c': int,
            't': int
        }

        self.attribute_map = {
            'a_e': 'aE',
            'a_p': 'aP',
            'a_s': 'aS',
            'b_e': 'bE',
            'b_p': 'bP',
            'b_s': 'bS',
            'c': 'c',
            't': 't'
        }

        self._a_e = a_e
        self._a_p = a_p
        self._a_s = a_s
        self._b_e = b_e
        self._b_p = b_p
        self._b_s = b_s
        self._c = c
        self._t = t

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quote of this Quote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a_e(self):
        """Gets the a_e of this Quote.

        Ask Exchange

        :return: The a_e of this Quote.
        :rtype: str
        """
        return self._a_e

    @a_e.setter
    def a_e(self, a_e):
        """Sets the a_e of this Quote.

        Ask Exchange

        :param a_e: The a_e of this Quote.
        :type a_e: str
        """

        self._a_e = a_e

    @property
    def a_p(self):
        """Gets the a_p of this Quote.

        Ask Price

        :return: The a_p of this Quote.
        :rtype: float
        """
        return self._a_p

    @a_p.setter
    def a_p(self, a_p):
        """Sets the a_p of this Quote.

        Ask Price

        :param a_p: The a_p of this Quote.
        :type a_p: float
        """

        self._a_p = a_p

    @property
    def a_s(self):
        """Gets the a_s of this Quote.

        Ask Size

        :return: The a_s of this Quote.
        :rtype: int
        """
        return self._a_s

    @a_s.setter
    def a_s(self, a_s):
        """Sets the a_s of this Quote.

        Ask Size

        :param a_s: The a_s of this Quote.
        :type a_s: int
        """

        self._a_s = a_s

    @property
    def b_e(self):
        """Gets the b_e of this Quote.

        Bid Exchange

        :return: The b_e of this Quote.
        :rtype: str
        """
        return self._b_e

    @b_e.setter
    def b_e(self, b_e):
        """Sets the b_e of this Quote.

        Bid Exchange

        :param b_e: The b_e of this Quote.
        :type b_e: str
        """

        self._b_e = b_e

    @property
    def b_p(self):
        """Gets the b_p of this Quote.

        Bid Price

        :return: The b_p of this Quote.
        :rtype: float
        """
        return self._b_p

    @b_p.setter
    def b_p(self, b_p):
        """Sets the b_p of this Quote.

        Bid Price

        :param b_p: The b_p of this Quote.
        :type b_p: float
        """

        self._b_p = b_p

    @property
    def b_s(self):
        """Gets the b_s of this Quote.

        Bid Size

        :return: The b_s of this Quote.
        :rtype: int
        """
        return self._b_s

    @b_s.setter
    def b_s(self, b_s):
        """Sets the b_s of this Quote.

        Bid Size

        :param b_s: The b_s of this Quote.
        :type b_s: int
        """

        self._b_s = b_s

    @property
    def c(self):
        """Gets the c of this Quote.

        Condition of this quote

        :return: The c of this Quote.
        :rtype: int
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this Quote.

        Condition of this quote

        :param c: The c of this Quote.
        :type c: int
        """

        self._c = c

    @property
    def t(self):
        """Gets the t of this Quote.

        Timestamp of this trade

        :return: The t of this Quote.
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Quote.

        Timestamp of this trade

        :param t: The t of this Quote.
        :type t: int
        """

        self._t = t
