# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Trade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, c1: int=None, c2: int=None, c3: int=None, c4: int=None, e: str=None, p: float=None, s: int=None, t: int=None):
        """Trade - a model defined in OpenAPI

        :param c1: The c1 of this Trade.
        :param c2: The c2 of this Trade.
        :param c3: The c3 of this Trade.
        :param c4: The c4 of this Trade.
        :param e: The e of this Trade.
        :param p: The p of this Trade.
        :param s: The s of this Trade.
        :param t: The t of this Trade.
        """
        self.openapi_types = {
            'c1': int,
            'c2': int,
            'c3': int,
            'c4': int,
            'e': str,
            'p': float,
            's': int,
            't': int
        }

        self.attribute_map = {
            'c1': 'c1',
            'c2': 'c2',
            'c3': 'c3',
            'c4': 'c4',
            'e': 'e',
            'p': 'p',
            's': 's',
            't': 't'
        }

        self._c1 = c1
        self._c2 = c2
        self._c3 = c3
        self._c4 = c4
        self._e = e
        self._p = p
        self._s = s
        self._t = t

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trade of this Trade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def c1(self):
        """Gets the c1 of this Trade.

        Condition 1 of this trade

        :return: The c1 of this Trade.
        :rtype: int
        """
        return self._c1

    @c1.setter
    def c1(self, c1):
        """Sets the c1 of this Trade.

        Condition 1 of this trade

        :param c1: The c1 of this Trade.
        :type c1: int
        """

        self._c1 = c1

    @property
    def c2(self):
        """Gets the c2 of this Trade.

        Condition 2 of this trade

        :return: The c2 of this Trade.
        :rtype: int
        """
        return self._c2

    @c2.setter
    def c2(self, c2):
        """Sets the c2 of this Trade.

        Condition 2 of this trade

        :param c2: The c2 of this Trade.
        :type c2: int
        """

        self._c2 = c2

    @property
    def c3(self):
        """Gets the c3 of this Trade.

        Condition 3 of this trade

        :return: The c3 of this Trade.
        :rtype: int
        """
        return self._c3

    @c3.setter
    def c3(self, c3):
        """Sets the c3 of this Trade.

        Condition 3 of this trade

        :param c3: The c3 of this Trade.
        :type c3: int
        """

        self._c3 = c3

    @property
    def c4(self):
        """Gets the c4 of this Trade.

        Condition 4 of this trade

        :return: The c4 of this Trade.
        :rtype: int
        """
        return self._c4

    @c4.setter
    def c4(self, c4):
        """Sets the c4 of this Trade.

        Condition 4 of this trade

        :param c4: The c4 of this Trade.
        :type c4: int
        """

        self._c4 = c4

    @property
    def e(self):
        """Gets the e of this Trade.

        The exchange this trade happened on

        :return: The e of this Trade.
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this Trade.

        The exchange this trade happened on

        :param e: The e of this Trade.
        :type e: str
        """

        self._e = e

    @property
    def p(self):
        """Gets the p of this Trade.

        Price of this trade

        :return: The p of this Trade.
        :rtype: float
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this Trade.

        Price of this trade

        :param p: The p of this Trade.
        :type p: float
        """

        self._p = p

    @property
    def s(self):
        """Gets the s of this Trade.

        Size of the trade

        :return: The s of this Trade.
        :rtype: int
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this Trade.

        Size of the trade

        :param s: The s of this Trade.
        :type s: int
        """

        self._s = s

    @property
    def t(self):
        """Gets the t of this Trade.

        Timestamp of this trade

        :return: The t of this Trade.
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Trade.

        Timestamp of this trade

        :param t: The t of this Trade.
        :type t: int
        """

        self._t = t
