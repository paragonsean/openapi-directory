# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LastQuote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, askexchange: int=None, askprice: float=None, asksize: int=None, bidexchange: int=None, bidprice: float=None, bidsize: int=None, cond: int=None, timestamp: int=None):
        """LastQuote - a model defined in OpenAPI

        :param askexchange: The askexchange of this LastQuote.
        :param askprice: The askprice of this LastQuote.
        :param asksize: The asksize of this LastQuote.
        :param bidexchange: The bidexchange of this LastQuote.
        :param bidprice: The bidprice of this LastQuote.
        :param bidsize: The bidsize of this LastQuote.
        :param cond: The cond of this LastQuote.
        :param timestamp: The timestamp of this LastQuote.
        """
        self.openapi_types = {
            'askexchange': int,
            'askprice': float,
            'asksize': int,
            'bidexchange': int,
            'bidprice': float,
            'bidsize': int,
            'cond': int,
            'timestamp': int
        }

        self.attribute_map = {
            'askexchange': 'askexchange',
            'askprice': 'askprice',
            'asksize': 'asksize',
            'bidexchange': 'bidexchange',
            'bidprice': 'bidprice',
            'bidsize': 'bidsize',
            'cond': 'cond',
            'timestamp': 'timestamp'
        }

        self._askexchange = askexchange
        self._askprice = askprice
        self._asksize = asksize
        self._bidexchange = bidexchange
        self._bidprice = bidprice
        self._bidsize = bidsize
        self._cond = cond
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LastQuote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LastQuote of this LastQuote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def askexchange(self):
        """Gets the askexchange of this LastQuote.

        Exchange the ask happened on

        :return: The askexchange of this LastQuote.
        :rtype: int
        """
        return self._askexchange

    @askexchange.setter
    def askexchange(self, askexchange):
        """Sets the askexchange of this LastQuote.

        Exchange the ask happened on

        :param askexchange: The askexchange of this LastQuote.
        :type askexchange: int
        """

        self._askexchange = askexchange

    @property
    def askprice(self):
        """Gets the askprice of this LastQuote.

        Ask Price

        :return: The askprice of this LastQuote.
        :rtype: float
        """
        return self._askprice

    @askprice.setter
    def askprice(self, askprice):
        """Sets the askprice of this LastQuote.

        Ask Price

        :param askprice: The askprice of this LastQuote.
        :type askprice: float
        """

        self._askprice = askprice

    @property
    def asksize(self):
        """Gets the asksize of this LastQuote.

        Ask Size

        :return: The asksize of this LastQuote.
        :rtype: int
        """
        return self._asksize

    @asksize.setter
    def asksize(self, asksize):
        """Sets the asksize of this LastQuote.

        Ask Size

        :param asksize: The asksize of this LastQuote.
        :type asksize: int
        """

        self._asksize = asksize

    @property
    def bidexchange(self):
        """Gets the bidexchange of this LastQuote.

        Exchange the bid happened on

        :return: The bidexchange of this LastQuote.
        :rtype: int
        """
        return self._bidexchange

    @bidexchange.setter
    def bidexchange(self, bidexchange):
        """Sets the bidexchange of this LastQuote.

        Exchange the bid happened on

        :param bidexchange: The bidexchange of this LastQuote.
        :type bidexchange: int
        """

        self._bidexchange = bidexchange

    @property
    def bidprice(self):
        """Gets the bidprice of this LastQuote.

        Bid Price

        :return: The bidprice of this LastQuote.
        :rtype: float
        """
        return self._bidprice

    @bidprice.setter
    def bidprice(self, bidprice):
        """Sets the bidprice of this LastQuote.

        Bid Price

        :param bidprice: The bidprice of this LastQuote.
        :type bidprice: float
        """

        self._bidprice = bidprice

    @property
    def bidsize(self):
        """Gets the bidsize of this LastQuote.

        Bid Size

        :return: The bidsize of this LastQuote.
        :rtype: int
        """
        return self._bidsize

    @bidsize.setter
    def bidsize(self, bidsize):
        """Sets the bidsize of this LastQuote.

        Bid Size

        :param bidsize: The bidsize of this LastQuote.
        :type bidsize: int
        """

        self._bidsize = bidsize

    @property
    def cond(self):
        """Gets the cond of this LastQuote.

        Condition of the quote

        :return: The cond of this LastQuote.
        :rtype: int
        """
        return self._cond

    @cond.setter
    def cond(self, cond):
        """Sets the cond of this LastQuote.

        Condition of the quote

        :param cond: The cond of this LastQuote.
        :type cond: int
        """

        self._cond = cond

    @property
    def timestamp(self):
        """Gets the timestamp of this LastQuote.

        Timestamp of this trade

        :return: The timestamp of this LastQuote.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastQuote.

        Timestamp of this trade

        :param timestamp: The timestamp of this LastQuote.
        :type timestamp: int
        """

        self._timestamp = timestamp
