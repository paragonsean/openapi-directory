# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LastForexTrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exchange: int=None, price: float=None, timestamp: int=None):
        """LastForexTrade - a model defined in OpenAPI

        :param exchange: The exchange of this LastForexTrade.
        :param price: The price of this LastForexTrade.
        :param timestamp: The timestamp of this LastForexTrade.
        """
        self.openapi_types = {
            'exchange': int,
            'price': float,
            'timestamp': int
        }

        self.attribute_map = {
            'exchange': 'exchange',
            'price': 'price',
            'timestamp': 'timestamp'
        }

        self._exchange = exchange
        self._price = price
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LastForexTrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LastForexTrade of this LastForexTrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exchange(self):
        """Gets the exchange of this LastForexTrade.

        Exchange this trade happened on

        :return: The exchange of this LastForexTrade.
        :rtype: int
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this LastForexTrade.

        Exchange this trade happened on

        :param exchange: The exchange of this LastForexTrade.
        :type exchange: int
        """

        self._exchange = exchange

    @property
    def price(self):
        """Gets the price of this LastForexTrade.

        Price of the trade

        :return: The price of this LastForexTrade.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LastForexTrade.

        Price of the trade

        :param price: The price of this LastForexTrade.
        :type price: float
        """

        self._price = price

    @property
    def timestamp(self):
        """Gets the timestamp of this LastForexTrade.

        Timestamp of this trade

        :return: The timestamp of this LastForexTrade.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastForexTrade.

        Timestamp of this trade

        :param timestamp: The timestamp of this LastForexTrade.
        :type timestamp: int
        """

        self._timestamp = timestamp
