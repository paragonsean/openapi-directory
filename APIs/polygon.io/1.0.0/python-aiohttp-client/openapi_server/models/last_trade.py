# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LastTrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cond1: int=None, cond2: int=None, cond3: int=None, cond4: int=None, exchange: int=None, price: float=None, size: int=None, timestamp: int=None):
        """LastTrade - a model defined in OpenAPI

        :param cond1: The cond1 of this LastTrade.
        :param cond2: The cond2 of this LastTrade.
        :param cond3: The cond3 of this LastTrade.
        :param cond4: The cond4 of this LastTrade.
        :param exchange: The exchange of this LastTrade.
        :param price: The price of this LastTrade.
        :param size: The size of this LastTrade.
        :param timestamp: The timestamp of this LastTrade.
        """
        self.openapi_types = {
            'cond1': int,
            'cond2': int,
            'cond3': int,
            'cond4': int,
            'exchange': int,
            'price': float,
            'size': int,
            'timestamp': int
        }

        self.attribute_map = {
            'cond1': 'cond1',
            'cond2': 'cond2',
            'cond3': 'cond3',
            'cond4': 'cond4',
            'exchange': 'exchange',
            'price': 'price',
            'size': 'size',
            'timestamp': 'timestamp'
        }

        self._cond1 = cond1
        self._cond2 = cond2
        self._cond3 = cond3
        self._cond4 = cond4
        self._exchange = exchange
        self._price = price
        self._size = size
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LastTrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LastTrade of this LastTrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cond1(self):
        """Gets the cond1 of this LastTrade.

        Condition 1 of the trade

        :return: The cond1 of this LastTrade.
        :rtype: int
        """
        return self._cond1

    @cond1.setter
    def cond1(self, cond1):
        """Sets the cond1 of this LastTrade.

        Condition 1 of the trade

        :param cond1: The cond1 of this LastTrade.
        :type cond1: int
        """

        self._cond1 = cond1

    @property
    def cond2(self):
        """Gets the cond2 of this LastTrade.

        Condition 2 of the trade

        :return: The cond2 of this LastTrade.
        :rtype: int
        """
        return self._cond2

    @cond2.setter
    def cond2(self, cond2):
        """Sets the cond2 of this LastTrade.

        Condition 2 of the trade

        :param cond2: The cond2 of this LastTrade.
        :type cond2: int
        """

        self._cond2 = cond2

    @property
    def cond3(self):
        """Gets the cond3 of this LastTrade.

        Condition 3 of the trade

        :return: The cond3 of this LastTrade.
        :rtype: int
        """
        return self._cond3

    @cond3.setter
    def cond3(self, cond3):
        """Sets the cond3 of this LastTrade.

        Condition 3 of the trade

        :param cond3: The cond3 of this LastTrade.
        :type cond3: int
        """

        self._cond3 = cond3

    @property
    def cond4(self):
        """Gets the cond4 of this LastTrade.

        Condition 4 of the trade

        :return: The cond4 of this LastTrade.
        :rtype: int
        """
        return self._cond4

    @cond4.setter
    def cond4(self, cond4):
        """Sets the cond4 of this LastTrade.

        Condition 4 of the trade

        :param cond4: The cond4 of this LastTrade.
        :type cond4: int
        """

        self._cond4 = cond4

    @property
    def exchange(self):
        """Gets the exchange of this LastTrade.

        Exchange this trade happened on

        :return: The exchange of this LastTrade.
        :rtype: int
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this LastTrade.

        Exchange this trade happened on

        :param exchange: The exchange of this LastTrade.
        :type exchange: int
        """

        self._exchange = exchange

    @property
    def price(self):
        """Gets the price of this LastTrade.

        Price of the trade

        :return: The price of this LastTrade.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LastTrade.

        Price of the trade

        :param price: The price of this LastTrade.
        :type price: float
        """

        self._price = price

    @property
    def size(self):
        """Gets the size of this LastTrade.

        Size of this trade

        :return: The size of this LastTrade.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LastTrade.

        Size of this trade

        :param size: The size of this LastTrade.
        :type size: int
        """

        self._size = size

    @property
    def timestamp(self):
        """Gets the timestamp of this LastTrade.

        Timestamp of this trade

        :return: The timestamp of this LastTrade.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastTrade.

        Timestamp of this trade

        :param timestamp: The timestamp of this LastTrade.
        :type timestamp: int
        """

        self._timestamp = timestamp
