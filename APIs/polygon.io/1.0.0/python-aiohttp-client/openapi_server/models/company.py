# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, exchange: str=None, industry: str=None, marketcap: float=None, name: str=None, sector: str=None, symbol: str=None, updated: datetime=None):
        """Company - a model defined in OpenAPI

        :param country: The country of this Company.
        :param exchange: The exchange of this Company.
        :param industry: The industry of this Company.
        :param marketcap: The marketcap of this Company.
        :param name: The name of this Company.
        :param sector: The sector of this Company.
        :param symbol: The symbol of this Company.
        :param updated: The updated of this Company.
        """
        self.openapi_types = {
            'country': str,
            'exchange': str,
            'industry': str,
            'marketcap': float,
            'name': str,
            'sector': str,
            'symbol': str,
            'updated': datetime
        }

        self.attribute_map = {
            'country': 'country',
            'exchange': 'exchange',
            'industry': 'industry',
            'marketcap': 'marketcap',
            'name': 'name',
            'sector': 'sector',
            'symbol': 'symbol',
            'updated': 'updated'
        }

        self._country = country
        self._exchange = exchange
        self._industry = industry
        self._marketcap = marketcap
        self._name = name
        self._sector = sector
        self._symbol = symbol
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Company.

        Country in which this country is based.

        :return: The country of this Company.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Company.

        Country in which this country is based.

        :param country: The country of this Company.
        :type country: str
        """

        self._country = country

    @property
    def exchange(self):
        """Gets the exchange of this Company.

        Exchange this company is traded on.

        :return: The exchange of this Company.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Company.

        Exchange this company is traded on.

        :param exchange: The exchange of this Company.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def industry(self):
        """Gets the industry of this Company.

        Industry this country operated/produces in.

        :return: The industry of this Company.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Company.

        Industry this country operated/produces in.

        :param industry: The industry of this Company.
        :type industry: str
        """

        self._industry = industry

    @property
    def marketcap(self):
        """Gets the marketcap of this Company.

        Market cap as of the last updated timestamp.

        :return: The marketcap of this Company.
        :rtype: float
        """
        return self._marketcap

    @marketcap.setter
    def marketcap(self, marketcap):
        """Sets the marketcap of this Company.

        Market cap as of the last updated timestamp.

        :param marketcap: The marketcap of this Company.
        :type marketcap: float
        """

        self._marketcap = marketcap

    @property
    def name(self):
        """Gets the name of this Company.

        Name of the company.

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Name of the company.

        :param name: The name of this Company.
        :type name: str
        """

        self._name = name

    @property
    def sector(self):
        """Gets the sector of this Company.

        Sector that this company is traded in.

        :return: The sector of this Company.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Company.

        Sector that this company is traded in.

        :param sector: The sector of this Company.
        :type sector: str
        """

        self._sector = sector

    @property
    def symbol(self):
        """Gets the symbol of this Company.

        The actual exchange symbol this company is traded under.

        :return: The symbol of this Company.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Company.

        The actual exchange symbol this company is traded under.

        :param symbol: The symbol of this Company.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def updated(self):
        """Gets the updated of this Company.

        Last time this company record was updated.

        :return: The updated of this Company.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Company.

        Last time this company record was updated.

        :param updated: The updated of this Company.
        :type updated: datetime
        """

        self._updated = updated
