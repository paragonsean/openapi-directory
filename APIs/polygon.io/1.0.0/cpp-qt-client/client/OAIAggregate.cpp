/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregate::OAIAggregate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregate::OAIAggregate() {
    this->initializeModel();
}

OAIAggregate::~OAIAggregate() {}

void OAIAggregate::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_h_isSet = false;
    m_h_isValid = false;

    m_k_isSet = false;
    m_k_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_o_isSet = false;
    m_o_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;

    m_v_isSet = false;
    m_v_isValid = false;
}

void OAIAggregate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregate::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_h_isValid = ::OpenAPI::fromJsonValue(m_h, json[QString("h")]);
    m_h_isSet = !json[QString("h")].isNull() && m_h_isValid;

    m_k_isValid = ::OpenAPI::fromJsonValue(m_k, json[QString("k")]);
    m_k_isSet = !json[QString("k")].isNull() && m_k_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;

    m_o_isValid = ::OpenAPI::fromJsonValue(m_o, json[QString("o")]);
    m_o_isSet = !json[QString("o")].isNull() && m_o_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;

    m_v_isValid = ::OpenAPI::fromJsonValue(m_v, json[QString("v")]);
    m_v_isSet = !json[QString("v")].isNull() && m_v_isValid;
}

QString OAIAggregate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregate::asJsonObject() const {
    QJsonObject obj;
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_h_isSet) {
        obj.insert(QString("h"), ::OpenAPI::toJsonValue(m_h));
    }
    if (m_k_isSet) {
        obj.insert(QString("k"), ::OpenAPI::toJsonValue(m_k));
    }
    if (m_l_isSet) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_o_isSet) {
        obj.insert(QString("o"), ::OpenAPI::toJsonValue(m_o));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    if (m_v_isSet) {
        obj.insert(QString("v"), ::OpenAPI::toJsonValue(m_v));
    }
    return obj;
}

qint32 OAIAggregate::getC() const {
    return m_c;
}
void OAIAggregate::setC(const qint32 &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIAggregate::is_c_Set() const{
    return m_c_isSet;
}

bool OAIAggregate::is_c_Valid() const{
    return m_c_isValid;
}

qint32 OAIAggregate::getH() const {
    return m_h;
}
void OAIAggregate::setH(const qint32 &h) {
    m_h = h;
    m_h_isSet = true;
}

bool OAIAggregate::is_h_Set() const{
    return m_h_isSet;
}

bool OAIAggregate::is_h_Valid() const{
    return m_h_isValid;
}

qint32 OAIAggregate::getK() const {
    return m_k;
}
void OAIAggregate::setK(const qint32 &k) {
    m_k = k;
    m_k_isSet = true;
}

bool OAIAggregate::is_k_Set() const{
    return m_k_isSet;
}

bool OAIAggregate::is_k_Valid() const{
    return m_k_isValid;
}

qint32 OAIAggregate::getL() const {
    return m_l;
}
void OAIAggregate::setL(const qint32 &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIAggregate::is_l_Set() const{
    return m_l_isSet;
}

bool OAIAggregate::is_l_Valid() const{
    return m_l_isValid;
}

qint32 OAIAggregate::getO() const {
    return m_o;
}
void OAIAggregate::setO(const qint32 &o) {
    m_o = o;
    m_o_isSet = true;
}

bool OAIAggregate::is_o_Set() const{
    return m_o_isSet;
}

bool OAIAggregate::is_o_Valid() const{
    return m_o_isValid;
}

qint32 OAIAggregate::getT() const {
    return m_t;
}
void OAIAggregate::setT(const qint32 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIAggregate::is_t_Set() const{
    return m_t_isSet;
}

bool OAIAggregate::is_t_Valid() const{
    return m_t_isValid;
}

qint32 OAIAggregate::getV() const {
    return m_v;
}
void OAIAggregate::setV(const qint32 &v) {
    m_v = v;
    m_v_isSet = true;
}

bool OAIAggregate::is_v_Set() const{
    return m_v_isSet;
}

bool OAIAggregate::is_v_Valid() const{
    return m_v_isValid;
}

bool OAIAggregate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
