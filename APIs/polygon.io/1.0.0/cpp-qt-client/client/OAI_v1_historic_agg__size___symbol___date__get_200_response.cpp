/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_v1_historic_agg__size___symbol___date__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_v1_historic_agg__size___symbol___date__get_200_response::OAI_v1_historic_agg__size___symbol___date__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_v1_historic_agg__size___symbol___date__get_200_response::OAI_v1_historic_agg__size___symbol___date__get_200_response() {
    this->initializeModel();
}

OAI_v1_historic_agg__size___symbol___date__get_200_response::~OAI_v1_historic_agg__size___symbol___date__get_200_response() {}

void OAI_v1_historic_agg__size___symbol___date__get_200_response::initializeModel() {

    m_day_isSet = false;
    m_day_isValid = false;

    m_ms_latency_isSet = false;
    m_ms_latency_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_ticks_isSet = false;
    m_ticks_isValid = false;
}

void OAI_v1_historic_agg__size___symbol___date__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_v1_historic_agg__size___symbol___date__get_200_response::fromJsonObject(QJsonObject json) {

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_ms_latency_isValid = ::OpenAPI::fromJsonValue(m_ms_latency, json[QString("msLatency")]);
    m_ms_latency_isSet = !json[QString("msLatency")].isNull() && m_ms_latency_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_ticks_isValid = ::OpenAPI::fromJsonValue(m_ticks, json[QString("ticks")]);
    m_ticks_isSet = !json[QString("ticks")].isNull() && m_ticks_isValid;
}

QString OAI_v1_historic_agg__size___symbol___date__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_v1_historic_agg__size___symbol___date__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_ms_latency_isSet) {
        obj.insert(QString("msLatency"), ::OpenAPI::toJsonValue(m_ms_latency));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_ticks.size() > 0) {
        obj.insert(QString("ticks"), ::OpenAPI::toJsonValue(m_ticks));
    }
    return obj;
}

QDate OAI_v1_historic_agg__size___symbol___date__get_200_response::getDay() const {
    return m_day;
}
void OAI_v1_historic_agg__size___symbol___date__get_200_response::setDay(const QDate &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_day_Set() const{
    return m_day_isSet;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAI_v1_historic_agg__size___symbol___date__get_200_response::getMsLatency() const {
    return m_ms_latency;
}
void OAI_v1_historic_agg__size___symbol___date__get_200_response::setMsLatency(const qint32 &ms_latency) {
    m_ms_latency = ms_latency;
    m_ms_latency_isSet = true;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_ms_latency_Set() const{
    return m_ms_latency_isSet;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_ms_latency_Valid() const{
    return m_ms_latency_isValid;
}

QString OAI_v1_historic_agg__size___symbol___date__get_200_response::getStatus() const {
    return m_status;
}
void OAI_v1_historic_agg__size___symbol___date__get_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_v1_historic_agg__size___symbol___date__get_200_response::getSymbol() const {
    return m_symbol;
}
void OAI_v1_historic_agg__size___symbol___date__get_200_response::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QList<OAIAggregate> OAI_v1_historic_agg__size___symbol___date__get_200_response::getTicks() const {
    return m_ticks;
}
void OAI_v1_historic_agg__size___symbol___date__get_200_response::setTicks(const QList<OAIAggregate> &ticks) {
    m_ticks = ticks;
    m_ticks_isSet = true;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_ticks_Set() const{
    return m_ticks_isSet;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::is_ticks_Valid() const{
    return m_ticks_isValid;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_v1_historic_agg__size___symbol___date__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
