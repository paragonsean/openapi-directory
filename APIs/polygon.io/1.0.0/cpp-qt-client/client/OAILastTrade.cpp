/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastTrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastTrade::OAILastTrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastTrade::OAILastTrade() {
    this->initializeModel();
}

OAILastTrade::~OAILastTrade() {}

void OAILastTrade::initializeModel() {

    m_cond1_isSet = false;
    m_cond1_isValid = false;

    m_cond2_isSet = false;
    m_cond2_isValid = false;

    m_cond3_isSet = false;
    m_cond3_isValid = false;

    m_cond4_isSet = false;
    m_cond4_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILastTrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastTrade::fromJsonObject(QJsonObject json) {

    m_cond1_isValid = ::OpenAPI::fromJsonValue(m_cond1, json[QString("cond1")]);
    m_cond1_isSet = !json[QString("cond1")].isNull() && m_cond1_isValid;

    m_cond2_isValid = ::OpenAPI::fromJsonValue(m_cond2, json[QString("cond2")]);
    m_cond2_isSet = !json[QString("cond2")].isNull() && m_cond2_isValid;

    m_cond3_isValid = ::OpenAPI::fromJsonValue(m_cond3, json[QString("cond3")]);
    m_cond3_isSet = !json[QString("cond3")].isNull() && m_cond3_isValid;

    m_cond4_isValid = ::OpenAPI::fromJsonValue(m_cond4, json[QString("cond4")]);
    m_cond4_isSet = !json[QString("cond4")].isNull() && m_cond4_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILastTrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastTrade::asJsonObject() const {
    QJsonObject obj;
    if (m_cond1_isSet) {
        obj.insert(QString("cond1"), ::OpenAPI::toJsonValue(m_cond1));
    }
    if (m_cond2_isSet) {
        obj.insert(QString("cond2"), ::OpenAPI::toJsonValue(m_cond2));
    }
    if (m_cond3_isSet) {
        obj.insert(QString("cond3"), ::OpenAPI::toJsonValue(m_cond3));
    }
    if (m_cond4_isSet) {
        obj.insert(QString("cond4"), ::OpenAPI::toJsonValue(m_cond4));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAILastTrade::getCond1() const {
    return m_cond1;
}
void OAILastTrade::setCond1(const qint32 &cond1) {
    m_cond1 = cond1;
    m_cond1_isSet = true;
}

bool OAILastTrade::is_cond1_Set() const{
    return m_cond1_isSet;
}

bool OAILastTrade::is_cond1_Valid() const{
    return m_cond1_isValid;
}

qint32 OAILastTrade::getCond2() const {
    return m_cond2;
}
void OAILastTrade::setCond2(const qint32 &cond2) {
    m_cond2 = cond2;
    m_cond2_isSet = true;
}

bool OAILastTrade::is_cond2_Set() const{
    return m_cond2_isSet;
}

bool OAILastTrade::is_cond2_Valid() const{
    return m_cond2_isValid;
}

qint32 OAILastTrade::getCond3() const {
    return m_cond3;
}
void OAILastTrade::setCond3(const qint32 &cond3) {
    m_cond3 = cond3;
    m_cond3_isSet = true;
}

bool OAILastTrade::is_cond3_Set() const{
    return m_cond3_isSet;
}

bool OAILastTrade::is_cond3_Valid() const{
    return m_cond3_isValid;
}

qint32 OAILastTrade::getCond4() const {
    return m_cond4;
}
void OAILastTrade::setCond4(const qint32 &cond4) {
    m_cond4 = cond4;
    m_cond4_isSet = true;
}

bool OAILastTrade::is_cond4_Set() const{
    return m_cond4_isSet;
}

bool OAILastTrade::is_cond4_Valid() const{
    return m_cond4_isValid;
}

qint32 OAILastTrade::getExchange() const {
    return m_exchange;
}
void OAILastTrade::setExchange(const qint32 &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAILastTrade::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAILastTrade::is_exchange_Valid() const{
    return m_exchange_isValid;
}

double OAILastTrade::getPrice() const {
    return m_price;
}
void OAILastTrade::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILastTrade::is_price_Set() const{
    return m_price_isSet;
}

bool OAILastTrade::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAILastTrade::getSize() const {
    return m_size;
}
void OAILastTrade::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILastTrade::is_size_Set() const{
    return m_size_isSet;
}

bool OAILastTrade::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAILastTrade::getTimestamp() const {
    return m_timestamp;
}
void OAILastTrade::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILastTrade::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILastTrade::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILastTrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cond1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cond2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cond3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cond4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastTrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
