/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastForexQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastForexQuote::OAILastForexQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastForexQuote::OAILastForexQuote() {
    this->initializeModel();
}

OAILastForexQuote::~OAILastForexQuote() {}

void OAILastForexQuote::initializeModel() {

    m_askprice_isSet = false;
    m_askprice_isValid = false;

    m_bidprice_isSet = false;
    m_bidprice_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILastForexQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastForexQuote::fromJsonObject(QJsonObject json) {

    m_askprice_isValid = ::OpenAPI::fromJsonValue(m_askprice, json[QString("askprice")]);
    m_askprice_isSet = !json[QString("askprice")].isNull() && m_askprice_isValid;

    m_bidprice_isValid = ::OpenAPI::fromJsonValue(m_bidprice, json[QString("bidprice")]);
    m_bidprice_isSet = !json[QString("bidprice")].isNull() && m_bidprice_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILastForexQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastForexQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_askprice_isSet) {
        obj.insert(QString("askprice"), ::OpenAPI::toJsonValue(m_askprice));
    }
    if (m_bidprice_isSet) {
        obj.insert(QString("bidprice"), ::OpenAPI::toJsonValue(m_bidprice));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

double OAILastForexQuote::getAskprice() const {
    return m_askprice;
}
void OAILastForexQuote::setAskprice(const double &askprice) {
    m_askprice = askprice;
    m_askprice_isSet = true;
}

bool OAILastForexQuote::is_askprice_Set() const{
    return m_askprice_isSet;
}

bool OAILastForexQuote::is_askprice_Valid() const{
    return m_askprice_isValid;
}

double OAILastForexQuote::getBidprice() const {
    return m_bidprice;
}
void OAILastForexQuote::setBidprice(const double &bidprice) {
    m_bidprice = bidprice;
    m_bidprice_isSet = true;
}

bool OAILastForexQuote::is_bidprice_Set() const{
    return m_bidprice_isSet;
}

bool OAILastForexQuote::is_bidprice_Valid() const{
    return m_bidprice_isValid;
}

qint32 OAILastForexQuote::getTimestamp() const {
    return m_timestamp;
}
void OAILastForexQuote::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILastForexQuote::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILastForexQuote::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILastForexQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_askprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastForexQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
