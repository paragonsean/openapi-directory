/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastForexTrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastForexTrade::OAILastForexTrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastForexTrade::OAILastForexTrade() {
    this->initializeModel();
}

OAILastForexTrade::~OAILastForexTrade() {}

void OAILastForexTrade::initializeModel() {

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILastForexTrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastForexTrade::fromJsonObject(QJsonObject json) {

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILastForexTrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastForexTrade::asJsonObject() const {
    QJsonObject obj;
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAILastForexTrade::getExchange() const {
    return m_exchange;
}
void OAILastForexTrade::setExchange(const qint32 &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAILastForexTrade::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAILastForexTrade::is_exchange_Valid() const{
    return m_exchange_isValid;
}

double OAILastForexTrade::getPrice() const {
    return m_price;
}
void OAILastForexTrade::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILastForexTrade::is_price_Set() const{
    return m_price_isSet;
}

bool OAILastForexTrade::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAILastForexTrade::getTimestamp() const {
    return m_timestamp;
}
void OAILastForexTrade::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILastForexTrade::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILastForexTrade::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILastForexTrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastForexTrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
