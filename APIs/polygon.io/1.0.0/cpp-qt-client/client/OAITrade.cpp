/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrade::OAITrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrade::OAITrade() {
    this->initializeModel();
}

OAITrade::~OAITrade() {}

void OAITrade::initializeModel() {

    m_c1_isSet = false;
    m_c1_isValid = false;

    m_c2_isSet = false;
    m_c2_isValid = false;

    m_c3_isSet = false;
    m_c3_isValid = false;

    m_c4_isSet = false;
    m_c4_isValid = false;

    m_e_isSet = false;
    m_e_isValid = false;

    m_p_isSet = false;
    m_p_isValid = false;

    m_s_isSet = false;
    m_s_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;
}

void OAITrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrade::fromJsonObject(QJsonObject json) {

    m_c1_isValid = ::OpenAPI::fromJsonValue(m_c1, json[QString("c1")]);
    m_c1_isSet = !json[QString("c1")].isNull() && m_c1_isValid;

    m_c2_isValid = ::OpenAPI::fromJsonValue(m_c2, json[QString("c2")]);
    m_c2_isSet = !json[QString("c2")].isNull() && m_c2_isValid;

    m_c3_isValid = ::OpenAPI::fromJsonValue(m_c3, json[QString("c3")]);
    m_c3_isSet = !json[QString("c3")].isNull() && m_c3_isValid;

    m_c4_isValid = ::OpenAPI::fromJsonValue(m_c4, json[QString("c4")]);
    m_c4_isSet = !json[QString("c4")].isNull() && m_c4_isValid;

    m_e_isValid = ::OpenAPI::fromJsonValue(m_e, json[QString("e")]);
    m_e_isSet = !json[QString("e")].isNull() && m_e_isValid;

    m_p_isValid = ::OpenAPI::fromJsonValue(m_p, json[QString("p")]);
    m_p_isSet = !json[QString("p")].isNull() && m_p_isValid;

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("s")]);
    m_s_isSet = !json[QString("s")].isNull() && m_s_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;
}

QString OAITrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrade::asJsonObject() const {
    QJsonObject obj;
    if (m_c1_isSet) {
        obj.insert(QString("c1"), ::OpenAPI::toJsonValue(m_c1));
    }
    if (m_c2_isSet) {
        obj.insert(QString("c2"), ::OpenAPI::toJsonValue(m_c2));
    }
    if (m_c3_isSet) {
        obj.insert(QString("c3"), ::OpenAPI::toJsonValue(m_c3));
    }
    if (m_c4_isSet) {
        obj.insert(QString("c4"), ::OpenAPI::toJsonValue(m_c4));
    }
    if (m_e_isSet) {
        obj.insert(QString("e"), ::OpenAPI::toJsonValue(m_e));
    }
    if (m_p_isSet) {
        obj.insert(QString("p"), ::OpenAPI::toJsonValue(m_p));
    }
    if (m_s_isSet) {
        obj.insert(QString("s"), ::OpenAPI::toJsonValue(m_s));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    return obj;
}

qint32 OAITrade::getC1() const {
    return m_c1;
}
void OAITrade::setC1(const qint32 &c1) {
    m_c1 = c1;
    m_c1_isSet = true;
}

bool OAITrade::is_c1_Set() const{
    return m_c1_isSet;
}

bool OAITrade::is_c1_Valid() const{
    return m_c1_isValid;
}

qint32 OAITrade::getC2() const {
    return m_c2;
}
void OAITrade::setC2(const qint32 &c2) {
    m_c2 = c2;
    m_c2_isSet = true;
}

bool OAITrade::is_c2_Set() const{
    return m_c2_isSet;
}

bool OAITrade::is_c2_Valid() const{
    return m_c2_isValid;
}

qint32 OAITrade::getC3() const {
    return m_c3;
}
void OAITrade::setC3(const qint32 &c3) {
    m_c3 = c3;
    m_c3_isSet = true;
}

bool OAITrade::is_c3_Set() const{
    return m_c3_isSet;
}

bool OAITrade::is_c3_Valid() const{
    return m_c3_isValid;
}

qint32 OAITrade::getC4() const {
    return m_c4;
}
void OAITrade::setC4(const qint32 &c4) {
    m_c4 = c4;
    m_c4_isSet = true;
}

bool OAITrade::is_c4_Set() const{
    return m_c4_isSet;
}

bool OAITrade::is_c4_Valid() const{
    return m_c4_isValid;
}

QString OAITrade::getE() const {
    return m_e;
}
void OAITrade::setE(const QString &e) {
    m_e = e;
    m_e_isSet = true;
}

bool OAITrade::is_e_Set() const{
    return m_e_isSet;
}

bool OAITrade::is_e_Valid() const{
    return m_e_isValid;
}

double OAITrade::getP() const {
    return m_p;
}
void OAITrade::setP(const double &p) {
    m_p = p;
    m_p_isSet = true;
}

bool OAITrade::is_p_Set() const{
    return m_p_isSet;
}

bool OAITrade::is_p_Valid() const{
    return m_p_isValid;
}

qint32 OAITrade::getS() const {
    return m_s;
}
void OAITrade::setS(const qint32 &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAITrade::is_s_Set() const{
    return m_s_isSet;
}

bool OAITrade::is_s_Valid() const{
    return m_s_isValid;
}

qint32 OAITrade::getT() const {
    return m_t;
}
void OAITrade::setT(const qint32 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAITrade::is_t_Set() const{
    return m_t_isSet;
}

bool OAITrade::is_t_Valid() const{
    return m_t_isValid;
}

bool OAITrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
