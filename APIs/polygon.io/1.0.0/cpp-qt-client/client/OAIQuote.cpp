/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote::OAIQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote::OAIQuote() {
    this->initializeModel();
}

OAIQuote::~OAIQuote() {}

void OAIQuote::initializeModel() {

    m_a_e_isSet = false;
    m_a_e_isValid = false;

    m_a_p_isSet = false;
    m_a_p_isValid = false;

    m_a_s_isSet = false;
    m_a_s_isValid = false;

    m_b_e_isSet = false;
    m_b_e_isValid = false;

    m_b_p_isSet = false;
    m_b_p_isValid = false;

    m_b_s_isSet = false;
    m_b_s_isValid = false;

    m_c_isSet = false;
    m_c_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;
}

void OAIQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote::fromJsonObject(QJsonObject json) {

    m_a_e_isValid = ::OpenAPI::fromJsonValue(m_a_e, json[QString("aE")]);
    m_a_e_isSet = !json[QString("aE")].isNull() && m_a_e_isValid;

    m_a_p_isValid = ::OpenAPI::fromJsonValue(m_a_p, json[QString("aP")]);
    m_a_p_isSet = !json[QString("aP")].isNull() && m_a_p_isValid;

    m_a_s_isValid = ::OpenAPI::fromJsonValue(m_a_s, json[QString("aS")]);
    m_a_s_isSet = !json[QString("aS")].isNull() && m_a_s_isValid;

    m_b_e_isValid = ::OpenAPI::fromJsonValue(m_b_e, json[QString("bE")]);
    m_b_e_isSet = !json[QString("bE")].isNull() && m_b_e_isValid;

    m_b_p_isValid = ::OpenAPI::fromJsonValue(m_b_p, json[QString("bP")]);
    m_b_p_isSet = !json[QString("bP")].isNull() && m_b_p_isValid;

    m_b_s_isValid = ::OpenAPI::fromJsonValue(m_b_s, json[QString("bS")]);
    m_b_s_isSet = !json[QString("bS")].isNull() && m_b_s_isValid;

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;
}

QString OAIQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_a_e_isSet) {
        obj.insert(QString("aE"), ::OpenAPI::toJsonValue(m_a_e));
    }
    if (m_a_p_isSet) {
        obj.insert(QString("aP"), ::OpenAPI::toJsonValue(m_a_p));
    }
    if (m_a_s_isSet) {
        obj.insert(QString("aS"), ::OpenAPI::toJsonValue(m_a_s));
    }
    if (m_b_e_isSet) {
        obj.insert(QString("bE"), ::OpenAPI::toJsonValue(m_b_e));
    }
    if (m_b_p_isSet) {
        obj.insert(QString("bP"), ::OpenAPI::toJsonValue(m_b_p));
    }
    if (m_b_s_isSet) {
        obj.insert(QString("bS"), ::OpenAPI::toJsonValue(m_b_s));
    }
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    return obj;
}

QString OAIQuote::getAE() const {
    return m_a_e;
}
void OAIQuote::setAE(const QString &a_e) {
    m_a_e = a_e;
    m_a_e_isSet = true;
}

bool OAIQuote::is_a_e_Set() const{
    return m_a_e_isSet;
}

bool OAIQuote::is_a_e_Valid() const{
    return m_a_e_isValid;
}

double OAIQuote::getAP() const {
    return m_a_p;
}
void OAIQuote::setAP(const double &a_p) {
    m_a_p = a_p;
    m_a_p_isSet = true;
}

bool OAIQuote::is_a_p_Set() const{
    return m_a_p_isSet;
}

bool OAIQuote::is_a_p_Valid() const{
    return m_a_p_isValid;
}

qint32 OAIQuote::getAS() const {
    return m_a_s;
}
void OAIQuote::setAS(const qint32 &a_s) {
    m_a_s = a_s;
    m_a_s_isSet = true;
}

bool OAIQuote::is_a_s_Set() const{
    return m_a_s_isSet;
}

bool OAIQuote::is_a_s_Valid() const{
    return m_a_s_isValid;
}

QString OAIQuote::getBE() const {
    return m_b_e;
}
void OAIQuote::setBE(const QString &b_e) {
    m_b_e = b_e;
    m_b_e_isSet = true;
}

bool OAIQuote::is_b_e_Set() const{
    return m_b_e_isSet;
}

bool OAIQuote::is_b_e_Valid() const{
    return m_b_e_isValid;
}

double OAIQuote::getBP() const {
    return m_b_p;
}
void OAIQuote::setBP(const double &b_p) {
    m_b_p = b_p;
    m_b_p_isSet = true;
}

bool OAIQuote::is_b_p_Set() const{
    return m_b_p_isSet;
}

bool OAIQuote::is_b_p_Valid() const{
    return m_b_p_isValid;
}

qint32 OAIQuote::getBS() const {
    return m_b_s;
}
void OAIQuote::setBS(const qint32 &b_s) {
    m_b_s = b_s;
    m_b_s_isSet = true;
}

bool OAIQuote::is_b_s_Set() const{
    return m_b_s_isSet;
}

bool OAIQuote::is_b_s_Valid() const{
    return m_b_s_isValid;
}

qint32 OAIQuote::getC() const {
    return m_c;
}
void OAIQuote::setC(const qint32 &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIQuote::is_c_Set() const{
    return m_c_isSet;
}

bool OAIQuote::is_c_Valid() const{
    return m_c_isValid;
}

qint32 OAIQuote::getT() const {
    return m_t;
}
void OAIQuote::setT(const qint32 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIQuote::is_t_Set() const{
    return m_t_isSet;
}

bool OAIQuote::is_t_Valid() const{
    return m_t_isValid;
}

bool OAIQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_e_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_e_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
