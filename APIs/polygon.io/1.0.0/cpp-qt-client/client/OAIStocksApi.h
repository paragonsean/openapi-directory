/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStocksApi_H
#define OAI_OAIStocksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompany.h"
#include "OAIError.h"
#include "OAI_v1_historic_agg__size___symbol___date__get_200_response.h"
#include "OAI_v1_historic_quotes__symbol___date__get_200_response.h"
#include "OAI_v1_historic_trades__symbol___date__get_200_response.h"
#include "OAI_v1_last_quote_stocks__symbol__get_200_response.h"
#include "OAI_v1_last_stocks__symbol__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStocksApi : public QObject {
    Q_OBJECT

public:
    OAIStocksApi(const int timeOut = 0);
    ~OAIStocksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  perpage double [optional]
    * @param[in]  page double [optional]
    */
    virtual void v1CompaniesGet(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &perpage = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size QString [required]
    * @param[in]  symbol QString [required]
    * @param[in]  date QDate [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void v1HistoricAggSizeSymbolDateGet(const QString &size, const QString &symbol, const QDate &date, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  symbol QString [required]
    * @param[in]  date QDate [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void v1HistoricQuotesSymbolDateGet(const QString &symbol, const QDate &date, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  symbol QString [required]
    * @param[in]  date QDate [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void v1HistoricTradesSymbolDateGet(const QString &symbol, const QDate &date, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  symbol QString [required]
    */
    virtual void v1LastQuoteStocksSymbolGet(const QString &symbol);

    /**
    * @param[in]  symbol QString [required]
    */
    virtual void v1LastStocksSymbolGet(const QString &symbol);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v1CompaniesGetCallback(OAIHttpRequestWorker *worker);
    void v1HistoricAggSizeSymbolDateGetCallback(OAIHttpRequestWorker *worker);
    void v1HistoricQuotesSymbolDateGetCallback(OAIHttpRequestWorker *worker);
    void v1HistoricTradesSymbolDateGetCallback(OAIHttpRequestWorker *worker);
    void v1LastQuoteStocksSymbolGetCallback(OAIHttpRequestWorker *worker);
    void v1LastStocksSymbolGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v1CompaniesGetSignal(QList<OAICompany> summary);
    void v1HistoricAggSizeSymbolDateGetSignal(OAI_v1_historic_agg__size___symbol___date__get_200_response summary);
    void v1HistoricQuotesSymbolDateGetSignal(OAI_v1_historic_quotes__symbol___date__get_200_response summary);
    void v1HistoricTradesSymbolDateGetSignal(OAI_v1_historic_trades__symbol___date__get_200_response summary);
    void v1LastQuoteStocksSymbolGetSignal(OAI_v1_last_quote_stocks__symbol__get_200_response summary);
    void v1LastStocksSymbolGetSignal(OAI_v1_last_stocks__symbol__get_200_response summary);


    void v1CompaniesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICompany> summary);
    void v1HistoricAggSizeSymbolDateGetSignalFull(OAIHttpRequestWorker *worker, OAI_v1_historic_agg__size___symbol___date__get_200_response summary);
    void v1HistoricQuotesSymbolDateGetSignalFull(OAIHttpRequestWorker *worker, OAI_v1_historic_quotes__symbol___date__get_200_response summary);
    void v1HistoricTradesSymbolDateGetSignalFull(OAIHttpRequestWorker *worker, OAI_v1_historic_trades__symbol___date__get_200_response summary);
    void v1LastQuoteStocksSymbolGetSignalFull(OAIHttpRequestWorker *worker, OAI_v1_last_quote_stocks__symbol__get_200_response summary);
    void v1LastStocksSymbolGetSignalFull(OAIHttpRequestWorker *worker, OAI_v1_last_stocks__symbol__get_200_response summary);

    Q_DECL_DEPRECATED_X("Use v1CompaniesGetSignalError() instead")
    void v1CompaniesGetSignalE(QList<OAICompany> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompaniesGetSignalError(QList<OAICompany> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricAggSizeSymbolDateGetSignalError() instead")
    void v1HistoricAggSizeSymbolDateGetSignalE(OAI_v1_historic_agg__size___symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricAggSizeSymbolDateGetSignalError(OAI_v1_historic_agg__size___symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricQuotesSymbolDateGetSignalError() instead")
    void v1HistoricQuotesSymbolDateGetSignalE(OAI_v1_historic_quotes__symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricQuotesSymbolDateGetSignalError(OAI_v1_historic_quotes__symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricTradesSymbolDateGetSignalError() instead")
    void v1HistoricTradesSymbolDateGetSignalE(OAI_v1_historic_trades__symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricTradesSymbolDateGetSignalError(OAI_v1_historic_trades__symbol___date__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1LastQuoteStocksSymbolGetSignalError() instead")
    void v1LastQuoteStocksSymbolGetSignalE(OAI_v1_last_quote_stocks__symbol__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1LastQuoteStocksSymbolGetSignalError(OAI_v1_last_quote_stocks__symbol__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1LastStocksSymbolGetSignalError() instead")
    void v1LastStocksSymbolGetSignalE(OAI_v1_last_stocks__symbol__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1LastStocksSymbolGetSignalError(OAI_v1_last_stocks__symbol__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v1CompaniesGetSignalErrorFull() instead")
    void v1CompaniesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompaniesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricAggSizeSymbolDateGetSignalErrorFull() instead")
    void v1HistoricAggSizeSymbolDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricAggSizeSymbolDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricQuotesSymbolDateGetSignalErrorFull() instead")
    void v1HistoricQuotesSymbolDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricQuotesSymbolDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1HistoricTradesSymbolDateGetSignalErrorFull() instead")
    void v1HistoricTradesSymbolDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1HistoricTradesSymbolDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1LastQuoteStocksSymbolGetSignalErrorFull() instead")
    void v1LastQuoteStocksSymbolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1LastQuoteStocksSymbolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1LastStocksSymbolGetSignalErrorFull() instead")
    void v1LastStocksSymbolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1LastStocksSymbolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
