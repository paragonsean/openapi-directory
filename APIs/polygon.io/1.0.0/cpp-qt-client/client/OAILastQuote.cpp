/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastQuote::OAILastQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastQuote::OAILastQuote() {
    this->initializeModel();
}

OAILastQuote::~OAILastQuote() {}

void OAILastQuote::initializeModel() {

    m_askexchange_isSet = false;
    m_askexchange_isValid = false;

    m_askprice_isSet = false;
    m_askprice_isValid = false;

    m_asksize_isSet = false;
    m_asksize_isValid = false;

    m_bidexchange_isSet = false;
    m_bidexchange_isValid = false;

    m_bidprice_isSet = false;
    m_bidprice_isValid = false;

    m_bidsize_isSet = false;
    m_bidsize_isValid = false;

    m_cond_isSet = false;
    m_cond_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILastQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastQuote::fromJsonObject(QJsonObject json) {

    m_askexchange_isValid = ::OpenAPI::fromJsonValue(m_askexchange, json[QString("askexchange")]);
    m_askexchange_isSet = !json[QString("askexchange")].isNull() && m_askexchange_isValid;

    m_askprice_isValid = ::OpenAPI::fromJsonValue(m_askprice, json[QString("askprice")]);
    m_askprice_isSet = !json[QString("askprice")].isNull() && m_askprice_isValid;

    m_asksize_isValid = ::OpenAPI::fromJsonValue(m_asksize, json[QString("asksize")]);
    m_asksize_isSet = !json[QString("asksize")].isNull() && m_asksize_isValid;

    m_bidexchange_isValid = ::OpenAPI::fromJsonValue(m_bidexchange, json[QString("bidexchange")]);
    m_bidexchange_isSet = !json[QString("bidexchange")].isNull() && m_bidexchange_isValid;

    m_bidprice_isValid = ::OpenAPI::fromJsonValue(m_bidprice, json[QString("bidprice")]);
    m_bidprice_isSet = !json[QString("bidprice")].isNull() && m_bidprice_isValid;

    m_bidsize_isValid = ::OpenAPI::fromJsonValue(m_bidsize, json[QString("bidsize")]);
    m_bidsize_isSet = !json[QString("bidsize")].isNull() && m_bidsize_isValid;

    m_cond_isValid = ::OpenAPI::fromJsonValue(m_cond, json[QString("cond")]);
    m_cond_isSet = !json[QString("cond")].isNull() && m_cond_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILastQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_askexchange_isSet) {
        obj.insert(QString("askexchange"), ::OpenAPI::toJsonValue(m_askexchange));
    }
    if (m_askprice_isSet) {
        obj.insert(QString("askprice"), ::OpenAPI::toJsonValue(m_askprice));
    }
    if (m_asksize_isSet) {
        obj.insert(QString("asksize"), ::OpenAPI::toJsonValue(m_asksize));
    }
    if (m_bidexchange_isSet) {
        obj.insert(QString("bidexchange"), ::OpenAPI::toJsonValue(m_bidexchange));
    }
    if (m_bidprice_isSet) {
        obj.insert(QString("bidprice"), ::OpenAPI::toJsonValue(m_bidprice));
    }
    if (m_bidsize_isSet) {
        obj.insert(QString("bidsize"), ::OpenAPI::toJsonValue(m_bidsize));
    }
    if (m_cond_isSet) {
        obj.insert(QString("cond"), ::OpenAPI::toJsonValue(m_cond));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAILastQuote::getAskexchange() const {
    return m_askexchange;
}
void OAILastQuote::setAskexchange(const qint32 &askexchange) {
    m_askexchange = askexchange;
    m_askexchange_isSet = true;
}

bool OAILastQuote::is_askexchange_Set() const{
    return m_askexchange_isSet;
}

bool OAILastQuote::is_askexchange_Valid() const{
    return m_askexchange_isValid;
}

double OAILastQuote::getAskprice() const {
    return m_askprice;
}
void OAILastQuote::setAskprice(const double &askprice) {
    m_askprice = askprice;
    m_askprice_isSet = true;
}

bool OAILastQuote::is_askprice_Set() const{
    return m_askprice_isSet;
}

bool OAILastQuote::is_askprice_Valid() const{
    return m_askprice_isValid;
}

qint32 OAILastQuote::getAsksize() const {
    return m_asksize;
}
void OAILastQuote::setAsksize(const qint32 &asksize) {
    m_asksize = asksize;
    m_asksize_isSet = true;
}

bool OAILastQuote::is_asksize_Set() const{
    return m_asksize_isSet;
}

bool OAILastQuote::is_asksize_Valid() const{
    return m_asksize_isValid;
}

qint32 OAILastQuote::getBidexchange() const {
    return m_bidexchange;
}
void OAILastQuote::setBidexchange(const qint32 &bidexchange) {
    m_bidexchange = bidexchange;
    m_bidexchange_isSet = true;
}

bool OAILastQuote::is_bidexchange_Set() const{
    return m_bidexchange_isSet;
}

bool OAILastQuote::is_bidexchange_Valid() const{
    return m_bidexchange_isValid;
}

double OAILastQuote::getBidprice() const {
    return m_bidprice;
}
void OAILastQuote::setBidprice(const double &bidprice) {
    m_bidprice = bidprice;
    m_bidprice_isSet = true;
}

bool OAILastQuote::is_bidprice_Set() const{
    return m_bidprice_isSet;
}

bool OAILastQuote::is_bidprice_Valid() const{
    return m_bidprice_isValid;
}

qint32 OAILastQuote::getBidsize() const {
    return m_bidsize;
}
void OAILastQuote::setBidsize(const qint32 &bidsize) {
    m_bidsize = bidsize;
    m_bidsize_isSet = true;
}

bool OAILastQuote::is_bidsize_Set() const{
    return m_bidsize_isSet;
}

bool OAILastQuote::is_bidsize_Valid() const{
    return m_bidsize_isValid;
}

qint32 OAILastQuote::getCond() const {
    return m_cond;
}
void OAILastQuote::setCond(const qint32 &cond) {
    m_cond = cond;
    m_cond_isSet = true;
}

bool OAILastQuote::is_cond_Set() const{
    return m_cond_isSet;
}

bool OAILastQuote::is_cond_Valid() const{
    return m_cond_isValid;
}

qint32 OAILastQuote::getTimestamp() const {
    return m_timestamp;
}
void OAILastQuote::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILastQuote::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILastQuote::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILastQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_askexchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_askprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asksize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidexchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cond_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
