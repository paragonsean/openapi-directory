/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:49.180080-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Quote {
  public static final String SERIALIZED_NAME_A_E = "aE";
  @SerializedName(SERIALIZED_NAME_A_E)
  private String aE;

  public static final String SERIALIZED_NAME_A_P = "aP";
  @SerializedName(SERIALIZED_NAME_A_P)
  private Double aP;

  public static final String SERIALIZED_NAME_A_S = "aS";
  @SerializedName(SERIALIZED_NAME_A_S)
  private Integer aS;

  public static final String SERIALIZED_NAME_B_E = "bE";
  @SerializedName(SERIALIZED_NAME_B_E)
  private String bE;

  public static final String SERIALIZED_NAME_B_P = "bP";
  @SerializedName(SERIALIZED_NAME_B_P)
  private Double bP;

  public static final String SERIALIZED_NAME_B_S = "bS";
  @SerializedName(SERIALIZED_NAME_B_S)
  private Integer bS;

  public static final String SERIALIZED_NAME_C = "c";
  @SerializedName(SERIALIZED_NAME_C)
  private Integer c;

  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private Integer t;

  public Quote() {
  }

  public Quote aE(String aE) {
    this.aE = aE;
    return this;
  }

  /**
   * Ask Exchange
   * @return aE
   */
  @javax.annotation.Nullable
  public String getaE() {
    return aE;
  }

  public void setaE(String aE) {
    this.aE = aE;
  }


  public Quote aP(Double aP) {
    this.aP = aP;
    return this;
  }

  /**
   * Ask Price
   * @return aP
   */
  @javax.annotation.Nullable
  public Double getaP() {
    return aP;
  }

  public void setaP(Double aP) {
    this.aP = aP;
  }


  public Quote aS(Integer aS) {
    this.aS = aS;
    return this;
  }

  /**
   * Ask Size
   * @return aS
   */
  @javax.annotation.Nullable
  public Integer getaS() {
    return aS;
  }

  public void setaS(Integer aS) {
    this.aS = aS;
  }


  public Quote bE(String bE) {
    this.bE = bE;
    return this;
  }

  /**
   * Bid Exchange
   * @return bE
   */
  @javax.annotation.Nullable
  public String getbE() {
    return bE;
  }

  public void setbE(String bE) {
    this.bE = bE;
  }


  public Quote bP(Double bP) {
    this.bP = bP;
    return this;
  }

  /**
   * Bid Price
   * @return bP
   */
  @javax.annotation.Nullable
  public Double getbP() {
    return bP;
  }

  public void setbP(Double bP) {
    this.bP = bP;
  }


  public Quote bS(Integer bS) {
    this.bS = bS;
    return this;
  }

  /**
   * Bid Size
   * @return bS
   */
  @javax.annotation.Nullable
  public Integer getbS() {
    return bS;
  }

  public void setbS(Integer bS) {
    this.bS = bS;
  }


  public Quote c(Integer c) {
    this.c = c;
    return this;
  }

  /**
   * Condition of this quote
   * @return c
   */
  @javax.annotation.Nullable
  public Integer getC() {
    return c;
  }

  public void setC(Integer c) {
    this.c = c;
  }


  public Quote t(Integer t) {
    this.t = t;
    return this;
  }

  /**
   * Timestamp of this trade
   * @return t
   */
  @javax.annotation.Nullable
  public Integer getT() {
    return t;
  }

  public void setT(Integer t) {
    this.t = t;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.aE, quote.aE) &&
        Objects.equals(this.aP, quote.aP) &&
        Objects.equals(this.aS, quote.aS) &&
        Objects.equals(this.bE, quote.bE) &&
        Objects.equals(this.bP, quote.bP) &&
        Objects.equals(this.bS, quote.bS) &&
        Objects.equals(this.c, quote.c) &&
        Objects.equals(this.t, quote.t);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aE, aP, aS, bE, bP, bS, c, t);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    aE: ").append(toIndentedString(aE)).append("\n");
    sb.append("    aP: ").append(toIndentedString(aP)).append("\n");
    sb.append("    aS: ").append(toIndentedString(aS)).append("\n");
    sb.append("    bE: ").append(toIndentedString(bE)).append("\n");
    sb.append("    bP: ").append(toIndentedString(bP)).append("\n");
    sb.append("    bS: ").append(toIndentedString(bS)).append("\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aE");
    openapiFields.add("aP");
    openapiFields.add("aS");
    openapiFields.add("bE");
    openapiFields.add("bP");
    openapiFields.add("bS");
    openapiFields.add("c");
    openapiFields.add("t");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Quote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quote is not found in the empty JSON string", Quote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aE") != null && !jsonObj.get("aE").isJsonNull()) && !jsonObj.get("aE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aE").toString()));
      }
      if ((jsonObj.get("bE") != null && !jsonObj.get("bE").isJsonNull()) && !jsonObj.get("bE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quote.class));

       return (TypeAdapter<T>) new TypeAdapter<Quote>() {
           @Override
           public void write(JsonWriter out, Quote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Quote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Quote
   * @throws IOException if the JSON string is invalid with respect to Quote
   */
  public static Quote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quote.class);
  }

  /**
   * Convert an instance of Quote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

