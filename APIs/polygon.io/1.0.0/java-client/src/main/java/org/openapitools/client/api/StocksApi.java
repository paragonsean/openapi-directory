/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.Error;
import java.time.LocalDate;
import org.openapitools.client.model.V1HistoricAggSizeSymbolDateGet200Response;
import org.openapitools.client.model.V1HistoricQuotesSymbolDateGet200Response;
import org.openapitools.client.model.V1HistoricTradesSymbolDateGet200Response;
import org.openapitools.client.model.V1LastQuoteStocksSymbolGet200Response;
import org.openapitools.client.model.V1LastStocksSymbolGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1CompaniesGet
     * @param sort Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name. eg &#x60;?sort&#x3D;-marketcap&#x60; (optional)
     * @param perpage How many items to be on each page during pagination (optional)
     * @param page Which page of results to return (optional, default to 1.0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompaniesGetCall(String sort, BigDecimal perpage, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (perpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perpage", perpage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompaniesGetValidateBeforeCall(String sort, BigDecimal perpage, BigDecimal page, final ApiCallback _callback) throws ApiException {
        return v1CompaniesGetCall(sort, perpage, page, _callback);

    }

    /**
     * Available Companies
     * Get a list of the traded companies that polygon.io streams. Company includes some details about the company which we hope to add more to soon. 
     * @param sort Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name. eg &#x60;?sort&#x3D;-marketcap&#x60; (optional)
     * @param perpage How many items to be on each page during pagination (optional)
     * @param page Which page of results to return (optional, default to 1.0)
     * @return List&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Company> v1CompaniesGet(String sort, BigDecimal perpage, BigDecimal page) throws ApiException {
        ApiResponse<List<Company>> localVarResp = v1CompaniesGetWithHttpInfo(sort, perpage, page);
        return localVarResp.getData();
    }

    /**
     * Available Companies
     * Get a list of the traded companies that polygon.io streams. Company includes some details about the company which we hope to add more to soon. 
     * @param sort Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name. eg &#x60;?sort&#x3D;-marketcap&#x60; (optional)
     * @param perpage How many items to be on each page during pagination (optional)
     * @param page Which page of results to return (optional, default to 1.0)
     * @return ApiResponse&lt;List&lt;Company&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Company>> v1CompaniesGetWithHttpInfo(String sort, BigDecimal perpage, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = v1CompaniesGetValidateBeforeCall(sort, perpage, page, null);
        Type localVarReturnType = new TypeToken<List<Company>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available Companies (asynchronously)
     * Get a list of the traded companies that polygon.io streams. Company includes some details about the company which we hope to add more to soon. 
     * @param sort Which field to sort by. For desc place a &#x60;-&#x60; in front of the field name. eg &#x60;?sort&#x3D;-marketcap&#x60; (optional)
     * @param perpage How many items to be on each page during pagination (optional)
     * @param page Which page of results to return (optional, default to 1.0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of companies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompaniesGetAsync(String sort, BigDecimal perpage, BigDecimal page, final ApiCallback<List<Company>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompaniesGetValidateBeforeCall(sort, perpage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Company>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1HistoricAggSizeSymbolDateGet
     * @param size Size of the aggregation. &#x60;second&#x60; or &#x60;minute&#x60; (required)
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of aggregates </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricAggSizeSymbolDateGetCall(String size, String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/historic/agg/{size}/{symbol}/{date}"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()))
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1HistoricAggSizeSymbolDateGetValidateBeforeCall(String size, String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling v1HistoricAggSizeSymbolDateGet(Async)");
        }

        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1HistoricAggSizeSymbolDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1HistoricAggSizeSymbolDateGet(Async)");
        }

        return v1HistoricAggSizeSymbolDateGetCall(size, symbol, date, offset, limit, _callback);

    }

    /**
     * Historic Aggregates
     * Get historic aggregations for a symbol. 
     * @param size Size of the aggregation. &#x60;second&#x60; or &#x60;minute&#x60; (required)
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return V1HistoricAggSizeSymbolDateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of aggregates </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1HistoricAggSizeSymbolDateGet200Response v1HistoricAggSizeSymbolDateGet(String size, String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        ApiResponse<V1HistoricAggSizeSymbolDateGet200Response> localVarResp = v1HistoricAggSizeSymbolDateGetWithHttpInfo(size, symbol, date, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Historic Aggregates
     * Get historic aggregations for a symbol. 
     * @param size Size of the aggregation. &#x60;second&#x60; or &#x60;minute&#x60; (required)
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return ApiResponse&lt;V1HistoricAggSizeSymbolDateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of aggregates </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1HistoricAggSizeSymbolDateGet200Response> v1HistoricAggSizeSymbolDateGetWithHttpInfo(String size, String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1HistoricAggSizeSymbolDateGetValidateBeforeCall(size, symbol, date, offset, limit, null);
        Type localVarReturnType = new TypeToken<V1HistoricAggSizeSymbolDateGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historic Aggregates (asynchronously)
     * Get historic aggregations for a symbol. 
     * @param size Size of the aggregation. &#x60;second&#x60; or &#x60;minute&#x60; (required)
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of aggregates </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricAggSizeSymbolDateGetAsync(String size, String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback<V1HistoricAggSizeSymbolDateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1HistoricAggSizeSymbolDateGetValidateBeforeCall(size, symbol, date, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<V1HistoricAggSizeSymbolDateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1HistoricQuotesSymbolDateGet
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of quotes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricQuotesSymbolDateGetCall(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/historic/quotes/{symbol}/{date}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1HistoricQuotesSymbolDateGetValidateBeforeCall(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1HistoricQuotesSymbolDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1HistoricQuotesSymbolDateGet(Async)");
        }

        return v1HistoricQuotesSymbolDateGetCall(symbol, date, offset, limit, _callback);

    }

    /**
     * Historic Quotes
     * Get historic quotes for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return V1HistoricQuotesSymbolDateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of quotes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1HistoricQuotesSymbolDateGet200Response v1HistoricQuotesSymbolDateGet(String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        ApiResponse<V1HistoricQuotesSymbolDateGet200Response> localVarResp = v1HistoricQuotesSymbolDateGetWithHttpInfo(symbol, date, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Historic Quotes
     * Get historic quotes for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return ApiResponse&lt;V1HistoricQuotesSymbolDateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of quotes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1HistoricQuotesSymbolDateGet200Response> v1HistoricQuotesSymbolDateGetWithHttpInfo(String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1HistoricQuotesSymbolDateGetValidateBeforeCall(symbol, date, offset, limit, null);
        Type localVarReturnType = new TypeToken<V1HistoricQuotesSymbolDateGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historic Quotes (asynchronously)
     * Get historic quotes for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of quotes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricQuotesSymbolDateGetAsync(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback<V1HistoricQuotesSymbolDateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1HistoricQuotesSymbolDateGetValidateBeforeCall(symbol, date, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<V1HistoricQuotesSymbolDateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1HistoricTradesSymbolDateGet
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of trades </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricTradesSymbolDateGetCall(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/historic/trades/{symbol}/{date}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1HistoricTradesSymbolDateGetValidateBeforeCall(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1HistoricTradesSymbolDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1HistoricTradesSymbolDateGet(Async)");
        }

        return v1HistoricTradesSymbolDateGetCall(symbol, date, offset, limit, _callback);

    }

    /**
     * Historic Trades
     * Get historic trades for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return V1HistoricTradesSymbolDateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of trades </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1HistoricTradesSymbolDateGet200Response v1HistoricTradesSymbolDateGet(String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        ApiResponse<V1HistoricTradesSymbolDateGet200Response> localVarResp = v1HistoricTradesSymbolDateGetWithHttpInfo(symbol, date, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Historic Trades
     * Get historic trades for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return ApiResponse&lt;V1HistoricTradesSymbolDateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of trades </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1HistoricTradesSymbolDateGet200Response> v1HistoricTradesSymbolDateGetWithHttpInfo(String symbol, LocalDate date, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1HistoricTradesSymbolDateGetValidateBeforeCall(symbol, date, offset, limit, null);
        Type localVarReturnType = new TypeToken<V1HistoricTradesSymbolDateGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historic Trades (asynchronously)
     * Get historic trades for a symbol. 
     * @param symbol Symbol of the company to retrieve (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of trades </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricTradesSymbolDateGetAsync(String symbol, LocalDate date, Integer offset, Integer limit, final ApiCallback<V1HistoricTradesSymbolDateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1HistoricTradesSymbolDateGetValidateBeforeCall(symbol, date, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<V1HistoricTradesSymbolDateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1LastQuoteStocksSymbolGet
     * @param symbol Symbol of the stock to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastQuoteStocksSymbolGetCall(String symbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/last_quote/stocks/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1LastQuoteStocksSymbolGetValidateBeforeCall(String symbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1LastQuoteStocksSymbolGet(Async)");
        }

        return v1LastQuoteStocksSymbolGetCall(symbol, _callback);

    }

    /**
     * Last Quote for a Symbol
     * Get the last quote tick for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @return V1LastQuoteStocksSymbolGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1LastQuoteStocksSymbolGet200Response v1LastQuoteStocksSymbolGet(String symbol) throws ApiException {
        ApiResponse<V1LastQuoteStocksSymbolGet200Response> localVarResp = v1LastQuoteStocksSymbolGetWithHttpInfo(symbol);
        return localVarResp.getData();
    }

    /**
     * Last Quote for a Symbol
     * Get the last quote tick for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @return ApiResponse&lt;V1LastQuoteStocksSymbolGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1LastQuoteStocksSymbolGet200Response> v1LastQuoteStocksSymbolGetWithHttpInfo(String symbol) throws ApiException {
        okhttp3.Call localVarCall = v1LastQuoteStocksSymbolGetValidateBeforeCall(symbol, null);
        Type localVarReturnType = new TypeToken<V1LastQuoteStocksSymbolGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Last Quote for a Symbol (asynchronously)
     * Get the last quote tick for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastQuoteStocksSymbolGetAsync(String symbol, final ApiCallback<V1LastQuoteStocksSymbolGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1LastQuoteStocksSymbolGetValidateBeforeCall(symbol, _callback);
        Type localVarReturnType = new TypeToken<V1LastQuoteStocksSymbolGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1LastStocksSymbolGet
     * @param symbol Symbol of the stock to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last trade for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastStocksSymbolGetCall(String symbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/last/stocks/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1LastStocksSymbolGetValidateBeforeCall(String symbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1LastStocksSymbolGet(Async)");
        }

        return v1LastStocksSymbolGetCall(symbol, _callback);

    }

    /**
     * Last Trade for a Symbol
     * Get the last trade for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @return V1LastStocksSymbolGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last trade for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1LastStocksSymbolGet200Response v1LastStocksSymbolGet(String symbol) throws ApiException {
        ApiResponse<V1LastStocksSymbolGet200Response> localVarResp = v1LastStocksSymbolGetWithHttpInfo(symbol);
        return localVarResp.getData();
    }

    /**
     * Last Trade for a Symbol
     * Get the last trade for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @return ApiResponse&lt;V1LastStocksSymbolGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last trade for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1LastStocksSymbolGet200Response> v1LastStocksSymbolGetWithHttpInfo(String symbol) throws ApiException {
        okhttp3.Call localVarCall = v1LastStocksSymbolGetValidateBeforeCall(symbol, null);
        Type localVarReturnType = new TypeToken<V1LastStocksSymbolGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Last Trade for a Symbol (asynchronously)
     * Get the last trade for a given stock. 
     * @param symbol Symbol of the stock to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last trade for this stock </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastStocksSymbolGetAsync(String symbol, final ApiCallback<V1LastStocksSymbolGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1LastStocksSymbolGetValidateBeforeCall(symbol, _callback);
        Type localVarReturnType = new TypeToken<V1LastStocksSymbolGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
