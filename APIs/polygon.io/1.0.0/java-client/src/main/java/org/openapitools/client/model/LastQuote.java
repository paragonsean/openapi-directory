/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LastQuote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:49.180080-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LastQuote {
  public static final String SERIALIZED_NAME_ASKEXCHANGE = "askexchange";
  @SerializedName(SERIALIZED_NAME_ASKEXCHANGE)
  private Integer askexchange;

  public static final String SERIALIZED_NAME_ASKPRICE = "askprice";
  @SerializedName(SERIALIZED_NAME_ASKPRICE)
  private Double askprice;

  public static final String SERIALIZED_NAME_ASKSIZE = "asksize";
  @SerializedName(SERIALIZED_NAME_ASKSIZE)
  private Integer asksize;

  public static final String SERIALIZED_NAME_BIDEXCHANGE = "bidexchange";
  @SerializedName(SERIALIZED_NAME_BIDEXCHANGE)
  private Integer bidexchange;

  public static final String SERIALIZED_NAME_BIDPRICE = "bidprice";
  @SerializedName(SERIALIZED_NAME_BIDPRICE)
  private Double bidprice;

  public static final String SERIALIZED_NAME_BIDSIZE = "bidsize";
  @SerializedName(SERIALIZED_NAME_BIDSIZE)
  private Integer bidsize;

  public static final String SERIALIZED_NAME_COND = "cond";
  @SerializedName(SERIALIZED_NAME_COND)
  private Integer cond;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public LastQuote() {
  }

  public LastQuote askexchange(Integer askexchange) {
    this.askexchange = askexchange;
    return this;
  }

  /**
   * Exchange the ask happened on
   * @return askexchange
   */
  @javax.annotation.Nullable
  public Integer getAskexchange() {
    return askexchange;
  }

  public void setAskexchange(Integer askexchange) {
    this.askexchange = askexchange;
  }


  public LastQuote askprice(Double askprice) {
    this.askprice = askprice;
    return this;
  }

  /**
   * Ask Price
   * @return askprice
   */
  @javax.annotation.Nullable
  public Double getAskprice() {
    return askprice;
  }

  public void setAskprice(Double askprice) {
    this.askprice = askprice;
  }


  public LastQuote asksize(Integer asksize) {
    this.asksize = asksize;
    return this;
  }

  /**
   * Ask Size
   * @return asksize
   */
  @javax.annotation.Nullable
  public Integer getAsksize() {
    return asksize;
  }

  public void setAsksize(Integer asksize) {
    this.asksize = asksize;
  }


  public LastQuote bidexchange(Integer bidexchange) {
    this.bidexchange = bidexchange;
    return this;
  }

  /**
   * Exchange the bid happened on
   * @return bidexchange
   */
  @javax.annotation.Nullable
  public Integer getBidexchange() {
    return bidexchange;
  }

  public void setBidexchange(Integer bidexchange) {
    this.bidexchange = bidexchange;
  }


  public LastQuote bidprice(Double bidprice) {
    this.bidprice = bidprice;
    return this;
  }

  /**
   * Bid Price
   * @return bidprice
   */
  @javax.annotation.Nullable
  public Double getBidprice() {
    return bidprice;
  }

  public void setBidprice(Double bidprice) {
    this.bidprice = bidprice;
  }


  public LastQuote bidsize(Integer bidsize) {
    this.bidsize = bidsize;
    return this;
  }

  /**
   * Bid Size
   * @return bidsize
   */
  @javax.annotation.Nullable
  public Integer getBidsize() {
    return bidsize;
  }

  public void setBidsize(Integer bidsize) {
    this.bidsize = bidsize;
  }


  public LastQuote cond(Integer cond) {
    this.cond = cond;
    return this;
  }

  /**
   * Condition of the quote
   * @return cond
   */
  @javax.annotation.Nullable
  public Integer getCond() {
    return cond;
  }

  public void setCond(Integer cond) {
    this.cond = cond;
  }


  public LastQuote timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of this trade
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LastQuote lastQuote = (LastQuote) o;
    return Objects.equals(this.askexchange, lastQuote.askexchange) &&
        Objects.equals(this.askprice, lastQuote.askprice) &&
        Objects.equals(this.asksize, lastQuote.asksize) &&
        Objects.equals(this.bidexchange, lastQuote.bidexchange) &&
        Objects.equals(this.bidprice, lastQuote.bidprice) &&
        Objects.equals(this.bidsize, lastQuote.bidsize) &&
        Objects.equals(this.cond, lastQuote.cond) &&
        Objects.equals(this.timestamp, lastQuote.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(askexchange, askprice, asksize, bidexchange, bidprice, bidsize, cond, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LastQuote {\n");
    sb.append("    askexchange: ").append(toIndentedString(askexchange)).append("\n");
    sb.append("    askprice: ").append(toIndentedString(askprice)).append("\n");
    sb.append("    asksize: ").append(toIndentedString(asksize)).append("\n");
    sb.append("    bidexchange: ").append(toIndentedString(bidexchange)).append("\n");
    sb.append("    bidprice: ").append(toIndentedString(bidprice)).append("\n");
    sb.append("    bidsize: ").append(toIndentedString(bidsize)).append("\n");
    sb.append("    cond: ").append(toIndentedString(cond)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("askexchange");
    openapiFields.add("askprice");
    openapiFields.add("asksize");
    openapiFields.add("bidexchange");
    openapiFields.add("bidprice");
    openapiFields.add("bidsize");
    openapiFields.add("cond");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LastQuote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LastQuote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LastQuote is not found in the empty JSON string", LastQuote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LastQuote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LastQuote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LastQuote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LastQuote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LastQuote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LastQuote.class));

       return (TypeAdapter<T>) new TypeAdapter<LastQuote>() {
           @Override
           public void write(JsonWriter out, LastQuote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LastQuote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LastQuote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LastQuote
   * @throws IOException if the JSON string is invalid with respect to LastQuote
   */
  public static LastQuote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LastQuote.class);
  }

  /**
   * Convert an instance of LastQuote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

