/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:49.180080-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trade {
  public static final String SERIALIZED_NAME_C1 = "c1";
  @SerializedName(SERIALIZED_NAME_C1)
  private Integer c1;

  public static final String SERIALIZED_NAME_C2 = "c2";
  @SerializedName(SERIALIZED_NAME_C2)
  private Integer c2;

  public static final String SERIALIZED_NAME_C3 = "c3";
  @SerializedName(SERIALIZED_NAME_C3)
  private Integer c3;

  public static final String SERIALIZED_NAME_C4 = "c4";
  @SerializedName(SERIALIZED_NAME_C4)
  private Integer c4;

  public static final String SERIALIZED_NAME_E = "e";
  @SerializedName(SERIALIZED_NAME_E)
  private String e;

  public static final String SERIALIZED_NAME_P = "p";
  @SerializedName(SERIALIZED_NAME_P)
  private Double p;

  public static final String SERIALIZED_NAME_S = "s";
  @SerializedName(SERIALIZED_NAME_S)
  private Integer s;

  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private Integer t;

  public Trade() {
  }

  public Trade c1(Integer c1) {
    this.c1 = c1;
    return this;
  }

  /**
   * Condition 1 of this trade
   * @return c1
   */
  @javax.annotation.Nullable
  public Integer getC1() {
    return c1;
  }

  public void setC1(Integer c1) {
    this.c1 = c1;
  }


  public Trade c2(Integer c2) {
    this.c2 = c2;
    return this;
  }

  /**
   * Condition 2 of this trade
   * @return c2
   */
  @javax.annotation.Nullable
  public Integer getC2() {
    return c2;
  }

  public void setC2(Integer c2) {
    this.c2 = c2;
  }


  public Trade c3(Integer c3) {
    this.c3 = c3;
    return this;
  }

  /**
   * Condition 3 of this trade
   * @return c3
   */
  @javax.annotation.Nullable
  public Integer getC3() {
    return c3;
  }

  public void setC3(Integer c3) {
    this.c3 = c3;
  }


  public Trade c4(Integer c4) {
    this.c4 = c4;
    return this;
  }

  /**
   * Condition 4 of this trade
   * @return c4
   */
  @javax.annotation.Nullable
  public Integer getC4() {
    return c4;
  }

  public void setC4(Integer c4) {
    this.c4 = c4;
  }


  public Trade e(String e) {
    this.e = e;
    return this;
  }

  /**
   * The exchange this trade happened on
   * @return e
   */
  @javax.annotation.Nullable
  public String getE() {
    return e;
  }

  public void setE(String e) {
    this.e = e;
  }


  public Trade p(Double p) {
    this.p = p;
    return this;
  }

  /**
   * Price of this trade
   * @return p
   */
  @javax.annotation.Nullable
  public Double getP() {
    return p;
  }

  public void setP(Double p) {
    this.p = p;
  }


  public Trade s(Integer s) {
    this.s = s;
    return this;
  }

  /**
   * Size of the trade
   * @return s
   */
  @javax.annotation.Nullable
  public Integer getS() {
    return s;
  }

  public void setS(Integer s) {
    this.s = s;
  }


  public Trade t(Integer t) {
    this.t = t;
    return this;
  }

  /**
   * Timestamp of this trade
   * @return t
   */
  @javax.annotation.Nullable
  public Integer getT() {
    return t;
  }

  public void setT(Integer t) {
    this.t = t;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trade trade = (Trade) o;
    return Objects.equals(this.c1, trade.c1) &&
        Objects.equals(this.c2, trade.c2) &&
        Objects.equals(this.c3, trade.c3) &&
        Objects.equals(this.c4, trade.c4) &&
        Objects.equals(this.e, trade.e) &&
        Objects.equals(this.p, trade.p) &&
        Objects.equals(this.s, trade.s) &&
        Objects.equals(this.t, trade.t);
  }

  @Override
  public int hashCode() {
    return Objects.hash(c1, c2, c3, c4, e, p, s, t);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trade {\n");
    sb.append("    c1: ").append(toIndentedString(c1)).append("\n");
    sb.append("    c2: ").append(toIndentedString(c2)).append("\n");
    sb.append("    c3: ").append(toIndentedString(c3)).append("\n");
    sb.append("    c4: ").append(toIndentedString(c4)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("    p: ").append(toIndentedString(p)).append("\n");
    sb.append("    s: ").append(toIndentedString(s)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("c1");
    openapiFields.add("c2");
    openapiFields.add("c3");
    openapiFields.add("c4");
    openapiFields.add("e");
    openapiFields.add("p");
    openapiFields.add("s");
    openapiFields.add("t");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trade is not found in the empty JSON string", Trade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull()) && !jsonObj.get("e").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trade.class));

       return (TypeAdapter<T>) new TypeAdapter<Trade>() {
           @Override
           public void write(JsonWriter out, Trade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trade
   * @throws IOException if the JSON string is invalid with respect to Trade
   */
  public static Trade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trade.class);
  }

  /**
   * Convert an instance of Trade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

