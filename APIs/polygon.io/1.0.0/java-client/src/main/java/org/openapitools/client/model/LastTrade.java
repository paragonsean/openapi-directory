/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LastTrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:49.180080-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LastTrade {
  public static final String SERIALIZED_NAME_COND1 = "cond1";
  @SerializedName(SERIALIZED_NAME_COND1)
  private Integer cond1;

  public static final String SERIALIZED_NAME_COND2 = "cond2";
  @SerializedName(SERIALIZED_NAME_COND2)
  private Integer cond2;

  public static final String SERIALIZED_NAME_COND3 = "cond3";
  @SerializedName(SERIALIZED_NAME_COND3)
  private Integer cond3;

  public static final String SERIALIZED_NAME_COND4 = "cond4";
  @SerializedName(SERIALIZED_NAME_COND4)
  private Integer cond4;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private Integer exchange;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public LastTrade() {
  }

  public LastTrade cond1(Integer cond1) {
    this.cond1 = cond1;
    return this;
  }

  /**
   * Condition 1 of the trade
   * @return cond1
   */
  @javax.annotation.Nullable
  public Integer getCond1() {
    return cond1;
  }

  public void setCond1(Integer cond1) {
    this.cond1 = cond1;
  }


  public LastTrade cond2(Integer cond2) {
    this.cond2 = cond2;
    return this;
  }

  /**
   * Condition 2 of the trade
   * @return cond2
   */
  @javax.annotation.Nullable
  public Integer getCond2() {
    return cond2;
  }

  public void setCond2(Integer cond2) {
    this.cond2 = cond2;
  }


  public LastTrade cond3(Integer cond3) {
    this.cond3 = cond3;
    return this;
  }

  /**
   * Condition 3 of the trade
   * @return cond3
   */
  @javax.annotation.Nullable
  public Integer getCond3() {
    return cond3;
  }

  public void setCond3(Integer cond3) {
    this.cond3 = cond3;
  }


  public LastTrade cond4(Integer cond4) {
    this.cond4 = cond4;
    return this;
  }

  /**
   * Condition 4 of the trade
   * @return cond4
   */
  @javax.annotation.Nullable
  public Integer getCond4() {
    return cond4;
  }

  public void setCond4(Integer cond4) {
    this.cond4 = cond4;
  }


  public LastTrade exchange(Integer exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * Exchange this trade happened on
   * @return exchange
   */
  @javax.annotation.Nullable
  public Integer getExchange() {
    return exchange;
  }

  public void setExchange(Integer exchange) {
    this.exchange = exchange;
  }


  public LastTrade price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the trade
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public LastTrade size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Size of this trade
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public LastTrade timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of this trade
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LastTrade lastTrade = (LastTrade) o;
    return Objects.equals(this.cond1, lastTrade.cond1) &&
        Objects.equals(this.cond2, lastTrade.cond2) &&
        Objects.equals(this.cond3, lastTrade.cond3) &&
        Objects.equals(this.cond4, lastTrade.cond4) &&
        Objects.equals(this.exchange, lastTrade.exchange) &&
        Objects.equals(this.price, lastTrade.price) &&
        Objects.equals(this.size, lastTrade.size) &&
        Objects.equals(this.timestamp, lastTrade.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cond1, cond2, cond3, cond4, exchange, price, size, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LastTrade {\n");
    sb.append("    cond1: ").append(toIndentedString(cond1)).append("\n");
    sb.append("    cond2: ").append(toIndentedString(cond2)).append("\n");
    sb.append("    cond3: ").append(toIndentedString(cond3)).append("\n");
    sb.append("    cond4: ").append(toIndentedString(cond4)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cond1");
    openapiFields.add("cond2");
    openapiFields.add("cond3");
    openapiFields.add("cond4");
    openapiFields.add("exchange");
    openapiFields.add("price");
    openapiFields.add("size");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LastTrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LastTrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LastTrade is not found in the empty JSON string", LastTrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LastTrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LastTrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LastTrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LastTrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LastTrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LastTrade.class));

       return (TypeAdapter<T>) new TypeAdapter<LastTrade>() {
           @Override
           public void write(JsonWriter out, LastTrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LastTrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LastTrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LastTrade
   * @throws IOException if the JSON string is invalid with respect to LastTrade
   */
  public static LastTrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LastTrade.class);
  }

  /**
   * Convert an instance of LastTrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

