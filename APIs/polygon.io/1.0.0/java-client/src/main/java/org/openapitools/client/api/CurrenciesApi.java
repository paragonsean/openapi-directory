/*
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.time.LocalDate;
import org.openapitools.client.model.V1HistoricForexFromToDateGet200Response;
import org.openapitools.client.model.V1LastCurrenciesFromToGet200Response;
import org.openapitools.client.model.V1LastQuoteCurrenciesFromToGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrenciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1CurrenciesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of currencies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CurrenciesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CurrenciesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1CurrenciesGetCall(_callback);

    }

    /**
     * Available Currencies
     * Get a list of the currencies that polygon.io streams. 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of currencies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> v1CurrenciesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = v1CurrenciesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Available Currencies
     * Get a list of the currencies that polygon.io streams. 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of currencies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> v1CurrenciesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CurrenciesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available Currencies (asynchronously)
     * Get a list of the currencies that polygon.io streams. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of currencies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CurrenciesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CurrenciesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1HistoricForexFromToDateGet
     * @param from From Symbol of the currency pair (required)
     * @param to To Symbol of the currency pair (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of forex ticks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricForexFromToDateGetCall(String from, String to, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/historic/forex/{from}/{to}/{date}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1HistoricForexFromToDateGetValidateBeforeCall(String from, String to, LocalDate date, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v1HistoricForexFromToDateGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v1HistoricForexFromToDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1HistoricForexFromToDateGet(Async)");
        }

        return v1HistoricForexFromToDateGetCall(from, to, date, offset, limit, _callback);

    }

    /**
     * Historic Forex Ticks
     * Get historic ticks for a currency pair. Example for **USD/JPY** the from would be **USD** and to would be **JPY**. The date formatted like **2017-6-22** 
     * @param from From Symbol of the currency pair (required)
     * @param to To Symbol of the currency pair (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return V1HistoricForexFromToDateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of forex ticks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1HistoricForexFromToDateGet200Response v1HistoricForexFromToDateGet(String from, String to, LocalDate date, Integer offset, Integer limit) throws ApiException {
        ApiResponse<V1HistoricForexFromToDateGet200Response> localVarResp = v1HistoricForexFromToDateGetWithHttpInfo(from, to, date, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Historic Forex Ticks
     * Get historic ticks for a currency pair. Example for **USD/JPY** the from would be **USD** and to would be **JPY**. The date formatted like **2017-6-22** 
     * @param from From Symbol of the currency pair (required)
     * @param to To Symbol of the currency pair (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @return ApiResponse&lt;V1HistoricForexFromToDateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of forex ticks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1HistoricForexFromToDateGet200Response> v1HistoricForexFromToDateGetWithHttpInfo(String from, String to, LocalDate date, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1HistoricForexFromToDateGetValidateBeforeCall(from, to, date, offset, limit, null);
        Type localVarReturnType = new TypeToken<V1HistoricForexFromToDateGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historic Forex Ticks (asynchronously)
     * Get historic ticks for a currency pair. Example for **USD/JPY** the from would be **USD** and to would be **JPY**. The date formatted like **2017-6-22** 
     * @param from From Symbol of the currency pair (required)
     * @param to To Symbol of the currency pair (required)
     * @param date Date/Day of the historic ticks to retreive (required)
     * @param offset Timestamp offset, used for pagination (optional)
     * @param limit Limit the size of response, max: 10000 (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of forex ticks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1HistoricForexFromToDateGetAsync(String from, String to, LocalDate date, Integer offset, Integer limit, final ApiCallback<V1HistoricForexFromToDateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1HistoricForexFromToDateGetValidateBeforeCall(from, to, date, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<V1HistoricForexFromToDateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1LastCurrenciesFromToGet
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastCurrenciesFromToGetCall(String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/last/currencies/{from}/{to}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1LastCurrenciesFromToGetValidateBeforeCall(String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v1LastCurrenciesFromToGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v1LastCurrenciesFromToGet(Async)");
        }

        return v1LastCurrenciesFromToGetCall(from, to, _callback);

    }

    /**
     * Last Trade for a Currency Pair
     * Get Last Trade Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @return V1LastCurrenciesFromToGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1LastCurrenciesFromToGet200Response v1LastCurrenciesFromToGet(String from, String to) throws ApiException {
        ApiResponse<V1LastCurrenciesFromToGet200Response> localVarResp = v1LastCurrenciesFromToGetWithHttpInfo(from, to);
        return localVarResp.getData();
    }

    /**
     * Last Trade for a Currency Pair
     * Get Last Trade Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @return ApiResponse&lt;V1LastCurrenciesFromToGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1LastCurrenciesFromToGet200Response> v1LastCurrenciesFromToGetWithHttpInfo(String from, String to) throws ApiException {
        okhttp3.Call localVarCall = v1LastCurrenciesFromToGetValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<V1LastCurrenciesFromToGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Last Trade for a Currency Pair (asynchronously)
     * Get Last Trade Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastCurrenciesFromToGetAsync(String from, String to, final ApiCallback<V1LastCurrenciesFromToGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1LastCurrenciesFromToGetValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<V1LastCurrenciesFromToGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1LastQuoteCurrenciesFromToGet
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastQuoteCurrenciesFromToGetCall(String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/last_quote/currencies/{from}/{to}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1LastQuoteCurrenciesFromToGetValidateBeforeCall(String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v1LastQuoteCurrenciesFromToGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v1LastQuoteCurrenciesFromToGet(Async)");
        }

        return v1LastQuoteCurrenciesFromToGetCall(from, to, _callback);

    }

    /**
     * Last Quote for a Currency Pair
     * Get Last Quote Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @return V1LastQuoteCurrenciesFromToGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public V1LastQuoteCurrenciesFromToGet200Response v1LastQuoteCurrenciesFromToGet(String from, String to) throws ApiException {
        ApiResponse<V1LastQuoteCurrenciesFromToGet200Response> localVarResp = v1LastQuoteCurrenciesFromToGetWithHttpInfo(from, to);
        return localVarResp.getData();
    }

    /**
     * Last Quote for a Currency Pair
     * Get Last Quote Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @return ApiResponse&lt;V1LastQuoteCurrenciesFromToGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1LastQuoteCurrenciesFromToGet200Response> v1LastQuoteCurrenciesFromToGetWithHttpInfo(String from, String to) throws ApiException {
        okhttp3.Call localVarCall = v1LastQuoteCurrenciesFromToGetValidateBeforeCall(from, to, null);
        Type localVarReturnType = new TypeToken<V1LastQuoteCurrenciesFromToGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Last Quote for a Currency Pair (asynchronously)
     * Get Last Quote Tick for a Currency Pair. 
     * @param from From Symbol of the pair (required)
     * @param to To Symbol of the pair (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Last quote tick for this currency pair </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1LastQuoteCurrenciesFromToGetAsync(String from, String to, final ApiCallback<V1LastQuoteCurrenciesFromToGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1LastQuoteCurrenciesFromToGetValidateBeforeCall(from, to, _callback);
        Type localVarReturnType = new TypeToken<V1LastQuoteCurrenciesFromToGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
