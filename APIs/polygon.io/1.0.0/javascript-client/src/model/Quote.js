/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Quote model module.
 * @module model/Quote
 * @version 1.0.0
 */
class Quote {
    /**
     * Constructs a new <code>Quote</code>.
     * @alias module:model/Quote
     */
    constructor() { 
        
        Quote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quote} obj Optional instance to populate.
     * @return {module:model/Quote} The populated <code>Quote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quote();

            if (data.hasOwnProperty('aE')) {
                obj['aE'] = ApiClient.convertToType(data['aE'], 'String');
            }
            if (data.hasOwnProperty('aP')) {
                obj['aP'] = ApiClient.convertToType(data['aP'], 'Number');
            }
            if (data.hasOwnProperty('aS')) {
                obj['aS'] = ApiClient.convertToType(data['aS'], 'Number');
            }
            if (data.hasOwnProperty('bE')) {
                obj['bE'] = ApiClient.convertToType(data['bE'], 'String');
            }
            if (data.hasOwnProperty('bP')) {
                obj['bP'] = ApiClient.convertToType(data['bP'], 'Number');
            }
            if (data.hasOwnProperty('bS')) {
                obj['bS'] = ApiClient.convertToType(data['bS'], 'Number');
            }
            if (data.hasOwnProperty('c')) {
                obj['c'] = ApiClient.convertToType(data['c'], 'Number');
            }
            if (data.hasOwnProperty('t')) {
                obj['t'] = ApiClient.convertToType(data['t'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aE'] && !(typeof data['aE'] === 'string' || data['aE'] instanceof String)) {
            throw new Error("Expected the field `aE` to be a primitive type in the JSON string but got " + data['aE']);
        }
        // ensure the json data is a string
        if (data['bE'] && !(typeof data['bE'] === 'string' || data['bE'] instanceof String)) {
            throw new Error("Expected the field `bE` to be a primitive type in the JSON string but got " + data['bE']);
        }

        return true;
    }


}



/**
 * Ask Exchange
 * @member {String} aE
 */
Quote.prototype['aE'] = undefined;

/**
 * Ask Price
 * @member {Number} aP
 */
Quote.prototype['aP'] = undefined;

/**
 * Ask Size
 * @member {Number} aS
 */
Quote.prototype['aS'] = undefined;

/**
 * Bid Exchange
 * @member {String} bE
 */
Quote.prototype['bE'] = undefined;

/**
 * Bid Price
 * @member {Number} bP
 */
Quote.prototype['bP'] = undefined;

/**
 * Bid Size
 * @member {Number} bS
 */
Quote.prototype['bS'] = undefined;

/**
 * Condition of this quote
 * @member {Number} c
 */
Quote.prototype['c'] = undefined;

/**
 * Timestamp of this trade
 * @member {Number} t
 */
Quote.prototype['t'] = undefined;






export default Quote;

