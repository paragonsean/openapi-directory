/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trade model module.
 * @module model/Trade
 * @version 1.0.0
 */
class Trade {
    /**
     * Constructs a new <code>Trade</code>.
     * @alias module:model/Trade
     */
    constructor() { 
        
        Trade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trade} obj Optional instance to populate.
     * @return {module:model/Trade} The populated <code>Trade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trade();

            if (data.hasOwnProperty('c1')) {
                obj['c1'] = ApiClient.convertToType(data['c1'], 'Number');
            }
            if (data.hasOwnProperty('c2')) {
                obj['c2'] = ApiClient.convertToType(data['c2'], 'Number');
            }
            if (data.hasOwnProperty('c3')) {
                obj['c3'] = ApiClient.convertToType(data['c3'], 'Number');
            }
            if (data.hasOwnProperty('c4')) {
                obj['c4'] = ApiClient.convertToType(data['c4'], 'Number');
            }
            if (data.hasOwnProperty('e')) {
                obj['e'] = ApiClient.convertToType(data['e'], 'String');
            }
            if (data.hasOwnProperty('p')) {
                obj['p'] = ApiClient.convertToType(data['p'], 'Number');
            }
            if (data.hasOwnProperty('s')) {
                obj['s'] = ApiClient.convertToType(data['s'], 'Number');
            }
            if (data.hasOwnProperty('t')) {
                obj['t'] = ApiClient.convertToType(data['t'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trade</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['e'] && !(typeof data['e'] === 'string' || data['e'] instanceof String)) {
            throw new Error("Expected the field `e` to be a primitive type in the JSON string but got " + data['e']);
        }

        return true;
    }


}



/**
 * Condition 1 of this trade
 * @member {Number} c1
 */
Trade.prototype['c1'] = undefined;

/**
 * Condition 2 of this trade
 * @member {Number} c2
 */
Trade.prototype['c2'] = undefined;

/**
 * Condition 3 of this trade
 * @member {Number} c3
 */
Trade.prototype['c3'] = undefined;

/**
 * Condition 4 of this trade
 * @member {Number} c4
 */
Trade.prototype['c4'] = undefined;

/**
 * The exchange this trade happened on
 * @member {String} e
 */
Trade.prototype['e'] = undefined;

/**
 * Price of this trade
 * @member {Number} p
 */
Trade.prototype['p'] = undefined;

/**
 * Size of the trade
 * @member {Number} s
 */
Trade.prototype['s'] = undefined;

/**
 * Timestamp of this trade
 * @member {Number} t
 */
Trade.prototype['t'] = undefined;






export default Trade;

