/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Company model module.
 * @module model/Company
 * @version 1.0.0
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * @alias module:model/Company
     */
    constructor() { 
        
        Company.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Company} obj Optional instance to populate.
     * @return {module:model/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('exchange')) {
                obj['exchange'] = ApiClient.convertToType(data['exchange'], 'String');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('marketcap')) {
                obj['marketcap'] = ApiClient.convertToType(data['marketcap'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sector')) {
                obj['sector'] = ApiClient.convertToType(data['sector'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['exchange'] && !(typeof data['exchange'] === 'string' || data['exchange'] instanceof String)) {
            throw new Error("Expected the field `exchange` to be a primitive type in the JSON string but got " + data['exchange']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sector'] && !(typeof data['sector'] === 'string' || data['sector'] instanceof String)) {
            throw new Error("Expected the field `sector` to be a primitive type in the JSON string but got " + data['sector']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }

        return true;
    }


}



/**
 * Country in which this country is based.
 * @member {String} country
 */
Company.prototype['country'] = undefined;

/**
 * Exchange this company is traded on.
 * @member {String} exchange
 */
Company.prototype['exchange'] = undefined;

/**
 * Industry this country operated/produces in.
 * @member {String} industry
 */
Company.prototype['industry'] = undefined;

/**
 * Market cap as of the last updated timestamp.
 * @member {Number} marketcap
 */
Company.prototype['marketcap'] = undefined;

/**
 * Name of the company.
 * @member {String} name
 */
Company.prototype['name'] = undefined;

/**
 * Sector that this company is traded in.
 * @member {String} sector
 */
Company.prototype['sector'] = undefined;

/**
 * The actual exchange symbol this company is traded under.
 * @member {String} symbol
 */
Company.prototype['symbol'] = undefined;

/**
 * Last time this company record was updated.
 * @member {Date} updated
 */
Company.prototype['updated'] = undefined;






export default Company;

