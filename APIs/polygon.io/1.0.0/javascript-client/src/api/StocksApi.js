/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Company from '../model/Company';
import Error from '../model/Error';
import V1HistoricAggSizeSymbolDateGet200Response from '../model/V1HistoricAggSizeSymbolDateGet200Response';
import V1HistoricQuotesSymbolDateGet200Response from '../model/V1HistoricQuotesSymbolDateGet200Response';
import V1HistoricTradesSymbolDateGet200Response from '../model/V1HistoricTradesSymbolDateGet200Response';
import V1LastQuoteStocksSymbolGet200Response from '../model/V1LastQuoteStocksSymbolGet200Response';
import V1LastStocksSymbolGet200Response from '../model/V1LastStocksSymbolGet200Response';

/**
* Stocks service.
* @module api/StocksApi
* @version 1.0.0
*/
export default class StocksApi {

    /**
    * Constructs a new StocksApi. 
    * @alias module:api/StocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1CompaniesGet operation.
     * @callback module:api/StocksApi~v1CompaniesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Company>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available Companies
     * Get a list of the traded companies that polygon.io streams. Company includes some details about the company which we hope to add more to soon. 
     * @param {Object} opts Optional parameters
     * @param {String} [sort] Which field to sort by. For desc place a `-` in front of the field name. eg `?sort=-marketcap`
     * @param {Number} [perpage] How many items to be on each page during pagination
     * @param {Number} [page = 1.0)] Which page of results to return
     * @param {module:api/StocksApi~v1CompaniesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Company>}
     */
    v1CompaniesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'perpage': opts['perpage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Company];
      return this.apiClient.callApi(
        '/v1/companies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1HistoricAggSizeSymbolDateGet operation.
     * @callback module:api/StocksApi~v1HistoricAggSizeSymbolDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1HistoricAggSizeSymbolDateGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historic Aggregates
     * Get historic aggregations for a symbol. 
     * @param {module:model/String} size Size of the aggregation. `second` or `minute`
     * @param {String} symbol Symbol of the company to retrieve
     * @param {Date} date Date/Day of the historic ticks to retreive
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Timestamp offset, used for pagination
     * @param {Number} [limit = 100)] Limit the size of response, max: 10000
     * @param {module:api/StocksApi~v1HistoricAggSizeSymbolDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1HistoricAggSizeSymbolDateGet200Response}
     */
    v1HistoricAggSizeSymbolDateGet(size, symbol, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling v1HistoricAggSizeSymbolDateGet");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1HistoricAggSizeSymbolDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1HistoricAggSizeSymbolDateGet");
      }

      let pathParams = {
        'size': size,
        'symbol': symbol,
        'date': date
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1HistoricAggSizeSymbolDateGet200Response;
      return this.apiClient.callApi(
        '/v1/historic/agg/{size}/{symbol}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1HistoricQuotesSymbolDateGet operation.
     * @callback module:api/StocksApi~v1HistoricQuotesSymbolDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1HistoricQuotesSymbolDateGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historic Quotes
     * Get historic quotes for a symbol. 
     * @param {String} symbol Symbol of the company to retrieve
     * @param {Date} date Date/Day of the historic ticks to retreive
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Timestamp offset, used for pagination
     * @param {Number} [limit = 100)] Limit the size of response, max: 10000
     * @param {module:api/StocksApi~v1HistoricQuotesSymbolDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1HistoricQuotesSymbolDateGet200Response}
     */
    v1HistoricQuotesSymbolDateGet(symbol, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1HistoricQuotesSymbolDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1HistoricQuotesSymbolDateGet");
      }

      let pathParams = {
        'symbol': symbol,
        'date': date
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1HistoricQuotesSymbolDateGet200Response;
      return this.apiClient.callApi(
        '/v1/historic/quotes/{symbol}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1HistoricTradesSymbolDateGet operation.
     * @callback module:api/StocksApi~v1HistoricTradesSymbolDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1HistoricTradesSymbolDateGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historic Trades
     * Get historic trades for a symbol. 
     * @param {String} symbol Symbol of the company to retrieve
     * @param {Date} date Date/Day of the historic ticks to retreive
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Timestamp offset, used for pagination
     * @param {Number} [limit = 100)] Limit the size of response, max: 10000
     * @param {module:api/StocksApi~v1HistoricTradesSymbolDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1HistoricTradesSymbolDateGet200Response}
     */
    v1HistoricTradesSymbolDateGet(symbol, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1HistoricTradesSymbolDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1HistoricTradesSymbolDateGet");
      }

      let pathParams = {
        'symbol': symbol,
        'date': date
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1HistoricTradesSymbolDateGet200Response;
      return this.apiClient.callApi(
        '/v1/historic/trades/{symbol}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1LastQuoteStocksSymbolGet operation.
     * @callback module:api/StocksApi~v1LastQuoteStocksSymbolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LastQuoteStocksSymbolGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Quote for a Symbol
     * Get the last quote tick for a given stock. 
     * @param {String} symbol Symbol of the stock to get
     * @param {module:api/StocksApi~v1LastQuoteStocksSymbolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LastQuoteStocksSymbolGet200Response}
     */
    v1LastQuoteStocksSymbolGet(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1LastQuoteStocksSymbolGet");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1LastQuoteStocksSymbolGet200Response;
      return this.apiClient.callApi(
        '/v1/last_quote/stocks/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1LastStocksSymbolGet operation.
     * @callback module:api/StocksApi~v1LastStocksSymbolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LastStocksSymbolGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Trade for a Symbol
     * Get the last trade for a given stock. 
     * @param {String} symbol Symbol of the stock to get
     * @param {module:api/StocksApi~v1LastStocksSymbolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LastStocksSymbolGet200Response}
     */
    v1LastStocksSymbolGet(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1LastStocksSymbolGet");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1LastStocksSymbolGet200Response;
      return this.apiClient.callApi(
        '/v1/last/stocks/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
