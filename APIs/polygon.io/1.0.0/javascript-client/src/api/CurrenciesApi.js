/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import V1HistoricForexFromToDateGet200Response from '../model/V1HistoricForexFromToDateGet200Response';
import V1LastCurrenciesFromToGet200Response from '../model/V1LastCurrenciesFromToGet200Response';
import V1LastQuoteCurrenciesFromToGet200Response from '../model/V1LastQuoteCurrenciesFromToGet200Response';

/**
* Currencies service.
* @module api/CurrenciesApi
* @version 1.0.0
*/
export default class CurrenciesApi {

    /**
    * Constructs a new CurrenciesApi. 
    * @alias module:api/CurrenciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1CurrenciesGet operation.
     * @callback module:api/CurrenciesApi~v1CurrenciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available Currencies
     * Get a list of the currencies that polygon.io streams. 
     * @param {module:api/CurrenciesApi~v1CurrenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    v1CurrenciesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/v1/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1HistoricForexFromToDateGet operation.
     * @callback module:api/CurrenciesApi~v1HistoricForexFromToDateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1HistoricForexFromToDateGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historic Forex Ticks
     * Get historic ticks for a currency pair. Example for **USD/JPY** the from would be **USD** and to would be **JPY**. The date formatted like **2017-6-22** 
     * @param {String} from From Symbol of the currency pair
     * @param {String} to To Symbol of the currency pair
     * @param {Date} date Date/Day of the historic ticks to retreive
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Timestamp offset, used for pagination
     * @param {Number} [limit = 100)] Limit the size of response, max: 10000
     * @param {module:api/CurrenciesApi~v1HistoricForexFromToDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1HistoricForexFromToDateGet200Response}
     */
    v1HistoricForexFromToDateGet(from, to, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v1HistoricForexFromToDateGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v1HistoricForexFromToDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1HistoricForexFromToDateGet");
      }

      let pathParams = {
        'from': from,
        'to': to,
        'date': date
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1HistoricForexFromToDateGet200Response;
      return this.apiClient.callApi(
        '/v1/historic/forex/{from}/{to}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1LastCurrenciesFromToGet operation.
     * @callback module:api/CurrenciesApi~v1LastCurrenciesFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LastCurrenciesFromToGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Trade for a Currency Pair
     * Get Last Trade Tick for a Currency Pair. 
     * @param {String} from From Symbol of the pair
     * @param {String} to To Symbol of the pair
     * @param {module:api/CurrenciesApi~v1LastCurrenciesFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LastCurrenciesFromToGet200Response}
     */
    v1LastCurrenciesFromToGet(from, to, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v1LastCurrenciesFromToGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v1LastCurrenciesFromToGet");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1LastCurrenciesFromToGet200Response;
      return this.apiClient.callApi(
        '/v1/last/currencies/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1LastQuoteCurrenciesFromToGet operation.
     * @callback module:api/CurrenciesApi~v1LastQuoteCurrenciesFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1LastQuoteCurrenciesFromToGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Quote for a Currency Pair
     * Get Last Quote Tick for a Currency Pair. 
     * @param {String} from From Symbol of the pair
     * @param {String} to To Symbol of the pair
     * @param {module:api/CurrenciesApi~v1LastQuoteCurrenciesFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1LastQuoteCurrenciesFromToGet200Response}
     */
    v1LastQuoteCurrenciesFromToGet(from, to, callback) {
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v1LastQuoteCurrenciesFromToGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v1LastQuoteCurrenciesFromToGet");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1LastQuoteCurrenciesFromToGet200Response;
      return this.apiClient.callApi(
        '/v1/last_quote/currencies/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
