/**
 * Polygon
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Aggregate from './model/Aggregate';
import Company from './model/Company';
import Error from './model/Error';
import Forex from './model/Forex';
import LastForexQuote from './model/LastForexQuote';
import LastForexTrade from './model/LastForexTrade';
import LastQuote from './model/LastQuote';
import LastTrade from './model/LastTrade';
import Quote from './model/Quote';
import Trade from './model/Trade';
import V1HistoricAggSizeSymbolDateGet200Response from './model/V1HistoricAggSizeSymbolDateGet200Response';
import V1HistoricForexFromToDateGet200Response from './model/V1HistoricForexFromToDateGet200Response';
import V1HistoricQuotesSymbolDateGet200Response from './model/V1HistoricQuotesSymbolDateGet200Response';
import V1HistoricTradesSymbolDateGet200Response from './model/V1HistoricTradesSymbolDateGet200Response';
import V1LastCurrenciesFromToGet200Response from './model/V1LastCurrenciesFromToGet200Response';
import V1LastQuoteCurrenciesFromToGet200Response from './model/V1LastQuoteCurrenciesFromToGet200Response';
import V1LastQuoteStocksSymbolGet200Response from './model/V1LastQuoteStocksSymbolGet200Response';
import V1LastStocksSymbolGet200Response from './model/V1LastStocksSymbolGet200Response';
import CurrenciesApi from './api/CurrenciesApi';
import StocksApi from './api/StocksApi';


/**
* The future of fintech..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Polygon = require('index'); // See note below*.
* var xxxSvc = new Polygon.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Polygon.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Polygon.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Polygon.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Aggregate model constructor.
     * @property {module:model/Aggregate}
     */
    Aggregate,

    /**
     * The Company model constructor.
     * @property {module:model/Company}
     */
    Company,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Forex model constructor.
     * @property {module:model/Forex}
     */
    Forex,

    /**
     * The LastForexQuote model constructor.
     * @property {module:model/LastForexQuote}
     */
    LastForexQuote,

    /**
     * The LastForexTrade model constructor.
     * @property {module:model/LastForexTrade}
     */
    LastForexTrade,

    /**
     * The LastQuote model constructor.
     * @property {module:model/LastQuote}
     */
    LastQuote,

    /**
     * The LastTrade model constructor.
     * @property {module:model/LastTrade}
     */
    LastTrade,

    /**
     * The Quote model constructor.
     * @property {module:model/Quote}
     */
    Quote,

    /**
     * The Trade model constructor.
     * @property {module:model/Trade}
     */
    Trade,

    /**
     * The V1HistoricAggSizeSymbolDateGet200Response model constructor.
     * @property {module:model/V1HistoricAggSizeSymbolDateGet200Response}
     */
    V1HistoricAggSizeSymbolDateGet200Response,

    /**
     * The V1HistoricForexFromToDateGet200Response model constructor.
     * @property {module:model/V1HistoricForexFromToDateGet200Response}
     */
    V1HistoricForexFromToDateGet200Response,

    /**
     * The V1HistoricQuotesSymbolDateGet200Response model constructor.
     * @property {module:model/V1HistoricQuotesSymbolDateGet200Response}
     */
    V1HistoricQuotesSymbolDateGet200Response,

    /**
     * The V1HistoricTradesSymbolDateGet200Response model constructor.
     * @property {module:model/V1HistoricTradesSymbolDateGet200Response}
     */
    V1HistoricTradesSymbolDateGet200Response,

    /**
     * The V1LastCurrenciesFromToGet200Response model constructor.
     * @property {module:model/V1LastCurrenciesFromToGet200Response}
     */
    V1LastCurrenciesFromToGet200Response,

    /**
     * The V1LastQuoteCurrenciesFromToGet200Response model constructor.
     * @property {module:model/V1LastQuoteCurrenciesFromToGet200Response}
     */
    V1LastQuoteCurrenciesFromToGet200Response,

    /**
     * The V1LastQuoteStocksSymbolGet200Response model constructor.
     * @property {module:model/V1LastQuoteStocksSymbolGet200Response}
     */
    V1LastQuoteStocksSymbolGet200Response,

    /**
     * The V1LastStocksSymbolGet200Response model constructor.
     * @property {module:model/V1LastStocksSymbolGet200Response}
     */
    V1LastStocksSymbolGet200Response,

    /**
    * The CurrenciesApi service constructor.
    * @property {module:api/CurrenciesApi}
    */
    CurrenciesApi,

    /**
    * The StocksApi service constructor.
    * @property {module:api/StocksApi}
    */
    StocksApi
};
