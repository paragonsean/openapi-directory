# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_cash_account5 import OBCashAccount5
from openapi_server.models.ob_external_standing_order_status1_code import OBExternalStandingOrderStatus1Code
import re
from openapi_server import util


class OBStandingOrder5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creditor_account: OBCashAccount5=None, final_payment_amount: OBActiveOrHistoricCurrencyAndAmount=None, final_payment_date_time: datetime=None, first_payment_amount: OBActiveOrHistoricCurrencyAndAmount=None, first_payment_date_time: datetime=None, frequency: str=None, last_payment_amount: OBActiveOrHistoricCurrencyAndAmount=None, last_payment_date_time: datetime=None, next_payment_amount: OBActiveOrHistoricCurrencyAndAmount=None, next_payment_date_time: datetime=None, reference: str=None, standing_order_id: str=None, standing_order_status_code: OBExternalStandingOrderStatus1Code=None):
        """OBStandingOrder5 - a model defined in OpenAPI

        :param account_id: The account_id of this OBStandingOrder5.
        :param creditor_account: The creditor_account of this OBStandingOrder5.
        :param final_payment_amount: The final_payment_amount of this OBStandingOrder5.
        :param final_payment_date_time: The final_payment_date_time of this OBStandingOrder5.
        :param first_payment_amount: The first_payment_amount of this OBStandingOrder5.
        :param first_payment_date_time: The first_payment_date_time of this OBStandingOrder5.
        :param frequency: The frequency of this OBStandingOrder5.
        :param last_payment_amount: The last_payment_amount of this OBStandingOrder5.
        :param last_payment_date_time: The last_payment_date_time of this OBStandingOrder5.
        :param next_payment_amount: The next_payment_amount of this OBStandingOrder5.
        :param next_payment_date_time: The next_payment_date_time of this OBStandingOrder5.
        :param reference: The reference of this OBStandingOrder5.
        :param standing_order_id: The standing_order_id of this OBStandingOrder5.
        :param standing_order_status_code: The standing_order_status_code of this OBStandingOrder5.
        """
        self.openapi_types = {
            'account_id': str,
            'creditor_account': OBCashAccount5,
            'final_payment_amount': OBActiveOrHistoricCurrencyAndAmount,
            'final_payment_date_time': datetime,
            'first_payment_amount': OBActiveOrHistoricCurrencyAndAmount,
            'first_payment_date_time': datetime,
            'frequency': str,
            'last_payment_amount': OBActiveOrHistoricCurrencyAndAmount,
            'last_payment_date_time': datetime,
            'next_payment_amount': OBActiveOrHistoricCurrencyAndAmount,
            'next_payment_date_time': datetime,
            'reference': str,
            'standing_order_id': str,
            'standing_order_status_code': OBExternalStandingOrderStatus1Code
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'creditor_account': 'CreditorAccount',
            'final_payment_amount': 'FinalPaymentAmount',
            'final_payment_date_time': 'FinalPaymentDateTime',
            'first_payment_amount': 'FirstPaymentAmount',
            'first_payment_date_time': 'FirstPaymentDateTime',
            'frequency': 'Frequency',
            'last_payment_amount': 'LastPaymentAmount',
            'last_payment_date_time': 'LastPaymentDateTime',
            'next_payment_amount': 'NextPaymentAmount',
            'next_payment_date_time': 'NextPaymentDateTime',
            'reference': 'Reference',
            'standing_order_id': 'StandingOrderId',
            'standing_order_status_code': 'StandingOrderStatusCode'
        }

        self._account_id = account_id
        self._creditor_account = creditor_account
        self._final_payment_amount = final_payment_amount
        self._final_payment_date_time = final_payment_date_time
        self._first_payment_amount = first_payment_amount
        self._first_payment_date_time = first_payment_date_time
        self._frequency = frequency
        self._last_payment_amount = last_payment_amount
        self._last_payment_date_time = last_payment_date_time
        self._next_payment_amount = next_payment_amount
        self._next_payment_date_time = next_payment_date_time
        self._reference = reference
        self._standing_order_id = standing_order_id
        self._standing_order_status_code = standing_order_status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBStandingOrder5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBStandingOrder5 of this OBStandingOrder5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBStandingOrder5.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBStandingOrder5.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBStandingOrder5.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBStandingOrder5.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def creditor_account(self):
        """Gets the creditor_account of this OBStandingOrder5.


        :return: The creditor_account of this OBStandingOrder5.
        :rtype: OBCashAccount5
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this OBStandingOrder5.


        :param creditor_account: The creditor_account of this OBStandingOrder5.
        :type creditor_account: OBCashAccount5
        """

        self._creditor_account = creditor_account

    @property
    def final_payment_amount(self):
        """Gets the final_payment_amount of this OBStandingOrder5.


        :return: The final_payment_amount of this OBStandingOrder5.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._final_payment_amount

    @final_payment_amount.setter
    def final_payment_amount(self, final_payment_amount):
        """Sets the final_payment_amount of this OBStandingOrder5.


        :param final_payment_amount: The final_payment_amount of this OBStandingOrder5.
        :type final_payment_amount: OBActiveOrHistoricCurrencyAndAmount
        """

        self._final_payment_amount = final_payment_amount

    @property
    def final_payment_date_time(self):
        """Gets the final_payment_date_time of this OBStandingOrder5.

        The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The final_payment_date_time of this OBStandingOrder5.
        :rtype: datetime
        """
        return self._final_payment_date_time

    @final_payment_date_time.setter
    def final_payment_date_time(self, final_payment_date_time):
        """Sets the final_payment_date_time of this OBStandingOrder5.

        The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param final_payment_date_time: The final_payment_date_time of this OBStandingOrder5.
        :type final_payment_date_time: datetime
        """

        self._final_payment_date_time = final_payment_date_time

    @property
    def first_payment_amount(self):
        """Gets the first_payment_amount of this OBStandingOrder5.


        :return: The first_payment_amount of this OBStandingOrder5.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._first_payment_amount

    @first_payment_amount.setter
    def first_payment_amount(self, first_payment_amount):
        """Sets the first_payment_amount of this OBStandingOrder5.


        :param first_payment_amount: The first_payment_amount of this OBStandingOrder5.
        :type first_payment_amount: OBActiveOrHistoricCurrencyAndAmount
        """

        self._first_payment_amount = first_payment_amount

    @property
    def first_payment_date_time(self):
        """Gets the first_payment_date_time of this OBStandingOrder5.

        The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The first_payment_date_time of this OBStandingOrder5.
        :rtype: datetime
        """
        return self._first_payment_date_time

    @first_payment_date_time.setter
    def first_payment_date_time(self, first_payment_date_time):
        """Sets the first_payment_date_time of this OBStandingOrder5.

        The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param first_payment_date_time: The first_payment_date_time of this OBStandingOrder5.
        :type first_payment_date_time: datetime
        """

        self._first_payment_date_time = first_payment_date_time

    @property
    def frequency(self):
        """Gets the frequency of this OBStandingOrder5.

        Individual Definitions:  IntrvlMnthDay - An interval specified in months(between 01, 02, 03, 04, 06, 12, 24), specifying the day within the month(01 to 31)  Full Regular Expression:  ^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$

        :return: The frequency of this OBStandingOrder5.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this OBStandingOrder5.

        Individual Definitions:  IntrvlMnthDay - An interval specified in months(between 01, 02, 03, 04, 06, 12, 24), specifying the day within the month(01 to 31)  Full Regular Expression:  ^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$

        :param frequency: The frequency of this OBStandingOrder5.
        :type frequency: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")
        if frequency is not None and not re.search(r'^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$', frequency):
            raise ValueError("Invalid value for `frequency`, must be a follow pattern or equal to `/^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$/`")

        self._frequency = frequency

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this OBStandingOrder5.


        :return: The last_payment_amount of this OBStandingOrder5.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this OBStandingOrder5.


        :param last_payment_amount: The last_payment_amount of this OBStandingOrder5.
        :type last_payment_amount: OBActiveOrHistoricCurrencyAndAmount
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date_time(self):
        """Gets the last_payment_date_time of this OBStandingOrder5.

        The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The last_payment_date_time of this OBStandingOrder5.
        :rtype: datetime
        """
        return self._last_payment_date_time

    @last_payment_date_time.setter
    def last_payment_date_time(self, last_payment_date_time):
        """Sets the last_payment_date_time of this OBStandingOrder5.

        The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param last_payment_date_time: The last_payment_date_time of this OBStandingOrder5.
        :type last_payment_date_time: datetime
        """

        self._last_payment_date_time = last_payment_date_time

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this OBStandingOrder5.


        :return: The next_payment_amount of this OBStandingOrder5.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this OBStandingOrder5.


        :param next_payment_amount: The next_payment_amount of this OBStandingOrder5.
        :type next_payment_amount: OBActiveOrHistoricCurrencyAndAmount
        """

        self._next_payment_amount = next_payment_amount

    @property
    def next_payment_date_time(self):
        """Gets the next_payment_date_time of this OBStandingOrder5.

        The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The next_payment_date_time of this OBStandingOrder5.
        :rtype: datetime
        """
        return self._next_payment_date_time

    @next_payment_date_time.setter
    def next_payment_date_time(self, next_payment_date_time):
        """Sets the next_payment_date_time of this OBStandingOrder5.

        The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param next_payment_date_time: The next_payment_date_time of this OBStandingOrder5.
        :type next_payment_date_time: datetime
        """

        self._next_payment_date_time = next_payment_date_time

    @property
    def reference(self):
        """Gets the reference of this OBStandingOrder5.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.  Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.  If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.

        :return: The reference of this OBStandingOrder5.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OBStandingOrder5.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.  Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.  If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.

        :param reference: The reference of this OBStandingOrder5.
        :type reference: str
        """
        if reference is not None and len(reference) > 35:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `35`")
        if reference is not None and len(reference) < 1:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `1`")

        self._reference = reference

    @property
    def standing_order_id(self):
        """Gets the standing_order_id of this OBStandingOrder5.

        A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.

        :return: The standing_order_id of this OBStandingOrder5.
        :rtype: str
        """
        return self._standing_order_id

    @standing_order_id.setter
    def standing_order_id(self, standing_order_id):
        """Sets the standing_order_id of this OBStandingOrder5.

        A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.

        :param standing_order_id: The standing_order_id of this OBStandingOrder5.
        :type standing_order_id: str
        """
        if standing_order_id is not None and len(standing_order_id) > 40:
            raise ValueError("Invalid value for `standing_order_id`, length must be less than or equal to `40`")
        if standing_order_id is not None and len(standing_order_id) < 1:
            raise ValueError("Invalid value for `standing_order_id`, length must be greater than or equal to `1`")

        self._standing_order_id = standing_order_id

    @property
    def standing_order_status_code(self):
        """Gets the standing_order_status_code of this OBStandingOrder5.


        :return: The standing_order_status_code of this OBStandingOrder5.
        :rtype: OBExternalStandingOrderStatus1Code
        """
        return self._standing_order_status_code

    @standing_order_status_code.setter
    def standing_order_status_code(self, standing_order_status_code):
        """Sets the standing_order_status_code of this OBStandingOrder5.


        :param standing_order_status_code: The standing_order_status_code of this OBStandingOrder5.
        :type standing_order_status_code: OBExternalStandingOrderStatus1Code
        """

        self._standing_order_status_code = standing_order_status_code
