# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxStandingOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, description: str=None, final_payment_date: datetime=None, first_payment_date: datetime=None, frequency: str=None, last_payment_date: datetime=None, next_payment_date: datetime=None, status: str=None):
        """SandboxStandingOrder - a model defined in OpenAPI

        :param amount: The amount of this SandboxStandingOrder.
        :param description: The description of this SandboxStandingOrder.
        :param final_payment_date: The final_payment_date of this SandboxStandingOrder.
        :param first_payment_date: The first_payment_date of this SandboxStandingOrder.
        :param frequency: The frequency of this SandboxStandingOrder.
        :param last_payment_date: The last_payment_date of this SandboxStandingOrder.
        :param next_payment_date: The next_payment_date of this SandboxStandingOrder.
        :param status: The status of this SandboxStandingOrder.
        """
        self.openapi_types = {
            'amount': float,
            'description': str,
            'final_payment_date': datetime,
            'first_payment_date': datetime,
            'frequency': str,
            'last_payment_date': datetime,
            'next_payment_date': datetime,
            'status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'final_payment_date': 'finalPaymentDate',
            'first_payment_date': 'firstPaymentDate',
            'frequency': 'frequency',
            'last_payment_date': 'lastPaymentDate',
            'next_payment_date': 'nextPaymentDate',
            'status': 'status'
        }

        self._amount = amount
        self._description = description
        self._final_payment_date = final_payment_date
        self._first_payment_date = first_payment_date
        self._frequency = frequency
        self._last_payment_date = last_payment_date
        self._next_payment_date = next_payment_date
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxStandingOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxStandingOrder of this SandboxStandingOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SandboxStandingOrder.

        Standing order amount

        :return: The amount of this SandboxStandingOrder.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SandboxStandingOrder.

        Standing order amount

        :param amount: The amount of this SandboxStandingOrder.
        :type amount: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this SandboxStandingOrder.

        Standing order short description

        :return: The description of this SandboxStandingOrder.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SandboxStandingOrder.

        Standing order short description

        :param description: The description of this SandboxStandingOrder.
        :type description: str
        """

        self._description = description

    @property
    def final_payment_date(self):
        """Gets the final_payment_date of this SandboxStandingOrder.

        Standing order final collection date

        :return: The final_payment_date of this SandboxStandingOrder.
        :rtype: datetime
        """
        return self._final_payment_date

    @final_payment_date.setter
    def final_payment_date(self, final_payment_date):
        """Sets the final_payment_date of this SandboxStandingOrder.

        Standing order final collection date

        :param final_payment_date: The final_payment_date of this SandboxStandingOrder.
        :type final_payment_date: datetime
        """

        self._final_payment_date = final_payment_date

    @property
    def first_payment_date(self):
        """Gets the first_payment_date of this SandboxStandingOrder.

        Standing order first collection date

        :return: The first_payment_date of this SandboxStandingOrder.
        :rtype: datetime
        """
        return self._first_payment_date

    @first_payment_date.setter
    def first_payment_date(self, first_payment_date):
        """Sets the first_payment_date of this SandboxStandingOrder.

        Standing order first collection date

        :param first_payment_date: The first_payment_date of this SandboxStandingOrder.
        :type first_payment_date: datetime
        """

        self._first_payment_date = first_payment_date

    @property
    def frequency(self):
        """Gets the frequency of this SandboxStandingOrder.

        Standing order frequency

        :return: The frequency of this SandboxStandingOrder.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SandboxStandingOrder.

        Standing order frequency

        :param frequency: The frequency of this SandboxStandingOrder.
        :type frequency: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")
        if frequency is not None and len(frequency) > 35:
            raise ValueError("Invalid value for `frequency`, length must be less than or equal to `35`")
        if frequency is not None and len(frequency) < 1:
            raise ValueError("Invalid value for `frequency`, length must be greater than or equal to `1`")

        self._frequency = frequency

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this SandboxStandingOrder.

        Standing order last executed payment date

        :return: The last_payment_date of this SandboxStandingOrder.
        :rtype: datetime
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this SandboxStandingOrder.

        Standing order last executed payment date

        :param last_payment_date: The last_payment_date of this SandboxStandingOrder.
        :type last_payment_date: datetime
        """

        self._last_payment_date = last_payment_date

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this SandboxStandingOrder.

        Standing order next collection date

        :return: The next_payment_date of this SandboxStandingOrder.
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this SandboxStandingOrder.

        Standing order next collection date

        :param next_payment_date: The next_payment_date of this SandboxStandingOrder.
        :type next_payment_date: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def status(self):
        """Gets the status of this SandboxStandingOrder.

        Standing order status (Active, Inactive)

        :return: The status of this SandboxStandingOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SandboxStandingOrder.

        Standing order status (Active, Inactive)

        :param status: The status of this SandboxStandingOrder.
        :type status: str
        """

        self._status = status
