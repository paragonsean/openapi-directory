# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sandbox_bank_account import SandboxBankAccount
from openapi_server.models.sandbox_card import SandboxCard
from openapi_server.models.sandbox_retry_cache_entry import SandboxRetryCacheEntry
from openapi_server import util


class SandboxUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[SandboxBankAccount]=None, cards: List[SandboxCard]=None, retry_cache_entries: List[SandboxRetryCacheEntry]=None, user_id: str=None):
        """SandboxUser - a model defined in OpenAPI

        :param accounts: The accounts of this SandboxUser.
        :param cards: The cards of this SandboxUser.
        :param retry_cache_entries: The retry_cache_entries of this SandboxUser.
        :param user_id: The user_id of this SandboxUser.
        """
        self.openapi_types = {
            'accounts': List[SandboxBankAccount],
            'cards': List[SandboxCard],
            'retry_cache_entries': List[SandboxRetryCacheEntry],
            'user_id': str
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'cards': 'cards',
            'retry_cache_entries': 'retryCacheEntries',
            'user_id': 'userId'
        }

        self._accounts = accounts
        self._cards = cards
        self._retry_cache_entries = retry_cache_entries
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxUser of this SandboxUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this SandboxUser.

        List of accounts

        :return: The accounts of this SandboxUser.
        :rtype: List[SandboxBankAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SandboxUser.

        List of accounts

        :param accounts: The accounts of this SandboxUser.
        :type accounts: List[SandboxBankAccount]
        """

        self._accounts = accounts

    @property
    def cards(self):
        """Gets the cards of this SandboxUser.

        List of cards

        :return: The cards of this SandboxUser.
        :rtype: List[SandboxCard]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this SandboxUser.

        List of cards

        :param cards: The cards of this SandboxUser.
        :type cards: List[SandboxCard]
        """

        self._cards = cards

    @property
    def retry_cache_entries(self):
        """Gets the retry_cache_entries of this SandboxUser.

        Retry cache entries

        :return: The retry_cache_entries of this SandboxUser.
        :rtype: List[SandboxRetryCacheEntry]
        """
        return self._retry_cache_entries

    @retry_cache_entries.setter
    def retry_cache_entries(self, retry_cache_entries):
        """Sets the retry_cache_entries of this SandboxUser.

        Retry cache entries

        :param retry_cache_entries: The retry_cache_entries of this SandboxUser.
        :type retry_cache_entries: List[SandboxRetryCacheEntry]
        """

        self._retry_cache_entries = retry_cache_entries

    @property
    def user_id(self):
        """Gets the user_id of this SandboxUser.

        Connected user id

        :return: The user_id of this SandboxUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SandboxUser.

        Connected user id

        :param user_id: The user_id of this SandboxUser.
        :type user_id: str
        """

        self._user_id = user_id
