# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OBCashAccount5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identification: str=None, name: str=None, scheme_name: str=None, secondary_identification: str=None):
        """OBCashAccount5 - a model defined in OpenAPI

        :param identification: The identification of this OBCashAccount5.
        :param name: The name of this OBCashAccount5.
        :param scheme_name: The scheme_name of this OBCashAccount5.
        :param secondary_identification: The secondary_identification of this OBCashAccount5.
        """
        self.openapi_types = {
            'identification': str,
            'name': str,
            'scheme_name': str,
            'secondary_identification': str
        }

        self.attribute_map = {
            'identification': 'Identification',
            'name': 'Name',
            'scheme_name': 'SchemeName',
            'secondary_identification': 'SecondaryIdentification'
        }

        self._identification = identification
        self._name = name
        self._scheme_name = scheme_name
        self._secondary_identification = secondary_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBCashAccount5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBCashAccount5 of this OBCashAccount5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identification(self):
        """Gets the identification of this OBCashAccount5.

        Identification assigned by an institution to identify an account. This identification is known by the account owner.

        :return: The identification of this OBCashAccount5.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this OBCashAccount5.

        Identification assigned by an institution to identify an account. This identification is known by the account owner.

        :param identification: The identification of this OBCashAccount5.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 256:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `256`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this OBCashAccount5.

        The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.  Note, the account name is not the product name or the nickname of the account.

        :return: The name of this OBCashAccount5.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OBCashAccount5.

        The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.  Note, the account name is not the product name or the nickname of the account.

        :param name: The name of this OBCashAccount5.
        :type name: str
        """
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def scheme_name(self):
        """Gets the scheme_name of this OBCashAccount5.

        Name of the identification scheme, in a coded form as published in an external list.

        :return: The scheme_name of this OBCashAccount5.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this OBCashAccount5.

        Name of the identification scheme, in a coded form as published in an external list.

        :param scheme_name: The scheme_name of this OBCashAccount5.
        :type scheme_name: str
        """
        if scheme_name is None:
            raise ValueError("Invalid value for `scheme_name`, must not be `None`")

        self._scheme_name = scheme_name

    @property
    def secondary_identification(self):
        """Gets the secondary_identification of this OBCashAccount5.

        This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number(in addition to a sort code and account number combination).

        :return: The secondary_identification of this OBCashAccount5.
        :rtype: str
        """
        return self._secondary_identification

    @secondary_identification.setter
    def secondary_identification(self, secondary_identification):
        """Sets the secondary_identification of this OBCashAccount5.

        This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number(in addition to a sort code and account number combination).

        :param secondary_identification: The secondary_identification of this OBCashAccount5.
        :type secondary_identification: str
        """
        if secondary_identification is not None and len(secondary_identification) > 34:
            raise ValueError("Invalid value for `secondary_identification`, length must be less than or equal to `34`")
        if secondary_identification is not None and len(secondary_identification) < 1:
            raise ValueError("Invalid value for `secondary_identification`, length must be greater than or equal to `1`")

        self._secondary_identification = secondary_identification
