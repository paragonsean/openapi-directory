# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_balance_type1_code import OBBalanceType1Code
from openapi_server.models.ob_credit_debit_code import OBCreditDebitCode
from openapi_server import util


class OBTransactionCashBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: OBActiveOrHistoricCurrencyAndAmount=None, credit_debit_indicator: OBCreditDebitCode=None, type: OBBalanceType1Code=None):
        """OBTransactionCashBalance - a model defined in OpenAPI

        :param amount: The amount of this OBTransactionCashBalance.
        :param credit_debit_indicator: The credit_debit_indicator of this OBTransactionCashBalance.
        :param type: The type of this OBTransactionCashBalance.
        """
        self.openapi_types = {
            'amount': OBActiveOrHistoricCurrencyAndAmount,
            'credit_debit_indicator': OBCreditDebitCode,
            'type': OBBalanceType1Code
        }

        self.attribute_map = {
            'amount': 'Amount',
            'credit_debit_indicator': 'CreditDebitIndicator',
            'type': 'Type'
        }

        self._amount = amount
        self._credit_debit_indicator = credit_debit_indicator
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBTransactionCashBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBTransactionCashBalance of this OBTransactionCashBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OBTransactionCashBalance.


        :return: The amount of this OBTransactionCashBalance.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OBTransactionCashBalance.


        :param amount: The amount of this OBTransactionCashBalance.
        :type amount: OBActiveOrHistoricCurrencyAndAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this OBTransactionCashBalance.


        :return: The credit_debit_indicator of this OBTransactionCashBalance.
        :rtype: OBCreditDebitCode
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this OBTransactionCashBalance.


        :param credit_debit_indicator: The credit_debit_indicator of this OBTransactionCashBalance.
        :type credit_debit_indicator: OBCreditDebitCode
        """
        if credit_debit_indicator is None:
            raise ValueError("Invalid value for `credit_debit_indicator`, must not be `None`")

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def type(self):
        """Gets the type of this OBTransactionCashBalance.


        :return: The type of this OBTransactionCashBalance.
        :rtype: OBBalanceType1Code
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OBTransactionCashBalance.


        :param type: The type of this OBTransactionCashBalance.
        :type type: OBBalanceType1Code
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
