# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_cash_account6 import OBCashAccount6
from openapi_server.models.ob_credit_debit_code import OBCreditDebitCode
from openapi_server.models.ob_entry_status1_code import OBEntryStatus1Code
from openapi_server.models.ob_transaction_cash_balance import OBTransactionCashBalance
from openapi_server.models.proprietary_bank_transaction_code_structure1 import ProprietaryBankTransactionCodeStructure1
from openapi_server import util


class OBTransaction6(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: OBActiveOrHistoricCurrencyAndAmount=None, balance: OBTransactionCashBalance=None, booking_date_time: datetime=None, credit_debit_indicator: OBCreditDebitCode=None, creditor_account: OBCashAccount6=None, debtor_account: OBCashAccount6=None, proprietary_bank_transaction_code: ProprietaryBankTransactionCodeStructure1=None, status: OBEntryStatus1Code=None, transaction_information: str=None, transaction_reference: str=None, value_date_time: datetime=None):
        """OBTransaction6 - a model defined in OpenAPI

        :param account_id: The account_id of this OBTransaction6.
        :param amount: The amount of this OBTransaction6.
        :param balance: The balance of this OBTransaction6.
        :param booking_date_time: The booking_date_time of this OBTransaction6.
        :param credit_debit_indicator: The credit_debit_indicator of this OBTransaction6.
        :param creditor_account: The creditor_account of this OBTransaction6.
        :param debtor_account: The debtor_account of this OBTransaction6.
        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this OBTransaction6.
        :param status: The status of this OBTransaction6.
        :param transaction_information: The transaction_information of this OBTransaction6.
        :param transaction_reference: The transaction_reference of this OBTransaction6.
        :param value_date_time: The value_date_time of this OBTransaction6.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': OBActiveOrHistoricCurrencyAndAmount,
            'balance': OBTransactionCashBalance,
            'booking_date_time': datetime,
            'credit_debit_indicator': OBCreditDebitCode,
            'creditor_account': OBCashAccount6,
            'debtor_account': OBCashAccount6,
            'proprietary_bank_transaction_code': ProprietaryBankTransactionCodeStructure1,
            'status': OBEntryStatus1Code,
            'transaction_information': str,
            'transaction_reference': str,
            'value_date_time': datetime
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'amount': 'Amount',
            'balance': 'Balance',
            'booking_date_time': 'BookingDateTime',
            'credit_debit_indicator': 'CreditDebitIndicator',
            'creditor_account': 'CreditorAccount',
            'debtor_account': 'DebtorAccount',
            'proprietary_bank_transaction_code': 'ProprietaryBankTransactionCode',
            'status': 'Status',
            'transaction_information': 'TransactionInformation',
            'transaction_reference': 'TransactionReference',
            'value_date_time': 'ValueDateTime'
        }

        self._account_id = account_id
        self._amount = amount
        self._balance = balance
        self._booking_date_time = booking_date_time
        self._credit_debit_indicator = credit_debit_indicator
        self._creditor_account = creditor_account
        self._debtor_account = debtor_account
        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code
        self._status = status
        self._transaction_information = transaction_information
        self._transaction_reference = transaction_reference
        self._value_date_time = value_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBTransaction6':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBTransaction6 of this OBTransaction6.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBTransaction6.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBTransaction6.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBTransaction6.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBTransaction6.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this OBTransaction6.


        :return: The amount of this OBTransaction6.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OBTransaction6.


        :param amount: The amount of this OBTransaction6.
        :type amount: OBActiveOrHistoricCurrencyAndAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def balance(self):
        """Gets the balance of this OBTransaction6.


        :return: The balance of this OBTransaction6.
        :rtype: OBTransactionCashBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this OBTransaction6.


        :param balance: The balance of this OBTransaction6.
        :type balance: OBTransactionCashBalance
        """

        self._balance = balance

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this OBTransaction6.

        Date and time when a transaction entry is posted to an account on the account servicer's books.  Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The booking_date_time of this OBTransaction6.
        :rtype: datetime
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this OBTransaction6.

        Date and time when a transaction entry is posted to an account on the account servicer's books.  Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param booking_date_time: The booking_date_time of this OBTransaction6.
        :type booking_date_time: datetime
        """
        if booking_date_time is None:
            raise ValueError("Invalid value for `booking_date_time`, must not be `None`")

        self._booking_date_time = booking_date_time

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this OBTransaction6.


        :return: The credit_debit_indicator of this OBTransaction6.
        :rtype: OBCreditDebitCode
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this OBTransaction6.


        :param credit_debit_indicator: The credit_debit_indicator of this OBTransaction6.
        :type credit_debit_indicator: OBCreditDebitCode
        """
        if credit_debit_indicator is None:
            raise ValueError("Invalid value for `credit_debit_indicator`, must not be `None`")

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def creditor_account(self):
        """Gets the creditor_account of this OBTransaction6.


        :return: The creditor_account of this OBTransaction6.
        :rtype: OBCashAccount6
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this OBTransaction6.


        :param creditor_account: The creditor_account of this OBTransaction6.
        :type creditor_account: OBCashAccount6
        """

        self._creditor_account = creditor_account

    @property
    def debtor_account(self):
        """Gets the debtor_account of this OBTransaction6.


        :return: The debtor_account of this OBTransaction6.
        :rtype: OBCashAccount6
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this OBTransaction6.


        :param debtor_account: The debtor_account of this OBTransaction6.
        :type debtor_account: OBCashAccount6
        """

        self._debtor_account = debtor_account

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this OBTransaction6.


        :return: The proprietary_bank_transaction_code of this OBTransaction6.
        :rtype: ProprietaryBankTransactionCodeStructure1
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this OBTransaction6.


        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this OBTransaction6.
        :type proprietary_bank_transaction_code: ProprietaryBankTransactionCodeStructure1
        """

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def status(self):
        """Gets the status of this OBTransaction6.


        :return: The status of this OBTransaction6.
        :rtype: OBEntryStatus1Code
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OBTransaction6.


        :param status: The status of this OBTransaction6.
        :type status: OBEntryStatus1Code
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def transaction_information(self):
        """Gets the transaction_information of this OBTransaction6.

        Further details of the transaction.  This is the transaction narrative, which is unstructured text.

        :return: The transaction_information of this OBTransaction6.
        :rtype: str
        """
        return self._transaction_information

    @transaction_information.setter
    def transaction_information(self, transaction_information):
        """Sets the transaction_information of this OBTransaction6.

        Further details of the transaction.  This is the transaction narrative, which is unstructured text.

        :param transaction_information: The transaction_information of this OBTransaction6.
        :type transaction_information: str
        """
        if transaction_information is not None and len(transaction_information) > 500:
            raise ValueError("Invalid value for `transaction_information`, length must be less than or equal to `500`")
        if transaction_information is not None and len(transaction_information) < 1:
            raise ValueError("Invalid value for `transaction_information`, length must be greater than or equal to `1`")

        self._transaction_information = transaction_information

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this OBTransaction6.

        Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.

        :return: The transaction_reference of this OBTransaction6.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this OBTransaction6.

        Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.

        :param transaction_reference: The transaction_reference of this OBTransaction6.
        :type transaction_reference: str
        """
        if transaction_reference is not None and len(transaction_reference) > 210:
            raise ValueError("Invalid value for `transaction_reference`, length must be less than or equal to `210`")
        if transaction_reference is not None and len(transaction_reference) < 1:
            raise ValueError("Invalid value for `transaction_reference`, length must be greater than or equal to `1`")

        self._transaction_reference = transaction_reference

    @property
    def value_date_time(self):
        """Gets the value_date_time of this OBTransaction6.

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.  Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.  For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used.In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The value_date_time of this OBTransaction6.
        :rtype: datetime
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this OBTransaction6.

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.  Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.  For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used.In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param value_date_time: The value_date_time of this OBTransaction6.
        :type value_date_time: datetime
        """

        self._value_date_time = value_date_time
