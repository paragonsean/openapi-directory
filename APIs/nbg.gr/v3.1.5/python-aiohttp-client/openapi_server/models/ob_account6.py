# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_branch_and_financial_institution_identification5 import OBBranchAndFinancialInstitutionIdentification5
from openapi_server.models.ob_cash_account5 import OBCashAccount5
from openapi_server.models.ob_external_account_sub_type1_code import OBExternalAccountSubType1Code
from openapi_server.models.ob_external_account_type1_code import OBExternalAccountType1Code
import re
from openapi_server import util


class OBAccount6(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: List[OBCashAccount5]=None, account_id: str=None, account_sub_type: OBExternalAccountSubType1Code=None, account_type: OBExternalAccountType1Code=None, currency: str=None, description: str=None, nickname: str=None, opening_date: datetime=None, servicer: OBBranchAndFinancialInstitutionIdentification5=None):
        """OBAccount6 - a model defined in OpenAPI

        :param account: The account of this OBAccount6.
        :param account_id: The account_id of this OBAccount6.
        :param account_sub_type: The account_sub_type of this OBAccount6.
        :param account_type: The account_type of this OBAccount6.
        :param currency: The currency of this OBAccount6.
        :param description: The description of this OBAccount6.
        :param nickname: The nickname of this OBAccount6.
        :param opening_date: The opening_date of this OBAccount6.
        :param servicer: The servicer of this OBAccount6.
        """
        self.openapi_types = {
            'account': List[OBCashAccount5],
            'account_id': str,
            'account_sub_type': OBExternalAccountSubType1Code,
            'account_type': OBExternalAccountType1Code,
            'currency': str,
            'description': str,
            'nickname': str,
            'opening_date': datetime,
            'servicer': OBBranchAndFinancialInstitutionIdentification5
        }

        self.attribute_map = {
            'account': 'Account',
            'account_id': 'AccountId',
            'account_sub_type': 'AccountSubType',
            'account_type': 'AccountType',
            'currency': 'Currency',
            'description': 'Description',
            'nickname': 'Nickname',
            'opening_date': 'OpeningDate',
            'servicer': 'Servicer'
        }

        self._account = account
        self._account_id = account_id
        self._account_sub_type = account_sub_type
        self._account_type = account_type
        self._currency = currency
        self._description = description
        self._nickname = nickname
        self._opening_date = opening_date
        self._servicer = servicer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBAccount6':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBAccount6 of this OBAccount6.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this OBAccount6.

        Provides the details to identify an account.

        :return: The account of this OBAccount6.
        :rtype: List[OBCashAccount5]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OBAccount6.

        Provides the details to identify an account.

        :param account: The account of this OBAccount6.
        :type account: List[OBCashAccount5]
        """

        self._account = account

    @property
    def account_id(self):
        """Gets the account_id of this OBAccount6.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBAccount6.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBAccount6.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBAccount6.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def account_sub_type(self):
        """Gets the account_sub_type of this OBAccount6.


        :return: The account_sub_type of this OBAccount6.
        :rtype: OBExternalAccountSubType1Code
        """
        return self._account_sub_type

    @account_sub_type.setter
    def account_sub_type(self, account_sub_type):
        """Sets the account_sub_type of this OBAccount6.


        :param account_sub_type: The account_sub_type of this OBAccount6.
        :type account_sub_type: OBExternalAccountSubType1Code
        """
        if account_sub_type is None:
            raise ValueError("Invalid value for `account_sub_type`, must not be `None`")

        self._account_sub_type = account_sub_type

    @property
    def account_type(self):
        """Gets the account_type of this OBAccount6.


        :return: The account_type of this OBAccount6.
        :rtype: OBExternalAccountType1Code
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this OBAccount6.


        :param account_type: The account_type of this OBAccount6.
        :type account_type: OBExternalAccountType1Code
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")

        self._account_type = account_type

    @property
    def currency(self):
        """Gets the currency of this OBAccount6.

        Identification of the currency in which the account is held.  Usage: Currency should only be used in case one and the same account number covers several currencies and the initiating party needs to identify which currency needs to be used for settlement on the account.

        :return: The currency of this OBAccount6.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OBAccount6.

        Identification of the currency in which the account is held.  Usage: Currency should only be used in case one and the same account number covers several currencies and the initiating party needs to identify which currency needs to be used for settlement on the account.

        :param currency: The currency of this OBAccount6.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this OBAccount6.

        Specifies the description of the account type.

        :return: The description of this OBAccount6.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OBAccount6.

        Specifies the description of the account type.

        :param description: The description of this OBAccount6.
        :type description: str
        """
        if description is not None and len(description) > 35:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `35`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def nickname(self):
        """Gets the nickname of this OBAccount6.

        The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.

        :return: The nickname of this OBAccount6.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this OBAccount6.

        The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.

        :param nickname: The nickname of this OBAccount6.
        :type nickname: str
        """
        if nickname is not None and len(nickname) > 70:
            raise ValueError("Invalid value for `nickname`, length must be less than or equal to `70`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def opening_date(self):
        """Gets the opening_date of this OBAccount6.

        Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :return: The opening_date of this OBAccount6.
        :rtype: datetime
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this OBAccount6.

        Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :param opening_date: The opening_date of this OBAccount6.
        :type opening_date: datetime
        """

        self._opening_date = opening_date

    @property
    def servicer(self):
        """Gets the servicer of this OBAccount6.


        :return: The servicer of this OBAccount6.
        :rtype: OBBranchAndFinancialInstitutionIdentification5
        """
        return self._servicer

    @servicer.setter
    def servicer(self, servicer):
        """Sets the servicer of this OBAccount6.


        :param servicer: The servicer of this OBAccount6.
        :type servicer: OBBranchAndFinancialInstitutionIdentification5
        """

        self._servicer = servicer
