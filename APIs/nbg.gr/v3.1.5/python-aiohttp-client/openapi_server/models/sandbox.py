# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sandbox_user import SandboxUser
import re
from openapi_server import util


class Sandbox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sandbox_id: str=None, users: List[SandboxUser]=None):
        """Sandbox - a model defined in OpenAPI

        :param sandbox_id: The sandbox_id of this Sandbox.
        :param users: The users of this Sandbox.
        """
        self.openapi_types = {
            'sandbox_id': str,
            'users': List[SandboxUser]
        }

        self.attribute_map = {
            'sandbox_id': 'sandboxId',
            'users': 'users'
        }

        self._sandbox_id = sandbox_id
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sandbox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sandbox of this Sandbox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sandbox_id(self):
        """Gets the sandbox_id of this Sandbox.

        Sandbox id

        :return: The sandbox_id of this Sandbox.
        :rtype: str
        """
        return self._sandbox_id

    @sandbox_id.setter
    def sandbox_id(self, sandbox_id):
        """Sets the sandbox_id of this Sandbox.

        Sandbox id

        :param sandbox_id: The sandbox_id of this Sandbox.
        :type sandbox_id: str
        """
        if sandbox_id is None:
            raise ValueError("Invalid value for `sandbox_id`, must not be `None`")
        if sandbox_id is not None and not re.search(r'^[a-zA-Z0-9_-]+$', sandbox_id):
            raise ValueError("Invalid value for `sandbox_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._sandbox_id = sandbox_id

    @property
    def users(self):
        """Gets the users of this Sandbox.

        List of users

        :return: The users of this Sandbox.
        :rtype: List[SandboxUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Sandbox.

        List of users

        :param users: The users of this Sandbox.
        :type users: List[SandboxUser]
        """

        self._users = users
