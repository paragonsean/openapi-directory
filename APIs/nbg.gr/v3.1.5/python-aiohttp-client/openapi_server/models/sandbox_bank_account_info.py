# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SandboxBankAccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sub_type: str=None, account_type: str=None, alias: str=None, available_balance: float=None, currency: str=None, description: str=None, iban: str=None, ledger_balance: float=None, opening_date: datetime=None, overdraft_limit: float=None):
        """SandboxBankAccountInfo - a model defined in OpenAPI

        :param account_sub_type: The account_sub_type of this SandboxBankAccountInfo.
        :param account_type: The account_type of this SandboxBankAccountInfo.
        :param alias: The alias of this SandboxBankAccountInfo.
        :param available_balance: The available_balance of this SandboxBankAccountInfo.
        :param currency: The currency of this SandboxBankAccountInfo.
        :param description: The description of this SandboxBankAccountInfo.
        :param iban: The iban of this SandboxBankAccountInfo.
        :param ledger_balance: The ledger_balance of this SandboxBankAccountInfo.
        :param opening_date: The opening_date of this SandboxBankAccountInfo.
        :param overdraft_limit: The overdraft_limit of this SandboxBankAccountInfo.
        """
        self.openapi_types = {
            'account_sub_type': str,
            'account_type': str,
            'alias': str,
            'available_balance': float,
            'currency': str,
            'description': str,
            'iban': str,
            'ledger_balance': float,
            'opening_date': datetime,
            'overdraft_limit': float
        }

        self.attribute_map = {
            'account_sub_type': 'accountSubType',
            'account_type': 'accountType',
            'alias': 'alias',
            'available_balance': 'availableBalance',
            'currency': 'currency',
            'description': 'description',
            'iban': 'iban',
            'ledger_balance': 'ledgerBalance',
            'opening_date': 'openingDate',
            'overdraft_limit': 'overdraftLimit'
        }

        self._account_sub_type = account_sub_type
        self._account_type = account_type
        self._alias = alias
        self._available_balance = available_balance
        self._currency = currency
        self._description = description
        self._iban = iban
        self._ledger_balance = ledger_balance
        self._opening_date = opening_date
        self._overdraft_limit = overdraft_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxBankAccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxBankAccountInfo of this SandboxBankAccountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sub_type(self):
        """Gets the account_sub_type of this SandboxBankAccountInfo.

        Account's sub-type (ChargeCard, CreditCard, CurrentAccount ...)

        :return: The account_sub_type of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._account_sub_type

    @account_sub_type.setter
    def account_sub_type(self, account_sub_type):
        """Sets the account_sub_type of this SandboxBankAccountInfo.

        Account's sub-type (ChargeCard, CreditCard, CurrentAccount ...)

        :param account_sub_type: The account_sub_type of this SandboxBankAccountInfo.
        :type account_sub_type: str
        """
        if account_sub_type is None:
            raise ValueError("Invalid value for `account_sub_type`, must not be `None`")

        self._account_sub_type = account_sub_type

    @property
    def account_type(self):
        """Gets the account_type of this SandboxBankAccountInfo.

        Account's type (Business, Personal)

        :return: The account_type of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this SandboxBankAccountInfo.

        Account's type (Business, Personal)

        :param account_type: The account_type of this SandboxBankAccountInfo.
        :type account_type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")

        self._account_type = account_type

    @property
    def alias(self):
        """Gets the alias of this SandboxBankAccountInfo.

        Account's alias

        :return: The alias of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this SandboxBankAccountInfo.

        Account's alias

        :param alias: The alias of this SandboxBankAccountInfo.
        :type alias: str
        """
        if alias is not None and len(alias) > 70:
            raise ValueError("Invalid value for `alias`, length must be less than or equal to `70`")
        if alias is not None and len(alias) < 1:
            raise ValueError("Invalid value for `alias`, length must be greater than or equal to `1`")

        self._alias = alias

    @property
    def available_balance(self):
        """Gets the available_balance of this SandboxBankAccountInfo.

        Account's available balance

        :return: The available_balance of this SandboxBankAccountInfo.
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this SandboxBankAccountInfo.

        Account's available balance

        :param available_balance: The available_balance of this SandboxBankAccountInfo.
        :type available_balance: float
        """

        self._available_balance = available_balance

    @property
    def currency(self):
        """Gets the currency of this SandboxBankAccountInfo.

        Currency (EUR, USD ...)

        :return: The currency of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SandboxBankAccountInfo.

        Currency (EUR, USD ...)

        :param currency: The currency of this SandboxBankAccountInfo.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this SandboxBankAccountInfo.

        Account's description

        :return: The description of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SandboxBankAccountInfo.

        Account's description

        :param description: The description of this SandboxBankAccountInfo.
        :type description: str
        """
        if description is not None and len(description) > 35:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `35`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def iban(self):
        """Gets the iban of this SandboxBankAccountInfo.

        Account's IBAN

        :return: The iban of this SandboxBankAccountInfo.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this SandboxBankAccountInfo.

        Account's IBAN

        :param iban: The iban of this SandboxBankAccountInfo.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")

        self._iban = iban

    @property
    def ledger_balance(self):
        """Gets the ledger_balance of this SandboxBankAccountInfo.

        Account's ledger balance

        :return: The ledger_balance of this SandboxBankAccountInfo.
        :rtype: float
        """
        return self._ledger_balance

    @ledger_balance.setter
    def ledger_balance(self, ledger_balance):
        """Sets the ledger_balance of this SandboxBankAccountInfo.

        Account's ledger balance

        :param ledger_balance: The ledger_balance of this SandboxBankAccountInfo.
        :type ledger_balance: float
        """

        self._ledger_balance = ledger_balance

    @property
    def opening_date(self):
        """Gets the opening_date of this SandboxBankAccountInfo.

        Account's opening date

        :return: The opening_date of this SandboxBankAccountInfo.
        :rtype: datetime
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this SandboxBankAccountInfo.

        Account's opening date

        :param opening_date: The opening_date of this SandboxBankAccountInfo.
        :type opening_date: datetime
        """

        self._opening_date = opening_date

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this SandboxBankAccountInfo.

        Account's overdraft limit

        :return: The overdraft_limit of this SandboxBankAccountInfo.
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this SandboxBankAccountInfo.

        Account's overdraft limit

        :param overdraft_limit: The overdraft_limit of this SandboxBankAccountInfo.
        :type overdraft_limit: float
        """

        self._overdraft_limit = overdraft_limit
