# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, month: int=None, number: str=None, year: int=None):
        """SandboxStatement - a model defined in OpenAPI

        :param month: The month of this SandboxStatement.
        :param number: The number of this SandboxStatement.
        :param year: The year of this SandboxStatement.
        """
        self.openapi_types = {
            'month': int,
            'number': str,
            'year': int
        }

        self.attribute_map = {
            'month': 'month',
            'number': 'number',
            'year': 'year'
        }

        self._month = month
        self._number = number
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxStatement of this SandboxStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def month(self):
        """Gets the month of this SandboxStatement.

        Statement month

        :return: The month of this SandboxStatement.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this SandboxStatement.

        Statement month

        :param month: The month of this SandboxStatement.
        :type month: int
        """

        self._month = month

    @property
    def number(self):
        """Gets the number of this SandboxStatement.

        Statement number

        :return: The number of this SandboxStatement.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SandboxStatement.

        Statement number

        :param number: The number of this SandboxStatement.
        :type number: str
        """

        self._number = number

    @property
    def year(self):
        """Gets the year of this SandboxStatement.

        Statement year

        :return: The year of this SandboxStatement.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SandboxStatement.

        Statement year

        :param year: The year of this SandboxStatement.
        :type year: int
        """

        self._year = year
