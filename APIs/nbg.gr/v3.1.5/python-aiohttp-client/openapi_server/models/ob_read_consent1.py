# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_read_data1 import OBReadData1
from openapi_server import util


class OBReadConsent1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: OBReadData1=None, risk: object=None):
        """OBReadConsent1 - a model defined in OpenAPI

        :param data: The data of this OBReadConsent1.
        :param risk: The risk of this OBReadConsent1.
        """
        self.openapi_types = {
            'data': OBReadData1,
            'risk': object
        }

        self.attribute_map = {
            'data': 'Data',
            'risk': 'Risk'
        }

        self._data = data
        self._risk = risk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBReadConsent1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBReadConsent1 of this OBReadConsent1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this OBReadConsent1.


        :return: The data of this OBReadConsent1.
        :rtype: OBReadData1
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OBReadConsent1.


        :param data: The data of this OBReadConsent1.
        :type data: OBReadData1
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def risk(self):
        """Gets the risk of this OBReadConsent1.

        The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.

        :return: The risk of this OBReadConsent1.
        :rtype: object
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this OBReadConsent1.

        The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.

        :param risk: The risk of this OBReadConsent1.
        :type risk: object
        """
        if risk is None:
            raise ValueError("Invalid value for `risk`, must not be `None`")

        self._risk = risk
