# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_beneficiary_type1_code import OBBeneficiaryType1Code
from openapi_server.models.ob_cash_account5 import OBCashAccount5
from openapi_server import util


class OBBeneficiary5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, beneficiary_type: OBBeneficiaryType1Code=None, creditor_account: OBCashAccount5=None):
        """OBBeneficiary5 - a model defined in OpenAPI

        :param account_id: The account_id of this OBBeneficiary5.
        :param beneficiary_type: The beneficiary_type of this OBBeneficiary5.
        :param creditor_account: The creditor_account of this OBBeneficiary5.
        """
        self.openapi_types = {
            'account_id': str,
            'beneficiary_type': OBBeneficiaryType1Code,
            'creditor_account': OBCashAccount5
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'beneficiary_type': 'BeneficiaryType',
            'creditor_account': 'CreditorAccount'
        }

        self._account_id = account_id
        self._beneficiary_type = beneficiary_type
        self._creditor_account = creditor_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBBeneficiary5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBBeneficiary5 of this OBBeneficiary5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBBeneficiary5.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBBeneficiary5.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBBeneficiary5.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBBeneficiary5.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def beneficiary_type(self):
        """Gets the beneficiary_type of this OBBeneficiary5.


        :return: The beneficiary_type of this OBBeneficiary5.
        :rtype: OBBeneficiaryType1Code
        """
        return self._beneficiary_type

    @beneficiary_type.setter
    def beneficiary_type(self, beneficiary_type):
        """Sets the beneficiary_type of this OBBeneficiary5.


        :param beneficiary_type: The beneficiary_type of this OBBeneficiary5.
        :type beneficiary_type: OBBeneficiaryType1Code
        """

        self._beneficiary_type = beneficiary_type

    @property
    def creditor_account(self):
        """Gets the creditor_account of this OBBeneficiary5.


        :return: The creditor_account of this OBBeneficiary5.
        :rtype: OBCashAccount5
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this OBBeneficiary5.


        :param creditor_account: The creditor_account of this OBBeneficiary5.
        :type creditor_account: OBCashAccount5
        """

        self._creditor_account = creditor_account
