# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sandbox_card_info import SandboxCardInfo
from openapi_server.models.sandbox_party import SandboxParty
from openapi_server.models.sandbox_statement import SandboxStatement
from openapi_server.models.sandbox_transaction import SandboxTransaction
from openapi_server import util


class SandboxCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: SandboxCardInfo=None, party: SandboxParty=None, statements: List[SandboxStatement]=None, transactions: List[SandboxTransaction]=None):
        """SandboxCard - a model defined in OpenAPI

        :param info: The info of this SandboxCard.
        :param party: The party of this SandboxCard.
        :param statements: The statements of this SandboxCard.
        :param transactions: The transactions of this SandboxCard.
        """
        self.openapi_types = {
            'info': SandboxCardInfo,
            'party': SandboxParty,
            'statements': List[SandboxStatement],
            'transactions': List[SandboxTransaction]
        }

        self.attribute_map = {
            'info': 'info',
            'party': 'party',
            'statements': 'statements',
            'transactions': 'transactions'
        }

        self._info = info
        self._party = party
        self._statements = statements
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxCard of this SandboxCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this SandboxCard.


        :return: The info of this SandboxCard.
        :rtype: SandboxCardInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SandboxCard.


        :param info: The info of this SandboxCard.
        :type info: SandboxCardInfo
        """

        self._info = info

    @property
    def party(self):
        """Gets the party of this SandboxCard.


        :return: The party of this SandboxCard.
        :rtype: SandboxParty
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this SandboxCard.


        :param party: The party of this SandboxCard.
        :type party: SandboxParty
        """

        self._party = party

    @property
    def statements(self):
        """Gets the statements of this SandboxCard.

        Card statements

        :return: The statements of this SandboxCard.
        :rtype: List[SandboxStatement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this SandboxCard.

        Card statements

        :param statements: The statements of this SandboxCard.
        :type statements: List[SandboxStatement]
        """

        self._statements = statements

    @property
    def transactions(self):
        """Gets the transactions of this SandboxCard.

        Card transactions

        :return: The transactions of this SandboxCard.
        :rtype: List[SandboxTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SandboxCard.

        Card transactions

        :param transactions: The transactions of this SandboxCard.
        :type transactions: List[SandboxTransaction]
        """

        self._transactions = transactions
