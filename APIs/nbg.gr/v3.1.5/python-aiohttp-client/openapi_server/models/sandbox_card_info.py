# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxCardInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_balance: float=None, credit_limit: float=None, description: str=None, expiration: str=None, holder_name: str=None, ledger_balance: float=None, number: str=None, sub_type: str=None, type: str=None):
        """SandboxCardInfo - a model defined in OpenAPI

        :param available_balance: The available_balance of this SandboxCardInfo.
        :param credit_limit: The credit_limit of this SandboxCardInfo.
        :param description: The description of this SandboxCardInfo.
        :param expiration: The expiration of this SandboxCardInfo.
        :param holder_name: The holder_name of this SandboxCardInfo.
        :param ledger_balance: The ledger_balance of this SandboxCardInfo.
        :param number: The number of this SandboxCardInfo.
        :param sub_type: The sub_type of this SandboxCardInfo.
        :param type: The type of this SandboxCardInfo.
        """
        self.openapi_types = {
            'available_balance': float,
            'credit_limit': float,
            'description': str,
            'expiration': str,
            'holder_name': str,
            'ledger_balance': float,
            'number': str,
            'sub_type': str,
            'type': str
        }

        self.attribute_map = {
            'available_balance': 'availableBalance',
            'credit_limit': 'creditLimit',
            'description': 'description',
            'expiration': 'expiration',
            'holder_name': 'holderName',
            'ledger_balance': 'ledgerBalance',
            'number': 'number',
            'sub_type': 'subType',
            'type': 'type'
        }

        self._available_balance = available_balance
        self._credit_limit = credit_limit
        self._description = description
        self._expiration = expiration
        self._holder_name = holder_name
        self._ledger_balance = ledger_balance
        self._number = number
        self._sub_type = sub_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxCardInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxCardInfo of this SandboxCardInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_balance(self):
        """Gets the available_balance of this SandboxCardInfo.

        Available balance

        :return: The available_balance of this SandboxCardInfo.
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this SandboxCardInfo.

        Available balance

        :param available_balance: The available_balance of this SandboxCardInfo.
        :type available_balance: float
        """

        self._available_balance = available_balance

    @property
    def credit_limit(self):
        """Gets the credit_limit of this SandboxCardInfo.

        Credit limit ( applicable to credit cards )

        :return: The credit_limit of this SandboxCardInfo.
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this SandboxCardInfo.

        Credit limit ( applicable to credit cards )

        :param credit_limit: The credit_limit of this SandboxCardInfo.
        :type credit_limit: float
        """

        self._credit_limit = credit_limit

    @property
    def description(self):
        """Gets the description of this SandboxCardInfo.

        Description

        :return: The description of this SandboxCardInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SandboxCardInfo.

        Description

        :param description: The description of this SandboxCardInfo.
        :type description: str
        """

        self._description = description

    @property
    def expiration(self):
        """Gets the expiration of this SandboxCardInfo.

        Expiration date (05/2022)

        :return: The expiration of this SandboxCardInfo.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this SandboxCardInfo.

        Expiration date (05/2022)

        :param expiration: The expiration of this SandboxCardInfo.
        :type expiration: str
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")
        if expiration is not None and len(expiration) > 7:
            raise ValueError("Invalid value for `expiration`, length must be less than or equal to `7`")
        if expiration is not None and len(expiration) < 1:
            raise ValueError("Invalid value for `expiration`, length must be greater than or equal to `1`")

        self._expiration = expiration

    @property
    def holder_name(self):
        """Gets the holder_name of this SandboxCardInfo.

        Holder name

        :return: The holder_name of this SandboxCardInfo.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this SandboxCardInfo.

        Holder name

        :param holder_name: The holder_name of this SandboxCardInfo.
        :type holder_name: str
        """
        if holder_name is None:
            raise ValueError("Invalid value for `holder_name`, must not be `None`")

        self._holder_name = holder_name

    @property
    def ledger_balance(self):
        """Gets the ledger_balance of this SandboxCardInfo.

        Ledger balance

        :return: The ledger_balance of this SandboxCardInfo.
        :rtype: float
        """
        return self._ledger_balance

    @ledger_balance.setter
    def ledger_balance(self, ledger_balance):
        """Sets the ledger_balance of this SandboxCardInfo.

        Ledger balance

        :param ledger_balance: The ledger_balance of this SandboxCardInfo.
        :type ledger_balance: float
        """

        self._ledger_balance = ledger_balance

    @property
    def number(self):
        """Gets the number of this SandboxCardInfo.

        Card number

        :return: The number of this SandboxCardInfo.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SandboxCardInfo.

        Card number

        :param number: The number of this SandboxCardInfo.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 16:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `16`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")

        self._number = number

    @property
    def sub_type(self):
        """Gets the sub_type of this SandboxCardInfo.

        Sub type

        :return: The sub_type of this SandboxCardInfo.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this SandboxCardInfo.

        Sub type

        :param sub_type: The sub_type of this SandboxCardInfo.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this SandboxCardInfo.

        Type

        :return: The type of this SandboxCardInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SandboxCardInfo.

        Type

        :param type: The type of this SandboxCardInfo.
        :type type: str
        """

        self._type = type
