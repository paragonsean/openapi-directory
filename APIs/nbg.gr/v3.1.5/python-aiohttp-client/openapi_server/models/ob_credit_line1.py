# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_external_limit_type1_code import OBExternalLimitType1Code
from openapi_server import util


class OBCreditLine1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: OBActiveOrHistoricCurrencyAndAmount=None, included: bool=None, type: OBExternalLimitType1Code=None):
        """OBCreditLine1 - a model defined in OpenAPI

        :param amount: The amount of this OBCreditLine1.
        :param included: The included of this OBCreditLine1.
        :param type: The type of this OBCreditLine1.
        """
        self.openapi_types = {
            'amount': OBActiveOrHistoricCurrencyAndAmount,
            'included': bool,
            'type': OBExternalLimitType1Code
        }

        self.attribute_map = {
            'amount': 'Amount',
            'included': 'Included',
            'type': 'Type'
        }

        self._amount = amount
        self._included = included
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBCreditLine1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBCreditLine1 of this OBCreditLine1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OBCreditLine1.


        :return: The amount of this OBCreditLine1.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OBCreditLine1.


        :param amount: The amount of this OBCreditLine1.
        :type amount: OBActiveOrHistoricCurrencyAndAmount
        """

        self._amount = amount

    @property
    def included(self):
        """Gets the included of this OBCreditLine1.

        Indicates whether or not the credit line is included in the balance of the account.  Usage: If not present, credit line is not included in the balance amount of the account.

        :return: The included of this OBCreditLine1.
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this OBCreditLine1.

        Indicates whether or not the credit line is included in the balance of the account.  Usage: If not present, credit line is not included in the balance amount of the account.

        :param included: The included of this OBCreditLine1.
        :type included: bool
        """
        if included is None:
            raise ValueError("Invalid value for `included`, must not be `None`")

        self._included = included

    @property
    def type(self):
        """Gets the type of this OBCreditLine1.


        :return: The type of this OBCreditLine1.
        :rtype: OBExternalLimitType1Code
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OBCreditLine1.


        :param type: The type of this OBCreditLine1.
        :type type: OBExternalLimitType1Code
        """

        self._type = type
