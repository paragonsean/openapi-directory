# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server import util


class OBError1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: ErrorCode=None, message: str=None, path: str=None):
        """OBError1 - a model defined in OpenAPI

        :param error_code: The error_code of this OBError1.
        :param message: The message of this OBError1.
        :param path: The path of this OBError1.
        """
        self.openapi_types = {
            'error_code': ErrorCode,
            'message': str,
            'path': str
        }

        self.attribute_map = {
            'error_code': 'ErrorCode',
            'message': 'Message',
            'path': 'Path'
        }

        self._error_code = error_code
        self._message = message
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBError1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBError1 of this OBError1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this OBError1.


        :return: The error_code of this OBError1.
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this OBError1.


        :param error_code: The error_code of this OBError1.
        :type error_code: ErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this OBError1.

        A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'OBIE doesn't standardise this field

        :return: The message of this OBError1.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OBError1.

        A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'OBIE doesn't standardise this field

        :param message: The message of this OBError1.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) > 500:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `500`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def path(self):
        """Gets the path of this OBError1.

        Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency

        :return: The path of this OBError1.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this OBError1.

        Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency

        :param path: The path of this OBError1.
        :type path: str
        """
        if path is not None and len(path) > 500:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `500`")
        if path is not None and len(path) < 1:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")

        self._path = path
