# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_balance_type1_code import OBBalanceType1Code
from openapi_server.models.ob_credit_debit_code import OBCreditDebitCode
from openapi_server.models.ob_credit_line1 import OBCreditLine1
from openapi_server import util


class OBCashBalance1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: OBActiveOrHistoricCurrencyAndAmount=None, credit_debit_indicator: OBCreditDebitCode=None, credit_line: List[OBCreditLine1]=None, date_time: datetime=None, type: OBBalanceType1Code=None):
        """OBCashBalance1 - a model defined in OpenAPI

        :param account_id: The account_id of this OBCashBalance1.
        :param amount: The amount of this OBCashBalance1.
        :param credit_debit_indicator: The credit_debit_indicator of this OBCashBalance1.
        :param credit_line: The credit_line of this OBCashBalance1.
        :param date_time: The date_time of this OBCashBalance1.
        :param type: The type of this OBCashBalance1.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': OBActiveOrHistoricCurrencyAndAmount,
            'credit_debit_indicator': OBCreditDebitCode,
            'credit_line': List[OBCreditLine1],
            'date_time': datetime,
            'type': OBBalanceType1Code
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'amount': 'Amount',
            'credit_debit_indicator': 'CreditDebitIndicator',
            'credit_line': 'CreditLine',
            'date_time': 'DateTime',
            'type': 'Type'
        }

        self._account_id = account_id
        self._amount = amount
        self._credit_debit_indicator = credit_debit_indicator
        self._credit_line = credit_line
        self._date_time = date_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBCashBalance1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBCashBalance1 of this OBCashBalance1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBCashBalance1.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBCashBalance1.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBCashBalance1.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBCashBalance1.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this OBCashBalance1.


        :return: The amount of this OBCashBalance1.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OBCashBalance1.


        :param amount: The amount of this OBCashBalance1.
        :type amount: OBActiveOrHistoricCurrencyAndAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this OBCashBalance1.


        :return: The credit_debit_indicator of this OBCashBalance1.
        :rtype: OBCreditDebitCode
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this OBCashBalance1.


        :param credit_debit_indicator: The credit_debit_indicator of this OBCashBalance1.
        :type credit_debit_indicator: OBCreditDebitCode
        """
        if credit_debit_indicator is None:
            raise ValueError("Invalid value for `credit_debit_indicator`, must not be `None`")

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def credit_line(self):
        """Gets the credit_line of this OBCashBalance1.

        Set of elements used to provide details on the credit line.

        :return: The credit_line of this OBCashBalance1.
        :rtype: List[OBCreditLine1]
        """
        return self._credit_line

    @credit_line.setter
    def credit_line(self, credit_line):
        """Sets the credit_line of this OBCashBalance1.

        Set of elements used to provide details on the credit line.

        :param credit_line: The credit_line of this OBCashBalance1.
        :type credit_line: List[OBCreditLine1]
        """

        self._credit_line = credit_line

    @property
    def date_time(self):
        """Gets the date_time of this OBCashBalance1.

        Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :return: The date_time of this OBCashBalance1.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this OBCashBalance1.

        Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :param date_time: The date_time of this OBCashBalance1.
        :type date_time: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")

        self._date_time = date_time

    @property
    def type(self):
        """Gets the type of this OBCashBalance1.


        :return: The type of this OBCashBalance1.
        :rtype: OBBalanceType1Code
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OBCashBalance1.


        :param type: The type of this OBCashBalance1.
        :type type: OBBalanceType1Code
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
