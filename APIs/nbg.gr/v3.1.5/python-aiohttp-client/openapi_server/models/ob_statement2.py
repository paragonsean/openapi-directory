# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_external_statement_type1_code import OBExternalStatementType1Code
from openapi_server import util


class OBStatement2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creation_date_time: datetime=None, end_date_time: datetime=None, start_date_time: datetime=None, statement_id: str=None, statement_reference: str=None, type: OBExternalStatementType1Code=None):
        """OBStatement2 - a model defined in OpenAPI

        :param account_id: The account_id of this OBStatement2.
        :param creation_date_time: The creation_date_time of this OBStatement2.
        :param end_date_time: The end_date_time of this OBStatement2.
        :param start_date_time: The start_date_time of this OBStatement2.
        :param statement_id: The statement_id of this OBStatement2.
        :param statement_reference: The statement_reference of this OBStatement2.
        :param type: The type of this OBStatement2.
        """
        self.openapi_types = {
            'account_id': str,
            'creation_date_time': datetime,
            'end_date_time': datetime,
            'start_date_time': datetime,
            'statement_id': str,
            'statement_reference': str,
            'type': OBExternalStatementType1Code
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'creation_date_time': 'CreationDateTime',
            'end_date_time': 'EndDateTime',
            'start_date_time': 'StartDateTime',
            'statement_id': 'StatementId',
            'statement_reference': 'StatementReference',
            'type': 'Type'
        }

        self._account_id = account_id
        self._creation_date_time = creation_date_time
        self._end_date_time = end_date_time
        self._start_date_time = start_date_time
        self._statement_id = statement_id
        self._statement_reference = statement_reference
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBStatement2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBStatement2 of this OBStatement2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBStatement2.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBStatement2.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBStatement2.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBStatement2.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The creation_date_time of this OBStatement2.
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param creation_date_time: The creation_date_time of this OBStatement2.
        :type creation_date_time: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")

        self._creation_date_time = creation_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The end_date_time of this OBStatement2.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param end_date_time: The end_date_time of this OBStatement2.
        :type end_date_time: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")

        self._end_date_time = end_date_time

    @property
    def start_date_time(self):
        """Gets the start_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The start_date_time of this OBStatement2.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this OBStatement2.

        Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param start_date_time: The start_date_time of this OBStatement2.
        :type start_date_time: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time

    @property
    def statement_id(self):
        """Gets the statement_id of this OBStatement2.

        Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.

        :return: The statement_id of this OBStatement2.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this OBStatement2.

        Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.

        :param statement_id: The statement_id of this OBStatement2.
        :type statement_id: str
        """
        if statement_id is not None and len(statement_id) > 40:
            raise ValueError("Invalid value for `statement_id`, length must be less than or equal to `40`")
        if statement_id is not None and len(statement_id) < 1:
            raise ValueError("Invalid value for `statement_id`, length must be greater than or equal to `1`")

        self._statement_id = statement_id

    @property
    def statement_reference(self):
        """Gets the statement_reference of this OBStatement2.

        Unique reference for the statement. This reference may be optionally populated if available.

        :return: The statement_reference of this OBStatement2.
        :rtype: str
        """
        return self._statement_reference

    @statement_reference.setter
    def statement_reference(self, statement_reference):
        """Sets the statement_reference of this OBStatement2.

        Unique reference for the statement. This reference may be optionally populated if available.

        :param statement_reference: The statement_reference of this OBStatement2.
        :type statement_reference: str
        """
        if statement_reference is not None and len(statement_reference) > 35:
            raise ValueError("Invalid value for `statement_reference`, length must be less than or equal to `35`")
        if statement_reference is not None and len(statement_reference) < 1:
            raise ValueError("Invalid value for `statement_reference`, length must be greater than or equal to `1`")

        self._statement_reference = statement_reference

    @property
    def type(self):
        """Gets the type of this OBStatement2.


        :return: The type of this OBStatement2.
        :rtype: OBExternalStatementType1Code
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OBStatement2.


        :param type: The type of this OBStatement2.
        :type type: OBExternalStatementType1Code
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
