# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.meta import Meta
from openapi_server.models.ob_read_data_balance1 import OBReadDataBalance1
from openapi_server import util


class OBReadBalance1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: OBReadDataBalance1=None, links: Links=None, meta: Meta=None):
        """OBReadBalance1 - a model defined in OpenAPI

        :param data: The data of this OBReadBalance1.
        :param links: The links of this OBReadBalance1.
        :param meta: The meta of this OBReadBalance1.
        """
        self.openapi_types = {
            'data': OBReadDataBalance1,
            'links': Links,
            'meta': Meta
        }

        self.attribute_map = {
            'data': 'Data',
            'links': 'Links',
            'meta': 'Meta'
        }

        self._data = data
        self._links = links
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBReadBalance1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBReadBalance1 of this OBReadBalance1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this OBReadBalance1.


        :return: The data of this OBReadBalance1.
        :rtype: OBReadDataBalance1
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OBReadBalance1.


        :param data: The data of this OBReadBalance1.
        :type data: OBReadDataBalance1
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def links(self):
        """Gets the links of this OBReadBalance1.


        :return: The links of this OBReadBalance1.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OBReadBalance1.


        :param links: The links of this OBReadBalance1.
        :type links: Links
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this OBReadBalance1.


        :return: The meta of this OBReadBalance1.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this OBReadBalance1.


        :param meta: The meta of this OBReadBalance1.
        :type meta: Meta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
