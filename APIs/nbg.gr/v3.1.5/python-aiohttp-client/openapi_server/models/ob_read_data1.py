# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_external_permissions1_code import OBExternalPermissions1Code
from openapi_server import util


class OBReadData1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date_time: datetime=None, permissions: List[OBExternalPermissions1Code]=None, transaction_from_date_time: datetime=None, transaction_to_date_time: datetime=None):
        """OBReadData1 - a model defined in OpenAPI

        :param expiration_date_time: The expiration_date_time of this OBReadData1.
        :param permissions: The permissions of this OBReadData1.
        :param transaction_from_date_time: The transaction_from_date_time of this OBReadData1.
        :param transaction_to_date_time: The transaction_to_date_time of this OBReadData1.
        """
        self.openapi_types = {
            'expiration_date_time': datetime,
            'permissions': List[OBExternalPermissions1Code],
            'transaction_from_date_time': datetime,
            'transaction_to_date_time': datetime
        }

        self.attribute_map = {
            'expiration_date_time': 'ExpirationDateTime',
            'permissions': 'Permissions',
            'transaction_from_date_time': 'TransactionFromDateTime',
            'transaction_to_date_time': 'TransactionToDateTime'
        }

        self._expiration_date_time = expiration_date_time
        self._permissions = permissions
        self._transaction_from_date_time = transaction_from_date_time
        self._transaction_to_date_time = transaction_to_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBReadData1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBReadData1 of this OBReadData1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date_time(self):
        """Gets the expiration_date_time of this OBReadData1.

        Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :return: The expiration_date_time of this OBReadData1.
        :rtype: datetime
        """
        return self._expiration_date_time

    @expiration_date_time.setter
    def expiration_date_time(self, expiration_date_time):
        """Sets the expiration_date_time of this OBReadData1.

        Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :param expiration_date_time: The expiration_date_time of this OBReadData1.
        :type expiration_date_time: datetime
        """

        self._expiration_date_time = expiration_date_time

    @property
    def permissions(self):
        """Gets the permissions of this OBReadData1.

        Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.

        :return: The permissions of this OBReadData1.
        :rtype: List[OBExternalPermissions1Code]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OBReadData1.

        Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.

        :param permissions: The permissions of this OBReadData1.
        :type permissions: List[OBExternalPermissions1Code]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def transaction_from_date_time(self):
        """Gets the transaction_from_date_time of this OBReadData1.

        Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :return: The transaction_from_date_time of this OBReadData1.
        :rtype: datetime
        """
        return self._transaction_from_date_time

    @transaction_from_date_time.setter
    def transaction_from_date_time(self, transaction_from_date_time):
        """Sets the transaction_from_date_time of this OBReadData1.

        Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :param transaction_from_date_time: The transaction_from_date_time of this OBReadData1.
        :type transaction_from_date_time: datetime
        """

        self._transaction_from_date_time = transaction_from_date_time

    @property
    def transaction_to_date_time(self):
        """Gets the transaction_to_date_time of this OBReadData1.

        Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :return: The transaction_to_date_time of this OBReadData1.
        :rtype: datetime
        """
        return self._transaction_to_date_time

    @transaction_to_date_time.setter
    def transaction_to_date_time(self, transaction_to_date_time):
        """Sets the transaction_to_date_time of this OBReadData1.

        Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00

        :param transaction_to_date_time: The transaction_to_date_time of this OBReadData1.
        :type transaction_to_date_time: datetime
        """

        self._transaction_to_date_time = transaction_to_date_time
