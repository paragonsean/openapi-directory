# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_active_or_historic_currency_and_amount import OBActiveOrHistoricCurrencyAndAmount
from openapi_server.models.ob_cash_account5 import OBCashAccount5
from openapi_server.models.ob_external_schedule_type1_code import OBExternalScheduleType1Code
from openapi_server import util


class OBScheduledPayment3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creditor_account: OBCashAccount5=None, debtor_reference: str=None, instructed_amount: OBActiveOrHistoricCurrencyAndAmount=None, reference: str=None, scheduled_payment_date_time: datetime=None, scheduled_payment_id: str=None, scheduled_type: OBExternalScheduleType1Code=None):
        """OBScheduledPayment3 - a model defined in OpenAPI

        :param account_id: The account_id of this OBScheduledPayment3.
        :param creditor_account: The creditor_account of this OBScheduledPayment3.
        :param debtor_reference: The debtor_reference of this OBScheduledPayment3.
        :param instructed_amount: The instructed_amount of this OBScheduledPayment3.
        :param reference: The reference of this OBScheduledPayment3.
        :param scheduled_payment_date_time: The scheduled_payment_date_time of this OBScheduledPayment3.
        :param scheduled_payment_id: The scheduled_payment_id of this OBScheduledPayment3.
        :param scheduled_type: The scheduled_type of this OBScheduledPayment3.
        """
        self.openapi_types = {
            'account_id': str,
            'creditor_account': OBCashAccount5,
            'debtor_reference': str,
            'instructed_amount': OBActiveOrHistoricCurrencyAndAmount,
            'reference': str,
            'scheduled_payment_date_time': datetime,
            'scheduled_payment_id': str,
            'scheduled_type': OBExternalScheduleType1Code
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'creditor_account': 'CreditorAccount',
            'debtor_reference': 'DebtorReference',
            'instructed_amount': 'InstructedAmount',
            'reference': 'Reference',
            'scheduled_payment_date_time': 'ScheduledPaymentDateTime',
            'scheduled_payment_id': 'ScheduledPaymentId',
            'scheduled_type': 'ScheduledType'
        }

        self._account_id = account_id
        self._creditor_account = creditor_account
        self._debtor_reference = debtor_reference
        self._instructed_amount = instructed_amount
        self._reference = reference
        self._scheduled_payment_date_time = scheduled_payment_date_time
        self._scheduled_payment_id = scheduled_payment_id
        self._scheduled_type = scheduled_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBScheduledPayment3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBScheduledPayment3 of this OBScheduledPayment3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this OBScheduledPayment3.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :return: The account_id of this OBScheduledPayment3.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OBScheduledPayment3.

        A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.

        :param account_id: The account_id of this OBScheduledPayment3.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 40:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def creditor_account(self):
        """Gets the creditor_account of this OBScheduledPayment3.


        :return: The creditor_account of this OBScheduledPayment3.
        :rtype: OBCashAccount5
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this OBScheduledPayment3.


        :param creditor_account: The creditor_account of this OBScheduledPayment3.
        :type creditor_account: OBCashAccount5
        """

        self._creditor_account = creditor_account

    @property
    def debtor_reference(self):
        """Gets the debtor_reference of this OBScheduledPayment3.

        A reference value provided by the PSU to the PISP while setting up the scheduled payment.

        :return: The debtor_reference of this OBScheduledPayment3.
        :rtype: str
        """
        return self._debtor_reference

    @debtor_reference.setter
    def debtor_reference(self, debtor_reference):
        """Sets the debtor_reference of this OBScheduledPayment3.

        A reference value provided by the PSU to the PISP while setting up the scheduled payment.

        :param debtor_reference: The debtor_reference of this OBScheduledPayment3.
        :type debtor_reference: str
        """
        if debtor_reference is not None and len(debtor_reference) > 35:
            raise ValueError("Invalid value for `debtor_reference`, length must be less than or equal to `35`")
        if debtor_reference is not None and len(debtor_reference) < 1:
            raise ValueError("Invalid value for `debtor_reference`, length must be greater than or equal to `1`")

        self._debtor_reference = debtor_reference

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this OBScheduledPayment3.


        :return: The instructed_amount of this OBScheduledPayment3.
        :rtype: OBActiveOrHistoricCurrencyAndAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this OBScheduledPayment3.


        :param instructed_amount: The instructed_amount of this OBScheduledPayment3.
        :type instructed_amount: OBActiveOrHistoricCurrencyAndAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def reference(self):
        """Gets the reference of this OBScheduledPayment3.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.  Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.  If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.

        :return: The reference of this OBScheduledPayment3.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OBScheduledPayment3.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.  Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.  If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.

        :param reference: The reference of this OBScheduledPayment3.
        :type reference: str
        """
        if reference is not None and len(reference) > 35:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `35`")
        if reference is not None and len(reference) < 1:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `1`")

        self._reference = reference

    @property
    def scheduled_payment_date_time(self):
        """Gets the scheduled_payment_date_time of this OBScheduledPayment3.

        The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :return: The scheduled_payment_date_time of this OBScheduledPayment3.
        :rtype: datetime
        """
        return self._scheduled_payment_date_time

    @scheduled_payment_date_time.setter
    def scheduled_payment_date_time(self, scheduled_payment_date_time):
        """Sets the scheduled_payment_date_time of this OBScheduledPayment3.

        The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone.An example is below:  2017-04-05T10:43:07+00:00

        :param scheduled_payment_date_time: The scheduled_payment_date_time of this OBScheduledPayment3.
        :type scheduled_payment_date_time: datetime
        """
        if scheduled_payment_date_time is None:
            raise ValueError("Invalid value for `scheduled_payment_date_time`, must not be `None`")

        self._scheduled_payment_date_time = scheduled_payment_date_time

    @property
    def scheduled_payment_id(self):
        """Gets the scheduled_payment_id of this OBScheduledPayment3.

        A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.

        :return: The scheduled_payment_id of this OBScheduledPayment3.
        :rtype: str
        """
        return self._scheduled_payment_id

    @scheduled_payment_id.setter
    def scheduled_payment_id(self, scheduled_payment_id):
        """Sets the scheduled_payment_id of this OBScheduledPayment3.

        A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.

        :param scheduled_payment_id: The scheduled_payment_id of this OBScheduledPayment3.
        :type scheduled_payment_id: str
        """
        if scheduled_payment_id is not None and len(scheduled_payment_id) > 40:
            raise ValueError("Invalid value for `scheduled_payment_id`, length must be less than or equal to `40`")
        if scheduled_payment_id is not None and len(scheduled_payment_id) < 1:
            raise ValueError("Invalid value for `scheduled_payment_id`, length must be greater than or equal to `1`")

        self._scheduled_payment_id = scheduled_payment_id

    @property
    def scheduled_type(self):
        """Gets the scheduled_type of this OBScheduledPayment3.


        :return: The scheduled_type of this OBScheduledPayment3.
        :rtype: OBExternalScheduleType1Code
        """
        return self._scheduled_type

    @scheduled_type.setter
    def scheduled_type(self, scheduled_type):
        """Sets the scheduled_type of this OBScheduledPayment3.


        :param scheduled_type: The scheduled_type of this OBScheduledPayment3.
        :type scheduled_type: OBExternalScheduleType1Code
        """
        if scheduled_type is None:
            raise ValueError("Invalid value for `scheduled_type`, must not be `None`")

        self._scheduled_type = scheduled_type
