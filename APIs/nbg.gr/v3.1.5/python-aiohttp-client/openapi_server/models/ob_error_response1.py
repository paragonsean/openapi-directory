# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ob_error1 import OBError1
from openapi_server import util


class OBErrorResponse1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, errors: List[OBError1]=None, id: str=None, message: str=None):
        """OBErrorResponse1 - a model defined in OpenAPI

        :param code: The code of this OBErrorResponse1.
        :param errors: The errors of this OBErrorResponse1.
        :param id: The id of this OBErrorResponse1.
        :param message: The message of this OBErrorResponse1.
        """
        self.openapi_types = {
            'code': str,
            'errors': List[OBError1],
            'id': str,
            'message': str
        }

        self.attribute_map = {
            'code': 'Code',
            'errors': 'Errors',
            'id': 'Id',
            'message': 'Message'
        }

        self._code = code
        self._errors = errors
        self._id = id
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBErrorResponse1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBErrorResponse1 of this OBErrorResponse1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this OBErrorResponse1.

        High level textual error code, to help categorize the errors.

        :return: The code of this OBErrorResponse1.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OBErrorResponse1.

        High level textual error code, to help categorize the errors.

        :param code: The code of this OBErrorResponse1.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 40:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `40`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def errors(self):
        """Gets the errors of this OBErrorResponse1.

        Gets or Sets Errors

        :return: The errors of this OBErrorResponse1.
        :rtype: List[OBError1]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this OBErrorResponse1.

        Gets or Sets Errors

        :param errors: The errors of this OBErrorResponse1.
        :type errors: List[OBError1]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this OBErrorResponse1.

        A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.

        :return: The id of this OBErrorResponse1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OBErrorResponse1.

        A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.

        :param id: The id of this OBErrorResponse1.
        :type id: str
        """
        if id is not None and len(id) > 40:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `40`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this OBErrorResponse1.

        Brief Error message, e.g., 'There is something wrong with the request parameters provided'

        :return: The message of this OBErrorResponse1.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OBErrorResponse1.

        Brief Error message, e.g., 'There is something wrong with the request parameters provided'

        :param message: The message of this OBErrorResponse1.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) > 500:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `500`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message
