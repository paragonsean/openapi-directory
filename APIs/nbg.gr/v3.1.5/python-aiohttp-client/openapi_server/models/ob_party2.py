# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OBParty2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, party_id: str=None):
        """OBParty2 - a model defined in OpenAPI

        :param name: The name of this OBParty2.
        :param party_id: The party_id of this OBParty2.
        """
        self.openapi_types = {
            'name': str,
            'party_id': str
        }

        self.attribute_map = {
            'name': 'Name',
            'party_id': 'PartyId'
        }

        self._name = name
        self._party_id = party_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBParty2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBParty2 of this OBParty2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OBParty2.

        Name by which a party is known and which is usually used to identify that party.

        :return: The name of this OBParty2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OBParty2.

        Name by which a party is known and which is usually used to identify that party.

        :param name: The name of this OBParty2.
        :type name: str
        """
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def party_id(self):
        """Gets the party_id of this OBParty2.

        A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.

        :return: The party_id of this OBParty2.
        :rtype: str
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this OBParty2.

        A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.

        :param party_id: The party_id of this OBParty2.
        :type party_id: str
        """
        if party_id is None:
            raise ValueError("Invalid value for `party_id`, must not be `None`")
        if party_id is not None and len(party_id) > 40:
            raise ValueError("Invalid value for `party_id`, length must be less than or equal to `40`")
        if party_id is not None and len(party_id) < 1:
            raise ValueError("Invalid value for `party_id`, length must be greater than or equal to `1`")

        self._party_id = party_id
