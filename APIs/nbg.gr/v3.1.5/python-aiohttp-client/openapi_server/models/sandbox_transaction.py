# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_balance: float=None, amount: float=None, booking_date_time: datetime=None, credit_debit: str=None, currency: str=None, description: str=None, reference: str=None, related_account: str=None, related_name: str=None, transaction_code: str=None, value_date_time: datetime=None):
        """SandboxTransaction - a model defined in OpenAPI

        :param accounting_balance: The accounting_balance of this SandboxTransaction.
        :param amount: The amount of this SandboxTransaction.
        :param booking_date_time: The booking_date_time of this SandboxTransaction.
        :param credit_debit: The credit_debit of this SandboxTransaction.
        :param currency: The currency of this SandboxTransaction.
        :param description: The description of this SandboxTransaction.
        :param reference: The reference of this SandboxTransaction.
        :param related_account: The related_account of this SandboxTransaction.
        :param related_name: The related_name of this SandboxTransaction.
        :param transaction_code: The transaction_code of this SandboxTransaction.
        :param value_date_time: The value_date_time of this SandboxTransaction.
        """
        self.openapi_types = {
            'accounting_balance': float,
            'amount': float,
            'booking_date_time': datetime,
            'credit_debit': str,
            'currency': str,
            'description': str,
            'reference': str,
            'related_account': str,
            'related_name': str,
            'transaction_code': str,
            'value_date_time': datetime
        }

        self.attribute_map = {
            'accounting_balance': 'accountingBalance',
            'amount': 'amount',
            'booking_date_time': 'bookingDateTime',
            'credit_debit': 'creditDebit',
            'currency': 'currency',
            'description': 'description',
            'reference': 'reference',
            'related_account': 'relatedAccount',
            'related_name': 'relatedName',
            'transaction_code': 'transactionCode',
            'value_date_time': 'valueDateTime'
        }

        self._accounting_balance = accounting_balance
        self._amount = amount
        self._booking_date_time = booking_date_time
        self._credit_debit = credit_debit
        self._currency = currency
        self._description = description
        self._reference = reference
        self._related_account = related_account
        self._related_name = related_name
        self._transaction_code = transaction_code
        self._value_date_time = value_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxTransaction of this SandboxTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_balance(self):
        """Gets the accounting_balance of this SandboxTransaction.

        Balance

        :return: The accounting_balance of this SandboxTransaction.
        :rtype: float
        """
        return self._accounting_balance

    @accounting_balance.setter
    def accounting_balance(self, accounting_balance):
        """Sets the accounting_balance of this SandboxTransaction.

        Balance

        :param accounting_balance: The accounting_balance of this SandboxTransaction.
        :type accounting_balance: float
        """

        self._accounting_balance = accounting_balance

    @property
    def amount(self):
        """Gets the amount of this SandboxTransaction.

        Amount

        :return: The amount of this SandboxTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SandboxTransaction.

        Amount

        :param amount: The amount of this SandboxTransaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this SandboxTransaction.

        Booking date time

        :return: The booking_date_time of this SandboxTransaction.
        :rtype: datetime
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this SandboxTransaction.

        Booking date time

        :param booking_date_time: The booking_date_time of this SandboxTransaction.
        :type booking_date_time: datetime
        """

        self._booking_date_time = booking_date_time

    @property
    def credit_debit(self):
        """Gets the credit_debit of this SandboxTransaction.

        Credit / Debit indicator

        :return: The credit_debit of this SandboxTransaction.
        :rtype: str
        """
        return self._credit_debit

    @credit_debit.setter
    def credit_debit(self, credit_debit):
        """Sets the credit_debit of this SandboxTransaction.

        Credit / Debit indicator

        :param credit_debit: The credit_debit of this SandboxTransaction.
        :type credit_debit: str
        """

        self._credit_debit = credit_debit

    @property
    def currency(self):
        """Gets the currency of this SandboxTransaction.

        Currency (EUR, USD ...)

        :return: The currency of this SandboxTransaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SandboxTransaction.

        Currency (EUR, USD ...)

        :param currency: The currency of this SandboxTransaction.
        :type currency: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this SandboxTransaction.

        Description

        :return: The description of this SandboxTransaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SandboxTransaction.

        Description

        :param description: The description of this SandboxTransaction.
        :type description: str
        """

        self._description = description

    @property
    def reference(self):
        """Gets the reference of this SandboxTransaction.

        Transaction reference

        :return: The reference of this SandboxTransaction.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SandboxTransaction.

        Transaction reference

        :param reference: The reference of this SandboxTransaction.
        :type reference: str
        """

        self._reference = reference

    @property
    def related_account(self):
        """Gets the related_account of this SandboxTransaction.

        Related account

        :return: The related_account of this SandboxTransaction.
        :rtype: str
        """
        return self._related_account

    @related_account.setter
    def related_account(self, related_account):
        """Sets the related_account of this SandboxTransaction.

        Related account

        :param related_account: The related_account of this SandboxTransaction.
        :type related_account: str
        """

        self._related_account = related_account

    @property
    def related_name(self):
        """Gets the related_name of this SandboxTransaction.

        Related account

        :return: The related_name of this SandboxTransaction.
        :rtype: str
        """
        return self._related_name

    @related_name.setter
    def related_name(self, related_name):
        """Sets the related_name of this SandboxTransaction.

        Related account

        :param related_name: The related_name of this SandboxTransaction.
        :type related_name: str
        """

        self._related_name = related_name

    @property
    def transaction_code(self):
        """Gets the transaction_code of this SandboxTransaction.

        Transaction code

        :return: The transaction_code of this SandboxTransaction.
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this SandboxTransaction.

        Transaction code

        :param transaction_code: The transaction_code of this SandboxTransaction.
        :type transaction_code: str
        """

        self._transaction_code = transaction_code

    @property
    def value_date_time(self):
        """Gets the value_date_time of this SandboxTransaction.

        Valeur

        :return: The value_date_time of this SandboxTransaction.
        :rtype: datetime
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this SandboxTransaction.

        Valeur

        :param value_date_time: The value_date_time of this SandboxTransaction.
        :type value_date_time: datetime
        """

        self._value_date_time = value_date_time
