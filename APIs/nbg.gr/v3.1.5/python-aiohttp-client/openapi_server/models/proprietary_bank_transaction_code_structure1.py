# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProprietaryBankTransactionCodeStructure1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, issuer: str=None):
        """ProprietaryBankTransactionCodeStructure1 - a model defined in OpenAPI

        :param code: The code of this ProprietaryBankTransactionCodeStructure1.
        :param issuer: The issuer of this ProprietaryBankTransactionCodeStructure1.
        """
        self.openapi_types = {
            'code': str,
            'issuer': str
        }

        self.attribute_map = {
            'code': 'Code',
            'issuer': 'Issuer'
        }

        self._code = code
        self._issuer = issuer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProprietaryBankTransactionCodeStructure1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProprietaryBankTransactionCodeStructure1 of this ProprietaryBankTransactionCodeStructure1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ProprietaryBankTransactionCodeStructure1.

        Proprietary bank transaction code to identify the underlying transaction.

        :return: The code of this ProprietaryBankTransactionCodeStructure1.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProprietaryBankTransactionCodeStructure1.

        Proprietary bank transaction code to identify the underlying transaction.

        :param code: The code of this ProprietaryBankTransactionCodeStructure1.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 35:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `35`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def issuer(self):
        """Gets the issuer of this ProprietaryBankTransactionCodeStructure1.

        Identification of the issuer of the proprietary bank transaction code.

        :return: The issuer of this ProprietaryBankTransactionCodeStructure1.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ProprietaryBankTransactionCodeStructure1.

        Identification of the issuer of the proprietary bank transaction code.

        :param issuer: The issuer of this ProprietaryBankTransactionCodeStructure1.
        :type issuer: str
        """
        if issuer is not None and len(issuer) > 35:
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `35`")
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")

        self._issuer = issuer
