# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxScheduledPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, description: str=None, execution_date: datetime=None, sender_reference: str=None):
        """SandboxScheduledPayment - a model defined in OpenAPI

        :param amount: The amount of this SandboxScheduledPayment.
        :param description: The description of this SandboxScheduledPayment.
        :param execution_date: The execution_date of this SandboxScheduledPayment.
        :param sender_reference: The sender_reference of this SandboxScheduledPayment.
        """
        self.openapi_types = {
            'amount': float,
            'description': str,
            'execution_date': datetime,
            'sender_reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'execution_date': 'executionDate',
            'sender_reference': 'senderReference'
        }

        self._amount = amount
        self._description = description
        self._execution_date = execution_date
        self._sender_reference = sender_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxScheduledPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxScheduledPayment of this SandboxScheduledPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SandboxScheduledPayment.

        Amount

        :return: The amount of this SandboxScheduledPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SandboxScheduledPayment.

        Amount

        :param amount: The amount of this SandboxScheduledPayment.
        :type amount: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this SandboxScheduledPayment.

        Scheduled payment's short description

        :return: The description of this SandboxScheduledPayment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SandboxScheduledPayment.

        Scheduled payment's short description

        :param description: The description of this SandboxScheduledPayment.
        :type description: str
        """
        if description is not None and len(description) > 35:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `35`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def execution_date(self):
        """Gets the execution_date of this SandboxScheduledPayment.

        Scheduled payment's execution date

        :return: The execution_date of this SandboxScheduledPayment.
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this SandboxScheduledPayment.

        Scheduled payment's execution date

        :param execution_date: The execution_date of this SandboxScheduledPayment.
        :type execution_date: datetime
        """

        self._execution_date = execution_date

    @property
    def sender_reference(self):
        """Gets the sender_reference of this SandboxScheduledPayment.

        Debtor / Sender reference

        :return: The sender_reference of this SandboxScheduledPayment.
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """Sets the sender_reference of this SandboxScheduledPayment.

        Debtor / Sender reference

        :param sender_reference: The sender_reference of this SandboxScheduledPayment.
        :type sender_reference: str
        """
        if sender_reference is not None and len(sender_reference) > 35:
            raise ValueError("Invalid value for `sender_reference`, length must be less than or equal to `35`")
        if sender_reference is not None and len(sender_reference) < 1:
            raise ValueError("Invalid value for `sender_reference`, length must be greater than or equal to `1`")

        self._sender_reference = sender_reference
