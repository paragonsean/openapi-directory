# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sandbox_bank_account_info import SandboxBankAccountInfo
from openapi_server.models.sandbox_beneficiary import SandboxBeneficiary
from openapi_server.models.sandbox_party import SandboxParty
from openapi_server.models.sandbox_scheduled_payment import SandboxScheduledPayment
from openapi_server.models.sandbox_standing_order import SandboxStandingOrder
from openapi_server.models.sandbox_statement import SandboxStatement
from openapi_server.models.sandbox_transaction import SandboxTransaction
from openapi_server import util


class SandboxBankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beneficiaries: List[SandboxBeneficiary]=None, info: SandboxBankAccountInfo=None, party: SandboxParty=None, scheduled_payments: List[SandboxScheduledPayment]=None, standing_orders: List[SandboxStandingOrder]=None, statements: List[SandboxStatement]=None, transactions: List[SandboxTransaction]=None):
        """SandboxBankAccount - a model defined in OpenAPI

        :param beneficiaries: The beneficiaries of this SandboxBankAccount.
        :param info: The info of this SandboxBankAccount.
        :param party: The party of this SandboxBankAccount.
        :param scheduled_payments: The scheduled_payments of this SandboxBankAccount.
        :param standing_orders: The standing_orders of this SandboxBankAccount.
        :param statements: The statements of this SandboxBankAccount.
        :param transactions: The transactions of this SandboxBankAccount.
        """
        self.openapi_types = {
            'beneficiaries': List[SandboxBeneficiary],
            'info': SandboxBankAccountInfo,
            'party': SandboxParty,
            'scheduled_payments': List[SandboxScheduledPayment],
            'standing_orders': List[SandboxStandingOrder],
            'statements': List[SandboxStatement],
            'transactions': List[SandboxTransaction]
        }

        self.attribute_map = {
            'beneficiaries': 'beneficiaries',
            'info': 'info',
            'party': 'party',
            'scheduled_payments': 'scheduledPayments',
            'standing_orders': 'standingOrders',
            'statements': 'statements',
            'transactions': 'transactions'
        }

        self._beneficiaries = beneficiaries
        self._info = info
        self._party = party
        self._scheduled_payments = scheduled_payments
        self._standing_orders = standing_orders
        self._statements = statements
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxBankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxBankAccount of this SandboxBankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beneficiaries(self):
        """Gets the beneficiaries of this SandboxBankAccount.

        List of account's beneficiaries

        :return: The beneficiaries of this SandboxBankAccount.
        :rtype: List[SandboxBeneficiary]
        """
        return self._beneficiaries

    @beneficiaries.setter
    def beneficiaries(self, beneficiaries):
        """Sets the beneficiaries of this SandboxBankAccount.

        List of account's beneficiaries

        :param beneficiaries: The beneficiaries of this SandboxBankAccount.
        :type beneficiaries: List[SandboxBeneficiary]
        """

        self._beneficiaries = beneficiaries

    @property
    def info(self):
        """Gets the info of this SandboxBankAccount.


        :return: The info of this SandboxBankAccount.
        :rtype: SandboxBankAccountInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SandboxBankAccount.


        :param info: The info of this SandboxBankAccount.
        :type info: SandboxBankAccountInfo
        """

        self._info = info

    @property
    def party(self):
        """Gets the party of this SandboxBankAccount.


        :return: The party of this SandboxBankAccount.
        :rtype: SandboxParty
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this SandboxBankAccount.


        :param party: The party of this SandboxBankAccount.
        :type party: SandboxParty
        """

        self._party = party

    @property
    def scheduled_payments(self):
        """Gets the scheduled_payments of this SandboxBankAccount.

        List of account's scheduled payments

        :return: The scheduled_payments of this SandboxBankAccount.
        :rtype: List[SandboxScheduledPayment]
        """
        return self._scheduled_payments

    @scheduled_payments.setter
    def scheduled_payments(self, scheduled_payments):
        """Sets the scheduled_payments of this SandboxBankAccount.

        List of account's scheduled payments

        :param scheduled_payments: The scheduled_payments of this SandboxBankAccount.
        :type scheduled_payments: List[SandboxScheduledPayment]
        """

        self._scheduled_payments = scheduled_payments

    @property
    def standing_orders(self):
        """Gets the standing_orders of this SandboxBankAccount.

        List of account's standing orders

        :return: The standing_orders of this SandboxBankAccount.
        :rtype: List[SandboxStandingOrder]
        """
        return self._standing_orders

    @standing_orders.setter
    def standing_orders(self, standing_orders):
        """Sets the standing_orders of this SandboxBankAccount.

        List of account's standing orders

        :param standing_orders: The standing_orders of this SandboxBankAccount.
        :type standing_orders: List[SandboxStandingOrder]
        """

        self._standing_orders = standing_orders

    @property
    def statements(self):
        """Gets the statements of this SandboxBankAccount.

        List of account's statements

        :return: The statements of this SandboxBankAccount.
        :rtype: List[SandboxStatement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this SandboxBankAccount.

        List of account's statements

        :param statements: The statements of this SandboxBankAccount.
        :type statements: List[SandboxStatement]
        """

        self._statements = statements

    @property
    def transactions(self):
        """Gets the transactions of this SandboxBankAccount.

        List of account's transactions

        :return: The transactions of this SandboxBankAccount.
        :rtype: List[SandboxTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SandboxBankAccount.

        List of account's transactions

        :param transactions: The transactions of this SandboxBankAccount.
        :type transactions: List[SandboxTransaction]
        """

        self._transactions = transactions
