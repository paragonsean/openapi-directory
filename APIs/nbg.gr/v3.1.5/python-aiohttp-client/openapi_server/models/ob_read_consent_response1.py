# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.meta import Meta
from openapi_server.models.ob_read_data_consent_response1 import OBReadDataConsentResponse1
from openapi_server import util


class OBReadConsentResponse1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: OBReadDataConsentResponse1=None, links: Links=None, meta: Meta=None, risk: object=None):
        """OBReadConsentResponse1 - a model defined in OpenAPI

        :param data: The data of this OBReadConsentResponse1.
        :param links: The links of this OBReadConsentResponse1.
        :param meta: The meta of this OBReadConsentResponse1.
        :param risk: The risk of this OBReadConsentResponse1.
        """
        self.openapi_types = {
            'data': OBReadDataConsentResponse1,
            'links': Links,
            'meta': Meta,
            'risk': object
        }

        self.attribute_map = {
            'data': 'Data',
            'links': 'Links',
            'meta': 'Meta',
            'risk': 'Risk'
        }

        self._data = data
        self._links = links
        self._meta = meta
        self._risk = risk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OBReadConsentResponse1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OBReadConsentResponse1 of this OBReadConsentResponse1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this OBReadConsentResponse1.


        :return: The data of this OBReadConsentResponse1.
        :rtype: OBReadDataConsentResponse1
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OBReadConsentResponse1.


        :param data: The data of this OBReadConsentResponse1.
        :type data: OBReadDataConsentResponse1
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def links(self):
        """Gets the links of this OBReadConsentResponse1.


        :return: The links of this OBReadConsentResponse1.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OBReadConsentResponse1.


        :param links: The links of this OBReadConsentResponse1.
        :type links: Links
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this OBReadConsentResponse1.


        :return: The meta of this OBReadConsentResponse1.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this OBReadConsentResponse1.


        :param meta: The meta of this OBReadConsentResponse1.
        :type meta: Meta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def risk(self):
        """Gets the risk of this OBReadConsentResponse1.

        The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.

        :return: The risk of this OBReadConsentResponse1.
        :rtype: object
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this OBReadConsentResponse1.

        The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.

        :param risk: The risk of this OBReadConsentResponse1.
        :type risk: object
        """
        if risk is None:
            raise ValueError("Invalid value for `risk`, must not be `None`")

        self._risk = risk
