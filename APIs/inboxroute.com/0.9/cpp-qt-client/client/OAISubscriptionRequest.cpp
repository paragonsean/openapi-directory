/**
 * Mailsquad
 * MailSquad offers an affordable and super easy way to create, send and track delightful emails.
 *
 * The version of the OpenAPI document: 0.9
 * Contact: support@mailsquad.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionRequest::OAISubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionRequest::OAISubscriptionRequest() {
    this->initializeModel();
}

OAISubscriptionRequest::~OAISubscriptionRequest() {}

void OAISubscriptionRequest::initializeModel() {

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fullname_isSet = false;
    m_fullname_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_singleoptin_isSet = false;
    m_singleoptin_isValid = false;
}

void OAISubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("confirmed")]);
    m_confirmed_isSet = !json[QString("confirmed")].isNull() && m_confirmed_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fullname_isValid = ::OpenAPI::fromJsonValue(m_fullname, json[QString("fullname")]);
    m_fullname_isSet = !json[QString("fullname")].isNull() && m_fullname_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_singleoptin_isValid = ::OpenAPI::fromJsonValue(m_singleoptin, json[QString("singleoptin")]);
    m_singleoptin_isSet = !json[QString("singleoptin")].isNull() && m_singleoptin_isValid;
}

QString OAISubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmed_isSet) {
        obj.insert(QString("confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fullname_isSet) {
        obj.insert(QString("fullname"), ::OpenAPI::toJsonValue(m_fullname));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_singleoptin_isSet) {
        obj.insert(QString("singleoptin"), ::OpenAPI::toJsonValue(m_singleoptin));
    }
    return obj;
}

QDateTime OAISubscriptionRequest::getConfirmed() const {
    return m_confirmed;
}
void OAISubscriptionRequest::setConfirmed(const QDateTime &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAISubscriptionRequest::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAISubscriptionRequest::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

QString OAISubscriptionRequest::getEmail() const {
    return m_email;
}
void OAISubscriptionRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubscriptionRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubscriptionRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISubscriptionRequest::getFullname() const {
    return m_fullname;
}
void OAISubscriptionRequest::setFullname(const QString &fullname) {
    m_fullname = fullname;
    m_fullname_isSet = true;
}

bool OAISubscriptionRequest::is_fullname_Set() const{
    return m_fullname_isSet;
}

bool OAISubscriptionRequest::is_fullname_Valid() const{
    return m_fullname_isValid;
}

QString OAISubscriptionRequest::getIp() const {
    return m_ip;
}
void OAISubscriptionRequest::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISubscriptionRequest::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISubscriptionRequest::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAISubscriptionRequest::getLang() const {
    return m_lang;
}
void OAISubscriptionRequest::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAISubscriptionRequest::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAISubscriptionRequest::is_lang_Valid() const{
    return m_lang_isValid;
}

bool OAISubscriptionRequest::isSingleoptin() const {
    return m_singleoptin;
}
void OAISubscriptionRequest::setSingleoptin(const bool &singleoptin) {
    m_singleoptin = singleoptin;
    m_singleoptin_isSet = true;
}

bool OAISubscriptionRequest::is_singleoptin_Set() const{
    return m_singleoptin_isSet;
}

bool OAISubscriptionRequest::is_singleoptin_Valid() const{
    return m_singleoptin_isValid;
}

bool OAISubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fullname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_singleoptin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && true;
}

} // namespace OpenAPI
