# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, clientid: str=None, confirmed: datetime=None, customfields: object=None, email: str=None, fullname: str=None, ip: str=None, lang: str=None, listid: str=None, status: int=None):
        """Contact - a model defined in OpenAPI

        :param id: The id of this Contact.
        :param clientid: The clientid of this Contact.
        :param confirmed: The confirmed of this Contact.
        :param customfields: The customfields of this Contact.
        :param email: The email of this Contact.
        :param fullname: The fullname of this Contact.
        :param ip: The ip of this Contact.
        :param lang: The lang of this Contact.
        :param listid: The listid of this Contact.
        :param status: The status of this Contact.
        """
        self.openapi_types = {
            'id': str,
            'clientid': str,
            'confirmed': datetime,
            'customfields': object,
            'email': str,
            'fullname': str,
            'ip': str,
            'lang': str,
            'listid': str,
            'status': int
        }

        self.attribute_map = {
            'id': '_id',
            'clientid': 'clientid',
            'confirmed': 'confirmed',
            'customfields': 'customfields',
            'email': 'email',
            'fullname': 'fullname',
            'ip': 'ip',
            'lang': 'lang',
            'listid': 'listid',
            'status': 'status'
        }

        self._id = id
        self._clientid = clientid
        self._confirmed = confirmed
        self._customfields = customfields
        self._email = email
        self._fullname = fullname
        self._ip = ip
        self._lang = lang
        self._listid = listid
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Contact.

        Unique 16 characters ID

        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.

        Unique 16 characters ID

        :param id: The id of this Contact.
        :type id: str
        """

        self._id = id

    @property
    def clientid(self):
        """Gets the clientid of this Contact.

        Unique 16 characters ID of the client owner

        :return: The clientid of this Contact.
        :rtype: str
        """
        return self._clientid

    @clientid.setter
    def clientid(self, clientid):
        """Sets the clientid of this Contact.

        Unique 16 characters ID of the client owner

        :param clientid: The clientid of this Contact.
        :type clientid: str
        """

        self._clientid = clientid

    @property
    def confirmed(self):
        """Gets the confirmed of this Contact.

        Date+time subscriber confirmed his/her list opt-in

        :return: The confirmed of this Contact.
        :rtype: datetime
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this Contact.

        Date+time subscriber confirmed his/her list opt-in

        :param confirmed: The confirmed of this Contact.
        :type confirmed: datetime
        """

        self._confirmed = confirmed

    @property
    def customfields(self):
        """Gets the customfields of this Contact.

        Dictionnary of field key to value

        :return: The customfields of this Contact.
        :rtype: object
        """
        return self._customfields

    @customfields.setter
    def customfields(self, customfields):
        """Sets the customfields of this Contact.

        Dictionnary of field key to value

        :param customfields: The customfields of this Contact.
        :type customfields: object
        """

        self._customfields = customfields

    @property
    def email(self):
        """Gets the email of this Contact.

        Email address

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.

        Email address

        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def fullname(self):
        """Gets the fullname of this Contact.

        Full name (Last name, First Name) of the subscriber 

        :return: The fullname of this Contact.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this Contact.

        Full name (Last name, First Name) of the subscriber 

        :param fullname: The fullname of this Contact.
        :type fullname: str
        """

        self._fullname = fullname

    @property
    def ip(self):
        """Gets the ip of this Contact.

        Subscriber's IP address when he/she confirmed list opt-in

        :return: The ip of this Contact.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Contact.

        Subscriber's IP address when he/she confirmed list opt-in

        :param ip: The ip of this Contact.
        :type ip: str
        """

        self._ip = ip

    @property
    def lang(self):
        """Gets the lang of this Contact.

        ISO 639-1 language code of the subscriber. When lang is one the supported system language, all communication will be in this language.  

        :return: The lang of this Contact.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Contact.

        ISO 639-1 language code of the subscriber. When lang is one the supported system language, all communication will be in this language.  

        :param lang: The lang of this Contact.
        :type lang: str
        """

        self._lang = lang

    @property
    def listid(self):
        """Gets the listid of this Contact.

        Unique 16 characters ID of the list owner

        :return: The listid of this Contact.
        :rtype: str
        """
        return self._listid

    @listid.setter
    def listid(self, listid):
        """Sets the listid of this Contact.

        Unique 16 characters ID of the list owner

        :param listid: The listid of this Contact.
        :type listid: str
        """

        self._listid = listid

    @property
    def status(self):
        """Gets the status of this Contact.

        Status (   1- Active,   2- Unconfirmed,   3- Unsubscribed,   4- Deleted,   5- Cleaned because of hard bounce or spam complaint) 

        :return: The status of this Contact.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Contact.

        Status (   1- Active,   2- Unconfirmed,   3- Unsubscribed,   4- Deleted,   5- Cleaned because of hard bounce or spam complaint) 

        :param status: The status of this Contact.
        :type status: int
        """

        self._status = status
