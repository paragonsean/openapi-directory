# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactCustomFieldSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, label: str=None, required: bool=None, type: int=None):
        """ContactCustomFieldSchema - a model defined in OpenAPI

        :param key: The key of this ContactCustomFieldSchema.
        :param label: The label of this ContactCustomFieldSchema.
        :param required: The required of this ContactCustomFieldSchema.
        :param type: The type of this ContactCustomFieldSchema.
        """
        self.openapi_types = {
            'key': str,
            'label': str,
            'required': bool,
            'type': int
        }

        self.attribute_map = {
            'key': 'key',
            'label': 'label',
            'required': 'required',
            'type': 'type'
        }

        self._key = key
        self._label = label
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCustomFieldSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactCustomFieldSchema of this ContactCustomFieldSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ContactCustomFieldSchema.

        equivalent to html form input name attribute

        :return: The key of this ContactCustomFieldSchema.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ContactCustomFieldSchema.

        equivalent to html form input name attribute

        :param key: The key of this ContactCustomFieldSchema.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def label(self):
        """Gets the label of this ContactCustomFieldSchema.

        User friendly label describing the field

        :return: The label of this ContactCustomFieldSchema.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ContactCustomFieldSchema.

        User friendly label describing the field

        :param label: The label of this ContactCustomFieldSchema.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def required(self):
        """Gets the required of this ContactCustomFieldSchema.

        Is field required

        :return: The required of this ContactCustomFieldSchema.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ContactCustomFieldSchema.

        Is field required

        :param required: The required of this ContactCustomFieldSchema.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this ContactCustomFieldSchema.

        Type (   1- String / text free form   2- Numeric / integer or decimal   3- Date / ISO 8601 format (YYYY/MM/DD) ) 

        :return: The type of this ContactCustomFieldSchema.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactCustomFieldSchema.

        Type (   1- String / text free form   2- Numeric / integer or decimal   3- Date / ISO 8601 format (YYYY/MM/DD) ) 

        :param type: The type of this ContactCustomFieldSchema.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
