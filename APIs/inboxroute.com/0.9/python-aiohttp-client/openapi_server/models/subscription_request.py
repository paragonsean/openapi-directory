# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmed: datetime=None, email: str=None, fullname: str=None, ip: str=None, lang: str=None, singleoptin: bool=None):
        """SubscriptionRequest - a model defined in OpenAPI

        :param confirmed: The confirmed of this SubscriptionRequest.
        :param email: The email of this SubscriptionRequest.
        :param fullname: The fullname of this SubscriptionRequest.
        :param ip: The ip of this SubscriptionRequest.
        :param lang: The lang of this SubscriptionRequest.
        :param singleoptin: The singleoptin of this SubscriptionRequest.
        """
        self.openapi_types = {
            'confirmed': datetime,
            'email': str,
            'fullname': str,
            'ip': str,
            'lang': str,
            'singleoptin': bool
        }

        self.attribute_map = {
            'confirmed': 'confirmed',
            'email': 'email',
            'fullname': 'fullname',
            'ip': 'ip',
            'lang': 'lang',
            'singleoptin': 'singleoptin'
        }

        self._confirmed = confirmed
        self._email = email
        self._fullname = fullname
        self._ip = ip
        self._lang = lang
        self._singleoptin = singleoptin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionRequest of this SubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmed(self):
        """Gets the confirmed of this SubscriptionRequest.

        Date-time when subscriber opted-in. Required if singleoptin is true.

        :return: The confirmed of this SubscriptionRequest.
        :rtype: datetime
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this SubscriptionRequest.

        Date-time when subscriber opted-in. Required if singleoptin is true.

        :param confirmed: The confirmed of this SubscriptionRequest.
        :type confirmed: datetime
        """

        self._confirmed = confirmed

    @property
    def email(self):
        """Gets the email of this SubscriptionRequest.

        Email address of the subscriber

        :return: The email of this SubscriptionRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubscriptionRequest.

        Email address of the subscriber

        :param email: The email of this SubscriptionRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def fullname(self):
        """Gets the fullname of this SubscriptionRequest.

        Full name (Last name, First Name) of the subscriber 

        :return: The fullname of this SubscriptionRequest.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this SubscriptionRequest.

        Full name (Last name, First Name) of the subscriber 

        :param fullname: The fullname of this SubscriptionRequest.
        :type fullname: str
        """

        self._fullname = fullname

    @property
    def ip(self):
        """Gets the ip of this SubscriptionRequest.

        Origin Ip of the subscriber when he/she opted-in. Required if singleoptin is true.

        :return: The ip of this SubscriptionRequest.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this SubscriptionRequest.

        Origin Ip of the subscriber when he/she opted-in. Required if singleoptin is true.

        :param ip: The ip of this SubscriptionRequest.
        :type ip: str
        """

        self._ip = ip

    @property
    def lang(self):
        """Gets the lang of this SubscriptionRequest.

        ISO 639-1 language code of the subscriber. When lang is one the supported system language, all communication will be in this language. 

        :return: The lang of this SubscriptionRequest.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this SubscriptionRequest.

        ISO 639-1 language code of the subscriber. When lang is one the supported system language, all communication will be in this language. 

        :param lang: The lang of this SubscriptionRequest.
        :type lang: str
        """

        self._lang = lang

    @property
    def singleoptin(self):
        """Gets the singleoptin of this SubscriptionRequest.

        If true, no email will be sent asking user subscription confirmation. In that case, you must provide the confirmation date (confirmed) and origin ip (ip) manually. 

        :return: The singleoptin of this SubscriptionRequest.
        :rtype: bool
        """
        return self._singleoptin

    @singleoptin.setter
    def singleoptin(self, singleoptin):
        """Sets the singleoptin of this SubscriptionRequest.

        If true, no email will be sent asking user subscription confirmation. In that case, you must provide the confirmation date (confirmed) and origin ip (ip) manually. 

        :param singleoptin: The singleoptin of this SubscriptionRequest.
        :type singleoptin: bool
        """

        self._singleoptin = singleoptin
