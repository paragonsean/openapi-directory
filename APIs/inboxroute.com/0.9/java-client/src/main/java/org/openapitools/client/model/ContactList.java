/*
 * Mailsquad
 * MailSquad offers an affordable and super easy way to create, send and track delightful emails.
 *
 * The version of the OpenAPI document: 0.9
 * Contact: support@mailsquad.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactCustomFieldSchema;
import org.openapitools.client.model.ContactListEventCustomization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContactList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:33.397118-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactList {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CLIENTID = "clientid";
  @SerializedName(SERIALIZED_NAME_CLIENTID)
  private String clientid;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOMFIELDS = "customfields";
  @SerializedName(SERIALIZED_NAME_CUSTOMFIELDS)
  private List<ContactCustomFieldSchema> customfields = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTCUSTOMIZATIONS = "eventcustomizations";
  @SerializedName(SERIALIZED_NAME_EVENTCUSTOMIZATIONS)
  private List<ContactListEventCustomization> eventcustomizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ContactList() {
  }

  public ContactList id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique 16 characters ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContactList clientid(String clientid) {
    this.clientid = clientid;
    return this;
  }

  /**
   * Unique 16 characters ID of the client owner
   * @return clientid
   */
  @javax.annotation.Nullable
  public String getClientid() {
    return clientid;
  }

  public void setClientid(String clientid) {
    this.clientid = clientid;
  }


  public ContactList created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ContactList customfields(List<ContactCustomFieldSchema> customfields) {
    this.customfields = customfields;
    return this;
  }

  public ContactList addCustomfieldsItem(ContactCustomFieldSchema customfieldsItem) {
    if (this.customfields == null) {
      this.customfields = new ArrayList<>();
    }
    this.customfields.add(customfieldsItem);
    return this;
  }

  /**
   * Array of ContactCustomFieldSchema
   * @return customfields
   */
  @javax.annotation.Nullable
  public List<ContactCustomFieldSchema> getCustomfields() {
    return customfields;
  }

  public void setCustomfields(List<ContactCustomFieldSchema> customfields) {
    this.customfields = customfields;
  }


  public ContactList eventcustomizations(List<ContactListEventCustomization> eventcustomizations) {
    this.eventcustomizations = eventcustomizations;
    return this;
  }

  public ContactList addEventcustomizationsItem(ContactListEventCustomization eventcustomizationsItem) {
    if (this.eventcustomizations == null) {
      this.eventcustomizations = new ArrayList<>();
    }
    this.eventcustomizations.add(eventcustomizationsItem);
    return this;
  }

  /**
   * Array of ContactListEventCustomization
   * @return eventcustomizations
   */
  @javax.annotation.Nullable
  public List<ContactListEventCustomization> getEventcustomizations() {
    return eventcustomizations;
  }

  public void setEventcustomizations(List<ContactListEventCustomization> eventcustomizations) {
    this.eventcustomizations = eventcustomizations;
  }


  public ContactList name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the contact list
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactList contactList = (ContactList) o;
    return Objects.equals(this.id, contactList.id) &&
        Objects.equals(this.clientid, contactList.clientid) &&
        Objects.equals(this.created, contactList.created) &&
        Objects.equals(this.customfields, contactList.customfields) &&
        Objects.equals(this.eventcustomizations, contactList.eventcustomizations) &&
        Objects.equals(this.name, contactList.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clientid, created, customfields, eventcustomizations, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactList {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientid: ").append(toIndentedString(clientid)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customfields: ").append(toIndentedString(customfields)).append("\n");
    sb.append("    eventcustomizations: ").append(toIndentedString(eventcustomizations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("clientid");
    openapiFields.add("created");
    openapiFields.add("customfields");
    openapiFields.add("eventcustomizations");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactList is not found in the empty JSON string", ContactList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("clientid") != null && !jsonObj.get("clientid").isJsonNull()) && !jsonObj.get("clientid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientid").toString()));
      }
      if (jsonObj.get("customfields") != null && !jsonObj.get("customfields").isJsonNull()) {
        JsonArray jsonArraycustomfields = jsonObj.getAsJsonArray("customfields");
        if (jsonArraycustomfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customfields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customfields` to be an array in the JSON string but got `%s`", jsonObj.get("customfields").toString()));
          }

          // validate the optional field `customfields` (array)
          for (int i = 0; i < jsonArraycustomfields.size(); i++) {
            ContactCustomFieldSchema.validateJsonElement(jsonArraycustomfields.get(i));
          };
        }
      }
      if (jsonObj.get("eventcustomizations") != null && !jsonObj.get("eventcustomizations").isJsonNull()) {
        JsonArray jsonArrayeventcustomizations = jsonObj.getAsJsonArray("eventcustomizations");
        if (jsonArrayeventcustomizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventcustomizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventcustomizations` to be an array in the JSON string but got `%s`", jsonObj.get("eventcustomizations").toString()));
          }

          // validate the optional field `eventcustomizations` (array)
          for (int i = 0; i < jsonArrayeventcustomizations.size(); i++) {
            ContactListEventCustomization.validateJsonElement(jsonArrayeventcustomizations.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactList.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactList>() {
           @Override
           public void write(JsonWriter out, ContactList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactList
   * @throws IOException if the JSON string is invalid with respect to ContactList
   */
  public static ContactList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactList.class);
  }

  /**
   * Convert an instance of ContactList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

