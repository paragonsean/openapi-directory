/*
 * Mailsquad
 * MailSquad offers an affordable and super easy way to create, send and track delightful emails.
 *
 * The version of the OpenAPI document: 0.9
 * Contact: support@mailsquad.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContactsGet401ResponseInner;
import org.openapitools.client.model.ContactsGet404ResponseInner;
import org.openapitools.client.model.ContactsGet422ResponseInner;
import org.openapitools.client.model.SubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionListidPost
     * @param listid Unique 16 characters ID of the contact list (required)
     * @param subscription Subscription request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key or key does not have access to this ressource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request parameters were invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionListidPostCall(String listid, SubscriptionRequest subscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscription;

        // create path and map variables
        String localVarPath = "/subscription/{listid}"
            .replace("{" + "listid" + "}", localVarApiClient.escapeString(listid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mqApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionListidPostValidateBeforeCall(String listid, SubscriptionRequest subscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listid' is set
        if (listid == null) {
            throw new ApiException("Missing the required parameter 'listid' when calling subscriptionListidPost(Async)");
        }

        // verify the required parameter 'subscription' is set
        if (subscription == null) {
            throw new ApiException("Missing the required parameter 'subscription' when calling subscriptionListidPost(Async)");
        }

        return subscriptionListidPostCall(listid, subscription, _callback);

    }

    /**
     * 
     * Subscribe an email address to a list. This api call has the same behavior as a regular subscribe form. However, single opt-in is allowed for system integration purposes.  - If email address does not exist, a new contact will be added to the list. - If email address exists custom fields will be updated and status will be put   to unconfirmed or active depending of singleoptin value. - If current status if Active, this operation will only update the custom fields. - If singleoptin is true, no email confirmation will be sent. In that case,   you must provide the subscribe&#39;s origin ip and confirmation date-time. 
     * @param listid Unique 16 characters ID of the contact list (required)
     * @param subscription Subscription request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key or key does not have access to this ressource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request parameters were invalid </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionListidPost(String listid, SubscriptionRequest subscription) throws ApiException {
        subscriptionListidPostWithHttpInfo(listid, subscription);
    }

    /**
     * 
     * Subscribe an email address to a list. This api call has the same behavior as a regular subscribe form. However, single opt-in is allowed for system integration purposes.  - If email address does not exist, a new contact will be added to the list. - If email address exists custom fields will be updated and status will be put   to unconfirmed or active depending of singleoptin value. - If current status if Active, this operation will only update the custom fields. - If singleoptin is true, no email confirmation will be sent. In that case,   you must provide the subscribe&#39;s origin ip and confirmation date-time. 
     * @param listid Unique 16 characters ID of the contact list (required)
     * @param subscription Subscription request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key or key does not have access to this ressource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request parameters were invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionListidPostWithHttpInfo(String listid, SubscriptionRequest subscription) throws ApiException {
        okhttp3.Call localVarCall = subscriptionListidPostValidateBeforeCall(listid, subscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Subscribe an email address to a list. This api call has the same behavior as a regular subscribe form. However, single opt-in is allowed for system integration purposes.  - If email address does not exist, a new contact will be added to the list. - If email address exists custom fields will be updated and status will be put   to unconfirmed or active depending of singleoptin value. - If current status if Active, this operation will only update the custom fields. - If singleoptin is true, no email confirmation will be sent. In that case,   you must provide the subscribe&#39;s origin ip and confirmation date-time. 
     * @param listid Unique 16 characters ID of the contact list (required)
     * @param subscription Subscription request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid api key or key does not have access to this ressource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request parameters were invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionListidPostAsync(String listid, SubscriptionRequest subscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionListidPostValidateBeforeCall(listid, subscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
