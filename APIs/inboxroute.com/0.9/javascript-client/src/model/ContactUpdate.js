/**
 * Mailsquad
 * MailSquad offers an affordable and super easy way to create, send and track delightful emails.
 *
 * The version of the OpenAPI document: 0.9
 * Contact: support@mailsquad.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactUpdate model module.
 * @module model/ContactUpdate
 * @version 0.9
 */
class ContactUpdate {
    /**
     * Constructs a new <code>ContactUpdate</code>.
     * @alias module:model/ContactUpdate
     */
    constructor() { 
        
        ContactUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactUpdate} obj Optional instance to populate.
     * @return {module:model/ContactUpdate} The populated <code>ContactUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactUpdate();

            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Date');
            }
            if (data.hasOwnProperty('customfields')) {
                obj['customfields'] = ApiClient.convertToType(data['customfields'], Object);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactUpdate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }

        return true;
    }


}



/**
 * Date+time subscriber confirmed his/her list opt-in
 * @member {Date} confirmed
 */
ContactUpdate.prototype['confirmed'] = undefined;

/**
 * Dictionnary of field key to value
 * @member {Object} customfields
 */
ContactUpdate.prototype['customfields'] = undefined;

/**
 * Email address
 * @member {String} email
 */
ContactUpdate.prototype['email'] = undefined;

/**
 * Subscriber's IP address when he/she confirmed list opt-in
 * @member {String} ip
 */
ContactUpdate.prototype['ip'] = undefined;

/**
 * Status (   1- Active,   2- Unconfirmed,   3- Unsubscribed,   4- Deleted,   5- Cleaned because of hard bounce or spam complaint) 
 * @member {Number} status
 */
ContactUpdate.prototype['status'] = undefined;






export default ContactUpdate;

