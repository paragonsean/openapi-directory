/**
 * Mailsquad
 * MailSquad offers an affordable and super easy way to create, send and track delightful emails.
 *
 * The version of the OpenAPI document: 0.9
 * Contact: support@mailsquad.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionRequest model module.
 * @module model/SubscriptionRequest
 * @version 0.9
 */
class SubscriptionRequest {
    /**
     * Constructs a new <code>SubscriptionRequest</code>.
     * @alias module:model/SubscriptionRequest
     * @param email {String} Email address of the subscriber
     */
    constructor(email) { 
        
        SubscriptionRequest.initialize(this, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email) { 
        obj['email'] = email;
    }

    /**
     * Constructs a <code>SubscriptionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionRequest} obj Optional instance to populate.
     * @return {module:model/SubscriptionRequest} The populated <code>SubscriptionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionRequest();

            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fullname')) {
                obj['fullname'] = ApiClient.convertToType(data['fullname'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('singleoptin')) {
                obj['singleoptin'] = ApiClient.convertToType(data['singleoptin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fullname'] && !(typeof data['fullname'] === 'string' || data['fullname'] instanceof String)) {
            throw new Error("Expected the field `fullname` to be a primitive type in the JSON string but got " + data['fullname']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }

        return true;
    }


}

SubscriptionRequest.RequiredProperties = ["email"];

/**
 * Date-time when subscriber opted-in. Required if singleoptin is true.
 * @member {Date} confirmed
 */
SubscriptionRequest.prototype['confirmed'] = undefined;

/**
 * Email address of the subscriber
 * @member {String} email
 */
SubscriptionRequest.prototype['email'] = undefined;

/**
 * Full name (Last name, First Name) of the subscriber 
 * @member {String} fullname
 */
SubscriptionRequest.prototype['fullname'] = undefined;

/**
 * Origin Ip of the subscriber when he/she opted-in. Required if singleoptin is true.
 * @member {String} ip
 */
SubscriptionRequest.prototype['ip'] = undefined;

/**
 * ISO 639-1 language code of the subscriber. When lang is one the supported system language, all communication will be in this language. 
 * @member {String} lang
 */
SubscriptionRequest.prototype['lang'] = undefined;

/**
 * If true, no email will be sent asking user subscription confirmation. In that case, you must provide the confirmation date (confirmed) and origin ip (ip) manually. 
 * @member {Boolean} singleoptin
 */
SubscriptionRequest.prototype['singleoptin'] = undefined;






export default SubscriptionRequest;

