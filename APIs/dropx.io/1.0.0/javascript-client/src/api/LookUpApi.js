/**
 * DropX
 * dropX.io API provides programmatic access to the e-commerce intelligence data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* LookUp service.
* @module api/LookUpApi
* @version 1.0.0
*/
export default class LookUpApi {

    /**
    * Constructs a new LookUpApi. 
    * @alias module:api/LookUpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsLinkSearchGet operation.
     * @callback module:api/LookUpApi~productsLinkSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for similar products by providing a link to any e-commerce product.
     * Returns list of e-commerce product that are close to the one provided -- one from each provider
     * @param {String} url URL must be a url encoded value
     * @param {Object} opts Optional parameters
     * @param {String} [providers] A valid e commerce website link(eg. www.flipkart.com or http://www.amazon.in) by a ',' seperated values to filter response by required e-commerce providers
     * @param {module:api/LookUpApi~productsLinkSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsLinkSearchGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling productsLinkSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'providers': opts['providers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/link-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsLinkSearchV2Get operation.
     * @callback module:api/LookUpApi~productsLinkSearchV2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for similar products by providing a link to any e-commerce product.
     * Returns list of e-commerce product that are close to the one provided -- one from each provider
     * @param {String} url URL must be a url encoded value
     * @param {Object} opts Optional parameters
     * @param {String} [providers] A valid e commerce website link(eg. www.flipkart.com or http://www.amazon.in) by a ',' seperated values to filter response by required e-commerce providers
     * @param {module:api/LookUpApi~productsLinkSearchV2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsLinkSearchV2Get(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling productsLinkSearchV2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'providers': opts['providers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/link-search-v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsSearchGet operation.
     * @callback module:api/LookUpApi~productsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for any product using title
     * Returns one unique result from every provider that dropx.io tracks
     * @param {String} term search terms giving any title of products that are sold online
     * @param {Object} opts Optional parameters
     * @param {String} [providers] A valid e commerce website link(eg. www.flipkart.com or http://www.amazon.in) by a ',' seperated values to filter response by required e-commerce providers
     * @param {module:api/LookUpApi~productsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsSearchGet(term, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling productsSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'term': term,
        'providers': opts['providers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsSearchV2Get operation.
     * @callback module:api/LookUpApi~productsSearchV2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for any product using title
     * Returns one unique result from every provider that dropx.io tracks
     * @param {String} term search terms giving any title of products that are sold online
     * @param {Object} opts Optional parameters
     * @param {String} [providers] A valid e commerce website link(eg. www.flipkart.com or http://www.amazon.in) by a ',' seperated values to filter response by required e-commerce providers
     * @param {module:api/LookUpApi~productsSearchV2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsSearchV2Get(term, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling productsSearchV2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'term': term,
        'providers': opts['providers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/search-v2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsTitleSearchGet operation.
     * @callback module:api/LookUpApi~productsTitleSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for any product using title
     * Returns list of product ids
     * @param {String} term search terms giving any title of products that are sold online
     * @param {module:api/LookUpApi~productsTitleSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsTitleSearchGet(term, callback) {
      let postBody = null;
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling productsTitleSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'term': term
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/title-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
