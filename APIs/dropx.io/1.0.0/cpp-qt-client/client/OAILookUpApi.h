/**
 * DropX
 * dropX.io API provides programmatic access to the e-commerce intelligence data.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILookUpApi_H
#define OAI_OAILookUpApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILookUpApi : public QObject {
    Q_OBJECT

public:
    OAILookUpApi(const int timeOut = 0);
    ~OAILookUpApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  providers QString [optional]
    */
    virtual void productsLinkSearchGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &providers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  providers QString [optional]
    */
    virtual void productsLinkSearchV2Get(const QString &url, const ::OpenAPI::OptionalParam<QString> &providers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  term QString [required]
    * @param[in]  providers QString [optional]
    */
    virtual void productsSearchGet(const QString &term, const ::OpenAPI::OptionalParam<QString> &providers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  term QString [required]
    * @param[in]  providers QString [optional]
    */
    virtual void productsSearchV2Get(const QString &term, const ::OpenAPI::OptionalParam<QString> &providers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  term QString [required]
    */
    virtual void productsTitleSearchGet(const QString &term);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productsLinkSearchGetCallback(OAIHttpRequestWorker *worker);
    void productsLinkSearchV2GetCallback(OAIHttpRequestWorker *worker);
    void productsSearchGetCallback(OAIHttpRequestWorker *worker);
    void productsSearchV2GetCallback(OAIHttpRequestWorker *worker);
    void productsTitleSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productsLinkSearchGetSignal();
    void productsLinkSearchV2GetSignal();
    void productsSearchGetSignal();
    void productsSearchV2GetSignal();
    void productsTitleSearchGetSignal();


    void productsLinkSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void productsLinkSearchV2GetSignalFull(OAIHttpRequestWorker *worker);
    void productsSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void productsSearchV2GetSignalFull(OAIHttpRequestWorker *worker);
    void productsTitleSearchGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productsLinkSearchGetSignalError() instead")
    void productsLinkSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsLinkSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsLinkSearchV2GetSignalError() instead")
    void productsLinkSearchV2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsLinkSearchV2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsSearchGetSignalError() instead")
    void productsSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsSearchV2GetSignalError() instead")
    void productsSearchV2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsSearchV2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsTitleSearchGetSignalError() instead")
    void productsTitleSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsTitleSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productsLinkSearchGetSignalErrorFull() instead")
    void productsLinkSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsLinkSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsLinkSearchV2GetSignalErrorFull() instead")
    void productsLinkSearchV2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsLinkSearchV2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsSearchGetSignalErrorFull() instead")
    void productsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsSearchV2GetSignalErrorFull() instead")
    void productsSearchV2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsSearchV2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsTitleSearchGetSignalErrorFull() instead")
    void productsTitleSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsTitleSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
