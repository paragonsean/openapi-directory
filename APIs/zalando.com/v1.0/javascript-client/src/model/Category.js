/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version v1.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * Zalando API Category Schema
     * @alias module:model/Category
     * @param childKeys {Array.<String>} The list of keys of the child categories
     * @param key {String} The unique key for a category
     * @param name {String} Name of the category
     * @param suggestedFilters {Array.<String>} list of filter names that are reasonable to use within this category
     * @param targetGroup {module:model/Category.TargetGroupEnum} The target group of the articles from this category
     */
    constructor(childKeys, key, name, suggestedFilters, targetGroup) { 
        
        Category.initialize(this, childKeys, key, name, suggestedFilters, targetGroup);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, childKeys, key, name, suggestedFilters, targetGroup) { 
        obj['childKeys'] = childKeys;
        obj['key'] = key;
        obj['name'] = name;
        obj['suggestedFilters'] = suggestedFilters;
        obj['targetGroup'] = targetGroup;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('childKeys')) {
                obj['childKeys'] = ApiClient.convertToType(data['childKeys'], ['String']);
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outlet')) {
                obj['outlet'] = ApiClient.convertToType(data['outlet'], 'Boolean');
            }
            if (data.hasOwnProperty('parentKey')) {
                obj['parentKey'] = ApiClient.convertToType(data['parentKey'], 'String');
            }
            if (data.hasOwnProperty('suggestedFilters')) {
                obj['suggestedFilters'] = ApiClient.convertToType(data['suggestedFilters'], ['String']);
            }
            if (data.hasOwnProperty('targetGroup')) {
                obj['targetGroup'] = ApiClient.convertToType(data['targetGroup'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childKeys'])) {
            throw new Error("Expected the field `childKeys` to be an array in the JSON data but got " + data['childKeys']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentKey'] && !(typeof data['parentKey'] === 'string' || data['parentKey'] instanceof String)) {
            throw new Error("Expected the field `parentKey` to be a primitive type in the JSON string but got " + data['parentKey']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedFilters'])) {
            throw new Error("Expected the field `suggestedFilters` to be an array in the JSON data but got " + data['suggestedFilters']);
        }
        // ensure the json data is a string
        if (data['targetGroup'] && !(typeof data['targetGroup'] === 'string' || data['targetGroup'] instanceof String)) {
            throw new Error("Expected the field `targetGroup` to be a primitive type in the JSON string but got " + data['targetGroup']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Category.RequiredProperties = ["childKeys", "key", "name", "suggestedFilters", "targetGroup"];

/**
 * The list of keys of the child categories
 * @member {Array.<String>} childKeys
 */
Category.prototype['childKeys'] = undefined;

/**
 * The numeric ID for a category.
 * @member {Number} cid
 */
Category.prototype['cid'] = undefined;

/**
 * The category is hidden and not shown on the Zalando web shop
 * @member {Boolean} hidden
 */
Category.prototype['hidden'] = undefined;

/**
 * The unique key for a category
 * @member {String} key
 */
Category.prototype['key'] = undefined;

/**
 * Name of the category
 * @member {String} name
 */
Category.prototype['name'] = undefined;

/**
 * Containing articles are from last seasons
 * @member {Boolean} outlet
 */
Category.prototype['outlet'] = undefined;

/**
 * The key of the parent category
 * @member {String} parentKey
 */
Category.prototype['parentKey'] = undefined;

/**
 * list of filter names that are reasonable to use within this category
 * @member {Array.<String>} suggestedFilters
 */
Category.prototype['suggestedFilters'] = undefined;

/**
 * The target group of the articles from this category
 * @member {module:model/Category.TargetGroupEnum} targetGroup
 */
Category.prototype['targetGroup'] = undefined;

/**
 * The type of the category.
 * @member {String} type
 */
Category.prototype['type'] = undefined;





/**
 * Allowed values for the <code>targetGroup</code> property.
 * @enum {String}
 * @readonly
 */
Category['TargetGroupEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "WOMEN"
     * @const
     */
    "WOMEN": "WOMEN",

    /**
     * value: "MEN"
     * @const
     */
    "MEN": "MEN",

    /**
     * value: "KIDS"
     * @const
     */
    "KIDS": "KIDS"
};



export default Category;

