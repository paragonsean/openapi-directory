/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetValue from './FacetValue';

/**
 * The Facet model module.
 * @module model/Facet
 * @version v1.0
 */
class Facet {
    /**
     * Constructs a new <code>Facet</code>.
     * Zalando API Facet Schema
     * @alias module:model/Facet
     * @param facets {Array.<module:model/FacetValue>} list of the calculated article counts for each filter value
     * @param filter {String} 
     */
    constructor(facets, filter) { 
        
        Facet.initialize(this, facets, filter);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, facets, filter) { 
        obj['facets'] = facets;
        obj['filter'] = filter;
    }

    /**
     * Constructs a <code>Facet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Facet} obj Optional instance to populate.
     * @return {module:model/Facet} The populated <code>Facet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Facet();

            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], [FacetValue]);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Facet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Facet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Facet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facets'])) {
                throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
            }
            // validate the optional field `facets` (array)
            for (const item of data['facets']) {
                FacetValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }

        return true;
    }


}

Facet.RequiredProperties = ["facets", "filter"];

/**
 * list of the calculated article counts for each filter value
 * @member {Array.<module:model/FacetValue>} facets
 */
Facet.prototype['facets'] = undefined;

/**
 * @member {String} filter
 */
Facet.prototype['filter'] = undefined;






export default Facet;

