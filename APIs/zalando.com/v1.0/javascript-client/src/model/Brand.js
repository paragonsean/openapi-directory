/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrandFamily from './BrandFamily';

/**
 * The Brand model module.
 * @module model/Brand
 * @version v1.0
 */
class Brand {
    /**
     * Constructs a new <code>Brand</code>.
     * Zalando API Brand Schema
     * @alias module:model/Brand
     * @param key {String} The unique key for a brand
     * @param name {String} Name of the brand
     * @param shopUrl {String} The url of the brand within the Zalando web shop
     */
    constructor(key, name, shopUrl) { 
        
        Brand.initialize(this, key, name, shopUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, shopUrl) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['shopUrl'] = shopUrl;
    }

    /**
     * Constructs a <code>Brand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Brand} obj Optional instance to populate.
     * @return {module:model/Brand} The populated <code>Brand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Brand();

            if (data.hasOwnProperty('brandFamily')) {
                obj['brandFamily'] = BrandFamily.constructFromObject(data['brandFamily']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('logoLargeUrl')) {
                obj['logoLargeUrl'] = ApiClient.convertToType(data['logoLargeUrl'], 'String');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('shopUrl')) {
                obj['shopUrl'] = ApiClient.convertToType(data['shopUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Brand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Brand</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Brand.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `brandFamily`
        if (data['brandFamily']) { // data not null
          BrandFamily.validateJSON(data['brandFamily']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['logoLargeUrl'] && !(typeof data['logoLargeUrl'] === 'string' || data['logoLargeUrl'] instanceof String)) {
            throw new Error("Expected the field `logoLargeUrl` to be a primitive type in the JSON string but got " + data['logoLargeUrl']);
        }
        // ensure the json data is a string
        if (data['logoUrl'] && !(typeof data['logoUrl'] === 'string' || data['logoUrl'] instanceof String)) {
            throw new Error("Expected the field `logoUrl` to be a primitive type in the JSON string but got " + data['logoUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['shopUrl'] && !(typeof data['shopUrl'] === 'string' || data['shopUrl'] instanceof String)) {
            throw new Error("Expected the field `shopUrl` to be a primitive type in the JSON string but got " + data['shopUrl']);
        }

        return true;
    }


}

Brand.RequiredProperties = ["key", "name", "shopUrl"];

/**
 * @member {module:model/BrandFamily} brandFamily
 */
Brand.prototype['brandFamily'] = undefined;

/**
 * The unique key for a brand
 * @member {String} key
 */
Brand.prototype['key'] = undefined;

/**
 * The url of the large brand logo within the Zalando web shop
 * @member {String} logoLargeUrl
 */
Brand.prototype['logoLargeUrl'] = undefined;

/**
 * The url of the brand logo within the Zalando web shop
 * @member {String} logoUrl
 */
Brand.prototype['logoUrl'] = undefined;

/**
 * Name of the brand
 * @member {String} name
 */
Brand.prototype['name'] = undefined;

/**
 * The url of the brand within the Zalando web shop
 * @member {String} shopUrl
 */
Brand.prototype['shopUrl'] = undefined;






export default Brand;

