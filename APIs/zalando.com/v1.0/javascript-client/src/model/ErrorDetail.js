/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorDetail model module.
 * @module model/ErrorDetail
 * @version v1.0
 */
class ErrorDetail {
    /**
     * Constructs a new <code>ErrorDetail</code>.
     * @alias module:model/ErrorDetail
     */
    constructor() { 
        
        ErrorDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorDetail} obj Optional instance to populate.
     * @return {module:model/ErrorDetail} The populated <code>ErrorDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorDetail();

            if (data.hasOwnProperty('invalidName')) {
                obj['invalidName'] = ApiClient.convertToType(data['invalidName'], 'Boolean');
            }
            if (data.hasOwnProperty('invalidValues')) {
                obj['invalidValues'] = ApiClient.convertToType(data['invalidValues'], ['String']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['invalidValues'])) {
            throw new Error("Expected the field `invalidValues` to be an array in the JSON data but got " + data['invalidValues']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Boolean} invalidName
 */
ErrorDetail.prototype['invalidName'] = undefined;

/**
 * @member {Array.<String>} invalidValues
 */
ErrorDetail.prototype['invalidValues'] = undefined;

/**
 * @member {String} key
 */
ErrorDetail.prototype['key'] = undefined;

/**
 * @member {String} name
 */
ErrorDetail.prototype['name'] = undefined;

/**
 * @member {String} value
 */
ErrorDetail.prototype['value'] = undefined;






export default ErrorDetail;

