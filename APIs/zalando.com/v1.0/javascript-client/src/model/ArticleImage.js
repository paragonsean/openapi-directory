/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArticleImage model module.
 * @module model/ArticleImage
 * @version v1.0
 */
class ArticleImage {
    /**
     * Constructs a new <code>ArticleImage</code>.
     * Zalando API Article Image Schema
     * @alias module:model/ArticleImage
     * @param largeHdUrl {String} large HD image of the article
     * @param largeUrl {String} large image of the article
     * @param mediumHdUrl {String} medium HD image of the article
     * @param mediumUrl {String} medium image of the article
     * @param orderNumber {Number} sequence of the article images
     * @param smallHdUrl {String} small HD image of the article
     * @param smallUrl {String} small image of the article
     * @param thumbnailHdUrl {String} thumbnail HD url of the article images
     * @param type {String} model or non model type article images
     */
    constructor(largeHdUrl, largeUrl, mediumHdUrl, mediumUrl, orderNumber, smallHdUrl, smallUrl, thumbnailHdUrl, type) { 
        
        ArticleImage.initialize(this, largeHdUrl, largeUrl, mediumHdUrl, mediumUrl, orderNumber, smallHdUrl, smallUrl, thumbnailHdUrl, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, largeHdUrl, largeUrl, mediumHdUrl, mediumUrl, orderNumber, smallHdUrl, smallUrl, thumbnailHdUrl, type) { 
        obj['largeHdUrl'] = largeHdUrl;
        obj['largeUrl'] = largeUrl;
        obj['mediumHdUrl'] = mediumHdUrl;
        obj['mediumUrl'] = mediumUrl;
        obj['orderNumber'] = orderNumber;
        obj['smallHdUrl'] = smallHdUrl;
        obj['smallUrl'] = smallUrl;
        obj['thumbnailHdUrl'] = thumbnailHdUrl;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ArticleImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleImage} obj Optional instance to populate.
     * @return {module:model/ArticleImage} The populated <code>ArticleImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleImage();

            if (data.hasOwnProperty('largeHdUrl')) {
                obj['largeHdUrl'] = ApiClient.convertToType(data['largeHdUrl'], 'String');
            }
            if (data.hasOwnProperty('largeUrl')) {
                obj['largeUrl'] = ApiClient.convertToType(data['largeUrl'], 'String');
            }
            if (data.hasOwnProperty('mediumHdUrl')) {
                obj['mediumHdUrl'] = ApiClient.convertToType(data['mediumHdUrl'], 'String');
            }
            if (data.hasOwnProperty('mediumUrl')) {
                obj['mediumUrl'] = ApiClient.convertToType(data['mediumUrl'], 'String');
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'Number');
            }
            if (data.hasOwnProperty('smallHdUrl')) {
                obj['smallHdUrl'] = ApiClient.convertToType(data['smallHdUrl'], 'String');
            }
            if (data.hasOwnProperty('smallUrl')) {
                obj['smallUrl'] = ApiClient.convertToType(data['smallUrl'], 'String');
            }
            if (data.hasOwnProperty('thumbnailHdUrl')) {
                obj['thumbnailHdUrl'] = ApiClient.convertToType(data['thumbnailHdUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleImage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleImage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['largeHdUrl'] && !(typeof data['largeHdUrl'] === 'string' || data['largeHdUrl'] instanceof String)) {
            throw new Error("Expected the field `largeHdUrl` to be a primitive type in the JSON string but got " + data['largeHdUrl']);
        }
        // ensure the json data is a string
        if (data['largeUrl'] && !(typeof data['largeUrl'] === 'string' || data['largeUrl'] instanceof String)) {
            throw new Error("Expected the field `largeUrl` to be a primitive type in the JSON string but got " + data['largeUrl']);
        }
        // ensure the json data is a string
        if (data['mediumHdUrl'] && !(typeof data['mediumHdUrl'] === 'string' || data['mediumHdUrl'] instanceof String)) {
            throw new Error("Expected the field `mediumHdUrl` to be a primitive type in the JSON string but got " + data['mediumHdUrl']);
        }
        // ensure the json data is a string
        if (data['mediumUrl'] && !(typeof data['mediumUrl'] === 'string' || data['mediumUrl'] instanceof String)) {
            throw new Error("Expected the field `mediumUrl` to be a primitive type in the JSON string but got " + data['mediumUrl']);
        }
        // ensure the json data is a string
        if (data['smallHdUrl'] && !(typeof data['smallHdUrl'] === 'string' || data['smallHdUrl'] instanceof String)) {
            throw new Error("Expected the field `smallHdUrl` to be a primitive type in the JSON string but got " + data['smallHdUrl']);
        }
        // ensure the json data is a string
        if (data['smallUrl'] && !(typeof data['smallUrl'] === 'string' || data['smallUrl'] instanceof String)) {
            throw new Error("Expected the field `smallUrl` to be a primitive type in the JSON string but got " + data['smallUrl']);
        }
        // ensure the json data is a string
        if (data['thumbnailHdUrl'] && !(typeof data['thumbnailHdUrl'] === 'string' || data['thumbnailHdUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailHdUrl` to be a primitive type in the JSON string but got " + data['thumbnailHdUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ArticleImage.RequiredProperties = ["largeHdUrl", "largeUrl", "mediumHdUrl", "mediumUrl", "orderNumber", "smallHdUrl", "smallUrl", "thumbnailHdUrl", "type"];

/**
 * large HD image of the article
 * @member {String} largeHdUrl
 */
ArticleImage.prototype['largeHdUrl'] = undefined;

/**
 * large image of the article
 * @member {String} largeUrl
 */
ArticleImage.prototype['largeUrl'] = undefined;

/**
 * medium HD image of the article
 * @member {String} mediumHdUrl
 */
ArticleImage.prototype['mediumHdUrl'] = undefined;

/**
 * medium image of the article
 * @member {String} mediumUrl
 */
ArticleImage.prototype['mediumUrl'] = undefined;

/**
 * sequence of the article images
 * @member {Number} orderNumber
 */
ArticleImage.prototype['orderNumber'] = undefined;

/**
 * small HD image of the article
 * @member {String} smallHdUrl
 */
ArticleImage.prototype['smallHdUrl'] = undefined;

/**
 * small image of the article
 * @member {String} smallUrl
 */
ArticleImage.prototype['smallUrl'] = undefined;

/**
 * thumbnail HD url of the article images
 * @member {String} thumbnailHdUrl
 */
ArticleImage.prototype['thumbnailHdUrl'] = undefined;

/**
 * model or non model type article images
 * @member {String} type
 */
ArticleImage.prototype['type'] = undefined;






export default ArticleImage;

