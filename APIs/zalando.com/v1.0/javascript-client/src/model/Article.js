/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleAttribute from './ArticleAttribute';
import ArticleMedia from './ArticleMedia';
import ArticleUnit from './ArticleUnit';
import Brand from './Brand';

/**
 * The Article model module.
 * @module model/Article
 * @version v1.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * A single article
     * @alias module:model/Article
     * @param activationDate {Date} timestamp the article was available in the Zalando webshop
     * @param additionalInfos {Array.<String>} any additional information of the article 
     * @param ageGroups {Array.<module:model/Article.AgeGroupsEnum>} age group of the article belongs to
     * @param attributes {Array.<module:model/ArticleAttribute>} article attributes
     * @param available {Boolean} will be true if at least one article unit is available
     * @param brand {module:model/Brand} 
     * @param categoryKeys {Array.<String>} category keys of the article belongs to
     * @param color {String} the main color of the article
     * @param genders {Array.<module:model/Article.GendersEnum>} gender of the article belongs to
     * @param id {String} unique article id
     * @param media {module:model/ArticleMedia} 
     * @param modelId {String} unique article model id
     * @param name {String} article name
     * @param season {module:model/Article.SeasonEnum} collection season the article belongs to
     * @param seasonYear {String} collection year the article belongs to. Could be either a year or 'ALL'
     * @param shopUrl {String} url of the article within the Zalando webshop
     * @param units {Array.<module:model/ArticleUnit>} price of the article
     */
    constructor(activationDate, additionalInfos, ageGroups, attributes, available, brand, categoryKeys, color, genders, id, media, modelId, name, season, seasonYear, shopUrl, units) { 
        
        Article.initialize(this, activationDate, additionalInfos, ageGroups, attributes, available, brand, categoryKeys, color, genders, id, media, modelId, name, season, seasonYear, shopUrl, units);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activationDate, additionalInfos, ageGroups, attributes, available, brand, categoryKeys, color, genders, id, media, modelId, name, season, seasonYear, shopUrl, units) { 
        obj['activationDate'] = activationDate;
        obj['additionalInfos'] = additionalInfos;
        obj['ageGroups'] = ageGroups;
        obj['attributes'] = attributes;
        obj['available'] = available;
        obj['brand'] = brand;
        obj['categoryKeys'] = categoryKeys;
        obj['color'] = color;
        obj['genders'] = genders;
        obj['id'] = id;
        obj['media'] = media;
        obj['modelId'] = modelId;
        obj['name'] = name;
        obj['season'] = season;
        obj['seasonYear'] = seasonYear;
        obj['shopUrl'] = shopUrl;
        obj['units'] = units;
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('activationDate')) {
                obj['activationDate'] = ApiClient.convertToType(data['activationDate'], 'Date');
            }
            if (data.hasOwnProperty('additionalInfos')) {
                obj['additionalInfos'] = ApiClient.convertToType(data['additionalInfos'], ['String']);
            }
            if (data.hasOwnProperty('ageGroups')) {
                obj['ageGroups'] = ApiClient.convertToType(data['ageGroups'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [ArticleAttribute]);
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = Brand.constructFromObject(data['brand']);
            }
            if (data.hasOwnProperty('categoryKeys')) {
                obj['categoryKeys'] = ApiClient.convertToType(data['categoryKeys'], ['String']);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('genders')) {
                obj['genders'] = ApiClient.convertToType(data['genders'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ArticleMedia.constructFromObject(data['media']);
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'String');
            }
            if (data.hasOwnProperty('seasonYear')) {
                obj['seasonYear'] = ApiClient.convertToType(data['seasonYear'], 'String');
            }
            if (data.hasOwnProperty('shopUrl')) {
                obj['shopUrl'] = ApiClient.convertToType(data['shopUrl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], [ArticleUnit]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Article.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['additionalInfos'])) {
            throw new Error("Expected the field `additionalInfos` to be an array in the JSON data but got " + data['additionalInfos']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ageGroups'])) {
            throw new Error("Expected the field `ageGroups` to be an array in the JSON data but got " + data['ageGroups']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                ArticleAttribute.validateJSON(item);
            };
        }
        // validate the optional field `brand`
        if (data['brand']) { // data not null
          Brand.validateJSON(data['brand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoryKeys'])) {
            throw new Error("Expected the field `categoryKeys` to be an array in the JSON data but got " + data['categoryKeys']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genders'])) {
            throw new Error("Expected the field `genders` to be an array in the JSON data but got " + data['genders']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `media`
        if (data['media']) { // data not null
          ArticleMedia.validateJSON(data['media']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['season'] && !(typeof data['season'] === 'string' || data['season'] instanceof String)) {
            throw new Error("Expected the field `season` to be a primitive type in the JSON string but got " + data['season']);
        }
        // ensure the json data is a string
        if (data['seasonYear'] && !(typeof data['seasonYear'] === 'string' || data['seasonYear'] instanceof String)) {
            throw new Error("Expected the field `seasonYear` to be a primitive type in the JSON string but got " + data['seasonYear']);
        }
        // ensure the json data is a string
        if (data['shopUrl'] && !(typeof data['shopUrl'] === 'string' || data['shopUrl'] instanceof String)) {
            throw new Error("Expected the field `shopUrl` to be a primitive type in the JSON string but got " + data['shopUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['units']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['units'])) {
                throw new Error("Expected the field `units` to be an array in the JSON data but got " + data['units']);
            }
            // validate the optional field `units` (array)
            for (const item of data['units']) {
                ArticleUnit.validateJSON(item);
            };
        }

        return true;
    }


}

Article.RequiredProperties = ["activationDate", "additionalInfos", "ageGroups", "attributes", "available", "brand", "categoryKeys", "color", "genders", "id", "media", "modelId", "name", "season", "seasonYear", "shopUrl", "units"];

/**
 * timestamp the article was available in the Zalando webshop
 * @member {Date} activationDate
 */
Article.prototype['activationDate'] = undefined;

/**
 * any additional information of the article 
 * @member {Array.<String>} additionalInfos
 */
Article.prototype['additionalInfos'] = undefined;

/**
 * age group of the article belongs to
 * @member {Array.<module:model/Article.AgeGroupsEnum>} ageGroups
 */
Article.prototype['ageGroups'] = undefined;

/**
 * article attributes
 * @member {Array.<module:model/ArticleAttribute>} attributes
 */
Article.prototype['attributes'] = undefined;

/**
 * will be true if at least one article unit is available
 * @member {Boolean} available
 */
Article.prototype['available'] = undefined;

/**
 * @member {module:model/Brand} brand
 */
Article.prototype['brand'] = undefined;

/**
 * category keys of the article belongs to
 * @member {Array.<String>} categoryKeys
 */
Article.prototype['categoryKeys'] = undefined;

/**
 * the main color of the article
 * @member {String} color
 */
Article.prototype['color'] = undefined;

/**
 * gender of the article belongs to
 * @member {Array.<module:model/Article.GendersEnum>} genders
 */
Article.prototype['genders'] = undefined;

/**
 * unique article id
 * @member {String} id
 */
Article.prototype['id'] = undefined;

/**
 * @member {module:model/ArticleMedia} media
 */
Article.prototype['media'] = undefined;

/**
 * unique article model id
 * @member {String} modelId
 */
Article.prototype['modelId'] = undefined;

/**
 * article name
 * @member {String} name
 */
Article.prototype['name'] = undefined;

/**
 * collection season the article belongs to
 * @member {module:model/Article.SeasonEnum} season
 */
Article.prototype['season'] = undefined;

/**
 * collection year the article belongs to. Could be either a year or 'ALL'
 * @member {String} seasonYear
 */
Article.prototype['seasonYear'] = undefined;

/**
 * url of the article within the Zalando webshop
 * @member {String} shopUrl
 */
Article.prototype['shopUrl'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Article.prototype['tags'] = undefined;

/**
 * price of the article
 * @member {Array.<module:model/ArticleUnit>} units
 */
Article.prototype['units'] = undefined;





/**
 * Allowed values for the <code>ageGroups</code> property.
 * @enum {String}
 * @readonly
 */
Article['AgeGroupsEnum'] = {

    /**
     * value: "BABY"
     * @const
     */
    "BABY": "BABY",

    /**
     * value: "CHILD"
     * @const
     */
    "CHILD": "CHILD",

    /**
     * value: "TEEN"
     * @const
     */
    "TEEN": "TEEN",

    /**
     * value: "ADULT"
     * @const
     */
    "ADULT": "ADULT"
};


/**
 * Allowed values for the <code>genders</code> property.
 * @enum {String}
 * @readonly
 */
Article['GendersEnum'] = {

    /**
     * value: "MALE"
     * @const
     */
    "MALE": "MALE",

    /**
     * value: "FEMALE"
     * @const
     */
    "FEMALE": "FEMALE"
};


/**
 * Allowed values for the <code>season</code> property.
 * @enum {String}
 * @readonly
 */
Article['SeasonEnum'] = {

    /**
     * value: "SUMMER"
     * @const
     */
    "SUMMER": "SUMMER",

    /**
     * value: "WINTER"
     * @const
     */
    "WINTER": "WINTER",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default Article;

