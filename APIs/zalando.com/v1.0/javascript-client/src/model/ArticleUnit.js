/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticlePrice from './ArticlePrice';

/**
 * The ArticleUnit model module.
 * @module model/ArticleUnit
 * @version v1.0
 */
class ArticleUnit {
    /**
     * Constructs a new <code>ArticleUnit</code>.
     * Zalando API Article Unit Schema
     * @alias module:model/ArticleUnit
     * @param available {Boolean} availability of the article
     * @param id {String} article id (sku)
     * @param originalPrice {module:model/ArticlePrice} 
     * @param price {module:model/ArticlePrice} 
     * @param size {String} article size
     * @param stock {Number} stock of the article
     */
    constructor(available, id, originalPrice, price, size, stock) { 
        
        ArticleUnit.initialize(this, available, id, originalPrice, price, size, stock);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, id, originalPrice, price, size, stock) { 
        obj['available'] = available;
        obj['id'] = id;
        obj['originalPrice'] = originalPrice;
        obj['price'] = price;
        obj['size'] = size;
        obj['stock'] = stock;
    }

    /**
     * Constructs a <code>ArticleUnit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleUnit} obj Optional instance to populate.
     * @return {module:model/ArticleUnit} The populated <code>ArticleUnit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleUnit();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('originalPrice')) {
                obj['originalPrice'] = ArticlePrice.constructFromObject(data['originalPrice']);
            }
            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ArticlePrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('stock')) {
                obj['stock'] = ApiClient.convertToType(data['stock'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleUnit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleUnit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleUnit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `originalPrice`
        if (data['originalPrice']) { // data not null
          ArticlePrice.validateJSON(data['originalPrice']);
        }
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ArticlePrice.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

ArticleUnit.RequiredProperties = ["available", "id", "originalPrice", "price", "size", "stock"];

/**
 * availability of the article
 * @member {Boolean} available
 */
ArticleUnit.prototype['available'] = undefined;

/**
 * article id (sku)
 * @member {String} id
 */
ArticleUnit.prototype['id'] = undefined;

/**
 * @member {module:model/ArticlePrice} originalPrice
 */
ArticleUnit.prototype['originalPrice'] = undefined;

/**
 * partner id (vendor id) of the article
 * @member {String} partnerId
 */
ArticleUnit.prototype['partnerId'] = undefined;

/**
 * @member {module:model/ArticlePrice} price
 */
ArticleUnit.prototype['price'] = undefined;

/**
 * article size
 * @member {String} size
 */
ArticleUnit.prototype['size'] = undefined;

/**
 * stock of the article
 * @member {Number} stock
 */
ArticleUnit.prototype['stock'] = undefined;






export default ArticleUnit;

