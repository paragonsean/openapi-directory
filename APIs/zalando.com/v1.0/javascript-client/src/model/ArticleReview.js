/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArticleReviewArticleSizeRatings from './ArticleReviewArticleSizeRatings';

/**
 * The ArticleReview model module.
 * @module model/ArticleReview
 * @version v1.0
 */
class ArticleReview {
    /**
     * Constructs a new <code>ArticleReview</code>.
     * Zalando API Article Review Schema
     * @alias module:model/ArticleReview
     * @param articleId {String} 
     * @param articleModelId {String} 
     * @param created {Date} article review created date and time
     * @param description {String} description of the article review
     * @param helpfulCount {Number} customer review helpful count of the article
     * @param language {String} language in the article review
     * @param rating {Number} customer rating of the article
     * @param reviewId {String} unique article review id
     * @param title {String} title in the article review
     * @param unhelpfulCount {Number} customer review unhelpful count of the article
     */
    constructor(articleId, articleModelId, created, description, helpfulCount, language, rating, reviewId, title, unhelpfulCount) { 
        
        ArticleReview.initialize(this, articleId, articleModelId, created, description, helpfulCount, language, rating, reviewId, title, unhelpfulCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, articleId, articleModelId, created, description, helpfulCount, language, rating, reviewId, title, unhelpfulCount) { 
        obj['articleId'] = articleId;
        obj['articleModelId'] = articleModelId;
        obj['created'] = created;
        obj['description'] = description;
        obj['helpfulCount'] = helpfulCount;
        obj['language'] = language;
        obj['rating'] = rating;
        obj['reviewId'] = reviewId;
        obj['title'] = title;
        obj['unhelpfulCount'] = unhelpfulCount;
    }

    /**
     * Constructs a <code>ArticleReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleReview} obj Optional instance to populate.
     * @return {module:model/ArticleReview} The populated <code>ArticleReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleReview();

            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'String');
            }
            if (data.hasOwnProperty('articleModelId')) {
                obj['articleModelId'] = ApiClient.convertToType(data['articleModelId'], 'String');
            }
            if (data.hasOwnProperty('articleSizeRatings')) {
                obj['articleSizeRatings'] = ArticleReviewArticleSizeRatings.constructFromObject(data['articleSizeRatings']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('customerCity')) {
                obj['customerCity'] = ApiClient.convertToType(data['customerCity'], 'String');
            }
            if (data.hasOwnProperty('customerCountry')) {
                obj['customerCountry'] = ApiClient.convertToType(data['customerCountry'], 'String');
            }
            if (data.hasOwnProperty('customerNickname')) {
                obj['customerNickname'] = ApiClient.convertToType(data['customerNickname'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('helpfulCount')) {
                obj['helpfulCount'] = ApiClient.convertToType(data['helpfulCount'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('recommend')) {
                obj['recommend'] = ApiClient.convertToType(data['recommend'], 'Boolean');
            }
            if (data.hasOwnProperty('reviewId')) {
                obj['reviewId'] = ApiClient.convertToType(data['reviewId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('unhelpfulCount')) {
                obj['unhelpfulCount'] = ApiClient.convertToType(data['unhelpfulCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleReview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleReview</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleReview.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['articleId'] && !(typeof data['articleId'] === 'string' || data['articleId'] instanceof String)) {
            throw new Error("Expected the field `articleId` to be a primitive type in the JSON string but got " + data['articleId']);
        }
        // ensure the json data is a string
        if (data['articleModelId'] && !(typeof data['articleModelId'] === 'string' || data['articleModelId'] instanceof String)) {
            throw new Error("Expected the field `articleModelId` to be a primitive type in the JSON string but got " + data['articleModelId']);
        }
        // validate the optional field `articleSizeRatings`
        if (data['articleSizeRatings']) { // data not null
          ArticleReviewArticleSizeRatings.validateJSON(data['articleSizeRatings']);
        }
        // ensure the json data is a string
        if (data['customerCity'] && !(typeof data['customerCity'] === 'string' || data['customerCity'] instanceof String)) {
            throw new Error("Expected the field `customerCity` to be a primitive type in the JSON string but got " + data['customerCity']);
        }
        // ensure the json data is a string
        if (data['customerCountry'] && !(typeof data['customerCountry'] === 'string' || data['customerCountry'] instanceof String)) {
            throw new Error("Expected the field `customerCountry` to be a primitive type in the JSON string but got " + data['customerCountry']);
        }
        // ensure the json data is a string
        if (data['customerNickname'] && !(typeof data['customerNickname'] === 'string' || data['customerNickname'] instanceof String)) {
            throw new Error("Expected the field `customerNickname` to be a primitive type in the JSON string but got " + data['customerNickname']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['reviewId'] && !(typeof data['reviewId'] === 'string' || data['reviewId'] instanceof String)) {
            throw new Error("Expected the field `reviewId` to be a primitive type in the JSON string but got " + data['reviewId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ArticleReview.RequiredProperties = ["articleId", "articleModelId", "created", "description", "helpfulCount", "language", "rating", "reviewId", "title", "unhelpfulCount"];

/**
 * @member {String} articleId
 */
ArticleReview.prototype['articleId'] = undefined;

/**
 * @member {String} articleModelId
 */
ArticleReview.prototype['articleModelId'] = undefined;

/**
 * @member {module:model/ArticleReviewArticleSizeRatings} articleSizeRatings
 */
ArticleReview.prototype['articleSizeRatings'] = undefined;

/**
 * article review created date and time
 * @member {Date} created
 */
ArticleReview.prototype['created'] = undefined;

/**
 * customer city in the article review
 * @member {String} customerCity
 */
ArticleReview.prototype['customerCity'] = undefined;

/**
 * customer country in the article review
 * @member {String} customerCountry
 */
ArticleReview.prototype['customerCountry'] = undefined;

/**
 * Customer short name in the article review
 * @member {String} customerNickname
 */
ArticleReview.prototype['customerNickname'] = undefined;

/**
 * description of the article review
 * @member {String} description
 */
ArticleReview.prototype['description'] = undefined;

/**
 * customer review helpful count of the article
 * @member {Number} helpfulCount
 */
ArticleReview.prototype['helpfulCount'] = undefined;

/**
 * language in the article review
 * @member {String} language
 */
ArticleReview.prototype['language'] = undefined;

/**
 * customer rating of the article
 * @member {Number} rating
 */
ArticleReview.prototype['rating'] = undefined;

/**
 * customer recommend to the article
 * @member {Boolean} recommend
 */
ArticleReview.prototype['recommend'] = undefined;

/**
 * unique article review id
 * @member {String} reviewId
 */
ArticleReview.prototype['reviewId'] = undefined;

/**
 * title in the article review
 * @member {String} title
 */
ArticleReview.prototype['title'] = undefined;

/**
 * customer review unhelpful count of the article
 * @member {Number} unhelpfulCount
 */
ArticleReview.prototype['unhelpfulCount'] = undefined;






export default ArticleReview;

