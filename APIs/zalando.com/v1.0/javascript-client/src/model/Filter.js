/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterValue from './FilterValue';

/**
 * The Filter model module.
 * @module model/Filter
 * @version v1.0
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * Zalando API Filter Schema
     * @alias module:model/Filter
     * @param multiValue {Boolean} can this filter be used multiple times with different values in one search request
     * @param name {String} The unique name for a filter
     * @param type {module:model/Filter.TypeEnum} filter enum types
     * @param values {Array.<module:model/FilterValue>} only if type is 'enum' this list contains all possible filter values
     */
    constructor(multiValue, name, type, values) { 
        
        Filter.initialize(this, multiValue, name, type, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, multiValue, name, type, values) { 
        obj['multiValue'] = multiValue;
        obj['name'] = name;
        obj['type'] = type;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('multiValue')) {
                obj['multiValue'] = ApiClient.convertToType(data['multiValue'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [FilterValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Filter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                FilterValue.validateJSON(item);
            };
        }

        return true;
    }


}

Filter.RequiredProperties = ["multiValue", "name", "type", "values"];

/**
 * can this filter be used multiple times with different values in one search request
 * @member {Boolean} multiValue
 */
Filter.prototype['multiValue'] = undefined;

/**
 * The unique name for a filter
 * @member {String} name
 */
Filter.prototype['name'] = undefined;

/**
 * filter enum types
 * @member {module:model/Filter.TypeEnum} type
 */
Filter.prototype['type'] = undefined;

/**
 * only if type is 'enum' this list contains all possible filter values
 * @member {Array.<module:model/FilterValue>} values
 */
Filter.prototype['values'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Filter['TypeEnum'] = {

    /**
     * value: "SKU"
     * @const
     */
    "SKU": "SKU",

    /**
     * value: "KEY"
     * @const
     */
    "KEY": "KEY",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "RANGE"
     * @const
     */
    "RANGE": "RANGE"
};



export default Filter;

