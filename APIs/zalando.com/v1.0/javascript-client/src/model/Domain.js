/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Domain model module.
 * @module model/Domain
 * @version v1.0
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * Zalando API Domain Schema
     * @alias module:model/Domain
     * @param countryCode {String} domain country code
     * @param currencyCode {String} domain currency code
     * @param languageCode {String} domain language
     * @param rootCategoryKey {String} domain root category
     * @param shopUrl {String} domain specific url
     * @param taxRate {Number} domain tax rate
     */
    constructor(countryCode, currencyCode, languageCode, rootCategoryKey, shopUrl, taxRate) { 
        
        Domain.initialize(this, countryCode, currencyCode, languageCode, rootCategoryKey, shopUrl, taxRate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCode, currencyCode, languageCode, rootCategoryKey, shopUrl, taxRate) { 
        obj['countryCode'] = countryCode;
        obj['currencyCode'] = currencyCode;
        obj['languageCode'] = languageCode;
        obj['rootCategoryKey'] = rootCategoryKey;
        obj['shopUrl'] = shopUrl;
        obj['taxRate'] = taxRate;
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('rootCategoryKey')) {
                obj['rootCategoryKey'] = ApiClient.convertToType(data['rootCategoryKey'], 'String');
            }
            if (data.hasOwnProperty('shopUrl')) {
                obj['shopUrl'] = ApiClient.convertToType(data['shopUrl'], 'String');
            }
            if (data.hasOwnProperty('taxRate')) {
                obj['taxRate'] = ApiClient.convertToType(data['taxRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domain</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Domain.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['rootCategoryKey'] && !(typeof data['rootCategoryKey'] === 'string' || data['rootCategoryKey'] instanceof String)) {
            throw new Error("Expected the field `rootCategoryKey` to be a primitive type in the JSON string but got " + data['rootCategoryKey']);
        }
        // ensure the json data is a string
        if (data['shopUrl'] && !(typeof data['shopUrl'] === 'string' || data['shopUrl'] instanceof String)) {
            throw new Error("Expected the field `shopUrl` to be a primitive type in the JSON string but got " + data['shopUrl']);
        }

        return true;
    }


}

Domain.RequiredProperties = ["countryCode", "currencyCode", "languageCode", "rootCategoryKey", "shopUrl", "taxRate"];

/**
 * domain country code
 * @member {String} countryCode
 */
Domain.prototype['countryCode'] = undefined;

/**
 * domain currency code
 * @member {String} currencyCode
 */
Domain.prototype['currencyCode'] = undefined;

/**
 * domain language
 * @member {String} languageCode
 */
Domain.prototype['languageCode'] = undefined;

/**
 * domain root category
 * @member {String} rootCategoryKey
 */
Domain.prototype['rootCategoryKey'] = undefined;

/**
 * domain specific url
 * @member {String} shopUrl
 */
Domain.prototype['shopUrl'] = undefined;

/**
 * domain tax rate
 * @member {Number} taxRate
 */
Domain.prototype['taxRate'] = undefined;






export default Domain;

