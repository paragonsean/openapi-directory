/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorMessage from '../model/ErrorMessage';
import RecommendationsArticle from '../model/RecommendationsArticle';

/**
* Recommendations service.
* @module api/RecommendationsApi
* @version v1.0
*/
export default class RecommendationsApi {

    /**
    * Constructs a new RecommendationsApi. 
    * @alias module:api/RecommendationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recommendationsArticleIdsGet operation.
     * @callback module:api/RecommendationsApi~recommendationsArticleIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecommendationsArticle>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommendations by articleId
     * Zalando API Recommendations Schema
     * @param {Array.<String>} articleIds To get Recommendations by articleIds.
     * @param {Object} opts Optional parameters
     * @param {String} [maxResults] To get maximum results of Recommendations by articleId.
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/RecommendationsApi~recommendationsArticleIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecommendationsArticle>}
     */
    recommendationsArticleIdsGet(articleIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleIds' is set
      if (articleIds === undefined || articleIds === null) {
        throw new Error("Missing the required parameter 'articleIds' when calling recommendationsArticleIdsGet");
      }

      let pathParams = {
        'articleIds': articleIds
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RecommendationsArticle];
      return this.apiClient.callApi(
        '/recommendations/{articleIds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
