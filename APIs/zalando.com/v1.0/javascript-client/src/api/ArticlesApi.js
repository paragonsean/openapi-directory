/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Article from '../model/Article';
import ArticleMedia from '../model/ArticleMedia';
import ArticleReview from '../model/ArticleReview';
import ArticleReviews from '../model/ArticleReviews';
import ArticleReviewsSummaries from '../model/ArticleReviewsSummaries';
import ArticleReviewsSummary from '../model/ArticleReviewsSummary';
import ArticleUnit from '../model/ArticleUnit';
import Articles from '../model/Articles';
import ErrorMessage from '../model/ErrorMessage';

/**
* Articles service.
* @module api/ArticlesApi
* @version v1.0
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the articleReviewsGet operation.
     * @callback module:api/ArticlesApi~articleReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReviews} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article Reviews
     * Zalando API Article Reviews Schema
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [articleId] Article IDs. A list of config SKUs for which the article reviews will be returned. Required if articleModelId is empty. 
     * @param {Array.<String>} [articleModelId] Article model IDs. A list of model SKUs for which the article reviews will be returned. Required if articleId is empty. 
     * @param {String} [minStarRating] To get reviews with minimum star rating.
     * @param {String} [maxStarRating] To get reviews with maximum star rating.
     * @param {module:model/String} [sort = 'newest')] articles are sorted on reviews provided by customers (eg: best)
     * @param {String} [page] to request with required page number or pagination
     * @param {String} [pageSize] to request with required page size in a page
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articleReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReviews}
     */
    articleReviewsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'articleId': this.apiClient.buildCollectionParam(opts['articleId'], 'multi'),
        'articleModelId': this.apiClient.buildCollectionParam(opts['articleModelId'], 'multi'),
        'minStarRating': opts['minStarRating'],
        'maxStarRating': opts['maxStarRating'],
        'sort': opts['sort'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReviews;
      return this.apiClient.callApi(
        '/article-reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleReviewsReviewIdGet operation.
     * @callback module:api/ArticlesApi~articleReviewsReviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article Reviews by reviewId
     * Zalando API ArticleReviews Schema
     * @param {String} reviewId To get unique review by review Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articleReviewsReviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReview}
     */
    articleReviewsReviewIdGet(reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling articleReviewsReviewIdGet");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReview;
      return this.apiClient.callApi(
        '/article-reviews/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleReviewsSummariesArticleModelIdGet operation.
     * @callback module:api/ArticlesApi~articleReviewsSummariesArticleModelIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReviewsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article Reviews Summaries by articleModelId
     * Zalando API ArticleReviewsSummaries Schema
     * @param {String} articleModelId To get unique reviews summary from article model Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articleReviewsSummariesArticleModelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReviewsSummary}
     */
    articleReviewsSummariesArticleModelIdGet(articleModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleModelId' is set
      if (articleModelId === undefined || articleModelId === null) {
        throw new Error("Missing the required parameter 'articleModelId' when calling articleReviewsSummariesArticleModelIdGet");
      }

      let pathParams = {
        'articleModelId': articleModelId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReviewsSummary;
      return this.apiClient.callApi(
        '/article-reviews-summaries/{articleModelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleReviewsSummariesGet operation.
     * @callback module:api/ArticlesApi~articleReviewsSummariesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReviewsSummaries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article Reviews Summaries
     * Zalando API Article Reviews Summaries Schema
     * @param {Array.<String>} articleModelId Article model IDs. A list of model SKUs for which the article review summaries will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [page] to request with required page number or pagination
     * @param {String} [pageSize] to request with required page size in a page
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articleReviewsSummariesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReviewsSummaries}
     */
    articleReviewsSummariesGet(articleModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleModelId' is set
      if (articleModelId === undefined || articleModelId === null) {
        throw new Error("Missing the required parameter 'articleModelId' when calling articleReviewsSummariesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'articleModelId': this.apiClient.buildCollectionParam(articleModelId, 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReviewsSummaries;
      return this.apiClient.callApi(
        '/article-reviews-summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article by articleId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    articlesArticleIdGet(articleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdGet");
      }

      let pathParams = {
        'articleId': articleId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Article;
      return this.apiClient.callApi(
        '/articles/{articleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdMediaGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdMediaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleMedia} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article media by articleId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id media.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdMediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleMedia}
     */
    articlesArticleIdMediaGet(articleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdMediaGet");
      }

      let pathParams = {
        'articleId': articleId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleMedia;
      return this.apiClient.callApi(
        '/articles/{articleId}/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdReviewsGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReviews} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article reviews by articleId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id reviews.
     * @param {Object} opts Optional parameters
     * @param {String} [minStarRating] To get reviews with minimum star rating.
     * @param {String} [maxStarRating] To get reviews with maximum star rating.
     * @param {module:model/String} [sort = 'newest')] articles are sorted on reviews provided by customers (eg: best)
     * @param {String} [page] to request with required page number or pagination
     * @param {String} [pageSize] to request with required page size in a page
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReviews}
     */
    articlesArticleIdReviewsGet(articleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdReviewsGet");
      }

      let pathParams = {
        'articleId': articleId
      };
      let queryParams = {
        'minStarRating': opts['minStarRating'],
        'maxStarRating': opts['maxStarRating'],
        'sort': opts['sort'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReviews;
      return this.apiClient.callApi(
        '/articles/{articleId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdReviewsSummaryGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdReviewsSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleReviewsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article reviews summary by articleId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id reviews summary.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdReviewsSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleReviewsSummary}
     */
    articlesArticleIdReviewsSummaryGet(articleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdReviewsSummaryGet");
      }

      let pathParams = {
        'articleId': articleId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleReviewsSummary;
      return this.apiClient.callApi(
        '/articles/{articleId}/reviews-summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdUnitsGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdUnitsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleUnit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article units by articleId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id units.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdUnitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleUnit>}
     */
    articlesArticleIdUnitsGet(articleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdUnitsGet");
      }

      let pathParams = {
        'articleId': articleId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleUnit];
      return this.apiClient.callApi(
        '/articles/{articleId}/units', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesArticleIdUnitsUnitIdGet operation.
     * @callback module:api/ArticlesApi~articlesArticleIdUnitsUnitIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Article units by articleId snd unitId
     * Zalando API Article Schema
     * @param {String} articleId To get unique article for article Id.
     * @param {String} unitId To get unique article for article Id unit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesArticleIdUnitsUnitIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleUnit}
     */
    articlesArticleIdUnitsUnitIdGet(articleId, unitId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articlesArticleIdUnitsUnitIdGet");
      }
      // verify the required parameter 'unitId' is set
      if (unitId === undefined || unitId === null) {
        throw new Error("Missing the required parameter 'unitId' when calling articlesArticleIdUnitsUnitIdGet");
      }

      let pathParams = {
        'articleId': articleId,
        'unitId': unitId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleUnit;
      return this.apiClient.callApi(
        '/articles/{articleId}/units/{unitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesGet operation.
     * @callback module:api/ArticlesApi~articlesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Articles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Articles
     * Search for articles based on various different possible filter like e.g. the `brandFamily`, the `catagory` or a specific `color`. See [Filters](https://todo) for a list of all available filter options.  The default `pageSize` for responses is set to `20`. You can add a `pageSize` request parameter to adjust that. Please keep in mind that the maximum `pageSize` for this resource is `200`.  The endpoint also supports reducing the fields returned for each article via the `fields` parameter. Please refer to [fields parameter](https://todo) for more details.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [articleId] The `articleIds` to use use for filtering.  One or more `articleIds` might be used as a filter criteria. Submit multiple `articleId` request parameters for more than one to be used. They will be treated as `OR` criteria.
     * @param {Array.<String>} [articleModelId] filters by article ModelId
     * @param {Array.<String>} [articleUnitId] filters by article's unit id
     * @param {Array.<module:model/String>} [activationDate] period or time the articles are activated for selling in the shop
     * @param {Array.<module:model/String>} [ageGroup] filters by age group (eg: kids)
     * @param {Array.<module:model/String>} [assortmentArea] filters by classification of articles (eg: maternity) 
     * @param {Array.<String>} [brand] filters by brand key given by user (eg: SA5)
     * @param {Array.<String>} [brandfamily] filters by brand family key (eg: nike) 
     * @param {Array.<String>} [category] filters by category (eg: Socks, Rain Coats)
     * @param {Array.<module:model/String>} [color] filters by color (eg: red, blue)
     * @param {Array.<module:model/String>} [den] filters by den 
     * @param {Array.<module:model/String>} [filling] filters by different kinds of garment filling materials (eg: satin, wolle)
     * @param {String} [fullText] filters by text (eg: search by 'as' gives result with articles of brand Sass)
     * @param {Array.<module:model/String>} [gender] filters by gender
     * @param {Array.<module:model/String>} [heelForm] filters by heel form (eg: flat)
     * @param {Array.<module:model/String>} [heelHeight] filters by height of the heel size or length (eg: xs)
     * @param {String} [length] filters by garments length (eg: 3/4 length, knee-length)
     * @param {Array.<module:model/String>} [occasion] filters by type of occasion (eg: party, business)
     * @param {Array.<module:model/String>} [pattern] filters by pattern on the garments (eg: animal print, plain)
     * @param {String} [price] filters all articles in price range (eg: 9-90)
     * @param {Array.<module:model/String>} [sale] filters discounted articles marked as sale
     * @param {Array.<module:model/String>} [season] filters by season (Autumn/Winter or Spring/Summer)
     * @param {Array.<module:model/String>} [shaftHeight] filters by shaft height (eg: s, xs)
     * @param {Array.<module:model/String>} [shaftWidth] filters by shaft width (eg: s, l)
     * @param {Array.<module:model/String>} [shirtCollar] filters by shirt collar styles (eg: low V neck, lined collar)
     * @param {Array.<module:model/String>} [shoeFastener] filters by shoe fastener types (eg: buckle, lacing)
     * @param {Array.<module:model/String>} [shoeToecap] filters by shoe toe cap variants (eg: pointed, square)
     * @param {Array.<module:model/String>} [shopArea] filters by classification of articles
     * @param {String} [size] filters by size
     * @param {Array.<module:model/String>} [sports] filters by different sport activities (eg: football)
     * @param {Array.<module:model/String>} [technology] filters by technology used to produce the articles
     * @param {Array.<module:model/String>} [trouserRise] filters by trouser rise
     * @param {Array.<module:model/String>} [upperMaterial] filters by different type of upper material used on garments (eg: lace)
     * @param {Array.<module:model/String>} [volume] filters by volume
     * @param {String} [page] to request with required page number or pagination
     * @param {String} [pageSize] to request with required page size in a page
     * @param {module:model/String} [sort] sorting order (eg: popularity)
     * @param {module:model/String} [acceptLanguage] Specify which Shop to use.  A standard `Accept-Language` header which specifies the shop that should be used. E.g. `de-DE` will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and `de-AT` will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries.
     * @param {Array.<String>} [fields] Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted
     * @param {module:api/ArticlesApi~articlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Articles}
     */
    articlesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'articleId': this.apiClient.buildCollectionParam(opts['articleId'], 'multi'),
        'articleModelId': this.apiClient.buildCollectionParam(opts['articleModelId'], 'multi'),
        'articleUnitId': this.apiClient.buildCollectionParam(opts['articleUnitId'], 'multi'),
        'activationDate': this.apiClient.buildCollectionParam(opts['activationDate'], 'multi'),
        'ageGroup': this.apiClient.buildCollectionParam(opts['ageGroup'], 'multi'),
        'assortmentArea': this.apiClient.buildCollectionParam(opts['assortmentArea'], 'multi'),
        'brand': this.apiClient.buildCollectionParam(opts['brand'], 'multi'),
        'brandfamily': this.apiClient.buildCollectionParam(opts['brandfamily'], 'multi'),
        'category': this.apiClient.buildCollectionParam(opts['category'], 'multi'),
        'color': this.apiClient.buildCollectionParam(opts['color'], 'multi'),
        'den': this.apiClient.buildCollectionParam(opts['den'], 'multi'),
        'filling': this.apiClient.buildCollectionParam(opts['filling'], 'multi'),
        'fullText': opts['fullText'],
        'gender': this.apiClient.buildCollectionParam(opts['gender'], 'multi'),
        'heelForm': this.apiClient.buildCollectionParam(opts['heelForm'], 'multi'),
        'heelHeight': this.apiClient.buildCollectionParam(opts['heelHeight'], 'multi'),
        'length': opts['length'],
        'occasion': this.apiClient.buildCollectionParam(opts['occasion'], 'multi'),
        'pattern': this.apiClient.buildCollectionParam(opts['pattern'], 'multi'),
        'price': opts['price'],
        'sale': this.apiClient.buildCollectionParam(opts['sale'], 'csv'),
        'season': this.apiClient.buildCollectionParam(opts['season'], 'multi'),
        'shaftHeight': this.apiClient.buildCollectionParam(opts['shaftHeight'], 'multi'),
        'shaftWidth': this.apiClient.buildCollectionParam(opts['shaftWidth'], 'multi'),
        'shirtCollar': this.apiClient.buildCollectionParam(opts['shirtCollar'], 'multi'),
        'shoeFastener': this.apiClient.buildCollectionParam(opts['shoeFastener'], 'multi'),
        'shoeToecap': this.apiClient.buildCollectionParam(opts['shoeToecap'], 'multi'),
        'shopArea': this.apiClient.buildCollectionParam(opts['shopArea'], 'multi'),
        'size': opts['size'],
        'sports': this.apiClient.buildCollectionParam(opts['sports'], 'multi'),
        'technology': this.apiClient.buildCollectionParam(opts['technology'], 'multi'),
        'trouserRise': this.apiClient.buildCollectionParam(opts['trouserRise'], 'multi'),
        'upperMaterial': this.apiClient.buildCollectionParam(opts['upperMaterial'], 'multi'),
        'volume': this.apiClient.buildCollectionParam(opts['volume'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Articles;
      return this.apiClient.callApi(
        '/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
