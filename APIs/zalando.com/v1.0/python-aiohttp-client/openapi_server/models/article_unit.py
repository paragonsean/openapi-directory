# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_price import ArticlePrice
from openapi_server import util


class ArticleUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, id: str=None, original_price: ArticlePrice=None, partner_id: str=None, price: ArticlePrice=None, size: str=None, stock: int=None):
        """ArticleUnit - a model defined in OpenAPI

        :param available: The available of this ArticleUnit.
        :param id: The id of this ArticleUnit.
        :param original_price: The original_price of this ArticleUnit.
        :param partner_id: The partner_id of this ArticleUnit.
        :param price: The price of this ArticleUnit.
        :param size: The size of this ArticleUnit.
        :param stock: The stock of this ArticleUnit.
        """
        self.openapi_types = {
            'available': bool,
            'id': str,
            'original_price': ArticlePrice,
            'partner_id': str,
            'price': ArticlePrice,
            'size': str,
            'stock': int
        }

        self.attribute_map = {
            'available': 'available',
            'id': 'id',
            'original_price': 'originalPrice',
            'partner_id': 'partnerId',
            'price': 'price',
            'size': 'size',
            'stock': 'stock'
        }

        self._available = available
        self._id = id
        self._original_price = original_price
        self._partner_id = partner_id
        self._price = price
        self._size = size
        self._stock = stock

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article-Unit of this ArticleUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this ArticleUnit.

        availability of the article

        :return: The available of this ArticleUnit.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ArticleUnit.

        availability of the article

        :param available: The available of this ArticleUnit.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def id(self):
        """Gets the id of this ArticleUnit.

        article id (sku)

        :return: The id of this ArticleUnit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArticleUnit.

        article id (sku)

        :param id: The id of this ArticleUnit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def original_price(self):
        """Gets the original_price of this ArticleUnit.


        :return: The original_price of this ArticleUnit.
        :rtype: ArticlePrice
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this ArticleUnit.


        :param original_price: The original_price of this ArticleUnit.
        :type original_price: ArticlePrice
        """
        if original_price is None:
            raise ValueError("Invalid value for `original_price`, must not be `None`")

        self._original_price = original_price

    @property
    def partner_id(self):
        """Gets the partner_id of this ArticleUnit.

        partner id (vendor id) of the article

        :return: The partner_id of this ArticleUnit.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this ArticleUnit.

        partner id (vendor id) of the article

        :param partner_id: The partner_id of this ArticleUnit.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def price(self):
        """Gets the price of this ArticleUnit.


        :return: The price of this ArticleUnit.
        :rtype: ArticlePrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ArticleUnit.


        :param price: The price of this ArticleUnit.
        :type price: ArticlePrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def size(self):
        """Gets the size of this ArticleUnit.

        article size

        :return: The size of this ArticleUnit.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ArticleUnit.

        article size

        :param size: The size of this ArticleUnit.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def stock(self):
        """Gets the stock of this ArticleUnit.

        stock of the article

        :return: The stock of this ArticleUnit.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this ArticleUnit.

        stock of the article

        :param stock: The stock of this ArticleUnit.
        :type stock: int
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")

        self._stock = stock
