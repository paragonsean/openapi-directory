# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invalid_name: bool=None, invalid_values: List[str]=None, key: str=None, name: str=None, value: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param invalid_name: The invalid_name of this ErrorDetail.
        :param invalid_values: The invalid_values of this ErrorDetail.
        :param key: The key of this ErrorDetail.
        :param name: The name of this ErrorDetail.
        :param value: The value of this ErrorDetail.
        """
        self.openapi_types = {
            'invalid_name': bool,
            'invalid_values': List[str],
            'key': str,
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'invalid_name': 'invalidName',
            'invalid_values': 'invalidValues',
            'key': 'key',
            'name': 'name',
            'value': 'value'
        }

        self._invalid_name = invalid_name
        self._invalid_values = invalid_values
        self._key = key
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorDetail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invalid_name(self):
        """Gets the invalid_name of this ErrorDetail.


        :return: The invalid_name of this ErrorDetail.
        :rtype: bool
        """
        return self._invalid_name

    @invalid_name.setter
    def invalid_name(self, invalid_name):
        """Sets the invalid_name of this ErrorDetail.


        :param invalid_name: The invalid_name of this ErrorDetail.
        :type invalid_name: bool
        """

        self._invalid_name = invalid_name

    @property
    def invalid_values(self):
        """Gets the invalid_values of this ErrorDetail.


        :return: The invalid_values of this ErrorDetail.
        :rtype: List[str]
        """
        return self._invalid_values

    @invalid_values.setter
    def invalid_values(self, invalid_values):
        """Sets the invalid_values of this ErrorDetail.


        :param invalid_values: The invalid_values of this ErrorDetail.
        :type invalid_values: List[str]
        """

        self._invalid_values = invalid_values

    @property
    def key(self):
        """Gets the key of this ErrorDetail.


        :return: The key of this ErrorDetail.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ErrorDetail.


        :param key: The key of this ErrorDetail.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ErrorDetail.


        :return: The name of this ErrorDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ErrorDetail.


        :param name: The name of this ErrorDetail.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this ErrorDetail.


        :return: The value of this ErrorDetail.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ErrorDetail.


        :param value: The value of this ErrorDetail.
        :type value: str
        """

        self._value = value
