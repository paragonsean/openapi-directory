# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article import Article
from openapi_server.models.page import Page
from openapi_server import util


class Articles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[Article]=None, page: int=None, size: int=None, total_elements: int=None, total_pages: int=None):
        """Articles - a model defined in OpenAPI

        :param content: The content of this Articles.
        :param page: The page of this Articles.
        :param size: The size of this Articles.
        :param total_elements: The total_elements of this Articles.
        :param total_pages: The total_pages of this Articles.
        """
        self.openapi_types = {
            'content': List[Article],
            'page': int,
            'size': int,
            'total_elements': int,
            'total_pages': int
        }

        self.attribute_map = {
            'content': 'content',
            'page': 'page',
            'size': 'size',
            'total_elements': 'totalElements',
            'total_pages': 'totalPages'
        }

        self._content = content
        self._page = page
        self._size = size
        self._total_elements = total_elements
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Articles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Articles of this Articles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Articles.


        :return: The content of this Articles.
        :rtype: List[Article]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Articles.


        :param content: The content of this Articles.
        :type content: List[Article]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, number of items must be greater than or equal to `0`")

        self._content = content

    @property
    def page(self):
        """Gets the page of this Articles.

        page number

        :return: The page of this Articles.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Articles.

        page number

        :param page: The page of this Articles.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def size(self):
        """Gets the size of this Articles.

        total number of elements in a page

        :return: The size of this Articles.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Articles.

        total number of elements in a page

        :param size: The size of this Articles.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def total_elements(self):
        """Gets the total_elements of this Articles.

        total elements in the response

        :return: The total_elements of this Articles.
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this Articles.

        total elements in the response

        :param total_elements: The total_elements of this Articles.
        :type total_elements: int
        """
        if total_elements is None:
            raise ValueError("Invalid value for `total_elements`, must not be `None`")

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this Articles.

        total number of pages in the response

        :return: The total_pages of this Articles.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Articles.

        total number of pages in the response

        :param total_pages: The total_pages of this Articles.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")

        self._total_pages = total_pages
