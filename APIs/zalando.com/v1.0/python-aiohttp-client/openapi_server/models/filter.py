# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_value import FilterValue
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multi_value: bool=None, name: str=None, type: str=None, values: List[FilterValue]=None):
        """Filter - a model defined in OpenAPI

        :param multi_value: The multi_value of this Filter.
        :param name: The name of this Filter.
        :param type: The type of this Filter.
        :param values: The values of this Filter.
        """
        self.openapi_types = {
            'multi_value': bool,
            'name': str,
            'type': str,
            'values': List[FilterValue]
        }

        self.attribute_map = {
            'multi_value': 'multiValue',
            'name': 'name',
            'type': 'type',
            'values': 'values'
        }

        self._multi_value = multi_value
        self._name = name
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multi_value(self):
        """Gets the multi_value of this Filter.

        can this filter be used multiple times with different values in one search request

        :return: The multi_value of this Filter.
        :rtype: bool
        """
        return self._multi_value

    @multi_value.setter
    def multi_value(self, multi_value):
        """Sets the multi_value of this Filter.

        can this filter be used multiple times with different values in one search request

        :param multi_value: The multi_value of this Filter.
        :type multi_value: bool
        """
        if multi_value is None:
            raise ValueError("Invalid value for `multi_value`, must not be `None`")

        self._multi_value = multi_value

    @property
    def name(self):
        """Gets the name of this Filter.

        The unique name for a filter

        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.

        The unique name for a filter

        :param name: The name of this Filter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Filter.

        filter enum types

        :return: The type of this Filter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Filter.

        filter enum types

        :param type: The type of this Filter.
        :type type: str
        """
        allowed_values = ["SKU", "KEY", "ENUM", "STRING", "RANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def values(self):
        """Gets the values of this Filter.

        only if type is 'enum' this list contains all possible filter values

        :return: The values of this Filter.
        :rtype: List[FilterValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Filter.

        only if type is 'enum' this list contains all possible filter values

        :param values: The values of this Filter.
        :type values: List[FilterValue]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")
        if values is not None and len(values) < 0:
            raise ValueError("Invalid value for `values`, number of items must be greater than or equal to `0`")

        self._values = values
