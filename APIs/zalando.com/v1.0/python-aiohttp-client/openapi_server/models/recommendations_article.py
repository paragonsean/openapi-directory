# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_media import ArticleMedia
from openapi_server import util


class RecommendationsArticle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, media: ArticleMedia=None, model_id: str=None, name: str=None, shop_url: str=None):
        """RecommendationsArticle - a model defined in OpenAPI

        :param id: The id of this RecommendationsArticle.
        :param media: The media of this RecommendationsArticle.
        :param model_id: The model_id of this RecommendationsArticle.
        :param name: The name of this RecommendationsArticle.
        :param shop_url: The shop_url of this RecommendationsArticle.
        """
        self.openapi_types = {
            'id': str,
            'media': ArticleMedia,
            'model_id': str,
            'name': str,
            'shop_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'media': 'media',
            'model_id': 'modelId',
            'name': 'name',
            'shop_url': 'shopUrl'
        }

        self._id = id
        self._media = media
        self._model_id = model_id
        self._name = name
        self._shop_url = shop_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationsArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendations-Article of this RecommendationsArticle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RecommendationsArticle.


        :return: The id of this RecommendationsArticle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecommendationsArticle.


        :param id: The id of this RecommendationsArticle.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def media(self):
        """Gets the media of this RecommendationsArticle.


        :return: The media of this RecommendationsArticle.
        :rtype: ArticleMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this RecommendationsArticle.


        :param media: The media of this RecommendationsArticle.
        :type media: ArticleMedia
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def model_id(self):
        """Gets the model_id of this RecommendationsArticle.


        :return: The model_id of this RecommendationsArticle.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this RecommendationsArticle.


        :param model_id: The model_id of this RecommendationsArticle.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this RecommendationsArticle.


        :return: The name of this RecommendationsArticle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationsArticle.


        :param name: The name of this RecommendationsArticle.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def shop_url(self):
        """Gets the shop_url of this RecommendationsArticle.


        :return: The shop_url of this RecommendationsArticle.
        :rtype: str
        """
        return self._shop_url

    @shop_url.setter
    def shop_url(self, shop_url):
        """Sets the shop_url of this RecommendationsArticle.


        :param shop_url: The shop_url of this RecommendationsArticle.
        :type shop_url: str
        """
        if shop_url is None:
            raise ValueError("Invalid value for `shop_url`, must not be `None`")

        self._shop_url = shop_url
