# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_review_article_size_ratings import ArticleReviewArticleSizeRatings
from openapi_server import util


class ArticleReview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_id: str=None, article_model_id: str=None, article_size_ratings: ArticleReviewArticleSizeRatings=None, created: datetime=None, customer_city: str=None, customer_country: str=None, customer_nickname: str=None, description: str=None, helpful_count: int=None, language: str=None, rating: int=None, recommend: bool=None, review_id: str=None, title: str=None, unhelpful_count: int=None):
        """ArticleReview - a model defined in OpenAPI

        :param article_id: The article_id of this ArticleReview.
        :param article_model_id: The article_model_id of this ArticleReview.
        :param article_size_ratings: The article_size_ratings of this ArticleReview.
        :param created: The created of this ArticleReview.
        :param customer_city: The customer_city of this ArticleReview.
        :param customer_country: The customer_country of this ArticleReview.
        :param customer_nickname: The customer_nickname of this ArticleReview.
        :param description: The description of this ArticleReview.
        :param helpful_count: The helpful_count of this ArticleReview.
        :param language: The language of this ArticleReview.
        :param rating: The rating of this ArticleReview.
        :param recommend: The recommend of this ArticleReview.
        :param review_id: The review_id of this ArticleReview.
        :param title: The title of this ArticleReview.
        :param unhelpful_count: The unhelpful_count of this ArticleReview.
        """
        self.openapi_types = {
            'article_id': str,
            'article_model_id': str,
            'article_size_ratings': ArticleReviewArticleSizeRatings,
            'created': datetime,
            'customer_city': str,
            'customer_country': str,
            'customer_nickname': str,
            'description': str,
            'helpful_count': int,
            'language': str,
            'rating': int,
            'recommend': bool,
            'review_id': str,
            'title': str,
            'unhelpful_count': int
        }

        self.attribute_map = {
            'article_id': 'articleId',
            'article_model_id': 'articleModelId',
            'article_size_ratings': 'articleSizeRatings',
            'created': 'created',
            'customer_city': 'customerCity',
            'customer_country': 'customerCountry',
            'customer_nickname': 'customerNickname',
            'description': 'description',
            'helpful_count': 'helpfulCount',
            'language': 'language',
            'rating': 'rating',
            'recommend': 'recommend',
            'review_id': 'reviewId',
            'title': 'title',
            'unhelpful_count': 'unhelpfulCount'
        }

        self._article_id = article_id
        self._article_model_id = article_model_id
        self._article_size_ratings = article_size_ratings
        self._created = created
        self._customer_city = customer_city
        self._customer_country = customer_country
        self._customer_nickname = customer_nickname
        self._description = description
        self._helpful_count = helpful_count
        self._language = language
        self._rating = rating
        self._recommend = recommend
        self._review_id = review_id
        self._title = title
        self._unhelpful_count = unhelpful_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article-Review of this ArticleReview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_id(self):
        """Gets the article_id of this ArticleReview.


        :return: The article_id of this ArticleReview.
        :rtype: str
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this ArticleReview.


        :param article_id: The article_id of this ArticleReview.
        :type article_id: str
        """
        if article_id is None:
            raise ValueError("Invalid value for `article_id`, must not be `None`")

        self._article_id = article_id

    @property
    def article_model_id(self):
        """Gets the article_model_id of this ArticleReview.


        :return: The article_model_id of this ArticleReview.
        :rtype: str
        """
        return self._article_model_id

    @article_model_id.setter
    def article_model_id(self, article_model_id):
        """Sets the article_model_id of this ArticleReview.


        :param article_model_id: The article_model_id of this ArticleReview.
        :type article_model_id: str
        """
        if article_model_id is None:
            raise ValueError("Invalid value for `article_model_id`, must not be `None`")

        self._article_model_id = article_model_id

    @property
    def article_size_ratings(self):
        """Gets the article_size_ratings of this ArticleReview.


        :return: The article_size_ratings of this ArticleReview.
        :rtype: ArticleReviewArticleSizeRatings
        """
        return self._article_size_ratings

    @article_size_ratings.setter
    def article_size_ratings(self, article_size_ratings):
        """Sets the article_size_ratings of this ArticleReview.


        :param article_size_ratings: The article_size_ratings of this ArticleReview.
        :type article_size_ratings: ArticleReviewArticleSizeRatings
        """

        self._article_size_ratings = article_size_ratings

    @property
    def created(self):
        """Gets the created of this ArticleReview.

        article review created date and time

        :return: The created of this ArticleReview.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ArticleReview.

        article review created date and time

        :param created: The created of this ArticleReview.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def customer_city(self):
        """Gets the customer_city of this ArticleReview.

        customer city in the article review

        :return: The customer_city of this ArticleReview.
        :rtype: str
        """
        return self._customer_city

    @customer_city.setter
    def customer_city(self, customer_city):
        """Sets the customer_city of this ArticleReview.

        customer city in the article review

        :param customer_city: The customer_city of this ArticleReview.
        :type customer_city: str
        """

        self._customer_city = customer_city

    @property
    def customer_country(self):
        """Gets the customer_country of this ArticleReview.

        customer country in the article review

        :return: The customer_country of this ArticleReview.
        :rtype: str
        """
        return self._customer_country

    @customer_country.setter
    def customer_country(self, customer_country):
        """Sets the customer_country of this ArticleReview.

        customer country in the article review

        :param customer_country: The customer_country of this ArticleReview.
        :type customer_country: str
        """

        self._customer_country = customer_country

    @property
    def customer_nickname(self):
        """Gets the customer_nickname of this ArticleReview.

        Customer short name in the article review

        :return: The customer_nickname of this ArticleReview.
        :rtype: str
        """
        return self._customer_nickname

    @customer_nickname.setter
    def customer_nickname(self, customer_nickname):
        """Sets the customer_nickname of this ArticleReview.

        Customer short name in the article review

        :param customer_nickname: The customer_nickname of this ArticleReview.
        :type customer_nickname: str
        """

        self._customer_nickname = customer_nickname

    @property
    def description(self):
        """Gets the description of this ArticleReview.

        description of the article review

        :return: The description of this ArticleReview.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleReview.

        description of the article review

        :param description: The description of this ArticleReview.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def helpful_count(self):
        """Gets the helpful_count of this ArticleReview.

        customer review helpful count of the article

        :return: The helpful_count of this ArticleReview.
        :rtype: int
        """
        return self._helpful_count

    @helpful_count.setter
    def helpful_count(self, helpful_count):
        """Sets the helpful_count of this ArticleReview.

        customer review helpful count of the article

        :param helpful_count: The helpful_count of this ArticleReview.
        :type helpful_count: int
        """
        if helpful_count is None:
            raise ValueError("Invalid value for `helpful_count`, must not be `None`")

        self._helpful_count = helpful_count

    @property
    def language(self):
        """Gets the language of this ArticleReview.

        language in the article review

        :return: The language of this ArticleReview.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ArticleReview.

        language in the article review

        :param language: The language of this ArticleReview.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def rating(self):
        """Gets the rating of this ArticleReview.

        customer rating of the article

        :return: The rating of this ArticleReview.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ArticleReview.

        customer rating of the article

        :param rating: The rating of this ArticleReview.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def recommend(self):
        """Gets the recommend of this ArticleReview.

        customer recommend to the article

        :return: The recommend of this ArticleReview.
        :rtype: bool
        """
        return self._recommend

    @recommend.setter
    def recommend(self, recommend):
        """Sets the recommend of this ArticleReview.

        customer recommend to the article

        :param recommend: The recommend of this ArticleReview.
        :type recommend: bool
        """

        self._recommend = recommend

    @property
    def review_id(self):
        """Gets the review_id of this ArticleReview.

        unique article review id

        :return: The review_id of this ArticleReview.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this ArticleReview.

        unique article review id

        :param review_id: The review_id of this ArticleReview.
        :type review_id: str
        """
        if review_id is None:
            raise ValueError("Invalid value for `review_id`, must not be `None`")

        self._review_id = review_id

    @property
    def title(self):
        """Gets the title of this ArticleReview.

        title in the article review

        :return: The title of this ArticleReview.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleReview.

        title in the article review

        :param title: The title of this ArticleReview.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def unhelpful_count(self):
        """Gets the unhelpful_count of this ArticleReview.

        customer review unhelpful count of the article

        :return: The unhelpful_count of this ArticleReview.
        :rtype: int
        """
        return self._unhelpful_count

    @unhelpful_count.setter
    def unhelpful_count(self, unhelpful_count):
        """Sets the unhelpful_count of this ArticleReview.

        customer review unhelpful count of the article

        :param unhelpful_count: The unhelpful_count of this ArticleReview.
        :type unhelpful_count: int
        """
        if unhelpful_count is None:
            raise ValueError("Invalid value for `unhelpful_count`, must not be `None`")

        self._unhelpful_count = unhelpful_count
