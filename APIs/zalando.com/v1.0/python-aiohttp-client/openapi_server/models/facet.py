# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_value import FacetValue
from openapi_server import util


class Facet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: List[FacetValue]=None, filter: str=None):
        """Facet - a model defined in OpenAPI

        :param facets: The facets of this Facet.
        :param filter: The filter of this Facet.
        """
        self.openapi_types = {
            'facets': List[FacetValue],
            'filter': str
        }

        self.attribute_map = {
            'facets': 'facets',
            'filter': 'filter'
        }

        self._facets = facets
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facet of this Facet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this Facet.

        list of the calculated article counts for each filter value

        :return: The facets of this Facet.
        :rtype: List[FacetValue]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this Facet.

        list of the calculated article counts for each filter value

        :param facets: The facets of this Facet.
        :type facets: List[FacetValue]
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")
        if facets is not None and len(facets) < 1:
            raise ValueError("Invalid value for `facets`, number of items must be greater than or equal to `1`")

        self._facets = facets

    @property
    def filter(self):
        """Gets the filter of this Facet.


        :return: The filter of this Facet.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Facet.


        :param filter: The filter of this Facet.
        :type filter: str
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter
