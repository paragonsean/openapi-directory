# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArticleImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, large_hd_url: str=None, large_url: str=None, medium_hd_url: str=None, medium_url: str=None, order_number: int=None, small_hd_url: str=None, small_url: str=None, thumbnail_hd_url: str=None, type: str=None):
        """ArticleImage - a model defined in OpenAPI

        :param large_hd_url: The large_hd_url of this ArticleImage.
        :param large_url: The large_url of this ArticleImage.
        :param medium_hd_url: The medium_hd_url of this ArticleImage.
        :param medium_url: The medium_url of this ArticleImage.
        :param order_number: The order_number of this ArticleImage.
        :param small_hd_url: The small_hd_url of this ArticleImage.
        :param small_url: The small_url of this ArticleImage.
        :param thumbnail_hd_url: The thumbnail_hd_url of this ArticleImage.
        :param type: The type of this ArticleImage.
        """
        self.openapi_types = {
            'large_hd_url': str,
            'large_url': str,
            'medium_hd_url': str,
            'medium_url': str,
            'order_number': int,
            'small_hd_url': str,
            'small_url': str,
            'thumbnail_hd_url': str,
            'type': str
        }

        self.attribute_map = {
            'large_hd_url': 'largeHdUrl',
            'large_url': 'largeUrl',
            'medium_hd_url': 'mediumHdUrl',
            'medium_url': 'mediumUrl',
            'order_number': 'orderNumber',
            'small_hd_url': 'smallHdUrl',
            'small_url': 'smallUrl',
            'thumbnail_hd_url': 'thumbnailHdUrl',
            'type': 'type'
        }

        self._large_hd_url = large_hd_url
        self._large_url = large_url
        self._medium_hd_url = medium_hd_url
        self._medium_url = medium_url
        self._order_number = order_number
        self._small_hd_url = small_hd_url
        self._small_url = small_url
        self._thumbnail_hd_url = thumbnail_hd_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article-Image of this ArticleImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def large_hd_url(self):
        """Gets the large_hd_url of this ArticleImage.

        large HD image of the article

        :return: The large_hd_url of this ArticleImage.
        :rtype: str
        """
        return self._large_hd_url

    @large_hd_url.setter
    def large_hd_url(self, large_hd_url):
        """Sets the large_hd_url of this ArticleImage.

        large HD image of the article

        :param large_hd_url: The large_hd_url of this ArticleImage.
        :type large_hd_url: str
        """
        if large_hd_url is None:
            raise ValueError("Invalid value for `large_hd_url`, must not be `None`")

        self._large_hd_url = large_hd_url

    @property
    def large_url(self):
        """Gets the large_url of this ArticleImage.

        large image of the article

        :return: The large_url of this ArticleImage.
        :rtype: str
        """
        return self._large_url

    @large_url.setter
    def large_url(self, large_url):
        """Sets the large_url of this ArticleImage.

        large image of the article

        :param large_url: The large_url of this ArticleImage.
        :type large_url: str
        """
        if large_url is None:
            raise ValueError("Invalid value for `large_url`, must not be `None`")

        self._large_url = large_url

    @property
    def medium_hd_url(self):
        """Gets the medium_hd_url of this ArticleImage.

        medium HD image of the article

        :return: The medium_hd_url of this ArticleImage.
        :rtype: str
        """
        return self._medium_hd_url

    @medium_hd_url.setter
    def medium_hd_url(self, medium_hd_url):
        """Sets the medium_hd_url of this ArticleImage.

        medium HD image of the article

        :param medium_hd_url: The medium_hd_url of this ArticleImage.
        :type medium_hd_url: str
        """
        if medium_hd_url is None:
            raise ValueError("Invalid value for `medium_hd_url`, must not be `None`")

        self._medium_hd_url = medium_hd_url

    @property
    def medium_url(self):
        """Gets the medium_url of this ArticleImage.

        medium image of the article

        :return: The medium_url of this ArticleImage.
        :rtype: str
        """
        return self._medium_url

    @medium_url.setter
    def medium_url(self, medium_url):
        """Sets the medium_url of this ArticleImage.

        medium image of the article

        :param medium_url: The medium_url of this ArticleImage.
        :type medium_url: str
        """
        if medium_url is None:
            raise ValueError("Invalid value for `medium_url`, must not be `None`")

        self._medium_url = medium_url

    @property
    def order_number(self):
        """Gets the order_number of this ArticleImage.

        sequence of the article images

        :return: The order_number of this ArticleImage.
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ArticleImage.

        sequence of the article images

        :param order_number: The order_number of this ArticleImage.
        :type order_number: int
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")

        self._order_number = order_number

    @property
    def small_hd_url(self):
        """Gets the small_hd_url of this ArticleImage.

        small HD image of the article

        :return: The small_hd_url of this ArticleImage.
        :rtype: str
        """
        return self._small_hd_url

    @small_hd_url.setter
    def small_hd_url(self, small_hd_url):
        """Sets the small_hd_url of this ArticleImage.

        small HD image of the article

        :param small_hd_url: The small_hd_url of this ArticleImage.
        :type small_hd_url: str
        """
        if small_hd_url is None:
            raise ValueError("Invalid value for `small_hd_url`, must not be `None`")

        self._small_hd_url = small_hd_url

    @property
    def small_url(self):
        """Gets the small_url of this ArticleImage.

        small image of the article

        :return: The small_url of this ArticleImage.
        :rtype: str
        """
        return self._small_url

    @small_url.setter
    def small_url(self, small_url):
        """Sets the small_url of this ArticleImage.

        small image of the article

        :param small_url: The small_url of this ArticleImage.
        :type small_url: str
        """
        if small_url is None:
            raise ValueError("Invalid value for `small_url`, must not be `None`")

        self._small_url = small_url

    @property
    def thumbnail_hd_url(self):
        """Gets the thumbnail_hd_url of this ArticleImage.

        thumbnail HD url of the article images

        :return: The thumbnail_hd_url of this ArticleImage.
        :rtype: str
        """
        return self._thumbnail_hd_url

    @thumbnail_hd_url.setter
    def thumbnail_hd_url(self, thumbnail_hd_url):
        """Sets the thumbnail_hd_url of this ArticleImage.

        thumbnail HD url of the article images

        :param thumbnail_hd_url: The thumbnail_hd_url of this ArticleImage.
        :type thumbnail_hd_url: str
        """
        if thumbnail_hd_url is None:
            raise ValueError("Invalid value for `thumbnail_hd_url`, must not be `None`")

        self._thumbnail_hd_url = thumbnail_hd_url

    @property
    def type(self):
        """Gets the type of this ArticleImage.

        model or non model type article images

        :return: The type of this ArticleImage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArticleImage.

        model or non model type article images

        :param type: The type of this ArticleImage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
