# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_attribute import ArticleAttribute
from openapi_server.models.article_media import ArticleMedia
from openapi_server.models.article_unit import ArticleUnit
from openapi_server.models.brand import Brand
import re
from openapi_server import util


class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_date: datetime=None, additional_infos: List[str]=None, age_groups: List[str]=None, attributes: List[ArticleAttribute]=None, available: bool=None, brand: Brand=None, category_keys: List[str]=None, color: str=None, genders: List[str]=None, id: str=None, media: ArticleMedia=None, model_id: str=None, name: str=None, season: str=None, season_year: str=None, shop_url: str=None, tags: List[str]=None, units: List[ArticleUnit]=None):
        """Article - a model defined in OpenAPI

        :param activation_date: The activation_date of this Article.
        :param additional_infos: The additional_infos of this Article.
        :param age_groups: The age_groups of this Article.
        :param attributes: The attributes of this Article.
        :param available: The available of this Article.
        :param brand: The brand of this Article.
        :param category_keys: The category_keys of this Article.
        :param color: The color of this Article.
        :param genders: The genders of this Article.
        :param id: The id of this Article.
        :param media: The media of this Article.
        :param model_id: The model_id of this Article.
        :param name: The name of this Article.
        :param season: The season of this Article.
        :param season_year: The season_year of this Article.
        :param shop_url: The shop_url of this Article.
        :param tags: The tags of this Article.
        :param units: The units of this Article.
        """
        self.openapi_types = {
            'activation_date': datetime,
            'additional_infos': List[str],
            'age_groups': List[str],
            'attributes': List[ArticleAttribute],
            'available': bool,
            'brand': Brand,
            'category_keys': List[str],
            'color': str,
            'genders': List[str],
            'id': str,
            'media': ArticleMedia,
            'model_id': str,
            'name': str,
            'season': str,
            'season_year': str,
            'shop_url': str,
            'tags': List[str],
            'units': List[ArticleUnit]
        }

        self.attribute_map = {
            'activation_date': 'activationDate',
            'additional_infos': 'additionalInfos',
            'age_groups': 'ageGroups',
            'attributes': 'attributes',
            'available': 'available',
            'brand': 'brand',
            'category_keys': 'categoryKeys',
            'color': 'color',
            'genders': 'genders',
            'id': 'id',
            'media': 'media',
            'model_id': 'modelId',
            'name': 'name',
            'season': 'season',
            'season_year': 'seasonYear',
            'shop_url': 'shopUrl',
            'tags': 'tags',
            'units': 'units'
        }

        self._activation_date = activation_date
        self._additional_infos = additional_infos
        self._age_groups = age_groups
        self._attributes = attributes
        self._available = available
        self._brand = brand
        self._category_keys = category_keys
        self._color = color
        self._genders = genders
        self._id = id
        self._media = media
        self._model_id = model_id
        self._name = name
        self._season = season
        self._season_year = season_year
        self._shop_url = shop_url
        self._tags = tags
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article of this Article.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_date(self):
        """Gets the activation_date of this Article.

        timestamp the article was available in the Zalando webshop

        :return: The activation_date of this Article.
        :rtype: datetime
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this Article.

        timestamp the article was available in the Zalando webshop

        :param activation_date: The activation_date of this Article.
        :type activation_date: datetime
        """
        if activation_date is None:
            raise ValueError("Invalid value for `activation_date`, must not be `None`")

        self._activation_date = activation_date

    @property
    def additional_infos(self):
        """Gets the additional_infos of this Article.

        any additional information of the article 

        :return: The additional_infos of this Article.
        :rtype: List[str]
        """
        return self._additional_infos

    @additional_infos.setter
    def additional_infos(self, additional_infos):
        """Sets the additional_infos of this Article.

        any additional information of the article 

        :param additional_infos: The additional_infos of this Article.
        :type additional_infos: List[str]
        """
        if additional_infos is None:
            raise ValueError("Invalid value for `additional_infos`, must not be `None`")
        if additional_infos is not None and len(additional_infos) < 0:
            raise ValueError("Invalid value for `additional_infos`, number of items must be greater than or equal to `0`")

        self._additional_infos = additional_infos

    @property
    def age_groups(self):
        """Gets the age_groups of this Article.

        age group of the article belongs to

        :return: The age_groups of this Article.
        :rtype: List[str]
        """
        return self._age_groups

    @age_groups.setter
    def age_groups(self, age_groups):
        """Sets the age_groups of this Article.

        age group of the article belongs to

        :param age_groups: The age_groups of this Article.
        :type age_groups: List[str]
        """
        allowed_values = ["BABY", "CHILD", "TEEN", "ADULT"]  # noqa: E501
        if not set(age_groups).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `age_groups` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(age_groups) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._age_groups = age_groups

    @property
    def attributes(self):
        """Gets the attributes of this Article.

        article attributes

        :return: The attributes of this Article.
        :rtype: List[ArticleAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Article.

        article attributes

        :param attributes: The attributes of this Article.
        :type attributes: List[ArticleAttribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")
        if attributes is not None and len(attributes) < 0:
            raise ValueError("Invalid value for `attributes`, number of items must be greater than or equal to `0`")

        self._attributes = attributes

    @property
    def available(self):
        """Gets the available of this Article.

        will be true if at least one article unit is available

        :return: The available of this Article.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Article.

        will be true if at least one article unit is available

        :param available: The available of this Article.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def brand(self):
        """Gets the brand of this Article.


        :return: The brand of this Article.
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Article.


        :param brand: The brand of this Article.
        :type brand: Brand
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def category_keys(self):
        """Gets the category_keys of this Article.

        category keys of the article belongs to

        :return: The category_keys of this Article.
        :rtype: List[str]
        """
        return self._category_keys

    @category_keys.setter
    def category_keys(self, category_keys):
        """Sets the category_keys of this Article.

        category keys of the article belongs to

        :param category_keys: The category_keys of this Article.
        :type category_keys: List[str]
        """
        if category_keys is None:
            raise ValueError("Invalid value for `category_keys`, must not be `None`")
        if category_keys is not None and len(category_keys) < 1:
            raise ValueError("Invalid value for `category_keys`, number of items must be greater than or equal to `1`")

        self._category_keys = category_keys

    @property
    def color(self):
        """Gets the color of this Article.

        the main color of the article

        :return: The color of this Article.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Article.

        the main color of the article

        :param color: The color of this Article.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def genders(self):
        """Gets the genders of this Article.

        gender of the article belongs to

        :return: The genders of this Article.
        :rtype: List[str]
        """
        return self._genders

    @genders.setter
    def genders(self, genders):
        """Sets the genders of this Article.

        gender of the article belongs to

        :param genders: The genders of this Article.
        :type genders: List[str]
        """
        allowed_values = ["MALE", "FEMALE"]  # noqa: E501
        if not set(genders).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `genders` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(genders) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._genders = genders

    @property
    def id(self):
        """Gets the id of this Article.

        unique article id

        :return: The id of this Article.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Article.

        unique article id

        :param id: The id of this Article.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def media(self):
        """Gets the media of this Article.


        :return: The media of this Article.
        :rtype: ArticleMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Article.


        :param media: The media of this Article.
        :type media: ArticleMedia
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def model_id(self):
        """Gets the model_id of this Article.

        unique article model id

        :return: The model_id of this Article.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Article.

        unique article model id

        :param model_id: The model_id of this Article.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this Article.

        article name

        :return: The name of this Article.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Article.

        article name

        :param name: The name of this Article.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def season(self):
        """Gets the season of this Article.

        collection season the article belongs to

        :return: The season of this Article.
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Article.

        collection season the article belongs to

        :param season: The season of this Article.
        :type season: str
        """
        allowed_values = ["SUMMER", "WINTER", "ALL"]  # noqa: E501
        if season not in allowed_values:
            raise ValueError(
                "Invalid value for `season` ({0}), must be one of {1}"
                .format(season, allowed_values)
            )

        self._season = season

    @property
    def season_year(self):
        """Gets the season_year of this Article.

        collection year the article belongs to. Could be either a year or 'ALL'

        :return: The season_year of this Article.
        :rtype: str
        """
        return self._season_year

    @season_year.setter
    def season_year(self, season_year):
        """Sets the season_year of this Article.

        collection year the article belongs to. Could be either a year or 'ALL'

        :param season_year: The season_year of this Article.
        :type season_year: str
        """
        if season_year is None:
            raise ValueError("Invalid value for `season_year`, must not be `None`")
        if season_year is not None and not re.search(r'^ALL$|^20[0-9]{2}$', season_year):
            raise ValueError("Invalid value for `season_year`, must be a follow pattern or equal to `/^ALL$|^20[0-9]{2}$/`")

        self._season_year = season_year

    @property
    def shop_url(self):
        """Gets the shop_url of this Article.

        url of the article within the Zalando webshop

        :return: The shop_url of this Article.
        :rtype: str
        """
        return self._shop_url

    @shop_url.setter
    def shop_url(self, shop_url):
        """Sets the shop_url of this Article.

        url of the article within the Zalando webshop

        :param shop_url: The shop_url of this Article.
        :type shop_url: str
        """
        if shop_url is None:
            raise ValueError("Invalid value for `shop_url`, must not be `None`")

        self._shop_url = shop_url

    @property
    def tags(self):
        """Gets the tags of this Article.


        :return: The tags of this Article.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Article.


        :param tags: The tags of this Article.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def units(self):
        """Gets the units of this Article.

        price of the article

        :return: The units of this Article.
        :rtype: List[ArticleUnit]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Article.

        price of the article

        :param units: The units of this Article.
        :type units: List[ArticleUnit]
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")
        if units is not None and len(units) < 1:
            raise ValueError("Invalid value for `units`, number of items must be greater than or equal to `1`")

        self._units = units
