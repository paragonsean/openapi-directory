# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, currency_code: str=None, language_code: str=None, root_category_key: str=None, shop_url: str=None, tax_rate: float=None):
        """Domain - a model defined in OpenAPI

        :param country_code: The country_code of this Domain.
        :param currency_code: The currency_code of this Domain.
        :param language_code: The language_code of this Domain.
        :param root_category_key: The root_category_key of this Domain.
        :param shop_url: The shop_url of this Domain.
        :param tax_rate: The tax_rate of this Domain.
        """
        self.openapi_types = {
            'country_code': str,
            'currency_code': str,
            'language_code': str,
            'root_category_key': str,
            'shop_url': str,
            'tax_rate': float
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'currency_code': 'currencyCode',
            'language_code': 'languageCode',
            'root_category_key': 'rootCategoryKey',
            'shop_url': 'shopUrl',
            'tax_rate': 'taxRate'
        }

        self._country_code = country_code
        self._currency_code = currency_code
        self._language_code = language_code
        self._root_category_key = root_category_key
        self._shop_url = shop_url
        self._tax_rate = tax_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this Domain.

        domain country code

        :return: The country_code of this Domain.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Domain.

        domain country code

        :param country_code: The country_code of this Domain.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this Domain.

        domain currency code

        :return: The currency_code of this Domain.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Domain.

        domain currency code

        :param currency_code: The currency_code of this Domain.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def language_code(self):
        """Gets the language_code of this Domain.

        domain language

        :return: The language_code of this Domain.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Domain.

        domain language

        :param language_code: The language_code of this Domain.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def root_category_key(self):
        """Gets the root_category_key of this Domain.

        domain root category

        :return: The root_category_key of this Domain.
        :rtype: str
        """
        return self._root_category_key

    @root_category_key.setter
    def root_category_key(self, root_category_key):
        """Sets the root_category_key of this Domain.

        domain root category

        :param root_category_key: The root_category_key of this Domain.
        :type root_category_key: str
        """
        if root_category_key is None:
            raise ValueError("Invalid value for `root_category_key`, must not be `None`")

        self._root_category_key = root_category_key

    @property
    def shop_url(self):
        """Gets the shop_url of this Domain.

        domain specific url

        :return: The shop_url of this Domain.
        :rtype: str
        """
        return self._shop_url

    @shop_url.setter
    def shop_url(self, shop_url):
        """Sets the shop_url of this Domain.

        domain specific url

        :param shop_url: The shop_url of this Domain.
        :type shop_url: str
        """
        if shop_url is None:
            raise ValueError("Invalid value for `shop_url`, must not be `None`")

        self._shop_url = shop_url

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Domain.

        domain tax rate

        :return: The tax_rate of this Domain.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Domain.

        domain tax rate

        :param tax_rate: The tax_rate of this Domain.
        :type tax_rate: float
        """
        if tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")
        if tax_rate is not None and tax_rate >= 1:
            raise ValueError("Invalid value for `tax_rate`, must be a value less than `1`")
        if tax_rate is not None and tax_rate <= 0:
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than `0`")

        self._tax_rate = tax_rate
