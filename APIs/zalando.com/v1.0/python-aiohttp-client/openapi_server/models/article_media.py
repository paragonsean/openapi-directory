# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_image import ArticleImage
from openapi_server import util


class ArticleMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, images: List[ArticleImage]=None):
        """ArticleMedia - a model defined in OpenAPI

        :param images: The images of this ArticleMedia.
        """
        self.openapi_types = {
            'images': List[ArticleImage]
        }

        self.attribute_map = {
            'images': 'images'
        }

        self._images = images

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article-Media of this ArticleMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def images(self):
        """Gets the images of this ArticleMedia.


        :return: The images of this ArticleMedia.
        :rtype: List[ArticleImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ArticleMedia.


        :param images: The images of this ArticleMedia.
        :type images: List[ArticleImage]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")
        if images is not None and len(images) < 0:
            raise ValueError("Invalid value for `images`, number of items must be greater than or equal to `0`")

        self._images = images
