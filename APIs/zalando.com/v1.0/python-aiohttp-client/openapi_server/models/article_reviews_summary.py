# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_reviews_summary_article_size_ratings import ArticleReviewsSummaryArticleSizeRatings
from openapi_server.models.article_reviews_summary_star_rating_distribution import ArticleReviewsSummaryStarRatingDistribution
from openapi_server import util


class ArticleReviewsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_model_id: str=None, article_size_ratings: ArticleReviewsSummaryArticleSizeRatings=None, average_star_rating: float=None, number_of_user_positive_recommendations: int=None, number_of_user_recommendations: int=None, number_of_user_reviews: int=None, star_rating_distribution: ArticleReviewsSummaryStarRatingDistribution=None):
        """ArticleReviewsSummary - a model defined in OpenAPI

        :param article_model_id: The article_model_id of this ArticleReviewsSummary.
        :param article_size_ratings: The article_size_ratings of this ArticleReviewsSummary.
        :param average_star_rating: The average_star_rating of this ArticleReviewsSummary.
        :param number_of_user_positive_recommendations: The number_of_user_positive_recommendations of this ArticleReviewsSummary.
        :param number_of_user_recommendations: The number_of_user_recommendations of this ArticleReviewsSummary.
        :param number_of_user_reviews: The number_of_user_reviews of this ArticleReviewsSummary.
        :param star_rating_distribution: The star_rating_distribution of this ArticleReviewsSummary.
        """
        self.openapi_types = {
            'article_model_id': str,
            'article_size_ratings': ArticleReviewsSummaryArticleSizeRatings,
            'average_star_rating': float,
            'number_of_user_positive_recommendations': int,
            'number_of_user_recommendations': int,
            'number_of_user_reviews': int,
            'star_rating_distribution': ArticleReviewsSummaryStarRatingDistribution
        }

        self.attribute_map = {
            'article_model_id': 'articleModelId',
            'article_size_ratings': 'articleSizeRatings',
            'average_star_rating': 'averageStarRating',
            'number_of_user_positive_recommendations': 'numberOfUserPositiveRecommendations',
            'number_of_user_recommendations': 'numberOfUserRecommendations',
            'number_of_user_reviews': 'numberOfUserReviews',
            'star_rating_distribution': 'starRatingDistribution'
        }

        self._article_model_id = article_model_id
        self._article_size_ratings = article_size_ratings
        self._average_star_rating = average_star_rating
        self._number_of_user_positive_recommendations = number_of_user_positive_recommendations
        self._number_of_user_recommendations = number_of_user_recommendations
        self._number_of_user_reviews = number_of_user_reviews
        self._star_rating_distribution = star_rating_distribution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleReviewsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article-Reviews-Summary of this ArticleReviewsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_model_id(self):
        """Gets the article_model_id of this ArticleReviewsSummary.


        :return: The article_model_id of this ArticleReviewsSummary.
        :rtype: str
        """
        return self._article_model_id

    @article_model_id.setter
    def article_model_id(self, article_model_id):
        """Sets the article_model_id of this ArticleReviewsSummary.


        :param article_model_id: The article_model_id of this ArticleReviewsSummary.
        :type article_model_id: str
        """
        if article_model_id is None:
            raise ValueError("Invalid value for `article_model_id`, must not be `None`")

        self._article_model_id = article_model_id

    @property
    def article_size_ratings(self):
        """Gets the article_size_ratings of this ArticleReviewsSummary.


        :return: The article_size_ratings of this ArticleReviewsSummary.
        :rtype: ArticleReviewsSummaryArticleSizeRatings
        """
        return self._article_size_ratings

    @article_size_ratings.setter
    def article_size_ratings(self, article_size_ratings):
        """Sets the article_size_ratings of this ArticleReviewsSummary.


        :param article_size_ratings: The article_size_ratings of this ArticleReviewsSummary.
        :type article_size_ratings: ArticleReviewsSummaryArticleSizeRatings
        """

        self._article_size_ratings = article_size_ratings

    @property
    def average_star_rating(self):
        """Gets the average_star_rating of this ArticleReviewsSummary.

        average star rating of the article

        :return: The average_star_rating of this ArticleReviewsSummary.
        :rtype: float
        """
        return self._average_star_rating

    @average_star_rating.setter
    def average_star_rating(self, average_star_rating):
        """Sets the average_star_rating of this ArticleReviewsSummary.

        average star rating of the article

        :param average_star_rating: The average_star_rating of this ArticleReviewsSummary.
        :type average_star_rating: float
        """
        if average_star_rating is None:
            raise ValueError("Invalid value for `average_star_rating`, must not be `None`")

        self._average_star_rating = average_star_rating

    @property
    def number_of_user_positive_recommendations(self):
        """Gets the number_of_user_positive_recommendations of this ArticleReviewsSummary.

        number of positive recommendations to the article

        :return: The number_of_user_positive_recommendations of this ArticleReviewsSummary.
        :rtype: int
        """
        return self._number_of_user_positive_recommendations

    @number_of_user_positive_recommendations.setter
    def number_of_user_positive_recommendations(self, number_of_user_positive_recommendations):
        """Sets the number_of_user_positive_recommendations of this ArticleReviewsSummary.

        number of positive recommendations to the article

        :param number_of_user_positive_recommendations: The number_of_user_positive_recommendations of this ArticleReviewsSummary.
        :type number_of_user_positive_recommendations: int
        """
        if number_of_user_positive_recommendations is None:
            raise ValueError("Invalid value for `number_of_user_positive_recommendations`, must not be `None`")

        self._number_of_user_positive_recommendations = number_of_user_positive_recommendations

    @property
    def number_of_user_recommendations(self):
        """Gets the number_of_user_recommendations of this ArticleReviewsSummary.

        number of users recommended to the article

        :return: The number_of_user_recommendations of this ArticleReviewsSummary.
        :rtype: int
        """
        return self._number_of_user_recommendations

    @number_of_user_recommendations.setter
    def number_of_user_recommendations(self, number_of_user_recommendations):
        """Sets the number_of_user_recommendations of this ArticleReviewsSummary.

        number of users recommended to the article

        :param number_of_user_recommendations: The number_of_user_recommendations of this ArticleReviewsSummary.
        :type number_of_user_recommendations: int
        """
        if number_of_user_recommendations is None:
            raise ValueError("Invalid value for `number_of_user_recommendations`, must not be `None`")

        self._number_of_user_recommendations = number_of_user_recommendations

    @property
    def number_of_user_reviews(self):
        """Gets the number_of_user_reviews of this ArticleReviewsSummary.

        number of user reviews of the article

        :return: The number_of_user_reviews of this ArticleReviewsSummary.
        :rtype: int
        """
        return self._number_of_user_reviews

    @number_of_user_reviews.setter
    def number_of_user_reviews(self, number_of_user_reviews):
        """Sets the number_of_user_reviews of this ArticleReviewsSummary.

        number of user reviews of the article

        :param number_of_user_reviews: The number_of_user_reviews of this ArticleReviewsSummary.
        :type number_of_user_reviews: int
        """
        if number_of_user_reviews is None:
            raise ValueError("Invalid value for `number_of_user_reviews`, must not be `None`")

        self._number_of_user_reviews = number_of_user_reviews

    @property
    def star_rating_distribution(self):
        """Gets the star_rating_distribution of this ArticleReviewsSummary.


        :return: The star_rating_distribution of this ArticleReviewsSummary.
        :rtype: ArticleReviewsSummaryStarRatingDistribution
        """
        return self._star_rating_distribution

    @star_rating_distribution.setter
    def star_rating_distribution(self, star_rating_distribution):
        """Sets the star_rating_distribution of this ArticleReviewsSummary.


        :param star_rating_distribution: The star_rating_distribution of this ArticleReviewsSummary.
        :type star_rating_distribution: ArticleReviewsSummaryStarRatingDistribution
        """
        if star_rating_distribution is None:
            raise ValueError("Invalid value for `star_rating_distribution`, must not be `None`")

        self._star_rating_distribution = star_rating_distribution
