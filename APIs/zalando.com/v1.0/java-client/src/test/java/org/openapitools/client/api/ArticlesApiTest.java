/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Article;
import org.openapitools.client.model.ArticleMedia;
import org.openapitools.client.model.ArticleReview;
import org.openapitools.client.model.ArticleReviews;
import org.openapitools.client.model.ArticleReviewsSummaries;
import org.openapitools.client.model.ArticleReviewsSummary;
import org.openapitools.client.model.ArticleUnit;
import org.openapitools.client.model.Articles;
import org.openapitools.client.model.ErrorMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArticlesApi
 */
@Disabled
public class ArticlesApiTest {

    private final ArticlesApi api = new ArticlesApi();

    /**
     * Get Article Reviews
     *
     * Zalando API Article Reviews Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleReviewsGetTest() throws ApiException {
        List<String> articleId = null;
        List<String> articleModelId = null;
        String minStarRating = null;
        String maxStarRating = null;
        String sort = null;
        String page = null;
        String pageSize = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReviews response = api.articleReviewsGet(articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article Reviews by reviewId
     *
     * Zalando API ArticleReviews Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleReviewsReviewIdGetTest() throws ApiException {
        String reviewId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReview response = api.articleReviewsReviewIdGet(reviewId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article Reviews Summaries by articleModelId
     *
     * Zalando API ArticleReviewsSummaries Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleReviewsSummariesArticleModelIdGetTest() throws ApiException {
        String articleModelId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReviewsSummary response = api.articleReviewsSummariesArticleModelIdGet(articleModelId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article Reviews Summaries
     *
     * Zalando API Article Reviews Summaries Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleReviewsSummariesGetTest() throws ApiException {
        List<String> articleModelId = null;
        String page = null;
        String pageSize = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReviewsSummaries response = api.articleReviewsSummariesGet(articleModelId, page, pageSize, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article by articleId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdGetTest() throws ApiException {
        String articleId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        Article response = api.articlesArticleIdGet(articleId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article media by articleId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdMediaGetTest() throws ApiException {
        String articleId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleMedia response = api.articlesArticleIdMediaGet(articleId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article reviews by articleId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdReviewsGetTest() throws ApiException {
        String articleId = null;
        String minStarRating = null;
        String maxStarRating = null;
        String sort = null;
        String page = null;
        String pageSize = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReviews response = api.articlesArticleIdReviewsGet(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article reviews summary by articleId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdReviewsSummaryGetTest() throws ApiException {
        String articleId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleReviewsSummary response = api.articlesArticleIdReviewsSummaryGet(articleId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article units by articleId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdUnitsGetTest() throws ApiException {
        String articleId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        List<ArticleUnit> response = api.articlesArticleIdUnitsGet(articleId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Get Article units by articleId snd unitId
     *
     * Zalando API Article Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesArticleIdUnitsUnitIdGetTest() throws ApiException {
        String articleId = null;
        String unitId = null;
        String acceptLanguage = null;
        List<String> fields = null;
        ArticleUnit response = api.articlesArticleIdUnitsUnitIdGet(articleId, unitId, acceptLanguage, fields);
        // TODO: test validations
    }

    /**
     * Search for Articles
     *
     * Search for articles based on various different possible filter like e.g. the &#x60;brandFamily&#x60;, the &#x60;catagory&#x60; or a specific &#x60;color&#x60;. See [Filters](https://todo) for a list of all available filter options.  The default &#x60;pageSize&#x60; for responses is set to &#x60;20&#x60;. You can add a &#x60;pageSize&#x60; request parameter to adjust that. Please keep in mind that the maximum &#x60;pageSize&#x60; for this resource is &#x60;200&#x60;.  The endpoint also supports reducing the fields returned for each article via the &#x60;fields&#x60; parameter. Please refer to [fields parameter](https://todo) for more details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlesGetTest() throws ApiException {
        List<String> articleId = null;
        List<String> articleModelId = null;
        List<String> articleUnitId = null;
        List<String> activationDate = null;
        List<String> ageGroup = null;
        List<String> assortmentArea = null;
        List<String> brand = null;
        List<String> brandfamily = null;
        List<String> category = null;
        List<String> color = null;
        List<String> den = null;
        List<String> filling = null;
        String fullText = null;
        List<String> gender = null;
        List<String> heelForm = null;
        List<String> heelHeight = null;
        String length = null;
        List<String> occasion = null;
        List<String> pattern = null;
        String price = null;
        List<String> sale = null;
        List<String> season = null;
        List<String> shaftHeight = null;
        List<String> shaftWidth = null;
        List<String> shirtCollar = null;
        List<String> shoeFastener = null;
        List<String> shoeToecap = null;
        List<String> shopArea = null;
        String size = null;
        List<String> sports = null;
        List<String> technology = null;
        List<String> trouserRise = null;
        List<String> upperMaterial = null;
        List<String> volume = null;
        String page = null;
        String pageSize = null;
        String sort = null;
        String acceptLanguage = null;
        List<String> fields = null;
        Articles response = api.articlesGet(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields);
        // TODO: test validations
    }

}
