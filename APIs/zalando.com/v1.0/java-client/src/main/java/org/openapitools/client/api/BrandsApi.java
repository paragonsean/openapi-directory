/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Brand;
import org.openapitools.client.model.Brands;
import org.openapitools.client.model.ErrorMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for brandsGet
     * @param key Request Brand by key (optional)
     * @param name Request Brand by name (optional)
     * @param brandFamilyName Request Brand by brandFamilyName (optional)
     * @param brandFamilyKey Request Brand by brandFamilyKey (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsGetCall(List<String> key, List<String> name, List<String> brandFamilyName, List<String> brandFamilyKey, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "key", key));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (brandFamilyName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brandFamilyName", brandFamilyName));
        }

        if (brandFamilyKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brandFamilyKey", brandFamilyKey));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsGetValidateBeforeCall(List<String> key, List<String> name, List<String> brandFamilyName, List<String> brandFamilyKey, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        return brandsGetCall(key, name, brandFamilyName, brandFamilyKey, page, pageSize, acceptLanguage, fields, _callback);

    }

    /**
     * Shop Brands
     * Zalando API Brands Schema
     * @param key Request Brand by key (optional)
     * @param name Request Brand by name (optional)
     * @param brandFamilyName Request Brand by brandFamilyName (optional)
     * @param brandFamilyKey Request Brand by brandFamilyKey (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Brands
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public Brands brandsGet(List<String> key, List<String> name, List<String> brandFamilyName, List<String> brandFamilyKey, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Brands> localVarResp = brandsGetWithHttpInfo(key, name, brandFamilyName, brandFamilyKey, page, pageSize, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Shop Brands
     * Zalando API Brands Schema
     * @param key Request Brand by key (optional)
     * @param name Request Brand by name (optional)
     * @param brandFamilyName Request Brand by brandFamilyName (optional)
     * @param brandFamilyKey Request Brand by brandFamilyKey (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Brands&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Brands> brandsGetWithHttpInfo(List<String> key, List<String> name, List<String> brandFamilyName, List<String> brandFamilyKey, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = brandsGetValidateBeforeCall(key, name, brandFamilyName, brandFamilyKey, page, pageSize, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Brands>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shop Brands (asynchronously)
     * Zalando API Brands Schema
     * @param key Request Brand by key (optional)
     * @param name Request Brand by name (optional)
     * @param brandFamilyName Request Brand by brandFamilyName (optional)
     * @param brandFamilyKey Request Brand by brandFamilyKey (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brands response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsGetAsync(List<String> key, List<String> name, List<String> brandFamilyName, List<String> brandFamilyKey, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback<Brands> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsGetValidateBeforeCall(key, name, brandFamilyName, brandFamilyKey, page, pageSize, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Brands>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for brandsKeyGet
     * @param key To get unique Brand by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsKeyGetCall(String key, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsKeyGetValidateBeforeCall(String key, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling brandsKeyGet(Async)");
        }

        return brandsKeyGetCall(key, acceptLanguage, fields, _callback);

    }

    /**
     * Get Single Brand by Key
     * Zalando API Brand Schema
     * @param key To get unique Brand by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Brand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found. </td><td>  -  </td></tr>
     </table>
     */
    public Brand brandsKeyGet(String key, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Brand> localVarResp = brandsKeyGetWithHttpInfo(key, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Single Brand by Key
     * Zalando API Brand Schema
     * @param key To get unique Brand by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Brand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Brand> brandsKeyGetWithHttpInfo(String key, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = brandsKeyGetValidateBeforeCall(key, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Single Brand by Key (asynchronously)
     * Zalando API Brand Schema
     * @param key To get unique Brand by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsKeyGetAsync(String key, String acceptLanguage, List<String> fields, final ApiCallback<Brand> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsKeyGetValidateBeforeCall(key, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
