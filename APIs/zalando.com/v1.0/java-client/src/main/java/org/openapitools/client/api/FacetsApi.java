/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorMessage;
import org.openapitools.client.model.Facet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for facetsGet
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facets response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsGetCall(List<String> ageGroup, List<String> articleId, List<String> activationDate, List<String> articleModelId, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGroup != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ageGroup", ageGroup));
        }

        if (articleId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleId", articleId));
        }

        if (activationDate != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "activationDate", activationDate));
        }

        if (articleModelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleModelId", articleModelId));
        }

        if (assortmentArea != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "assortmentArea", assortmentArea));
        }

        if (brand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brand", brand));
        }

        if (brandfamily != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brandfamily", brandfamily));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (den != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "den", den));
        }

        if (filling != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filling", filling));
        }

        if (gender != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "gender", gender));
        }

        if (heelForm != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "heelForm", heelForm));
        }

        if (heelHeight != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "heelHeight", heelHeight));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (occasion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "occasion", occasion));
        }

        if (pattern != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "pattern", pattern));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (sale != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sale", sale));
        }

        if (season != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "season", season));
        }

        if (shaftHeight != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shaftHeight", shaftHeight));
        }

        if (shaftWidth != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shaftWidth", shaftWidth));
        }

        if (shirtCollar != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shirtCollar", shirtCollar));
        }

        if (shoeFastener != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shoeFastener", shoeFastener));
        }

        if (shoeToecap != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shoeToecap", shoeToecap));
        }

        if (shopArea != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shopArea", shopArea));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sports", sports));
        }

        if (technology != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "technology", technology));
        }

        if (trouserRise != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "trouserRise", trouserRise));
        }

        if (upperMaterial != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "upperMaterial", upperMaterial));
        }

        if (volume != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "volume", volume));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facetsGetValidateBeforeCall(List<String> ageGroup, List<String> articleId, List<String> activationDate, List<String> articleModelId, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        return facetsGetCall(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields, _callback);

    }

    /**
     * Shop Facets
     * Zalando API Facets Schema
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return List&lt;Facet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facets response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public List<Facet> facetsGet(List<String> ageGroup, List<String> articleId, List<String> activationDate, List<String> articleModelId, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<List<Facet>> localVarResp = facetsGetWithHttpInfo(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Shop Facets
     * Zalando API Facets Schema
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;List&lt;Facet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facets response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Facet>> facetsGetWithHttpInfo(List<String> ageGroup, List<String> articleId, List<String> activationDate, List<String> articleModelId, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = facetsGetValidateBeforeCall(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<List<Facet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shop Facets (asynchronously)
     * Zalando API Facets Schema
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Facets response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsGetAsync(List<String> ageGroup, List<String> articleId, List<String> activationDate, List<String> articleModelId, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String acceptLanguage, List<String> fields, final ApiCallback<List<Facet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = facetsGetValidateBeforeCall(ageGroup, articleId, activationDate, articleModelId, assortmentArea, brand, brandfamily, category, color, den, filling, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Facet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
