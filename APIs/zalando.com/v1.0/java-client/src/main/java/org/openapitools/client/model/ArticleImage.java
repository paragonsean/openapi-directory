/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zalando API Article Image Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:09.117495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleImage {
  public static final String SERIALIZED_NAME_LARGE_HD_URL = "largeHdUrl";
  @SerializedName(SERIALIZED_NAME_LARGE_HD_URL)
  private URI largeHdUrl;

  public static final String SERIALIZED_NAME_LARGE_URL = "largeUrl";
  @SerializedName(SERIALIZED_NAME_LARGE_URL)
  private URI largeUrl;

  public static final String SERIALIZED_NAME_MEDIUM_HD_URL = "mediumHdUrl";
  @SerializedName(SERIALIZED_NAME_MEDIUM_HD_URL)
  private URI mediumHdUrl;

  public static final String SERIALIZED_NAME_MEDIUM_URL = "mediumUrl";
  @SerializedName(SERIALIZED_NAME_MEDIUM_URL)
  private URI mediumUrl;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private Integer orderNumber;

  public static final String SERIALIZED_NAME_SMALL_HD_URL = "smallHdUrl";
  @SerializedName(SERIALIZED_NAME_SMALL_HD_URL)
  private URI smallHdUrl;

  public static final String SERIALIZED_NAME_SMALL_URL = "smallUrl";
  @SerializedName(SERIALIZED_NAME_SMALL_URL)
  private URI smallUrl;

  public static final String SERIALIZED_NAME_THUMBNAIL_HD_URL = "thumbnailHdUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HD_URL)
  private URI thumbnailHdUrl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ArticleImage() {
  }

  public ArticleImage largeHdUrl(URI largeHdUrl) {
    this.largeHdUrl = largeHdUrl;
    return this;
  }

  /**
   * large HD image of the article
   * @return largeHdUrl
   */
  @javax.annotation.Nonnull
  public URI getLargeHdUrl() {
    return largeHdUrl;
  }

  public void setLargeHdUrl(URI largeHdUrl) {
    this.largeHdUrl = largeHdUrl;
  }


  public ArticleImage largeUrl(URI largeUrl) {
    this.largeUrl = largeUrl;
    return this;
  }

  /**
   * large image of the article
   * @return largeUrl
   */
  @javax.annotation.Nonnull
  public URI getLargeUrl() {
    return largeUrl;
  }

  public void setLargeUrl(URI largeUrl) {
    this.largeUrl = largeUrl;
  }


  public ArticleImage mediumHdUrl(URI mediumHdUrl) {
    this.mediumHdUrl = mediumHdUrl;
    return this;
  }

  /**
   * medium HD image of the article
   * @return mediumHdUrl
   */
  @javax.annotation.Nonnull
  public URI getMediumHdUrl() {
    return mediumHdUrl;
  }

  public void setMediumHdUrl(URI mediumHdUrl) {
    this.mediumHdUrl = mediumHdUrl;
  }


  public ArticleImage mediumUrl(URI mediumUrl) {
    this.mediumUrl = mediumUrl;
    return this;
  }

  /**
   * medium image of the article
   * @return mediumUrl
   */
  @javax.annotation.Nonnull
  public URI getMediumUrl() {
    return mediumUrl;
  }

  public void setMediumUrl(URI mediumUrl) {
    this.mediumUrl = mediumUrl;
  }


  public ArticleImage orderNumber(Integer orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * sequence of the article images
   * @return orderNumber
   */
  @javax.annotation.Nonnull
  public Integer getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(Integer orderNumber) {
    this.orderNumber = orderNumber;
  }


  public ArticleImage smallHdUrl(URI smallHdUrl) {
    this.smallHdUrl = smallHdUrl;
    return this;
  }

  /**
   * small HD image of the article
   * @return smallHdUrl
   */
  @javax.annotation.Nonnull
  public URI getSmallHdUrl() {
    return smallHdUrl;
  }

  public void setSmallHdUrl(URI smallHdUrl) {
    this.smallHdUrl = smallHdUrl;
  }


  public ArticleImage smallUrl(URI smallUrl) {
    this.smallUrl = smallUrl;
    return this;
  }

  /**
   * small image of the article
   * @return smallUrl
   */
  @javax.annotation.Nonnull
  public URI getSmallUrl() {
    return smallUrl;
  }

  public void setSmallUrl(URI smallUrl) {
    this.smallUrl = smallUrl;
  }


  public ArticleImage thumbnailHdUrl(URI thumbnailHdUrl) {
    this.thumbnailHdUrl = thumbnailHdUrl;
    return this;
  }

  /**
   * thumbnail HD url of the article images
   * @return thumbnailHdUrl
   */
  @javax.annotation.Nonnull
  public URI getThumbnailHdUrl() {
    return thumbnailHdUrl;
  }

  public void setThumbnailHdUrl(URI thumbnailHdUrl) {
    this.thumbnailHdUrl = thumbnailHdUrl;
  }


  public ArticleImage type(String type) {
    this.type = type;
    return this;
  }

  /**
   * model or non model type article images
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleImage articleImage = (ArticleImage) o;
    return Objects.equals(this.largeHdUrl, articleImage.largeHdUrl) &&
        Objects.equals(this.largeUrl, articleImage.largeUrl) &&
        Objects.equals(this.mediumHdUrl, articleImage.mediumHdUrl) &&
        Objects.equals(this.mediumUrl, articleImage.mediumUrl) &&
        Objects.equals(this.orderNumber, articleImage.orderNumber) &&
        Objects.equals(this.smallHdUrl, articleImage.smallHdUrl) &&
        Objects.equals(this.smallUrl, articleImage.smallUrl) &&
        Objects.equals(this.thumbnailHdUrl, articleImage.thumbnailHdUrl) &&
        Objects.equals(this.type, articleImage.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(largeHdUrl, largeUrl, mediumHdUrl, mediumUrl, orderNumber, smallHdUrl, smallUrl, thumbnailHdUrl, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleImage {\n");
    sb.append("    largeHdUrl: ").append(toIndentedString(largeHdUrl)).append("\n");
    sb.append("    largeUrl: ").append(toIndentedString(largeUrl)).append("\n");
    sb.append("    mediumHdUrl: ").append(toIndentedString(mediumHdUrl)).append("\n");
    sb.append("    mediumUrl: ").append(toIndentedString(mediumUrl)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    smallHdUrl: ").append(toIndentedString(smallHdUrl)).append("\n");
    sb.append("    smallUrl: ").append(toIndentedString(smallUrl)).append("\n");
    sb.append("    thumbnailHdUrl: ").append(toIndentedString(thumbnailHdUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("largeHdUrl");
    openapiFields.add("largeUrl");
    openapiFields.add("mediumHdUrl");
    openapiFields.add("mediumUrl");
    openapiFields.add("orderNumber");
    openapiFields.add("smallHdUrl");
    openapiFields.add("smallUrl");
    openapiFields.add("thumbnailHdUrl");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("largeHdUrl");
    openapiRequiredFields.add("largeUrl");
    openapiRequiredFields.add("mediumHdUrl");
    openapiRequiredFields.add("mediumUrl");
    openapiRequiredFields.add("orderNumber");
    openapiRequiredFields.add("smallHdUrl");
    openapiRequiredFields.add("smallUrl");
    openapiRequiredFields.add("thumbnailHdUrl");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleImage is not found in the empty JSON string", ArticleImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleImage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("largeHdUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeHdUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeHdUrl").toString()));
      }
      if (!jsonObj.get("largeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeUrl").toString()));
      }
      if (!jsonObj.get("mediumHdUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediumHdUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediumHdUrl").toString()));
      }
      if (!jsonObj.get("mediumUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediumUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediumUrl").toString()));
      }
      if (!jsonObj.get("smallHdUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallHdUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallHdUrl").toString()));
      }
      if (!jsonObj.get("smallUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallUrl").toString()));
      }
      if (!jsonObj.get("thumbnailHdUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailHdUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailHdUrl").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleImage.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleImage>() {
           @Override
           public void write(JsonWriter out, ArticleImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleImage
   * @throws IOException if the JSON string is invalid with respect to ArticleImage
   */
  public static ArticleImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleImage.class);
  }

  /**
   * Convert an instance of ArticleImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

