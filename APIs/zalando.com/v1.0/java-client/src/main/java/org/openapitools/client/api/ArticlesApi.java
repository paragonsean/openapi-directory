/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Article;
import org.openapitools.client.model.ArticleMedia;
import org.openapitools.client.model.ArticleReview;
import org.openapitools.client.model.ArticleReviews;
import org.openapitools.client.model.ArticleReviewsSummaries;
import org.openapitools.client.model.ArticleReviewsSummary;
import org.openapitools.client.model.ArticleUnit;
import org.openapitools.client.model.Articles;
import org.openapitools.client.model.ErrorMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArticlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArticlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArticlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for articleReviewsGet
     * @param articleId Article IDs. A list of config SKUs for which the article reviews will be returned. Required if articleModelId is empty.  (optional)
     * @param articleModelId Article model IDs. A list of model SKUs for which the article reviews will be returned. Required if articleId is empty.  (optional)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsGetCall(List<String> articleId, List<String> articleModelId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/article-reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleId", articleId));
        }

        if (articleModelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleModelId", articleModelId));
        }

        if (minStarRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minStarRating", minStarRating));
        }

        if (maxStarRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxStarRating", maxStarRating));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleReviewsGetValidateBeforeCall(List<String> articleId, List<String> articleModelId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        return articleReviewsGetCall(articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article Reviews
     * Zalando API Article Reviews Schema
     * @param articleId Article IDs. A list of config SKUs for which the article reviews will be returned. Required if articleModelId is empty.  (optional)
     * @param articleModelId Article model IDs. A list of model SKUs for which the article reviews will be returned. Required if articleId is empty.  (optional)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReviews
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReviews articleReviewsGet(List<String> articleId, List<String> articleModelId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReviews> localVarResp = articleReviewsGetWithHttpInfo(articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article Reviews
     * Zalando API Article Reviews Schema
     * @param articleId Article IDs. A list of config SKUs for which the article reviews will be returned. Required if articleModelId is empty.  (optional)
     * @param articleModelId Article model IDs. A list of model SKUs for which the article reviews will be returned. Required if articleId is empty.  (optional)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReviews&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReviews> articleReviewsGetWithHttpInfo(List<String> articleId, List<String> articleModelId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articleReviewsGetValidateBeforeCall(articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReviews>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article Reviews (asynchronously)
     * Zalando API Article Reviews Schema
     * @param articleId Article IDs. A list of config SKUs for which the article reviews will be returned. Required if articleModelId is empty.  (optional)
     * @param articleModelId Article model IDs. A list of model SKUs for which the article reviews will be returned. Required if articleId is empty.  (optional)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsGetAsync(List<String> articleId, List<String> articleModelId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReviews> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleReviewsGetValidateBeforeCall(articleId, articleModelId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReviews>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleReviewsReviewIdGet
     * @param reviewId To get unique review by review Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews by reviewId response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsReviewIdGetCall(String reviewId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/article-reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleReviewsReviewIdGetValidateBeforeCall(String reviewId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling articleReviewsReviewIdGet(Async)");
        }

        return articleReviewsReviewIdGetCall(reviewId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article Reviews by reviewId
     * Zalando API ArticleReviews Schema
     * @param reviewId To get unique review by review Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews by reviewId response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReview articleReviewsReviewIdGet(String reviewId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReview> localVarResp = articleReviewsReviewIdGetWithHttpInfo(reviewId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article Reviews by reviewId
     * Zalando API ArticleReviews Schema
     * @param reviewId To get unique review by review Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews by reviewId response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReview> articleReviewsReviewIdGetWithHttpInfo(String reviewId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articleReviewsReviewIdGetValidateBeforeCall(reviewId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article Reviews by reviewId (asynchronously)
     * Zalando API ArticleReviews Schema
     * @param reviewId To get unique review by review Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews by reviewId response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsReviewIdGetAsync(String reviewId, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleReviewsReviewIdGetValidateBeforeCall(reviewId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleReviewsSummariesArticleModelIdGet
     * @param articleModelId To get unique reviews summary from article model Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries by articleModelId response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsSummariesArticleModelIdGetCall(String articleModelId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/article-reviews-summaries/{articleModelId}"
            .replace("{" + "articleModelId" + "}", localVarApiClient.escapeString(articleModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleReviewsSummariesArticleModelIdGetValidateBeforeCall(String articleModelId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleModelId' is set
        if (articleModelId == null) {
            throw new ApiException("Missing the required parameter 'articleModelId' when calling articleReviewsSummariesArticleModelIdGet(Async)");
        }

        return articleReviewsSummariesArticleModelIdGetCall(articleModelId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article Reviews Summaries by articleModelId
     * Zalando API ArticleReviewsSummaries Schema
     * @param articleModelId To get unique reviews summary from article model Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReviewsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries by articleModelId response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReviewsSummary articleReviewsSummariesArticleModelIdGet(String articleModelId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReviewsSummary> localVarResp = articleReviewsSummariesArticleModelIdGetWithHttpInfo(articleModelId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article Reviews Summaries by articleModelId
     * Zalando API ArticleReviewsSummaries Schema
     * @param articleModelId To get unique reviews summary from article model Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReviewsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries by articleModelId response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReviewsSummary> articleReviewsSummariesArticleModelIdGetWithHttpInfo(String articleModelId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articleReviewsSummariesArticleModelIdGetValidateBeforeCall(articleModelId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article Reviews Summaries by articleModelId (asynchronously)
     * Zalando API ArticleReviewsSummaries Schema
     * @param articleModelId To get unique reviews summary from article model Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries by articleModelId response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsSummariesArticleModelIdGetAsync(String articleModelId, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReviewsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleReviewsSummariesArticleModelIdGetValidateBeforeCall(articleModelId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleReviewsSummariesGet
     * @param articleModelId Article model IDs. A list of model SKUs for which the article review summaries will be returned. (required)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsSummariesGetCall(List<String> articleModelId, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/article-reviews-summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleModelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleModelId", articleModelId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleReviewsSummariesGetValidateBeforeCall(List<String> articleModelId, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleModelId' is set
        if (articleModelId == null) {
            throw new ApiException("Missing the required parameter 'articleModelId' when calling articleReviewsSummariesGet(Async)");
        }

        return articleReviewsSummariesGetCall(articleModelId, page, pageSize, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article Reviews Summaries
     * Zalando API Article Reviews Summaries Schema
     * @param articleModelId Article model IDs. A list of model SKUs for which the article review summaries will be returned. (required)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReviewsSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReviewsSummaries articleReviewsSummariesGet(List<String> articleModelId, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReviewsSummaries> localVarResp = articleReviewsSummariesGetWithHttpInfo(articleModelId, page, pageSize, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article Reviews Summaries
     * Zalando API Article Reviews Summaries Schema
     * @param articleModelId Article model IDs. A list of model SKUs for which the article review summaries will be returned. (required)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReviewsSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReviewsSummaries> articleReviewsSummariesGetWithHttpInfo(List<String> articleModelId, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articleReviewsSummariesGetValidateBeforeCall(articleModelId, page, pageSize, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article Reviews Summaries (asynchronously)
     * Zalando API Article Reviews Summaries Schema
     * @param articleModelId Article model IDs. A list of model SKUs for which the article review summaries will be returned. (required)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles Reviews Summaries response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleReviewsSummariesGetAsync(List<String> articleModelId, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReviewsSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleReviewsSummariesGetValidateBeforeCall(articleModelId, page, pageSize, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdGet
     * @param articleId To get unique article for article Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdGetCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdGetValidateBeforeCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdGet(Async)");
        }

        return articlesArticleIdGetCall(articleId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Article
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public Article articlesArticleIdGet(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Article> localVarResp = articlesArticleIdGetWithHttpInfo(articleId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Article&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Article> articlesArticleIdGetWithHttpInfo(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdGetValidateBeforeCall(articleId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Article>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article by articleId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdGetAsync(String articleId, String acceptLanguage, List<String> fields, final ApiCallback<Article> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdGetValidateBeforeCall(articleId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Article>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdMediaGet
     * @param articleId To get unique article for article Id media. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdMediaGetCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}/media"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdMediaGetValidateBeforeCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdMediaGet(Async)");
        }

        return articlesArticleIdMediaGetCall(articleId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article media by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id media. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleMedia articlesArticleIdMediaGet(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleMedia> localVarResp = articlesArticleIdMediaGetWithHttpInfo(articleId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article media by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id media. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleMedia> articlesArticleIdMediaGetWithHttpInfo(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdMediaGetValidateBeforeCall(articleId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article media by articleId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id media. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdMediaGetAsync(String articleId, String acceptLanguage, List<String> fields, final ApiCallback<ArticleMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdMediaGetValidateBeforeCall(articleId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdReviewsGet
     * @param articleId To get unique article for article Id reviews. (required)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdReviewsGetCall(String articleId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}/reviews"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minStarRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minStarRating", minStarRating));
        }

        if (maxStarRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxStarRating", maxStarRating));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdReviewsGetValidateBeforeCall(String articleId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdReviewsGet(Async)");
        }

        return articlesArticleIdReviewsGetCall(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article reviews by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews. (required)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReviews
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReviews articlesArticleIdReviewsGet(String articleId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReviews> localVarResp = articlesArticleIdReviewsGetWithHttpInfo(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article reviews by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews. (required)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReviews&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReviews> articlesArticleIdReviewsGetWithHttpInfo(String articleId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdReviewsGetValidateBeforeCall(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReviews>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article reviews by articleId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews. (required)
     * @param minStarRating To get reviews with minimum star rating. (optional)
     * @param maxStarRating To get reviews with maximum star rating. (optional)
     * @param sort articles are sorted on reviews provided by customers (eg: best) (optional, default to newest)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdReviewsGetAsync(String articleId, String minStarRating, String maxStarRating, String sort, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReviews> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdReviewsGetValidateBeforeCall(articleId, minStarRating, maxStarRating, sort, page, pageSize, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReviews>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdReviewsSummaryGet
     * @param articleId To get unique article for article Id reviews summary. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdReviewsSummaryGetCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}/reviews-summary"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdReviewsSummaryGetValidateBeforeCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdReviewsSummaryGet(Async)");
        }

        return articlesArticleIdReviewsSummaryGetCall(articleId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article reviews summary by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews summary. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleReviewsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleReviewsSummary articlesArticleIdReviewsSummaryGet(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleReviewsSummary> localVarResp = articlesArticleIdReviewsSummaryGetWithHttpInfo(articleId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article reviews summary by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews summary. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleReviewsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleReviewsSummary> articlesArticleIdReviewsSummaryGetWithHttpInfo(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdReviewsSummaryGetValidateBeforeCall(articleId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article reviews summary by articleId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id reviews summary. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdReviewsSummaryGetAsync(String articleId, String acceptLanguage, List<String> fields, final ApiCallback<ArticleReviewsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdReviewsSummaryGetValidateBeforeCall(articleId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleReviewsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdUnitsGet
     * @param articleId To get unique article for article Id units. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdUnitsGetCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}/units"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdUnitsGetValidateBeforeCall(String articleId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdUnitsGet(Async)");
        }

        return articlesArticleIdUnitsGetCall(articleId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article units by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id units. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return List&lt;ArticleUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<ArticleUnit> articlesArticleIdUnitsGet(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<List<ArticleUnit>> localVarResp = articlesArticleIdUnitsGetWithHttpInfo(articleId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article units by articleId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id units. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;List&lt;ArticleUnit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ArticleUnit>> articlesArticleIdUnitsGetWithHttpInfo(String articleId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdUnitsGetValidateBeforeCall(articleId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<List<ArticleUnit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article units by articleId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id units. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdUnitsGetAsync(String articleId, String acceptLanguage, List<String> fields, final ApiCallback<List<ArticleUnit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdUnitsGetValidateBeforeCall(articleId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleUnit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesArticleIdUnitsUnitIdGet
     * @param articleId To get unique article for article Id. (required)
     * @param unitId To get unique article for article Id unit. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdUnitsUnitIdGetCall(String articleId, String unitId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles/{articleId}/units/{unitId}"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()))
            .replace("{" + "unitId" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesArticleIdUnitsUnitIdGetValidateBeforeCall(String articleId, String unitId, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articlesArticleIdUnitsUnitIdGet(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling articlesArticleIdUnitsUnitIdGet(Async)");
        }

        return articlesArticleIdUnitsUnitIdGetCall(articleId, unitId, acceptLanguage, fields, _callback);

    }

    /**
     * Get Article units by articleId snd unitId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param unitId To get unique article for article Id unit. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ArticleUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticleUnit articlesArticleIdUnitsUnitIdGet(String articleId, String unitId, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<ArticleUnit> localVarResp = articlesArticleIdUnitsUnitIdGetWithHttpInfo(articleId, unitId, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Article units by articleId snd unitId
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param unitId To get unique article for article Id unit. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;ArticleUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticleUnit> articlesArticleIdUnitsUnitIdGetWithHttpInfo(String articleId, String unitId, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesArticleIdUnitsUnitIdGetValidateBeforeCall(articleId, unitId, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<ArticleUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Article units by articleId snd unitId (asynchronously)
     * Zalando API Article Schema
     * @param articleId To get unique article for article Id. (required)
     * @param unitId To get unique article for article Id unit. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Article response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesArticleIdUnitsUnitIdGetAsync(String articleId, String unitId, String acceptLanguage, List<String> fields, final ApiCallback<ArticleUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesArticleIdUnitsUnitIdGetValidateBeforeCall(articleId, unitId, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<ArticleUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlesGet
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param articleUnitId filters by article&#39;s unit id (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param fullText filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param sort sorting order (eg: popularity) (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesGetCall(List<String> articleId, List<String> articleModelId, List<String> articleUnitId, List<String> activationDate, List<String> ageGroup, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, String fullText, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String page, String pageSize, String sort, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleId", articleId));
        }

        if (articleModelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleModelId", articleModelId));
        }

        if (articleUnitId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "articleUnitId", articleUnitId));
        }

        if (activationDate != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "activationDate", activationDate));
        }

        if (ageGroup != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ageGroup", ageGroup));
        }

        if (assortmentArea != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "assortmentArea", assortmentArea));
        }

        if (brand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brand", brand));
        }

        if (brandfamily != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brandfamily", brandfamily));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (den != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "den", den));
        }

        if (filling != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filling", filling));
        }

        if (fullText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullText", fullText));
        }

        if (gender != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "gender", gender));
        }

        if (heelForm != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "heelForm", heelForm));
        }

        if (heelHeight != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "heelHeight", heelHeight));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (occasion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "occasion", occasion));
        }

        if (pattern != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "pattern", pattern));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (sale != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sale", sale));
        }

        if (season != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "season", season));
        }

        if (shaftHeight != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shaftHeight", shaftHeight));
        }

        if (shaftWidth != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shaftWidth", shaftWidth));
        }

        if (shirtCollar != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shirtCollar", shirtCollar));
        }

        if (shoeFastener != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shoeFastener", shoeFastener));
        }

        if (shoeToecap != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shoeToecap", shoeToecap));
        }

        if (shopArea != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shopArea", shopArea));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sports", sports));
        }

        if (technology != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "technology", technology));
        }

        if (trouserRise != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "trouserRise", trouserRise));
        }

        if (upperMaterial != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "upperMaterial", upperMaterial));
        }

        if (volume != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "volume", volume));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlesGetValidateBeforeCall(List<String> articleId, List<String> articleModelId, List<String> articleUnitId, List<String> activationDate, List<String> ageGroup, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, String fullText, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String page, String pageSize, String sort, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        return articlesGetCall(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields, _callback);

    }

    /**
     * Search for Articles
     * Search for articles based on various different possible filter like e.g. the &#x60;brandFamily&#x60;, the &#x60;catagory&#x60; or a specific &#x60;color&#x60;. See [Filters](https://todo) for a list of all available filter options.  The default &#x60;pageSize&#x60; for responses is set to &#x60;20&#x60;. You can add a &#x60;pageSize&#x60; request parameter to adjust that. Please keep in mind that the maximum &#x60;pageSize&#x60; for this resource is &#x60;200&#x60;.  The endpoint also supports reducing the fields returned for each article via the &#x60;fields&#x60; parameter. Please refer to [fields parameter](https://todo) for more details.
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param articleUnitId filters by article&#39;s unit id (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param fullText filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param sort sorting order (eg: popularity) (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Articles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public Articles articlesGet(List<String> articleId, List<String> articleModelId, List<String> articleUnitId, List<String> activationDate, List<String> ageGroup, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, String fullText, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String page, String pageSize, String sort, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Articles> localVarResp = articlesGetWithHttpInfo(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Search for Articles
     * Search for articles based on various different possible filter like e.g. the &#x60;brandFamily&#x60;, the &#x60;catagory&#x60; or a specific &#x60;color&#x60;. See [Filters](https://todo) for a list of all available filter options.  The default &#x60;pageSize&#x60; for responses is set to &#x60;20&#x60;. You can add a &#x60;pageSize&#x60; request parameter to adjust that. Please keep in mind that the maximum &#x60;pageSize&#x60; for this resource is &#x60;200&#x60;.  The endpoint also supports reducing the fields returned for each article via the &#x60;fields&#x60; parameter. Please refer to [fields parameter](https://todo) for more details.
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param articleUnitId filters by article&#39;s unit id (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param fullText filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param sort sorting order (eg: popularity) (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Articles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Articles> articlesGetWithHttpInfo(List<String> articleId, List<String> articleModelId, List<String> articleUnitId, List<String> activationDate, List<String> ageGroup, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, String fullText, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String page, String pageSize, String sort, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = articlesGetValidateBeforeCall(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Articles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Articles (asynchronously)
     * Search for articles based on various different possible filter like e.g. the &#x60;brandFamily&#x60;, the &#x60;catagory&#x60; or a specific &#x60;color&#x60;. See [Filters](https://todo) for a list of all available filter options.  The default &#x60;pageSize&#x60; for responses is set to &#x60;20&#x60;. You can add a &#x60;pageSize&#x60; request parameter to adjust that. Please keep in mind that the maximum &#x60;pageSize&#x60; for this resource is &#x60;200&#x60;.  The endpoint also supports reducing the fields returned for each article via the &#x60;fields&#x60; parameter. Please refer to [fields parameter](https://todo) for more details.
     * @param articleId The &#x60;articleIds&#x60; to use use for filtering.  One or more &#x60;articleIds&#x60; might be used as a filter criteria. Submit multiple &#x60;articleId&#x60; request parameters for more than one to be used. They will be treated as &#x60;OR&#x60; criteria. (optional)
     * @param articleModelId filters by article ModelId (optional)
     * @param articleUnitId filters by article&#39;s unit id (optional)
     * @param activationDate period or time the articles are activated for selling in the shop (optional)
     * @param ageGroup filters by age group (eg: kids) (optional)
     * @param assortmentArea filters by classification of articles (eg: maternity)  (optional)
     * @param brand filters by brand key given by user (eg: SA5) (optional)
     * @param brandfamily filters by brand family key (eg: nike)  (optional)
     * @param category filters by category (eg: Socks, Rain Coats) (optional)
     * @param color filters by color (eg: red, blue) (optional)
     * @param den filters by den  (optional)
     * @param filling filters by different kinds of garment filling materials (eg: satin, wolle) (optional)
     * @param fullText filters by text (eg: search by &#39;as&#39; gives result with articles of brand Sass) (optional)
     * @param gender filters by gender (optional)
     * @param heelForm filters by heel form (eg: flat) (optional)
     * @param heelHeight filters by height of the heel size or length (eg: xs) (optional)
     * @param length filters by garments length (eg: 3/4 length, knee-length) (optional)
     * @param occasion filters by type of occasion (eg: party, business) (optional)
     * @param pattern filters by pattern on the garments (eg: animal print, plain) (optional)
     * @param price filters all articles in price range (eg: 9-90) (optional)
     * @param sale filters discounted articles marked as sale (optional)
     * @param season filters by season (Autumn/Winter or Spring/Summer) (optional)
     * @param shaftHeight filters by shaft height (eg: s, xs) (optional)
     * @param shaftWidth filters by shaft width (eg: s, l) (optional)
     * @param shirtCollar filters by shirt collar styles (eg: low V neck, lined collar) (optional)
     * @param shoeFastener filters by shoe fastener types (eg: buckle, lacing) (optional)
     * @param shoeToecap filters by shoe toe cap variants (eg: pointed, square) (optional)
     * @param shopArea filters by classification of articles (optional)
     * @param size filters by size (optional)
     * @param sports filters by different sport activities (eg: football) (optional)
     * @param technology filters by technology used to produce the articles (optional)
     * @param trouserRise filters by trouser rise (optional)
     * @param upperMaterial filters by different type of upper material used on garments (eg: lace) (optional)
     * @param volume filters by volume (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param sort sorting order (eg: popularity) (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Articles response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlesGetAsync(List<String> articleId, List<String> articleModelId, List<String> articleUnitId, List<String> activationDate, List<String> ageGroup, List<String> assortmentArea, List<String> brand, List<String> brandfamily, List<String> category, List<String> color, List<String> den, List<String> filling, String fullText, List<String> gender, List<String> heelForm, List<String> heelHeight, String length, List<String> occasion, List<String> pattern, String price, List<String> sale, List<String> season, List<String> shaftHeight, List<String> shaftWidth, List<String> shirtCollar, List<String> shoeFastener, List<String> shoeToecap, List<String> shopArea, String size, List<String> sports, List<String> technology, List<String> trouserRise, List<String> upperMaterial, List<String> volume, String page, String pageSize, String sort, String acceptLanguage, List<String> fields, final ApiCallback<Articles> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlesGetValidateBeforeCall(articleId, articleModelId, articleUnitId, activationDate, ageGroup, assortmentArea, brand, brandfamily, category, color, den, filling, fullText, gender, heelForm, heelHeight, length, occasion, pattern, price, sale, season, shaftHeight, shaftWidth, shirtCollar, shoeFastener, shoeToecap, shopArea, size, sports, technology, trouserRise, upperMaterial, volume, page, pageSize, sort, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Articles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
