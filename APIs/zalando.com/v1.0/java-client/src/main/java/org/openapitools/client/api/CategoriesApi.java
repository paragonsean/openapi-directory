/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Categories;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.ErrorMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoriesGet
     * @param name Request Categories by names (optional)
     * @param type Request Categories by type (optional)
     * @param outlet Request Categories by outlet (optional)
     * @param hidden Request Categories by hidden (optional)
     * @param targetGroup Request Categories by target group (optional)
     * @param key Request Categories by keys (optional)
     * @param parentKey Request Categories by parent keys (optional)
     * @param childKey Request Categories by child keys (optional)
     * @param suggestedFilter Request Categories by suggested filters (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categories Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(List<String> name, String type, String outlet, String hidden, String targetGroup, List<String> key, List<String> parentKey, List<String> childKey, List<String> suggestedFilter, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (outlet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlet", outlet));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        if (targetGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetGroup", targetGroup));
        }

        if (key != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "key", key));
        }

        if (parentKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parentKey", parentKey));
        }

        if (childKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "childKey", childKey));
        }

        if (suggestedFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "suggestedFilter", suggestedFilter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(List<String> name, String type, String outlet, String hidden, String targetGroup, List<String> key, List<String> parentKey, List<String> childKey, List<String> suggestedFilter, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        return categoriesGetCall(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields, _callback);

    }

    /**
     * Shop Categories
     * Zalando API Categories Schema
     * @param name Request Categories by names (optional)
     * @param type Request Categories by type (optional)
     * @param outlet Request Categories by outlet (optional)
     * @param hidden Request Categories by hidden (optional)
     * @param targetGroup Request Categories by target group (optional)
     * @param key Request Categories by keys (optional)
     * @param parentKey Request Categories by parent keys (optional)
     * @param childKey Request Categories by child keys (optional)
     * @param suggestedFilter Request Categories by suggested filters (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Categories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categories Not found. </td><td>  -  </td></tr>
     </table>
     */
    public Categories categoriesGet(List<String> name, String type, String outlet, String hidden, String targetGroup, List<String> key, List<String> parentKey, List<String> childKey, List<String> suggestedFilter, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Categories> localVarResp = categoriesGetWithHttpInfo(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Shop Categories
     * Zalando API Categories Schema
     * @param name Request Categories by names (optional)
     * @param type Request Categories by type (optional)
     * @param outlet Request Categories by outlet (optional)
     * @param hidden Request Categories by hidden (optional)
     * @param targetGroup Request Categories by target group (optional)
     * @param key Request Categories by keys (optional)
     * @param parentKey Request Categories by parent keys (optional)
     * @param childKey Request Categories by child keys (optional)
     * @param suggestedFilter Request Categories by suggested filters (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Categories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categories Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Categories> categoriesGetWithHttpInfo(List<String> name, String type, String outlet, String hidden, String targetGroup, List<String> key, List<String> parentKey, List<String> childKey, List<String> suggestedFilter, String page, String pageSize, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shop Categories (asynchronously)
     * Zalando API Categories Schema
     * @param name Request Categories by names (optional)
     * @param type Request Categories by type (optional)
     * @param outlet Request Categories by outlet (optional)
     * @param hidden Request Categories by hidden (optional)
     * @param targetGroup Request Categories by target group (optional)
     * @param key Request Categories by keys (optional)
     * @param parentKey Request Categories by parent keys (optional)
     * @param childKey Request Categories by child keys (optional)
     * @param suggestedFilter Request Categories by suggested filters (optional)
     * @param page to request with required page number or pagination (optional)
     * @param pageSize to request with required page size in a page (optional)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categories response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categories Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(List<String> name, String type, String outlet, String hidden, String targetGroup, List<String> key, List<String> parentKey, List<String> childKey, List<String> suggestedFilter, String page, String pageSize, String acceptLanguage, List<String> fields, final ApiCallback<Categories> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(name, type, outlet, hidden, targetGroup, key, parentKey, childKey, suggestedFilter, page, pageSize, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesKeyGet
     * @param key To get unique Category by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyGetCall(List<String> key, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", key)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesKeyGetValidateBeforeCall(List<String> key, String acceptLanguage, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling categoriesKeyGet(Async)");
        }

        return categoriesKeyGetCall(key, acceptLanguage, fields, _callback);

    }

    /**
     * Get Single Category by Key
     * Zalando API Category Schema
     * @param key To get unique Category by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found. </td><td>  -  </td></tr>
     </table>
     */
    public Category categoriesKeyGet(List<String> key, String acceptLanguage, List<String> fields) throws ApiException {
        ApiResponse<Category> localVarResp = categoriesKeyGetWithHttpInfo(key, acceptLanguage, fields);
        return localVarResp.getData();
    }

    /**
     * Get Single Category by Key
     * Zalando API Category Schema
     * @param key To get unique Category by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> categoriesKeyGetWithHttpInfo(List<String> key, String acceptLanguage, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = categoriesKeyGetValidateBeforeCall(key, acceptLanguage, fields, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Single Category by Key (asynchronously)
     * Zalando API Category Schema
     * @param key To get unique Category by key. (required)
     * @param acceptLanguage Specify which Shop to use.  A standard &#x60;Accept-Language&#x60; header which specifies the shop that should be used. E.g. &#x60;de-DE&#x60; will use the German shop (as does [https://www.zalando.de](https://www/zalando.de) and &#x60;de-AT&#x60; will use the Austrian one.  The shop choosen will e.g. define the currency used for prices as well as the language for product names and descriptions. Furthermore it will impact which articles are available as they might differ between countries. (optional)
     * @param fields Comma separated list of fields that should be returned. Fields of subobjects are specified with dots as separator. Fields of objects within lists are specified in the same way.  Example: id,name,brand.key,brand.name, units.id,units.size,units.price.formatted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category Key response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesKeyGetAsync(List<String> key, String acceptLanguage, List<String> fields, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesKeyGetValidateBeforeCall(key, acceptLanguage, fields, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
