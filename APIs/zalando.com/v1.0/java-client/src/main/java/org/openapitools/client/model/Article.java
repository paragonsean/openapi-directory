/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArticleAttribute;
import org.openapitools.client.model.ArticleMedia;
import org.openapitools.client.model.ArticleUnit;
import org.openapitools.client.model.Brand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single article
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:09.117495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Article {
  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "activationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private OffsetDateTime activationDate;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFOS = "additionalInfos";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFOS)
  private List<String> additionalInfos = new ArrayList<>();

  /**
   * Gets or Sets ageGroups
   */
  @JsonAdapter(AgeGroupsEnum.Adapter.class)
  public enum AgeGroupsEnum {
    BABY("BABY"),
    
    CHILD("CHILD"),
    
    TEEN("TEEN"),
    
    ADULT("ADULT");

    private String value;

    AgeGroupsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgeGroupsEnum fromValue(String value) {
      for (AgeGroupsEnum b : AgeGroupsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgeGroupsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgeGroupsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgeGroupsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgeGroupsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgeGroupsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGE_GROUPS = "ageGroups";
  @SerializedName(SERIALIZED_NAME_AGE_GROUPS)
  private List<AgeGroupsEnum> ageGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ArticleAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private Brand brand;

  public static final String SERIALIZED_NAME_CATEGORY_KEYS = "categoryKeys";
  @SerializedName(SERIALIZED_NAME_CATEGORY_KEYS)
  private List<String> categoryKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  /**
   * Gets or Sets genders
   */
  @JsonAdapter(GendersEnum.Adapter.class)
  public enum GendersEnum {
    MALE("MALE"),
    
    FEMALE("FEMALE");

    private String value;

    GendersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GendersEnum fromValue(String value) {
      for (GendersEnum b : GendersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GendersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GendersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GendersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GendersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GendersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDERS = "genders";
  @SerializedName(SERIALIZED_NAME_GENDERS)
  private List<GendersEnum> genders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private ArticleMedia media;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * collection season the article belongs to
   */
  @JsonAdapter(SeasonEnum.Adapter.class)
  public enum SeasonEnum {
    SUMMER("SUMMER"),
    
    WINTER("WINTER"),
    
    ALL("ALL");

    private String value;

    SeasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeasonEnum fromValue(String value) {
      for (SeasonEnum b : SeasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private SeasonEnum season;

  public static final String SERIALIZED_NAME_SEASON_YEAR = "seasonYear";
  @SerializedName(SERIALIZED_NAME_SEASON_YEAR)
  private String seasonYear;

  public static final String SERIALIZED_NAME_SHOP_URL = "shopUrl";
  @SerializedName(SERIALIZED_NAME_SHOP_URL)
  private URI shopUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<ArticleUnit> units = new ArrayList<>();

  public Article() {
  }

  public Article activationDate(OffsetDateTime activationDate) {
    this.activationDate = activationDate;
    return this;
  }

  /**
   * timestamp the article was available in the Zalando webshop
   * @return activationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getActivationDate() {
    return activationDate;
  }

  public void setActivationDate(OffsetDateTime activationDate) {
    this.activationDate = activationDate;
  }


  public Article additionalInfos(List<String> additionalInfos) {
    this.additionalInfos = additionalInfos;
    return this;
  }

  public Article addAdditionalInfosItem(String additionalInfosItem) {
    if (this.additionalInfos == null) {
      this.additionalInfos = new ArrayList<>();
    }
    this.additionalInfos.add(additionalInfosItem);
    return this;
  }

  /**
   * any additional information of the article 
   * @return additionalInfos
   */
  @javax.annotation.Nonnull
  public List<String> getAdditionalInfos() {
    return additionalInfos;
  }

  public void setAdditionalInfos(List<String> additionalInfos) {
    this.additionalInfos = additionalInfos;
  }


  public Article ageGroups(List<AgeGroupsEnum> ageGroups) {
    this.ageGroups = ageGroups;
    return this;
  }

  public Article addAgeGroupsItem(AgeGroupsEnum ageGroupsItem) {
    if (this.ageGroups == null) {
      this.ageGroups = new ArrayList<>();
    }
    this.ageGroups.add(ageGroupsItem);
    return this;
  }

  /**
   * age group of the article belongs to
   * @return ageGroups
   */
  @javax.annotation.Nonnull
  public List<AgeGroupsEnum> getAgeGroups() {
    return ageGroups;
  }

  public void setAgeGroups(List<AgeGroupsEnum> ageGroups) {
    this.ageGroups = ageGroups;
  }


  public Article attributes(List<ArticleAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Article addAttributesItem(ArticleAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * article attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<ArticleAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ArticleAttribute> attributes) {
    this.attributes = attributes;
  }


  public Article available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * will be true if at least one article unit is available
   * @return available
   */
  @javax.annotation.Nonnull
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public Article brand(Brand brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand
   */
  @javax.annotation.Nonnull
  public Brand getBrand() {
    return brand;
  }

  public void setBrand(Brand brand) {
    this.brand = brand;
  }


  public Article categoryKeys(List<String> categoryKeys) {
    this.categoryKeys = categoryKeys;
    return this;
  }

  public Article addCategoryKeysItem(String categoryKeysItem) {
    if (this.categoryKeys == null) {
      this.categoryKeys = new ArrayList<>();
    }
    this.categoryKeys.add(categoryKeysItem);
    return this;
  }

  /**
   * category keys of the article belongs to
   * @return categoryKeys
   */
  @javax.annotation.Nonnull
  public List<String> getCategoryKeys() {
    return categoryKeys;
  }

  public void setCategoryKeys(List<String> categoryKeys) {
    this.categoryKeys = categoryKeys;
  }


  public Article color(String color) {
    this.color = color;
    return this;
  }

  /**
   * the main color of the article
   * @return color
   */
  @javax.annotation.Nonnull
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public Article genders(List<GendersEnum> genders) {
    this.genders = genders;
    return this;
  }

  public Article addGendersItem(GendersEnum gendersItem) {
    if (this.genders == null) {
      this.genders = new ArrayList<>();
    }
    this.genders.add(gendersItem);
    return this;
  }

  /**
   * gender of the article belongs to
   * @return genders
   */
  @javax.annotation.Nonnull
  public List<GendersEnum> getGenders() {
    return genders;
  }

  public void setGenders(List<GendersEnum> genders) {
    this.genders = genders;
  }


  public Article id(String id) {
    this.id = id;
    return this;
  }

  /**
   * unique article id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Article media(ArticleMedia media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public ArticleMedia getMedia() {
    return media;
  }

  public void setMedia(ArticleMedia media) {
    this.media = media;
  }


  public Article modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * unique article model id
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public Article name(String name) {
    this.name = name;
    return this;
  }

  /**
   * article name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Article season(SeasonEnum season) {
    this.season = season;
    return this;
  }

  /**
   * collection season the article belongs to
   * @return season
   */
  @javax.annotation.Nonnull
  public SeasonEnum getSeason() {
    return season;
  }

  public void setSeason(SeasonEnum season) {
    this.season = season;
  }


  public Article seasonYear(String seasonYear) {
    this.seasonYear = seasonYear;
    return this;
  }

  /**
   * collection year the article belongs to. Could be either a year or &#39;ALL&#39;
   * @return seasonYear
   */
  @javax.annotation.Nonnull
  public String getSeasonYear() {
    return seasonYear;
  }

  public void setSeasonYear(String seasonYear) {
    this.seasonYear = seasonYear;
  }


  public Article shopUrl(URI shopUrl) {
    this.shopUrl = shopUrl;
    return this;
  }

  /**
   * url of the article within the Zalando webshop
   * @return shopUrl
   */
  @javax.annotation.Nonnull
  public URI getShopUrl() {
    return shopUrl;
  }

  public void setShopUrl(URI shopUrl) {
    this.shopUrl = shopUrl;
  }


  public Article tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Article addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Article units(List<ArticleUnit> units) {
    this.units = units;
    return this;
  }

  public Article addUnitsItem(ArticleUnit unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

  /**
   * price of the article
   * @return units
   */
  @javax.annotation.Nonnull
  public List<ArticleUnit> getUnits() {
    return units;
  }

  public void setUnits(List<ArticleUnit> units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Article article = (Article) o;
    return Objects.equals(this.activationDate, article.activationDate) &&
        Objects.equals(this.additionalInfos, article.additionalInfos) &&
        Objects.equals(this.ageGroups, article.ageGroups) &&
        Objects.equals(this.attributes, article.attributes) &&
        Objects.equals(this.available, article.available) &&
        Objects.equals(this.brand, article.brand) &&
        Objects.equals(this.categoryKeys, article.categoryKeys) &&
        Objects.equals(this.color, article.color) &&
        Objects.equals(this.genders, article.genders) &&
        Objects.equals(this.id, article.id) &&
        Objects.equals(this.media, article.media) &&
        Objects.equals(this.modelId, article.modelId) &&
        Objects.equals(this.name, article.name) &&
        Objects.equals(this.season, article.season) &&
        Objects.equals(this.seasonYear, article.seasonYear) &&
        Objects.equals(this.shopUrl, article.shopUrl) &&
        Objects.equals(this.tags, article.tags) &&
        Objects.equals(this.units, article.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationDate, additionalInfos, ageGroups, attributes, available, brand, categoryKeys, color, genders, id, media, modelId, name, season, seasonYear, shopUrl, tags, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Article {\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    additionalInfos: ").append(toIndentedString(additionalInfos)).append("\n");
    sb.append("    ageGroups: ").append(toIndentedString(ageGroups)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    categoryKeys: ").append(toIndentedString(categoryKeys)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    genders: ").append(toIndentedString(genders)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonYear: ").append(toIndentedString(seasonYear)).append("\n");
    sb.append("    shopUrl: ").append(toIndentedString(shopUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationDate");
    openapiFields.add("additionalInfos");
    openapiFields.add("ageGroups");
    openapiFields.add("attributes");
    openapiFields.add("available");
    openapiFields.add("brand");
    openapiFields.add("categoryKeys");
    openapiFields.add("color");
    openapiFields.add("genders");
    openapiFields.add("id");
    openapiFields.add("media");
    openapiFields.add("modelId");
    openapiFields.add("name");
    openapiFields.add("season");
    openapiFields.add("seasonYear");
    openapiFields.add("shopUrl");
    openapiFields.add("tags");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activationDate");
    openapiRequiredFields.add("additionalInfos");
    openapiRequiredFields.add("ageGroups");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("available");
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("categoryKeys");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("genders");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("media");
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("season");
    openapiRequiredFields.add("seasonYear");
    openapiRequiredFields.add("shopUrl");
    openapiRequiredFields.add("units");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Article
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Article.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Article is not found in the empty JSON string", Article.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Article.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Article` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Article.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("additionalInfos") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("additionalInfos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfos` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInfos").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ageGroups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ageGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageGroups` to be an array in the JSON string but got `%s`", jsonObj.get("ageGroups").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        ArticleAttribute.validateJsonElement(jsonArrayattributes.get(i));
      };
      // validate the required field `brand`
      Brand.validateJsonElement(jsonObj.get("brand"));
      // ensure the required json array is present
      if (jsonObj.get("categoryKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categoryKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryKeys` to be an array in the JSON string but got `%s`", jsonObj.get("categoryKeys").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("genders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("genders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genders` to be an array in the JSON string but got `%s`", jsonObj.get("genders").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `media`
      ArticleMedia.validateJsonElement(jsonObj.get("media"));
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("season").toString()));
      }
      // validate the required field `season`
      SeasonEnum.validateJsonElement(jsonObj.get("season"));
      if (!jsonObj.get("seasonYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonYear").toString()));
      }
      if (!jsonObj.get("shopUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("units").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }

      JsonArray jsonArrayunits = jsonObj.getAsJsonArray("units");
      // validate the required field `units` (array)
      for (int i = 0; i < jsonArrayunits.size(); i++) {
        ArticleUnit.validateJsonElement(jsonArrayunits.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Article.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Article' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Article> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Article.class));

       return (TypeAdapter<T>) new TypeAdapter<Article>() {
           @Override
           public void write(JsonWriter out, Article value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Article read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Article given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Article
   * @throws IOException if the JSON string is invalid with respect to Article
   */
  public static Article fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Article.class);
  }

  /**
   * Convert an instance of Article to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

