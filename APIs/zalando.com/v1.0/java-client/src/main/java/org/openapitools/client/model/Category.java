/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zalando API Category Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:09.117495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_CHILD_KEYS = "childKeys";
  @SerializedName(SERIALIZED_NAME_CHILD_KEYS)
  private List<String> childKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTLET = "outlet";
  @SerializedName(SERIALIZED_NAME_OUTLET)
  private Boolean outlet;

  public static final String SERIALIZED_NAME_PARENT_KEY = "parentKey";
  @SerializedName(SERIALIZED_NAME_PARENT_KEY)
  private String parentKey;

  public static final String SERIALIZED_NAME_SUGGESTED_FILTERS = "suggestedFilters";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_FILTERS)
  private List<String> suggestedFilters = new ArrayList<>();

  /**
   * The target group of the articles from this category
   */
  @JsonAdapter(TargetGroupEnum.Adapter.class)
  public enum TargetGroupEnum {
    ALL("ALL"),
    
    WOMEN("WOMEN"),
    
    MEN("MEN"),
    
    KIDS("KIDS");

    private String value;

    TargetGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetGroupEnum fromValue(String value) {
      for (TargetGroupEnum b : TargetGroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetGroupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetGroupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_GROUP = "targetGroup";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP)
  private TargetGroupEnum targetGroup;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Category() {
  }

  public Category childKeys(List<String> childKeys) {
    this.childKeys = childKeys;
    return this;
  }

  public Category addChildKeysItem(String childKeysItem) {
    if (this.childKeys == null) {
      this.childKeys = new ArrayList<>();
    }
    this.childKeys.add(childKeysItem);
    return this;
  }

  /**
   * The list of keys of the child categories
   * @return childKeys
   */
  @javax.annotation.Nonnull
  public List<String> getChildKeys() {
    return childKeys;
  }

  public void setChildKeys(List<String> childKeys) {
    this.childKeys = childKeys;
  }


  public Category cid(Integer cid) {
    this.cid = cid;
    return this;
  }

  /**
   * The numeric ID for a category.
   * @return cid
   */
  @javax.annotation.Nullable
  public Integer getCid() {
    return cid;
  }

  public void setCid(Integer cid) {
    this.cid = cid;
  }


  public Category hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * The category is hidden and not shown on the Zalando web shop
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Category key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The unique key for a category
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Category name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the category
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Category outlet(Boolean outlet) {
    this.outlet = outlet;
    return this;
  }

  /**
   * Containing articles are from last seasons
   * @return outlet
   */
  @javax.annotation.Nullable
  public Boolean getOutlet() {
    return outlet;
  }

  public void setOutlet(Boolean outlet) {
    this.outlet = outlet;
  }


  public Category parentKey(String parentKey) {
    this.parentKey = parentKey;
    return this;
  }

  /**
   * The key of the parent category
   * @return parentKey
   */
  @javax.annotation.Nullable
  public String getParentKey() {
    return parentKey;
  }

  public void setParentKey(String parentKey) {
    this.parentKey = parentKey;
  }


  public Category suggestedFilters(List<String> suggestedFilters) {
    this.suggestedFilters = suggestedFilters;
    return this;
  }

  public Category addSuggestedFiltersItem(String suggestedFiltersItem) {
    if (this.suggestedFilters == null) {
      this.suggestedFilters = new ArrayList<>();
    }
    this.suggestedFilters.add(suggestedFiltersItem);
    return this;
  }

  /**
   * list of filter names that are reasonable to use within this category
   * @return suggestedFilters
   */
  @javax.annotation.Nonnull
  public List<String> getSuggestedFilters() {
    return suggestedFilters;
  }

  public void setSuggestedFilters(List<String> suggestedFilters) {
    this.suggestedFilters = suggestedFilters;
  }


  public Category targetGroup(TargetGroupEnum targetGroup) {
    this.targetGroup = targetGroup;
    return this;
  }

  /**
   * The target group of the articles from this category
   * @return targetGroup
   */
  @javax.annotation.Nonnull
  public TargetGroupEnum getTargetGroup() {
    return targetGroup;
  }

  public void setTargetGroup(TargetGroupEnum targetGroup) {
    this.targetGroup = targetGroup;
  }


  public Category type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the category.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.childKeys, category.childKeys) &&
        Objects.equals(this.cid, category.cid) &&
        Objects.equals(this.hidden, category.hidden) &&
        Objects.equals(this.key, category.key) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.outlet, category.outlet) &&
        Objects.equals(this.parentKey, category.parentKey) &&
        Objects.equals(this.suggestedFilters, category.suggestedFilters) &&
        Objects.equals(this.targetGroup, category.targetGroup) &&
        Objects.equals(this.type, category.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childKeys, cid, hidden, key, name, outlet, parentKey, suggestedFilters, targetGroup, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    childKeys: ").append(toIndentedString(childKeys)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outlet: ").append(toIndentedString(outlet)).append("\n");
    sb.append("    parentKey: ").append(toIndentedString(parentKey)).append("\n");
    sb.append("    suggestedFilters: ").append(toIndentedString(suggestedFilters)).append("\n");
    sb.append("    targetGroup: ").append(toIndentedString(targetGroup)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childKeys");
    openapiFields.add("cid");
    openapiFields.add("hidden");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("outlet");
    openapiFields.add("parentKey");
    openapiFields.add("suggestedFilters");
    openapiFields.add("targetGroup");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("childKeys");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("suggestedFilters");
    openapiRequiredFields.add("targetGroup");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Category.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("childKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("childKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childKeys` to be an array in the JSON string but got `%s`", jsonObj.get("childKeys").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentKey") != null && !jsonObj.get("parentKey").isJsonNull()) && !jsonObj.get("parentKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentKey").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("suggestedFilters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("suggestedFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedFilters` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedFilters").toString()));
      }
      if (!jsonObj.get("targetGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetGroup").toString()));
      }
      // validate the required field `targetGroup`
      TargetGroupEnum.validateJsonElement(jsonObj.get("targetGroup"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

