/*
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ArticleReviewsSummaryArticleSizeRatings;
import org.openapitools.client.model.ArticleReviewsSummaryStarRatingDistribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zalando API Article Reviews Summary Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:09.117495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleReviewsSummary {
  public static final String SERIALIZED_NAME_ARTICLE_MODEL_ID = "articleModelId";
  @SerializedName(SERIALIZED_NAME_ARTICLE_MODEL_ID)
  private String articleModelId;

  public static final String SERIALIZED_NAME_ARTICLE_SIZE_RATINGS = "articleSizeRatings";
  @SerializedName(SERIALIZED_NAME_ARTICLE_SIZE_RATINGS)
  private ArticleReviewsSummaryArticleSizeRatings articleSizeRatings;

  public static final String SERIALIZED_NAME_AVERAGE_STAR_RATING = "averageStarRating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_STAR_RATING)
  private BigDecimal averageStarRating;

  public static final String SERIALIZED_NAME_NUMBER_OF_USER_POSITIVE_RECOMMENDATIONS = "numberOfUserPositiveRecommendations";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_USER_POSITIVE_RECOMMENDATIONS)
  private Integer numberOfUserPositiveRecommendations;

  public static final String SERIALIZED_NAME_NUMBER_OF_USER_RECOMMENDATIONS = "numberOfUserRecommendations";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_USER_RECOMMENDATIONS)
  private Integer numberOfUserRecommendations;

  public static final String SERIALIZED_NAME_NUMBER_OF_USER_REVIEWS = "numberOfUserReviews";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_USER_REVIEWS)
  private Integer numberOfUserReviews;

  public static final String SERIALIZED_NAME_STAR_RATING_DISTRIBUTION = "starRatingDistribution";
  @SerializedName(SERIALIZED_NAME_STAR_RATING_DISTRIBUTION)
  private ArticleReviewsSummaryStarRatingDistribution starRatingDistribution;

  public ArticleReviewsSummary() {
  }

  public ArticleReviewsSummary articleModelId(String articleModelId) {
    this.articleModelId = articleModelId;
    return this;
  }

  /**
   * Get articleModelId
   * @return articleModelId
   */
  @javax.annotation.Nonnull
  public String getArticleModelId() {
    return articleModelId;
  }

  public void setArticleModelId(String articleModelId) {
    this.articleModelId = articleModelId;
  }


  public ArticleReviewsSummary articleSizeRatings(ArticleReviewsSummaryArticleSizeRatings articleSizeRatings) {
    this.articleSizeRatings = articleSizeRatings;
    return this;
  }

  /**
   * Get articleSizeRatings
   * @return articleSizeRatings
   */
  @javax.annotation.Nullable
  public ArticleReviewsSummaryArticleSizeRatings getArticleSizeRatings() {
    return articleSizeRatings;
  }

  public void setArticleSizeRatings(ArticleReviewsSummaryArticleSizeRatings articleSizeRatings) {
    this.articleSizeRatings = articleSizeRatings;
  }


  public ArticleReviewsSummary averageStarRating(BigDecimal averageStarRating) {
    this.averageStarRating = averageStarRating;
    return this;
  }

  /**
   * average star rating of the article
   * @return averageStarRating
   */
  @javax.annotation.Nonnull
  public BigDecimal getAverageStarRating() {
    return averageStarRating;
  }

  public void setAverageStarRating(BigDecimal averageStarRating) {
    this.averageStarRating = averageStarRating;
  }


  public ArticleReviewsSummary numberOfUserPositiveRecommendations(Integer numberOfUserPositiveRecommendations) {
    this.numberOfUserPositiveRecommendations = numberOfUserPositiveRecommendations;
    return this;
  }

  /**
   * number of positive recommendations to the article
   * @return numberOfUserPositiveRecommendations
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfUserPositiveRecommendations() {
    return numberOfUserPositiveRecommendations;
  }

  public void setNumberOfUserPositiveRecommendations(Integer numberOfUserPositiveRecommendations) {
    this.numberOfUserPositiveRecommendations = numberOfUserPositiveRecommendations;
  }


  public ArticleReviewsSummary numberOfUserRecommendations(Integer numberOfUserRecommendations) {
    this.numberOfUserRecommendations = numberOfUserRecommendations;
    return this;
  }

  /**
   * number of users recommended to the article
   * @return numberOfUserRecommendations
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfUserRecommendations() {
    return numberOfUserRecommendations;
  }

  public void setNumberOfUserRecommendations(Integer numberOfUserRecommendations) {
    this.numberOfUserRecommendations = numberOfUserRecommendations;
  }


  public ArticleReviewsSummary numberOfUserReviews(Integer numberOfUserReviews) {
    this.numberOfUserReviews = numberOfUserReviews;
    return this;
  }

  /**
   * number of user reviews of the article
   * @return numberOfUserReviews
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfUserReviews() {
    return numberOfUserReviews;
  }

  public void setNumberOfUserReviews(Integer numberOfUserReviews) {
    this.numberOfUserReviews = numberOfUserReviews;
  }


  public ArticleReviewsSummary starRatingDistribution(ArticleReviewsSummaryStarRatingDistribution starRatingDistribution) {
    this.starRatingDistribution = starRatingDistribution;
    return this;
  }

  /**
   * Get starRatingDistribution
   * @return starRatingDistribution
   */
  @javax.annotation.Nonnull
  public ArticleReviewsSummaryStarRatingDistribution getStarRatingDistribution() {
    return starRatingDistribution;
  }

  public void setStarRatingDistribution(ArticleReviewsSummaryStarRatingDistribution starRatingDistribution) {
    this.starRatingDistribution = starRatingDistribution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleReviewsSummary articleReviewsSummary = (ArticleReviewsSummary) o;
    return Objects.equals(this.articleModelId, articleReviewsSummary.articleModelId) &&
        Objects.equals(this.articleSizeRatings, articleReviewsSummary.articleSizeRatings) &&
        Objects.equals(this.averageStarRating, articleReviewsSummary.averageStarRating) &&
        Objects.equals(this.numberOfUserPositiveRecommendations, articleReviewsSummary.numberOfUserPositiveRecommendations) &&
        Objects.equals(this.numberOfUserRecommendations, articleReviewsSummary.numberOfUserRecommendations) &&
        Objects.equals(this.numberOfUserReviews, articleReviewsSummary.numberOfUserReviews) &&
        Objects.equals(this.starRatingDistribution, articleReviewsSummary.starRatingDistribution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(articleModelId, articleSizeRatings, averageStarRating, numberOfUserPositiveRecommendations, numberOfUserRecommendations, numberOfUserReviews, starRatingDistribution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleReviewsSummary {\n");
    sb.append("    articleModelId: ").append(toIndentedString(articleModelId)).append("\n");
    sb.append("    articleSizeRatings: ").append(toIndentedString(articleSizeRatings)).append("\n");
    sb.append("    averageStarRating: ").append(toIndentedString(averageStarRating)).append("\n");
    sb.append("    numberOfUserPositiveRecommendations: ").append(toIndentedString(numberOfUserPositiveRecommendations)).append("\n");
    sb.append("    numberOfUserRecommendations: ").append(toIndentedString(numberOfUserRecommendations)).append("\n");
    sb.append("    numberOfUserReviews: ").append(toIndentedString(numberOfUserReviews)).append("\n");
    sb.append("    starRatingDistribution: ").append(toIndentedString(starRatingDistribution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("articleModelId");
    openapiFields.add("articleSizeRatings");
    openapiFields.add("averageStarRating");
    openapiFields.add("numberOfUserPositiveRecommendations");
    openapiFields.add("numberOfUserRecommendations");
    openapiFields.add("numberOfUserReviews");
    openapiFields.add("starRatingDistribution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("articleModelId");
    openapiRequiredFields.add("averageStarRating");
    openapiRequiredFields.add("numberOfUserPositiveRecommendations");
    openapiRequiredFields.add("numberOfUserRecommendations");
    openapiRequiredFields.add("numberOfUserReviews");
    openapiRequiredFields.add("starRatingDistribution");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleReviewsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleReviewsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleReviewsSummary is not found in the empty JSON string", ArticleReviewsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleReviewsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleReviewsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleReviewsSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("articleModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `articleModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("articleModelId").toString()));
      }
      // validate the optional field `articleSizeRatings`
      if (jsonObj.get("articleSizeRatings") != null && !jsonObj.get("articleSizeRatings").isJsonNull()) {
        ArticleReviewsSummaryArticleSizeRatings.validateJsonElement(jsonObj.get("articleSizeRatings"));
      }
      // validate the required field `starRatingDistribution`
      ArticleReviewsSummaryStarRatingDistribution.validateJsonElement(jsonObj.get("starRatingDistribution"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleReviewsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleReviewsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleReviewsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleReviewsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleReviewsSummary>() {
           @Override
           public void write(JsonWriter out, ArticleReviewsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleReviewsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleReviewsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleReviewsSummary
   * @throws IOException if the JSON string is invalid with respect to ArticleReviewsSummary
   */
  public static ArticleReviewsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleReviewsSummary.class);
  }

  /**
   * Convert an instance of ArticleReviewsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

