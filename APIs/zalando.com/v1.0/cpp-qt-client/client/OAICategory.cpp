/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_child_keys_isSet = false;
    m_child_keys_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outlet_isSet = false;
    m_outlet_isValid = false;

    m_parent_key_isSet = false;
    m_parent_key_isValid = false;

    m_suggested_filters_isSet = false;
    m_suggested_filters_isValid = false;

    m_target_group_isSet = false;
    m_target_group_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_child_keys_isValid = ::OpenAPI::fromJsonValue(m_child_keys, json[QString("childKeys")]);
    m_child_keys_isSet = !json[QString("childKeys")].isNull() && m_child_keys_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outlet_isValid = ::OpenAPI::fromJsonValue(m_outlet, json[QString("outlet")]);
    m_outlet_isSet = !json[QString("outlet")].isNull() && m_outlet_isValid;

    m_parent_key_isValid = ::OpenAPI::fromJsonValue(m_parent_key, json[QString("parentKey")]);
    m_parent_key_isSet = !json[QString("parentKey")].isNull() && m_parent_key_isValid;

    m_suggested_filters_isValid = ::OpenAPI::fromJsonValue(m_suggested_filters, json[QString("suggestedFilters")]);
    m_suggested_filters_isSet = !json[QString("suggestedFilters")].isNull() && m_suggested_filters_isValid;

    m_target_group_isValid = ::OpenAPI::fromJsonValue(m_target_group, json[QString("targetGroup")]);
    m_target_group_isSet = !json[QString("targetGroup")].isNull() && m_target_group_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_child_keys.size() > 0) {
        obj.insert(QString("childKeys"), ::OpenAPI::toJsonValue(m_child_keys));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outlet_isSet) {
        obj.insert(QString("outlet"), ::OpenAPI::toJsonValue(m_outlet));
    }
    if (m_parent_key_isSet) {
        obj.insert(QString("parentKey"), ::OpenAPI::toJsonValue(m_parent_key));
    }
    if (m_suggested_filters.size() > 0) {
        obj.insert(QString("suggestedFilters"), ::OpenAPI::toJsonValue(m_suggested_filters));
    }
    if (m_target_group_isSet) {
        obj.insert(QString("targetGroup"), ::OpenAPI::toJsonValue(m_target_group));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAICategory::getChildKeys() const {
    return m_child_keys;
}
void OAICategory::setChildKeys(const QList<QString> &child_keys) {
    m_child_keys = child_keys;
    m_child_keys_isSet = true;
}

bool OAICategory::is_child_keys_Set() const{
    return m_child_keys_isSet;
}

bool OAICategory::is_child_keys_Valid() const{
    return m_child_keys_isValid;
}

qint32 OAICategory::getCid() const {
    return m_cid;
}
void OAICategory::setCid(const qint32 &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAICategory::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAICategory::is_cid_Valid() const{
    return m_cid_isValid;
}

bool OAICategory::isHidden() const {
    return m_hidden;
}
void OAICategory::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICategory::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICategory::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICategory::getKey() const {
    return m_key;
}
void OAICategory::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICategory::is_key_Set() const{
    return m_key_isSet;
}

bool OAICategory::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICategory::getName() const {
    return m_name;
}
void OAICategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategory::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICategory::isOutlet() const {
    return m_outlet;
}
void OAICategory::setOutlet(const bool &outlet) {
    m_outlet = outlet;
    m_outlet_isSet = true;
}

bool OAICategory::is_outlet_Set() const{
    return m_outlet_isSet;
}

bool OAICategory::is_outlet_Valid() const{
    return m_outlet_isValid;
}

QString OAICategory::getParentKey() const {
    return m_parent_key;
}
void OAICategory::setParentKey(const QString &parent_key) {
    m_parent_key = parent_key;
    m_parent_key_isSet = true;
}

bool OAICategory::is_parent_key_Set() const{
    return m_parent_key_isSet;
}

bool OAICategory::is_parent_key_Valid() const{
    return m_parent_key_isValid;
}

QList<QString> OAICategory::getSuggestedFilters() const {
    return m_suggested_filters;
}
void OAICategory::setSuggestedFilters(const QList<QString> &suggested_filters) {
    m_suggested_filters = suggested_filters;
    m_suggested_filters_isSet = true;
}

bool OAICategory::is_suggested_filters_Set() const{
    return m_suggested_filters_isSet;
}

bool OAICategory::is_suggested_filters_Valid() const{
    return m_suggested_filters_isValid;
}

QString OAICategory::getTargetGroup() const {
    return m_target_group;
}
void OAICategory::setTargetGroup(const QString &target_group) {
    m_target_group = target_group;
    m_target_group_isSet = true;
}

bool OAICategory::is_target_group_Set() const{
    return m_target_group_isSet;
}

bool OAICategory::is_target_group_Valid() const{
    return m_target_group_isValid;
}

QString OAICategory::getType() const {
    return m_type;
}
void OAICategory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategory::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategory::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_child_keys_isValid && m_key_isValid && m_name_isValid && m_suggested_filters_isValid && m_target_group_isValid && true;
}

} // namespace OpenAPI
