/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle::OAIArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle::OAIArticle() {
    this->initializeModel();
}

OAIArticle::~OAIArticle() {}

void OAIArticle::initializeModel() {

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_additional_infos_isSet = false;
    m_additional_infos_isValid = false;

    m_age_groups_isSet = false;
    m_age_groups_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_keys_isSet = false;
    m_category_keys_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_genders_isSet = false;
    m_genders_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_year_isSet = false;
    m_season_year_isValid = false;

    m_shop_url_isSet = false;
    m_shop_url_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle::fromJsonObject(QJsonObject json) {

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("activationDate")]);
    m_activation_date_isSet = !json[QString("activationDate")].isNull() && m_activation_date_isValid;

    m_additional_infos_isValid = ::OpenAPI::fromJsonValue(m_additional_infos, json[QString("additionalInfos")]);
    m_additional_infos_isSet = !json[QString("additionalInfos")].isNull() && m_additional_infos_isValid;

    m_age_groups_isValid = ::OpenAPI::fromJsonValue(m_age_groups, json[QString("ageGroups")]);
    m_age_groups_isSet = !json[QString("ageGroups")].isNull() && m_age_groups_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_keys_isValid = ::OpenAPI::fromJsonValue(m_category_keys, json[QString("categoryKeys")]);
    m_category_keys_isSet = !json[QString("categoryKeys")].isNull() && m_category_keys_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_genders_isValid = ::OpenAPI::fromJsonValue(m_genders, json[QString("genders")]);
    m_genders_isSet = !json[QString("genders")].isNull() && m_genders_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_year_isValid = ::OpenAPI::fromJsonValue(m_season_year, json[QString("seasonYear")]);
    m_season_year_isSet = !json[QString("seasonYear")].isNull() && m_season_year_isValid;

    m_shop_url_isValid = ::OpenAPI::fromJsonValue(m_shop_url, json[QString("shopUrl")]);
    m_shop_url_isSet = !json[QString("shopUrl")].isNull() && m_shop_url_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_date_isSet) {
        obj.insert(QString("activationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_additional_infos.size() > 0) {
        obj.insert(QString("additionalInfos"), ::OpenAPI::toJsonValue(m_additional_infos));
    }
    if (m_age_groups.size() > 0) {
        obj.insert(QString("ageGroups"), ::OpenAPI::toJsonValue(m_age_groups));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_brand.isSet()) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category_keys.size() > 0) {
        obj.insert(QString("categoryKeys"), ::OpenAPI::toJsonValue(m_category_keys));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_genders.size() > 0) {
        obj.insert(QString("genders"), ::OpenAPI::toJsonValue(m_genders));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_year_isSet) {
        obj.insert(QString("seasonYear"), ::OpenAPI::toJsonValue(m_season_year));
    }
    if (m_shop_url_isSet) {
        obj.insert(QString("shopUrl"), ::OpenAPI::toJsonValue(m_shop_url));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_units.size() > 0) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QDateTime OAIArticle::getActivationDate() const {
    return m_activation_date;
}
void OAIArticle::setActivationDate(const QDateTime &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAIArticle::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAIArticle::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

QList<QString> OAIArticle::getAdditionalInfos() const {
    return m_additional_infos;
}
void OAIArticle::setAdditionalInfos(const QList<QString> &additional_infos) {
    m_additional_infos = additional_infos;
    m_additional_infos_isSet = true;
}

bool OAIArticle::is_additional_infos_Set() const{
    return m_additional_infos_isSet;
}

bool OAIArticle::is_additional_infos_Valid() const{
    return m_additional_infos_isValid;
}

QList<QString> OAIArticle::getAgeGroups() const {
    return m_age_groups;
}
void OAIArticle::setAgeGroups(const QList<QString> &age_groups) {
    m_age_groups = age_groups;
    m_age_groups_isSet = true;
}

bool OAIArticle::is_age_groups_Set() const{
    return m_age_groups_isSet;
}

bool OAIArticle::is_age_groups_Valid() const{
    return m_age_groups_isValid;
}

QList<OAIArticle_Attribute> OAIArticle::getAttributes() const {
    return m_attributes;
}
void OAIArticle::setAttributes(const QList<OAIArticle_Attribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIArticle::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIArticle::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIArticle::isAvailable() const {
    return m_available;
}
void OAIArticle::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIArticle::is_available_Set() const{
    return m_available_isSet;
}

bool OAIArticle::is_available_Valid() const{
    return m_available_isValid;
}

OAIBrand OAIArticle::getBrand() const {
    return m_brand;
}
void OAIArticle::setBrand(const OAIBrand &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIArticle::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIArticle::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIArticle::getCategoryKeys() const {
    return m_category_keys;
}
void OAIArticle::setCategoryKeys(const QList<QString> &category_keys) {
    m_category_keys = category_keys;
    m_category_keys_isSet = true;
}

bool OAIArticle::is_category_keys_Set() const{
    return m_category_keys_isSet;
}

bool OAIArticle::is_category_keys_Valid() const{
    return m_category_keys_isValid;
}

QString OAIArticle::getColor() const {
    return m_color;
}
void OAIArticle::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIArticle::is_color_Set() const{
    return m_color_isSet;
}

bool OAIArticle::is_color_Valid() const{
    return m_color_isValid;
}

QList<QString> OAIArticle::getGenders() const {
    return m_genders;
}
void OAIArticle::setGenders(const QList<QString> &genders) {
    m_genders = genders;
    m_genders_isSet = true;
}

bool OAIArticle::is_genders_Set() const{
    return m_genders_isSet;
}

bool OAIArticle::is_genders_Valid() const{
    return m_genders_isValid;
}

QString OAIArticle::getId() const {
    return m_id;
}
void OAIArticle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArticle::is_id_Valid() const{
    return m_id_isValid;
}

OAIArticle_Media OAIArticle::getMedia() const {
    return m_media;
}
void OAIArticle::setMedia(const OAIArticle_Media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIArticle::is_media_Set() const{
    return m_media_isSet;
}

bool OAIArticle::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIArticle::getModelId() const {
    return m_model_id;
}
void OAIArticle::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIArticle::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIArticle::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIArticle::getName() const {
    return m_name;
}
void OAIArticle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArticle::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArticle::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIArticle::getSeason() const {
    return m_season;
}
void OAIArticle::setSeason(const QString &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIArticle::is_season_Set() const{
    return m_season_isSet;
}

bool OAIArticle::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIArticle::getSeasonYear() const {
    return m_season_year;
}
void OAIArticle::setSeasonYear(const QString &season_year) {
    m_season_year = season_year;
    m_season_year_isSet = true;
}

bool OAIArticle::is_season_year_Set() const{
    return m_season_year_isSet;
}

bool OAIArticle::is_season_year_Valid() const{
    return m_season_year_isValid;
}

QString OAIArticle::getShopUrl() const {
    return m_shop_url;
}
void OAIArticle::setShopUrl(const QString &shop_url) {
    m_shop_url = shop_url;
    m_shop_url_isSet = true;
}

bool OAIArticle::is_shop_url_Set() const{
    return m_shop_url_isSet;
}

bool OAIArticle::is_shop_url_Valid() const{
    return m_shop_url_isValid;
}

QList<QString> OAIArticle::getTags() const {
    return m_tags;
}
void OAIArticle::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIArticle::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIArticle::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIArticle_Unit> OAIArticle::getUnits() const {
    return m_units;
}
void OAIArticle::setUnits(const QList<OAIArticle_Unit> &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIArticle::is_units_Set() const{
    return m_units_isSet;
}

bool OAIArticle::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activation_date_isValid && m_additional_infos_isValid && m_age_groups_isValid && m_attributes_isValid && m_available_isValid && m_brand_isValid && m_category_keys_isValid && m_color_isValid && m_genders_isValid && m_id_isValid && m_media_isValid && m_model_id_isValid && m_name_isValid && m_season_isValid && m_season_year_isValid && m_shop_url_isValid && m_units_isValid && true;
}

} // namespace OpenAPI
