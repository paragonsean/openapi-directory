/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle_Unit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle_Unit::OAIArticle_Unit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle_Unit::OAIArticle_Unit() {
    this->initializeModel();
}

OAIArticle_Unit::~OAIArticle_Unit() {}

void OAIArticle_Unit::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_price_isSet = false;
    m_original_price_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_stock_isSet = false;
    m_stock_isValid = false;
}

void OAIArticle_Unit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle_Unit::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_price_isValid = ::OpenAPI::fromJsonValue(m_original_price, json[QString("originalPrice")]);
    m_original_price_isSet = !json[QString("originalPrice")].isNull() && m_original_price_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_stock_isValid = ::OpenAPI::fromJsonValue(m_stock, json[QString("stock")]);
    m_stock_isSet = !json[QString("stock")].isNull() && m_stock_isValid;
}

QString OAIArticle_Unit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle_Unit::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_price.isSet()) {
        obj.insert(QString("originalPrice"), ::OpenAPI::toJsonValue(m_original_price));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_stock_isSet) {
        obj.insert(QString("stock"), ::OpenAPI::toJsonValue(m_stock));
    }
    return obj;
}

bool OAIArticle_Unit::isAvailable() const {
    return m_available;
}
void OAIArticle_Unit::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIArticle_Unit::is_available_Set() const{
    return m_available_isSet;
}

bool OAIArticle_Unit::is_available_Valid() const{
    return m_available_isValid;
}

QString OAIArticle_Unit::getId() const {
    return m_id;
}
void OAIArticle_Unit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArticle_Unit::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArticle_Unit::is_id_Valid() const{
    return m_id_isValid;
}

OAIArticle_Price OAIArticle_Unit::getOriginalPrice() const {
    return m_original_price;
}
void OAIArticle_Unit::setOriginalPrice(const OAIArticle_Price &original_price) {
    m_original_price = original_price;
    m_original_price_isSet = true;
}

bool OAIArticle_Unit::is_original_price_Set() const{
    return m_original_price_isSet;
}

bool OAIArticle_Unit::is_original_price_Valid() const{
    return m_original_price_isValid;
}

QString OAIArticle_Unit::getPartnerId() const {
    return m_partner_id;
}
void OAIArticle_Unit::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIArticle_Unit::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIArticle_Unit::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

OAIArticle_Price OAIArticle_Unit::getPrice() const {
    return m_price;
}
void OAIArticle_Unit::setPrice(const OAIArticle_Price &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIArticle_Unit::is_price_Set() const{
    return m_price_isSet;
}

bool OAIArticle_Unit::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIArticle_Unit::getSize() const {
    return m_size;
}
void OAIArticle_Unit::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIArticle_Unit::is_size_Set() const{
    return m_size_isSet;
}

bool OAIArticle_Unit::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIArticle_Unit::getStock() const {
    return m_stock;
}
void OAIArticle_Unit::setStock(const qint32 &stock) {
    m_stock = stock;
    m_stock_isSet = true;
}

bool OAIArticle_Unit::is_stock_Set() const{
    return m_stock_isSet;
}

bool OAIArticle_Unit::is_stock_Valid() const{
    return m_stock_isValid;
}

bool OAIArticle_Unit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle_Unit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_id_isValid && m_original_price_isValid && m_price_isValid && m_size_isValid && m_stock_isValid && true;
}

} // namespace OpenAPI
