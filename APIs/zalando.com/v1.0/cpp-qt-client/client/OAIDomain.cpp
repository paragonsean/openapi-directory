/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomain::OAIDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomain::OAIDomain() {
    this->initializeModel();
}

OAIDomain::~OAIDomain() {}

void OAIDomain::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_root_category_key_isSet = false;
    m_root_category_key_isValid = false;

    m_shop_url_isSet = false;
    m_shop_url_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;
}

void OAIDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomain::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_root_category_key_isValid = ::OpenAPI::fromJsonValue(m_root_category_key, json[QString("rootCategoryKey")]);
    m_root_category_key_isSet = !json[QString("rootCategoryKey")].isNull() && m_root_category_key_isValid;

    m_shop_url_isValid = ::OpenAPI::fromJsonValue(m_shop_url, json[QString("shopUrl")]);
    m_shop_url_isSet = !json[QString("shopUrl")].isNull() && m_shop_url_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;
}

QString OAIDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_root_category_key_isSet) {
        obj.insert(QString("rootCategoryKey"), ::OpenAPI::toJsonValue(m_root_category_key));
    }
    if (m_shop_url_isSet) {
        obj.insert(QString("shopUrl"), ::OpenAPI::toJsonValue(m_shop_url));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    return obj;
}

QString OAIDomain::getCountryCode() const {
    return m_country_code;
}
void OAIDomain::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIDomain::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIDomain::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIDomain::getCurrencyCode() const {
    return m_currency_code;
}
void OAIDomain::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIDomain::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIDomain::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIDomain::getLanguageCode() const {
    return m_language_code;
}
void OAIDomain::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIDomain::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIDomain::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIDomain::getRootCategoryKey() const {
    return m_root_category_key;
}
void OAIDomain::setRootCategoryKey(const QString &root_category_key) {
    m_root_category_key = root_category_key;
    m_root_category_key_isSet = true;
}

bool OAIDomain::is_root_category_key_Set() const{
    return m_root_category_key_isSet;
}

bool OAIDomain::is_root_category_key_Valid() const{
    return m_root_category_key_isValid;
}

QString OAIDomain::getShopUrl() const {
    return m_shop_url;
}
void OAIDomain::setShopUrl(const QString &shop_url) {
    m_shop_url = shop_url;
    m_shop_url_isSet = true;
}

bool OAIDomain::is_shop_url_Set() const{
    return m_shop_url_isSet;
}

bool OAIDomain::is_shop_url_Valid() const{
    return m_shop_url_isValid;
}

double OAIDomain::getTaxRate() const {
    return m_tax_rate;
}
void OAIDomain::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIDomain::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIDomain::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

bool OAIDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_category_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_code_isValid && m_currency_code_isValid && m_language_code_isValid && m_root_category_key_isValid && m_shop_url_isValid && m_tax_rate_isValid && true;
}

} // namespace OpenAPI
