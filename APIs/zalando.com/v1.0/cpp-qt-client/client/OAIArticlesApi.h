/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArticlesApi_H
#define OAI_OAIArticlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticle.h"
#include "OAIArticle_Media.h"
#include "OAIArticle_Review.h"
#include "OAIArticle_Reviews.h"
#include "OAIArticle_Reviews_Summaries.h"
#include "OAIArticle_Reviews_Summary.h"
#include "OAIArticle_Unit.h"
#include "OAIArticles.h"
#include "OAIErrorMessage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArticlesApi : public QObject {
    Q_OBJECT

public:
    OAIArticlesApi(const int timeOut = 0);
    ~OAIArticlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  article_id QList<QString> [optional]
    * @param[in]  article_model_id QList<QString> [optional]
    * @param[in]  min_star_rating QString [optional]
    * @param[in]  max_star_rating QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articleReviewsGet(const ::OpenAPI::OptionalParam<QList<QString>> &article_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &article_model_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_star_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_star_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articleReviewsReviewIdGet(const QString &review_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_model_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articleReviewsSummariesArticleModelIdGet(const QString &article_model_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_model_id QList<QString> [required]
    * @param[in]  page QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articleReviewsSummariesGet(const QList<QString> &article_model_id, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdGet(const QString &article_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdMediaGet(const QString &article_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  min_star_rating QString [optional]
    * @param[in]  max_star_rating QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdReviewsGet(const QString &article_id, const ::OpenAPI::OptionalParam<QString> &min_star_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_star_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdReviewsSummaryGet(const QString &article_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdUnitsGet(const QString &article_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QString [required]
    * @param[in]  unit_id QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesArticleIdUnitsUnitIdGet(const QString &article_id, const QString &unit_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  article_id QList<QString> [optional]
    * @param[in]  article_model_id QList<QString> [optional]
    * @param[in]  article_unit_id QList<QString> [optional]
    * @param[in]  activation_date QList<QString> [optional]
    * @param[in]  age_group QList<QString> [optional]
    * @param[in]  assortment_area QList<QString> [optional]
    * @param[in]  brand QList<QString> [optional]
    * @param[in]  brandfamily QList<QString> [optional]
    * @param[in]  category QList<QString> [optional]
    * @param[in]  color QList<QString> [optional]
    * @param[in]  den QList<QString> [optional]
    * @param[in]  filling QList<QString> [optional]
    * @param[in]  full_text QString [optional]
    * @param[in]  gender QList<QString> [optional]
    * @param[in]  heel_form QList<QString> [optional]
    * @param[in]  heel_height QList<QString> [optional]
    * @param[in]  length QString [optional]
    * @param[in]  occasion QList<QString> [optional]
    * @param[in]  pattern QList<QString> [optional]
    * @param[in]  price QString [optional]
    * @param[in]  sale QList<QString> [optional]
    * @param[in]  season QList<QString> [optional]
    * @param[in]  shaft_height QList<QString> [optional]
    * @param[in]  shaft_width QList<QString> [optional]
    * @param[in]  shirt_collar QList<QString> [optional]
    * @param[in]  shoe_fastener QList<QString> [optional]
    * @param[in]  shoe_toecap QList<QString> [optional]
    * @param[in]  shop_area QList<QString> [optional]
    * @param[in]  size QString [optional]
    * @param[in]  sports QList<QString> [optional]
    * @param[in]  technology QList<QString> [optional]
    * @param[in]  trouser_rise QList<QString> [optional]
    * @param[in]  upper_material QList<QString> [optional]
    * @param[in]  volume QList<QString> [optional]
    * @param[in]  page QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void articlesGet(const ::OpenAPI::OptionalParam<QList<QString>> &article_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &article_model_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &article_unit_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &activation_date = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &age_group = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &assortment_area = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &brand = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &brandfamily = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &color = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &den = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filling = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &full_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &gender = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &heel_form = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &heel_height = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &occasion = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &pattern = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &price = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sale = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &season = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shaft_height = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shaft_width = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shirt_collar = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shoe_fastener = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shoe_toecap = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &shop_area = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sports = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &technology = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &trouser_rise = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &upper_material = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &volume = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void articleReviewsGetCallback(OAIHttpRequestWorker *worker);
    void articleReviewsReviewIdGetCallback(OAIHttpRequestWorker *worker);
    void articleReviewsSummariesArticleModelIdGetCallback(OAIHttpRequestWorker *worker);
    void articleReviewsSummariesGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdMediaGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdReviewsGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdReviewsSummaryGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdUnitsGetCallback(OAIHttpRequestWorker *worker);
    void articlesArticleIdUnitsUnitIdGetCallback(OAIHttpRequestWorker *worker);
    void articlesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void articleReviewsGetSignal(OAIArticle_Reviews summary);
    void articleReviewsReviewIdGetSignal(OAIArticle_Review summary);
    void articleReviewsSummariesArticleModelIdGetSignal(OAIArticle_Reviews_Summary summary);
    void articleReviewsSummariesGetSignal(OAIArticle_Reviews_Summaries summary);
    void articlesArticleIdGetSignal(OAIArticle summary);
    void articlesArticleIdMediaGetSignal(OAIArticle_Media summary);
    void articlesArticleIdReviewsGetSignal(OAIArticle_Reviews summary);
    void articlesArticleIdReviewsSummaryGetSignal(OAIArticle_Reviews_Summary summary);
    void articlesArticleIdUnitsGetSignal(QList<OAIArticle_Unit> summary);
    void articlesArticleIdUnitsUnitIdGetSignal(OAIArticle_Unit summary);
    void articlesGetSignal(OAIArticles summary);


    void articleReviewsGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Reviews summary);
    void articleReviewsReviewIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Review summary);
    void articleReviewsSummariesArticleModelIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Reviews_Summary summary);
    void articleReviewsSummariesGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Reviews_Summaries summary);
    void articlesArticleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle summary);
    void articlesArticleIdMediaGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Media summary);
    void articlesArticleIdReviewsGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Reviews summary);
    void articlesArticleIdReviewsSummaryGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Reviews_Summary summary);
    void articlesArticleIdUnitsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle_Unit> summary);
    void articlesArticleIdUnitsUnitIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArticle_Unit summary);
    void articlesGetSignalFull(OAIHttpRequestWorker *worker, OAIArticles summary);

    Q_DECL_DEPRECATED_X("Use articleReviewsGetSignalError() instead")
    void articleReviewsGetSignalE(OAIArticle_Reviews summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsGetSignalError(OAIArticle_Reviews summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsReviewIdGetSignalError() instead")
    void articleReviewsReviewIdGetSignalE(OAIArticle_Review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsReviewIdGetSignalError(OAIArticle_Review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsSummariesArticleModelIdGetSignalError() instead")
    void articleReviewsSummariesArticleModelIdGetSignalE(OAIArticle_Reviews_Summary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsSummariesArticleModelIdGetSignalError(OAIArticle_Reviews_Summary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsSummariesGetSignalError() instead")
    void articleReviewsSummariesGetSignalE(OAIArticle_Reviews_Summaries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsSummariesGetSignalError(OAIArticle_Reviews_Summaries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdGetSignalError() instead")
    void articlesArticleIdGetSignalE(OAIArticle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdGetSignalError(OAIArticle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdMediaGetSignalError() instead")
    void articlesArticleIdMediaGetSignalE(OAIArticle_Media summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdMediaGetSignalError(OAIArticle_Media summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdReviewsGetSignalError() instead")
    void articlesArticleIdReviewsGetSignalE(OAIArticle_Reviews summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdReviewsGetSignalError(OAIArticle_Reviews summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdReviewsSummaryGetSignalError() instead")
    void articlesArticleIdReviewsSummaryGetSignalE(OAIArticle_Reviews_Summary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdReviewsSummaryGetSignalError(OAIArticle_Reviews_Summary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdUnitsGetSignalError() instead")
    void articlesArticleIdUnitsGetSignalE(QList<OAIArticle_Unit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdUnitsGetSignalError(QList<OAIArticle_Unit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdUnitsUnitIdGetSignalError() instead")
    void articlesArticleIdUnitsUnitIdGetSignalE(OAIArticle_Unit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdUnitsUnitIdGetSignalError(OAIArticle_Unit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesGetSignalError() instead")
    void articlesGetSignalE(OAIArticles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesGetSignalError(OAIArticles summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use articleReviewsGetSignalErrorFull() instead")
    void articleReviewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsReviewIdGetSignalErrorFull() instead")
    void articleReviewsReviewIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsReviewIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsSummariesArticleModelIdGetSignalErrorFull() instead")
    void articleReviewsSummariesArticleModelIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsSummariesArticleModelIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleReviewsSummariesGetSignalErrorFull() instead")
    void articleReviewsSummariesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleReviewsSummariesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdGetSignalErrorFull() instead")
    void articlesArticleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdMediaGetSignalErrorFull() instead")
    void articlesArticleIdMediaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdMediaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdReviewsGetSignalErrorFull() instead")
    void articlesArticleIdReviewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdReviewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdReviewsSummaryGetSignalErrorFull() instead")
    void articlesArticleIdReviewsSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdReviewsSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdUnitsGetSignalErrorFull() instead")
    void articlesArticleIdUnitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdUnitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesArticleIdUnitsUnitIdGetSignalErrorFull() instead")
    void articlesArticleIdUnitsUnitIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesArticleIdUnitsUnitIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesGetSignalErrorFull() instead")
    void articlesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
