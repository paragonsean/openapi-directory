/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDetail::OAIErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDetail::OAIErrorDetail() {
    this->initializeModel();
}

OAIErrorDetail::~OAIErrorDetail() {}

void OAIErrorDetail::initializeModel() {

    m_invalid_name_isSet = false;
    m_invalid_name_isValid = false;

    m_invalid_values_isSet = false;
    m_invalid_values_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDetail::fromJsonObject(QJsonObject json) {

    m_invalid_name_isValid = ::OpenAPI::fromJsonValue(m_invalid_name, json[QString("invalidName")]);
    m_invalid_name_isSet = !json[QString("invalidName")].isNull() && m_invalid_name_isValid;

    m_invalid_values_isValid = ::OpenAPI::fromJsonValue(m_invalid_values, json[QString("invalidValues")]);
    m_invalid_values_isSet = !json[QString("invalidValues")].isNull() && m_invalid_values_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_invalid_name_isSet) {
        obj.insert(QString("invalidName"), ::OpenAPI::toJsonValue(m_invalid_name));
    }
    if (m_invalid_values.size() > 0) {
        obj.insert(QString("invalidValues"), ::OpenAPI::toJsonValue(m_invalid_values));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIErrorDetail::isInvalidName() const {
    return m_invalid_name;
}
void OAIErrorDetail::setInvalidName(const bool &invalid_name) {
    m_invalid_name = invalid_name;
    m_invalid_name_isSet = true;
}

bool OAIErrorDetail::is_invalid_name_Set() const{
    return m_invalid_name_isSet;
}

bool OAIErrorDetail::is_invalid_name_Valid() const{
    return m_invalid_name_isValid;
}

QList<QString> OAIErrorDetail::getInvalidValues() const {
    return m_invalid_values;
}
void OAIErrorDetail::setInvalidValues(const QList<QString> &invalid_values) {
    m_invalid_values = invalid_values;
    m_invalid_values_isSet = true;
}

bool OAIErrorDetail::is_invalid_values_Set() const{
    return m_invalid_values_isSet;
}

bool OAIErrorDetail::is_invalid_values_Valid() const{
    return m_invalid_values_isValid;
}

QString OAIErrorDetail::getKey() const {
    return m_key;
}
void OAIErrorDetail::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIErrorDetail::is_key_Set() const{
    return m_key_isSet;
}

bool OAIErrorDetail::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIErrorDetail::getName() const {
    return m_name;
}
void OAIErrorDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIErrorDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIErrorDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIErrorDetail::getValue() const {
    return m_value;
}
void OAIErrorDetail::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIErrorDetail::is_value_Set() const{
    return m_value_isSet;
}

bool OAIErrorDetail::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invalid_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
