/**
 * Zalando Shop
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacet_Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacet_Value::OAIFacet_Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacet_Value::OAIFacet_Value() {
    this->initializeModel();
}

OAIFacet_Value::~OAIFacet_Value() {}

void OAIFacet_Value::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIFacet_Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacet_Value::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIFacet_Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacet_Value::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

qint32 OAIFacet_Value::getCount() const {
    return m_count;
}
void OAIFacet_Value::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFacet_Value::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFacet_Value::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIFacet_Value::getDisplayName() const {
    return m_display_name;
}
void OAIFacet_Value::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFacet_Value::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFacet_Value::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFacet_Value::getKey() const {
    return m_key;
}
void OAIFacet_Value::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFacet_Value::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFacet_Value::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIFacet_Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacet_Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_display_name_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
