# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegressionApiBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, convert_date_to: str=None, data: List[object]=None, ignore_variables: List[object]=None, key: str=None, outcome_variable: str=None):
        """RegressionApiBody - a model defined in OpenAPI

        :param convert_date_to: The convert_date_to of this RegressionApiBody.
        :param data: The data of this RegressionApiBody.
        :param ignore_variables: The ignore_variables of this RegressionApiBody.
        :param key: The key of this RegressionApiBody.
        :param outcome_variable: The outcome_variable of this RegressionApiBody.
        """
        self.openapi_types = {
            'convert_date_to': str,
            'data': List[object],
            'ignore_variables': List[object],
            'key': str,
            'outcome_variable': str
        }

        self.attribute_map = {
            'convert_date_to': 'convert_date_to',
            'data': 'data',
            'ignore_variables': 'ignore_variables',
            'key': 'key',
            'outcome_variable': 'outcome_variable'
        }

        self._convert_date_to = convert_date_to
        self._data = data
        self._ignore_variables = ignore_variables
        self._key = key
        self._outcome_variable = outcome_variable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegressionApiBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The regression_api_body of this RegressionApiBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def convert_date_to(self):
        """Gets the convert_date_to of this RegressionApiBody.

        convert dates to either month (1-12) or week (1-52)

        :return: The convert_date_to of this RegressionApiBody.
        :rtype: str
        """
        return self._convert_date_to

    @convert_date_to.setter
    def convert_date_to(self, convert_date_to):
        """Sets the convert_date_to of this RegressionApiBody.

        convert dates to either month (1-12) or week (1-52)

        :param convert_date_to: The convert_date_to of this RegressionApiBody.
        :type convert_date_to: str
        """

        self._convert_date_to = convert_date_to

    @property
    def data(self):
        """Gets the data of this RegressionApiBody.


        :return: The data of this RegressionApiBody.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RegressionApiBody.


        :param data: The data of this RegressionApiBody.
        :type data: List[object]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def ignore_variables(self):
        """Gets the ignore_variables of this RegressionApiBody.


        :return: The ignore_variables of this RegressionApiBody.
        :rtype: List[object]
        """
        return self._ignore_variables

    @ignore_variables.setter
    def ignore_variables(self, ignore_variables):
        """Sets the ignore_variables of this RegressionApiBody.


        :param ignore_variables: The ignore_variables of this RegressionApiBody.
        :type ignore_variables: List[object]
        """

        self._ignore_variables = ignore_variables

    @property
    def key(self):
        """Gets the key of this RegressionApiBody.

        api key

        :return: The key of this RegressionApiBody.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RegressionApiBody.

        api key

        :param key: The key of this RegressionApiBody.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def outcome_variable(self):
        """Gets the outcome_variable of this RegressionApiBody.

        name of the desired outcome variable

        :return: The outcome_variable of this RegressionApiBody.
        :rtype: str
        """
        return self._outcome_variable

    @outcome_variable.setter
    def outcome_variable(self, outcome_variable):
        """Sets the outcome_variable of this RegressionApiBody.

        name of the desired outcome variable

        :param outcome_variable: The outcome_variable of this RegressionApiBody.
        :type outcome_variable: str
        """
        if outcome_variable is None:
            raise ValueError("Invalid value for `outcome_variable`, must not be `None`")

        self._outcome_variable = outcome_variable
