# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResultCalls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, limit_reached: bool=None, this_month: int=None):
        """ResultCalls - a model defined in OpenAPI

        :param limit: The limit of this ResultCalls.
        :param limit_reached: The limit_reached of this ResultCalls.
        :param this_month: The this_month of this ResultCalls.
        """
        self.openapi_types = {
            'limit': int,
            'limit_reached': bool,
            'this_month': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'limit_reached': 'limit_reached',
            'this_month': 'this_month'
        }

        self._limit = limit
        self._limit_reached = limit_reached
        self._this_month = this_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResultCalls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The result_calls of this ResultCalls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this ResultCalls.

        number of api calls allowed per month

        :return: The limit of this ResultCalls.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ResultCalls.

        number of api calls allowed per month

        :param limit: The limit of this ResultCalls.
        :type limit: int
        """

        self._limit = limit

    @property
    def limit_reached(self):
        """Gets the limit_reached of this ResultCalls.

        true if monthly limit has been reached

        :return: The limit_reached of this ResultCalls.
        :rtype: bool
        """
        return self._limit_reached

    @limit_reached.setter
    def limit_reached(self, limit_reached):
        """Sets the limit_reached of this ResultCalls.

        true if monthly limit has been reached

        :param limit_reached: The limit_reached of this ResultCalls.
        :type limit_reached: bool
        """

        self._limit_reached = limit_reached

    @property
    def this_month(self):
        """Gets the this_month of this ResultCalls.

        number of api calls this month

        :return: The this_month of this ResultCalls.
        :rtype: int
        """
        return self._this_month

    @this_month.setter
    def this_month(self, this_month):
        """Sets the this_month of this ResultCalls.

        number of api calls this month

        :param this_month: The this_month of this ResultCalls.
        :type this_month: int
        """

        self._this_month = this_month
