/**
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResultCalls from './ResultCalls';
import ResultStandardizedCoefficients from './ResultStandardizedCoefficients';

/**
 * The Result model module.
 * @module model/Result
 * @version 1.0
 */
class Result {
    /**
     * Constructs a new <code>Result</code>.
     * @alias module:model/Result
     */
    constructor() { 
        
        Result.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Result</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Result} obj Optional instance to populate.
     * @return {module:model/Result} The populated <code>Result</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Result();

            if (data.hasOwnProperty('calls&quot;')) {
                obj['calls&quot;'] = ResultCalls.constructFromObject(data['calls"']);
            }
            if (data.hasOwnProperty('data_count')) {
                obj['data_count'] = ApiClient.convertToType(data['data_count'], 'Number');
            }
            if (data.hasOwnProperty('dates_converted_to')) {
                obj['dates_converted_to'] = ApiClient.convertToType(data['dates_converted_to'], 'String');
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('number_observations')) {
                obj['number_observations'] = ApiClient.convertToType(data['number_observations'], 'Number');
            }
            if (data.hasOwnProperty('number_tests')) {
                obj['number_tests'] = ApiClient.convertToType(data['number_tests'], 'Number');
            }
            if (data.hasOwnProperty('outcome_variable')) {
                obj['outcome_variable'] = ApiClient.convertToType(data['outcome_variable'], 'String');
            }
            if (data.hasOwnProperty('paid')) {
                obj['paid'] = ApiClient.convertToType(data['paid'], 'String');
            }
            if (data.hasOwnProperty('pdf')) {
                obj['pdf'] = ApiClient.convertToType(data['pdf'], 'String');
            }
            if (data.hasOwnProperty('prediction_mean_accuracy')) {
                obj['prediction_mean_accuracy'] = ApiClient.convertToType(data['prediction_mean_accuracy'], 'Number');
            }
            if (data.hasOwnProperty('standardized_coefficients')) {
                obj['standardized_coefficients'] = ApiClient.convertToType(data['standardized_coefficients'], [ResultStandardizedCoefficients]);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], [Object]);
            }
            if (data.hasOwnProperty('tested_variables')) {
                obj['tested_variables'] = ApiClient.convertToType(data['tested_variables'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Result</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Result</code>.
     */
    static validateJSON(data) {
        // validate the optional field `calls"`
        if (data['calls"']) { // data not null
          ResultCalls.validateJSON(data['calls"']);
        }
        // ensure the json data is a string
        if (data['dates_converted_to'] && !(typeof data['dates_converted_to'] === 'string' || data['dates_converted_to'] instanceof String)) {
            throw new Error("Expected the field `dates_converted_to` to be a primitive type in the JSON string but got " + data['dates_converted_to']);
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['outcome_variable'] && !(typeof data['outcome_variable'] === 'string' || data['outcome_variable'] instanceof String)) {
            throw new Error("Expected the field `outcome_variable` to be a primitive type in the JSON string but got " + data['outcome_variable']);
        }
        // ensure the json data is a string
        if (data['paid'] && !(typeof data['paid'] === 'string' || data['paid'] instanceof String)) {
            throw new Error("Expected the field `paid` to be a primitive type in the JSON string but got " + data['paid']);
        }
        // ensure the json data is a string
        if (data['pdf'] && !(typeof data['pdf'] === 'string' || data['pdf'] instanceof String)) {
            throw new Error("Expected the field `pdf` to be a primitive type in the JSON string but got " + data['pdf']);
        }
        if (data['standardized_coefficients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['standardized_coefficients'])) {
                throw new Error("Expected the field `standardized_coefficients` to be an array in the JSON data but got " + data['standardized_coefficients']);
            }
            // validate the optional field `standardized_coefficients` (array)
            for (const item of data['standardized_coefficients']) {
                ResultStandardizedCoefficients.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['summary'])) {
            throw new Error("Expected the field `summary` to be an array in the JSON data but got " + data['summary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tested_variables'])) {
            throw new Error("Expected the field `tested_variables` to be an array in the JSON data but got " + data['tested_variables']);
        }

        return true;
    }


}



/**
 * @member {module:model/ResultCalls} calls&quot;
 */
Result.prototype['calls&quot;'] = undefined;

/**
 * number of data rows processed
 * @member {Number} data_count
 */
Result.prototype['data_count'] = undefined;

/**
 * either month or week
 * @member {String} dates_converted_to
 */
Result.prototype['dates_converted_to'] = undefined;

/**
 * text for pdf footer
 * @member {String} footer
 */
Result.prototype['footer'] = undefined;

/**
 * text for pdf header
 * @member {String} header
 */
Result.prototype['header'] = undefined;

/**
 * number of data rows used for analysis
 * @member {Number} number_observations
 */
Result.prototype['number_observations'] = undefined;

/**
 * number of data rows used to test model accuracy
 * @member {Number} number_tests
 */
Result.prototype['number_tests'] = undefined;

/**
 * the name of the variable processed as the outcome
 * @member {String} outcome_variable
 */
Result.prototype['outcome_variable'] = undefined;

/**
 * yes if paid subscriber, otherwise no
 * @member {String} paid
 */
Result.prototype['paid'] = undefined;

/**
 * url of pdf summary
 * @member {String} pdf
 */
Result.prototype['pdf'] = undefined;

/**
 * percentage accuracy of model created
 * @member {Number} prediction_mean_accuracy
 */
Result.prototype['prediction_mean_accuracy'] = undefined;

/**
 * @member {Array.<module:model/ResultStandardizedCoefficients>} standardized_coefficients
 */
Result.prototype['standardized_coefficients'] = undefined;

/**
 * @member {Array.<Object>} summary
 */
Result.prototype['summary'] = undefined;

/**
 * @member {Array.<String>} tested_variables
 */
Result.prototype['tested_variables'] = undefined;






export default Result;

