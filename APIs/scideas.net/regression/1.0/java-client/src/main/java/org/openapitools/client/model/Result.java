/*
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResultCalls;
import org.openapitools.client.model.ResultStandardizedCoefficients;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:49.479071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Result {
  public static final String SERIALIZED_NAME_CALLS_DOUBLE_QUOTE = "calls&quot;";
  @SerializedName(SERIALIZED_NAME_CALLS_DOUBLE_QUOTE)
  private ResultCalls callsDoubleQuote;

  public static final String SERIALIZED_NAME_DATA_COUNT = "data_count";
  @SerializedName(SERIALIZED_NAME_DATA_COUNT)
  private Integer dataCount;

  public static final String SERIALIZED_NAME_DATES_CONVERTED_TO = "dates_converted_to";
  @SerializedName(SERIALIZED_NAME_DATES_CONVERTED_TO)
  private String datesConvertedTo;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private String footer;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_NUMBER_OBSERVATIONS = "number_observations";
  @SerializedName(SERIALIZED_NAME_NUMBER_OBSERVATIONS)
  private Integer numberObservations;

  public static final String SERIALIZED_NAME_NUMBER_TESTS = "number_tests";
  @SerializedName(SERIALIZED_NAME_NUMBER_TESTS)
  private Integer numberTests;

  public static final String SERIALIZED_NAME_OUTCOME_VARIABLE = "outcome_variable";
  @SerializedName(SERIALIZED_NAME_OUTCOME_VARIABLE)
  private String outcomeVariable;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private String paid;

  public static final String SERIALIZED_NAME_PDF = "pdf";
  @SerializedName(SERIALIZED_NAME_PDF)
  private String pdf;

  public static final String SERIALIZED_NAME_PREDICTION_MEAN_ACCURACY = "prediction_mean_accuracy";
  @SerializedName(SERIALIZED_NAME_PREDICTION_MEAN_ACCURACY)
  private Integer predictionMeanAccuracy;

  public static final String SERIALIZED_NAME_STANDARDIZED_COEFFICIENTS = "standardized_coefficients";
  @SerializedName(SERIALIZED_NAME_STANDARDIZED_COEFFICIENTS)
  private List<ResultStandardizedCoefficients> standardizedCoefficients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private List<Object> summary = new ArrayList<>();

  public static final String SERIALIZED_NAME_TESTED_VARIABLES = "tested_variables";
  @SerializedName(SERIALIZED_NAME_TESTED_VARIABLES)
  private List<String> testedVariables = new ArrayList<>();

  public Result() {
  }

  public Result callsDoubleQuote(ResultCalls callsDoubleQuote) {
    this.callsDoubleQuote = callsDoubleQuote;
    return this;
  }

  /**
   * Get callsDoubleQuote
   * @return callsDoubleQuote
   */
  @javax.annotation.Nullable
  public ResultCalls getCallsDoubleQuote() {
    return callsDoubleQuote;
  }

  public void setCallsDoubleQuote(ResultCalls callsDoubleQuote) {
    this.callsDoubleQuote = callsDoubleQuote;
  }


  public Result dataCount(Integer dataCount) {
    this.dataCount = dataCount;
    return this;
  }

  /**
   * number of data rows processed
   * @return dataCount
   */
  @javax.annotation.Nullable
  public Integer getDataCount() {
    return dataCount;
  }

  public void setDataCount(Integer dataCount) {
    this.dataCount = dataCount;
  }


  public Result datesConvertedTo(String datesConvertedTo) {
    this.datesConvertedTo = datesConvertedTo;
    return this;
  }

  /**
   * either month or week
   * @return datesConvertedTo
   */
  @javax.annotation.Nullable
  public String getDatesConvertedTo() {
    return datesConvertedTo;
  }

  public void setDatesConvertedTo(String datesConvertedTo) {
    this.datesConvertedTo = datesConvertedTo;
  }


  public Result footer(String footer) {
    this.footer = footer;
    return this;
  }

  /**
   * text for pdf footer
   * @return footer
   */
  @javax.annotation.Nullable
  public String getFooter() {
    return footer;
  }

  public void setFooter(String footer) {
    this.footer = footer;
  }


  public Result header(String header) {
    this.header = header;
    return this;
  }

  /**
   * text for pdf header
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public Result numberObservations(Integer numberObservations) {
    this.numberObservations = numberObservations;
    return this;
  }

  /**
   * number of data rows used for analysis
   * @return numberObservations
   */
  @javax.annotation.Nullable
  public Integer getNumberObservations() {
    return numberObservations;
  }

  public void setNumberObservations(Integer numberObservations) {
    this.numberObservations = numberObservations;
  }


  public Result numberTests(Integer numberTests) {
    this.numberTests = numberTests;
    return this;
  }

  /**
   * number of data rows used to test model accuracy
   * @return numberTests
   */
  @javax.annotation.Nullable
  public Integer getNumberTests() {
    return numberTests;
  }

  public void setNumberTests(Integer numberTests) {
    this.numberTests = numberTests;
  }


  public Result outcomeVariable(String outcomeVariable) {
    this.outcomeVariable = outcomeVariable;
    return this;
  }

  /**
   * the name of the variable processed as the outcome
   * @return outcomeVariable
   */
  @javax.annotation.Nullable
  public String getOutcomeVariable() {
    return outcomeVariable;
  }

  public void setOutcomeVariable(String outcomeVariable) {
    this.outcomeVariable = outcomeVariable;
  }


  public Result paid(String paid) {
    this.paid = paid;
    return this;
  }

  /**
   * yes if paid subscriber, otherwise no
   * @return paid
   */
  @javax.annotation.Nullable
  public String getPaid() {
    return paid;
  }

  public void setPaid(String paid) {
    this.paid = paid;
  }


  public Result pdf(String pdf) {
    this.pdf = pdf;
    return this;
  }

  /**
   * url of pdf summary
   * @return pdf
   */
  @javax.annotation.Nullable
  public String getPdf() {
    return pdf;
  }

  public void setPdf(String pdf) {
    this.pdf = pdf;
  }


  public Result predictionMeanAccuracy(Integer predictionMeanAccuracy) {
    this.predictionMeanAccuracy = predictionMeanAccuracy;
    return this;
  }

  /**
   * percentage accuracy of model created
   * @return predictionMeanAccuracy
   */
  @javax.annotation.Nullable
  public Integer getPredictionMeanAccuracy() {
    return predictionMeanAccuracy;
  }

  public void setPredictionMeanAccuracy(Integer predictionMeanAccuracy) {
    this.predictionMeanAccuracy = predictionMeanAccuracy;
  }


  public Result standardizedCoefficients(List<ResultStandardizedCoefficients> standardizedCoefficients) {
    this.standardizedCoefficients = standardizedCoefficients;
    return this;
  }

  public Result addStandardizedCoefficientsItem(ResultStandardizedCoefficients standardizedCoefficientsItem) {
    if (this.standardizedCoefficients == null) {
      this.standardizedCoefficients = new ArrayList<>();
    }
    this.standardizedCoefficients.add(standardizedCoefficientsItem);
    return this;
  }

  /**
   * Get standardizedCoefficients
   * @return standardizedCoefficients
   */
  @javax.annotation.Nullable
  public List<ResultStandardizedCoefficients> getStandardizedCoefficients() {
    return standardizedCoefficients;
  }

  public void setStandardizedCoefficients(List<ResultStandardizedCoefficients> standardizedCoefficients) {
    this.standardizedCoefficients = standardizedCoefficients;
  }


  public Result summary(List<Object> summary) {
    this.summary = summary;
    return this;
  }

  public Result addSummaryItem(Object summaryItem) {
    if (this.summary == null) {
      this.summary = new ArrayList<>();
    }
    this.summary.add(summaryItem);
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public List<Object> getSummary() {
    return summary;
  }

  public void setSummary(List<Object> summary) {
    this.summary = summary;
  }


  public Result testedVariables(List<String> testedVariables) {
    this.testedVariables = testedVariables;
    return this;
  }

  public Result addTestedVariablesItem(String testedVariablesItem) {
    if (this.testedVariables == null) {
      this.testedVariables = new ArrayList<>();
    }
    this.testedVariables.add(testedVariablesItem);
    return this;
  }

  /**
   * Get testedVariables
   * @return testedVariables
   */
  @javax.annotation.Nullable
  public List<String> getTestedVariables() {
    return testedVariables;
  }

  public void setTestedVariables(List<String> testedVariables) {
    this.testedVariables = testedVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result result = (Result) o;
    return Objects.equals(this.callsDoubleQuote, result.callsDoubleQuote) &&
        Objects.equals(this.dataCount, result.dataCount) &&
        Objects.equals(this.datesConvertedTo, result.datesConvertedTo) &&
        Objects.equals(this.footer, result.footer) &&
        Objects.equals(this.header, result.header) &&
        Objects.equals(this.numberObservations, result.numberObservations) &&
        Objects.equals(this.numberTests, result.numberTests) &&
        Objects.equals(this.outcomeVariable, result.outcomeVariable) &&
        Objects.equals(this.paid, result.paid) &&
        Objects.equals(this.pdf, result.pdf) &&
        Objects.equals(this.predictionMeanAccuracy, result.predictionMeanAccuracy) &&
        Objects.equals(this.standardizedCoefficients, result.standardizedCoefficients) &&
        Objects.equals(this.summary, result.summary) &&
        Objects.equals(this.testedVariables, result.testedVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callsDoubleQuote, dataCount, datesConvertedTo, footer, header, numberObservations, numberTests, outcomeVariable, paid, pdf, predictionMeanAccuracy, standardizedCoefficients, summary, testedVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result {\n");
    sb.append("    callsDoubleQuote: ").append(toIndentedString(callsDoubleQuote)).append("\n");
    sb.append("    dataCount: ").append(toIndentedString(dataCount)).append("\n");
    sb.append("    datesConvertedTo: ").append(toIndentedString(datesConvertedTo)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    numberObservations: ").append(toIndentedString(numberObservations)).append("\n");
    sb.append("    numberTests: ").append(toIndentedString(numberTests)).append("\n");
    sb.append("    outcomeVariable: ").append(toIndentedString(outcomeVariable)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("    predictionMeanAccuracy: ").append(toIndentedString(predictionMeanAccuracy)).append("\n");
    sb.append("    standardizedCoefficients: ").append(toIndentedString(standardizedCoefficients)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    testedVariables: ").append(toIndentedString(testedVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls&quot;");
    openapiFields.add("data_count");
    openapiFields.add("dates_converted_to");
    openapiFields.add("footer");
    openapiFields.add("header");
    openapiFields.add("number_observations");
    openapiFields.add("number_tests");
    openapiFields.add("outcome_variable");
    openapiFields.add("paid");
    openapiFields.add("pdf");
    openapiFields.add("prediction_mean_accuracy");
    openapiFields.add("standardized_coefficients");
    openapiFields.add("summary");
    openapiFields.add("tested_variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result is not found in the empty JSON string", Result.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `calls"`
      if (jsonObj.get("calls"") != null && !jsonObj.get("calls"").isJsonNull()) {
        ResultCalls.validateJsonElement(jsonObj.get("calls""));
      }
      if ((jsonObj.get("dates_converted_to") != null && !jsonObj.get("dates_converted_to").isJsonNull()) && !jsonObj.get("dates_converted_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dates_converted_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dates_converted_to").toString()));
      }
      if ((jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) && !jsonObj.get("footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer").toString()));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("outcome_variable") != null && !jsonObj.get("outcome_variable").isJsonNull()) && !jsonObj.get("outcome_variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outcome_variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outcome_variable").toString()));
      }
      if ((jsonObj.get("paid") != null && !jsonObj.get("paid").isJsonNull()) && !jsonObj.get("paid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paid").toString()));
      }
      if ((jsonObj.get("pdf") != null && !jsonObj.get("pdf").isJsonNull()) && !jsonObj.get("pdf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf").toString()));
      }
      if (jsonObj.get("standardized_coefficients") != null && !jsonObj.get("standardized_coefficients").isJsonNull()) {
        JsonArray jsonArraystandardizedCoefficients = jsonObj.getAsJsonArray("standardized_coefficients");
        if (jsonArraystandardizedCoefficients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("standardized_coefficients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `standardized_coefficients` to be an array in the JSON string but got `%s`", jsonObj.get("standardized_coefficients").toString()));
          }

          // validate the optional field `standardized_coefficients` (array)
          for (int i = 0; i < jsonArraystandardizedCoefficients.size(); i++) {
            ResultStandardizedCoefficients.validateJsonElement(jsonArraystandardizedCoefficients.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull() && !jsonObj.get("summary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be an array in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tested_variables") != null && !jsonObj.get("tested_variables").isJsonNull() && !jsonObj.get("tested_variables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tested_variables` to be an array in the JSON string but got `%s`", jsonObj.get("tested_variables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result.class));

       return (TypeAdapter<T>) new TypeAdapter<Result>() {
           @Override
           public void write(JsonWriter out, Result value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result
   * @throws IOException if the JSON string is invalid with respect to Result
   */
  public static Result fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result.class);
  }

  /**
   * Convert an instance of Result to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

