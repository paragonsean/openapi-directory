/*
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegressionApiBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:49.479071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegressionApiBody {
  public static final String SERIALIZED_NAME_CONVERT_DATE_TO = "convert_date_to";
  @SerializedName(SERIALIZED_NAME_CONVERT_DATE_TO)
  private String convertDateTo;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Object> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORE_VARIABLES = "ignore_variables";
  @SerializedName(SERIALIZED_NAME_IGNORE_VARIABLES)
  private List<Object> ignoreVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_OUTCOME_VARIABLE = "outcome_variable";
  @SerializedName(SERIALIZED_NAME_OUTCOME_VARIABLE)
  private String outcomeVariable;

  public RegressionApiBody() {
  }

  public RegressionApiBody convertDateTo(String convertDateTo) {
    this.convertDateTo = convertDateTo;
    return this;
  }

  /**
   * convert dates to either month (1-12) or week (1-52)
   * @return convertDateTo
   */
  @javax.annotation.Nullable
  public String getConvertDateTo() {
    return convertDateTo;
  }

  public void setConvertDateTo(String convertDateTo) {
    this.convertDateTo = convertDateTo;
  }


  public RegressionApiBody data(List<Object> data) {
    this.data = data;
    return this;
  }

  public RegressionApiBody addDataItem(Object dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public List<Object> getData() {
    return data;
  }

  public void setData(List<Object> data) {
    this.data = data;
  }


  public RegressionApiBody ignoreVariables(List<Object> ignoreVariables) {
    this.ignoreVariables = ignoreVariables;
    return this;
  }

  public RegressionApiBody addIgnoreVariablesItem(Object ignoreVariablesItem) {
    if (this.ignoreVariables == null) {
      this.ignoreVariables = new ArrayList<>();
    }
    this.ignoreVariables.add(ignoreVariablesItem);
    return this;
  }

  /**
   * Get ignoreVariables
   * @return ignoreVariables
   */
  @javax.annotation.Nullable
  public List<Object> getIgnoreVariables() {
    return ignoreVariables;
  }

  public void setIgnoreVariables(List<Object> ignoreVariables) {
    this.ignoreVariables = ignoreVariables;
  }


  public RegressionApiBody key(String key) {
    this.key = key;
    return this;
  }

  /**
   * api key
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public RegressionApiBody outcomeVariable(String outcomeVariable) {
    this.outcomeVariable = outcomeVariable;
    return this;
  }

  /**
   * name of the desired outcome variable
   * @return outcomeVariable
   */
  @javax.annotation.Nonnull
  public String getOutcomeVariable() {
    return outcomeVariable;
  }

  public void setOutcomeVariable(String outcomeVariable) {
    this.outcomeVariable = outcomeVariable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegressionApiBody regressionApiBody = (RegressionApiBody) o;
    return Objects.equals(this.convertDateTo, regressionApiBody.convertDateTo) &&
        Objects.equals(this.data, regressionApiBody.data) &&
        Objects.equals(this.ignoreVariables, regressionApiBody.ignoreVariables) &&
        Objects.equals(this.key, regressionApiBody.key) &&
        Objects.equals(this.outcomeVariable, regressionApiBody.outcomeVariable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convertDateTo, data, ignoreVariables, key, outcomeVariable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegressionApiBody {\n");
    sb.append("    convertDateTo: ").append(toIndentedString(convertDateTo)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    ignoreVariables: ").append(toIndentedString(ignoreVariables)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    outcomeVariable: ").append(toIndentedString(outcomeVariable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("convert_date_to");
    openapiFields.add("data");
    openapiFields.add("ignore_variables");
    openapiFields.add("key");
    openapiFields.add("outcome_variable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("outcome_variable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegressionApiBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegressionApiBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegressionApiBody is not found in the empty JSON string", RegressionApiBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegressionApiBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegressionApiBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegressionApiBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("convert_date_to") != null && !jsonObj.get("convert_date_to").isJsonNull()) && !jsonObj.get("convert_date_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convert_date_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convert_date_to").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("data") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignore_variables") != null && !jsonObj.get("ignore_variables").isJsonNull() && !jsonObj.get("ignore_variables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignore_variables` to be an array in the JSON string but got `%s`", jsonObj.get("ignore_variables").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("outcome_variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outcome_variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outcome_variable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegressionApiBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegressionApiBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegressionApiBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegressionApiBody.class));

       return (TypeAdapter<T>) new TypeAdapter<RegressionApiBody>() {
           @Override
           public void write(JsonWriter out, RegressionApiBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegressionApiBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegressionApiBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegressionApiBody
   * @throws IOException if the JSON string is invalid with respect to RegressionApiBody
   */
  public static RegressionApiBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegressionApiBody.class);
  }

  /**
   * Convert an instance of RegressionApiBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

