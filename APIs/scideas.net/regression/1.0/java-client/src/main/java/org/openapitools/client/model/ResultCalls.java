/*
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResultCalls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:49.479071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultCalls {
  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_LIMIT_REACHED = "limit_reached";
  @SerializedName(SERIALIZED_NAME_LIMIT_REACHED)
  private Boolean limitReached;

  public static final String SERIALIZED_NAME_THIS_MONTH = "this_month";
  @SerializedName(SERIALIZED_NAME_THIS_MONTH)
  private Integer thisMonth;

  public ResultCalls() {
  }

  public ResultCalls limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * number of api calls allowed per month
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ResultCalls limitReached(Boolean limitReached) {
    this.limitReached = limitReached;
    return this;
  }

  /**
   * true if monthly limit has been reached
   * @return limitReached
   */
  @javax.annotation.Nullable
  public Boolean getLimitReached() {
    return limitReached;
  }

  public void setLimitReached(Boolean limitReached) {
    this.limitReached = limitReached;
  }


  public ResultCalls thisMonth(Integer thisMonth) {
    this.thisMonth = thisMonth;
    return this;
  }

  /**
   * number of api calls this month
   * @return thisMonth
   */
  @javax.annotation.Nullable
  public Integer getThisMonth() {
    return thisMonth;
  }

  public void setThisMonth(Integer thisMonth) {
    this.thisMonth = thisMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultCalls resultCalls = (ResultCalls) o;
    return Objects.equals(this.limit, resultCalls.limit) &&
        Objects.equals(this.limitReached, resultCalls.limitReached) &&
        Objects.equals(this.thisMonth, resultCalls.thisMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, limitReached, thisMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultCalls {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    limitReached: ").append(toIndentedString(limitReached)).append("\n");
    sb.append("    thisMonth: ").append(toIndentedString(thisMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("limit");
    openapiFields.add("limit_reached");
    openapiFields.add("this_month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultCalls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultCalls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultCalls is not found in the empty JSON string", ResultCalls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultCalls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultCalls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultCalls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultCalls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultCalls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultCalls.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultCalls>() {
           @Override
           public void write(JsonWriter out, ResultCalls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultCalls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultCalls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultCalls
   * @throws IOException if the JSON string is invalid with respect to ResultCalls
   */
  public static ResultCalls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultCalls.class);
  }

  /**
   * Convert an instance of ResultCalls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

