/*
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResultStandardizedCoefficients
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:49.479071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultStandardizedCoefficients {
  public static final String SERIALIZED_NAME_COEFFICIENT = "coefficient";
  @SerializedName(SERIALIZED_NAME_COEFFICIENT)
  private Integer coefficient;

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  private String variable;

  public ResultStandardizedCoefficients() {
  }

  public ResultStandardizedCoefficients coefficient(Integer coefficient) {
    this.coefficient = coefficient;
    return this;
  }

  /**
   * standardized regression coefficient for variable
   * @return coefficient
   */
  @javax.annotation.Nullable
  public Integer getCoefficient() {
    return coefficient;
  }

  public void setCoefficient(Integer coefficient) {
    this.coefficient = coefficient;
  }


  public ResultStandardizedCoefficients variable(String variable) {
    this.variable = variable;
    return this;
  }

  /**
   * name of variable
   * @return variable
   */
  @javax.annotation.Nullable
  public String getVariable() {
    return variable;
  }

  public void setVariable(String variable) {
    this.variable = variable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultStandardizedCoefficients resultStandardizedCoefficients = (ResultStandardizedCoefficients) o;
    return Objects.equals(this.coefficient, resultStandardizedCoefficients.coefficient) &&
        Objects.equals(this.variable, resultStandardizedCoefficients.variable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coefficient, variable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultStandardizedCoefficients {\n");
    sb.append("    coefficient: ").append(toIndentedString(coefficient)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coefficient");
    openapiFields.add("variable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultStandardizedCoefficients
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultStandardizedCoefficients.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultStandardizedCoefficients is not found in the empty JSON string", ResultStandardizedCoefficients.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultStandardizedCoefficients.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultStandardizedCoefficients` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) && !jsonObj.get("variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultStandardizedCoefficients.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultStandardizedCoefficients' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultStandardizedCoefficients> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultStandardizedCoefficients.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultStandardizedCoefficients>() {
           @Override
           public void write(JsonWriter out, ResultStandardizedCoefficients value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultStandardizedCoefficients read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultStandardizedCoefficients given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultStandardizedCoefficients
   * @throws IOException if the JSON string is invalid with respect to ResultStandardizedCoefficients
   */
  public static ResultStandardizedCoefficients fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultStandardizedCoefficients.class);
  }

  /**
   * Convert an instance of ResultStandardizedCoefficients to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

