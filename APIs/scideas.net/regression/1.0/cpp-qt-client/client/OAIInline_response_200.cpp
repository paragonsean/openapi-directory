/**
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->initializeModel();
}

OAIInline_response_200::~OAIInline_response_200() {}

void OAIInline_response_200::initializeModel() {

    m_calls_isSet = false;
    m_calls_isValid = false;

    m_data_count_isSet = false;
    m_data_count_isValid = false;

    m_dates_converted_to_isSet = false;
    m_dates_converted_to_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_number_observations_isSet = false;
    m_number_observations_isValid = false;

    m_number_tests_isSet = false;
    m_number_tests_isValid = false;

    m_outcome_variable_isSet = false;
    m_outcome_variable_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;

    m_pdf_isSet = false;
    m_pdf_isValid = false;

    m_prediction_mean_accuracy_isSet = false;
    m_prediction_mean_accuracy_isValid = false;

    m_standardized_coefficients_isSet = false;
    m_standardized_coefficients_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tested_variables_isSet = false;
    m_tested_variables_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200::fromJsonObject(QJsonObject json) {

    m_calls_isValid = ::OpenAPI::fromJsonValue(m_calls, json[QString("calls&quot;")]);
    m_calls_isSet = !json[QString("calls&quot;")].isNull() && m_calls_isValid;

    m_data_count_isValid = ::OpenAPI::fromJsonValue(m_data_count, json[QString("data_count")]);
    m_data_count_isSet = !json[QString("data_count")].isNull() && m_data_count_isValid;

    m_dates_converted_to_isValid = ::OpenAPI::fromJsonValue(m_dates_converted_to, json[QString("dates_converted_to")]);
    m_dates_converted_to_isSet = !json[QString("dates_converted_to")].isNull() && m_dates_converted_to_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_number_observations_isValid = ::OpenAPI::fromJsonValue(m_number_observations, json[QString("number_observations")]);
    m_number_observations_isSet = !json[QString("number_observations")].isNull() && m_number_observations_isValid;

    m_number_tests_isValid = ::OpenAPI::fromJsonValue(m_number_tests, json[QString("number_tests")]);
    m_number_tests_isSet = !json[QString("number_tests")].isNull() && m_number_tests_isValid;

    m_outcome_variable_isValid = ::OpenAPI::fromJsonValue(m_outcome_variable, json[QString("outcome_variable")]);
    m_outcome_variable_isSet = !json[QString("outcome_variable")].isNull() && m_outcome_variable_isValid;

    m_paid_isValid = ::OpenAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;

    m_pdf_isValid = ::OpenAPI::fromJsonValue(m_pdf, json[QString("pdf")]);
    m_pdf_isSet = !json[QString("pdf")].isNull() && m_pdf_isValid;

    m_prediction_mean_accuracy_isValid = ::OpenAPI::fromJsonValue(m_prediction_mean_accuracy, json[QString("prediction_mean_accuracy")]);
    m_prediction_mean_accuracy_isSet = !json[QString("prediction_mean_accuracy")].isNull() && m_prediction_mean_accuracy_isValid;

    m_standardized_coefficients_isValid = ::OpenAPI::fromJsonValue(m_standardized_coefficients, json[QString("standardized_coefficients")]);
    m_standardized_coefficients_isSet = !json[QString("standardized_coefficients")].isNull() && m_standardized_coefficients_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tested_variables_isValid = ::OpenAPI::fromJsonValue(m_tested_variables, json[QString("tested_variables")]);
    m_tested_variables_isSet = !json[QString("tested_variables")].isNull() && m_tested_variables_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIInline_response_200::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
    if (m_calls.isSet()) {
        obj.insert(QString("calls&quot;"), ::OpenAPI::toJsonValue(m_calls));
    }
    if (m_data_count_isSet) {
        obj.insert(QString("data_count"), ::OpenAPI::toJsonValue(m_data_count));
    }
    if (m_dates_converted_to_isSet) {
        obj.insert(QString("dates_converted_to"), ::OpenAPI::toJsonValue(m_dates_converted_to));
    }
    if (m_footer_isSet) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_number_observations_isSet) {
        obj.insert(QString("number_observations"), ::OpenAPI::toJsonValue(m_number_observations));
    }
    if (m_number_tests_isSet) {
        obj.insert(QString("number_tests"), ::OpenAPI::toJsonValue(m_number_tests));
    }
    if (m_outcome_variable_isSet) {
        obj.insert(QString("outcome_variable"), ::OpenAPI::toJsonValue(m_outcome_variable));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::OpenAPI::toJsonValue(m_paid));
    }
    if (m_pdf_isSet) {
        obj.insert(QString("pdf"), ::OpenAPI::toJsonValue(m_pdf));
    }
    if (m_prediction_mean_accuracy_isSet) {
        obj.insert(QString("prediction_mean_accuracy"), ::OpenAPI::toJsonValue(m_prediction_mean_accuracy));
    }
    if (m_standardized_coefficients.size() > 0) {
        obj.insert(QString("standardized_coefficients"), ::OpenAPI::toJsonValue(m_standardized_coefficients));
    }
    if (m_summary.size() > 0) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tested_variables.size() > 0) {
        obj.insert(QString("tested_variables"), ::OpenAPI::toJsonValue(m_tested_variables));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIResult_calls OAIInline_response_200::getCalls() const {
    return m_calls;
}
void OAIInline_response_200::setCalls(const OAIResult_calls &calls) {
    m_calls = calls;
    m_calls_isSet = true;
}

bool OAIInline_response_200::is_calls_Set() const{
    return m_calls_isSet;
}

bool OAIInline_response_200::is_calls_Valid() const{
    return m_calls_isValid;
}

qint32 OAIInline_response_200::getDataCount() const {
    return m_data_count;
}
void OAIInline_response_200::setDataCount(const qint32 &data_count) {
    m_data_count = data_count;
    m_data_count_isSet = true;
}

bool OAIInline_response_200::is_data_count_Set() const{
    return m_data_count_isSet;
}

bool OAIInline_response_200::is_data_count_Valid() const{
    return m_data_count_isValid;
}

QString OAIInline_response_200::getDatesConvertedTo() const {
    return m_dates_converted_to;
}
void OAIInline_response_200::setDatesConvertedTo(const QString &dates_converted_to) {
    m_dates_converted_to = dates_converted_to;
    m_dates_converted_to_isSet = true;
}

bool OAIInline_response_200::is_dates_converted_to_Set() const{
    return m_dates_converted_to_isSet;
}

bool OAIInline_response_200::is_dates_converted_to_Valid() const{
    return m_dates_converted_to_isValid;
}

QString OAIInline_response_200::getFooter() const {
    return m_footer;
}
void OAIInline_response_200::setFooter(const QString &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAIInline_response_200::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAIInline_response_200::is_footer_Valid() const{
    return m_footer_isValid;
}

QString OAIInline_response_200::getHeader() const {
    return m_header;
}
void OAIInline_response_200::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIInline_response_200::is_header_Set() const{
    return m_header_isSet;
}

bool OAIInline_response_200::is_header_Valid() const{
    return m_header_isValid;
}

qint32 OAIInline_response_200::getNumberObservations() const {
    return m_number_observations;
}
void OAIInline_response_200::setNumberObservations(const qint32 &number_observations) {
    m_number_observations = number_observations;
    m_number_observations_isSet = true;
}

bool OAIInline_response_200::is_number_observations_Set() const{
    return m_number_observations_isSet;
}

bool OAIInline_response_200::is_number_observations_Valid() const{
    return m_number_observations_isValid;
}

qint32 OAIInline_response_200::getNumberTests() const {
    return m_number_tests;
}
void OAIInline_response_200::setNumberTests(const qint32 &number_tests) {
    m_number_tests = number_tests;
    m_number_tests_isSet = true;
}

bool OAIInline_response_200::is_number_tests_Set() const{
    return m_number_tests_isSet;
}

bool OAIInline_response_200::is_number_tests_Valid() const{
    return m_number_tests_isValid;
}

QString OAIInline_response_200::getOutcomeVariable() const {
    return m_outcome_variable;
}
void OAIInline_response_200::setOutcomeVariable(const QString &outcome_variable) {
    m_outcome_variable = outcome_variable;
    m_outcome_variable_isSet = true;
}

bool OAIInline_response_200::is_outcome_variable_Set() const{
    return m_outcome_variable_isSet;
}

bool OAIInline_response_200::is_outcome_variable_Valid() const{
    return m_outcome_variable_isValid;
}

QString OAIInline_response_200::getPaid() const {
    return m_paid;
}
void OAIInline_response_200::setPaid(const QString &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool OAIInline_response_200::is_paid_Set() const{
    return m_paid_isSet;
}

bool OAIInline_response_200::is_paid_Valid() const{
    return m_paid_isValid;
}

QString OAIInline_response_200::getPdf() const {
    return m_pdf;
}
void OAIInline_response_200::setPdf(const QString &pdf) {
    m_pdf = pdf;
    m_pdf_isSet = true;
}

bool OAIInline_response_200::is_pdf_Set() const{
    return m_pdf_isSet;
}

bool OAIInline_response_200::is_pdf_Valid() const{
    return m_pdf_isValid;
}

qint32 OAIInline_response_200::getPredictionMeanAccuracy() const {
    return m_prediction_mean_accuracy;
}
void OAIInline_response_200::setPredictionMeanAccuracy(const qint32 &prediction_mean_accuracy) {
    m_prediction_mean_accuracy = prediction_mean_accuracy;
    m_prediction_mean_accuracy_isSet = true;
}

bool OAIInline_response_200::is_prediction_mean_accuracy_Set() const{
    return m_prediction_mean_accuracy_isSet;
}

bool OAIInline_response_200::is_prediction_mean_accuracy_Valid() const{
    return m_prediction_mean_accuracy_isValid;
}

QList<OAIResult_standardized_coefficients> OAIInline_response_200::getStandardizedCoefficients() const {
    return m_standardized_coefficients;
}
void OAIInline_response_200::setStandardizedCoefficients(const QList<OAIResult_standardized_coefficients> &standardized_coefficients) {
    m_standardized_coefficients = standardized_coefficients;
    m_standardized_coefficients_isSet = true;
}

bool OAIInline_response_200::is_standardized_coefficients_Set() const{
    return m_standardized_coefficients_isSet;
}

bool OAIInline_response_200::is_standardized_coefficients_Valid() const{
    return m_standardized_coefficients_isValid;
}

QList<OAIObject> OAIInline_response_200::getSummary() const {
    return m_summary;
}
void OAIInline_response_200::setSummary(const QList<OAIObject> &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIInline_response_200::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIInline_response_200::is_summary_Valid() const{
    return m_summary_isValid;
}

QList<QString> OAIInline_response_200::getTestedVariables() const {
    return m_tested_variables;
}
void OAIInline_response_200::setTestedVariables(const QList<QString> &tested_variables) {
    m_tested_variables = tested_variables;
    m_tested_variables_isSet = true;
}

bool OAIInline_response_200::is_tested_variables_Set() const{
    return m_tested_variables_isSet;
}

bool OAIInline_response_200::is_tested_variables_Valid() const{
    return m_tested_variables_isValid;
}

QString OAIInline_response_200::getError() const {
    return m_error;
}
void OAIInline_response_200::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIInline_response_200::is_error_Set() const{
    return m_error_isSet;
}

bool OAIInline_response_200::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates_converted_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_observations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_tests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcome_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_mean_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standardized_coefficients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tested_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
