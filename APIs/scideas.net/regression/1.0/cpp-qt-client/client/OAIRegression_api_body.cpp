/**
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegression_api_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegression_api_body::OAIRegression_api_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegression_api_body::OAIRegression_api_body() {
    this->initializeModel();
}

OAIRegression_api_body::~OAIRegression_api_body() {}

void OAIRegression_api_body::initializeModel() {

    m_convert_date_to_isSet = false;
    m_convert_date_to_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_ignore_variables_isSet = false;
    m_ignore_variables_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_outcome_variable_isSet = false;
    m_outcome_variable_isValid = false;
}

void OAIRegression_api_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegression_api_body::fromJsonObject(QJsonObject json) {

    m_convert_date_to_isValid = ::OpenAPI::fromJsonValue(m_convert_date_to, json[QString("convert_date_to")]);
    m_convert_date_to_isSet = !json[QString("convert_date_to")].isNull() && m_convert_date_to_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_ignore_variables_isValid = ::OpenAPI::fromJsonValue(m_ignore_variables, json[QString("ignore_variables")]);
    m_ignore_variables_isSet = !json[QString("ignore_variables")].isNull() && m_ignore_variables_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_outcome_variable_isValid = ::OpenAPI::fromJsonValue(m_outcome_variable, json[QString("outcome_variable")]);
    m_outcome_variable_isSet = !json[QString("outcome_variable")].isNull() && m_outcome_variable_isValid;
}

QString OAIRegression_api_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegression_api_body::asJsonObject() const {
    QJsonObject obj;
    if (m_convert_date_to_isSet) {
        obj.insert(QString("convert_date_to"), ::OpenAPI::toJsonValue(m_convert_date_to));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_ignore_variables.size() > 0) {
        obj.insert(QString("ignore_variables"), ::OpenAPI::toJsonValue(m_ignore_variables));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_outcome_variable_isSet) {
        obj.insert(QString("outcome_variable"), ::OpenAPI::toJsonValue(m_outcome_variable));
    }
    return obj;
}

QString OAIRegression_api_body::getConvertDateTo() const {
    return m_convert_date_to;
}
void OAIRegression_api_body::setConvertDateTo(const QString &convert_date_to) {
    m_convert_date_to = convert_date_to;
    m_convert_date_to_isSet = true;
}

bool OAIRegression_api_body::is_convert_date_to_Set() const{
    return m_convert_date_to_isSet;
}

bool OAIRegression_api_body::is_convert_date_to_Valid() const{
    return m_convert_date_to_isValid;
}

QList<OAIObject> OAIRegression_api_body::getData() const {
    return m_data;
}
void OAIRegression_api_body::setData(const QList<OAIObject> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIRegression_api_body::is_data_Set() const{
    return m_data_isSet;
}

bool OAIRegression_api_body::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIObject> OAIRegression_api_body::getIgnoreVariables() const {
    return m_ignore_variables;
}
void OAIRegression_api_body::setIgnoreVariables(const QList<OAIObject> &ignore_variables) {
    m_ignore_variables = ignore_variables;
    m_ignore_variables_isSet = true;
}

bool OAIRegression_api_body::is_ignore_variables_Set() const{
    return m_ignore_variables_isSet;
}

bool OAIRegression_api_body::is_ignore_variables_Valid() const{
    return m_ignore_variables_isValid;
}

QString OAIRegression_api_body::getKey() const {
    return m_key;
}
void OAIRegression_api_body::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIRegression_api_body::is_key_Set() const{
    return m_key_isSet;
}

bool OAIRegression_api_body::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIRegression_api_body::getOutcomeVariable() const {
    return m_outcome_variable;
}
void OAIRegression_api_body::setOutcomeVariable(const QString &outcome_variable) {
    m_outcome_variable = outcome_variable;
    m_outcome_variable_isSet = true;
}

bool OAIRegression_api_body::is_outcome_variable_Set() const{
    return m_outcome_variable_isSet;
}

bool OAIRegression_api_body::is_outcome_variable_Valid() const{
    return m_outcome_variable_isValid;
}

bool OAIRegression_api_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_convert_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcome_variable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegression_api_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_key_isValid && m_outcome_variable_isValid && true;
}

} // namespace OpenAPI
