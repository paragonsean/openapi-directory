/**
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult_standardized_coefficients.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult_standardized_coefficients::OAIResult_standardized_coefficients(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult_standardized_coefficients::OAIResult_standardized_coefficients() {
    this->initializeModel();
}

OAIResult_standardized_coefficients::~OAIResult_standardized_coefficients() {}

void OAIResult_standardized_coefficients::initializeModel() {

    m_coefficient_isSet = false;
    m_coefficient_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;
}

void OAIResult_standardized_coefficients::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult_standardized_coefficients::fromJsonObject(QJsonObject json) {

    m_coefficient_isValid = ::OpenAPI::fromJsonValue(m_coefficient, json[QString("coefficient")]);
    m_coefficient_isSet = !json[QString("coefficient")].isNull() && m_coefficient_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;
}

QString OAIResult_standardized_coefficients::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult_standardized_coefficients::asJsonObject() const {
    QJsonObject obj;
    if (m_coefficient_isSet) {
        obj.insert(QString("coefficient"), ::OpenAPI::toJsonValue(m_coefficient));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    return obj;
}

qint32 OAIResult_standardized_coefficients::getCoefficient() const {
    return m_coefficient;
}
void OAIResult_standardized_coefficients::setCoefficient(const qint32 &coefficient) {
    m_coefficient = coefficient;
    m_coefficient_isSet = true;
}

bool OAIResult_standardized_coefficients::is_coefficient_Set() const{
    return m_coefficient_isSet;
}

bool OAIResult_standardized_coefficients::is_coefficient_Valid() const{
    return m_coefficient_isValid;
}

QString OAIResult_standardized_coefficients::getVariable() const {
    return m_variable;
}
void OAIResult_standardized_coefficients::setVariable(const QString &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIResult_standardized_coefficients::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIResult_standardized_coefficients::is_variable_Valid() const{
    return m_variable_isValid;
}

bool OAIResult_standardized_coefficients::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coefficient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult_standardized_coefficients::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
