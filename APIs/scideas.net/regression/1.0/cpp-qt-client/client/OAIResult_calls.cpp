/**
 * Regression analysis api
 * This data processing api uses regression analysis to allow you to find out which contributing variables have the most effect on an outcome. For example does buyer location or price most effect sales ?
 *
 * The version of the OpenAPI document: 1.0
 * Contact: software@scideas.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult_calls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult_calls::OAIResult_calls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult_calls::OAIResult_calls() {
    this->initializeModel();
}

OAIResult_calls::~OAIResult_calls() {}

void OAIResult_calls::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_limit_reached_isSet = false;
    m_limit_reached_isValid = false;

    m_this_month_isSet = false;
    m_this_month_isValid = false;
}

void OAIResult_calls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult_calls::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_limit_reached_isValid = ::OpenAPI::fromJsonValue(m_limit_reached, json[QString("limit_reached")]);
    m_limit_reached_isSet = !json[QString("limit_reached")].isNull() && m_limit_reached_isValid;

    m_this_month_isValid = ::OpenAPI::fromJsonValue(m_this_month, json[QString("this_month")]);
    m_this_month_isSet = !json[QString("this_month")].isNull() && m_this_month_isValid;
}

QString OAIResult_calls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult_calls::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_limit_reached_isSet) {
        obj.insert(QString("limit_reached"), ::OpenAPI::toJsonValue(m_limit_reached));
    }
    if (m_this_month_isSet) {
        obj.insert(QString("this_month"), ::OpenAPI::toJsonValue(m_this_month));
    }
    return obj;
}

qint32 OAIResult_calls::getLimit() const {
    return m_limit;
}
void OAIResult_calls::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIResult_calls::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIResult_calls::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIResult_calls::isLimitReached() const {
    return m_limit_reached;
}
void OAIResult_calls::setLimitReached(const bool &limit_reached) {
    m_limit_reached = limit_reached;
    m_limit_reached_isSet = true;
}

bool OAIResult_calls::is_limit_reached_Set() const{
    return m_limit_reached_isSet;
}

bool OAIResult_calls::is_limit_reached_Valid() const{
    return m_limit_reached_isValid;
}

qint32 OAIResult_calls::getThisMonth() const {
    return m_this_month;
}
void OAIResult_calls::setThisMonth(const qint32 &this_month) {
    m_this_month = this_month;
    m_this_month_isSet = true;
}

bool OAIResult_calls::is_this_month_Set() const{
    return m_this_month_isSet;
}

bool OAIResult_calls::is_this_month_Valid() const{
    return m_this_month_isValid;
}

bool OAIResult_calls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_reached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_this_month_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult_calls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
