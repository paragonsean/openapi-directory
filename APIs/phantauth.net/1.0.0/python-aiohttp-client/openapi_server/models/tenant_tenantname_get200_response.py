# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenantTenantnameGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, about: str=None, attribution: str=None, depot: str=None, depots: List[object]=None, domain: bool=None, factories: List[object]=None, factory: str=None, favicon: str=None, issuer: str=None, logo: str=None, name: str=None, script: str=None, sheet: str=None, sub: str=None, subtenant: bool=None, summary: str=None, template: str=None, theme: str=None, userinfo: str=None, website: str=None):
        """TenantTenantnameGet200Response - a model defined in OpenAPI

        :param id: The id of this TenantTenantnameGet200Response.
        :param about: The about of this TenantTenantnameGet200Response.
        :param attribution: The attribution of this TenantTenantnameGet200Response.
        :param depot: The depot of this TenantTenantnameGet200Response.
        :param depots: The depots of this TenantTenantnameGet200Response.
        :param domain: The domain of this TenantTenantnameGet200Response.
        :param factories: The factories of this TenantTenantnameGet200Response.
        :param factory: The factory of this TenantTenantnameGet200Response.
        :param favicon: The favicon of this TenantTenantnameGet200Response.
        :param issuer: The issuer of this TenantTenantnameGet200Response.
        :param logo: The logo of this TenantTenantnameGet200Response.
        :param name: The name of this TenantTenantnameGet200Response.
        :param script: The script of this TenantTenantnameGet200Response.
        :param sheet: The sheet of this TenantTenantnameGet200Response.
        :param sub: The sub of this TenantTenantnameGet200Response.
        :param subtenant: The subtenant of this TenantTenantnameGet200Response.
        :param summary: The summary of this TenantTenantnameGet200Response.
        :param template: The template of this TenantTenantnameGet200Response.
        :param theme: The theme of this TenantTenantnameGet200Response.
        :param userinfo: The userinfo of this TenantTenantnameGet200Response.
        :param website: The website of this TenantTenantnameGet200Response.
        """
        self.openapi_types = {
            'id': str,
            'about': str,
            'attribution': str,
            'depot': str,
            'depots': List[object],
            'domain': bool,
            'factories': List[object],
            'factory': str,
            'favicon': str,
            'issuer': str,
            'logo': str,
            'name': str,
            'script': str,
            'sheet': str,
            'sub': str,
            'subtenant': bool,
            'summary': str,
            'template': str,
            'theme': str,
            'userinfo': str,
            'website': str
        }

        self.attribute_map = {
            'id': '@id',
            'about': 'about',
            'attribution': 'attribution',
            'depot': 'depot',
            'depots': 'depots',
            'domain': 'domain',
            'factories': 'factories',
            'factory': 'factory',
            'favicon': 'favicon',
            'issuer': 'issuer',
            'logo': 'logo',
            'name': 'name',
            'script': 'script',
            'sheet': 'sheet',
            'sub': 'sub',
            'subtenant': 'subtenant',
            'summary': 'summary',
            'template': 'template',
            'theme': 'theme',
            'userinfo': 'userinfo',
            'website': 'website'
        }

        self._id = id
        self._about = about
        self._attribution = attribution
        self._depot = depot
        self._depots = depots
        self._domain = domain
        self._factories = factories
        self._factory = factory
        self._favicon = favicon
        self._issuer = issuer
        self._logo = logo
        self._name = name
        self._script = script
        self._sheet = sheet
        self._sub = sub
        self._subtenant = subtenant
        self._summary = summary
        self._template = template
        self._theme = theme
        self._userinfo = userinfo
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantTenantnameGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _tenant__tenantname__get_200_response of this TenantTenantnameGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TenantTenantnameGet200Response.

        The URL of the tenant's JSON representation.

        :return: The id of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TenantTenantnameGet200Response.

        The URL of the tenant's JSON representation.

        :param id: The id of this TenantTenantnameGet200Response.
        :type id: str
        """

        self._id = id

    @property
    def about(self):
        """Gets the about of this TenantTenantnameGet200Response.

        A detailed description of the tenant. If it takes the value of an URL, the description is downloaded from the given URL, otherwise the value it takes is the description itself. Markdown formatting can be used in the description.

        :return: The about of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this TenantTenantnameGet200Response.

        A detailed description of the tenant. If it takes the value of an URL, the description is downloaded from the given URL, otherwise the value it takes is the description itself. Markdown formatting can be used in the description.

        :param about: The about of this TenantTenantnameGet200Response.
        :type about: str
        """

        self._about = about

    @property
    def attribution(self):
        """Gets the attribution of this TenantTenantnameGet200Response.

        The attribution of the external data source or random user generator. Its value can have markdown formatting, that is, the external source can contain highlights and links.

        :return: The attribution of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this TenantTenantnameGet200Response.

        The attribution of the external data source or random user generator. Its value can have markdown formatting, that is, the external source can contain highlights and links.

        :param attribution: The attribution of this TenantTenantnameGet200Response.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def depot(self):
        """Gets the depot of this TenantTenantnameGet200Response.

        It defines the place of the CSV file containing the resource data in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the type of the object to be generated (user, team) in the `kind` parameter.  The first line of the CSV file contains the resource property names, the following lines, on the other hand, contain the relevant data. In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).

        :return: The depot of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._depot

    @depot.setter
    def depot(self, depot):
        """Sets the depot of this TenantTenantnameGet200Response.

        It defines the place of the CSV file containing the resource data in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the type of the object to be generated (user, team) in the `kind` parameter.  The first line of the CSV file contains the resource property names, the following lines, on the other hand, contain the relevant data. In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).

        :param depot: The depot of this TenantTenantnameGet200Response.
        :type depot: str
        """

        self._depot = depot

    @property
    def depots(self):
        """Gets the depots of this TenantTenantnameGet200Response.

        A list of resource types supported by the external CSV set in `depot`.

        :return: The depots of this TenantTenantnameGet200Response.
        :rtype: List[object]
        """
        return self._depots

    @depots.setter
    def depots(self, depots):
        """Sets the depots of this TenantTenantnameGet200Response.

        A list of resource types supported by the external CSV set in `depot`.

        :param depots: The depots of this TenantTenantnameGet200Response.
        :type depots: List[object]
        """

        self._depots = depots

    @property
    def domain(self):
        """Gets the domain of this TenantTenantnameGet200Response.

        True in the case of a domain tenant collecting several tenants, otherwise false.

        :return: The domain of this TenantTenantnameGet200Response.
        :rtype: bool
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this TenantTenantnameGet200Response.

        True in the case of a domain tenant collecting several tenants, otherwise false.

        :param domain: The domain of this TenantTenantnameGet200Response.
        :type domain: bool
        """

        self._domain = domain

    @property
    def factories(self):
        """Gets the factories of this TenantTenantnameGet200Response.

        A list of resource types supported by the external generator set in `factory`.

        :return: The factories of this TenantTenantnameGet200Response.
        :rtype: List[object]
        """
        return self._factories

    @factories.setter
    def factories(self, factories):
        """Sets the factories of this TenantTenantnameGet200Response.

        A list of resource types supported by the external generator set in `factory`.

        :param factories: The factories of this TenantTenantnameGet200Response.
        :type factories: List[object]
        """

        self._factories = factories

    @property
    def factory(self):
        """Gets the factory of this TenantTenantnameGet200Response.

        The address of the custom random resource generator (user, team) in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the type of the object to be generated (user, team) in the `kind` parameter, and the identifier of the object to be generated in the `name` parameter.

        :return: The factory of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._factory

    @factory.setter
    def factory(self, factory):
        """Sets the factory of this TenantTenantnameGet200Response.

        The address of the custom random resource generator (user, team) in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the type of the object to be generated (user, team) in the `kind` parameter, and the identifier of the object to be generated in the `name` parameter.

        :param factory: The factory of this TenantTenantnameGet200Response.
        :type factory: str
        """

        self._factory = factory

    @property
    def favicon(self):
        """Gets the favicon of this TenantTenantnameGet200Response.

        The URL of the tenant favicon. The image from this address appears as a shortcut icon in the browser when a user visits the tenant's webpages.

        :return: The favicon of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this TenantTenantnameGet200Response.

        The URL of the tenant favicon. The image from this address appears as a shortcut icon in the browser when a user visits the tenant's webpages.

        :param favicon: The favicon of this TenantTenantnameGet200Response.
        :type favicon: str
        """

        self._favicon = favicon

    @property
    def issuer(self):
        """Gets the issuer of this TenantTenantnameGet200Response.

        The URL of the tenant OpenID Connect issuer. This value allows you to get, for example, the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). As a webpage, it contains information on the use if the given tenant.

        :return: The issuer of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this TenantTenantnameGet200Response.

        The URL of the tenant OpenID Connect issuer. This value allows you to get, for example, the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). As a webpage, it contains information on the use if the given tenant.

        :param issuer: The issuer of this TenantTenantnameGet200Response.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def logo(self):
        """Gets the logo of this TenantTenantnameGet200Response.

        The URL of the tenant logo. The image from this address appears in the address bar of the tenant's webpages and the pages that contain the list of available tenants.

        :return: The logo of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this TenantTenantnameGet200Response.

        The URL of the tenant logo. The image from this address appears in the address bar of the tenant's webpages and the pages that contain the list of available tenants.

        :param logo: The logo of this TenantTenantnameGet200Response.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this TenantTenantnameGet200Response.

        The displayed tenant name. In lack of such name, the DNS name of the tenant is displayed in the address bar of the tenant's webpages.

        :return: The name of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantTenantnameGet200Response.

        The displayed tenant name. In lack of such name, the DNS name of the tenant is displayed in the address bar of the tenant's webpages.

        :param name: The name of this TenantTenantnameGet200Response.
        :type name: str
        """

        self._name = name

    @property
    def script(self):
        """Gets the script of this TenantTenantnameGet200Response.

        The URL of a custom JavaScript file can be automatically inserted in the login.html, consent.html, és test.html pages.

        :return: The script of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this TenantTenantnameGet200Response.

        The URL of a custom JavaScript file can be automatically inserted in the login.html, consent.html, és test.html pages.

        :param script: The script of this TenantTenantnameGet200Response.
        :type script: str
        """

        self._script = script

    @property
    def sheet(self):
        """Gets the sheet of this TenantTenantnameGet200Response.

        It is used to give the identifyer of a public Google Sheet document. The first line of the table contains the user property names, the following lines, on the other hand, contain the relevant data. In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).

        :return: The sheet of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._sheet

    @sheet.setter
    def sheet(self, sheet):
        """Sets the sheet of this TenantTenantnameGet200Response.

        It is used to give the identifyer of a public Google Sheet document. The first line of the table contains the user property names, the following lines, on the other hand, contain the relevant data. In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).

        :param sheet: The sheet of this TenantTenantnameGet200Response.
        :type sheet: str
        """

        self._sheet = sheet

    @property
    def sub(self):
        """Gets the sub of this TenantTenantnameGet200Response.

        The fully qualified DNS domain name of the tenant. In the case of official and shared tenants (phantauth.net and phantauth.cf DNS domain), the DNS domain can be omitted (e.g. *default* or *faker*).

        :return: The sub of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this TenantTenantnameGet200Response.

        The fully qualified DNS domain name of the tenant. In the case of official and shared tenants (phantauth.net and phantauth.cf DNS domain), the DNS domain can be omitted (e.g. *default* or *faker*).

        :param sub: The sub of this TenantTenantnameGet200Response.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub

    @property
    def subtenant(self):
        """Gets the subtenant of this TenantTenantnameGet200Response.

        True in the case of a tenant referred to in a domain tenant, otherwise false.

        :return: The subtenant of this TenantTenantnameGet200Response.
        :rtype: bool
        """
        return self._subtenant

    @subtenant.setter
    def subtenant(self, subtenant):
        """Sets the subtenant of this TenantTenantnameGet200Response.

        True in the case of a tenant referred to in a domain tenant, otherwise false.

        :param subtenant: The subtenant of this TenantTenantnameGet200Response.
        :type subtenant: bool
        """

        self._subtenant = subtenant

    @property
    def summary(self):
        """Gets the summary of this TenantTenantnameGet200Response.

        A one-line description, the watchword of the tenant. It appears on the tenant's startup page and the pages that contain the list of available tenants. It takes the valua of an unformatted text.

        :return: The summary of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this TenantTenantnameGet200Response.

        A one-line description, the watchword of the tenant. It appears on the tenant's startup page and the pages that contain the list of available tenants. It takes the valua of an unformatted text.

        :param summary: The summary of this TenantTenantnameGet200Response.
        :type summary: str
        """

        self._summary = summary

    @property
    def template(self):
        """Gets the template of this TenantTenantnameGet200Response.

        It defines the place of the templates of the HTML pages of the tenant in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the page name in a `resource` parameter. By default, it takes the following value: `https://default.phantauth.net{/resource}`.

        :return: The template of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TenantTenantnameGet200Response.

        It defines the place of the templates of the HTML pages of the tenant in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format. The URI template receives the page name in a `resource` parameter. By default, it takes the following value: `https://default.phantauth.net{/resource}`.

        :param template: The template of this TenantTenantnameGet200Response.
        :type template: str
        """

        self._template = template

    @property
    def theme(self):
        """Gets the theme of this TenantTenantnameGet200Response.

        The URL of the CSS style sheet used for the tenant's webpages. The default webpage templates were created by the use of the Bootstrap library, therefore, the Bootstrap CSS URL has to be provided when such a webpage is used.

        :return: The theme of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this TenantTenantnameGet200Response.

        The URL of the CSS style sheet used for the tenant's webpages. The default webpage templates were created by the use of the Bootstrap library, therefore, the Bootstrap CSS URL has to be provided when such a webpage is used.

        :param theme: The theme of this TenantTenantnameGet200Response.
        :type theme: str
        """

        self._theme = theme

    @property
    def userinfo(self):
        """Gets the userinfo of this TenantTenantnameGet200Response.


        :return: The userinfo of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._userinfo

    @userinfo.setter
    def userinfo(self, userinfo):
        """Sets the userinfo of this TenantTenantnameGet200Response.


        :param userinfo: The userinfo of this TenantTenantnameGet200Response.
        :type userinfo: str
        """

        self._userinfo = userinfo

    @property
    def website(self):
        """Gets the website of this TenantTenantnameGet200Response.

        The website address associated with the tenant. If a tenant doesn't have a website, its value is identical with that of the `issuer` property.

        :return: The website of this TenantTenantnameGet200Response.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this TenantTenantnameGet200Response.

        The website address associated with the tenant. If a tenant doesn't have a website, its value is identical with that of the `issuer` property.

        :param website: The website of this TenantTenantnameGet200Response.
        :type website: str
        """

        self._website = website
