# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, formatted: str=None, locality: str=None, postal_code: str=None, region: str=None, street_address: str=None):
        """Address - a model defined in OpenAPI

        :param country: The country of this Address.
        :param formatted: The formatted of this Address.
        :param locality: The locality of this Address.
        :param postal_code: The postal_code of this Address.
        :param region: The region of this Address.
        :param street_address: The street_address of this Address.
        """
        self.openapi_types = {
            'country': str,
            'formatted': str,
            'locality': str,
            'postal_code': str,
            'region': str,
            'street_address': str
        }

        self.attribute_map = {
            'country': 'country',
            'formatted': 'formatted',
            'locality': 'locality',
            'postal_code': 'postal_code',
            'region': 'region',
            'street_address': 'street_address'
        }

        self._country = country
        self._formatted = formatted
        self._locality = locality
        self._postal_code = postal_code
        self._region = region
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Address.

        Country name component.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Country name component.

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def formatted(self):
        """Gets the formatted of this Address.

        Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.

        :return: The formatted of this Address.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this Address.

        Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.

        :param formatted: The formatted of this Address.
        :type formatted: str
        """

        self._formatted = formatted

    @property
    def locality(self):
        """Gets the locality of this Address.

        City or locality component.

        :return: The locality of this Address.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Address.

        City or locality component.

        :param locality: The locality of this Address.
        :type locality: str
        """

        self._locality = locality

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Zip code or postal code component.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Zip code or postal code component.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.

        State, province, prefecture, or region component.

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        State, province, prefecture, or region component.

        :param region: The region of this Address.
        :type region: str
        """

        self._region = region

    @property
    def street_address(self):
        """Gets the street_address of this Address.

        Full street address component, which MAY include house number, street name, post office box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.

        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.

        Full street address component, which MAY include house number, street name, post office box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.

        :param street_address: The street_address of this Address.
        :type street_address: str
        """

        self._street_address = street_address
