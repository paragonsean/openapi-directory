# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fleet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, logo: str=None, logo_email: str=None, members: List[object]=None, name: str=None, profile: str=None, sub: str=None):
        """Fleet - a model defined in OpenAPI

        :param id: The id of this Fleet.
        :param logo: The logo of this Fleet.
        :param logo_email: The logo_email of this Fleet.
        :param members: The members of this Fleet.
        :param name: The name of this Fleet.
        :param profile: The profile of this Fleet.
        :param sub: The sub of this Fleet.
        """
        self.openapi_types = {
            'id': str,
            'logo': str,
            'logo_email': str,
            'members': List[object],
            'name': str,
            'profile': str,
            'sub': str
        }

        self.attribute_map = {
            'id': '@id',
            'logo': 'logo',
            'logo_email': 'logo_email',
            'members': 'members',
            'name': 'name',
            'profile': 'profile',
            'sub': 'sub'
        }

        self._id = id
        self._logo = logo
        self._logo_email = logo_email
        self._members = members
        self._name = name
        self._profile = profile
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fleet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fleet of this Fleet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Fleet.

        URL of the Fleet's JSON representation.

        :return: The id of this Fleet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fleet.

        URL of the Fleet's JSON representation.

        :param id: The id of this Fleet.
        :type id: str
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this Fleet.

        The URL of the fleet logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.

        :return: The logo of this Fleet.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Fleet.

        The URL of the fleet logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.

        :param logo: The logo of this Fleet.
        :type logo: str
        """

        self._logo = logo

    @property
    def logo_email(self):
        """Gets the logo_email of this Fleet.

        The email address of the fleet, either generated or provided in the `sub` property. The fleet logo can be customized by the use of the gravater associated with this email address.

        :return: The logo_email of this Fleet.
        :rtype: str
        """
        return self._logo_email

    @logo_email.setter
    def logo_email(self, logo_email):
        """Sets the logo_email of this Fleet.

        The email address of the fleet, either generated or provided in the `sub` property. The fleet logo can be customized by the use of the gravater associated with this email address.

        :param logo_email: The logo_email of this Fleet.
        :type logo_email: str
        """

        self._logo_email = logo_email

    @property
    def members(self):
        """Gets the members of this Fleet.

        The client objects included in a fleet.

        :return: The members of this Fleet.
        :rtype: List[object]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Fleet.

        The client objects included in a fleet.

        :param members: The members of this Fleet.
        :type members: List[object]
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Fleet.

        The displayed fleet name.

        :return: The name of this Fleet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Fleet.

        The displayed fleet name.

        :param name: The name of this Fleet.
        :type name: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this Fleet.

        The URL of the Fleet profile.

        :return: The profile of this Fleet.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Fleet.

        The URL of the Fleet profile.

        :param profile: The profile of this Fleet.
        :type profile: str
        """

        self._profile = profile

    @property
    def sub(self):
        """Gets the sub of this Fleet.

        The name or email address of a given fleet. The fleet properties and fleet members are generated from this name. If provide an email address, you can customize the fleet logo by the use of the gravatar associated with the email address.

        :return: The sub of this Fleet.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Fleet.

        The name or email address of a given fleet. The fleet properties and fleet members are generated from this name. If provide an email address, you can customize the fleet logo by the use of the gravatar associated with the email address.

        :param sub: The sub of this Fleet.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub
