# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_post_request_address import UserPostRequestAddress
from openapi_server import util


class UserPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, address: UserPostRequestAddress=None, birthdate: str=None, email: str=None, email_verified: bool=None, family_name: str=None, gender: str=None, given_name: str=None, locale: str=None, me: str=None, middle_name: str=None, name: str=None, nickname: str=None, password: str=None, phone_number: str=None, phone_number_verified: bool=None, picture: str=None, preferred_username: str=None, profile: str=None, sub: str=None, uid: str=None, updated_at: float=None, webmail: str=None, website: str=None, zoneinfo: str=None):
        """UserPostRequest - a model defined in OpenAPI

        :param id: The id of this UserPostRequest.
        :param address: The address of this UserPostRequest.
        :param birthdate: The birthdate of this UserPostRequest.
        :param email: The email of this UserPostRequest.
        :param email_verified: The email_verified of this UserPostRequest.
        :param family_name: The family_name of this UserPostRequest.
        :param gender: The gender of this UserPostRequest.
        :param given_name: The given_name of this UserPostRequest.
        :param locale: The locale of this UserPostRequest.
        :param me: The me of this UserPostRequest.
        :param middle_name: The middle_name of this UserPostRequest.
        :param name: The name of this UserPostRequest.
        :param nickname: The nickname of this UserPostRequest.
        :param password: The password of this UserPostRequest.
        :param phone_number: The phone_number of this UserPostRequest.
        :param phone_number_verified: The phone_number_verified of this UserPostRequest.
        :param picture: The picture of this UserPostRequest.
        :param preferred_username: The preferred_username of this UserPostRequest.
        :param profile: The profile of this UserPostRequest.
        :param sub: The sub of this UserPostRequest.
        :param uid: The uid of this UserPostRequest.
        :param updated_at: The updated_at of this UserPostRequest.
        :param webmail: The webmail of this UserPostRequest.
        :param website: The website of this UserPostRequest.
        :param zoneinfo: The zoneinfo of this UserPostRequest.
        """
        self.openapi_types = {
            'id': str,
            'address': UserPostRequestAddress,
            'birthdate': str,
            'email': str,
            'email_verified': bool,
            'family_name': str,
            'gender': str,
            'given_name': str,
            'locale': str,
            'me': str,
            'middle_name': str,
            'name': str,
            'nickname': str,
            'password': str,
            'phone_number': str,
            'phone_number_verified': bool,
            'picture': str,
            'preferred_username': str,
            'profile': str,
            'sub': str,
            'uid': str,
            'updated_at': float,
            'webmail': str,
            'website': str,
            'zoneinfo': str
        }

        self.attribute_map = {
            'id': '@id',
            'address': 'address',
            'birthdate': 'birthdate',
            'email': 'email',
            'email_verified': 'email_verified',
            'family_name': 'family_name',
            'gender': 'gender',
            'given_name': 'given_name',
            'locale': 'locale',
            'me': 'me',
            'middle_name': 'middle_name',
            'name': 'name',
            'nickname': 'nickname',
            'password': 'password',
            'phone_number': 'phone_number',
            'phone_number_verified': 'phone_number_verified',
            'picture': 'picture',
            'preferred_username': 'preferred_username',
            'profile': 'profile',
            'sub': 'sub',
            'uid': 'uid',
            'updated_at': 'updated_at',
            'webmail': 'webmail',
            'website': 'website',
            'zoneinfo': 'zoneinfo'
        }

        self._id = id
        self._address = address
        self._birthdate = birthdate
        self._email = email
        self._email_verified = email_verified
        self._family_name = family_name
        self._gender = gender
        self._given_name = given_name
        self._locale = locale
        self._me = me
        self._middle_name = middle_name
        self._name = name
        self._nickname = nickname
        self._password = password
        self._phone_number = phone_number
        self._phone_number_verified = phone_number_verified
        self._picture = picture
        self._preferred_username = preferred_username
        self._profile = profile
        self._sub = sub
        self._uid = uid
        self._updated_at = updated_at
        self._webmail = webmail
        self._website = website
        self._zoneinfo = zoneinfo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _user_post_request of this UserPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserPostRequest.

        The URL of the user's JSON representation.

        :return: The id of this UserPostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserPostRequest.

        The URL of the user's JSON representation.

        :param id: The id of this UserPostRequest.
        :type id: str
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this UserPostRequest.


        :return: The address of this UserPostRequest.
        :rtype: UserPostRequestAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserPostRequest.


        :param address: The address of this UserPostRequest.
        :type address: UserPostRequestAddress
        """

        self._address = address

    @property
    def birthdate(self):
        """Gets the birthdate of this UserPostRequest.

        The user's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.

        :return: The birthdate of this UserPostRequest.
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this UserPostRequest.

        The user's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.

        :param birthdate: The birthdate of this UserPostRequest.
        :type birthdate: str
        """

        self._birthdate = birthdate

    @property
    def email(self):
        """Gets the email of this UserPostRequest.

        The user's preferred email address.

        :return: The email of this UserPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserPostRequest.

        The user's preferred email address.

        :param email: The email of this UserPostRequest.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserPostRequest.

        True if the user's e-mail address has been verified; otherwise false.

        :return: The email_verified of this UserPostRequest.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserPostRequest.

        True if the user's e-mail address has been verified; otherwise false.

        :param email_verified: The email_verified of this UserPostRequest.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def family_name(self):
        """Gets the family_name of this UserPostRequest.

        The user's surname(s) or last name(s).

        :return: The family_name of this UserPostRequest.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserPostRequest.

        The user's surname(s) or last name(s).

        :param family_name: The family_name of this UserPostRequest.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def gender(self):
        """Gets the gender of this UserPostRequest.

        The enduser's gender. Possible values are: female, male, and unknown.

        :return: The gender of this UserPostRequest.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserPostRequest.

        The enduser's gender. Possible values are: female, male, and unknown.

        :param gender: The gender of this UserPostRequest.
        :type gender: str
        """

        self._gender = gender

    @property
    def given_name(self):
        """Gets the given_name of this UserPostRequest.

        The user's given name(s) or first name(s).

        :return: The given_name of this UserPostRequest.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserPostRequest.

        The user's given name(s) or first name(s).

        :param given_name: The given_name of this UserPostRequest.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def locale(self):
        """Gets the locale of this UserPostRequest.

        The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.

        :return: The locale of this UserPostRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserPostRequest.

        The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.

        :param locale: The locale of this UserPostRequest.
        :type locale: str
        """

        self._locale = locale

    @property
    def me(self):
        """Gets the me of this UserPostRequest.

        The simplified URL of the user's profile page.

        :return: The me of this UserPostRequest.
        :rtype: str
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this UserPostRequest.

        The simplified URL of the user's profile page.

        :param me: The me of this UserPostRequest.
        :type me: str
        """

        self._me = me

    @property
    def middle_name(self):
        """Gets the middle_name of this UserPostRequest.

        The user's middle name(s).

        :return: The middle_name of this UserPostRequest.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserPostRequest.

        The user's middle name(s).

        :param middle_name: The middle_name of this UserPostRequest.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this UserPostRequest.

        The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.

        :return: The name of this UserPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserPostRequest.

        The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.

        :param name: The name of this UserPostRequest.
        :type name: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this UserPostRequest.

        A casual name of the User that may or may not be the same as the given_name.

        :return: The nickname of this UserPostRequest.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this UserPostRequest.

        A casual name of the User that may or may not be the same as the given_name.

        :param nickname: The nickname of this UserPostRequest.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this UserPostRequest.

        The user's generated password.

        :return: The password of this UserPostRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserPostRequest.

        The user's generated password.

        :param password: The password of this UserPostRequest.
        :type password: str
        """

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this UserPostRequest.

        The user's preferred telephone number.

        :return: The phone_number of this UserPostRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserPostRequest.

        The user's preferred telephone number.

        :param phone_number: The phone_number of this UserPostRequest.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this UserPostRequest.

        True if the enduser's phone number has been verified; otherwise false.

        :return: The phone_number_verified of this UserPostRequest.
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this UserPostRequest.

        True if the enduser's phone number has been verified; otherwise false.

        :param phone_number_verified: The phone_number_verified of this UserPostRequest.
        :type phone_number_verified: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def picture(self):
        """Gets the picture of this UserPostRequest.

        The URL of the user's profile picture.

        :return: The picture of this UserPostRequest.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this UserPostRequest.

        The URL of the user's profile picture.

        :param picture: The picture of this UserPostRequest.
        :type picture: str
        """

        self._picture = picture

    @property
    def preferred_username(self):
        """Gets the preferred_username of this UserPostRequest.

        A shorthand name by which the user wishes to be referred to at the Relying Party.

        :return: The preferred_username of this UserPostRequest.
        :rtype: str
        """
        return self._preferred_username

    @preferred_username.setter
    def preferred_username(self, preferred_username):
        """Sets the preferred_username of this UserPostRequest.

        A shorthand name by which the user wishes to be referred to at the Relying Party.

        :param preferred_username: The preferred_username of this UserPostRequest.
        :type preferred_username: str
        """

        self._preferred_username = preferred_username

    @property
    def profile(self):
        """Gets the profile of this UserPostRequest.

        The URL of the user's profile page.

        :return: The profile of this UserPostRequest.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserPostRequest.

        The URL of the user's profile page.

        :param profile: The profile of this UserPostRequest.
        :type profile: str
        """

        self._profile = profile

    @property
    def sub(self):
        """Gets the sub of this UserPostRequest.

        Subject - User identifier at the issuer.

        :return: The sub of this UserPostRequest.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this UserPostRequest.

        Subject - User identifier at the issuer.

        :param sub: The sub of this UserPostRequest.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub

    @property
    def uid(self):
        """Gets the uid of this UserPostRequest.

        The user's simplified, shortened identifier at the Issuer.

        :return: The uid of this UserPostRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UserPostRequest.

        The user's simplified, shortened identifier at the Issuer.

        :param uid: The uid of this UserPostRequest.
        :type uid: str
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this UserPostRequest.

        The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.

        :return: The updated_at of this UserPostRequest.
        :rtype: float
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserPostRequest.

        The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.

        :param updated_at: The updated_at of this UserPostRequest.
        :type updated_at: float
        """

        self._updated_at = updated_at

    @property
    def webmail(self):
        """Gets the webmail of this UserPostRequest.

        The URL of user's mailbox in a webmail application.

        :return: The webmail of this UserPostRequest.
        :rtype: str
        """
        return self._webmail

    @webmail.setter
    def webmail(self, webmail):
        """Sets the webmail of this UserPostRequest.

        The URL of user's mailbox in a webmail application.

        :param webmail: The webmail of this UserPostRequest.
        :type webmail: str
        """

        self._webmail = webmail

    @property
    def website(self):
        """Gets the website of this UserPostRequest.

        The URL of the user's webpage or blog.

        :return: The website of this UserPostRequest.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this UserPostRequest.

        The URL of the user's webpage or blog.

        :param website: The website of this UserPostRequest.
        :type website: str
        """

        self._website = website

    @property
    def zoneinfo(self):
        """Gets the zoneinfo of this UserPostRequest.

        A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.

        :return: The zoneinfo of this UserPostRequest.
        :rtype: str
        """
        return self._zoneinfo

    @zoneinfo.setter
    def zoneinfo(self, zoneinfo):
        """Sets the zoneinfo of this UserPostRequest.

        A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.

        :param zoneinfo: The zoneinfo of this UserPostRequest.
        :type zoneinfo: str
        """

        self._zoneinfo = zoneinfo
