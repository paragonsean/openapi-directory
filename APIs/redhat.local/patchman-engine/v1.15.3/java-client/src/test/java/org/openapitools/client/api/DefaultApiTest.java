/*
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ControllersAdvisoriesResponse;
import org.openapitools.client.model.ControllersAdvisoriesSystemsResponse;
import org.openapitools.client.model.ControllersAdvisoryDetailResponse;
import org.openapitools.client.model.ControllersAdvisoryInlineItem;
import org.openapitools.client.model.ControllersAdvisorySystemsResponse;
import org.openapitools.client.model.ControllersPackageDetailResponse;
import org.openapitools.client.model.ControllersPackageItem;
import org.openapitools.client.model.ControllersPackageSystemItem;
import org.openapitools.client.model.ControllersPackageSystemsResponse;
import org.openapitools.client.model.ControllersPackageVersionsResponse;
import org.openapitools.client.model.ControllersPackagesResponse;
import org.openapitools.client.model.ControllersSystemAdvisoriesDBLookup;
import org.openapitools.client.model.ControllersSystemAdvisoriesResponse;
import org.openapitools.client.model.ControllersSystemDetailResponse;
import org.openapitools.client.model.ControllersSystemInlineItem;
import org.openapitools.client.model.ControllersSystemPackageInline;
import org.openapitools.client.model.ControllersSystemPackageResponse;
import org.openapitools.client.model.ControllersSystemsAdvisoriesRequest;
import org.openapitools.client.model.ControllersSystemsAdvisoriesResponse;
import org.openapitools.client.model.ControllersSystemsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Delete system by inventory id
     *
     * Delete system by inventory id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletesystemTest() throws ApiException {
        String inventoryId = null;
        api.deletesystem(inventoryId);
        // TODO: test validations
    }

    /**
     * Show me details an advisory by given advisory name
     *
     * Show me details an advisory by given advisory name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailAdvisoryTest() throws ApiException {
        String advisoryId = null;
        ControllersAdvisoryDetailResponse response = api.detailAdvisory(advisoryId);
        // TODO: test validations
    }

    /**
     * Show me details about a system by given inventory id
     *
     * Show me details about a system by given inventory id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detailSystemTest() throws ApiException {
        String inventoryId = null;
        ControllersSystemDetailResponse response = api.detailSystem(inventoryId);
        // TODO: test validations
    }

    /**
     * Export applicable advisories for all my systems
     *
     * Export applicable advisories for all my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportAdvisoriesTest() throws ApiException {
        String search = null;
        String filterId = null;
        String filterDescription = null;
        String filterPublicDate = null;
        String filterSynopsis = null;
        String filterAdvisoryType = null;
        String filterSeverity = null;
        String filterApplicableSystems = null;
        List<ControllersAdvisoryInlineItem> response = api.exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems);
        // TODO: test validations
    }

    /**
     * Export systems for my account
     *
     * Export systems for my account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportAdvisorySystemsTest() throws ApiException {
        String advisoryId = null;
        String search = null;
        String filterId = null;
        String filterDisplayName = null;
        String filterLastEvaluation = null;
        String filterLastUpload = null;
        String filterRhsaCount = null;
        String filterRhbaCount = null;
        String filterRheaCount = null;
        String filterOtherCount = null;
        String filterStale = null;
        String filterPackagesInstalled = null;
        String filterPackagesUpdatable = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        List<String> tags = null;
        List<ControllersSystemInlineItem> response = api.exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        // TODO: test validations
    }

    /**
     * Show me all my systems which have a package installed
     *
     * Show me all my systems which have a package installed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportPackageSystemsTest() throws ApiException {
        String packageName = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        List<String> tags = null;
        List<ControllersPackageSystemItem> response = api.exportPackageSystems(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        // TODO: test validations
    }

    /**
     * Show me all installed packages across my systems
     *
     * Show me all installed packages across my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportPackagesTest() throws ApiException {
        String sort = null;
        String search = null;
        String filterName = null;
        String filterSystemsInstalled = null;
        String filterSystemsUpdatable = null;
        String filterSummary = null;
        List<ControllersPackageItem> response = api.exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary);
        // TODO: test validations
    }

    /**
     * Export applicable advisories for all my systems
     *
     * Export applicable advisories for all my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSystemAdvisoriesTest() throws ApiException {
        String inventoryId = null;
        String search = null;
        String filterId = null;
        String filterDescription = null;
        String filterPublicDate = null;
        String filterSynopsis = null;
        String filterAdvisoryType = null;
        String filterSeverity = null;
        List<ControllersSystemAdvisoriesDBLookup> response = api.exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity);
        // TODO: test validations
    }

    /**
     * Show me details about a system packages by given inventory id
     *
     * Show me details about a system packages by given inventory id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSystemPackagesTest() throws ApiException {
        String inventoryId = null;
        String search = null;
        String filterName = null;
        String filterDescription = null;
        String filterEvra = null;
        String filterSummary = null;
        Boolean filterUpdatable = null;
        List<ControllersSystemPackageInline> response = api.exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable);
        // TODO: test validations
    }

    /**
     * Export systems for my account
     *
     * Export systems for my account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSystemsTest() throws ApiException {
        String search = null;
        String filterId = null;
        String filterDisplayName = null;
        String filterLastEvaluation = null;
        String filterLastUpload = null;
        String filterRhsaCount = null;
        String filterRhbaCount = null;
        String filterRheaCount = null;
        String filterOtherCount = null;
        String filterStale = null;
        String filterPackagesInstalled = null;
        String filterPackagesUpdatable = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        List<String> tags = null;
        List<ControllersSystemInlineItem> response = api.exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        // TODO: test validations
    }

    /**
     * Show me metadata of selected package
     *
     * Show me metadata of selected package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestPackageTest() throws ApiException {
        String packageName = null;
        ControllersPackageDetailResponse response = api.latestPackage(packageName);
        // TODO: test validations
    }

    /**
     * Show me all applicable advisories for all my systems
     *
     * Show me all applicable advisories for all my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAdvisoriesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String search = null;
        String filterId = null;
        String filterDescription = null;
        String filterPublicDate = null;
        String filterSynopsis = null;
        String filterAdvisoryType = null;
        String filterSeverity = null;
        String filterApplicableSystems = null;
        List<String> tags = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        ControllersAdvisoriesResponse response = api.listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        // TODO: test validations
    }

    /**
     * Show me systems on which the given advisory is applicable
     *
     * Show me systems on which the given advisory is applicable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAdvisorySystemsTest() throws ApiException {
        String advisoryId = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String search = null;
        String filterId = null;
        String filterInsightsId = null;
        String filterDisplayName = null;
        String filterLastEvaluation = null;
        String filterLastUpload = null;
        String filterRhsaCount = null;
        String filterRhbaCount = null;
        String filterRheaCount = null;
        String filterOtherCount = null;
        String filterStale = null;
        String filterStaleTimestamp = null;
        String filterStaleWarningTimestamp = null;
        String filterCulledTimestamp = null;
        String filterCreated = null;
        List<String> tags = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        ControllersAdvisorySystemsResponse response = api.listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        // TODO: test validations
    }

    /**
     * Show me all installed packages across my systems
     *
     * Show me all installed packages across my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPackagesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String search = null;
        String filterName = null;
        String filterSystemsInstalled = null;
        String filterSystemsUpdatable = null;
        String filterSummary = null;
        List<String> tags = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        ControllersPackagesResponse response = api.listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        // TODO: test validations
    }

    /**
     * Show me advisories for a system by given inventory id
     *
     * Show me advisories for a system by given inventory id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSystemAdvisoriesTest() throws ApiException {
        String inventoryId = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String search = null;
        String filterId = null;
        String filterDescription = null;
        String filterPublicDate = null;
        String filterSynopsis = null;
        String filterAdvisoryType = null;
        String filterSeverity = null;
        ControllersSystemAdvisoriesResponse response = api.listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity);
        // TODO: test validations
    }

    /**
     * Show me all my systems
     *
     * Show me all my systems
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSystemsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String search = null;
        String filterInsightsId = null;
        String filterId = null;
        String filterDisplayName = null;
        String filterLastEvaluation = null;
        String filterLastUpload = null;
        String filterRhsaCount = null;
        String filterRhbaCount = null;
        String filterRheaCount = null;
        String filterOtherCount = null;
        String filterStale = null;
        String filterPackagesInstalled = null;
        String filterPackagesUpdatable = null;
        String filterStaleTimestamp = null;
        String filterStaleWarningTimestamp = null;
        String filterCulledTimestamp = null;
        String filterCreated = null;
        List<String> tags = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        ControllersSystemsResponse response = api.listSystems(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        // TODO: test validations
    }

    /**
     * Show me all my systems which have a package installed
     *
     * Show me all my systems which have a package installed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packageSystemsTest() throws ApiException {
        String packageName = null;
        Integer limit = null;
        Integer offset = null;
        List<String> tags = null;
        String filterSystemProfileSapSystem = null;
        List<String> filterSystemProfileSapSidsIn = null;
        ControllersPackageSystemsResponse response = api.packageSystems(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        // TODO: test validations
    }

    /**
     * Show me all package versions installed on some system
     *
     * Show me all package versions installed on some system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packageVersionsTest() throws ApiException {
        String packageName = null;
        Integer limit = null;
        Integer offset = null;
        ControllersPackageVersionsResponse response = api.packageVersions(packageName, limit, offset);
        // TODO: test validations
    }

    /**
     * Show me details about a system packages by given inventory id
     *
     * Show me details about a system packages by given inventory id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void systemPackagesTest() throws ApiException {
        String inventoryId = null;
        Integer limit = null;
        Integer offset = null;
        String search = null;
        String filterName = null;
        String filterDescription = null;
        String filterEvra = null;
        String filterSummary = null;
        Boolean filterUpdatable = null;
        ControllersSystemPackageResponse response = api.systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable);
        // TODO: test validations
    }

    /**
     * View advisory-system pairs for selected systems and advisories
     *
     * View advisory-system pairs for selected systems and advisories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewAdvisoriesSystemsTest() throws ApiException {
        ControllersSystemsAdvisoriesRequest body = null;
        ControllersAdvisoriesSystemsResponse response = api.viewAdvisoriesSystems(body);
        // TODO: test validations
    }

    /**
     * View system-advisory pairs for selected systems and advisories
     *
     * View system-advisory pairs for selected systems and advisories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewSystemsAdvisoriesTest() throws ApiException {
        ControllersSystemsAdvisoriesRequest body = null;
        ControllersSystemsAdvisoriesResponse response = api.viewSystemsAdvisories(body);
        // TODO: test validations
    }

}
