/*
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ControllersAdvisoryDetailAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:15.636970-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllersAdvisoryDetailAttributes {
  public static final String SERIALIZED_NAME_CVES = "cves";
  @SerializedName(SERIALIZED_NAME_CVES)
  private List<String> cves = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIXES = "fixes";
  @SerializedName(SERIALIZED_NAME_FIXES)
  private String fixes;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private Map<String, String> packages = new HashMap<>();

  public static final String SERIALIZED_NAME_PUBLIC_DATE = "public_date";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DATE)
  private String publicDate;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<String> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_SOLUTION = "solution";
  @SerializedName(SERIALIZED_NAME_SOLUTION)
  private String solution;

  public static final String SERIALIZED_NAME_SYNOPSIS = "synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public ControllersAdvisoryDetailAttributes() {
  }

  public ControllersAdvisoryDetailAttributes cves(List<String> cves) {
    this.cves = cves;
    return this;
  }

  public ControllersAdvisoryDetailAttributes addCvesItem(String cvesItem) {
    if (this.cves == null) {
      this.cves = new ArrayList<>();
    }
    this.cves.add(cvesItem);
    return this;
  }

  /**
   * Get cves
   * @return cves
   */
  @javax.annotation.Nullable
  public List<String> getCves() {
    return cves;
  }

  public void setCves(List<String> cves) {
    this.cves = cves;
  }


  public ControllersAdvisoryDetailAttributes description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ControllersAdvisoryDetailAttributes fixes(String fixes) {
    this.fixes = fixes;
    return this;
  }

  /**
   * Get fixes
   * @return fixes
   */
  @javax.annotation.Nullable
  public String getFixes() {
    return fixes;
  }

  public void setFixes(String fixes) {
    this.fixes = fixes;
  }


  public ControllersAdvisoryDetailAttributes modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ControllersAdvisoryDetailAttributes packages(Map<String, String> packages) {
    this.packages = packages;
    return this;
  }

  public ControllersAdvisoryDetailAttributes putPackagesItem(String key, String packagesItem) {
    if (this.packages == null) {
      this.packages = new HashMap<>();
    }
    this.packages.put(key, packagesItem);
    return this;
  }

  /**
   * Get packages
   * @return packages
   */
  @javax.annotation.Nullable
  public Map<String, String> getPackages() {
    return packages;
  }

  public void setPackages(Map<String, String> packages) {
    this.packages = packages;
  }


  public ControllersAdvisoryDetailAttributes publicDate(String publicDate) {
    this.publicDate = publicDate;
    return this;
  }

  /**
   * Get publicDate
   * @return publicDate
   */
  @javax.annotation.Nullable
  public String getPublicDate() {
    return publicDate;
  }

  public void setPublicDate(String publicDate) {
    this.publicDate = publicDate;
  }


  public ControllersAdvisoryDetailAttributes references(List<String> references) {
    this.references = references;
    return this;
  }

  public ControllersAdvisoryDetailAttributes addReferencesItem(String referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * Get references
   * @return references
   */
  @javax.annotation.Nullable
  public List<String> getReferences() {
    return references;
  }

  public void setReferences(List<String> references) {
    this.references = references;
  }


  public ControllersAdvisoryDetailAttributes severity(Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public ControllersAdvisoryDetailAttributes solution(String solution) {
    this.solution = solution;
    return this;
  }

  /**
   * Get solution
   * @return solution
   */
  @javax.annotation.Nullable
  public String getSolution() {
    return solution;
  }

  public void setSolution(String solution) {
    this.solution = solution;
  }


  public ControllersAdvisoryDetailAttributes synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public ControllersAdvisoryDetailAttributes topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllersAdvisoryDetailAttributes controllersAdvisoryDetailAttributes = (ControllersAdvisoryDetailAttributes) o;
    return Objects.equals(this.cves, controllersAdvisoryDetailAttributes.cves) &&
        Objects.equals(this.description, controllersAdvisoryDetailAttributes.description) &&
        Objects.equals(this.fixes, controllersAdvisoryDetailAttributes.fixes) &&
        Objects.equals(this.modifiedDate, controllersAdvisoryDetailAttributes.modifiedDate) &&
        Objects.equals(this.packages, controllersAdvisoryDetailAttributes.packages) &&
        Objects.equals(this.publicDate, controllersAdvisoryDetailAttributes.publicDate) &&
        Objects.equals(this.references, controllersAdvisoryDetailAttributes.references) &&
        Objects.equals(this.severity, controllersAdvisoryDetailAttributes.severity) &&
        Objects.equals(this.solution, controllersAdvisoryDetailAttributes.solution) &&
        Objects.equals(this.synopsis, controllersAdvisoryDetailAttributes.synopsis) &&
        Objects.equals(this.topic, controllersAdvisoryDetailAttributes.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cves, description, fixes, modifiedDate, packages, publicDate, references, severity, solution, synopsis, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllersAdvisoryDetailAttributes {\n");
    sb.append("    cves: ").append(toIndentedString(cves)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixes: ").append(toIndentedString(fixes)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    publicDate: ").append(toIndentedString(publicDate)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    solution: ").append(toIndentedString(solution)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cves");
    openapiFields.add("description");
    openapiFields.add("fixes");
    openapiFields.add("modified_date");
    openapiFields.add("packages");
    openapiFields.add("public_date");
    openapiFields.add("references");
    openapiFields.add("severity");
    openapiFields.add("solution");
    openapiFields.add("synopsis");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllersAdvisoryDetailAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllersAdvisoryDetailAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllersAdvisoryDetailAttributes is not found in the empty JSON string", ControllersAdvisoryDetailAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllersAdvisoryDetailAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllersAdvisoryDetailAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cves") != null && !jsonObj.get("cves").isJsonNull() && !jsonObj.get("cves").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cves` to be an array in the JSON string but got `%s`", jsonObj.get("cves").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fixes") != null && !jsonObj.get("fixes").isJsonNull()) && !jsonObj.get("fixes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixes").toString()));
      }
      if ((jsonObj.get("modified_date") != null && !jsonObj.get("modified_date").isJsonNull()) && !jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      if ((jsonObj.get("public_date") != null && !jsonObj.get("public_date").isJsonNull()) && !jsonObj.get("public_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull() && !jsonObj.get("references").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }
      if ((jsonObj.get("solution") != null && !jsonObj.get("solution").isJsonNull()) && !jsonObj.get("solution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solution").toString()));
      }
      if ((jsonObj.get("synopsis") != null && !jsonObj.get("synopsis").isJsonNull()) && !jsonObj.get("synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synopsis").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllersAdvisoryDetailAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllersAdvisoryDetailAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllersAdvisoryDetailAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllersAdvisoryDetailAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllersAdvisoryDetailAttributes>() {
           @Override
           public void write(JsonWriter out, ControllersAdvisoryDetailAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllersAdvisoryDetailAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllersAdvisoryDetailAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllersAdvisoryDetailAttributes
   * @throws IOException if the JSON string is invalid with respect to ControllersAdvisoryDetailAttributes
   */
  public static ControllersAdvisoryDetailAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllersAdvisoryDetailAttributes.class);
  }

  /**
   * Convert an instance of ControllersAdvisoryDetailAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

