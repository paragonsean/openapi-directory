/*
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ControllersPackageSystemItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:15.636970-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllersPackageSystemItem {
  public static final String SERIALIZED_NAME_AVAILABLE_EVRA = "available_evra";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_EVRA)
  private String availableEvra;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTALLED_EVRA = "installed_evra";
  @SerializedName(SERIALIZED_NAME_INSTALLED_EVRA)
  private String installedEvra;

  public static final String SERIALIZED_NAME_UPDATABLE = "updatable";
  @SerializedName(SERIALIZED_NAME_UPDATABLE)
  private Boolean updatable;

  public ControllersPackageSystemItem() {
  }

  public ControllersPackageSystemItem availableEvra(String availableEvra) {
    this.availableEvra = availableEvra;
    return this;
  }

  /**
   * Get availableEvra
   * @return availableEvra
   */
  @javax.annotation.Nullable
  public String getAvailableEvra() {
    return availableEvra;
  }

  public void setAvailableEvra(String availableEvra) {
    this.availableEvra = availableEvra;
  }


  public ControllersPackageSystemItem displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ControllersPackageSystemItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ControllersPackageSystemItem installedEvra(String installedEvra) {
    this.installedEvra = installedEvra;
    return this;
  }

  /**
   * Get installedEvra
   * @return installedEvra
   */
  @javax.annotation.Nullable
  public String getInstalledEvra() {
    return installedEvra;
  }

  public void setInstalledEvra(String installedEvra) {
    this.installedEvra = installedEvra;
  }


  public ControllersPackageSystemItem updatable(Boolean updatable) {
    this.updatable = updatable;
    return this;
  }

  /**
   * Get updatable
   * @return updatable
   */
  @javax.annotation.Nullable
  public Boolean getUpdatable() {
    return updatable;
  }

  public void setUpdatable(Boolean updatable) {
    this.updatable = updatable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllersPackageSystemItem controllersPackageSystemItem = (ControllersPackageSystemItem) o;
    return Objects.equals(this.availableEvra, controllersPackageSystemItem.availableEvra) &&
        Objects.equals(this.displayName, controllersPackageSystemItem.displayName) &&
        Objects.equals(this.id, controllersPackageSystemItem.id) &&
        Objects.equals(this.installedEvra, controllersPackageSystemItem.installedEvra) &&
        Objects.equals(this.updatable, controllersPackageSystemItem.updatable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableEvra, displayName, id, installedEvra, updatable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllersPackageSystemItem {\n");
    sb.append("    availableEvra: ").append(toIndentedString(availableEvra)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installedEvra: ").append(toIndentedString(installedEvra)).append("\n");
    sb.append("    updatable: ").append(toIndentedString(updatable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_evra");
    openapiFields.add("display_name");
    openapiFields.add("id");
    openapiFields.add("installed_evra");
    openapiFields.add("updatable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllersPackageSystemItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllersPackageSystemItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllersPackageSystemItem is not found in the empty JSON string", ControllersPackageSystemItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllersPackageSystemItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllersPackageSystemItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("available_evra") != null && !jsonObj.get("available_evra").isJsonNull()) && !jsonObj.get("available_evra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_evra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_evra").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("installed_evra") != null && !jsonObj.get("installed_evra").isJsonNull()) && !jsonObj.get("installed_evra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installed_evra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installed_evra").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllersPackageSystemItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllersPackageSystemItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllersPackageSystemItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllersPackageSystemItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllersPackageSystemItem>() {
           @Override
           public void write(JsonWriter out, ControllersPackageSystemItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllersPackageSystemItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllersPackageSystemItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllersPackageSystemItem
   * @throws IOException if the JSON string is invalid with respect to ControllersPackageSystemItem
   */
  public static ControllersPackageSystemItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllersPackageSystemItem.class);
  }

  /**
   * Convert an instance of ControllersPackageSystemItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

