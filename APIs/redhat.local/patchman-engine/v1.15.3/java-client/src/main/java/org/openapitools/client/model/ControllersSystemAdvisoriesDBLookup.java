/*
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ControllersSystemAdvisoriesDBLookup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:15.636970-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllersSystemAdvisoriesDBLookup {
  public static final String SERIALIZED_NAME_ADVISORY_TYPE = "advisory_type";
  @SerializedName(SERIALIZED_NAME_ADVISORY_TYPE)
  private Integer advisoryType;

  public static final String SERIALIZED_NAME_CVE_COUNT = "cve_count";
  @SerializedName(SERIALIZED_NAME_CVE_COUNT)
  private Integer cveCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PUBLIC_DATE = "public_date";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DATE)
  private String publicDate;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_SYNOPSIS = "synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public ControllersSystemAdvisoriesDBLookup() {
  }

  public ControllersSystemAdvisoriesDBLookup advisoryType(Integer advisoryType) {
    this.advisoryType = advisoryType;
    return this;
  }

  /**
   * Get advisoryType
   * @return advisoryType
   */
  @javax.annotation.Nullable
  public Integer getAdvisoryType() {
    return advisoryType;
  }

  public void setAdvisoryType(Integer advisoryType) {
    this.advisoryType = advisoryType;
  }


  public ControllersSystemAdvisoriesDBLookup cveCount(Integer cveCount) {
    this.cveCount = cveCount;
    return this;
  }

  /**
   * Get cveCount
   * @return cveCount
   */
  @javax.annotation.Nullable
  public Integer getCveCount() {
    return cveCount;
  }

  public void setCveCount(Integer cveCount) {
    this.cveCount = cveCount;
  }


  public ControllersSystemAdvisoriesDBLookup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ControllersSystemAdvisoriesDBLookup id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ControllersSystemAdvisoriesDBLookup publicDate(String publicDate) {
    this.publicDate = publicDate;
    return this;
  }

  /**
   * Get publicDate
   * @return publicDate
   */
  @javax.annotation.Nullable
  public String getPublicDate() {
    return publicDate;
  }

  public void setPublicDate(String publicDate) {
    this.publicDate = publicDate;
  }


  public ControllersSystemAdvisoriesDBLookup severity(Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public ControllersSystemAdvisoriesDBLookup synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllersSystemAdvisoriesDBLookup controllersSystemAdvisoriesDBLookup = (ControllersSystemAdvisoriesDBLookup) o;
    return Objects.equals(this.advisoryType, controllersSystemAdvisoriesDBLookup.advisoryType) &&
        Objects.equals(this.cveCount, controllersSystemAdvisoriesDBLookup.cveCount) &&
        Objects.equals(this.description, controllersSystemAdvisoriesDBLookup.description) &&
        Objects.equals(this.id, controllersSystemAdvisoriesDBLookup.id) &&
        Objects.equals(this.publicDate, controllersSystemAdvisoriesDBLookup.publicDate) &&
        Objects.equals(this.severity, controllersSystemAdvisoriesDBLookup.severity) &&
        Objects.equals(this.synopsis, controllersSystemAdvisoriesDBLookup.synopsis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advisoryType, cveCount, description, id, publicDate, severity, synopsis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllersSystemAdvisoriesDBLookup {\n");
    sb.append("    advisoryType: ").append(toIndentedString(advisoryType)).append("\n");
    sb.append("    cveCount: ").append(toIndentedString(cveCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publicDate: ").append(toIndentedString(publicDate)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advisory_type");
    openapiFields.add("cve_count");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("public_date");
    openapiFields.add("severity");
    openapiFields.add("synopsis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllersSystemAdvisoriesDBLookup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllersSystemAdvisoriesDBLookup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllersSystemAdvisoriesDBLookup is not found in the empty JSON string", ControllersSystemAdvisoriesDBLookup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllersSystemAdvisoriesDBLookup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllersSystemAdvisoriesDBLookup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("public_date") != null && !jsonObj.get("public_date").isJsonNull()) && !jsonObj.get("public_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_date").toString()));
      }
      if ((jsonObj.get("synopsis") != null && !jsonObj.get("synopsis").isJsonNull()) && !jsonObj.get("synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synopsis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllersSystemAdvisoriesDBLookup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllersSystemAdvisoriesDBLookup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllersSystemAdvisoriesDBLookup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllersSystemAdvisoriesDBLookup.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllersSystemAdvisoriesDBLookup>() {
           @Override
           public void write(JsonWriter out, ControllersSystemAdvisoriesDBLookup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllersSystemAdvisoriesDBLookup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllersSystemAdvisoriesDBLookup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllersSystemAdvisoriesDBLookup
   * @throws IOException if the JSON string is invalid with respect to ControllersSystemAdvisoriesDBLookup
   */
  public static ControllersSystemAdvisoriesDBLookup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllersSystemAdvisoriesDBLookup.class);
  }

  /**
   * Convert an instance of ControllersSystemAdvisoriesDBLookup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

