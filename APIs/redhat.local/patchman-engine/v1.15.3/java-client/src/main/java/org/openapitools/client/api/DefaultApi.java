/*
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ControllersAdvisoriesResponse;
import org.openapitools.client.model.ControllersAdvisoriesSystemsResponse;
import org.openapitools.client.model.ControllersAdvisoryDetailResponse;
import org.openapitools.client.model.ControllersAdvisoryInlineItem;
import org.openapitools.client.model.ControllersAdvisorySystemsResponse;
import org.openapitools.client.model.ControllersPackageDetailResponse;
import org.openapitools.client.model.ControllersPackageItem;
import org.openapitools.client.model.ControllersPackageSystemItem;
import org.openapitools.client.model.ControllersPackageSystemsResponse;
import org.openapitools.client.model.ControllersPackageVersionsResponse;
import org.openapitools.client.model.ControllersPackagesResponse;
import org.openapitools.client.model.ControllersSystemAdvisoriesDBLookup;
import org.openapitools.client.model.ControllersSystemAdvisoriesResponse;
import org.openapitools.client.model.ControllersSystemDetailResponse;
import org.openapitools.client.model.ControllersSystemInlineItem;
import org.openapitools.client.model.ControllersSystemPackageInline;
import org.openapitools.client.model.ControllersSystemPackageResponse;
import org.openapitools.client.model.ControllersSystemsAdvisoriesRequest;
import org.openapitools.client.model.ControllersSystemsAdvisoriesResponse;
import org.openapitools.client.model.ControllersSystemsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletesystem
     * @param inventoryId Inventory ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletesystemCall(String inventoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/systems/{inventory_id}"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletesystemValidateBeforeCall(String inventoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling deletesystem(Async)");
        }

        return deletesystemCall(inventoryId, _callback);

    }

    /**
     * Delete system by inventory id
     * Delete system by inventory id
     * @param inventoryId Inventory ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public void deletesystem(String inventoryId) throws ApiException {
        deletesystemWithHttpInfo(inventoryId);
    }

    /**
     * Delete system by inventory id
     * Delete system by inventory id
     * @param inventoryId Inventory ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletesystemWithHttpInfo(String inventoryId) throws ApiException {
        okhttp3.Call localVarCall = deletesystemValidateBeforeCall(inventoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete system by inventory id (asynchronously)
     * Delete system by inventory id
     * @param inventoryId Inventory ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletesystemAsync(String inventoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletesystemValidateBeforeCall(inventoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for detailAdvisory
     * @param advisoryId Advisory ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailAdvisoryCall(String advisoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/advisories/{advisory_id}"
            .replace("{" + "advisory_id" + "}", localVarApiClient.escapeString(advisoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailAdvisoryValidateBeforeCall(String advisoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advisoryId' is set
        if (advisoryId == null) {
            throw new ApiException("Missing the required parameter 'advisoryId' when calling detailAdvisory(Async)");
        }

        return detailAdvisoryCall(advisoryId, _callback);

    }

    /**
     * Show me details an advisory by given advisory name
     * Show me details an advisory by given advisory name
     * @param advisoryId Advisory ID (required)
     * @return ControllersAdvisoryDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersAdvisoryDetailResponse detailAdvisory(String advisoryId) throws ApiException {
        ApiResponse<ControllersAdvisoryDetailResponse> localVarResp = detailAdvisoryWithHttpInfo(advisoryId);
        return localVarResp.getData();
    }

    /**
     * Show me details an advisory by given advisory name
     * Show me details an advisory by given advisory name
     * @param advisoryId Advisory ID (required)
     * @return ApiResponse&lt;ControllersAdvisoryDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersAdvisoryDetailResponse> detailAdvisoryWithHttpInfo(String advisoryId) throws ApiException {
        okhttp3.Call localVarCall = detailAdvisoryValidateBeforeCall(advisoryId, null);
        Type localVarReturnType = new TypeToken<ControllersAdvisoryDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me details an advisory by given advisory name (asynchronously)
     * Show me details an advisory by given advisory name
     * @param advisoryId Advisory ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailAdvisoryAsync(String advisoryId, final ApiCallback<ControllersAdvisoryDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailAdvisoryValidateBeforeCall(advisoryId, _callback);
        Type localVarReturnType = new TypeToken<ControllersAdvisoryDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detailSystem
     * @param inventoryId Inventory ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailSystemCall(String inventoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/systems/{inventory_id}"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailSystemValidateBeforeCall(String inventoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling detailSystem(Async)");
        }

        return detailSystemCall(inventoryId, _callback);

    }

    /**
     * Show me details about a system by given inventory id
     * Show me details about a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @return ControllersSystemDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersSystemDetailResponse detailSystem(String inventoryId) throws ApiException {
        ApiResponse<ControllersSystemDetailResponse> localVarResp = detailSystemWithHttpInfo(inventoryId);
        return localVarResp.getData();
    }

    /**
     * Show me details about a system by given inventory id
     * Show me details about a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @return ApiResponse&lt;ControllersSystemDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersSystemDetailResponse> detailSystemWithHttpInfo(String inventoryId) throws ApiException {
        okhttp3.Call localVarCall = detailSystemValidateBeforeCall(inventoryId, null);
        Type localVarReturnType = new TypeToken<ControllersSystemDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me details about a system by given inventory id (asynchronously)
     * Show me details about a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailSystemAsync(String inventoryId, final ApiCallback<ControllersSystemDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailSystemValidateBeforeCall(inventoryId, _callback);
        Type localVarReturnType = new TypeToken<ControllersSystemDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportAdvisories
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAdvisoriesCall(String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/advisories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterPublicDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[public_date]", filterPublicDate));
        }

        if (filterSynopsis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[synopsis]", filterSynopsis));
        }

        if (filterAdvisoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[advisory_type]", filterAdvisoryType));
        }

        if (filterSeverity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[severity]", filterSeverity));
        }

        if (filterApplicableSystems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[applicable_systems]", filterApplicableSystems));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAdvisoriesValidateBeforeCall(String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, final ApiCallback _callback) throws ApiException {
        return exportAdvisoriesCall(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, _callback);

    }

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @return List&lt;ControllersAdvisoryInlineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersAdvisoryInlineItem> exportAdvisories(String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems) throws ApiException {
        ApiResponse<List<ControllersAdvisoryInlineItem>> localVarResp = exportAdvisoriesWithHttpInfo(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems);
        return localVarResp.getData();
    }

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersAdvisoryInlineItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersAdvisoryInlineItem>> exportAdvisoriesWithHttpInfo(String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems) throws ApiException {
        okhttp3.Call localVarCall = exportAdvisoriesValidateBeforeCall(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, null);
        Type localVarReturnType = new TypeToken<List<ControllersAdvisoryInlineItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export applicable advisories for all my systems (asynchronously)
     * Export applicable advisories for all my systems
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAdvisoriesAsync(String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, final ApiCallback<List<ControllersAdvisoryInlineItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAdvisoriesValidateBeforeCall(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersAdvisoryInlineItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportAdvisorySystems
     * @param advisoryId Advisory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAdvisorySystemsCall(String advisoryId, String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/advisories/{advisory_id}/systems"
            .replace("{" + "advisory_id" + "}", localVarApiClient.escapeString(advisoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[display_name]", filterDisplayName));
        }

        if (filterLastEvaluation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_evaluation]", filterLastEvaluation));
        }

        if (filterLastUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_upload]", filterLastUpload));
        }

        if (filterRhsaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhsa_count]", filterRhsaCount));
        }

        if (filterRhbaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhba_count]", filterRhbaCount));
        }

        if (filterRheaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhea_count]", filterRheaCount));
        }

        if (filterOtherCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[other_count]", filterOtherCount));
        }

        if (filterStale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale]", filterStale));
        }

        if (filterPackagesInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_installed]", filterPackagesInstalled));
        }

        if (filterPackagesUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_updatable]", filterPackagesUpdatable));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAdvisorySystemsValidateBeforeCall(String advisoryId, String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advisoryId' is set
        if (advisoryId == null) {
            throw new ApiException("Missing the required parameter 'advisoryId' when calling exportAdvisorySystems(Async)");
        }

        return exportAdvisorySystemsCall(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);

    }

    /**
     * Export systems for my account
     * Export systems for my account
     * @param advisoryId Advisory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return List&lt;ControllersSystemInlineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersSystemInlineItem> exportAdvisorySystems(String advisoryId, String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        ApiResponse<List<ControllersSystemInlineItem>> localVarResp = exportAdvisorySystemsWithHttpInfo(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        return localVarResp.getData();
    }

    /**
     * Export systems for my account
     * Export systems for my account
     * @param advisoryId Advisory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersSystemInlineItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersSystemInlineItem>> exportAdvisorySystemsWithHttpInfo(String advisoryId, String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = exportAdvisorySystemsValidateBeforeCall(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, null);
        Type localVarReturnType = new TypeToken<List<ControllersSystemInlineItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export systems for my account (asynchronously)
     * Export systems for my account
     * @param advisoryId Advisory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAdvisorySystemsAsync(String advisoryId, String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback<List<ControllersSystemInlineItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAdvisorySystemsValidateBeforeCall(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersSystemInlineItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportPackageSystems
     * @param packageName Package name (required)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPackageSystemsCall(String packageName, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/packages/{package_name}/systems"
            .replace("{" + "package_name" + "}", localVarApiClient.escapeString(packageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportPackageSystemsValidateBeforeCall(String packageName, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling exportPackageSystems(Async)");
        }

        return exportPackageSystemsCall(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);

    }

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return List&lt;ControllersPackageSystemItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersPackageSystemItem> exportPackageSystems(String packageName, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        ApiResponse<List<ControllersPackageSystemItem>> localVarResp = exportPackageSystemsWithHttpInfo(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        return localVarResp.getData();
    }

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersPackageSystemItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersPackageSystemItem>> exportPackageSystemsWithHttpInfo(String packageName, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = exportPackageSystemsValidateBeforeCall(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, null);
        Type localVarReturnType = new TypeToken<List<ControllersPackageSystemItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all my systems which have a package installed (asynchronously)
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPackageSystemsAsync(String packageName, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback<List<ControllersPackageSystemItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportPackageSystemsValidateBeforeCall(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersPackageSystemItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportPackages
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPackagesCall(String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[name]", filterName));
        }

        if (filterSystemsInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[systems_installed]", filterSystemsInstalled));
        }

        if (filterSystemsUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[systems_updatable]", filterSystemsUpdatable));
        }

        if (filterSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[summary]", filterSummary));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportPackagesValidateBeforeCall(String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, final ApiCallback _callback) throws ApiException {
        return exportPackagesCall(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, _callback);

    }

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @return List&lt;ControllersPackageItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersPackageItem> exportPackages(String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary) throws ApiException {
        ApiResponse<List<ControllersPackageItem>> localVarResp = exportPackagesWithHttpInfo(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary);
        return localVarResp.getData();
    }

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersPackageItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersPackageItem>> exportPackagesWithHttpInfo(String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary) throws ApiException {
        okhttp3.Call localVarCall = exportPackagesValidateBeforeCall(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, null);
        Type localVarReturnType = new TypeToken<List<ControllersPackageItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all installed packages across my systems (asynchronously)
     * Show me all installed packages across my systems
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPackagesAsync(String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, final ApiCallback<List<ControllersPackageItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportPackagesValidateBeforeCall(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersPackageItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSystemAdvisories
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemAdvisoriesCall(String inventoryId, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/systems/{inventory_id}/advisories"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterPublicDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[public_date]", filterPublicDate));
        }

        if (filterSynopsis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[synopsis]", filterSynopsis));
        }

        if (filterAdvisoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[advisory_type]", filterAdvisoryType));
        }

        if (filterSeverity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[severity]", filterSeverity));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSystemAdvisoriesValidateBeforeCall(String inventoryId, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling exportSystemAdvisories(Async)");
        }

        return exportSystemAdvisoriesCall(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, _callback);

    }

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @return List&lt;ControllersSystemAdvisoriesDBLookup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersSystemAdvisoriesDBLookup> exportSystemAdvisories(String inventoryId, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity) throws ApiException {
        ApiResponse<List<ControllersSystemAdvisoriesDBLookup>> localVarResp = exportSystemAdvisoriesWithHttpInfo(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity);
        return localVarResp.getData();
    }

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersSystemAdvisoriesDBLookup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersSystemAdvisoriesDBLookup>> exportSystemAdvisoriesWithHttpInfo(String inventoryId, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity) throws ApiException {
        okhttp3.Call localVarCall = exportSystemAdvisoriesValidateBeforeCall(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, null);
        Type localVarReturnType = new TypeToken<List<ControllersSystemAdvisoriesDBLookup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export applicable advisories for all my systems (asynchronously)
     * Export applicable advisories for all my systems
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemAdvisoriesAsync(String inventoryId, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback<List<ControllersSystemAdvisoriesDBLookup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSystemAdvisoriesValidateBeforeCall(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersSystemAdvisoriesDBLookup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSystemPackages
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemPackagesCall(String inventoryId, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/systems/{inventory_id}/packages"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[name]", filterName));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterEvra != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[evra]", filterEvra));
        }

        if (filterSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[summary]", filterSummary));
        }

        if (filterUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[updatable]", filterUpdatable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSystemPackagesValidateBeforeCall(String inventoryId, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling exportSystemPackages(Async)");
        }

        return exportSystemPackagesCall(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, _callback);

    }

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @return List&lt;ControllersSystemPackageInline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersSystemPackageInline> exportSystemPackages(String inventoryId, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable) throws ApiException {
        ApiResponse<List<ControllersSystemPackageInline>> localVarResp = exportSystemPackagesWithHttpInfo(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable);
        return localVarResp.getData();
    }

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersSystemPackageInline&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersSystemPackageInline>> exportSystemPackagesWithHttpInfo(String inventoryId, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable) throws ApiException {
        okhttp3.Call localVarCall = exportSystemPackagesValidateBeforeCall(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, null);
        Type localVarReturnType = new TypeToken<List<ControllersSystemPackageInline>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me details about a system packages by given inventory id (asynchronously)
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemPackagesAsync(String inventoryId, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback<List<ControllersSystemPackageInline>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSystemPackagesValidateBeforeCall(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersSystemPackageInline>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSystems
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemsCall(String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/export/systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[display_name]", filterDisplayName));
        }

        if (filterLastEvaluation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_evaluation]", filterLastEvaluation));
        }

        if (filterLastUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_upload]", filterLastUpload));
        }

        if (filterRhsaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhsa_count]", filterRhsaCount));
        }

        if (filterRhbaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhba_count]", filterRhbaCount));
        }

        if (filterRheaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhea_count]", filterRheaCount));
        }

        if (filterOtherCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[other_count]", filterOtherCount));
        }

        if (filterStale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale]", filterStale));
        }

        if (filterPackagesInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_installed]", filterPackagesInstalled));
        }

        if (filterPackagesUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_updatable]", filterPackagesUpdatable));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSystemsValidateBeforeCall(String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback _callback) throws ApiException {
        return exportSystemsCall(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);

    }

    /**
     * Export systems for my account
     * Export systems for my account
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return List&lt;ControllersSystemInlineItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ControllersSystemInlineItem> exportSystems(String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        ApiResponse<List<ControllersSystemInlineItem>> localVarResp = exportSystemsWithHttpInfo(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags);
        return localVarResp.getData();
    }

    /**
     * Export systems for my account
     * Export systems for my account
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @return ApiResponse&lt;List&lt;ControllersSystemInlineItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ControllersSystemInlineItem>> exportSystemsWithHttpInfo(String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = exportSystemsValidateBeforeCall(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, null);
        Type localVarReturnType = new TypeToken<List<ControllersSystemInlineItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export systems for my account (asynchronously)
     * Export systems for my account
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param tags Tag filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSystemsAsync(String search, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, List<String> tags, final ApiCallback<List<ControllersSystemInlineItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSystemsValidateBeforeCall(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, tags, _callback);
        Type localVarReturnType = new TypeToken<List<ControllersSystemInlineItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for latestPackage
     * @param packageName package_name - latest, nevra - exact version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestPackageCall(String packageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/packages/{package_name}"
            .replace("{" + "package_name" + "}", localVarApiClient.escapeString(packageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestPackageValidateBeforeCall(String packageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling latestPackage(Async)");
        }

        return latestPackageCall(packageName, _callback);

    }

    /**
     * Show me metadata of selected package
     * Show me metadata of selected package
     * @param packageName package_name - latest, nevra - exact version (required)
     * @return ControllersPackageDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersPackageDetailResponse latestPackage(String packageName) throws ApiException {
        ApiResponse<ControllersPackageDetailResponse> localVarResp = latestPackageWithHttpInfo(packageName);
        return localVarResp.getData();
    }

    /**
     * Show me metadata of selected package
     * Show me metadata of selected package
     * @param packageName package_name - latest, nevra - exact version (required)
     * @return ApiResponse&lt;ControllersPackageDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersPackageDetailResponse> latestPackageWithHttpInfo(String packageName) throws ApiException {
        okhttp3.Call localVarCall = latestPackageValidateBeforeCall(packageName, null);
        Type localVarReturnType = new TypeToken<ControllersPackageDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me metadata of selected package (asynchronously)
     * Show me metadata of selected package
     * @param packageName package_name - latest, nevra - exact version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestPackageAsync(String packageName, final ApiCallback<ControllersPackageDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestPackageValidateBeforeCall(packageName, _callback);
        Type localVarReturnType = new TypeToken<ControllersPackageDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAdvisories
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter  (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAdvisoriesCall(Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/advisories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterPublicDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[public_date]", filterPublicDate));
        }

        if (filterSynopsis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[synopsis]", filterSynopsis));
        }

        if (filterAdvisoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[advisory_type]", filterAdvisoryType));
        }

        if (filterSeverity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[severity]", filterSeverity));
        }

        if (filterApplicableSystems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[applicable_systems]", filterApplicableSystems));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAdvisoriesValidateBeforeCall(Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        return listAdvisoriesCall(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);

    }

    /**
     * Show me all applicable advisories for all my systems
     * Show me all applicable advisories for all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter  (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ControllersAdvisoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersAdvisoriesResponse listAdvisories(Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        ApiResponse<ControllersAdvisoriesResponse> localVarResp = listAdvisoriesWithHttpInfo(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        return localVarResp.getData();
    }

    /**
     * Show me all applicable advisories for all my systems
     * Show me all applicable advisories for all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter  (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ApiResponse&lt;ControllersAdvisoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersAdvisoriesResponse> listAdvisoriesWithHttpInfo(Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        okhttp3.Call localVarCall = listAdvisoriesValidateBeforeCall(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, null);
        Type localVarReturnType = new TypeToken<ControllersAdvisoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all applicable advisories for all my systems (asynchronously)
     * Show me all applicable advisories for all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter  (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param filterApplicableSystems Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAdvisoriesAsync(Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, String filterApplicableSystems, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback<ControllersAdvisoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAdvisoriesValidateBeforeCall(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);
        Type localVarReturnType = new TypeToken<ControllersAdvisoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAdvisorySystems
     * @param advisoryId Advisory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAdvisorySystemsCall(String advisoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterInsightsId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/advisories/{advisory_id}/systems"
            .replace("{" + "advisory_id" + "}", localVarApiClient.escapeString(advisoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterInsightsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[insights_id]", filterInsightsId));
        }

        if (filterDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[display_name]", filterDisplayName));
        }

        if (filterLastEvaluation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_evaluation]", filterLastEvaluation));
        }

        if (filterLastUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_upload]", filterLastUpload));
        }

        if (filterRhsaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhsa_count]", filterRhsaCount));
        }

        if (filterRhbaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhba_count]", filterRhbaCount));
        }

        if (filterRheaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhea_count]", filterRheaCount));
        }

        if (filterOtherCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[other_count]", filterOtherCount));
        }

        if (filterStale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale]", filterStale));
        }

        if (filterStaleTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale_timestamp]", filterStaleTimestamp));
        }

        if (filterStaleWarningTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale_warning_timestamp]", filterStaleWarningTimestamp));
        }

        if (filterCulledTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[culled_timestamp]", filterCulledTimestamp));
        }

        if (filterCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created]", filterCreated));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAdvisorySystemsValidateBeforeCall(String advisoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterInsightsId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advisoryId' is set
        if (advisoryId == null) {
            throw new ApiException("Missing the required parameter 'advisoryId' when calling listAdvisorySystems(Async)");
        }

        return listAdvisorySystemsCall(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);

    }

    /**
     * Show me systems on which the given advisory is applicable
     * Show me systems on which the given advisory is applicable
     * @param advisoryId Advisory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ControllersAdvisorySystemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersAdvisorySystemsResponse listAdvisorySystems(String advisoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterInsightsId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        ApiResponse<ControllersAdvisorySystemsResponse> localVarResp = listAdvisorySystemsWithHttpInfo(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        return localVarResp.getData();
    }

    /**
     * Show me systems on which the given advisory is applicable
     * Show me systems on which the given advisory is applicable
     * @param advisoryId Advisory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ApiResponse&lt;ControllersAdvisorySystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersAdvisorySystemsResponse> listAdvisorySystemsWithHttpInfo(String advisoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterInsightsId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        okhttp3.Call localVarCall = listAdvisorySystemsValidateBeforeCall(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, null);
        Type localVarReturnType = new TypeToken<ControllersAdvisorySystemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me systems on which the given advisory is applicable (asynchronously)
     * Show me systems on which the given advisory is applicable
     * @param advisoryId Advisory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAdvisorySystemsAsync(String advisoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterInsightsId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback<ControllersAdvisorySystemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAdvisorySystemsValidateBeforeCall(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);
        Type localVarReturnType = new TypeToken<ControllersAdvisorySystemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPackages
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPackagesCall(Integer limit, Integer offset, String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/packages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[name]", filterName));
        }

        if (filterSystemsInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[systems_installed]", filterSystemsInstalled));
        }

        if (filterSystemsUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[systems_updatable]", filterSystemsUpdatable));
        }

        if (filterSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[summary]", filterSummary));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPackagesValidateBeforeCall(Integer limit, Integer offset, String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        return listPackagesCall(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);

    }

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ControllersPackagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersPackagesResponse listPackages(Integer limit, Integer offset, String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        ApiResponse<ControllersPackagesResponse> localVarResp = listPackagesWithHttpInfo(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        return localVarResp.getData();
    }

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ApiResponse&lt;ControllersPackagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersPackagesResponse> listPackagesWithHttpInfo(Integer limit, Integer offset, String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        okhttp3.Call localVarCall = listPackagesValidateBeforeCall(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, null);
        Type localVarReturnType = new TypeToken<ControllersPackagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all installed packages across my systems (asynchronously)
     * Show me all installed packages across my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterSystemsInstalled Filter (optional)
     * @param filterSystemsUpdatable Filter (optional)
     * @param filterSummary Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPackagesAsync(Integer limit, Integer offset, String sort, String search, String filterName, String filterSystemsInstalled, String filterSystemsUpdatable, String filterSummary, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback<ControllersPackagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPackagesValidateBeforeCall(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);
        Type localVarReturnType = new TypeToken<ControllersPackagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSystemAdvisories
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSystemAdvisoriesCall(String inventoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/systems/{inventory_id}/advisories"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterPublicDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[public_date]", filterPublicDate));
        }

        if (filterSynopsis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[synopsis]", filterSynopsis));
        }

        if (filterAdvisoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[advisory_type]", filterAdvisoryType));
        }

        if (filterSeverity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[severity]", filterSeverity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSystemAdvisoriesValidateBeforeCall(String inventoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling listSystemAdvisories(Async)");
        }

        return listSystemAdvisoriesCall(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, _callback);

    }

    /**
     * Show me advisories for a system by given inventory id
     * Show me advisories for a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @return ControllersSystemAdvisoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersSystemAdvisoriesResponse listSystemAdvisories(String inventoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity) throws ApiException {
        ApiResponse<ControllersSystemAdvisoriesResponse> localVarResp = listSystemAdvisoriesWithHttpInfo(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity);
        return localVarResp.getData();
    }

    /**
     * Show me advisories for a system by given inventory id
     * Show me advisories for a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @return ApiResponse&lt;ControllersSystemAdvisoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersSystemAdvisoriesResponse> listSystemAdvisoriesWithHttpInfo(String inventoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity) throws ApiException {
        okhttp3.Call localVarCall = listSystemAdvisoriesValidateBeforeCall(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, null);
        Type localVarReturnType = new TypeToken<ControllersSystemAdvisoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me advisories for a system by given inventory id (asynchronously)
     * Show me advisories for a system by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterId Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterPublicDate Filter (optional)
     * @param filterSynopsis Filter (optional)
     * @param filterAdvisoryType Filter (optional)
     * @param filterSeverity Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSystemAdvisoriesAsync(String inventoryId, Integer limit, Integer offset, String sort, String search, String filterId, String filterDescription, String filterPublicDate, String filterSynopsis, String filterAdvisoryType, String filterSeverity, final ApiCallback<ControllersSystemAdvisoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSystemAdvisoriesValidateBeforeCall(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, _callback);
        Type localVarReturnType = new TypeToken<ControllersSystemAdvisoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSystems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSystemsCall(Integer limit, Integer offset, String sort, String search, String filterInsightsId, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterInsightsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[insights_id]", filterInsightsId));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[id]", filterId));
        }

        if (filterDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[display_name]", filterDisplayName));
        }

        if (filterLastEvaluation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_evaluation]", filterLastEvaluation));
        }

        if (filterLastUpload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[last_upload]", filterLastUpload));
        }

        if (filterRhsaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhsa_count]", filterRhsaCount));
        }

        if (filterRhbaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhba_count]", filterRhbaCount));
        }

        if (filterRheaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[rhea_count]", filterRheaCount));
        }

        if (filterOtherCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[other_count]", filterOtherCount));
        }

        if (filterStale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale]", filterStale));
        }

        if (filterPackagesInstalled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_installed]", filterPackagesInstalled));
        }

        if (filterPackagesUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[packages_updatable]", filterPackagesUpdatable));
        }

        if (filterStaleTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale_timestamp]", filterStaleTimestamp));
        }

        if (filterStaleWarningTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[stale_warning_timestamp]", filterStaleWarningTimestamp));
        }

        if (filterCulledTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[culled_timestamp]", filterCulledTimestamp));
        }

        if (filterCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created]", filterCreated));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSystemsValidateBeforeCall(Integer limit, Integer offset, String sort, String search, String filterInsightsId, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        return listSystemsCall(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);

    }

    /**
     * Show me all my systems
     * Show me all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ControllersSystemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersSystemsResponse listSystems(Integer limit, Integer offset, String sort, String search, String filterInsightsId, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        ApiResponse<ControllersSystemsResponse> localVarResp = listSystemsWithHttpInfo(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        return localVarResp.getData();
    }

    /**
     * Show me all my systems
     * Show me all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ApiResponse&lt;ControllersSystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersSystemsResponse> listSystemsWithHttpInfo(Integer limit, Integer offset, String sort, String search, String filterInsightsId, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        okhttp3.Call localVarCall = listSystemsValidateBeforeCall(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, null);
        Type localVarReturnType = new TypeToken<ControllersSystemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all my systems (asynchronously)
     * Show me all my systems
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param sort Sort field (optional)
     * @param search Find matching text (optional)
     * @param filterInsightsId Filter (optional)
     * @param filterId Filter (optional)
     * @param filterDisplayName Filter (optional)
     * @param filterLastEvaluation Filter (optional)
     * @param filterLastUpload Filter (optional)
     * @param filterRhsaCount Filter (optional)
     * @param filterRhbaCount Filter (optional)
     * @param filterRheaCount Filter (optional)
     * @param filterOtherCount Filter (optional)
     * @param filterStale Filter (optional)
     * @param filterPackagesInstalled Filter (optional)
     * @param filterPackagesUpdatable Filter (optional)
     * @param filterStaleTimestamp Filter (optional)
     * @param filterStaleWarningTimestamp Filter (optional)
     * @param filterCulledTimestamp Filter (optional)
     * @param filterCreated Filter (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSystemsAsync(Integer limit, Integer offset, String sort, String search, String filterInsightsId, String filterId, String filterDisplayName, String filterLastEvaluation, String filterLastUpload, String filterRhsaCount, String filterRhbaCount, String filterRheaCount, String filterOtherCount, String filterStale, String filterPackagesInstalled, String filterPackagesUpdatable, String filterStaleTimestamp, String filterStaleWarningTimestamp, String filterCulledTimestamp, String filterCreated, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback<ControllersSystemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSystemsValidateBeforeCall(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);
        Type localVarReturnType = new TypeToken<ControllersSystemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageSystems
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageSystemsCall(String packageName, Integer limit, Integer offset, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/packages/{package_name}/systems"
            .replace("{" + "package_name" + "}", localVarApiClient.escapeString(packageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (filterSystemProfileSapSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[system_profile][sap_system]", filterSystemProfileSapSystem));
        }

        if (filterSystemProfileSapSidsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[system_profile][sap_sids][in]", filterSystemProfileSapSidsIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageSystemsValidateBeforeCall(String packageName, Integer limit, Integer offset, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling packageSystems(Async)");
        }

        return packageSystemsCall(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);

    }

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ControllersPackageSystemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersPackageSystemsResponse packageSystems(String packageName, Integer limit, Integer offset, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        ApiResponse<ControllersPackageSystemsResponse> localVarResp = packageSystemsWithHttpInfo(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn);
        return localVarResp.getData();
    }

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @return ApiResponse&lt;ControllersPackageSystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersPackageSystemsResponse> packageSystemsWithHttpInfo(String packageName, Integer limit, Integer offset, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn) throws ApiException {
        okhttp3.Call localVarCall = packageSystemsValidateBeforeCall(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, null);
        Type localVarReturnType = new TypeToken<ControllersPackageSystemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all my systems which have a package installed (asynchronously)
     * Show me all my systems which have a package installed
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param tags Tag filter (optional)
     * @param filterSystemProfileSapSystem Filter only SAP systems (optional)
     * @param filterSystemProfileSapSidsIn Filter systems by their SAP SIDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageSystemsAsync(String packageName, Integer limit, Integer offset, List<String> tags, String filterSystemProfileSapSystem, List<String> filterSystemProfileSapSidsIn, final ApiCallback<ControllersPackageSystemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageSystemsValidateBeforeCall(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, _callback);
        Type localVarReturnType = new TypeToken<ControllersPackageSystemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageVersions
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageVersionsCall(String packageName, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/packages/{package_name}/versions"
            .replace("{" + "package_name" + "}", localVarApiClient.escapeString(packageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageVersionsValidateBeforeCall(String packageName, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling packageVersions(Async)");
        }

        return packageVersionsCall(packageName, limit, offset, _callback);

    }

    /**
     * Show me all package versions installed on some system
     * Show me all package versions installed on some system
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @return ControllersPackageVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersPackageVersionsResponse packageVersions(String packageName, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ControllersPackageVersionsResponse> localVarResp = packageVersionsWithHttpInfo(packageName, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Show me all package versions installed on some system
     * Show me all package versions installed on some system
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @return ApiResponse&lt;ControllersPackageVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersPackageVersionsResponse> packageVersionsWithHttpInfo(String packageName, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = packageVersionsValidateBeforeCall(packageName, limit, offset, null);
        Type localVarReturnType = new TypeToken<ControllersPackageVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me all package versions installed on some system (asynchronously)
     * Show me all package versions installed on some system
     * @param packageName Package name (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageVersionsAsync(String packageName, Integer limit, Integer offset, final ApiCallback<ControllersPackageVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageVersionsValidateBeforeCall(packageName, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ControllersPackageVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemPackages
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemPackagesCall(String inventoryId, Integer limit, Integer offset, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/patch/v1/systems/{inventory_id}/packages"
            .replace("{" + "inventory_id" + "}", localVarApiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[name]", filterName));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[description]", filterDescription));
        }

        if (filterEvra != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[evra]", filterEvra));
        }

        if (filterSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[summary]", filterSummary));
        }

        if (filterUpdatable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[updatable]", filterUpdatable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemPackagesValidateBeforeCall(String inventoryId, Integer limit, Integer offset, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling systemPackages(Async)");
        }

        return systemPackagesCall(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, _callback);

    }

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @return ControllersSystemPackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersSystemPackageResponse systemPackages(String inventoryId, Integer limit, Integer offset, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable) throws ApiException {
        ApiResponse<ControllersSystemPackageResponse> localVarResp = systemPackagesWithHttpInfo(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable);
        return localVarResp.getData();
    }

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @return ApiResponse&lt;ControllersSystemPackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersSystemPackageResponse> systemPackagesWithHttpInfo(String inventoryId, Integer limit, Integer offset, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable) throws ApiException {
        okhttp3.Call localVarCall = systemPackagesValidateBeforeCall(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, null);
        Type localVarReturnType = new TypeToken<ControllersSystemPackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show me details about a system packages by given inventory id (asynchronously)
     * Show me details about a system packages by given inventory id
     * @param inventoryId Inventory ID (required)
     * @param limit Limit for paging, set -1 to return all (optional)
     * @param offset Offset for paging (optional)
     * @param search Find matching text (optional)
     * @param filterName Filter (optional)
     * @param filterDescription Filter (optional)
     * @param filterEvra Filter (optional)
     * @param filterSummary Filter (optional)
     * @param filterUpdatable Filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemPackagesAsync(String inventoryId, Integer limit, Integer offset, String search, String filterName, String filterDescription, String filterEvra, String filterSummary, Boolean filterUpdatable, final ApiCallback<ControllersSystemPackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemPackagesValidateBeforeCall(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, _callback);
        Type localVarReturnType = new TypeToken<ControllersSystemPackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewAdvisoriesSystems
     * @param body Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewAdvisoriesSystemsCall(ControllersSystemsAdvisoriesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/patch/v1/views/advisories/systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewAdvisoriesSystemsValidateBeforeCall(ControllersSystemsAdvisoriesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling viewAdvisoriesSystems(Async)");
        }

        return viewAdvisoriesSystemsCall(body, _callback);

    }

    /**
     * View advisory-system pairs for selected systems and advisories
     * View advisory-system pairs for selected systems and advisories
     * @param body Request body (required)
     * @return ControllersAdvisoriesSystemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersAdvisoriesSystemsResponse viewAdvisoriesSystems(ControllersSystemsAdvisoriesRequest body) throws ApiException {
        ApiResponse<ControllersAdvisoriesSystemsResponse> localVarResp = viewAdvisoriesSystemsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * View advisory-system pairs for selected systems and advisories
     * View advisory-system pairs for selected systems and advisories
     * @param body Request body (required)
     * @return ApiResponse&lt;ControllersAdvisoriesSystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersAdvisoriesSystemsResponse> viewAdvisoriesSystemsWithHttpInfo(ControllersSystemsAdvisoriesRequest body) throws ApiException {
        okhttp3.Call localVarCall = viewAdvisoriesSystemsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ControllersAdvisoriesSystemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View advisory-system pairs for selected systems and advisories (asynchronously)
     * View advisory-system pairs for selected systems and advisories
     * @param body Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewAdvisoriesSystemsAsync(ControllersSystemsAdvisoriesRequest body, final ApiCallback<ControllersAdvisoriesSystemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewAdvisoriesSystemsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ControllersAdvisoriesSystemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewSystemsAdvisories
     * @param body Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewSystemsAdvisoriesCall(ControllersSystemsAdvisoriesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/patch/v1/views/systems/advisories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "RhIdentity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewSystemsAdvisoriesValidateBeforeCall(ControllersSystemsAdvisoriesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling viewSystemsAdvisories(Async)");
        }

        return viewSystemsAdvisoriesCall(body, _callback);

    }

    /**
     * View system-advisory pairs for selected systems and advisories
     * View system-advisory pairs for selected systems and advisories
     * @param body Request body (required)
     * @return ControllersSystemsAdvisoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ControllersSystemsAdvisoriesResponse viewSystemsAdvisories(ControllersSystemsAdvisoriesRequest body) throws ApiException {
        ApiResponse<ControllersSystemsAdvisoriesResponse> localVarResp = viewSystemsAdvisoriesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * View system-advisory pairs for selected systems and advisories
     * View system-advisory pairs for selected systems and advisories
     * @param body Request body (required)
     * @return ApiResponse&lt;ControllersSystemsAdvisoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllersSystemsAdvisoriesResponse> viewSystemsAdvisoriesWithHttpInfo(ControllersSystemsAdvisoriesRequest body) throws ApiException {
        okhttp3.Call localVarCall = viewSystemsAdvisoriesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ControllersSystemsAdvisoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View system-advisory pairs for selected systems and advisories (asynchronously)
     * View system-advisory pairs for selected systems and advisories
     * @param body Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewSystemsAdvisoriesAsync(ControllersSystemsAdvisoriesRequest body, final ApiCallback<ControllersSystemsAdvisoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewSystemsAdvisoriesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ControllersSystemsAdvisoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
