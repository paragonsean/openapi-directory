/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PatchmanEngineApi);
  }
}(this, function(expect, PatchmanEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PatchmanEngineApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('deletesystem', function() {
      it('should call deletesystem successfully', function(done) {
        //uncomment below and update the code to test deletesystem
        //instance.deletesystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detailAdvisory', function() {
      it('should call detailAdvisory successfully', function(done) {
        //uncomment below and update the code to test detailAdvisory
        //instance.detailAdvisory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detailSystem', function() {
      it('should call detailSystem successfully', function(done) {
        //uncomment below and update the code to test detailSystem
        //instance.detailSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportAdvisories', function() {
      it('should call exportAdvisories successfully', function(done) {
        //uncomment below and update the code to test exportAdvisories
        //instance.exportAdvisories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportAdvisorySystems', function() {
      it('should call exportAdvisorySystems successfully', function(done) {
        //uncomment below and update the code to test exportAdvisorySystems
        //instance.exportAdvisorySystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportPackageSystems', function() {
      it('should call exportPackageSystems successfully', function(done) {
        //uncomment below and update the code to test exportPackageSystems
        //instance.exportPackageSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportPackages', function() {
      it('should call exportPackages successfully', function(done) {
        //uncomment below and update the code to test exportPackages
        //instance.exportPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportSystemAdvisories', function() {
      it('should call exportSystemAdvisories successfully', function(done) {
        //uncomment below and update the code to test exportSystemAdvisories
        //instance.exportSystemAdvisories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportSystemPackages', function() {
      it('should call exportSystemPackages successfully', function(done) {
        //uncomment below and update the code to test exportSystemPackages
        //instance.exportSystemPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportSystems', function() {
      it('should call exportSystems successfully', function(done) {
        //uncomment below and update the code to test exportSystems
        //instance.exportSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('latestPackage', function() {
      it('should call latestPackage successfully', function(done) {
        //uncomment below and update the code to test latestPackage
        //instance.latestPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAdvisories', function() {
      it('should call listAdvisories successfully', function(done) {
        //uncomment below and update the code to test listAdvisories
        //instance.listAdvisories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAdvisorySystems', function() {
      it('should call listAdvisorySystems successfully', function(done) {
        //uncomment below and update the code to test listAdvisorySystems
        //instance.listAdvisorySystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackages', function() {
      it('should call listPackages successfully', function(done) {
        //uncomment below and update the code to test listPackages
        //instance.listPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSystemAdvisories', function() {
      it('should call listSystemAdvisories successfully', function(done) {
        //uncomment below and update the code to test listSystemAdvisories
        //instance.listSystemAdvisories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSystems', function() {
      it('should call listSystems successfully', function(done) {
        //uncomment below and update the code to test listSystems
        //instance.listSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageSystems', function() {
      it('should call packageSystems successfully', function(done) {
        //uncomment below and update the code to test packageSystems
        //instance.packageSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageVersions', function() {
      it('should call packageVersions successfully', function(done) {
        //uncomment below and update the code to test packageVersions
        //instance.packageVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('systemPackages', function() {
      it('should call systemPackages successfully', function(done) {
        //uncomment below and update the code to test systemPackages
        //instance.systemPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewAdvisoriesSystems', function() {
      it('should call viewAdvisoriesSystems successfully', function(done) {
        //uncomment below and update the code to test viewAdvisoriesSystems
        //instance.viewAdvisoriesSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewSystemsAdvisories', function() {
      it('should call viewSystemsAdvisories successfully', function(done) {
        //uncomment below and update the code to test viewSystemsAdvisories
        //instance.viewSystemsAdvisories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
