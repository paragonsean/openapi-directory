/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControllersSystemsAdvisoriesRequest model module.
 * @module model/ControllersSystemsAdvisoriesRequest
 * @version v1.15.3
 */
class ControllersSystemsAdvisoriesRequest {
    /**
     * Constructs a new <code>ControllersSystemsAdvisoriesRequest</code>.
     * @alias module:model/ControllersSystemsAdvisoriesRequest
     */
    constructor() { 
        
        ControllersSystemsAdvisoriesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ControllersSystemsAdvisoriesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControllersSystemsAdvisoriesRequest} obj Optional instance to populate.
     * @return {module:model/ControllersSystemsAdvisoriesRequest} The populated <code>ControllersSystemsAdvisoriesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControllersSystemsAdvisoriesRequest();

            if (data.hasOwnProperty('advisories')) {
                obj['advisories'] = ApiClient.convertToType(data['advisories'], ['String']);
            }
            if (data.hasOwnProperty('systems')) {
                obj['systems'] = ApiClient.convertToType(data['systems'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ControllersSystemsAdvisoriesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ControllersSystemsAdvisoriesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advisories'])) {
            throw new Error("Expected the field `advisories` to be an array in the JSON data but got " + data['advisories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['systems'])) {
            throw new Error("Expected the field `systems` to be an array in the JSON data but got " + data['systems']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} advisories
 */
ControllersSystemsAdvisoriesRequest.prototype['advisories'] = undefined;

/**
 * @member {Array.<String>} systems
 */
ControllersSystemsAdvisoriesRequest.prototype['systems'] = undefined;






export default ControllersSystemsAdvisoriesRequest;

