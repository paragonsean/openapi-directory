/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControllersAdvisoryDetailAttributes model module.
 * @module model/ControllersAdvisoryDetailAttributes
 * @version v1.15.3
 */
class ControllersAdvisoryDetailAttributes {
    /**
     * Constructs a new <code>ControllersAdvisoryDetailAttributes</code>.
     * @alias module:model/ControllersAdvisoryDetailAttributes
     */
    constructor() { 
        
        ControllersAdvisoryDetailAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ControllersAdvisoryDetailAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControllersAdvisoryDetailAttributes} obj Optional instance to populate.
     * @return {module:model/ControllersAdvisoryDetailAttributes} The populated <code>ControllersAdvisoryDetailAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControllersAdvisoryDetailAttributes();

            if (data.hasOwnProperty('cves')) {
                obj['cves'] = ApiClient.convertToType(data['cves'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fixes')) {
                obj['fixes'] = ApiClient.convertToType(data['fixes'], 'String');
            }
            if (data.hasOwnProperty('modified_date')) {
                obj['modified_date'] = ApiClient.convertToType(data['modified_date'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], {'String': 'String'});
            }
            if (data.hasOwnProperty('public_date')) {
                obj['public_date'] = ApiClient.convertToType(data['public_date'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'Number');
            }
            if (data.hasOwnProperty('solution')) {
                obj['solution'] = ApiClient.convertToType(data['solution'], 'String');
            }
            if (data.hasOwnProperty('synopsis')) {
                obj['synopsis'] = ApiClient.convertToType(data['synopsis'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ControllersAdvisoryDetailAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ControllersAdvisoryDetailAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cves'])) {
            throw new Error("Expected the field `cves` to be an array in the JSON data but got " + data['cves']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['fixes'] && !(typeof data['fixes'] === 'string' || data['fixes'] instanceof String)) {
            throw new Error("Expected the field `fixes` to be a primitive type in the JSON string but got " + data['fixes']);
        }
        // ensure the json data is a string
        if (data['modified_date'] && !(typeof data['modified_date'] === 'string' || data['modified_date'] instanceof String)) {
            throw new Error("Expected the field `modified_date` to be a primitive type in the JSON string but got " + data['modified_date']);
        }
        // ensure the json data is a string
        if (data['public_date'] && !(typeof data['public_date'] === 'string' || data['public_date'] instanceof String)) {
            throw new Error("Expected the field `public_date` to be a primitive type in the JSON string but got " + data['public_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }
        // ensure the json data is a string
        if (data['solution'] && !(typeof data['solution'] === 'string' || data['solution'] instanceof String)) {
            throw new Error("Expected the field `solution` to be a primitive type in the JSON string but got " + data['solution']);
        }
        // ensure the json data is a string
        if (data['synopsis'] && !(typeof data['synopsis'] === 'string' || data['synopsis'] instanceof String)) {
            throw new Error("Expected the field `synopsis` to be a primitive type in the JSON string but got " + data['synopsis']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} cves
 */
ControllersAdvisoryDetailAttributes.prototype['cves'] = undefined;

/**
 * @member {String} description
 */
ControllersAdvisoryDetailAttributes.prototype['description'] = undefined;

/**
 * @member {String} fixes
 */
ControllersAdvisoryDetailAttributes.prototype['fixes'] = undefined;

/**
 * @member {String} modified_date
 */
ControllersAdvisoryDetailAttributes.prototype['modified_date'] = undefined;

/**
 * @member {Object.<String, String>} packages
 */
ControllersAdvisoryDetailAttributes.prototype['packages'] = undefined;

/**
 * @member {String} public_date
 */
ControllersAdvisoryDetailAttributes.prototype['public_date'] = undefined;

/**
 * @member {Array.<String>} references
 */
ControllersAdvisoryDetailAttributes.prototype['references'] = undefined;

/**
 * @member {Number} severity
 */
ControllersAdvisoryDetailAttributes.prototype['severity'] = undefined;

/**
 * @member {String} solution
 */
ControllersAdvisoryDetailAttributes.prototype['solution'] = undefined;

/**
 * @member {String} synopsis
 */
ControllersAdvisoryDetailAttributes.prototype['synopsis'] = undefined;

/**
 * @member {String} topic
 */
ControllersAdvisoryDetailAttributes.prototype['topic'] = undefined;






export default ControllersAdvisoryDetailAttributes;

