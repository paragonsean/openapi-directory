/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ControllersAdvisoriesResponse from '../model/ControllersAdvisoriesResponse';
import ControllersAdvisoriesSystemsResponse from '../model/ControllersAdvisoriesSystemsResponse';
import ControllersAdvisoryDetailResponse from '../model/ControllersAdvisoryDetailResponse';
import ControllersAdvisoryInlineItem from '../model/ControllersAdvisoryInlineItem';
import ControllersAdvisorySystemsResponse from '../model/ControllersAdvisorySystemsResponse';
import ControllersPackageDetailResponse from '../model/ControllersPackageDetailResponse';
import ControllersPackageItem from '../model/ControllersPackageItem';
import ControllersPackageSystemItem from '../model/ControllersPackageSystemItem';
import ControllersPackageSystemsResponse from '../model/ControllersPackageSystemsResponse';
import ControllersPackageVersionsResponse from '../model/ControllersPackageVersionsResponse';
import ControllersPackagesResponse from '../model/ControllersPackagesResponse';
import ControllersSystemAdvisoriesDBLookup from '../model/ControllersSystemAdvisoriesDBLookup';
import ControllersSystemAdvisoriesResponse from '../model/ControllersSystemAdvisoriesResponse';
import ControllersSystemDetailResponse from '../model/ControllersSystemDetailResponse';
import ControllersSystemInlineItem from '../model/ControllersSystemInlineItem';
import ControllersSystemPackageInline from '../model/ControllersSystemPackageInline';
import ControllersSystemPackageResponse from '../model/ControllersSystemPackageResponse';
import ControllersSystemsAdvisoriesRequest from '../model/ControllersSystemsAdvisoriesRequest';
import ControllersSystemsAdvisoriesResponse from '../model/ControllersSystemsAdvisoriesResponse';
import ControllersSystemsResponse from '../model/ControllersSystemsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version v1.15.3
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletesystem operation.
     * @callback module:api/DefaultApi~deletesystemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete system by inventory id
     * Delete system by inventory id
     * @param {String} inventoryId Inventory ID
     * @param {module:api/DefaultApi~deletesystemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletesystem(inventoryId, callback) {
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling deletesystem");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/patch/v1/systems/{inventory_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detailAdvisory operation.
     * @callback module:api/DefaultApi~detailAdvisoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersAdvisoryDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me details an advisory by given advisory name
     * Show me details an advisory by given advisory name
     * @param {String} advisoryId Advisory ID
     * @param {module:api/DefaultApi~detailAdvisoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersAdvisoryDetailResponse}
     */
    detailAdvisory(advisoryId, callback) {
      let postBody = null;
      // verify the required parameter 'advisoryId' is set
      if (advisoryId === undefined || advisoryId === null) {
        throw new Error("Missing the required parameter 'advisoryId' when calling detailAdvisory");
      }

      let pathParams = {
        'advisory_id': advisoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersAdvisoryDetailResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/advisories/{advisory_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detailSystem operation.
     * @callback module:api/DefaultApi~detailSystemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersSystemDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me details about a system by given inventory id
     * Show me details about a system by given inventory id
     * @param {String} inventoryId Inventory ID
     * @param {module:api/DefaultApi~detailSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersSystemDetailResponse}
     */
    detailSystem(inventoryId, callback) {
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling detailSystem");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersSystemDetailResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/systems/{inventory_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportAdvisories operation.
     * @callback module:api/DefaultApi~exportAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersAdvisoryInlineItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param {Object} opts Optional parameters
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterDescription] Filter
     * @param {String} [filterPublicDate] Filter
     * @param {String} [filterSynopsis] Filter
     * @param {String} [filterAdvisoryType] Filter
     * @param {String} [filterSeverity] Filter
     * @param {String} [filterApplicableSystems] Filter
     * @param {module:api/DefaultApi~exportAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersAdvisoryInlineItem>}
     */
    exportAdvisories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[description]': opts['filterDescription'],
        'filter[public_date]': opts['filterPublicDate'],
        'filter[synopsis]': opts['filterSynopsis'],
        'filter[advisory_type]': opts['filterAdvisoryType'],
        'filter[severity]': opts['filterSeverity'],
        'filter[applicable_systems]': opts['filterApplicableSystems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [ControllersAdvisoryInlineItem];
      return this.apiClient.callApi(
        '/api/patch/v1/export/advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportAdvisorySystems operation.
     * @callback module:api/DefaultApi~exportAdvisorySystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersSystemInlineItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export systems for my account
     * Export systems for my account
     * @param {String} advisoryId Advisory ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterDisplayName] Filter
     * @param {String} [filterLastEvaluation] Filter
     * @param {String} [filterLastUpload] Filter
     * @param {String} [filterRhsaCount] Filter
     * @param {String} [filterRhbaCount] Filter
     * @param {String} [filterRheaCount] Filter
     * @param {String} [filterOtherCount] Filter
     * @param {String} [filterStale] Filter
     * @param {String} [filterPackagesInstalled] Filter
     * @param {String} [filterPackagesUpdatable] Filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {Array.<String>} [tags] Tag filter
     * @param {module:api/DefaultApi~exportAdvisorySystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersSystemInlineItem>}
     */
    exportAdvisorySystems(advisoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advisoryId' is set
      if (advisoryId === undefined || advisoryId === null) {
        throw new Error("Missing the required parameter 'advisoryId' when calling exportAdvisorySystems");
      }

      let pathParams = {
        'advisory_id': advisoryId
      };
      let queryParams = {
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[display_name]': opts['filterDisplayName'],
        'filter[last_evaluation]': opts['filterLastEvaluation'],
        'filter[last_upload]': opts['filterLastUpload'],
        'filter[rhsa_count]': opts['filterRhsaCount'],
        'filter[rhba_count]': opts['filterRhbaCount'],
        'filter[rhea_count]': opts['filterRheaCount'],
        'filter[other_count]': opts['filterOtherCount'],
        'filter[stale]': opts['filterStale'],
        'filter[packages_installed]': opts['filterPackagesInstalled'],
        'filter[packages_updatable]': opts['filterPackagesUpdatable'],
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [ControllersSystemInlineItem];
      return this.apiClient.callApi(
        '/api/patch/v1/export/advisories/{advisory_id}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPackageSystems operation.
     * @callback module:api/DefaultApi~exportPackageSystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersPackageSystemItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param {String} packageName Package name
     * @param {Object} opts Optional parameters
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {Array.<String>} [tags] Tag filter
     * @param {module:api/DefaultApi~exportPackageSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersPackageSystemItem>}
     */
    exportPackageSystems(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling exportPackageSystems");
      }

      let pathParams = {
        'package_name': packageName
      };
      let queryParams = {
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ControllersPackageSystemItem];
      return this.apiClient.callApi(
        '/api/patch/v1/export/packages/{package_name}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPackages operation.
     * @callback module:api/DefaultApi~exportPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersPackageItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterName] Filter
     * @param {String} [filterSystemsInstalled] Filter
     * @param {String} [filterSystemsUpdatable] Filter
     * @param {String} [filterSummary] Filter
     * @param {module:api/DefaultApi~exportPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersPackageItem>}
     */
    exportPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[name]': opts['filterName'],
        'filter[systems_installed]': opts['filterSystemsInstalled'],
        'filter[systems_updatable]': opts['filterSystemsUpdatable'],
        'filter[summary]': opts['filterSummary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [ControllersPackageItem];
      return this.apiClient.callApi(
        '/api/patch/v1/export/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSystemAdvisories operation.
     * @callback module:api/DefaultApi~exportSystemAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersSystemAdvisoriesDBLookup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export applicable advisories for all my systems
     * Export applicable advisories for all my systems
     * @param {String} inventoryId Inventory ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterDescription] Filter
     * @param {String} [filterPublicDate] Filter
     * @param {String} [filterSynopsis] Filter
     * @param {String} [filterAdvisoryType] Filter
     * @param {String} [filterSeverity] Filter
     * @param {module:api/DefaultApi~exportSystemAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersSystemAdvisoriesDBLookup>}
     */
    exportSystemAdvisories(inventoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling exportSystemAdvisories");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[description]': opts['filterDescription'],
        'filter[public_date]': opts['filterPublicDate'],
        'filter[synopsis]': opts['filterSynopsis'],
        'filter[advisory_type]': opts['filterAdvisoryType'],
        'filter[severity]': opts['filterSeverity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [ControllersSystemAdvisoriesDBLookup];
      return this.apiClient.callApi(
        '/api/patch/v1/export/systems/{inventory_id}/advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSystemPackages operation.
     * @callback module:api/DefaultApi~exportSystemPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersSystemPackageInline>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param {String} inventoryId Inventory ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Find matching text
     * @param {String} [filterName] Filter
     * @param {String} [filterDescription] Filter
     * @param {String} [filterEvra] Filter
     * @param {String} [filterSummary] Filter
     * @param {Boolean} [filterUpdatable] Filter
     * @param {module:api/DefaultApi~exportSystemPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersSystemPackageInline>}
     */
    exportSystemPackages(inventoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling exportSystemPackages");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
        'search': opts['search'],
        'filter[name]': opts['filterName'],
        'filter[description]': opts['filterDescription'],
        'filter[evra]': opts['filterEvra'],
        'filter[summary]': opts['filterSummary'],
        'filter[updatable]': opts['filterUpdatable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ControllersSystemPackageInline];
      return this.apiClient.callApi(
        '/api/patch/v1/export/systems/{inventory_id}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSystems operation.
     * @callback module:api/DefaultApi~exportSystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ControllersSystemInlineItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export systems for my account
     * Export systems for my account
     * @param {Object} opts Optional parameters
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterDisplayName] Filter
     * @param {String} [filterLastEvaluation] Filter
     * @param {String} [filterLastUpload] Filter
     * @param {String} [filterRhsaCount] Filter
     * @param {String} [filterRhbaCount] Filter
     * @param {String} [filterRheaCount] Filter
     * @param {String} [filterOtherCount] Filter
     * @param {String} [filterStale] Filter
     * @param {String} [filterPackagesInstalled] Filter
     * @param {String} [filterPackagesUpdatable] Filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {Array.<String>} [tags] Tag filter
     * @param {module:api/DefaultApi~exportSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ControllersSystemInlineItem>}
     */
    exportSystems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[display_name]': opts['filterDisplayName'],
        'filter[last_evaluation]': opts['filterLastEvaluation'],
        'filter[last_upload]': opts['filterLastUpload'],
        'filter[rhsa_count]': opts['filterRhsaCount'],
        'filter[rhba_count]': opts['filterRhbaCount'],
        'filter[rhea_count]': opts['filterRheaCount'],
        'filter[other_count]': opts['filterOtherCount'],
        'filter[stale]': opts['filterStale'],
        'filter[packages_installed]': opts['filterPackagesInstalled'],
        'filter[packages_updatable]': opts['filterPackagesUpdatable'],
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [ControllersSystemInlineItem];
      return this.apiClient.callApi(
        '/api/patch/v1/export/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the latestPackage operation.
     * @callback module:api/DefaultApi~latestPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersPackageDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me metadata of selected package
     * Show me metadata of selected package
     * @param {String} packageName package_name - latest, nevra - exact version
     * @param {module:api/DefaultApi~latestPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersPackageDetailResponse}
     */
    latestPackage(packageName, callback) {
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling latestPackage");
      }

      let pathParams = {
        'package_name': packageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersPackageDetailResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/packages/{package_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAdvisories operation.
     * @callback module:api/DefaultApi~listAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersAdvisoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all applicable advisories for all my systems
     * Show me all applicable advisories for all my systems
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter 
     * @param {String} [filterDescription] Filter
     * @param {String} [filterPublicDate] Filter
     * @param {String} [filterSynopsis] Filter
     * @param {String} [filterAdvisoryType] Filter
     * @param {String} [filterSeverity] Filter
     * @param {String} [filterApplicableSystems] Filter
     * @param {Array.<String>} [tags] Tag filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {module:api/DefaultApi~listAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersAdvisoriesResponse}
     */
    listAdvisories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[description]': opts['filterDescription'],
        'filter[public_date]': opts['filterPublicDate'],
        'filter[synopsis]': opts['filterSynopsis'],
        'filter[advisory_type]': opts['filterAdvisoryType'],
        'filter[severity]': opts['filterSeverity'],
        'filter[applicable_systems]': opts['filterApplicableSystems'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersAdvisoriesResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAdvisorySystems operation.
     * @callback module:api/DefaultApi~listAdvisorySystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersAdvisorySystemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me systems on which the given advisory is applicable
     * Show me systems on which the given advisory is applicable
     * @param {String} advisoryId Advisory ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterInsightsId] Filter
     * @param {String} [filterDisplayName] Filter
     * @param {String} [filterLastEvaluation] Filter
     * @param {String} [filterLastUpload] Filter
     * @param {String} [filterRhsaCount] Filter
     * @param {String} [filterRhbaCount] Filter
     * @param {String} [filterRheaCount] Filter
     * @param {String} [filterOtherCount] Filter
     * @param {String} [filterStale] Filter
     * @param {String} [filterStaleTimestamp] Filter
     * @param {String} [filterStaleWarningTimestamp] Filter
     * @param {String} [filterCulledTimestamp] Filter
     * @param {String} [filterCreated] Filter
     * @param {Array.<String>} [tags] Tag filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {module:api/DefaultApi~listAdvisorySystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersAdvisorySystemsResponse}
     */
    listAdvisorySystems(advisoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advisoryId' is set
      if (advisoryId === undefined || advisoryId === null) {
        throw new Error("Missing the required parameter 'advisoryId' when calling listAdvisorySystems");
      }

      let pathParams = {
        'advisory_id': advisoryId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[insights_id]': opts['filterInsightsId'],
        'filter[display_name]': opts['filterDisplayName'],
        'filter[last_evaluation]': opts['filterLastEvaluation'],
        'filter[last_upload]': opts['filterLastUpload'],
        'filter[rhsa_count]': opts['filterRhsaCount'],
        'filter[rhba_count]': opts['filterRhbaCount'],
        'filter[rhea_count]': opts['filterRheaCount'],
        'filter[other_count]': opts['filterOtherCount'],
        'filter[stale]': opts['filterStale'],
        'filter[stale_timestamp]': opts['filterStaleTimestamp'],
        'filter[stale_warning_timestamp]': opts['filterStaleWarningTimestamp'],
        'filter[culled_timestamp]': opts['filterCulledTimestamp'],
        'filter[created]': opts['filterCreated'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersAdvisorySystemsResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/advisories/{advisory_id}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackages operation.
     * @callback module:api/DefaultApi~listPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersPackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all installed packages across my systems
     * Show me all installed packages across my systems
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterName] Filter
     * @param {String} [filterSystemsInstalled] Filter
     * @param {String} [filterSystemsUpdatable] Filter
     * @param {String} [filterSummary] Filter
     * @param {Array.<String>} [tags] Tag filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {module:api/DefaultApi~listPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersPackagesResponse}
     */
    listPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[name]': opts['filterName'],
        'filter[systems_installed]': opts['filterSystemsInstalled'],
        'filter[systems_updatable]': opts['filterSystemsUpdatable'],
        'filter[summary]': opts['filterSummary'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersPackagesResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/packages/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSystemAdvisories operation.
     * @callback module:api/DefaultApi~listSystemAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersSystemAdvisoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me advisories for a system by given inventory id
     * Show me advisories for a system by given inventory id
     * @param {String} inventoryId Inventory ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterId] Filter
     * @param {String} [filterDescription] Filter
     * @param {String} [filterPublicDate] Filter
     * @param {String} [filterSynopsis] Filter
     * @param {String} [filterAdvisoryType] Filter
     * @param {String} [filterSeverity] Filter
     * @param {module:api/DefaultApi~listSystemAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersSystemAdvisoriesResponse}
     */
    listSystemAdvisories(inventoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling listSystemAdvisories");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[id]': opts['filterId'],
        'filter[description]': opts['filterDescription'],
        'filter[public_date]': opts['filterPublicDate'],
        'filter[synopsis]': opts['filterSynopsis'],
        'filter[advisory_type]': opts['filterAdvisoryType'],
        'filter[severity]': opts['filterSeverity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersSystemAdvisoriesResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/systems/{inventory_id}/advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSystems operation.
     * @callback module:api/DefaultApi~listSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersSystemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all my systems
     * Show me all my systems
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:model/String} [sort] Sort field
     * @param {String} [search] Find matching text
     * @param {String} [filterInsightsId] Filter
     * @param {String} [filterId] Filter
     * @param {String} [filterDisplayName] Filter
     * @param {String} [filterLastEvaluation] Filter
     * @param {String} [filterLastUpload] Filter
     * @param {String} [filterRhsaCount] Filter
     * @param {String} [filterRhbaCount] Filter
     * @param {String} [filterRheaCount] Filter
     * @param {String} [filterOtherCount] Filter
     * @param {String} [filterStale] Filter
     * @param {String} [filterPackagesInstalled] Filter
     * @param {String} [filterPackagesUpdatable] Filter
     * @param {String} [filterStaleTimestamp] Filter
     * @param {String} [filterStaleWarningTimestamp] Filter
     * @param {String} [filterCulledTimestamp] Filter
     * @param {String} [filterCreated] Filter
     * @param {Array.<String>} [tags] Tag filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {module:api/DefaultApi~listSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersSystemsResponse}
     */
    listSystems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'search': opts['search'],
        'filter[insights_id]': opts['filterInsightsId'],
        'filter[id]': opts['filterId'],
        'filter[display_name]': opts['filterDisplayName'],
        'filter[last_evaluation]': opts['filterLastEvaluation'],
        'filter[last_upload]': opts['filterLastUpload'],
        'filter[rhsa_count]': opts['filterRhsaCount'],
        'filter[rhba_count]': opts['filterRhbaCount'],
        'filter[rhea_count]': opts['filterRheaCount'],
        'filter[other_count]': opts['filterOtherCount'],
        'filter[stale]': opts['filterStale'],
        'filter[packages_installed]': opts['filterPackagesInstalled'],
        'filter[packages_updatable]': opts['filterPackagesUpdatable'],
        'filter[stale_timestamp]': opts['filterStaleTimestamp'],
        'filter[stale_warning_timestamp]': opts['filterStaleWarningTimestamp'],
        'filter[culled_timestamp]': opts['filterCulledTimestamp'],
        'filter[created]': opts['filterCreated'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersSystemsResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSystems operation.
     * @callback module:api/DefaultApi~packageSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersPackageSystemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all my systems which have a package installed
     * Show me all my systems which have a package installed
     * @param {String} packageName Package name
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {Array.<String>} [tags] Tag filter
     * @param {String} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array.<String>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {module:api/DefaultApi~packageSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersPackageSystemsResponse}
     */
    packageSystems(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling packageSystems");
      }

      let pathParams = {
        'package_name': packageName
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'filter[system_profile][sap_system]': opts['filterSystemProfileSapSystem'],
        'filter[system_profile][sap_sids][in]': this.apiClient.buildCollectionParam(opts['filterSystemProfileSapSidsIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersPackageSystemsResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/packages/{package_name}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageVersions operation.
     * @callback module:api/DefaultApi~packageVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersPackageVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me all package versions installed on some system
     * Show me all package versions installed on some system
     * @param {String} packageName Package name
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {module:api/DefaultApi~packageVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersPackageVersionsResponse}
     */
    packageVersions(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling packageVersions");
      }

      let pathParams = {
        'package_name': packageName
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersPackageVersionsResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/packages/{package_name}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the systemPackages operation.
     * @callback module:api/DefaultApi~systemPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersSystemPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show me details about a system packages by given inventory id
     * Show me details about a system packages by given inventory id
     * @param {String} inventoryId Inventory ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit for paging, set -1 to return all
     * @param {Number} [offset] Offset for paging
     * @param {String} [search] Find matching text
     * @param {String} [filterName] Filter
     * @param {String} [filterDescription] Filter
     * @param {String} [filterEvra] Filter
     * @param {String} [filterSummary] Filter
     * @param {Boolean} [filterUpdatable] Filter
     * @param {module:api/DefaultApi~systemPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersSystemPackageResponse}
     */
    systemPackages(inventoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling systemPackages");
      }

      let pathParams = {
        'inventory_id': inventoryId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': opts['search'],
        'filter[name]': opts['filterName'],
        'filter[description]': opts['filterDescription'],
        'filter[evra]': opts['filterEvra'],
        'filter[summary]': opts['filterSummary'],
        'filter[updatable]': opts['filterUpdatable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllersSystemPackageResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/systems/{inventory_id}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewAdvisoriesSystems operation.
     * @callback module:api/DefaultApi~viewAdvisoriesSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersAdvisoriesSystemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View advisory-system pairs for selected systems and advisories
     * View advisory-system pairs for selected systems and advisories
     * @param {module:model/ControllersSystemsAdvisoriesRequest} body Request body
     * @param {module:api/DefaultApi~viewAdvisoriesSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersAdvisoriesSystemsResponse}
     */
    viewAdvisoriesSystems(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling viewAdvisoriesSystems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ControllersAdvisoriesSystemsResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/views/advisories/systems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewSystemsAdvisories operation.
     * @callback module:api/DefaultApi~viewSystemsAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllersSystemsAdvisoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View system-advisory pairs for selected systems and advisories
     * View system-advisory pairs for selected systems and advisories
     * @param {module:model/ControllersSystemsAdvisoriesRequest} body Request body
     * @param {module:api/DefaultApi~viewSystemsAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllersSystemsAdvisoriesResponse}
     */
    viewSystemsAdvisories(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling viewSystemsAdvisories");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RhIdentity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ControllersSystemsAdvisoriesResponse;
      return this.apiClient.callApi(
        '/api/patch/v1/views/systems/advisories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
