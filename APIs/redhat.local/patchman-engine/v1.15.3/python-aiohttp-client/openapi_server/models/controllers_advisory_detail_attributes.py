# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ControllersAdvisoryDetailAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cves: List[str]=None, description: str=None, fixes: str=None, modified_date: str=None, packages: Dict[str, str]=None, public_date: str=None, references: List[str]=None, severity: int=None, solution: str=None, synopsis: str=None, topic: str=None):
        """ControllersAdvisoryDetailAttributes - a model defined in OpenAPI

        :param cves: The cves of this ControllersAdvisoryDetailAttributes.
        :param description: The description of this ControllersAdvisoryDetailAttributes.
        :param fixes: The fixes of this ControllersAdvisoryDetailAttributes.
        :param modified_date: The modified_date of this ControllersAdvisoryDetailAttributes.
        :param packages: The packages of this ControllersAdvisoryDetailAttributes.
        :param public_date: The public_date of this ControllersAdvisoryDetailAttributes.
        :param references: The references of this ControllersAdvisoryDetailAttributes.
        :param severity: The severity of this ControllersAdvisoryDetailAttributes.
        :param solution: The solution of this ControllersAdvisoryDetailAttributes.
        :param synopsis: The synopsis of this ControllersAdvisoryDetailAttributes.
        :param topic: The topic of this ControllersAdvisoryDetailAttributes.
        """
        self.openapi_types = {
            'cves': List[str],
            'description': str,
            'fixes': str,
            'modified_date': str,
            'packages': Dict[str, str],
            'public_date': str,
            'references': List[str],
            'severity': int,
            'solution': str,
            'synopsis': str,
            'topic': str
        }

        self.attribute_map = {
            'cves': 'cves',
            'description': 'description',
            'fixes': 'fixes',
            'modified_date': 'modified_date',
            'packages': 'packages',
            'public_date': 'public_date',
            'references': 'references',
            'severity': 'severity',
            'solution': 'solution',
            'synopsis': 'synopsis',
            'topic': 'topic'
        }

        self._cves = cves
        self._description = description
        self._fixes = fixes
        self._modified_date = modified_date
        self._packages = packages
        self._public_date = public_date
        self._references = references
        self._severity = severity
        self._solution = solution
        self._synopsis = synopsis
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControllersAdvisoryDetailAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The controllers.AdvisoryDetailAttributes of this ControllersAdvisoryDetailAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cves(self):
        """Gets the cves of this ControllersAdvisoryDetailAttributes.


        :return: The cves of this ControllersAdvisoryDetailAttributes.
        :rtype: List[str]
        """
        return self._cves

    @cves.setter
    def cves(self, cves):
        """Sets the cves of this ControllersAdvisoryDetailAttributes.


        :param cves: The cves of this ControllersAdvisoryDetailAttributes.
        :type cves: List[str]
        """

        self._cves = cves

    @property
    def description(self):
        """Gets the description of this ControllersAdvisoryDetailAttributes.


        :return: The description of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ControllersAdvisoryDetailAttributes.


        :param description: The description of this ControllersAdvisoryDetailAttributes.
        :type description: str
        """

        self._description = description

    @property
    def fixes(self):
        """Gets the fixes of this ControllersAdvisoryDetailAttributes.


        :return: The fixes of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._fixes

    @fixes.setter
    def fixes(self, fixes):
        """Sets the fixes of this ControllersAdvisoryDetailAttributes.


        :param fixes: The fixes of this ControllersAdvisoryDetailAttributes.
        :type fixes: str
        """

        self._fixes = fixes

    @property
    def modified_date(self):
        """Gets the modified_date of this ControllersAdvisoryDetailAttributes.


        :return: The modified_date of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ControllersAdvisoryDetailAttributes.


        :param modified_date: The modified_date of this ControllersAdvisoryDetailAttributes.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def packages(self):
        """Gets the packages of this ControllersAdvisoryDetailAttributes.


        :return: The packages of this ControllersAdvisoryDetailAttributes.
        :rtype: Dict[str, str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ControllersAdvisoryDetailAttributes.


        :param packages: The packages of this ControllersAdvisoryDetailAttributes.
        :type packages: Dict[str, str]
        """

        self._packages = packages

    @property
    def public_date(self):
        """Gets the public_date of this ControllersAdvisoryDetailAttributes.


        :return: The public_date of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._public_date

    @public_date.setter
    def public_date(self, public_date):
        """Sets the public_date of this ControllersAdvisoryDetailAttributes.


        :param public_date: The public_date of this ControllersAdvisoryDetailAttributes.
        :type public_date: str
        """

        self._public_date = public_date

    @property
    def references(self):
        """Gets the references of this ControllersAdvisoryDetailAttributes.


        :return: The references of this ControllersAdvisoryDetailAttributes.
        :rtype: List[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ControllersAdvisoryDetailAttributes.


        :param references: The references of this ControllersAdvisoryDetailAttributes.
        :type references: List[str]
        """

        self._references = references

    @property
    def severity(self):
        """Gets the severity of this ControllersAdvisoryDetailAttributes.


        :return: The severity of this ControllersAdvisoryDetailAttributes.
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ControllersAdvisoryDetailAttributes.


        :param severity: The severity of this ControllersAdvisoryDetailAttributes.
        :type severity: int
        """

        self._severity = severity

    @property
    def solution(self):
        """Gets the solution of this ControllersAdvisoryDetailAttributes.


        :return: The solution of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this ControllersAdvisoryDetailAttributes.


        :param solution: The solution of this ControllersAdvisoryDetailAttributes.
        :type solution: str
        """

        self._solution = solution

    @property
    def synopsis(self):
        """Gets the synopsis of this ControllersAdvisoryDetailAttributes.


        :return: The synopsis of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._synopsis

    @synopsis.setter
    def synopsis(self, synopsis):
        """Sets the synopsis of this ControllersAdvisoryDetailAttributes.


        :param synopsis: The synopsis of this ControllersAdvisoryDetailAttributes.
        :type synopsis: str
        """

        self._synopsis = synopsis

    @property
    def topic(self):
        """Gets the topic of this ControllersAdvisoryDetailAttributes.


        :return: The topic of this ControllersAdvisoryDetailAttributes.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ControllersAdvisoryDetailAttributes.


        :param topic: The topic of this ControllersAdvisoryDetailAttributes.
        :type topic: str
        """

        self._topic = topic
