# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.controllers_filter_data import ControllersFilterData
from openapi_server import util


class ControllersListMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Dict[str, ControllersFilterData]=None, limit: int=None, offset: int=None, search: str=None, sort: List[str]=None, subtotals: Dict[str, int]=None, total_items: int=None):
        """ControllersListMeta - a model defined in OpenAPI

        :param filter: The filter of this ControllersListMeta.
        :param limit: The limit of this ControllersListMeta.
        :param offset: The offset of this ControllersListMeta.
        :param search: The search of this ControllersListMeta.
        :param sort: The sort of this ControllersListMeta.
        :param subtotals: The subtotals of this ControllersListMeta.
        :param total_items: The total_items of this ControllersListMeta.
        """
        self.openapi_types = {
            'filter': Dict[str, ControllersFilterData],
            'limit': int,
            'offset': int,
            'search': str,
            'sort': List[str],
            'subtotals': Dict[str, int],
            'total_items': int
        }

        self.attribute_map = {
            'filter': 'filter',
            'limit': 'limit',
            'offset': 'offset',
            'search': 'search',
            'sort': 'sort',
            'subtotals': 'subtotals',
            'total_items': 'total_items'
        }

        self._filter = filter
        self._limit = limit
        self._offset = offset
        self._search = search
        self._sort = sort
        self._subtotals = subtotals
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControllersListMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The controllers.ListMeta of this ControllersListMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this ControllersListMeta.


        :return: The filter of this ControllersListMeta.
        :rtype: Dict[str, ControllersFilterData]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ControllersListMeta.


        :param filter: The filter of this ControllersListMeta.
        :type filter: Dict[str, ControllersFilterData]
        """

        self._filter = filter

    @property
    def limit(self):
        """Gets the limit of this ControllersListMeta.


        :return: The limit of this ControllersListMeta.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ControllersListMeta.


        :param limit: The limit of this ControllersListMeta.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ControllersListMeta.


        :return: The offset of this ControllersListMeta.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ControllersListMeta.


        :param offset: The offset of this ControllersListMeta.
        :type offset: int
        """

        self._offset = offset

    @property
    def search(self):
        """Gets the search of this ControllersListMeta.


        :return: The search of this ControllersListMeta.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this ControllersListMeta.


        :param search: The search of this ControllersListMeta.
        :type search: str
        """

        self._search = search

    @property
    def sort(self):
        """Gets the sort of this ControllersListMeta.


        :return: The sort of this ControllersListMeta.
        :rtype: List[str]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ControllersListMeta.


        :param sort: The sort of this ControllersListMeta.
        :type sort: List[str]
        """

        self._sort = sort

    @property
    def subtotals(self):
        """Gets the subtotals of this ControllersListMeta.


        :return: The subtotals of this ControllersListMeta.
        :rtype: Dict[str, int]
        """
        return self._subtotals

    @subtotals.setter
    def subtotals(self, subtotals):
        """Sets the subtotals of this ControllersListMeta.


        :param subtotals: The subtotals of this ControllersListMeta.
        :type subtotals: Dict[str, int]
        """

        self._subtotals = subtotals

    @property
    def total_items(self):
        """Gets the total_items of this ControllersListMeta.


        :return: The total_items of this ControllersListMeta.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this ControllersListMeta.


        :param total_items: The total_items of this ControllersListMeta.
        :type total_items: int
        """

        self._total_items = total_items
