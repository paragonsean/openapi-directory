/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_SystemInlineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_SystemInlineItem::OAIControllers_SystemInlineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_SystemInlineItem::OAIControllers_SystemInlineItem() {
    this->initializeModel();
}

OAIControllers_SystemInlineItem::~OAIControllers_SystemInlineItem() {}

void OAIControllers_SystemInlineItem::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_culled_timestamp_isSet = false;
    m_culled_timestamp_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insights_id_isSet = false;
    m_insights_id_isValid = false;

    m_last_evaluation_isSet = false;
    m_last_evaluation_isValid = false;

    m_last_upload_isSet = false;
    m_last_upload_isValid = false;

    m_os_major_isSet = false;
    m_os_major_isValid = false;

    m_os_minor_isSet = false;
    m_os_minor_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_other_count_isSet = false;
    m_other_count_isValid = false;

    m_packages_installed_isSet = false;
    m_packages_installed_isValid = false;

    m_packages_updatable_isSet = false;
    m_packages_updatable_isValid = false;

    m_rhba_count_isSet = false;
    m_rhba_count_isValid = false;

    m_rhea_count_isSet = false;
    m_rhea_count_isValid = false;

    m_rhsa_count_isSet = false;
    m_rhsa_count_isValid = false;

    m_rhsm_isSet = false;
    m_rhsm_isValid = false;

    m_stale_isSet = false;
    m_stale_isValid = false;

    m_stale_timestamp_isSet = false;
    m_stale_timestamp_isValid = false;

    m_stale_warning_timestamp_isSet = false;
    m_stale_warning_timestamp_isValid = false;

    m_third_party_isSet = false;
    m_third_party_isValid = false;
}

void OAIControllers_SystemInlineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_SystemInlineItem::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_culled_timestamp_isValid = ::OpenAPI::fromJsonValue(m_culled_timestamp, json[QString("culled_timestamp")]);
    m_culled_timestamp_isSet = !json[QString("culled_timestamp")].isNull() && m_culled_timestamp_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insights_id_isValid = ::OpenAPI::fromJsonValue(m_insights_id, json[QString("insights_id")]);
    m_insights_id_isSet = !json[QString("insights_id")].isNull() && m_insights_id_isValid;

    m_last_evaluation_isValid = ::OpenAPI::fromJsonValue(m_last_evaluation, json[QString("last_evaluation")]);
    m_last_evaluation_isSet = !json[QString("last_evaluation")].isNull() && m_last_evaluation_isValid;

    m_last_upload_isValid = ::OpenAPI::fromJsonValue(m_last_upload, json[QString("last_upload")]);
    m_last_upload_isSet = !json[QString("last_upload")].isNull() && m_last_upload_isValid;

    m_os_major_isValid = ::OpenAPI::fromJsonValue(m_os_major, json[QString("os_major")]);
    m_os_major_isSet = !json[QString("os_major")].isNull() && m_os_major_isValid;

    m_os_minor_isValid = ::OpenAPI::fromJsonValue(m_os_minor, json[QString("os_minor")]);
    m_os_minor_isSet = !json[QString("os_minor")].isNull() && m_os_minor_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("os_name")]);
    m_os_name_isSet = !json[QString("os_name")].isNull() && m_os_name_isValid;

    m_other_count_isValid = ::OpenAPI::fromJsonValue(m_other_count, json[QString("other_count")]);
    m_other_count_isSet = !json[QString("other_count")].isNull() && m_other_count_isValid;

    m_packages_installed_isValid = ::OpenAPI::fromJsonValue(m_packages_installed, json[QString("packages_installed")]);
    m_packages_installed_isSet = !json[QString("packages_installed")].isNull() && m_packages_installed_isValid;

    m_packages_updatable_isValid = ::OpenAPI::fromJsonValue(m_packages_updatable, json[QString("packages_updatable")]);
    m_packages_updatable_isSet = !json[QString("packages_updatable")].isNull() && m_packages_updatable_isValid;

    m_rhba_count_isValid = ::OpenAPI::fromJsonValue(m_rhba_count, json[QString("rhba_count")]);
    m_rhba_count_isSet = !json[QString("rhba_count")].isNull() && m_rhba_count_isValid;

    m_rhea_count_isValid = ::OpenAPI::fromJsonValue(m_rhea_count, json[QString("rhea_count")]);
    m_rhea_count_isSet = !json[QString("rhea_count")].isNull() && m_rhea_count_isValid;

    m_rhsa_count_isValid = ::OpenAPI::fromJsonValue(m_rhsa_count, json[QString("rhsa_count")]);
    m_rhsa_count_isSet = !json[QString("rhsa_count")].isNull() && m_rhsa_count_isValid;

    m_rhsm_isValid = ::OpenAPI::fromJsonValue(m_rhsm, json[QString("rhsm")]);
    m_rhsm_isSet = !json[QString("rhsm")].isNull() && m_rhsm_isValid;

    m_stale_isValid = ::OpenAPI::fromJsonValue(m_stale, json[QString("stale")]);
    m_stale_isSet = !json[QString("stale")].isNull() && m_stale_isValid;

    m_stale_timestamp_isValid = ::OpenAPI::fromJsonValue(m_stale_timestamp, json[QString("stale_timestamp")]);
    m_stale_timestamp_isSet = !json[QString("stale_timestamp")].isNull() && m_stale_timestamp_isValid;

    m_stale_warning_timestamp_isValid = ::OpenAPI::fromJsonValue(m_stale_warning_timestamp, json[QString("stale_warning_timestamp")]);
    m_stale_warning_timestamp_isSet = !json[QString("stale_warning_timestamp")].isNull() && m_stale_warning_timestamp_isValid;

    m_third_party_isValid = ::OpenAPI::fromJsonValue(m_third_party, json[QString("third_party")]);
    m_third_party_isSet = !json[QString("third_party")].isNull() && m_third_party_isValid;
}

QString OAIControllers_SystemInlineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_SystemInlineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_culled_timestamp_isSet) {
        obj.insert(QString("culled_timestamp"), ::OpenAPI::toJsonValue(m_culled_timestamp));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insights_id_isSet) {
        obj.insert(QString("insights_id"), ::OpenAPI::toJsonValue(m_insights_id));
    }
    if (m_last_evaluation_isSet) {
        obj.insert(QString("last_evaluation"), ::OpenAPI::toJsonValue(m_last_evaluation));
    }
    if (m_last_upload_isSet) {
        obj.insert(QString("last_upload"), ::OpenAPI::toJsonValue(m_last_upload));
    }
    if (m_os_major_isSet) {
        obj.insert(QString("os_major"), ::OpenAPI::toJsonValue(m_os_major));
    }
    if (m_os_minor_isSet) {
        obj.insert(QString("os_minor"), ::OpenAPI::toJsonValue(m_os_minor));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("os_name"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_other_count_isSet) {
        obj.insert(QString("other_count"), ::OpenAPI::toJsonValue(m_other_count));
    }
    if (m_packages_installed_isSet) {
        obj.insert(QString("packages_installed"), ::OpenAPI::toJsonValue(m_packages_installed));
    }
    if (m_packages_updatable_isSet) {
        obj.insert(QString("packages_updatable"), ::OpenAPI::toJsonValue(m_packages_updatable));
    }
    if (m_rhba_count_isSet) {
        obj.insert(QString("rhba_count"), ::OpenAPI::toJsonValue(m_rhba_count));
    }
    if (m_rhea_count_isSet) {
        obj.insert(QString("rhea_count"), ::OpenAPI::toJsonValue(m_rhea_count));
    }
    if (m_rhsa_count_isSet) {
        obj.insert(QString("rhsa_count"), ::OpenAPI::toJsonValue(m_rhsa_count));
    }
    if (m_rhsm_isSet) {
        obj.insert(QString("rhsm"), ::OpenAPI::toJsonValue(m_rhsm));
    }
    if (m_stale_isSet) {
        obj.insert(QString("stale"), ::OpenAPI::toJsonValue(m_stale));
    }
    if (m_stale_timestamp_isSet) {
        obj.insert(QString("stale_timestamp"), ::OpenAPI::toJsonValue(m_stale_timestamp));
    }
    if (m_stale_warning_timestamp_isSet) {
        obj.insert(QString("stale_warning_timestamp"), ::OpenAPI::toJsonValue(m_stale_warning_timestamp));
    }
    if (m_third_party_isSet) {
        obj.insert(QString("third_party"), ::OpenAPI::toJsonValue(m_third_party));
    }
    return obj;
}

QString OAIControllers_SystemInlineItem::getCreated() const {
    return m_created;
}
void OAIControllers_SystemInlineItem::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_created_Set() const{
    return m_created_isSet;
}

bool OAIControllers_SystemInlineItem::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIControllers_SystemInlineItem::getCulledTimestamp() const {
    return m_culled_timestamp;
}
void OAIControllers_SystemInlineItem::setCulledTimestamp(const QString &culled_timestamp) {
    m_culled_timestamp = culled_timestamp;
    m_culled_timestamp_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_culled_timestamp_Set() const{
    return m_culled_timestamp_isSet;
}

bool OAIControllers_SystemInlineItem::is_culled_timestamp_Valid() const{
    return m_culled_timestamp_isValid;
}

QString OAIControllers_SystemInlineItem::getDisplayName() const {
    return m_display_name;
}
void OAIControllers_SystemInlineItem::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIControllers_SystemInlineItem::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIControllers_SystemInlineItem::getId() const {
    return m_id;
}
void OAIControllers_SystemInlineItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIControllers_SystemInlineItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIControllers_SystemInlineItem::getInsightsId() const {
    return m_insights_id;
}
void OAIControllers_SystemInlineItem::setInsightsId(const QString &insights_id) {
    m_insights_id = insights_id;
    m_insights_id_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_insights_id_Set() const{
    return m_insights_id_isSet;
}

bool OAIControllers_SystemInlineItem::is_insights_id_Valid() const{
    return m_insights_id_isValid;
}

QString OAIControllers_SystemInlineItem::getLastEvaluation() const {
    return m_last_evaluation;
}
void OAIControllers_SystemInlineItem::setLastEvaluation(const QString &last_evaluation) {
    m_last_evaluation = last_evaluation;
    m_last_evaluation_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_last_evaluation_Set() const{
    return m_last_evaluation_isSet;
}

bool OAIControllers_SystemInlineItem::is_last_evaluation_Valid() const{
    return m_last_evaluation_isValid;
}

QString OAIControllers_SystemInlineItem::getLastUpload() const {
    return m_last_upload;
}
void OAIControllers_SystemInlineItem::setLastUpload(const QString &last_upload) {
    m_last_upload = last_upload;
    m_last_upload_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_last_upload_Set() const{
    return m_last_upload_isSet;
}

bool OAIControllers_SystemInlineItem::is_last_upload_Valid() const{
    return m_last_upload_isValid;
}

QString OAIControllers_SystemInlineItem::getOsMajor() const {
    return m_os_major;
}
void OAIControllers_SystemInlineItem::setOsMajor(const QString &os_major) {
    m_os_major = os_major;
    m_os_major_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_os_major_Set() const{
    return m_os_major_isSet;
}

bool OAIControllers_SystemInlineItem::is_os_major_Valid() const{
    return m_os_major_isValid;
}

QString OAIControllers_SystemInlineItem::getOsMinor() const {
    return m_os_minor;
}
void OAIControllers_SystemInlineItem::setOsMinor(const QString &os_minor) {
    m_os_minor = os_minor;
    m_os_minor_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_os_minor_Set() const{
    return m_os_minor_isSet;
}

bool OAIControllers_SystemInlineItem::is_os_minor_Valid() const{
    return m_os_minor_isValid;
}

QString OAIControllers_SystemInlineItem::getOsName() const {
    return m_os_name;
}
void OAIControllers_SystemInlineItem::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIControllers_SystemInlineItem::is_os_name_Valid() const{
    return m_os_name_isValid;
}

qint32 OAIControllers_SystemInlineItem::getOtherCount() const {
    return m_other_count;
}
void OAIControllers_SystemInlineItem::setOtherCount(const qint32 &other_count) {
    m_other_count = other_count;
    m_other_count_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_other_count_Set() const{
    return m_other_count_isSet;
}

bool OAIControllers_SystemInlineItem::is_other_count_Valid() const{
    return m_other_count_isValid;
}

qint32 OAIControllers_SystemInlineItem::getPackagesInstalled() const {
    return m_packages_installed;
}
void OAIControllers_SystemInlineItem::setPackagesInstalled(const qint32 &packages_installed) {
    m_packages_installed = packages_installed;
    m_packages_installed_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_packages_installed_Set() const{
    return m_packages_installed_isSet;
}

bool OAIControllers_SystemInlineItem::is_packages_installed_Valid() const{
    return m_packages_installed_isValid;
}

qint32 OAIControllers_SystemInlineItem::getPackagesUpdatable() const {
    return m_packages_updatable;
}
void OAIControllers_SystemInlineItem::setPackagesUpdatable(const qint32 &packages_updatable) {
    m_packages_updatable = packages_updatable;
    m_packages_updatable_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_packages_updatable_Set() const{
    return m_packages_updatable_isSet;
}

bool OAIControllers_SystemInlineItem::is_packages_updatable_Valid() const{
    return m_packages_updatable_isValid;
}

qint32 OAIControllers_SystemInlineItem::getRhbaCount() const {
    return m_rhba_count;
}
void OAIControllers_SystemInlineItem::setRhbaCount(const qint32 &rhba_count) {
    m_rhba_count = rhba_count;
    m_rhba_count_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_rhba_count_Set() const{
    return m_rhba_count_isSet;
}

bool OAIControllers_SystemInlineItem::is_rhba_count_Valid() const{
    return m_rhba_count_isValid;
}

qint32 OAIControllers_SystemInlineItem::getRheaCount() const {
    return m_rhea_count;
}
void OAIControllers_SystemInlineItem::setRheaCount(const qint32 &rhea_count) {
    m_rhea_count = rhea_count;
    m_rhea_count_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_rhea_count_Set() const{
    return m_rhea_count_isSet;
}

bool OAIControllers_SystemInlineItem::is_rhea_count_Valid() const{
    return m_rhea_count_isValid;
}

qint32 OAIControllers_SystemInlineItem::getRhsaCount() const {
    return m_rhsa_count;
}
void OAIControllers_SystemInlineItem::setRhsaCount(const qint32 &rhsa_count) {
    m_rhsa_count = rhsa_count;
    m_rhsa_count_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_rhsa_count_Set() const{
    return m_rhsa_count_isSet;
}

bool OAIControllers_SystemInlineItem::is_rhsa_count_Valid() const{
    return m_rhsa_count_isValid;
}

QString OAIControllers_SystemInlineItem::getRhsm() const {
    return m_rhsm;
}
void OAIControllers_SystemInlineItem::setRhsm(const QString &rhsm) {
    m_rhsm = rhsm;
    m_rhsm_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_rhsm_Set() const{
    return m_rhsm_isSet;
}

bool OAIControllers_SystemInlineItem::is_rhsm_Valid() const{
    return m_rhsm_isValid;
}

bool OAIControllers_SystemInlineItem::isStale() const {
    return m_stale;
}
void OAIControllers_SystemInlineItem::setStale(const bool &stale) {
    m_stale = stale;
    m_stale_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_stale_Set() const{
    return m_stale_isSet;
}

bool OAIControllers_SystemInlineItem::is_stale_Valid() const{
    return m_stale_isValid;
}

QString OAIControllers_SystemInlineItem::getStaleTimestamp() const {
    return m_stale_timestamp;
}
void OAIControllers_SystemInlineItem::setStaleTimestamp(const QString &stale_timestamp) {
    m_stale_timestamp = stale_timestamp;
    m_stale_timestamp_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_stale_timestamp_Set() const{
    return m_stale_timestamp_isSet;
}

bool OAIControllers_SystemInlineItem::is_stale_timestamp_Valid() const{
    return m_stale_timestamp_isValid;
}

QString OAIControllers_SystemInlineItem::getStaleWarningTimestamp() const {
    return m_stale_warning_timestamp;
}
void OAIControllers_SystemInlineItem::setStaleWarningTimestamp(const QString &stale_warning_timestamp) {
    m_stale_warning_timestamp = stale_warning_timestamp;
    m_stale_warning_timestamp_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_stale_warning_timestamp_Set() const{
    return m_stale_warning_timestamp_isSet;
}

bool OAIControllers_SystemInlineItem::is_stale_warning_timestamp_Valid() const{
    return m_stale_warning_timestamp_isValid;
}

bool OAIControllers_SystemInlineItem::isThirdParty() const {
    return m_third_party;
}
void OAIControllers_SystemInlineItem::setThirdParty(const bool &third_party) {
    m_third_party = third_party;
    m_third_party_isSet = true;
}

bool OAIControllers_SystemInlineItem::is_third_party_Set() const{
    return m_third_party_isSet;
}

bool OAIControllers_SystemInlineItem::is_third_party_Valid() const{
    return m_third_party_isValid;
}

bool OAIControllers_SystemInlineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culled_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insights_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_major_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_minor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_updatable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhba_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhea_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhsa_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rhsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stale_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stale_warning_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_SystemInlineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
