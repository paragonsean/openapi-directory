/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_PackageSystemItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_PackageSystemItem::OAIControllers_PackageSystemItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_PackageSystemItem::OAIControllers_PackageSystemItem() {
    this->initializeModel();
}

OAIControllers_PackageSystemItem::~OAIControllers_PackageSystemItem() {}

void OAIControllers_PackageSystemItem::initializeModel() {

    m_available_evra_isSet = false;
    m_available_evra_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installed_evra_isSet = false;
    m_installed_evra_isValid = false;

    m_updatable_isSet = false;
    m_updatable_isValid = false;
}

void OAIControllers_PackageSystemItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_PackageSystemItem::fromJsonObject(QJsonObject json) {

    m_available_evra_isValid = ::OpenAPI::fromJsonValue(m_available_evra, json[QString("available_evra")]);
    m_available_evra_isSet = !json[QString("available_evra")].isNull() && m_available_evra_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installed_evra_isValid = ::OpenAPI::fromJsonValue(m_installed_evra, json[QString("installed_evra")]);
    m_installed_evra_isSet = !json[QString("installed_evra")].isNull() && m_installed_evra_isValid;

    m_updatable_isValid = ::OpenAPI::fromJsonValue(m_updatable, json[QString("updatable")]);
    m_updatable_isSet = !json[QString("updatable")].isNull() && m_updatable_isValid;
}

QString OAIControllers_PackageSystemItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_PackageSystemItem::asJsonObject() const {
    QJsonObject obj;
    if (m_available_evra_isSet) {
        obj.insert(QString("available_evra"), ::OpenAPI::toJsonValue(m_available_evra));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installed_evra_isSet) {
        obj.insert(QString("installed_evra"), ::OpenAPI::toJsonValue(m_installed_evra));
    }
    if (m_updatable_isSet) {
        obj.insert(QString("updatable"), ::OpenAPI::toJsonValue(m_updatable));
    }
    return obj;
}

QString OAIControllers_PackageSystemItem::getAvailableEvra() const {
    return m_available_evra;
}
void OAIControllers_PackageSystemItem::setAvailableEvra(const QString &available_evra) {
    m_available_evra = available_evra;
    m_available_evra_isSet = true;
}

bool OAIControllers_PackageSystemItem::is_available_evra_Set() const{
    return m_available_evra_isSet;
}

bool OAIControllers_PackageSystemItem::is_available_evra_Valid() const{
    return m_available_evra_isValid;
}

QString OAIControllers_PackageSystemItem::getDisplayName() const {
    return m_display_name;
}
void OAIControllers_PackageSystemItem::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIControllers_PackageSystemItem::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIControllers_PackageSystemItem::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIControllers_PackageSystemItem::getId() const {
    return m_id;
}
void OAIControllers_PackageSystemItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIControllers_PackageSystemItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIControllers_PackageSystemItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIControllers_PackageSystemItem::getInstalledEvra() const {
    return m_installed_evra;
}
void OAIControllers_PackageSystemItem::setInstalledEvra(const QString &installed_evra) {
    m_installed_evra = installed_evra;
    m_installed_evra_isSet = true;
}

bool OAIControllers_PackageSystemItem::is_installed_evra_Set() const{
    return m_installed_evra_isSet;
}

bool OAIControllers_PackageSystemItem::is_installed_evra_Valid() const{
    return m_installed_evra_isValid;
}

bool OAIControllers_PackageSystemItem::isUpdatable() const {
    return m_updatable;
}
void OAIControllers_PackageSystemItem::setUpdatable(const bool &updatable) {
    m_updatable = updatable;
    m_updatable_isSet = true;
}

bool OAIControllers_PackageSystemItem::is_updatable_Set() const{
    return m_updatable_isSet;
}

bool OAIControllers_PackageSystemItem::is_updatable_Valid() const{
    return m_updatable_isValid;
}

bool OAIControllers_PackageSystemItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_evra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_evra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updatable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_PackageSystemItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
