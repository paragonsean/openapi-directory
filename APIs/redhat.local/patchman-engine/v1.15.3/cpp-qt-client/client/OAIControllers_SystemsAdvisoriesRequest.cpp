/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_SystemsAdvisoriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_SystemsAdvisoriesRequest::OAIControllers_SystemsAdvisoriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_SystemsAdvisoriesRequest::OAIControllers_SystemsAdvisoriesRequest() {
    this->initializeModel();
}

OAIControllers_SystemsAdvisoriesRequest::~OAIControllers_SystemsAdvisoriesRequest() {}

void OAIControllers_SystemsAdvisoriesRequest::initializeModel() {

    m_advisories_isSet = false;
    m_advisories_isValid = false;

    m_systems_isSet = false;
    m_systems_isValid = false;
}

void OAIControllers_SystemsAdvisoriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_SystemsAdvisoriesRequest::fromJsonObject(QJsonObject json) {

    m_advisories_isValid = ::OpenAPI::fromJsonValue(m_advisories, json[QString("advisories")]);
    m_advisories_isSet = !json[QString("advisories")].isNull() && m_advisories_isValid;

    m_systems_isValid = ::OpenAPI::fromJsonValue(m_systems, json[QString("systems")]);
    m_systems_isSet = !json[QString("systems")].isNull() && m_systems_isValid;
}

QString OAIControllers_SystemsAdvisoriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_SystemsAdvisoriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advisories.size() > 0) {
        obj.insert(QString("advisories"), ::OpenAPI::toJsonValue(m_advisories));
    }
    if (m_systems.size() > 0) {
        obj.insert(QString("systems"), ::OpenAPI::toJsonValue(m_systems));
    }
    return obj;
}

QList<QString> OAIControllers_SystemsAdvisoriesRequest::getAdvisories() const {
    return m_advisories;
}
void OAIControllers_SystemsAdvisoriesRequest::setAdvisories(const QList<QString> &advisories) {
    m_advisories = advisories;
    m_advisories_isSet = true;
}

bool OAIControllers_SystemsAdvisoriesRequest::is_advisories_Set() const{
    return m_advisories_isSet;
}

bool OAIControllers_SystemsAdvisoriesRequest::is_advisories_Valid() const{
    return m_advisories_isValid;
}

QList<QString> OAIControllers_SystemsAdvisoriesRequest::getSystems() const {
    return m_systems;
}
void OAIControllers_SystemsAdvisoriesRequest::setSystems(const QList<QString> &systems) {
    m_systems = systems;
    m_systems_isSet = true;
}

bool OAIControllers_SystemsAdvisoriesRequest::is_systems_Set() const{
    return m_systems_isSet;
}

bool OAIControllers_SystemsAdvisoriesRequest::is_systems_Valid() const{
    return m_systems_isValid;
}

bool OAIControllers_SystemsAdvisoriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advisories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_SystemsAdvisoriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
