/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIControllers_SystemItemAttributes.h
 *
 * 
 */

#ifndef OAIControllers_SystemItemAttributes_H
#define OAIControllers_SystemItemAttributes_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIControllers_SystemItemAttributes : public OAIObject {
public:
    OAIControllers_SystemItemAttributes();
    OAIControllers_SystemItemAttributes(QString json);
    ~OAIControllers_SystemItemAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreated() const;
    void setCreated(const QString &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getCulledTimestamp() const;
    void setCulledTimestamp(const QString &culled_timestamp);
    bool is_culled_timestamp_Set() const;
    bool is_culled_timestamp_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getInsightsId() const;
    void setInsightsId(const QString &insights_id);
    bool is_insights_id_Set() const;
    bool is_insights_id_Valid() const;

    QString getLastEvaluation() const;
    void setLastEvaluation(const QString &last_evaluation);
    bool is_last_evaluation_Set() const;
    bool is_last_evaluation_Valid() const;

    QString getLastUpload() const;
    void setLastUpload(const QString &last_upload);
    bool is_last_upload_Set() const;
    bool is_last_upload_Valid() const;

    QString getOsMajor() const;
    void setOsMajor(const QString &os_major);
    bool is_os_major_Set() const;
    bool is_os_major_Valid() const;

    QString getOsMinor() const;
    void setOsMinor(const QString &os_minor);
    bool is_os_minor_Set() const;
    bool is_os_minor_Valid() const;

    QString getOsName() const;
    void setOsName(const QString &os_name);
    bool is_os_name_Set() const;
    bool is_os_name_Valid() const;

    qint32 getOtherCount() const;
    void setOtherCount(const qint32 &other_count);
    bool is_other_count_Set() const;
    bool is_other_count_Valid() const;

    qint32 getPackagesInstalled() const;
    void setPackagesInstalled(const qint32 &packages_installed);
    bool is_packages_installed_Set() const;
    bool is_packages_installed_Valid() const;

    qint32 getPackagesUpdatable() const;
    void setPackagesUpdatable(const qint32 &packages_updatable);
    bool is_packages_updatable_Set() const;
    bool is_packages_updatable_Valid() const;

    qint32 getRhbaCount() const;
    void setRhbaCount(const qint32 &rhba_count);
    bool is_rhba_count_Set() const;
    bool is_rhba_count_Valid() const;

    qint32 getRheaCount() const;
    void setRheaCount(const qint32 &rhea_count);
    bool is_rhea_count_Set() const;
    bool is_rhea_count_Valid() const;

    qint32 getRhsaCount() const;
    void setRhsaCount(const qint32 &rhsa_count);
    bool is_rhsa_count_Set() const;
    bool is_rhsa_count_Valid() const;

    QString getRhsm() const;
    void setRhsm(const QString &rhsm);
    bool is_rhsm_Set() const;
    bool is_rhsm_Valid() const;

    bool isStale() const;
    void setStale(const bool &stale);
    bool is_stale_Set() const;
    bool is_stale_Valid() const;

    QString getStaleTimestamp() const;
    void setStaleTimestamp(const QString &stale_timestamp);
    bool is_stale_timestamp_Set() const;
    bool is_stale_timestamp_Valid() const;

    QString getStaleWarningTimestamp() const;
    void setStaleWarningTimestamp(const QString &stale_warning_timestamp);
    bool is_stale_warning_timestamp_Set() const;
    bool is_stale_warning_timestamp_Valid() const;

    bool isThirdParty() const;
    void setThirdParty(const bool &third_party);
    bool is_third_party_Set() const;
    bool is_third_party_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_culled_timestamp;
    bool m_culled_timestamp_isSet;
    bool m_culled_timestamp_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_insights_id;
    bool m_insights_id_isSet;
    bool m_insights_id_isValid;

    QString m_last_evaluation;
    bool m_last_evaluation_isSet;
    bool m_last_evaluation_isValid;

    QString m_last_upload;
    bool m_last_upload_isSet;
    bool m_last_upload_isValid;

    QString m_os_major;
    bool m_os_major_isSet;
    bool m_os_major_isValid;

    QString m_os_minor;
    bool m_os_minor_isSet;
    bool m_os_minor_isValid;

    QString m_os_name;
    bool m_os_name_isSet;
    bool m_os_name_isValid;

    qint32 m_other_count;
    bool m_other_count_isSet;
    bool m_other_count_isValid;

    qint32 m_packages_installed;
    bool m_packages_installed_isSet;
    bool m_packages_installed_isValid;

    qint32 m_packages_updatable;
    bool m_packages_updatable_isSet;
    bool m_packages_updatable_isValid;

    qint32 m_rhba_count;
    bool m_rhba_count_isSet;
    bool m_rhba_count_isValid;

    qint32 m_rhea_count;
    bool m_rhea_count_isSet;
    bool m_rhea_count_isValid;

    qint32 m_rhsa_count;
    bool m_rhsa_count_isSet;
    bool m_rhsa_count_isValid;

    QString m_rhsm;
    bool m_rhsm_isSet;
    bool m_rhsm_isValid;

    bool m_stale;
    bool m_stale_isSet;
    bool m_stale_isValid;

    QString m_stale_timestamp;
    bool m_stale_timestamp_isSet;
    bool m_stale_timestamp_isValid;

    QString m_stale_warning_timestamp;
    bool m_stale_warning_timestamp_isSet;
    bool m_stale_warning_timestamp_isValid;

    bool m_third_party;
    bool m_third_party_isSet;
    bool m_third_party_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIControllers_SystemItemAttributes)

#endif // OAIControllers_SystemItemAttributes_H
