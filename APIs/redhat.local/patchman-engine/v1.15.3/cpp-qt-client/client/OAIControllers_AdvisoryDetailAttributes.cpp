/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_AdvisoryDetailAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_AdvisoryDetailAttributes::OAIControllers_AdvisoryDetailAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_AdvisoryDetailAttributes::OAIControllers_AdvisoryDetailAttributes() {
    this->initializeModel();
}

OAIControllers_AdvisoryDetailAttributes::~OAIControllers_AdvisoryDetailAttributes() {}

void OAIControllers_AdvisoryDetailAttributes::initializeModel() {

    m_cves_isSet = false;
    m_cves_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fixes_isSet = false;
    m_fixes_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_public_date_isSet = false;
    m_public_date_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_solution_isSet = false;
    m_solution_isValid = false;

    m_synopsis_isSet = false;
    m_synopsis_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIControllers_AdvisoryDetailAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_AdvisoryDetailAttributes::fromJsonObject(QJsonObject json) {

    m_cves_isValid = ::OpenAPI::fromJsonValue(m_cves, json[QString("cves")]);
    m_cves_isSet = !json[QString("cves")].isNull() && m_cves_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fixes_isValid = ::OpenAPI::fromJsonValue(m_fixes, json[QString("fixes")]);
    m_fixes_isSet = !json[QString("fixes")].isNull() && m_fixes_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_public_date_isValid = ::OpenAPI::fromJsonValue(m_public_date, json[QString("public_date")]);
    m_public_date_isSet = !json[QString("public_date")].isNull() && m_public_date_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_solution_isValid = ::OpenAPI::fromJsonValue(m_solution, json[QString("solution")]);
    m_solution_isSet = !json[QString("solution")].isNull() && m_solution_isValid;

    m_synopsis_isValid = ::OpenAPI::fromJsonValue(m_synopsis, json[QString("synopsis")]);
    m_synopsis_isSet = !json[QString("synopsis")].isNull() && m_synopsis_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_AdvisoryDetailAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_cves.size() > 0) {
        obj.insert(QString("cves"), ::OpenAPI::toJsonValue(m_cves));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fixes_isSet) {
        obj.insert(QString("fixes"), ::OpenAPI::toJsonValue(m_fixes));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_public_date_isSet) {
        obj.insert(QString("public_date"), ::OpenAPI::toJsonValue(m_public_date));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_solution_isSet) {
        obj.insert(QString("solution"), ::OpenAPI::toJsonValue(m_solution));
    }
    if (m_synopsis_isSet) {
        obj.insert(QString("synopsis"), ::OpenAPI::toJsonValue(m_synopsis));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QList<QString> OAIControllers_AdvisoryDetailAttributes::getCves() const {
    return m_cves;
}
void OAIControllers_AdvisoryDetailAttributes::setCves(const QList<QString> &cves) {
    m_cves = cves;
    m_cves_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_cves_Set() const{
    return m_cves_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_cves_Valid() const{
    return m_cves_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getDescription() const {
    return m_description;
}
void OAIControllers_AdvisoryDetailAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getFixes() const {
    return m_fixes;
}
void OAIControllers_AdvisoryDetailAttributes::setFixes(const QString &fixes) {
    m_fixes = fixes;
    m_fixes_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_fixes_Set() const{
    return m_fixes_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_fixes_Valid() const{
    return m_fixes_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getModifiedDate() const {
    return m_modified_date;
}
void OAIControllers_AdvisoryDetailAttributes::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QMap<QString, QString> OAIControllers_AdvisoryDetailAttributes::getPackages() const {
    return m_packages;
}
void OAIControllers_AdvisoryDetailAttributes::setPackages(const QMap<QString, QString> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_packages_Valid() const{
    return m_packages_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getPublicDate() const {
    return m_public_date;
}
void OAIControllers_AdvisoryDetailAttributes::setPublicDate(const QString &public_date) {
    m_public_date = public_date;
    m_public_date_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_public_date_Set() const{
    return m_public_date_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_public_date_Valid() const{
    return m_public_date_isValid;
}

QList<QString> OAIControllers_AdvisoryDetailAttributes::getReferences() const {
    return m_references;
}
void OAIControllers_AdvisoryDetailAttributes::setReferences(const QList<QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_references_Set() const{
    return m_references_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_references_Valid() const{
    return m_references_isValid;
}

qint32 OAIControllers_AdvisoryDetailAttributes::getSeverity() const {
    return m_severity;
}
void OAIControllers_AdvisoryDetailAttributes::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getSolution() const {
    return m_solution;
}
void OAIControllers_AdvisoryDetailAttributes::setSolution(const QString &solution) {
    m_solution = solution;
    m_solution_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_solution_Set() const{
    return m_solution_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_solution_Valid() const{
    return m_solution_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getSynopsis() const {
    return m_synopsis;
}
void OAIControllers_AdvisoryDetailAttributes::setSynopsis(const QString &synopsis) {
    m_synopsis = synopsis;
    m_synopsis_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_synopsis_Set() const{
    return m_synopsis_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_synopsis_Valid() const{
    return m_synopsis_isValid;
}

QString OAIControllers_AdvisoryDetailAttributes::getTopic() const {
    return m_topic;
}
void OAIControllers_AdvisoryDetailAttributes::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIControllers_AdvisoryDetailAttributes::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIControllers_AdvisoryDetailAttributes::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIControllers_AdvisoryDetailAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cves.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_AdvisoryDetailAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
