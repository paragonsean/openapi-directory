/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIControllers_SystemsAdvisoriesResponse.h
 *
 * 
 */

#ifndef OAIControllers_SystemsAdvisoriesResponse_H
#define OAIControllers_SystemsAdvisoriesResponse_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIControllers_SystemsAdvisoriesResponse : public OAIObject {
public:
    OAIControllers_SystemsAdvisoriesResponse();
    OAIControllers_SystemsAdvisoriesResponse(QString json);
    ~OAIControllers_SystemsAdvisoriesResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QList<QString>> getData() const;
    void setData(const QMap<QString, QList<QString>> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QList<QString>> m_data;
    bool m_data_isSet;
    bool m_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIControllers_SystemsAdvisoriesResponse)

#endif // OAIControllers_SystemsAdvisoriesResponse_H
