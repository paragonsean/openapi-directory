/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_FilterData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_FilterData::OAIControllers_FilterData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_FilterData::OAIControllers_FilterData() {
    this->initializeModel();
}

OAIControllers_FilterData::~OAIControllers_FilterData() {}

void OAIControllers_FilterData::initializeModel() {

    m_op_isSet = false;
    m_op_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIControllers_FilterData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_FilterData::fromJsonObject(QJsonObject json) {

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIControllers_FilterData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_FilterData::asJsonObject() const {
    QJsonObject obj;
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIControllers_FilterData::getOp() const {
    return m_op;
}
void OAIControllers_FilterData::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIControllers_FilterData::is_op_Set() const{
    return m_op_isSet;
}

bool OAIControllers_FilterData::is_op_Valid() const{
    return m_op_isValid;
}

QList<QString> OAIControllers_FilterData::getValues() const {
    return m_values;
}
void OAIControllers_FilterData::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIControllers_FilterData::is_values_Set() const{
    return m_values_isSet;
}

bool OAIControllers_FilterData::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIControllers_FilterData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_FilterData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
