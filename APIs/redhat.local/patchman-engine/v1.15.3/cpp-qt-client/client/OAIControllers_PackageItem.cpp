/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_PackageItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_PackageItem::OAIControllers_PackageItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_PackageItem::OAIControllers_PackageItem() {
    this->initializeModel();
}

OAIControllers_PackageItem::~OAIControllers_PackageItem() {}

void OAIControllers_PackageItem::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_systems_installed_isSet = false;
    m_systems_installed_isValid = false;

    m_systems_updatable_isSet = false;
    m_systems_updatable_isValid = false;
}

void OAIControllers_PackageItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_PackageItem::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_systems_installed_isValid = ::OpenAPI::fromJsonValue(m_systems_installed, json[QString("systems_installed")]);
    m_systems_installed_isSet = !json[QString("systems_installed")].isNull() && m_systems_installed_isValid;

    m_systems_updatable_isValid = ::OpenAPI::fromJsonValue(m_systems_updatable, json[QString("systems_updatable")]);
    m_systems_updatable_isSet = !json[QString("systems_updatable")].isNull() && m_systems_updatable_isValid;
}

QString OAIControllers_PackageItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_PackageItem::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_systems_installed_isSet) {
        obj.insert(QString("systems_installed"), ::OpenAPI::toJsonValue(m_systems_installed));
    }
    if (m_systems_updatable_isSet) {
        obj.insert(QString("systems_updatable"), ::OpenAPI::toJsonValue(m_systems_updatable));
    }
    return obj;
}

QString OAIControllers_PackageItem::getName() const {
    return m_name;
}
void OAIControllers_PackageItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIControllers_PackageItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIControllers_PackageItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIControllers_PackageItem::getSummary() const {
    return m_summary;
}
void OAIControllers_PackageItem::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIControllers_PackageItem::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIControllers_PackageItem::is_summary_Valid() const{
    return m_summary_isValid;
}

qint32 OAIControllers_PackageItem::getSystemsInstalled() const {
    return m_systems_installed;
}
void OAIControllers_PackageItem::setSystemsInstalled(const qint32 &systems_installed) {
    m_systems_installed = systems_installed;
    m_systems_installed_isSet = true;
}

bool OAIControllers_PackageItem::is_systems_installed_Set() const{
    return m_systems_installed_isSet;
}

bool OAIControllers_PackageItem::is_systems_installed_Valid() const{
    return m_systems_installed_isValid;
}

qint32 OAIControllers_PackageItem::getSystemsUpdatable() const {
    return m_systems_updatable;
}
void OAIControllers_PackageItem::setSystemsUpdatable(const qint32 &systems_updatable) {
    m_systems_updatable = systems_updatable;
    m_systems_updatable_isSet = true;
}

bool OAIControllers_PackageItem::is_systems_updatable_Set() const{
    return m_systems_updatable_isSet;
}

bool OAIControllers_PackageItem::is_systems_updatable_Valid() const{
    return m_systems_updatable_isValid;
}

bool OAIControllers_PackageItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_systems_updatable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_PackageItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
