/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_ListMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_ListMeta::OAIControllers_ListMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_ListMeta::OAIControllers_ListMeta() {
    this->initializeModel();
}

OAIControllers_ListMeta::~OAIControllers_ListMeta() {}

void OAIControllers_ListMeta::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_subtotals_isSet = false;
    m_subtotals_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;
}

void OAIControllers_ListMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_ListMeta::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_subtotals_isValid = ::OpenAPI::fromJsonValue(m_subtotals, json[QString("subtotals")]);
    m_subtotals_isSet = !json[QString("subtotals")].isNull() && m_subtotals_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("total_items")]);
    m_total_items_isSet = !json[QString("total_items")].isNull() && m_total_items_isValid;
}

QString OAIControllers_ListMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_ListMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.size() > 0) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_subtotals.size() > 0) {
        obj.insert(QString("subtotals"), ::OpenAPI::toJsonValue(m_subtotals));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("total_items"), ::OpenAPI::toJsonValue(m_total_items));
    }
    return obj;
}

QMap<QString, OAIControllers_FilterData> OAIControllers_ListMeta::getFilter() const {
    return m_filter;
}
void OAIControllers_ListMeta::setFilter(const QMap<QString, OAIControllers_FilterData> &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIControllers_ListMeta::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIControllers_ListMeta::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIControllers_ListMeta::getLimit() const {
    return m_limit;
}
void OAIControllers_ListMeta::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIControllers_ListMeta::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIControllers_ListMeta::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIControllers_ListMeta::getOffset() const {
    return m_offset;
}
void OAIControllers_ListMeta::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIControllers_ListMeta::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIControllers_ListMeta::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIControllers_ListMeta::getSearch() const {
    return m_search;
}
void OAIControllers_ListMeta::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIControllers_ListMeta::is_search_Set() const{
    return m_search_isSet;
}

bool OAIControllers_ListMeta::is_search_Valid() const{
    return m_search_isValid;
}

QList<QString> OAIControllers_ListMeta::getSort() const {
    return m_sort;
}
void OAIControllers_ListMeta::setSort(const QList<QString> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIControllers_ListMeta::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIControllers_ListMeta::is_sort_Valid() const{
    return m_sort_isValid;
}

QMap<QString, qint32> OAIControllers_ListMeta::getSubtotals() const {
    return m_subtotals;
}
void OAIControllers_ListMeta::setSubtotals(const QMap<QString, qint32> &subtotals) {
    m_subtotals = subtotals;
    m_subtotals_isSet = true;
}

bool OAIControllers_ListMeta::is_subtotals_Set() const{
    return m_subtotals_isSet;
}

bool OAIControllers_ListMeta::is_subtotals_Valid() const{
    return m_subtotals_isValid;
}

qint32 OAIControllers_ListMeta::getTotalItems() const {
    return m_total_items;
}
void OAIControllers_ListMeta::setTotalItems(const qint32 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAIControllers_ListMeta::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAIControllers_ListMeta::is_total_items_Valid() const{
    return m_total_items_isValid;
}

bool OAIControllers_ListMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_ListMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
