/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_SystemsAdvisoriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_SystemsAdvisoriesResponse::OAIControllers_SystemsAdvisoriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_SystemsAdvisoriesResponse::OAIControllers_SystemsAdvisoriesResponse() {
    this->initializeModel();
}

OAIControllers_SystemsAdvisoriesResponse::~OAIControllers_SystemsAdvisoriesResponse() {}

void OAIControllers_SystemsAdvisoriesResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIControllers_SystemsAdvisoriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_SystemsAdvisoriesResponse::fromJsonObject(QJsonObject json) {

    if(json["data"].isObject()){
        auto varmap = json["data"].toObject().toVariantMap();
        m_data_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_data_isSet &= !jval.isNull() && m_data_isValid;
                m_data.insert(m_data.end(), val, item);
            }
        }
    }
}

QString OAIControllers_SystemsAdvisoriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_SystemsAdvisoriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        
        obj.insert(QString("data"), toJsonValue(m_data));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIControllers_SystemsAdvisoriesResponse::getData() const {
    return m_data;
}
void OAIControllers_SystemsAdvisoriesResponse::setData(const QMap<QString, QList<QString>> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIControllers_SystemsAdvisoriesResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIControllers_SystemsAdvisoriesResponse::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIControllers_SystemsAdvisoriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_SystemsAdvisoriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
