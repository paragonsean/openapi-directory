/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIControllers_SystemAdvisoriesDBLookup.h
 *
 * 
 */

#ifndef OAIControllers_SystemAdvisoriesDBLookup_H
#define OAIControllers_SystemAdvisoriesDBLookup_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIControllers_SystemAdvisoriesDBLookup : public OAIObject {
public:
    OAIControllers_SystemAdvisoriesDBLookup();
    OAIControllers_SystemAdvisoriesDBLookup(QString json);
    ~OAIControllers_SystemAdvisoriesDBLookup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdvisoryType() const;
    void setAdvisoryType(const qint32 &advisory_type);
    bool is_advisory_type_Set() const;
    bool is_advisory_type_Valid() const;

    qint32 getCveCount() const;
    void setCveCount(const qint32 &cve_count);
    bool is_cve_count_Set() const;
    bool is_cve_count_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getPublicDate() const;
    void setPublicDate(const QString &public_date);
    bool is_public_date_Set() const;
    bool is_public_date_Valid() const;

    qint32 getSeverity() const;
    void setSeverity(const qint32 &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getSynopsis() const;
    void setSynopsis(const QString &synopsis);
    bool is_synopsis_Set() const;
    bool is_synopsis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_advisory_type;
    bool m_advisory_type_isSet;
    bool m_advisory_type_isValid;

    qint32 m_cve_count;
    bool m_cve_count_isSet;
    bool m_cve_count_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_public_date;
    bool m_public_date_isSet;
    bool m_public_date_isValid;

    qint32 m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_synopsis;
    bool m_synopsis_isSet;
    bool m_synopsis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIControllers_SystemAdvisoriesDBLookup)

#endif // OAIControllers_SystemAdvisoriesDBLookup_H
