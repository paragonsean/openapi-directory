/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_SystemAdvisoryItemAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_SystemAdvisoryItemAttributes::OAIControllers_SystemAdvisoryItemAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_SystemAdvisoryItemAttributes::OAIControllers_SystemAdvisoryItemAttributes() {
    this->initializeModel();
}

OAIControllers_SystemAdvisoryItemAttributes::~OAIControllers_SystemAdvisoryItemAttributes() {}

void OAIControllers_SystemAdvisoryItemAttributes::initializeModel() {

    m_advisory_type_isSet = false;
    m_advisory_type_isValid = false;

    m_cve_count_isSet = false;
    m_cve_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_public_date_isSet = false;
    m_public_date_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_synopsis_isSet = false;
    m_synopsis_isValid = false;
}

void OAIControllers_SystemAdvisoryItemAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_SystemAdvisoryItemAttributes::fromJsonObject(QJsonObject json) {

    m_advisory_type_isValid = ::OpenAPI::fromJsonValue(m_advisory_type, json[QString("advisory_type")]);
    m_advisory_type_isSet = !json[QString("advisory_type")].isNull() && m_advisory_type_isValid;

    m_cve_count_isValid = ::OpenAPI::fromJsonValue(m_cve_count, json[QString("cve_count")]);
    m_cve_count_isSet = !json[QString("cve_count")].isNull() && m_cve_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_public_date_isValid = ::OpenAPI::fromJsonValue(m_public_date, json[QString("public_date")]);
    m_public_date_isSet = !json[QString("public_date")].isNull() && m_public_date_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_synopsis_isValid = ::OpenAPI::fromJsonValue(m_synopsis, json[QString("synopsis")]);
    m_synopsis_isSet = !json[QString("synopsis")].isNull() && m_synopsis_isValid;
}

QString OAIControllers_SystemAdvisoryItemAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_SystemAdvisoryItemAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_advisory_type_isSet) {
        obj.insert(QString("advisory_type"), ::OpenAPI::toJsonValue(m_advisory_type));
    }
    if (m_cve_count_isSet) {
        obj.insert(QString("cve_count"), ::OpenAPI::toJsonValue(m_cve_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_public_date_isSet) {
        obj.insert(QString("public_date"), ::OpenAPI::toJsonValue(m_public_date));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_synopsis_isSet) {
        obj.insert(QString("synopsis"), ::OpenAPI::toJsonValue(m_synopsis));
    }
    return obj;
}

qint32 OAIControllers_SystemAdvisoryItemAttributes::getAdvisoryType() const {
    return m_advisory_type;
}
void OAIControllers_SystemAdvisoryItemAttributes::setAdvisoryType(const qint32 &advisory_type) {
    m_advisory_type = advisory_type;
    m_advisory_type_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_advisory_type_Set() const{
    return m_advisory_type_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_advisory_type_Valid() const{
    return m_advisory_type_isValid;
}

qint32 OAIControllers_SystemAdvisoryItemAttributes::getCveCount() const {
    return m_cve_count;
}
void OAIControllers_SystemAdvisoryItemAttributes::setCveCount(const qint32 &cve_count) {
    m_cve_count = cve_count;
    m_cve_count_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_cve_count_Set() const{
    return m_cve_count_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_cve_count_Valid() const{
    return m_cve_count_isValid;
}

QString OAIControllers_SystemAdvisoryItemAttributes::getDescription() const {
    return m_description;
}
void OAIControllers_SystemAdvisoryItemAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIControllers_SystemAdvisoryItemAttributes::getPublicDate() const {
    return m_public_date;
}
void OAIControllers_SystemAdvisoryItemAttributes::setPublicDate(const QString &public_date) {
    m_public_date = public_date;
    m_public_date_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_public_date_Set() const{
    return m_public_date_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_public_date_Valid() const{
    return m_public_date_isValid;
}

qint32 OAIControllers_SystemAdvisoryItemAttributes::getSeverity() const {
    return m_severity;
}
void OAIControllers_SystemAdvisoryItemAttributes::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIControllers_SystemAdvisoryItemAttributes::getSynopsis() const {
    return m_synopsis;
}
void OAIControllers_SystemAdvisoryItemAttributes::setSynopsis(const QString &synopsis) {
    m_synopsis = synopsis;
    m_synopsis_isSet = true;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_synopsis_Set() const{
    return m_synopsis_isSet;
}

bool OAIControllers_SystemAdvisoryItemAttributes::is_synopsis_Valid() const{
    return m_synopsis_isValid;
}

bool OAIControllers_SystemAdvisoryItemAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advisory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cve_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_SystemAdvisoryItemAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
