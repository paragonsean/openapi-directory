/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllers_SystemPackageData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllers_SystemPackageData::OAIControllers_SystemPackageData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllers_SystemPackageData::OAIControllers_SystemPackageData() {
    this->initializeModel();
}

OAIControllers_SystemPackageData::~OAIControllers_SystemPackageData() {}

void OAIControllers_SystemPackageData::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_evra_isSet = false;
    m_evra_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_updatable_isSet = false;
    m_updatable_isValid = false;

    m_updates_isSet = false;
    m_updates_isValid = false;
}

void OAIControllers_SystemPackageData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllers_SystemPackageData::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_evra_isValid = ::OpenAPI::fromJsonValue(m_evra, json[QString("evra")]);
    m_evra_isSet = !json[QString("evra")].isNull() && m_evra_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_updatable_isValid = ::OpenAPI::fromJsonValue(m_updatable, json[QString("updatable")]);
    m_updatable_isSet = !json[QString("updatable")].isNull() && m_updatable_isValid;

    m_updates_isValid = ::OpenAPI::fromJsonValue(m_updates, json[QString("updates")]);
    m_updates_isSet = !json[QString("updates")].isNull() && m_updates_isValid;
}

QString OAIControllers_SystemPackageData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllers_SystemPackageData::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_evra_isSet) {
        obj.insert(QString("evra"), ::OpenAPI::toJsonValue(m_evra));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_updatable_isSet) {
        obj.insert(QString("updatable"), ::OpenAPI::toJsonValue(m_updatable));
    }
    if (m_updates.size() > 0) {
        obj.insert(QString("updates"), ::OpenAPI::toJsonValue(m_updates));
    }
    return obj;
}

QString OAIControllers_SystemPackageData::getDescription() const {
    return m_description;
}
void OAIControllers_SystemPackageData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIControllers_SystemPackageData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIControllers_SystemPackageData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIControllers_SystemPackageData::getEvra() const {
    return m_evra;
}
void OAIControllers_SystemPackageData::setEvra(const QString &evra) {
    m_evra = evra;
    m_evra_isSet = true;
}

bool OAIControllers_SystemPackageData::is_evra_Set() const{
    return m_evra_isSet;
}

bool OAIControllers_SystemPackageData::is_evra_Valid() const{
    return m_evra_isValid;
}

QString OAIControllers_SystemPackageData::getName() const {
    return m_name;
}
void OAIControllers_SystemPackageData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIControllers_SystemPackageData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIControllers_SystemPackageData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIControllers_SystemPackageData::getSummary() const {
    return m_summary;
}
void OAIControllers_SystemPackageData::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIControllers_SystemPackageData::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIControllers_SystemPackageData::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIControllers_SystemPackageData::isUpdatable() const {
    return m_updatable;
}
void OAIControllers_SystemPackageData::setUpdatable(const bool &updatable) {
    m_updatable = updatable;
    m_updatable_isSet = true;
}

bool OAIControllers_SystemPackageData::is_updatable_Set() const{
    return m_updatable_isSet;
}

bool OAIControllers_SystemPackageData::is_updatable_Valid() const{
    return m_updatable_isValid;
}

QList<OAIModels_PackageUpdate> OAIControllers_SystemPackageData::getUpdates() const {
    return m_updates;
}
void OAIControllers_SystemPackageData::setUpdates(const QList<OAIModels_PackageUpdate> &updates) {
    m_updates = updates;
    m_updates_isSet = true;
}

bool OAIControllers_SystemPackageData::is_updates_Set() const{
    return m_updates_isSet;
}

bool OAIControllers_SystemPackageData::is_updates_Valid() const{
    return m_updates_isValid;
}

bool OAIControllers_SystemPackageData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updatable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllers_SystemPackageData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
