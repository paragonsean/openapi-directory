/**
 * Patchman-engine API
 * API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.15.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIControllers_AdvisoriesResponse.h"
#include "OAIControllers_AdvisoriesSystemsResponse.h"
#include "OAIControllers_AdvisoryDetailResponse.h"
#include "OAIControllers_AdvisoryInlineItem.h"
#include "OAIControllers_AdvisorySystemsResponse.h"
#include "OAIControllers_PackageDetailResponse.h"
#include "OAIControllers_PackageItem.h"
#include "OAIControllers_PackageSystemItem.h"
#include "OAIControllers_PackageSystemsResponse.h"
#include "OAIControllers_PackageVersionsResponse.h"
#include "OAIControllers_PackagesResponse.h"
#include "OAIControllers_SystemAdvisoriesDBLookup.h"
#include "OAIControllers_SystemAdvisoriesResponse.h"
#include "OAIControllers_SystemDetailResponse.h"
#include "OAIControllers_SystemInlineItem.h"
#include "OAIControllers_SystemPackageInline.h"
#include "OAIControllers_SystemPackageResponse.h"
#include "OAIControllers_SystemsAdvisoriesRequest.h"
#include "OAIControllers_SystemsAdvisoriesResponse.h"
#include "OAIControllers_SystemsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  inventory_id QString [required]
    */
    virtual void deletesystem(const QString &inventory_id);

    /**
    * @param[in]  advisory_id QString [required]
    */
    virtual void detailAdvisory(const QString &advisory_id);

    /**
    * @param[in]  inventory_id QString [required]
    */
    virtual void detailSystem(const QString &inventory_id);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_public_date QString [optional]
    * @param[in]  filter_synopsis QString [optional]
    * @param[in]  filter_advisory_type QString [optional]
    * @param[in]  filter_severity QString [optional]
    * @param[in]  filter_applicable_systems QString [optional]
    */
    virtual void exportAdvisories(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_public_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_synopsis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_advisory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_applicable_systems = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advisory_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_display_name QString [optional]
    * @param[in]  filter_last_evaluation QString [optional]
    * @param[in]  filter_last_upload QString [optional]
    * @param[in]  filter_rhsa_count QString [optional]
    * @param[in]  filter_rhba_count QString [optional]
    * @param[in]  filter_rhea_count QString [optional]
    * @param[in]  filter_other_count QString [optional]
    * @param[in]  filter_stale QString [optional]
    * @param[in]  filter_packages_installed QString [optional]
    * @param[in]  filter_packages_updatable QString [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void exportAdvisorySystems(const QString &advisory_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_evaluation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_upload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhsa_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhba_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhea_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_other_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_installed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_updatable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void exportPackageSystems(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_name QString [optional]
    * @param[in]  filter_systems_installed QString [optional]
    * @param[in]  filter_systems_updatable QString [optional]
    * @param[in]  filter_summary QString [optional]
    */
    virtual void exportPackages(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_systems_installed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_systems_updatable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_summary = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_public_date QString [optional]
    * @param[in]  filter_synopsis QString [optional]
    * @param[in]  filter_advisory_type QString [optional]
    * @param[in]  filter_severity QString [optional]
    */
    virtual void exportSystemAdvisories(const QString &inventory_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_public_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_synopsis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_advisory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_severity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  filter_name QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_evra QString [optional]
    * @param[in]  filter_summary QString [optional]
    * @param[in]  filter_updatable bool [optional]
    */
    virtual void exportSystemPackages(const QString &inventory_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_evra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_updatable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_display_name QString [optional]
    * @param[in]  filter_last_evaluation QString [optional]
    * @param[in]  filter_last_upload QString [optional]
    * @param[in]  filter_rhsa_count QString [optional]
    * @param[in]  filter_rhba_count QString [optional]
    * @param[in]  filter_rhea_count QString [optional]
    * @param[in]  filter_other_count QString [optional]
    * @param[in]  filter_stale QString [optional]
    * @param[in]  filter_packages_installed QString [optional]
    * @param[in]  filter_packages_updatable QString [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void exportSystems(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_evaluation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_upload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhsa_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhba_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhea_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_other_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_installed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_updatable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  package_name QString [required]
    */
    virtual void latestPackage(const QString &package_name);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_public_date QString [optional]
    * @param[in]  filter_synopsis QString [optional]
    * @param[in]  filter_advisory_type QString [optional]
    * @param[in]  filter_severity QString [optional]
    * @param[in]  filter_applicable_systems QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    */
    virtual void listAdvisories(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_public_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_synopsis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_advisory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_applicable_systems = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  advisory_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_insights_id QString [optional]
    * @param[in]  filter_display_name QString [optional]
    * @param[in]  filter_last_evaluation QString [optional]
    * @param[in]  filter_last_upload QString [optional]
    * @param[in]  filter_rhsa_count QString [optional]
    * @param[in]  filter_rhba_count QString [optional]
    * @param[in]  filter_rhea_count QString [optional]
    * @param[in]  filter_other_count QString [optional]
    * @param[in]  filter_stale QString [optional]
    * @param[in]  filter_stale_timestamp QString [optional]
    * @param[in]  filter_stale_warning_timestamp QString [optional]
    * @param[in]  filter_culled_timestamp QString [optional]
    * @param[in]  filter_created QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    */
    virtual void listAdvisorySystems(const QString &advisory_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_insights_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_evaluation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_upload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhsa_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhba_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhea_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_other_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale_warning_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_culled_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_name QString [optional]
    * @param[in]  filter_systems_installed QString [optional]
    * @param[in]  filter_systems_updatable QString [optional]
    * @param[in]  filter_summary QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    */
    virtual void listPackages(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_systems_installed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_systems_updatable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  inventory_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_public_date QString [optional]
    * @param[in]  filter_synopsis QString [optional]
    * @param[in]  filter_advisory_type QString [optional]
    * @param[in]  filter_severity QString [optional]
    */
    virtual void listSystemAdvisories(const QString &inventory_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_public_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_synopsis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_advisory_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_severity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_insights_id QString [optional]
    * @param[in]  filter_id QString [optional]
    * @param[in]  filter_display_name QString [optional]
    * @param[in]  filter_last_evaluation QString [optional]
    * @param[in]  filter_last_upload QString [optional]
    * @param[in]  filter_rhsa_count QString [optional]
    * @param[in]  filter_rhba_count QString [optional]
    * @param[in]  filter_rhea_count QString [optional]
    * @param[in]  filter_other_count QString [optional]
    * @param[in]  filter_stale QString [optional]
    * @param[in]  filter_packages_installed QString [optional]
    * @param[in]  filter_packages_updatable QString [optional]
    * @param[in]  filter_stale_timestamp QString [optional]
    * @param[in]  filter_stale_warning_timestamp QString [optional]
    * @param[in]  filter_culled_timestamp QString [optional]
    * @param[in]  filter_created QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    */
    virtual void listSystems(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_insights_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_evaluation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_last_upload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhsa_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhba_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_rhea_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_other_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_installed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_packages_updatable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_stale_warning_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_culled_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  filter_system_profile_sap_system QString [optional]
    * @param[in]  filter_system_profile_sap_sids_in QList<QString> [optional]
    */
    virtual void packageSystems(const QString &package_name, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter_system_profile_sap_system = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filter_system_profile_sap_sids_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void packageVersions(const QString &package_name, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  inventory_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  filter_name QString [optional]
    * @param[in]  filter_description QString [optional]
    * @param[in]  filter_evra QString [optional]
    * @param[in]  filter_summary QString [optional]
    * @param[in]  filter_updatable bool [optional]
    */
    virtual void systemPackages(const QString &inventory_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_evra = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_summary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_updatable = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIControllers_SystemsAdvisoriesRequest [required]
    */
    virtual void viewAdvisoriesSystems(const OAIControllers_SystemsAdvisoriesRequest &body);

    /**
    * @param[in]  body OAIControllers_SystemsAdvisoriesRequest [required]
    */
    virtual void viewSystemsAdvisories(const OAIControllers_SystemsAdvisoriesRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletesystemCallback(OAIHttpRequestWorker *worker);
    void detailAdvisoryCallback(OAIHttpRequestWorker *worker);
    void detailSystemCallback(OAIHttpRequestWorker *worker);
    void exportAdvisoriesCallback(OAIHttpRequestWorker *worker);
    void exportAdvisorySystemsCallback(OAIHttpRequestWorker *worker);
    void exportPackageSystemsCallback(OAIHttpRequestWorker *worker);
    void exportPackagesCallback(OAIHttpRequestWorker *worker);
    void exportSystemAdvisoriesCallback(OAIHttpRequestWorker *worker);
    void exportSystemPackagesCallback(OAIHttpRequestWorker *worker);
    void exportSystemsCallback(OAIHttpRequestWorker *worker);
    void latestPackageCallback(OAIHttpRequestWorker *worker);
    void listAdvisoriesCallback(OAIHttpRequestWorker *worker);
    void listAdvisorySystemsCallback(OAIHttpRequestWorker *worker);
    void listPackagesCallback(OAIHttpRequestWorker *worker);
    void listSystemAdvisoriesCallback(OAIHttpRequestWorker *worker);
    void listSystemsCallback(OAIHttpRequestWorker *worker);
    void packageSystemsCallback(OAIHttpRequestWorker *worker);
    void packageVersionsCallback(OAIHttpRequestWorker *worker);
    void systemPackagesCallback(OAIHttpRequestWorker *worker);
    void viewAdvisoriesSystemsCallback(OAIHttpRequestWorker *worker);
    void viewSystemsAdvisoriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletesystemSignal();
    void detailAdvisorySignal(OAIControllers_AdvisoryDetailResponse summary);
    void detailSystemSignal(OAIControllers_SystemDetailResponse summary);
    void exportAdvisoriesSignal(QList<OAIControllers_AdvisoryInlineItem> summary);
    void exportAdvisorySystemsSignal(QList<OAIControllers_SystemInlineItem> summary);
    void exportPackageSystemsSignal(QList<OAIControllers_PackageSystemItem> summary);
    void exportPackagesSignal(QList<OAIControllers_PackageItem> summary);
    void exportSystemAdvisoriesSignal(QList<OAIControllers_SystemAdvisoriesDBLookup> summary);
    void exportSystemPackagesSignal(QList<OAIControllers_SystemPackageInline> summary);
    void exportSystemsSignal(QList<OAIControllers_SystemInlineItem> summary);
    void latestPackageSignal(OAIControllers_PackageDetailResponse summary);
    void listAdvisoriesSignal(OAIControllers_AdvisoriesResponse summary);
    void listAdvisorySystemsSignal(OAIControllers_AdvisorySystemsResponse summary);
    void listPackagesSignal(OAIControllers_PackagesResponse summary);
    void listSystemAdvisoriesSignal(OAIControllers_SystemAdvisoriesResponse summary);
    void listSystemsSignal(OAIControllers_SystemsResponse summary);
    void packageSystemsSignal(OAIControllers_PackageSystemsResponse summary);
    void packageVersionsSignal(OAIControllers_PackageVersionsResponse summary);
    void systemPackagesSignal(OAIControllers_SystemPackageResponse summary);
    void viewAdvisoriesSystemsSignal(OAIControllers_AdvisoriesSystemsResponse summary);
    void viewSystemsAdvisoriesSignal(OAIControllers_SystemsAdvisoriesResponse summary);


    void deletesystemSignalFull(OAIHttpRequestWorker *worker);
    void detailAdvisorySignalFull(OAIHttpRequestWorker *worker, OAIControllers_AdvisoryDetailResponse summary);
    void detailSystemSignalFull(OAIHttpRequestWorker *worker, OAIControllers_SystemDetailResponse summary);
    void exportAdvisoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_AdvisoryInlineItem> summary);
    void exportAdvisorySystemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_SystemInlineItem> summary);
    void exportPackageSystemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_PackageSystemItem> summary);
    void exportPackagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_PackageItem> summary);
    void exportSystemAdvisoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_SystemAdvisoriesDBLookup> summary);
    void exportSystemPackagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_SystemPackageInline> summary);
    void exportSystemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIControllers_SystemInlineItem> summary);
    void latestPackageSignalFull(OAIHttpRequestWorker *worker, OAIControllers_PackageDetailResponse summary);
    void listAdvisoriesSignalFull(OAIHttpRequestWorker *worker, OAIControllers_AdvisoriesResponse summary);
    void listAdvisorySystemsSignalFull(OAIHttpRequestWorker *worker, OAIControllers_AdvisorySystemsResponse summary);
    void listPackagesSignalFull(OAIHttpRequestWorker *worker, OAIControllers_PackagesResponse summary);
    void listSystemAdvisoriesSignalFull(OAIHttpRequestWorker *worker, OAIControllers_SystemAdvisoriesResponse summary);
    void listSystemsSignalFull(OAIHttpRequestWorker *worker, OAIControllers_SystemsResponse summary);
    void packageSystemsSignalFull(OAIHttpRequestWorker *worker, OAIControllers_PackageSystemsResponse summary);
    void packageVersionsSignalFull(OAIHttpRequestWorker *worker, OAIControllers_PackageVersionsResponse summary);
    void systemPackagesSignalFull(OAIHttpRequestWorker *worker, OAIControllers_SystemPackageResponse summary);
    void viewAdvisoriesSystemsSignalFull(OAIHttpRequestWorker *worker, OAIControllers_AdvisoriesSystemsResponse summary);
    void viewSystemsAdvisoriesSignalFull(OAIHttpRequestWorker *worker, OAIControllers_SystemsAdvisoriesResponse summary);

    Q_DECL_DEPRECATED_X("Use deletesystemSignalError() instead")
    void deletesystemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletesystemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailAdvisorySignalError() instead")
    void detailAdvisorySignalE(OAIControllers_AdvisoryDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detailAdvisorySignalError(OAIControllers_AdvisoryDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailSystemSignalError() instead")
    void detailSystemSignalE(OAIControllers_SystemDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detailSystemSignalError(OAIControllers_SystemDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAdvisoriesSignalError() instead")
    void exportAdvisoriesSignalE(QList<OAIControllers_AdvisoryInlineItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAdvisoriesSignalError(QList<OAIControllers_AdvisoryInlineItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAdvisorySystemsSignalError() instead")
    void exportAdvisorySystemsSignalE(QList<OAIControllers_SystemInlineItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAdvisorySystemsSignalError(QList<OAIControllers_SystemInlineItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPackageSystemsSignalError() instead")
    void exportPackageSystemsSignalE(QList<OAIControllers_PackageSystemItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPackageSystemsSignalError(QList<OAIControllers_PackageSystemItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPackagesSignalError() instead")
    void exportPackagesSignalE(QList<OAIControllers_PackageItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPackagesSignalError(QList<OAIControllers_PackageItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemAdvisoriesSignalError() instead")
    void exportSystemAdvisoriesSignalE(QList<OAIControllers_SystemAdvisoriesDBLookup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemAdvisoriesSignalError(QList<OAIControllers_SystemAdvisoriesDBLookup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemPackagesSignalError() instead")
    void exportSystemPackagesSignalE(QList<OAIControllers_SystemPackageInline> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemPackagesSignalError(QList<OAIControllers_SystemPackageInline> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemsSignalError() instead")
    void exportSystemsSignalE(QList<OAIControllers_SystemInlineItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemsSignalError(QList<OAIControllers_SystemInlineItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestPackageSignalError() instead")
    void latestPackageSignalE(OAIControllers_PackageDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void latestPackageSignalError(OAIControllers_PackageDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdvisoriesSignalError() instead")
    void listAdvisoriesSignalE(OAIControllers_AdvisoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdvisoriesSignalError(OAIControllers_AdvisoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdvisorySystemsSignalError() instead")
    void listAdvisorySystemsSignalE(OAIControllers_AdvisorySystemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdvisorySystemsSignalError(OAIControllers_AdvisorySystemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesSignalError() instead")
    void listPackagesSignalE(OAIControllers_PackagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesSignalError(OAIControllers_PackagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSystemAdvisoriesSignalError() instead")
    void listSystemAdvisoriesSignalE(OAIControllers_SystemAdvisoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSystemAdvisoriesSignalError(OAIControllers_SystemAdvisoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSystemsSignalError() instead")
    void listSystemsSignalE(OAIControllers_SystemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSystemsSignalError(OAIControllers_SystemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSystemsSignalError() instead")
    void packageSystemsSignalE(OAIControllers_PackageSystemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSystemsSignalError(OAIControllers_PackageSystemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageVersionsSignalError() instead")
    void packageVersionsSignalE(OAIControllers_PackageVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageVersionsSignalError(OAIControllers_PackageVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemPackagesSignalError() instead")
    void systemPackagesSignalE(OAIControllers_SystemPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemPackagesSignalError(OAIControllers_SystemPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewAdvisoriesSystemsSignalError() instead")
    void viewAdvisoriesSystemsSignalE(OAIControllers_AdvisoriesSystemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewAdvisoriesSystemsSignalError(OAIControllers_AdvisoriesSystemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewSystemsAdvisoriesSignalError() instead")
    void viewSystemsAdvisoriesSignalE(OAIControllers_SystemsAdvisoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewSystemsAdvisoriesSignalError(OAIControllers_SystemsAdvisoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletesystemSignalErrorFull() instead")
    void deletesystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletesystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailAdvisorySignalErrorFull() instead")
    void detailAdvisorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detailAdvisorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detailSystemSignalErrorFull() instead")
    void detailSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detailSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAdvisoriesSignalErrorFull() instead")
    void exportAdvisoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAdvisoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAdvisorySystemsSignalErrorFull() instead")
    void exportAdvisorySystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAdvisorySystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPackageSystemsSignalErrorFull() instead")
    void exportPackageSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPackageSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportPackagesSignalErrorFull() instead")
    void exportPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemAdvisoriesSignalErrorFull() instead")
    void exportSystemAdvisoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemAdvisoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemPackagesSignalErrorFull() instead")
    void exportSystemPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSystemsSignalErrorFull() instead")
    void exportSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestPackageSignalErrorFull() instead")
    void latestPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void latestPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdvisoriesSignalErrorFull() instead")
    void listAdvisoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdvisoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdvisorySystemsSignalErrorFull() instead")
    void listAdvisorySystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdvisorySystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesSignalErrorFull() instead")
    void listPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSystemAdvisoriesSignalErrorFull() instead")
    void listSystemAdvisoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSystemAdvisoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSystemsSignalErrorFull() instead")
    void listSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSystemsSignalErrorFull() instead")
    void packageSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageVersionsSignalErrorFull() instead")
    void packageVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemPackagesSignalErrorFull() instead")
    void systemPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewAdvisoriesSystemsSignalErrorFull() instead")
    void viewAdvisoriesSystemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewAdvisoriesSystemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewSystemsAdvisoriesSignalErrorFull() instead")
    void viewSystemsAdvisoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewSystemsAdvisoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
