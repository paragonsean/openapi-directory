/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProxyKingdomApi);
  }
}(this, function(expect, ProxyKingdomApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProxyKingdomApi.Proxy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Proxy', function() {
    it('should create an instance of Proxy', function() {
      // uncomment below and update the code to test Proxy
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be.a(ProxyKingdomApi.Proxy);
    });

    it('should have the property accessType (base name: "accessType")', function() {
      // uncomment below and update the code to test the property accessType
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property isSsl (base name: "isSsl")', function() {
      // uncomment below and update the code to test the property isSsl
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property isp (base name: "isp")', function() {
      // uncomment below and update the code to test the property isp
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property lastTested (base name: "lastTested")', function() {
      // uncomment below and update the code to test the property lastTested
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property timings (base name: "timings")', function() {
      // uncomment below and update the code to test the property timings
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

    it('should have the property uptime (base name: "uptime")', function() {
      // uncomment below and update the code to test the property uptime
      //var instance = new ProxyKingdomApi.Proxy();
      //expect(instance).to.be();
    });

  });

}));
