/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Proxy from '../model/Proxy';

/**
* Proxy service.
* @module api/ProxyApi
* @version v1
*/
export default class ProxyApi {

    /**
    * Constructs a new ProxyApi. 
    * @alias module:api/ProxyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the proxyGet operation.
     * @callback module:api/ProxyApi~proxyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proxy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a random proxy for chosen parameters.
     * @param {String} correlationId Correlation Id header field
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @param {String} [address] 
     * @param {String} [port] 
     * @param {String} [protocol] 
     * @param {String} [accessType] 
     * @param {String} [responseTime] 
     * @param {String} [isSsl] 
     * @param {String} [uptime] 
     * @param {String} [country] 
     * @param {String} [continent] 
     * @param {String} [timezone] 
     * @param {String} [lastTested] 
     * @param {module:api/ProxyApi~proxyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proxy}
     */
    proxyGet(correlationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'correlationId' is set
      if (correlationId === undefined || correlationId === null) {
        throw new Error("Missing the required parameter 'correlationId' when calling proxyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'Token': opts['token'],
        'Address': opts['address'],
        'Port': opts['port'],
        'Protocol': opts['protocol'],
        'AccessType': opts['accessType'],
        'ResponseTime': opts['responseTime'],
        'IsSsl': opts['isSsl'],
        'Uptime': opts['uptime'],
        'Country': opts['country'],
        'Continent': opts['continent'],
        'Timezone': opts['timezone'],
        'LastTested': opts['lastTested']
      };
      let headerParams = {
        'correlation_id': correlationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = Proxy;
      return this.apiClient.callApi(
        '/proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
