/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Isp from './Isp';
import Location from './Location';
import Timings from './Timings';

/**
 * The Proxy model module.
 * @module model/Proxy
 * @version v1
 */
class Proxy {
    /**
     * Constructs a new <code>Proxy</code>.
     * @alias module:model/Proxy
     */
    constructor() { 
        
        Proxy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Proxy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proxy} obj Optional instance to populate.
     * @return {module:model/Proxy} The populated <code>Proxy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proxy();

            if (data.hasOwnProperty('accessType')) {
                obj['accessType'] = ApiClient.convertToType(data['accessType'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('isSsl')) {
                obj['isSsl'] = ApiClient.convertToType(data['isSsl'], 'Boolean');
            }
            if (data.hasOwnProperty('isp')) {
                obj['isp'] = Isp.constructFromObject(data['isp']);
            }
            if (data.hasOwnProperty('lastTested')) {
                obj['lastTested'] = ApiClient.convertToType(data['lastTested'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('timings')) {
                obj['timings'] = Timings.constructFromObject(data['timings']);
            }
            if (data.hasOwnProperty('uptime')) {
                obj['uptime'] = ApiClient.convertToType(data['uptime'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proxy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proxy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessType'] && !(typeof data['accessType'] === 'string' || data['accessType'] instanceof String)) {
            throw new Error("Expected the field `accessType` to be a primitive type in the JSON string but got " + data['accessType']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `isp`
        if (data['isp']) { // data not null
          Isp.validateJSON(data['isp']);
        }
        // ensure the json data is a string
        if (data['lastTested'] && !(typeof data['lastTested'] === 'string' || data['lastTested'] instanceof String)) {
            throw new Error("Expected the field `lastTested` to be a primitive type in the JSON string but got " + data['lastTested']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // validate the optional field `timings`
        if (data['timings']) { // data not null
          Timings.validateJSON(data['timings']);
        }

        return true;
    }


}



/**
 * @member {String} accessType
 */
Proxy.prototype['accessType'] = undefined;

/**
 * @member {String} address
 */
Proxy.prototype['address'] = undefined;

/**
 * @member {Boolean} isSsl
 */
Proxy.prototype['isSsl'] = undefined;

/**
 * @member {module:model/Isp} isp
 */
Proxy.prototype['isp'] = undefined;

/**
 * @member {String} lastTested
 */
Proxy.prototype['lastTested'] = undefined;

/**
 * @member {module:model/Location} location
 */
Proxy.prototype['location'] = undefined;

/**
 * @member {Number} port
 */
Proxy.prototype['port'] = undefined;

/**
 * @member {String} protocol
 */
Proxy.prototype['protocol'] = undefined;

/**
 * @member {module:model/Timings} timings
 */
Proxy.prototype['timings'] = undefined;

/**
 * @member {Number} uptime
 */
Proxy.prototype['uptime'] = undefined;






export default Proxy;

