/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Continent from './Continent';
import Country from './Country';
import Subdivision from './Subdivision';

/**
 * The Location model module.
 * @module model/Location
 * @version v1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('accuracyRadius')) {
                obj['accuracyRadius'] = ApiClient.convertToType(data['accuracyRadius'], 'Number');
            }
            if (data.hasOwnProperty('cityName')) {
                obj['cityName'] = ApiClient.convertToType(data['cityName'], 'String');
            }
            if (data.hasOwnProperty('continent')) {
                obj['continent'] = Continent.constructFromObject(data['continent']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('subdivisions')) {
                obj['subdivisions'] = ApiClient.convertToType(data['subdivisions'], [Subdivision]);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cityName'] && !(typeof data['cityName'] === 'string' || data['cityName'] instanceof String)) {
            throw new Error("Expected the field `cityName` to be a primitive type in the JSON string but got " + data['cityName']);
        }
        // validate the optional field `continent`
        if (data['continent']) { // data not null
          Continent.validateJSON(data['continent']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        if (data['subdivisions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subdivisions'])) {
                throw new Error("Expected the field `subdivisions` to be an array in the JSON data but got " + data['subdivisions']);
            }
            // validate the optional field `subdivisions` (array)
            for (const item of data['subdivisions']) {
                Subdivision.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * @member {Number} accuracyRadius
 */
Location.prototype['accuracyRadius'] = undefined;

/**
 * @member {String} cityName
 */
Location.prototype['cityName'] = undefined;

/**
 * @member {module:model/Continent} continent
 */
Location.prototype['continent'] = undefined;

/**
 * @member {module:model/Country} country
 */
Location.prototype['country'] = undefined;

/**
 * @member {Number} latitude
 */
Location.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
Location.prototype['longitude'] = undefined;

/**
 * @member {String} postalCode
 */
Location.prototype['postalCode'] = undefined;

/**
 * @member {Array.<module:model/Subdivision>} subdivisions
 */
Location.prototype['subdivisions'] = undefined;

/**
 * @member {String} timezone
 */
Location.prototype['timezone'] = undefined;






export default Location;

