# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.isp import Isp
from openapi_server.models.location import Location
from openapi_server.models.timings import Timings
from openapi_server import util


class Proxy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type: str=None, address: str=None, is_ssl: bool=None, isp: Isp=None, last_tested: str=None, location: Location=None, port: int=None, protocol: str=None, timings: Timings=None, uptime: float=None):
        """Proxy - a model defined in OpenAPI

        :param access_type: The access_type of this Proxy.
        :param address: The address of this Proxy.
        :param is_ssl: The is_ssl of this Proxy.
        :param isp: The isp of this Proxy.
        :param last_tested: The last_tested of this Proxy.
        :param location: The location of this Proxy.
        :param port: The port of this Proxy.
        :param protocol: The protocol of this Proxy.
        :param timings: The timings of this Proxy.
        :param uptime: The uptime of this Proxy.
        """
        self.openapi_types = {
            'access_type': str,
            'address': str,
            'is_ssl': bool,
            'isp': Isp,
            'last_tested': str,
            'location': Location,
            'port': int,
            'protocol': str,
            'timings': Timings,
            'uptime': float
        }

        self.attribute_map = {
            'access_type': 'accessType',
            'address': 'address',
            'is_ssl': 'isSsl',
            'isp': 'isp',
            'last_tested': 'lastTested',
            'location': 'location',
            'port': 'port',
            'protocol': 'protocol',
            'timings': 'timings',
            'uptime': 'uptime'
        }

        self._access_type = access_type
        self._address = address
        self._is_ssl = is_ssl
        self._isp = isp
        self._last_tested = last_tested
        self._location = location
        self._port = port
        self._protocol = protocol
        self._timings = timings
        self._uptime = uptime

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proxy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proxy of this Proxy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this Proxy.


        :return: The access_type of this Proxy.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Proxy.


        :param access_type: The access_type of this Proxy.
        :type access_type: str
        """

        self._access_type = access_type

    @property
    def address(self):
        """Gets the address of this Proxy.


        :return: The address of this Proxy.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Proxy.


        :param address: The address of this Proxy.
        :type address: str
        """

        self._address = address

    @property
    def is_ssl(self):
        """Gets the is_ssl of this Proxy.


        :return: The is_ssl of this Proxy.
        :rtype: bool
        """
        return self._is_ssl

    @is_ssl.setter
    def is_ssl(self, is_ssl):
        """Sets the is_ssl of this Proxy.


        :param is_ssl: The is_ssl of this Proxy.
        :type is_ssl: bool
        """

        self._is_ssl = is_ssl

    @property
    def isp(self):
        """Gets the isp of this Proxy.


        :return: The isp of this Proxy.
        :rtype: Isp
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this Proxy.


        :param isp: The isp of this Proxy.
        :type isp: Isp
        """

        self._isp = isp

    @property
    def last_tested(self):
        """Gets the last_tested of this Proxy.


        :return: The last_tested of this Proxy.
        :rtype: str
        """
        return self._last_tested

    @last_tested.setter
    def last_tested(self, last_tested):
        """Sets the last_tested of this Proxy.


        :param last_tested: The last_tested of this Proxy.
        :type last_tested: str
        """

        self._last_tested = last_tested

    @property
    def location(self):
        """Gets the location of this Proxy.


        :return: The location of this Proxy.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Proxy.


        :param location: The location of this Proxy.
        :type location: Location
        """

        self._location = location

    @property
    def port(self):
        """Gets the port of this Proxy.


        :return: The port of this Proxy.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Proxy.


        :param port: The port of this Proxy.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this Proxy.


        :return: The protocol of this Proxy.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Proxy.


        :param protocol: The protocol of this Proxy.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def timings(self):
        """Gets the timings of this Proxy.


        :return: The timings of this Proxy.
        :rtype: Timings
        """
        return self._timings

    @timings.setter
    def timings(self, timings):
        """Sets the timings of this Proxy.


        :param timings: The timings of this Proxy.
        :type timings: Timings
        """

        self._timings = timings

    @property
    def uptime(self):
        """Gets the uptime of this Proxy.


        :return: The uptime of this Proxy.
        :rtype: float
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this Proxy.


        :param uptime: The uptime of this Proxy.
        :type uptime: float
        """

        self._uptime = uptime
