# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continent import Continent
from openapi_server.models.country import Country
from openapi_server.models.subdivision import Subdivision
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy_radius: int=None, city_name: str=None, continent: Continent=None, country: Country=None, latitude: float=None, longitude: float=None, postal_code: str=None, subdivisions: List[Subdivision]=None, timezone: str=None):
        """Location - a model defined in OpenAPI

        :param accuracy_radius: The accuracy_radius of this Location.
        :param city_name: The city_name of this Location.
        :param continent: The continent of this Location.
        :param country: The country of this Location.
        :param latitude: The latitude of this Location.
        :param longitude: The longitude of this Location.
        :param postal_code: The postal_code of this Location.
        :param subdivisions: The subdivisions of this Location.
        :param timezone: The timezone of this Location.
        """
        self.openapi_types = {
            'accuracy_radius': int,
            'city_name': str,
            'continent': Continent,
            'country': Country,
            'latitude': float,
            'longitude': float,
            'postal_code': str,
            'subdivisions': List[Subdivision],
            'timezone': str
        }

        self.attribute_map = {
            'accuracy_radius': 'accuracyRadius',
            'city_name': 'cityName',
            'continent': 'continent',
            'country': 'country',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'postal_code': 'postalCode',
            'subdivisions': 'subdivisions',
            'timezone': 'timezone'
        }

        self._accuracy_radius = accuracy_radius
        self._city_name = city_name
        self._continent = continent
        self._country = country
        self._latitude = latitude
        self._longitude = longitude
        self._postal_code = postal_code
        self._subdivisions = subdivisions
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_radius(self):
        """Gets the accuracy_radius of this Location.


        :return: The accuracy_radius of this Location.
        :rtype: int
        """
        return self._accuracy_radius

    @accuracy_radius.setter
    def accuracy_radius(self, accuracy_radius):
        """Sets the accuracy_radius of this Location.


        :param accuracy_radius: The accuracy_radius of this Location.
        :type accuracy_radius: int
        """

        self._accuracy_radius = accuracy_radius

    @property
    def city_name(self):
        """Gets the city_name of this Location.


        :return: The city_name of this Location.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this Location.


        :param city_name: The city_name of this Location.
        :type city_name: str
        """

        self._city_name = city_name

    @property
    def continent(self):
        """Gets the continent of this Location.


        :return: The continent of this Location.
        :rtype: Continent
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this Location.


        :param continent: The continent of this Location.
        :type continent: Continent
        """

        self._continent = continent

    @property
    def country(self):
        """Gets the country of this Location.


        :return: The country of this Location.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.


        :param country: The country of this Location.
        :type country: Country
        """

        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this Location.


        :return: The latitude of this Location.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.


        :param latitude: The latitude of this Location.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Location.


        :return: The longitude of this Location.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.


        :param longitude: The longitude of this Location.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def postal_code(self):
        """Gets the postal_code of this Location.


        :return: The postal_code of this Location.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Location.


        :param postal_code: The postal_code of this Location.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def subdivisions(self):
        """Gets the subdivisions of this Location.


        :return: The subdivisions of this Location.
        :rtype: List[Subdivision]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """Sets the subdivisions of this Location.


        :param subdivisions: The subdivisions of this Location.
        :type subdivisions: List[Subdivision]
        """

        self._subdivisions = subdivisions

    @property
    def timezone(self):
        """Gets the timezone of this Location.


        :return: The timezone of this Location.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Location.


        :param timezone: The timezone of this Location.
        :type timezone: str
        """

        self._timezone = timezone
