/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_accuracy_radius_isSet = false;
    m_accuracy_radius_isValid = false;

    m_city_name_isSet = false;
    m_city_name_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_subdivisions_isSet = false;
    m_subdivisions_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_accuracy_radius_isValid = ::OpenAPI::fromJsonValue(m_accuracy_radius, json[QString("accuracyRadius")]);
    m_accuracy_radius_isSet = !json[QString("accuracyRadius")].isNull() && m_accuracy_radius_isValid;

    m_city_name_isValid = ::OpenAPI::fromJsonValue(m_city_name, json[QString("cityName")]);
    m_city_name_isSet = !json[QString("cityName")].isNull() && m_city_name_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(m_continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_subdivisions_isValid = ::OpenAPI::fromJsonValue(m_subdivisions, json[QString("subdivisions")]);
    m_subdivisions_isSet = !json[QString("subdivisions")].isNull() && m_subdivisions_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_radius_isSet) {
        obj.insert(QString("accuracyRadius"), ::OpenAPI::toJsonValue(m_accuracy_radius));
    }
    if (m_city_name_isSet) {
        obj.insert(QString("cityName"), ::OpenAPI::toJsonValue(m_city_name));
    }
    if (m_continent.isSet()) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(m_continent));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_subdivisions.size() > 0) {
        obj.insert(QString("subdivisions"), ::OpenAPI::toJsonValue(m_subdivisions));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

qint32 OAILocation::getAccuracyRadius() const {
    return m_accuracy_radius;
}
void OAILocation::setAccuracyRadius(const qint32 &accuracy_radius) {
    m_accuracy_radius = accuracy_radius;
    m_accuracy_radius_isSet = true;
}

bool OAILocation::is_accuracy_radius_Set() const{
    return m_accuracy_radius_isSet;
}

bool OAILocation::is_accuracy_radius_Valid() const{
    return m_accuracy_radius_isValid;
}

QString OAILocation::getCityName() const {
    return m_city_name;
}
void OAILocation::setCityName(const QString &city_name) {
    m_city_name = city_name;
    m_city_name_isSet = true;
}

bool OAILocation::is_city_name_Set() const{
    return m_city_name_isSet;
}

bool OAILocation::is_city_name_Valid() const{
    return m_city_name_isValid;
}

OAIContinent OAILocation::getContinent() const {
    return m_continent;
}
void OAILocation::setContinent(const OAIContinent &continent) {
    m_continent = continent;
    m_continent_isSet = true;
}

bool OAILocation::is_continent_Set() const{
    return m_continent_isSet;
}

bool OAILocation::is_continent_Valid() const{
    return m_continent_isValid;
}

OAICountry OAILocation::getCountry() const {
    return m_country;
}
void OAILocation::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation::is_country_Valid() const{
    return m_country_isValid;
}

float OAILocation::getLatitude() const {
    return m_latitude;
}
void OAILocation::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAILocation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAILocation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAILocation::getLongitude() const {
    return m_longitude;
}
void OAILocation::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAILocation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAILocation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAILocation::getPostalCode() const {
    return m_postal_code;
}
void OAILocation::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAILocation::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAILocation::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<OAISubdivision> OAILocation::getSubdivisions() const {
    return m_subdivisions;
}
void OAILocation::setSubdivisions(const QList<OAISubdivision> &subdivisions) {
    m_subdivisions = subdivisions;
    m_subdivisions_isSet = true;
}

bool OAILocation::is_subdivisions_Set() const{
    return m_subdivisions_isSet;
}

bool OAILocation::is_subdivisions_Valid() const{
    return m_subdivisions_isValid;
}

QString OAILocation::getTimezone() const {
    return m_timezone;
}
void OAILocation::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAILocation::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAILocation::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
