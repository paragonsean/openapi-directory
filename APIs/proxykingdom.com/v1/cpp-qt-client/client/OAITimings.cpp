/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimings::OAITimings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimings::OAITimings() {
    this->initializeModel();
}

OAITimings::~OAITimings() {}

void OAITimings::initializeModel() {

    m_connect_time_isSet = false;
    m_connect_time_isValid = false;

    m_first_byte_time_isSet = false;
    m_first_byte_time_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;
}

void OAITimings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimings::fromJsonObject(QJsonObject json) {

    m_connect_time_isValid = ::OpenAPI::fromJsonValue(m_connect_time, json[QString("connectTime")]);
    m_connect_time_isSet = !json[QString("connectTime")].isNull() && m_connect_time_isValid;

    m_first_byte_time_isValid = ::OpenAPI::fromJsonValue(m_first_byte_time, json[QString("firstByteTime")]);
    m_first_byte_time_isSet = !json[QString("firstByteTime")].isNull() && m_first_byte_time_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("responseTime")]);
    m_response_time_isSet = !json[QString("responseTime")].isNull() && m_response_time_isValid;
}

QString OAITimings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimings::asJsonObject() const {
    QJsonObject obj;
    if (m_connect_time_isSet) {
        obj.insert(QString("connectTime"), ::OpenAPI::toJsonValue(m_connect_time));
    }
    if (m_first_byte_time_isSet) {
        obj.insert(QString("firstByteTime"), ::OpenAPI::toJsonValue(m_first_byte_time));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("responseTime"), ::OpenAPI::toJsonValue(m_response_time));
    }
    return obj;
}

float OAITimings::getConnectTime() const {
    return m_connect_time;
}
void OAITimings::setConnectTime(const float &connect_time) {
    m_connect_time = connect_time;
    m_connect_time_isSet = true;
}

bool OAITimings::is_connect_time_Set() const{
    return m_connect_time_isSet;
}

bool OAITimings::is_connect_time_Valid() const{
    return m_connect_time_isValid;
}

float OAITimings::getFirstByteTime() const {
    return m_first_byte_time;
}
void OAITimings::setFirstByteTime(const float &first_byte_time) {
    m_first_byte_time = first_byte_time;
    m_first_byte_time_isSet = true;
}

bool OAITimings::is_first_byte_time_Set() const{
    return m_first_byte_time_isSet;
}

bool OAITimings::is_first_byte_time_Valid() const{
    return m_first_byte_time_isValid;
}

float OAITimings::getResponseTime() const {
    return m_response_time;
}
void OAITimings::setResponseTime(const float &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAITimings::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAITimings::is_response_time_Valid() const{
    return m_response_time_isValid;
}

bool OAITimings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connect_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_byte_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
