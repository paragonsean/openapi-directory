/**
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxy::OAIProxy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxy::OAIProxy() {
    this->initializeModel();
}

OAIProxy::~OAIProxy() {}

void OAIProxy::initializeModel() {

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_is_ssl_isSet = false;
    m_is_ssl_isValid = false;

    m_isp_isSet = false;
    m_isp_isValid = false;

    m_last_tested_isSet = false;
    m_last_tested_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_timings_isSet = false;
    m_timings_isValid = false;

    m_uptime_isSet = false;
    m_uptime_isValid = false;
}

void OAIProxy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxy::fromJsonObject(QJsonObject json) {

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("accessType")]);
    m_access_type_isSet = !json[QString("accessType")].isNull() && m_access_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_is_ssl_isValid = ::OpenAPI::fromJsonValue(m_is_ssl, json[QString("isSsl")]);
    m_is_ssl_isSet = !json[QString("isSsl")].isNull() && m_is_ssl_isValid;

    m_isp_isValid = ::OpenAPI::fromJsonValue(m_isp, json[QString("isp")]);
    m_isp_isSet = !json[QString("isp")].isNull() && m_isp_isValid;

    m_last_tested_isValid = ::OpenAPI::fromJsonValue(m_last_tested, json[QString("lastTested")]);
    m_last_tested_isSet = !json[QString("lastTested")].isNull() && m_last_tested_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_timings_isValid = ::OpenAPI::fromJsonValue(m_timings, json[QString("timings")]);
    m_timings_isSet = !json[QString("timings")].isNull() && m_timings_isValid;

    m_uptime_isValid = ::OpenAPI::fromJsonValue(m_uptime, json[QString("uptime")]);
    m_uptime_isSet = !json[QString("uptime")].isNull() && m_uptime_isValid;
}

QString OAIProxy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxy::asJsonObject() const {
    QJsonObject obj;
    if (m_access_type_isSet) {
        obj.insert(QString("accessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_is_ssl_isSet) {
        obj.insert(QString("isSsl"), ::OpenAPI::toJsonValue(m_is_ssl));
    }
    if (m_isp.isSet()) {
        obj.insert(QString("isp"), ::OpenAPI::toJsonValue(m_isp));
    }
    if (m_last_tested_isSet) {
        obj.insert(QString("lastTested"), ::OpenAPI::toJsonValue(m_last_tested));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_timings.isSet()) {
        obj.insert(QString("timings"), ::OpenAPI::toJsonValue(m_timings));
    }
    if (m_uptime_isSet) {
        obj.insert(QString("uptime"), ::OpenAPI::toJsonValue(m_uptime));
    }
    return obj;
}

QString OAIProxy::getAccessType() const {
    return m_access_type;
}
void OAIProxy::setAccessType(const QString &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAIProxy::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIProxy::is_access_type_Valid() const{
    return m_access_type_isValid;
}

QString OAIProxy::getAddress() const {
    return m_address;
}
void OAIProxy::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIProxy::is_address_Set() const{
    return m_address_isSet;
}

bool OAIProxy::is_address_Valid() const{
    return m_address_isValid;
}

bool OAIProxy::isIsSsl() const {
    return m_is_ssl;
}
void OAIProxy::setIsSsl(const bool &is_ssl) {
    m_is_ssl = is_ssl;
    m_is_ssl_isSet = true;
}

bool OAIProxy::is_is_ssl_Set() const{
    return m_is_ssl_isSet;
}

bool OAIProxy::is_is_ssl_Valid() const{
    return m_is_ssl_isValid;
}

OAIIsp OAIProxy::getIsp() const {
    return m_isp;
}
void OAIProxy::setIsp(const OAIIsp &isp) {
    m_isp = isp;
    m_isp_isSet = true;
}

bool OAIProxy::is_isp_Set() const{
    return m_isp_isSet;
}

bool OAIProxy::is_isp_Valid() const{
    return m_isp_isValid;
}

QString OAIProxy::getLastTested() const {
    return m_last_tested;
}
void OAIProxy::setLastTested(const QString &last_tested) {
    m_last_tested = last_tested;
    m_last_tested_isSet = true;
}

bool OAIProxy::is_last_tested_Set() const{
    return m_last_tested_isSet;
}

bool OAIProxy::is_last_tested_Valid() const{
    return m_last_tested_isValid;
}

OAILocation OAIProxy::getLocation() const {
    return m_location;
}
void OAIProxy::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProxy::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProxy::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIProxy::getPort() const {
    return m_port;
}
void OAIProxy::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIProxy::is_port_Set() const{
    return m_port_isSet;
}

bool OAIProxy::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIProxy::getProtocol() const {
    return m_protocol;
}
void OAIProxy::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIProxy::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIProxy::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAITimings OAIProxy::getTimings() const {
    return m_timings;
}
void OAIProxy::setTimings(const OAITimings &timings) {
    m_timings = timings;
    m_timings_isSet = true;
}

bool OAIProxy::is_timings_Set() const{
    return m_timings_isSet;
}

bool OAIProxy::is_timings_Valid() const{
    return m_timings_isValid;
}

float OAIProxy::getUptime() const {
    return m_uptime;
}
void OAIProxy::setUptime(const float &uptime) {
    m_uptime = uptime;
    m_uptime_isSet = true;
}

bool OAIProxy::is_uptime_Set() const{
    return m_uptime_isSet;
}

bool OAIProxy::is_uptime_Valid() const{
    return m_uptime_isValid;
}

bool OAIProxy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_tested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uptime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
