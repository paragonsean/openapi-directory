/*
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Proxy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProxyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for proxyGet
     * @param correlationId Correlation Id header field (required)
     * @param token  (optional)
     * @param address  (optional)
     * @param port  (optional)
     * @param protocol  (optional)
     * @param accessType  (optional)
     * @param responseTime  (optional)
     * @param isSsl  (optional)
     * @param uptime  (optional)
     * @param country  (optional)
     * @param continent  (optional)
     * @param timezone  (optional)
     * @param lastTested  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid proxy filter provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Proxy found for GetProxy by filter. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Subscription limit reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Technical Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyGetCall(String correlationId, String token, String address, String port, String protocol, String accessType, String responseTime, String isSsl, String uptime, String country, String continent, String timezone, String lastTested, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/proxy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Token", token));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Address", address));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Protocol", protocol));
        }

        if (accessType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AccessType", accessType));
        }

        if (responseTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResponseTime", responseTime));
        }

        if (isSsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsSsl", isSsl));
        }

        if (uptime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Uptime", uptime));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Country", country));
        }

        if (continent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Continent", continent));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timezone", timezone));
        }

        if (lastTested != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastTested", lastTested));
        }

        if (correlationId != null) {
            localVarHeaderParams.put("correlation_id", localVarApiClient.parameterToString(correlationId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyGetValidateBeforeCall(String correlationId, String token, String address, String port, String protocol, String accessType, String responseTime, String isSsl, String uptime, String country, String continent, String timezone, String lastTested, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlationId' is set
        if (correlationId == null) {
            throw new ApiException("Missing the required parameter 'correlationId' when calling proxyGet(Async)");
        }

        return proxyGetCall(correlationId, token, address, port, protocol, accessType, responseTime, isSsl, uptime, country, continent, timezone, lastTested, _callback);

    }

    /**
     * Gets a random proxy for chosen parameters.
     * 
     * @param correlationId Correlation Id header field (required)
     * @param token  (optional)
     * @param address  (optional)
     * @param port  (optional)
     * @param protocol  (optional)
     * @param accessType  (optional)
     * @param responseTime  (optional)
     * @param isSsl  (optional)
     * @param uptime  (optional)
     * @param country  (optional)
     * @param continent  (optional)
     * @param timezone  (optional)
     * @param lastTested  (optional)
     * @return Proxy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid proxy filter provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Proxy found for GetProxy by filter. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Subscription limit reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Technical Error. </td><td>  -  </td></tr>
     </table>
     */
    public Proxy proxyGet(String correlationId, String token, String address, String port, String protocol, String accessType, String responseTime, String isSsl, String uptime, String country, String continent, String timezone, String lastTested) throws ApiException {
        ApiResponse<Proxy> localVarResp = proxyGetWithHttpInfo(correlationId, token, address, port, protocol, accessType, responseTime, isSsl, uptime, country, continent, timezone, lastTested);
        return localVarResp.getData();
    }

    /**
     * Gets a random proxy for chosen parameters.
     * 
     * @param correlationId Correlation Id header field (required)
     * @param token  (optional)
     * @param address  (optional)
     * @param port  (optional)
     * @param protocol  (optional)
     * @param accessType  (optional)
     * @param responseTime  (optional)
     * @param isSsl  (optional)
     * @param uptime  (optional)
     * @param country  (optional)
     * @param continent  (optional)
     * @param timezone  (optional)
     * @param lastTested  (optional)
     * @return ApiResponse&lt;Proxy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid proxy filter provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Proxy found for GetProxy by filter. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Subscription limit reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Technical Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Proxy> proxyGetWithHttpInfo(String correlationId, String token, String address, String port, String protocol, String accessType, String responseTime, String isSsl, String uptime, String country, String continent, String timezone, String lastTested) throws ApiException {
        okhttp3.Call localVarCall = proxyGetValidateBeforeCall(correlationId, token, address, port, protocol, accessType, responseTime, isSsl, uptime, country, continent, timezone, lastTested, null);
        Type localVarReturnType = new TypeToken<Proxy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a random proxy for chosen parameters. (asynchronously)
     * 
     * @param correlationId Correlation Id header field (required)
     * @param token  (optional)
     * @param address  (optional)
     * @param port  (optional)
     * @param protocol  (optional)
     * @param accessType  (optional)
     * @param responseTime  (optional)
     * @param isSsl  (optional)
     * @param uptime  (optional)
     * @param country  (optional)
     * @param continent  (optional)
     * @param timezone  (optional)
     * @param lastTested  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid proxy filter provided. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Proxy found for GetProxy by filter. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Subscription limit reached. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Technical Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyGetAsync(String correlationId, String token, String address, String port, String protocol, String accessType, String responseTime, String isSsl, String uptime, String country, String continent, String timezone, String lastTested, final ApiCallback<Proxy> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyGetValidateBeforeCall(correlationId, token, address, port, protocol, accessType, responseTime, isSsl, uptime, country, continent, timezone, lastTested, _callback);
        Type localVarReturnType = new TypeToken<Proxy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
