/*
 * ProxyKingdom-Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Isp;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Timings;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proxy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:42.282711-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Proxy {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "accessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private String accessType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_IS_SSL = "isSsl";
  @SerializedName(SERIALIZED_NAME_IS_SSL)
  private Boolean isSsl;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private Isp isp;

  public static final String SERIALIZED_NAME_LAST_TESTED = "lastTested";
  @SerializedName(SERIALIZED_NAME_LAST_TESTED)
  private String lastTested;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_TIMINGS = "timings";
  @SerializedName(SERIALIZED_NAME_TIMINGS)
  private Timings timings;

  public static final String SERIALIZED_NAME_UPTIME = "uptime";
  @SerializedName(SERIALIZED_NAME_UPTIME)
  private Float uptime;

  public Proxy() {
  }

  public Proxy(
     String accessType, 
     String address, 
     Boolean isSsl, 
     String lastTested, 
     Integer port, 
     String protocol, 
     Float uptime
  ) {
    this();
    this.accessType = accessType;
    this.address = address;
    this.isSsl = isSsl;
    this.lastTested = lastTested;
    this.port = port;
    this.protocol = protocol;
    this.uptime = uptime;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }



  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * Get isSsl
   * @return isSsl
   */
  @javax.annotation.Nullable
  public Boolean getIsSsl() {
    return isSsl;
  }



  public Proxy isp(Isp isp) {
    this.isp = isp;
    return this;
  }

  /**
   * Get isp
   * @return isp
   */
  @javax.annotation.Nullable
  public Isp getIsp() {
    return isp;
  }

  public void setIsp(Isp isp) {
    this.isp = isp;
  }


  /**
   * Get lastTested
   * @return lastTested
   */
  @javax.annotation.Nullable
  public String getLastTested() {
    return lastTested;
  }



  public Proxy location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }



  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }



  public Proxy timings(Timings timings) {
    this.timings = timings;
    return this;
  }

  /**
   * Get timings
   * @return timings
   */
  @javax.annotation.Nullable
  public Timings getTimings() {
    return timings;
  }

  public void setTimings(Timings timings) {
    this.timings = timings;
  }


  /**
   * Get uptime
   * @return uptime
   */
  @javax.annotation.Nullable
  public Float getUptime() {
    return uptime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proxy proxy = (Proxy) o;
    return Objects.equals(this.accessType, proxy.accessType) &&
        Objects.equals(this.address, proxy.address) &&
        Objects.equals(this.isSsl, proxy.isSsl) &&
        Objects.equals(this.isp, proxy.isp) &&
        Objects.equals(this.lastTested, proxy.lastTested) &&
        Objects.equals(this.location, proxy.location) &&
        Objects.equals(this.port, proxy.port) &&
        Objects.equals(this.protocol, proxy.protocol) &&
        Objects.equals(this.timings, proxy.timings) &&
        Objects.equals(this.uptime, proxy.uptime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, address, isSsl, isp, lastTested, location, port, protocol, timings, uptime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proxy {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    isSsl: ").append(toIndentedString(isSsl)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    lastTested: ").append(toIndentedString(lastTested)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timings: ").append(toIndentedString(timings)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessType");
    openapiFields.add("address");
    openapiFields.add("isSsl");
    openapiFields.add("isp");
    openapiFields.add("lastTested");
    openapiFields.add("location");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("timings");
    openapiFields.add("uptime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Proxy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Proxy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Proxy is not found in the empty JSON string", Proxy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Proxy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Proxy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessType") != null && !jsonObj.get("accessType").isJsonNull()) && !jsonObj.get("accessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessType").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the optional field `isp`
      if (jsonObj.get("isp") != null && !jsonObj.get("isp").isJsonNull()) {
        Isp.validateJsonElement(jsonObj.get("isp"));
      }
      if ((jsonObj.get("lastTested") != null && !jsonObj.get("lastTested").isJsonNull()) && !jsonObj.get("lastTested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTested").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `timings`
      if (jsonObj.get("timings") != null && !jsonObj.get("timings").isJsonNull()) {
        Timings.validateJsonElement(jsonObj.get("timings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Proxy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Proxy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Proxy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Proxy.class));

       return (TypeAdapter<T>) new TypeAdapter<Proxy>() {
           @Override
           public void write(JsonWriter out, Proxy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Proxy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Proxy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Proxy
   * @throws IOException if the JSON string is invalid with respect to Proxy
   */
  public static Proxy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Proxy.class);
  }

  /**
   * Convert an instance of Proxy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

