/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventRelatedEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventRelatedEntity::OAIEventRelatedEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventRelatedEntity::OAIEventRelatedEntity() {
    this->initializeModel();
}

OAIEventRelatedEntity::~OAIEventRelatedEntity() {}

void OAIEventRelatedEntity::initializeModel() {

    m_bill_isSet = false;
    m_bill_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_vote_isSet = false;
    m_vote_isValid = false;
}

void OAIEventRelatedEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventRelatedEntity::fromJsonObject(QJsonObject json) {

    m_bill_isValid = ::OpenAPI::fromJsonValue(m_bill, json[QString("bill")]);
    m_bill_isSet = !json[QString("bill")].isNull() && m_bill_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_vote_isValid = ::OpenAPI::fromJsonValue(m_vote, json[QString("vote")]);
    m_vote_isSet = !json[QString("vote")].isNull() && m_vote_isValid;
}

QString OAIEventRelatedEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventRelatedEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_bill.isSet()) {
        obj.insert(QString("bill"), ::OpenAPI::toJsonValue(m_bill));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_vote.isSet()) {
        obj.insert(QString("vote"), ::OpenAPI::toJsonValue(m_vote));
    }
    return obj;
}

OAICompactBill OAIEventRelatedEntity::getBill() const {
    return m_bill;
}
void OAIEventRelatedEntity::setBill(const OAICompactBill &bill) {
    m_bill = bill;
    m_bill_isSet = true;
}

bool OAIEventRelatedEntity::is_bill_Set() const{
    return m_bill_isSet;
}

bool OAIEventRelatedEntity::is_bill_Valid() const{
    return m_bill_isValid;
}

QString OAIEventRelatedEntity::getEntityType() const {
    return m_entity_type;
}
void OAIEventRelatedEntity::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEventRelatedEntity::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEventRelatedEntity::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEventRelatedEntity::getName() const {
    return m_name;
}
void OAIEventRelatedEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventRelatedEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventRelatedEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventRelatedEntity::getNote() const {
    return m_note;
}
void OAIEventRelatedEntity::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIEventRelatedEntity::is_note_Set() const{
    return m_note_isSet;
}

bool OAIEventRelatedEntity::is_note_Valid() const{
    return m_note_isValid;
}

OAIOrganization OAIEventRelatedEntity::getOrganization() const {
    return m_organization;
}
void OAIEventRelatedEntity::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIEventRelatedEntity::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIEventRelatedEntity::is_organization_Valid() const{
    return m_organization_isValid;
}

OAICompactPerson OAIEventRelatedEntity::getPerson() const {
    return m_person;
}
void OAIEventRelatedEntity::setPerson(const OAICompactPerson &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIEventRelatedEntity::is_person_Set() const{
    return m_person_isSet;
}

bool OAIEventRelatedEntity::is_person_Valid() const{
    return m_person_isValid;
}

OAICompactVoteEvent OAIEventRelatedEntity::getVote() const {
    return m_vote;
}
void OAIEventRelatedEntity::setVote(const OAICompactVoteEvent &vote) {
    m_vote = vote;
    m_vote_isSet = true;
}

bool OAIEventRelatedEntity::is_vote_Set() const{
    return m_vote_isSet;
}

bool OAIEventRelatedEntity::is_vote_Valid() const{
    return m_vote_isValid;
}

bool OAIEventRelatedEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventRelatedEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_type_isValid && m_name_isValid && m_note_isValid && true;
}

} // namespace OpenAPI
