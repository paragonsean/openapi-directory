/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBillsApi_H
#define OAI_OAIBillsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBill.h"
#include "OAIBillInclude.h"
#include "OAIBillList.h"
#include "OAIBillSortOption.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBillsApi : public QObject {
    Q_OBJECT

public:
    OAIBillsApi(const int timeOut = 0);
    ~OAIBillsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  jurisdiction QString [required]
    * @param[in]  session QString [required]
    * @param[in]  bill_id QString [required]
    * @param[in]  include QList<OAIBillInclude> [optional]
    * @param[in]  apikey QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void billDetailBillsJurisdictionSessionBillIdGet(const QString &jurisdiction, const QString &session, const QString &bill_id, const ::OpenAPI::OptionalParam<QList<OAIBillInclude>> &include = ::OpenAPI::OptionalParam<QList<OAIBillInclude>>(), const ::OpenAPI::OptionalParam<QString> &apikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  openstates_bill_id QString [required]
    * @param[in]  include QList<OAIBillInclude> [optional]
    * @param[in]  apikey QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void billDetailByIdBillsOcdBillOpenstatesBillIdGet(const QString &openstates_bill_id, const ::OpenAPI::OptionalParam<QList<OAIBillInclude>> &include = ::OpenAPI::OptionalParam<QList<OAIBillInclude>>(), const ::OpenAPI::OptionalParam<QString> &apikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  jurisdiction QString [optional]
    * @param[in]  session QString [optional]
    * @param[in]  chamber QString [optional]
    * @param[in]  identifier QList<QString> [optional]
    * @param[in]  classification QString [optional]
    * @param[in]  subject QList<QString> [optional]
    * @param[in]  updated_since QString [optional]
    * @param[in]  created_since QString [optional]
    * @param[in]  action_since QString [optional]
    * @param[in]  sort OAIBillSortOption [optional]
    * @param[in]  sponsor QString [optional]
    * @param[in]  sponsor_classification QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  include QList<OAIBillInclude> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  apikey QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void billsSearchBillsGet(const ::OpenAPI::OptionalParam<QString> &jurisdiction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &session = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chamber = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &identifier = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &subject = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &updated_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBillSortOption> &sort = ::OpenAPI::OptionalParam<OAIBillSortOption>(), const ::OpenAPI::OptionalParam<QString> &sponsor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sponsor_classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIBillInclude>> &include = ::OpenAPI::OptionalParam<QList<OAIBillInclude>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void billDetailBillsJurisdictionSessionBillIdGetCallback(OAIHttpRequestWorker *worker);
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetCallback(OAIHttpRequestWorker *worker);
    void billsSearchBillsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void billDetailBillsJurisdictionSessionBillIdGetSignal(OAIBill summary);
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignal(OAIBill summary);
    void billsSearchBillsGetSignal(OAIBillList summary);


    void billDetailBillsJurisdictionSessionBillIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBill summary);
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBill summary);
    void billsSearchBillsGetSignalFull(OAIHttpRequestWorker *worker, OAIBillList summary);

    Q_DECL_DEPRECATED_X("Use billDetailBillsJurisdictionSessionBillIdGetSignalError() instead")
    void billDetailBillsJurisdictionSessionBillIdGetSignalE(OAIBill summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billDetailBillsJurisdictionSessionBillIdGetSignalError(OAIBill summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalError() instead")
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalE(OAIBill summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalError(OAIBill summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billsSearchBillsGetSignalError() instead")
    void billsSearchBillsGetSignalE(OAIBillList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billsSearchBillsGetSignalError(OAIBillList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use billDetailBillsJurisdictionSessionBillIdGetSignalErrorFull() instead")
    void billDetailBillsJurisdictionSessionBillIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billDetailBillsJurisdictionSessionBillIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalErrorFull() instead")
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billDetailByIdBillsOcdBillOpenstatesBillIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billsSearchBillsGetSignalErrorFull() instead")
    void billsSearchBillsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billsSearchBillsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
