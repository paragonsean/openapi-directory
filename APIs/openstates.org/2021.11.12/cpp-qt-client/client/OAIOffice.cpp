/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffice::OAIOffice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffice::OAIOffice() {
    this->initializeModel();
}

OAIOffice::~OAIOffice() {}

void OAIOffice::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIOffice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffice::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIOffice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffice::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_voice_isSet) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

QString OAIOffice::getAddress() const {
    return m_address;
}
void OAIOffice::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIOffice::is_address_Set() const{
    return m_address_isSet;
}

bool OAIOffice::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIOffice::getClassification() const {
    return m_classification;
}
void OAIOffice::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIOffice::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIOffice::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIOffice::getFax() const {
    return m_fax;
}
void OAIOffice::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIOffice::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIOffice::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIOffice::getName() const {
    return m_name;
}
void OAIOffice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOffice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOffice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOffice::getVoice() const {
    return m_voice;
}
void OAIOffice::setVoice(const QString &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIOffice::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIOffice::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIOffice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
