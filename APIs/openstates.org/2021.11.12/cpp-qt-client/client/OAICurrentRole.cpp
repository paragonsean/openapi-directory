/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentRole::OAICurrentRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentRole::OAICurrentRole() {
    this->initializeModel();
}

OAICurrentRole::~OAICurrentRole() {}

void OAICurrentRole::initializeModel() {

    m_district_isSet = false;
    m_district_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_org_classification_isSet = false;
    m_org_classification_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICurrentRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentRole::fromJsonObject(QJsonObject json) {

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("division_id")]);
    m_division_id_isSet = !json[QString("division_id")].isNull() && m_division_id_isValid;

    m_org_classification_isValid = ::OpenAPI::fromJsonValue(m_org_classification, json[QString("org_classification")]);
    m_org_classification_isSet = !json[QString("org_classification")].isNull() && m_org_classification_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICurrentRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentRole::asJsonObject() const {
    QJsonObject obj;
    if (m_district.isSet()) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("division_id"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_org_classification.isSet()) {
        obj.insert(QString("org_classification"), ::OpenAPI::toJsonValue(m_org_classification));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIDistrict OAICurrentRole::getDistrict() const {
    return m_district;
}
void OAICurrentRole::setDistrict(const OAIDistrict &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAICurrentRole::is_district_Set() const{
    return m_district_isSet;
}

bool OAICurrentRole::is_district_Valid() const{
    return m_district_isValid;
}

QString OAICurrentRole::getDivisionId() const {
    return m_division_id;
}
void OAICurrentRole::setDivisionId(const QString &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAICurrentRole::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAICurrentRole::is_division_id_Valid() const{
    return m_division_id_isValid;
}

OAIOrgClassification OAICurrentRole::getOrgClassification() const {
    return m_org_classification;
}
void OAICurrentRole::setOrgClassification(const OAIOrgClassification &org_classification) {
    m_org_classification = org_classification;
    m_org_classification_isSet = true;
}

bool OAICurrentRole::is_org_classification_Set() const{
    return m_org_classification_isSet;
}

bool OAICurrentRole::is_org_classification_Valid() const{
    return m_org_classification_isValid;
}

QString OAICurrentRole::getTitle() const {
    return m_title;
}
void OAICurrentRole::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICurrentRole::is_title_Set() const{
    return m_title_isSet;
}

bool OAICurrentRole::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICurrentRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_district.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_org_classification_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
