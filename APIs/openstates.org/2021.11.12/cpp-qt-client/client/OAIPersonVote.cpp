/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonVote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonVote::OAIPersonVote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonVote::OAIPersonVote() {
    this->initializeModel();
}

OAIPersonVote::~OAIPersonVote() {}

void OAIPersonVote::initializeModel() {

    m_option_isSet = false;
    m_option_isValid = false;

    m_voter_isSet = false;
    m_voter_isValid = false;

    m_voter_name_isSet = false;
    m_voter_name_isValid = false;
}

void OAIPersonVote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonVote::fromJsonObject(QJsonObject json) {

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_voter_isValid = ::OpenAPI::fromJsonValue(m_voter, json[QString("voter")]);
    m_voter_isSet = !json[QString("voter")].isNull() && m_voter_isValid;

    m_voter_name_isValid = ::OpenAPI::fromJsonValue(m_voter_name, json[QString("voter_name")]);
    m_voter_name_isSet = !json[QString("voter_name")].isNull() && m_voter_name_isValid;
}

QString OAIPersonVote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonVote::asJsonObject() const {
    QJsonObject obj;
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_voter.isSet()) {
        obj.insert(QString("voter"), ::OpenAPI::toJsonValue(m_voter));
    }
    if (m_voter_name_isSet) {
        obj.insert(QString("voter_name"), ::OpenAPI::toJsonValue(m_voter_name));
    }
    return obj;
}

QString OAIPersonVote::getOption() const {
    return m_option;
}
void OAIPersonVote::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIPersonVote::is_option_Set() const{
    return m_option_isSet;
}

bool OAIPersonVote::is_option_Valid() const{
    return m_option_isValid;
}

OAICompactPerson OAIPersonVote::getVoter() const {
    return m_voter;
}
void OAIPersonVote::setVoter(const OAICompactPerson &voter) {
    m_voter = voter;
    m_voter_isSet = true;
}

bool OAIPersonVote::is_voter_Set() const{
    return m_voter_isSet;
}

bool OAIPersonVote::is_voter_Valid() const{
    return m_voter_isValid;
}

QString OAIPersonVote::getVoterName() const {
    return m_voter_name;
}
void OAIPersonVote::setVoterName(const QString &voter_name) {
    m_voter_name = voter_name;
    m_voter_name_isSet = true;
}

bool OAIPersonVote::is_voter_name_Set() const{
    return m_voter_name_isSet;
}

bool OAIPersonVote::is_voter_name_Valid() const{
    return m_voter_name_isValid;
}

bool OAIPersonVote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonVote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_option_isValid && m_voter_name_isValid && true;
}

} // namespace OpenAPI
