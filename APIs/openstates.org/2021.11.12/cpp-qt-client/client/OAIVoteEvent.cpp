/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoteEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoteEvent::OAIVoteEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoteEvent::OAIVoteEvent() {
    this->initializeModel();
}

OAIVoteEvent::~OAIVoteEvent() {}

void OAIVoteEvent::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_motion_classification_isSet = false;
    m_motion_classification_isValid = false;

    m_motion_text_isSet = false;
    m_motion_text_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIVoteEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoteEvent::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_motion_classification_isValid = ::OpenAPI::fromJsonValue(m_motion_classification, json[QString("motion_classification")]);
    m_motion_classification_isSet = !json[QString("motion_classification")].isNull() && m_motion_classification_isValid;

    m_motion_text_isValid = ::OpenAPI::fromJsonValue(m_motion_text, json[QString("motion_text")]);
    m_motion_text_isSet = !json[QString("motion_text")].isNull() && m_motion_text_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIVoteEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoteEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_extras_isSet) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_motion_classification.size() > 0) {
        obj.insert(QString("motion_classification"), ::OpenAPI::toJsonValue(m_motion_classification));
    }
    if (m_motion_text_isSet) {
        obj.insert(QString("motion_text"), ::OpenAPI::toJsonValue(m_motion_text));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_votes.size() > 0) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

QList<OAIVoteCount> OAIVoteEvent::getCounts() const {
    return m_counts;
}
void OAIVoteEvent::setCounts(const QList<OAIVoteCount> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIVoteEvent::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIVoteEvent::is_counts_Valid() const{
    return m_counts_isValid;
}

OAIObject OAIVoteEvent::getExtras() const {
    return m_extras;
}
void OAIVoteEvent::setExtras(const OAIObject &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIVoteEvent::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIVoteEvent::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAIVoteEvent::getId() const {
    return m_id;
}
void OAIVoteEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVoteEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVoteEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVoteEvent::getIdentifier() const {
    return m_identifier;
}
void OAIVoteEvent::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIVoteEvent::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIVoteEvent::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList<QString> OAIVoteEvent::getMotionClassification() const {
    return m_motion_classification;
}
void OAIVoteEvent::setMotionClassification(const QList<QString> &motion_classification) {
    m_motion_classification = motion_classification;
    m_motion_classification_isSet = true;
}

bool OAIVoteEvent::is_motion_classification_Set() const{
    return m_motion_classification_isSet;
}

bool OAIVoteEvent::is_motion_classification_Valid() const{
    return m_motion_classification_isValid;
}

QString OAIVoteEvent::getMotionText() const {
    return m_motion_text;
}
void OAIVoteEvent::setMotionText(const QString &motion_text) {
    m_motion_text = motion_text;
    m_motion_text_isSet = true;
}

bool OAIVoteEvent::is_motion_text_Set() const{
    return m_motion_text_isSet;
}

bool OAIVoteEvent::is_motion_text_Valid() const{
    return m_motion_text_isValid;
}

OAIOrganization OAIVoteEvent::getOrganization() const {
    return m_organization;
}
void OAIVoteEvent::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIVoteEvent::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIVoteEvent::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIVoteEvent::getResult() const {
    return m_result;
}
void OAIVoteEvent::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIVoteEvent::is_result_Set() const{
    return m_result_isSet;
}

bool OAIVoteEvent::is_result_Valid() const{
    return m_result_isValid;
}

QList<OAILink> OAIVoteEvent::getSources() const {
    return m_sources;
}
void OAIVoteEvent::setSources(const QList<OAILink> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIVoteEvent::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIVoteEvent::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIVoteEvent::getStartDate() const {
    return m_start_date;
}
void OAIVoteEvent::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIVoteEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIVoteEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAIPersonVote> OAIVoteEvent::getVotes() const {
    return m_votes;
}
void OAIVoteEvent::setVotes(const QList<OAIPersonVote> &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIVoteEvent::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIVoteEvent::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIVoteEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_classification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoteEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_counts_isValid && m_extras_isValid && m_id_isValid && m_identifier_isValid && m_motion_text_isValid && m_organization_isValid && m_result_isValid && m_sources_isValid && m_start_date_isValid && m_votes_isValid && true;
}

} // namespace OpenAPI
