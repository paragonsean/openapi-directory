/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVoteEvent.h
 *
 * 
 */

#ifndef OAIVoteEvent_H
#define OAIVoteEvent_H

#include <QJsonObject>

#include "OAILink.h"
#include "OAIObject.h"
#include "OAIOrganization.h"
#include "OAIPersonVote.h"
#include "OAIVoteCount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVoteCount;
class OAIOrganization;
class OAILink;
class OAIPersonVote;

class OAIVoteEvent : public OAIObject {
public:
    OAIVoteEvent();
    OAIVoteEvent(QString json);
    ~OAIVoteEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIVoteCount> getCounts() const;
    void setCounts(const QList<OAIVoteCount> &counts);
    bool is_counts_Set() const;
    bool is_counts_Valid() const;

    OAIObject getExtras() const;
    void setExtras(const OAIObject &extras);
    bool is_extras_Set() const;
    bool is_extras_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QList<QString> getMotionClassification() const;
    void setMotionClassification(const QList<QString> &motion_classification);
    bool is_motion_classification_Set() const;
    bool is_motion_classification_Valid() const;

    QString getMotionText() const;
    void setMotionText(const QString &motion_text);
    bool is_motion_text_Set() const;
    bool is_motion_text_Valid() const;

    OAIOrganization getOrganization() const;
    void setOrganization(const OAIOrganization &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getResult() const;
    void setResult(const QString &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    QList<OAILink> getSources() const;
    void setSources(const QList<OAILink> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QList<OAIPersonVote> getVotes() const;
    void setVotes(const QList<OAIPersonVote> &votes);
    bool is_votes_Set() const;
    bool is_votes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIVoteCount> m_counts;
    bool m_counts_isSet;
    bool m_counts_isValid;

    OAIObject m_extras;
    bool m_extras_isSet;
    bool m_extras_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QList<QString> m_motion_classification;
    bool m_motion_classification_isSet;
    bool m_motion_classification_isValid;

    QString m_motion_text;
    bool m_motion_text_isSet;
    bool m_motion_text_isValid;

    OAIOrganization m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    QList<OAILink> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QList<OAIPersonVote> m_votes;
    bool m_votes_isSet;
    bool m_votes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVoteEvent)

#endif // OAIVoteEvent_H
