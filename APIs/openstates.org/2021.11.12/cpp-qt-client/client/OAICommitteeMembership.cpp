/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeMembership::OAICommitteeMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeMembership::OAICommitteeMembership() {
    this->initializeModel();
}

OAICommitteeMembership::~OAICommitteeMembership() {}

void OAICommitteeMembership::initializeModel() {

    m_person_isSet = false;
    m_person_isValid = false;

    m_person_name_isSet = false;
    m_person_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAICommitteeMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeMembership::fromJsonObject(QJsonObject json) {

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_person_name_isValid = ::OpenAPI::fromJsonValue(m_person_name, json[QString("person_name")]);
    m_person_name_isSet = !json[QString("person_name")].isNull() && m_person_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAICommitteeMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_person_name_isSet) {
        obj.insert(QString("person_name"), ::OpenAPI::toJsonValue(m_person_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

OAICompactPerson OAICommitteeMembership::getPerson() const {
    return m_person;
}
void OAICommitteeMembership::setPerson(const OAICompactPerson &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAICommitteeMembership::is_person_Set() const{
    return m_person_isSet;
}

bool OAICommitteeMembership::is_person_Valid() const{
    return m_person_isValid;
}

QString OAICommitteeMembership::getPersonName() const {
    return m_person_name;
}
void OAICommitteeMembership::setPersonName(const QString &person_name) {
    m_person_name = person_name;
    m_person_name_isSet = true;
}

bool OAICommitteeMembership::is_person_name_Set() const{
    return m_person_name_isSet;
}

bool OAICommitteeMembership::is_person_name_Valid() const{
    return m_person_name_isValid;
}

QString OAICommitteeMembership::getRole() const {
    return m_role;
}
void OAICommitteeMembership::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICommitteeMembership::is_role_Set() const{
    return m_role_isSet;
}

bool OAICommitteeMembership::is_role_Valid() const{
    return m_role_isValid;
}

bool OAICommitteeMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_person_name_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
