/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompactVoteEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompactVoteEvent::OAICompactVoteEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompactVoteEvent::OAICompactVoteEvent() {
    this->initializeModel();
}

OAICompactVoteEvent::~OAICompactVoteEvent() {}

void OAICompactVoteEvent::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_motion_text_isSet = false;
    m_motion_text_isValid = false;
}

void OAICompactVoteEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompactVoteEvent::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_motion_text_isValid = ::OpenAPI::fromJsonValue(m_motion_text, json[QString("motion_text")]);
    m_motion_text_isSet = !json[QString("motion_text")].isNull() && m_motion_text_isValid;
}

QString OAICompactVoteEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompactVoteEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_motion_text_isSet) {
        obj.insert(QString("motion_text"), ::OpenAPI::toJsonValue(m_motion_text));
    }
    return obj;
}

QString OAICompactVoteEvent::getId() const {
    return m_id;
}
void OAICompactVoteEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompactVoteEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompactVoteEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompactVoteEvent::getMotionText() const {
    return m_motion_text;
}
void OAICompactVoteEvent::setMotionText(const QString &motion_text) {
    m_motion_text = motion_text;
    m_motion_text_isSet = true;
}

bool OAICompactVoteEvent::is_motion_text_Set() const{
    return m_motion_text_isSet;
}

bool OAICompactVoteEvent::is_motion_text_Valid() const{
    return m_motion_text_isValid;
}

bool OAICompactVoteEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompactVoteEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_motion_text_isValid && true;
}

} // namespace OpenAPI
