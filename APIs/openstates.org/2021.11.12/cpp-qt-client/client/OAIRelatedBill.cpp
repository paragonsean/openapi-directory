/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedBill.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedBill::OAIRelatedBill(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedBill::OAIRelatedBill() {
    this->initializeModel();
}

OAIRelatedBill::~OAIRelatedBill() {}

void OAIRelatedBill::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_legislative_session_isSet = false;
    m_legislative_session_isValid = false;

    m_relation_type_isSet = false;
    m_relation_type_isValid = false;
}

void OAIRelatedBill::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedBill::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_legislative_session_isValid = ::OpenAPI::fromJsonValue(m_legislative_session, json[QString("legislative_session")]);
    m_legislative_session_isSet = !json[QString("legislative_session")].isNull() && m_legislative_session_isValid;

    m_relation_type_isValid = ::OpenAPI::fromJsonValue(m_relation_type, json[QString("relation_type")]);
    m_relation_type_isSet = !json[QString("relation_type")].isNull() && m_relation_type_isValid;
}

QString OAIRelatedBill::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedBill::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_legislative_session_isSet) {
        obj.insert(QString("legislative_session"), ::OpenAPI::toJsonValue(m_legislative_session));
    }
    if (m_relation_type_isSet) {
        obj.insert(QString("relation_type"), ::OpenAPI::toJsonValue(m_relation_type));
    }
    return obj;
}

QString OAIRelatedBill::getIdentifier() const {
    return m_identifier;
}
void OAIRelatedBill::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIRelatedBill::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIRelatedBill::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIRelatedBill::getLegislativeSession() const {
    return m_legislative_session;
}
void OAIRelatedBill::setLegislativeSession(const QString &legislative_session) {
    m_legislative_session = legislative_session;
    m_legislative_session_isSet = true;
}

bool OAIRelatedBill::is_legislative_session_Set() const{
    return m_legislative_session_isSet;
}

bool OAIRelatedBill::is_legislative_session_Valid() const{
    return m_legislative_session_isValid;
}

QString OAIRelatedBill::getRelationType() const {
    return m_relation_type;
}
void OAIRelatedBill::setRelationType(const QString &relation_type) {
    m_relation_type = relation_type;
    m_relation_type_isSet = true;
}

bool OAIRelatedBill::is_relation_type_Set() const{
    return m_relation_type_isSet;
}

bool OAIRelatedBill::is_relation_type_Valid() const{
    return m_relation_type_isValid;
}

bool OAIRelatedBill::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legislative_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedBill::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_legislative_session_isValid && m_relation_type_isValid && true;
}

} // namespace OpenAPI
