/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegislativeSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegislativeSession::OAILegislativeSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegislativeSession::OAILegislativeSession() {
    this->initializeModel();
}

OAILegislativeSession::~OAILegislativeSession() {}

void OAILegislativeSession::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_downloads_isSet = false;
    m_downloads_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAILegislativeSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegislativeSession::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_downloads_isValid = ::OpenAPI::fromJsonValue(m_downloads, json[QString("downloads")]);
    m_downloads_isSet = !json[QString("downloads")].isNull() && m_downloads_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAILegislativeSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegislativeSession::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_downloads.size() > 0) {
        obj.insert(QString("downloads"), ::OpenAPI::toJsonValue(m_downloads));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAILegislativeSession::getClassification() const {
    return m_classification;
}
void OAILegislativeSession::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAILegislativeSession::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAILegislativeSession::is_classification_Valid() const{
    return m_classification_isValid;
}

QList<OAIDataExport> OAILegislativeSession::getDownloads() const {
    return m_downloads;
}
void OAILegislativeSession::setDownloads(const QList<OAIDataExport> &downloads) {
    m_downloads = downloads;
    m_downloads_isSet = true;
}

bool OAILegislativeSession::is_downloads_Set() const{
    return m_downloads_isSet;
}

bool OAILegislativeSession::is_downloads_Valid() const{
    return m_downloads_isValid;
}

QString OAILegislativeSession::getEndDate() const {
    return m_end_date;
}
void OAILegislativeSession::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAILegislativeSession::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAILegislativeSession::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAILegislativeSession::getIdentifier() const {
    return m_identifier;
}
void OAILegislativeSession::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAILegislativeSession::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAILegislativeSession::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAILegislativeSession::getName() const {
    return m_name;
}
void OAILegislativeSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILegislativeSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAILegislativeSession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILegislativeSession::getStartDate() const {
    return m_start_date;
}
void OAILegislativeSession::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAILegislativeSession::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAILegislativeSession::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAILegislativeSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegislativeSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_end_date_isValid && m_identifier_isValid && m_name_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
