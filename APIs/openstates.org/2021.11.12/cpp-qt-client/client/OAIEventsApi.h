/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvent.h"
#include "OAIEventInclude.h"
#include "OAIEventList.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_id QString [required]
    * @param[in]  include QList<OAIEventInclude> [optional]
    * @param[in]  apikey QString [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void eventDetailEventsEventIdGet(const QString &event_id, const ::OpenAPI::OptionalParam<QList<OAIEventInclude>> &include = ::OpenAPI::OptionalParam<QList<OAIEventInclude>>(), const ::OpenAPI::OptionalParam<QString> &apikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  jurisdiction QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  before QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  require_bills bool [optional]
    * @param[in]  include QList<OAIEventInclude> [optional]
    * @param[in]  apikey QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  x_api_key QString [optional]
    */
    virtual void eventListEventsGet(const ::OpenAPI::OptionalParam<QString> &jurisdiction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_bills = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIEventInclude>> &include = ::OpenAPI::OptionalParam<QList<OAIEventInclude>>(), const ::OpenAPI::OptionalParam<QString> &apikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventDetailEventsEventIdGetCallback(OAIHttpRequestWorker *worker);
    void eventListEventsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventDetailEventsEventIdGetSignal(OAIEvent summary);
    void eventListEventsGetSignal(OAIEventList summary);


    void eventDetailEventsEventIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void eventListEventsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventList summary);

    Q_DECL_DEPRECATED_X("Use eventDetailEventsEventIdGetSignalError() instead")
    void eventDetailEventsEventIdGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventDetailEventsEventIdGetSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventListEventsGetSignalError() instead")
    void eventListEventsGetSignalE(OAIEventList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventListEventsGetSignalError(OAIEventList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventDetailEventsEventIdGetSignalErrorFull() instead")
    void eventDetailEventsEventIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventDetailEventsEventIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventListEventsGetSignalErrorFull() instead")
    void eventListEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventListEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
