/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventParticipant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventParticipant::OAIEventParticipant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventParticipant::OAIEventParticipant() {
    this->initializeModel();
}

OAIEventParticipant::~OAIEventParticipant() {}

void OAIEventParticipant::initializeModel() {

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;
}

void OAIEventParticipant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventParticipant::fromJsonObject(QJsonObject json) {

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;
}

QString OAIEventParticipant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventParticipant::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    return obj;
}

QString OAIEventParticipant::getEntityType() const {
    return m_entity_type;
}
void OAIEventParticipant::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEventParticipant::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEventParticipant::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEventParticipant::getName() const {
    return m_name;
}
void OAIEventParticipant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventParticipant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventParticipant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventParticipant::getNote() const {
    return m_note;
}
void OAIEventParticipant::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIEventParticipant::is_note_Set() const{
    return m_note_isSet;
}

bool OAIEventParticipant::is_note_Valid() const{
    return m_note_isValid;
}

OAIOrganization OAIEventParticipant::getOrganization() const {
    return m_organization;
}
void OAIEventParticipant::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIEventParticipant::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIEventParticipant::is_organization_Valid() const{
    return m_organization_isValid;
}

OAICompactPerson OAIEventParticipant::getPerson() const {
    return m_person;
}
void OAIEventParticipant::setPerson(const OAICompactPerson &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIEventParticipant::is_person_Set() const{
    return m_person_isSet;
}

bool OAIEventParticipant::is_person_Valid() const{
    return m_person_isValid;
}

bool OAIEventParticipant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventParticipant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_type_isValid && m_name_isValid && m_note_isValid && true;
}

} // namespace OpenAPI
