/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_role_isSet = false;
    m_current_role_isValid = false;

    m_death_date_isSet = false;
    m_death_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_jurisdiction_isSet = false;
    m_jurisdiction_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offices_isSet = false;
    m_offices_isValid = false;

    m_openstates_url_isSet = false;
    m_openstates_url_isValid = false;

    m_other_identifiers_isSet = false;
    m_other_identifiers_isValid = false;

    m_other_names_isSet = false;
    m_other_names_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birth_date")]);
    m_birth_date_isSet = !json[QString("birth_date")].isNull() && m_birth_date_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_role_isValid = ::OpenAPI::fromJsonValue(m_current_role, json[QString("current_role")]);
    m_current_role_isSet = !json[QString("current_role")].isNull() && m_current_role_isValid;

    m_death_date_isValid = ::OpenAPI::fromJsonValue(m_death_date, json[QString("death_date")]);
    m_death_date_isSet = !json[QString("death_date")].isNull() && m_death_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("family_name")]);
    m_family_name_isSet = !json[QString("family_name")].isNull() && m_family_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("given_name")]);
    m_given_name_isSet = !json[QString("given_name")].isNull() && m_given_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_jurisdiction, json[QString("jurisdiction")]);
    m_jurisdiction_isSet = !json[QString("jurisdiction")].isNull() && m_jurisdiction_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offices_isValid = ::OpenAPI::fromJsonValue(m_offices, json[QString("offices")]);
    m_offices_isSet = !json[QString("offices")].isNull() && m_offices_isValid;

    m_openstates_url_isValid = ::OpenAPI::fromJsonValue(m_openstates_url, json[QString("openstates_url")]);
    m_openstates_url_isSet = !json[QString("openstates_url")].isNull() && m_openstates_url_isValid;

    m_other_identifiers_isValid = ::OpenAPI::fromJsonValue(m_other_identifiers, json[QString("other_identifiers")]);
    m_other_identifiers_isSet = !json[QString("other_identifiers")].isNull() && m_other_identifiers_isValid;

    m_other_names_isValid = ::OpenAPI::fromJsonValue(m_other_names, json[QString("other_names")]);
    m_other_names_isSet = !json[QString("other_names")].isNull() && m_other_names_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_date_isSet) {
        obj.insert(QString("birth_date"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_role.isSet()) {
        obj.insert(QString("current_role"), ::OpenAPI::toJsonValue(m_current_role));
    }
    if (m_death_date_isSet) {
        obj.insert(QString("death_date"), ::OpenAPI::toJsonValue(m_death_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_extras_isSet) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("family_name"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("given_name"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_jurisdiction.isSet()) {
        obj.insert(QString("jurisdiction"), ::OpenAPI::toJsonValue(m_jurisdiction));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offices.size() > 0) {
        obj.insert(QString("offices"), ::OpenAPI::toJsonValue(m_offices));
    }
    if (m_openstates_url_isSet) {
        obj.insert(QString("openstates_url"), ::OpenAPI::toJsonValue(m_openstates_url));
    }
    if (m_other_identifiers.size() > 0) {
        obj.insert(QString("other_identifiers"), ::OpenAPI::toJsonValue(m_other_identifiers));
    }
    if (m_other_names.size() > 0) {
        obj.insert(QString("other_names"), ::OpenAPI::toJsonValue(m_other_names));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIPerson::getBirthDate() const {
    return m_birth_date;
}
void OAIPerson::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIPerson::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIPerson::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QDateTime OAIPerson::getCreatedAt() const {
    return m_created_at;
}
void OAIPerson::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPerson::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPerson::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrentRole OAIPerson::getCurrentRole() const {
    return m_current_role;
}
void OAIPerson::setCurrentRole(const OAICurrentRole &current_role) {
    m_current_role = current_role;
    m_current_role_isSet = true;
}

bool OAIPerson::is_current_role_Set() const{
    return m_current_role_isSet;
}

bool OAIPerson::is_current_role_Valid() const{
    return m_current_role_isValid;
}

QString OAIPerson::getDeathDate() const {
    return m_death_date;
}
void OAIPerson::setDeathDate(const QString &death_date) {
    m_death_date = death_date;
    m_death_date_isSet = true;
}

bool OAIPerson::is_death_date_Set() const{
    return m_death_date_isSet;
}

bool OAIPerson::is_death_date_Valid() const{
    return m_death_date_isValid;
}

QString OAIPerson::getEmail() const {
    return m_email;
}
void OAIPerson::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPerson::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPerson::is_email_Valid() const{
    return m_email_isValid;
}

OAIObject OAIPerson::getExtras() const {
    return m_extras;
}
void OAIPerson::setExtras(const OAIObject &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIPerson::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIPerson::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAIPerson::getFamilyName() const {
    return m_family_name;
}
void OAIPerson::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIPerson::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIPerson::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAIPerson::getGender() const {
    return m_gender;
}
void OAIPerson::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIPerson::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIPerson::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIPerson::getGivenName() const {
    return m_given_name;
}
void OAIPerson::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIPerson::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIPerson::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIPerson::getId() const {
    return m_id;
}
void OAIPerson::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerson::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPerson::getImage() const {
    return m_image;
}
void OAIPerson::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPerson::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPerson::is_image_Valid() const{
    return m_image_isValid;
}

OAICompactJurisdiction OAIPerson::getJurisdiction() const {
    return m_jurisdiction;
}
void OAIPerson::setJurisdiction(const OAICompactJurisdiction &jurisdiction) {
    m_jurisdiction = jurisdiction;
    m_jurisdiction_isSet = true;
}

bool OAIPerson::is_jurisdiction_Set() const{
    return m_jurisdiction_isSet;
}

bool OAIPerson::is_jurisdiction_Valid() const{
    return m_jurisdiction_isValid;
}

QList<OAILink> OAIPerson::getLinks() const {
    return m_links;
}
void OAIPerson::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPerson::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPerson::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOffice> OAIPerson::getOffices() const {
    return m_offices;
}
void OAIPerson::setOffices(const QList<OAIOffice> &offices) {
    m_offices = offices;
    m_offices_isSet = true;
}

bool OAIPerson::is_offices_Set() const{
    return m_offices_isSet;
}

bool OAIPerson::is_offices_Valid() const{
    return m_offices_isValid;
}

QString OAIPerson::getOpenstatesUrl() const {
    return m_openstates_url;
}
void OAIPerson::setOpenstatesUrl(const QString &openstates_url) {
    m_openstates_url = openstates_url;
    m_openstates_url_isSet = true;
}

bool OAIPerson::is_openstates_url_Set() const{
    return m_openstates_url_isSet;
}

bool OAIPerson::is_openstates_url_Valid() const{
    return m_openstates_url_isValid;
}

QList<OAIAltIdentifier> OAIPerson::getOtherIdentifiers() const {
    return m_other_identifiers;
}
void OAIPerson::setOtherIdentifiers(const QList<OAIAltIdentifier> &other_identifiers) {
    m_other_identifiers = other_identifiers;
    m_other_identifiers_isSet = true;
}

bool OAIPerson::is_other_identifiers_Set() const{
    return m_other_identifiers_isSet;
}

bool OAIPerson::is_other_identifiers_Valid() const{
    return m_other_identifiers_isValid;
}

QList<OAIAltName> OAIPerson::getOtherNames() const {
    return m_other_names;
}
void OAIPerson::setOtherNames(const QList<OAIAltName> &other_names) {
    m_other_names = other_names;
    m_other_names_isSet = true;
}

bool OAIPerson::is_other_names_Set() const{
    return m_other_names_isSet;
}

bool OAIPerson::is_other_names_Valid() const{
    return m_other_names_isValid;
}

QString OAIPerson::getParty() const {
    return m_party;
}
void OAIPerson::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIPerson::is_party_Set() const{
    return m_party_isSet;
}

bool OAIPerson::is_party_Valid() const{
    return m_party_isValid;
}

QList<OAILink> OAIPerson::getSources() const {
    return m_sources;
}
void OAIPerson::setSources(const QList<OAILink> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIPerson::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIPerson::is_sources_Valid() const{
    return m_sources_isValid;
}

QDateTime OAIPerson::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPerson::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPerson::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPerson::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_death_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdiction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstates_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_birth_date_isValid && m_created_at_isValid && m_death_date_isValid && m_email_isValid && m_extras_isValid && m_family_name_isValid && m_gender_isValid && m_given_name_isValid && m_id_isValid && m_image_isValid && m_jurisdiction_isValid && m_name_isValid && m_openstates_url_isValid && m_party_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
