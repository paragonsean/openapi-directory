/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginationMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginationMeta::OAIPaginationMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginationMeta::OAIPaginationMeta() {
    this->initializeModel();
}

OAIPaginationMeta::~OAIPaginationMeta() {}

void OAIPaginationMeta::initializeModel() {

    m_max_page_isSet = false;
    m_max_page_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;
}

void OAIPaginationMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginationMeta::fromJsonObject(QJsonObject json) {

    m_max_page_isValid = ::OpenAPI::fromJsonValue(m_max_page, json[QString("max_page")]);
    m_max_page_isSet = !json[QString("max_page")].isNull() && m_max_page_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("total_items")]);
    m_total_items_isSet = !json[QString("total_items")].isNull() && m_total_items_isValid;
}

QString OAIPaginationMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginationMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_max_page_isSet) {
        obj.insert(QString("max_page"), ::OpenAPI::toJsonValue(m_max_page));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("total_items"), ::OpenAPI::toJsonValue(m_total_items));
    }
    return obj;
}

qint32 OAIPaginationMeta::getMaxPage() const {
    return m_max_page;
}
void OAIPaginationMeta::setMaxPage(const qint32 &max_page) {
    m_max_page = max_page;
    m_max_page_isSet = true;
}

bool OAIPaginationMeta::is_max_page_Set() const{
    return m_max_page_isSet;
}

bool OAIPaginationMeta::is_max_page_Valid() const{
    return m_max_page_isValid;
}

qint32 OAIPaginationMeta::getPage() const {
    return m_page;
}
void OAIPaginationMeta::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPaginationMeta::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPaginationMeta::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIPaginationMeta::getPerPage() const {
    return m_per_page;
}
void OAIPaginationMeta::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIPaginationMeta::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIPaginationMeta::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAIPaginationMeta::getTotalItems() const {
    return m_total_items;
}
void OAIPaginationMeta::setTotalItems(const qint32 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAIPaginationMeta::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAIPaginationMeta::is_total_items_Valid() const{
    return m_total_items_isValid;
}

bool OAIPaginationMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginationMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_page_isValid && m_page_isValid && m_per_page_isValid && m_total_items_isValid && true;
}

} // namespace OpenAPI
