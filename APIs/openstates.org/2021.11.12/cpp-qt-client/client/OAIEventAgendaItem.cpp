/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventAgendaItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventAgendaItem::OAIEventAgendaItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventAgendaItem::OAIEventAgendaItem() {
    this->initializeModel();
}

OAIEventAgendaItem::~OAIEventAgendaItem() {}

void OAIEventAgendaItem::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_related_entities_isSet = false;
    m_related_entities_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;
}

void OAIEventAgendaItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventAgendaItem::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_related_entities_isValid = ::OpenAPI::fromJsonValue(m_related_entities, json[QString("related_entities")]);
    m_related_entities_isSet = !json[QString("related_entities")].isNull() && m_related_entities_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;
}

QString OAIEventAgendaItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventAgendaItem::asJsonObject() const {
    QJsonObject obj;
    if (m_classification.size() > 0) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extras_isSet) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_related_entities.size() > 0) {
        obj.insert(QString("related_entities"), ::OpenAPI::toJsonValue(m_related_entities));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    return obj;
}

QList<QString> OAIEventAgendaItem::getClassification() const {
    return m_classification;
}
void OAIEventAgendaItem::setClassification(const QList<QString> &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIEventAgendaItem::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIEventAgendaItem::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIEventAgendaItem::getDescription() const {
    return m_description;
}
void OAIEventAgendaItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventAgendaItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventAgendaItem::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIEventAgendaItem::getExtras() const {
    return m_extras;
}
void OAIEventAgendaItem::setExtras(const OAIObject &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIEventAgendaItem::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIEventAgendaItem::is_extras_Valid() const{
    return m_extras_isValid;
}

QList<OAIEventMedia> OAIEventAgendaItem::getMedia() const {
    return m_media;
}
void OAIEventAgendaItem::setMedia(const QList<OAIEventMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIEventAgendaItem::is_media_Set() const{
    return m_media_isSet;
}

bool OAIEventAgendaItem::is_media_Valid() const{
    return m_media_isValid;
}

QList<QString> OAIEventAgendaItem::getNotes() const {
    return m_notes;
}
void OAIEventAgendaItem::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIEventAgendaItem::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIEventAgendaItem::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIEventAgendaItem::getOrder() const {
    return m_order;
}
void OAIEventAgendaItem::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIEventAgendaItem::is_order_Set() const{
    return m_order_isSet;
}

bool OAIEventAgendaItem::is_order_Valid() const{
    return m_order_isValid;
}

QList<OAIEventRelatedEntity> OAIEventAgendaItem::getRelatedEntities() const {
    return m_related_entities;
}
void OAIEventAgendaItem::setRelatedEntities(const QList<OAIEventRelatedEntity> &related_entities) {
    m_related_entities = related_entities;
    m_related_entities_isSet = true;
}

bool OAIEventAgendaItem::is_related_entities_Set() const{
    return m_related_entities_isSet;
}

bool OAIEventAgendaItem::is_related_entities_Valid() const{
    return m_related_entities_isValid;
}

QList<QString> OAIEventAgendaItem::getSubjects() const {
    return m_subjects;
}
void OAIEventAgendaItem::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIEventAgendaItem::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIEventAgendaItem::is_subjects_Valid() const{
    return m_subjects_isValid;
}

bool OAIEventAgendaItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventAgendaItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_description_isValid && m_extras_isValid && m_media_isValid && m_notes_isValid && m_order_isValid && m_related_entities_isValid && m_subjects_isValid && true;
}

} // namespace OpenAPI
