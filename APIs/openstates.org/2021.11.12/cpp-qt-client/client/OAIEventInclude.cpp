/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventInclude.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventInclude::OAIEventInclude(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventInclude::OAIEventInclude() {
    this->initializeModel();
}

OAIEventInclude::~OAIEventInclude() {}

void OAIEventInclude::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventInclude::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventInclude::fromJson(QString jsonString) {
    
    if ( jsonString.compare("links", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::LINKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sources", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::SOURCES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("media", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::MEDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("documents", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::DOCUMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("participants", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::PARTICIPANTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("agenda", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventInclude::AGENDA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventInclude::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventInclude::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventInclude::LINKS:
            val = "links";
            break;
        case eOAIEventInclude::SOURCES:
            val = "sources";
            break;
        case eOAIEventInclude::MEDIA:
            val = "media";
            break;
        case eOAIEventInclude::DOCUMENTS:
            val = "documents";
            break;
        case eOAIEventInclude::PARTICIPANTS:
            val = "participants";
            break;
        case eOAIEventInclude::AGENDA:
            val = "agenda";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventInclude::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventInclude::eOAIEventInclude OAIEventInclude::getValue() const {
    return m_value;
}

void OAIEventInclude::setValue(const OAIEventInclude::eOAIEventInclude& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventInclude::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventInclude::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
