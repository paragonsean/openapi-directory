/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgClassification::OAIOrgClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgClassification::OAIOrgClassification() {
    this->initializeModel();
}

OAIOrgClassification::~OAIOrgClassification() {}

void OAIOrgClassification::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOrgClassification::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOrgClassification::fromJson(QString jsonString) {
    
    if ( jsonString.compare("legislature", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrgClassification::LEGISLATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("executive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrgClassification::EXECUTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lower", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrgClassification::LOWER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("upper", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrgClassification::UPPER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("government", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOrgClassification::GOVERNMENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOrgClassification::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOrgClassification::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOrgClassification::LEGISLATURE:
            val = "legislature";
            break;
        case eOAIOrgClassification::EXECUTIVE:
            val = "executive";
            break;
        case eOAIOrgClassification::LOWER:
            val = "lower";
            break;
        case eOAIOrgClassification::UPPER:
            val = "upper";
            break;
        case eOAIOrgClassification::GOVERNMENT:
            val = "government";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOrgClassification::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOrgClassification::eOAIOrgClassification OAIOrgClassification::getValue() const {
    return m_value;
}

void OAIOrgClassification::setValue(const OAIOrgClassification::eOAIOrgClassification& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOrgClassification::isSet() const {
    
    return m_value_isSet;
}

bool OAIOrgClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
