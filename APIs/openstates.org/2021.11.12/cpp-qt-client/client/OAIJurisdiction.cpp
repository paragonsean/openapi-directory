/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJurisdiction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJurisdiction::OAIJurisdiction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJurisdiction::OAIJurisdiction() {
    this->initializeModel();
}

OAIJurisdiction::~OAIJurisdiction() {}

void OAIJurisdiction::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_bill_update_isSet = false;
    m_latest_bill_update_isValid = false;

    m_latest_people_update_isSet = false;
    m_latest_people_update_isValid = false;

    m_latest_runs_isSet = false;
    m_latest_runs_isValid = false;

    m_legislative_sessions_isSet = false;
    m_legislative_sessions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organizations_isSet = false;
    m_organizations_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIJurisdiction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJurisdiction::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("division_id")]);
    m_division_id_isSet = !json[QString("division_id")].isNull() && m_division_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_bill_update_isValid = ::OpenAPI::fromJsonValue(m_latest_bill_update, json[QString("latest_bill_update")]);
    m_latest_bill_update_isSet = !json[QString("latest_bill_update")].isNull() && m_latest_bill_update_isValid;

    m_latest_people_update_isValid = ::OpenAPI::fromJsonValue(m_latest_people_update, json[QString("latest_people_update")]);
    m_latest_people_update_isSet = !json[QString("latest_people_update")].isNull() && m_latest_people_update_isValid;

    m_latest_runs_isValid = ::OpenAPI::fromJsonValue(m_latest_runs, json[QString("latest_runs")]);
    m_latest_runs_isSet = !json[QString("latest_runs")].isNull() && m_latest_runs_isValid;

    m_legislative_sessions_isValid = ::OpenAPI::fromJsonValue(m_legislative_sessions, json[QString("legislative_sessions")]);
    m_legislative_sessions_isSet = !json[QString("legislative_sessions")].isNull() && m_legislative_sessions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organizations_isValid = ::OpenAPI::fromJsonValue(m_organizations, json[QString("organizations")]);
    m_organizations_isSet = !json[QString("organizations")].isNull() && m_organizations_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIJurisdiction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJurisdiction::asJsonObject() const {
    QJsonObject obj;
    if (m_classification.isSet()) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_division_id_isSet) {
        obj.insert(QString("division_id"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_bill_update_isSet) {
        obj.insert(QString("latest_bill_update"), ::OpenAPI::toJsonValue(m_latest_bill_update));
    }
    if (m_latest_people_update_isSet) {
        obj.insert(QString("latest_people_update"), ::OpenAPI::toJsonValue(m_latest_people_update));
    }
    if (m_latest_runs.size() > 0) {
        obj.insert(QString("latest_runs"), ::OpenAPI::toJsonValue(m_latest_runs));
    }
    if (m_legislative_sessions.size() > 0) {
        obj.insert(QString("legislative_sessions"), ::OpenAPI::toJsonValue(m_legislative_sessions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organizations.size() > 0) {
        obj.insert(QString("organizations"), ::OpenAPI::toJsonValue(m_organizations));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIJurisdictionClassification OAIJurisdiction::getClassification() const {
    return m_classification;
}
void OAIJurisdiction::setClassification(const OAIJurisdictionClassification &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIJurisdiction::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIJurisdiction::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIJurisdiction::getDivisionId() const {
    return m_division_id;
}
void OAIJurisdiction::setDivisionId(const QString &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIJurisdiction::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIJurisdiction::is_division_id_Valid() const{
    return m_division_id_isValid;
}

QString OAIJurisdiction::getId() const {
    return m_id;
}
void OAIJurisdiction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJurisdiction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJurisdiction::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIJurisdiction::getLatestBillUpdate() const {
    return m_latest_bill_update;
}
void OAIJurisdiction::setLatestBillUpdate(const QDateTime &latest_bill_update) {
    m_latest_bill_update = latest_bill_update;
    m_latest_bill_update_isSet = true;
}

bool OAIJurisdiction::is_latest_bill_update_Set() const{
    return m_latest_bill_update_isSet;
}

bool OAIJurisdiction::is_latest_bill_update_Valid() const{
    return m_latest_bill_update_isValid;
}

QDateTime OAIJurisdiction::getLatestPeopleUpdate() const {
    return m_latest_people_update;
}
void OAIJurisdiction::setLatestPeopleUpdate(const QDateTime &latest_people_update) {
    m_latest_people_update = latest_people_update;
    m_latest_people_update_isSet = true;
}

bool OAIJurisdiction::is_latest_people_update_Set() const{
    return m_latest_people_update_isSet;
}

bool OAIJurisdiction::is_latest_people_update_Valid() const{
    return m_latest_people_update_isValid;
}

QList<OAIRunPlan> OAIJurisdiction::getLatestRuns() const {
    return m_latest_runs;
}
void OAIJurisdiction::setLatestRuns(const QList<OAIRunPlan> &latest_runs) {
    m_latest_runs = latest_runs;
    m_latest_runs_isSet = true;
}

bool OAIJurisdiction::is_latest_runs_Set() const{
    return m_latest_runs_isSet;
}

bool OAIJurisdiction::is_latest_runs_Valid() const{
    return m_latest_runs_isValid;
}

QList<OAILegislativeSession> OAIJurisdiction::getLegislativeSessions() const {
    return m_legislative_sessions;
}
void OAIJurisdiction::setLegislativeSessions(const QList<OAILegislativeSession> &legislative_sessions) {
    m_legislative_sessions = legislative_sessions;
    m_legislative_sessions_isSet = true;
}

bool OAIJurisdiction::is_legislative_sessions_Set() const{
    return m_legislative_sessions_isSet;
}

bool OAIJurisdiction::is_legislative_sessions_Valid() const{
    return m_legislative_sessions_isValid;
}

QString OAIJurisdiction::getName() const {
    return m_name;
}
void OAIJurisdiction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJurisdiction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJurisdiction::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIChamber> OAIJurisdiction::getOrganizations() const {
    return m_organizations;
}
void OAIJurisdiction::setOrganizations(const QList<OAIChamber> &organizations) {
    m_organizations = organizations;
    m_organizations_isSet = true;
}

bool OAIJurisdiction::is_organizations_Set() const{
    return m_organizations_isSet;
}

bool OAIJurisdiction::is_organizations_Valid() const{
    return m_organizations_isValid;
}

QString OAIJurisdiction::getUrl() const {
    return m_url;
}
void OAIJurisdiction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJurisdiction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJurisdiction::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIJurisdiction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_bill_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_people_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legislative_sessions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJurisdiction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_id_isValid && m_latest_bill_update_isValid && m_latest_people_update_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
