/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventLocation::OAIEventLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventLocation::OAIEventLocation() {
    this->initializeModel();
}

OAIEventLocation::~OAIEventLocation() {}

void OAIEventLocation::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEventLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventLocation::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEventLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIEventLocation::getName() const {
    return m_name;
}
void OAIEventLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventLocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventLocation::getUrl() const {
    return m_url;
}
void OAIEventLocation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventLocation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventLocation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEventLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
