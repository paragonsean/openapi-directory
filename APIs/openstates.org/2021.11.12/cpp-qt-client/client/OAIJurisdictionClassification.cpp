/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJurisdictionClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJurisdictionClassification::OAIJurisdictionClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJurisdictionClassification::OAIJurisdictionClassification() {
    this->initializeModel();
}

OAIJurisdictionClassification::~OAIJurisdictionClassification() {}

void OAIJurisdictionClassification::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJurisdictionClassification::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJurisdictionClassification::fromJson(QString jsonString) {
    
    if ( jsonString.compare("state", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionClassification::STATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("municipality", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionClassification::MUNICIPALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("country", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionClassification::COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJurisdictionClassification::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJurisdictionClassification::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJurisdictionClassification::STATE:
            val = "state";
            break;
        case eOAIJurisdictionClassification::MUNICIPALITY:
            val = "municipality";
            break;
        case eOAIJurisdictionClassification::COUNTRY:
            val = "country";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJurisdictionClassification::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJurisdictionClassification::eOAIJurisdictionClassification OAIJurisdictionClassification::getValue() const {
    return m_value;
}

void OAIJurisdictionClassification::setValue(const OAIJurisdictionClassification::eOAIJurisdictionClassification& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJurisdictionClassification::isSet() const {
    
    return m_value_isSet;
}

bool OAIJurisdictionClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
