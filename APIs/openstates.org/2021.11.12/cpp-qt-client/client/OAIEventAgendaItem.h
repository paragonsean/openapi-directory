/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventAgendaItem.h
 *
 * 
 */

#ifndef OAIEventAgendaItem_H
#define OAIEventAgendaItem_H

#include <QJsonObject>

#include "OAIEventMedia.h"
#include "OAIEventRelatedEntity.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventMedia;
class OAIEventRelatedEntity;

class OAIEventAgendaItem : public OAIObject {
public:
    OAIEventAgendaItem();
    OAIEventAgendaItem(QString json);
    ~OAIEventAgendaItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getClassification() const;
    void setClassification(const QList<QString> &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIObject getExtras() const;
    void setExtras(const OAIObject &extras);
    bool is_extras_Set() const;
    bool is_extras_Valid() const;

    QList<OAIEventMedia> getMedia() const;
    void setMedia(const QList<OAIEventMedia> &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QList<QString> getNotes() const;
    void setNotes(const QList<QString> &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getOrder() const;
    void setOrder(const qint32 &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<OAIEventRelatedEntity> getRelatedEntities() const;
    void setRelatedEntities(const QList<OAIEventRelatedEntity> &related_entities);
    bool is_related_entities_Set() const;
    bool is_related_entities_Valid() const;

    QList<QString> getSubjects() const;
    void setSubjects(const QList<QString> &subjects);
    bool is_subjects_Set() const;
    bool is_subjects_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIObject m_extras;
    bool m_extras_isSet;
    bool m_extras_isValid;

    QList<OAIEventMedia> m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QList<QString> m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<OAIEventRelatedEntity> m_related_entities;
    bool m_related_entities_isSet;
    bool m_related_entities_isValid;

    QList<QString> m_subjects;
    bool m_subjects_isSet;
    bool m_subjects_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventAgendaItem)

#endif // OAIEventAgendaItem_H
