/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBill.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBill::OAIBill(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBill::OAIBill() {
    this->initializeModel();
}

OAIBill::~OAIBill() {}

void OAIBill::initializeModel() {

    m_abstracts_isSet = false;
    m_abstracts_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_first_action_date_isSet = false;
    m_first_action_date_isValid = false;

    m_from_organization_isSet = false;
    m_from_organization_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_jurisdiction_isSet = false;
    m_jurisdiction_isValid = false;

    m_latest_action_date_isSet = false;
    m_latest_action_date_isValid = false;

    m_latest_action_description_isSet = false;
    m_latest_action_description_isValid = false;

    m_latest_passage_date_isSet = false;
    m_latest_passage_date_isValid = false;

    m_openstates_url_isSet = false;
    m_openstates_url_isValid = false;

    m_other_identifiers_isSet = false;
    m_other_identifiers_isValid = false;

    m_other_titles_isSet = false;
    m_other_titles_isValid = false;

    m_related_bills_isSet = false;
    m_related_bills_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_sponsorships_isSet = false;
    m_sponsorships_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIBill::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBill::fromJsonObject(QJsonObject json) {

    m_abstracts_isValid = ::OpenAPI::fromJsonValue(m_abstracts, json[QString("abstracts")]);
    m_abstracts_isSet = !json[QString("abstracts")].isNull() && m_abstracts_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_first_action_date_isValid = ::OpenAPI::fromJsonValue(m_first_action_date, json[QString("first_action_date")]);
    m_first_action_date_isSet = !json[QString("first_action_date")].isNull() && m_first_action_date_isValid;

    m_from_organization_isValid = ::OpenAPI::fromJsonValue(m_from_organization, json[QString("from_organization")]);
    m_from_organization_isSet = !json[QString("from_organization")].isNull() && m_from_organization_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_jurisdiction, json[QString("jurisdiction")]);
    m_jurisdiction_isSet = !json[QString("jurisdiction")].isNull() && m_jurisdiction_isValid;

    m_latest_action_date_isValid = ::OpenAPI::fromJsonValue(m_latest_action_date, json[QString("latest_action_date")]);
    m_latest_action_date_isSet = !json[QString("latest_action_date")].isNull() && m_latest_action_date_isValid;

    m_latest_action_description_isValid = ::OpenAPI::fromJsonValue(m_latest_action_description, json[QString("latest_action_description")]);
    m_latest_action_description_isSet = !json[QString("latest_action_description")].isNull() && m_latest_action_description_isValid;

    m_latest_passage_date_isValid = ::OpenAPI::fromJsonValue(m_latest_passage_date, json[QString("latest_passage_date")]);
    m_latest_passage_date_isSet = !json[QString("latest_passage_date")].isNull() && m_latest_passage_date_isValid;

    m_openstates_url_isValid = ::OpenAPI::fromJsonValue(m_openstates_url, json[QString("openstates_url")]);
    m_openstates_url_isSet = !json[QString("openstates_url")].isNull() && m_openstates_url_isValid;

    m_other_identifiers_isValid = ::OpenAPI::fromJsonValue(m_other_identifiers, json[QString("other_identifiers")]);
    m_other_identifiers_isSet = !json[QString("other_identifiers")].isNull() && m_other_identifiers_isValid;

    m_other_titles_isValid = ::OpenAPI::fromJsonValue(m_other_titles, json[QString("other_titles")]);
    m_other_titles_isSet = !json[QString("other_titles")].isNull() && m_other_titles_isValid;

    m_related_bills_isValid = ::OpenAPI::fromJsonValue(m_related_bills, json[QString("related_bills")]);
    m_related_bills_isSet = !json[QString("related_bills")].isNull() && m_related_bills_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_sponsorships_isValid = ::OpenAPI::fromJsonValue(m_sponsorships, json[QString("sponsorships")]);
    m_sponsorships_isSet = !json[QString("sponsorships")].isNull() && m_sponsorships_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIBill::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBill::asJsonObject() const {
    QJsonObject obj;
    if (m_abstracts.size() > 0) {
        obj.insert(QString("abstracts"), ::OpenAPI::toJsonValue(m_abstracts));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_classification.size() > 0) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_extras_isSet) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_first_action_date_isSet) {
        obj.insert(QString("first_action_date"), ::OpenAPI::toJsonValue(m_first_action_date));
    }
    if (m_from_organization.isSet()) {
        obj.insert(QString("from_organization"), ::OpenAPI::toJsonValue(m_from_organization));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_jurisdiction.isSet()) {
        obj.insert(QString("jurisdiction"), ::OpenAPI::toJsonValue(m_jurisdiction));
    }
    if (m_latest_action_date_isSet) {
        obj.insert(QString("latest_action_date"), ::OpenAPI::toJsonValue(m_latest_action_date));
    }
    if (m_latest_action_description_isSet) {
        obj.insert(QString("latest_action_description"), ::OpenAPI::toJsonValue(m_latest_action_description));
    }
    if (m_latest_passage_date_isSet) {
        obj.insert(QString("latest_passage_date"), ::OpenAPI::toJsonValue(m_latest_passage_date));
    }
    if (m_openstates_url_isSet) {
        obj.insert(QString("openstates_url"), ::OpenAPI::toJsonValue(m_openstates_url));
    }
    if (m_other_identifiers.size() > 0) {
        obj.insert(QString("other_identifiers"), ::OpenAPI::toJsonValue(m_other_identifiers));
    }
    if (m_other_titles.size() > 0) {
        obj.insert(QString("other_titles"), ::OpenAPI::toJsonValue(m_other_titles));
    }
    if (m_related_bills.size() > 0) {
        obj.insert(QString("related_bills"), ::OpenAPI::toJsonValue(m_related_bills));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_sponsorships.size() > 0) {
        obj.insert(QString("sponsorships"), ::OpenAPI::toJsonValue(m_sponsorships));
    }
    if (m_subject.size() > 0) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    if (m_votes.size() > 0) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

QList<OAIBillAbstract> OAIBill::getAbstracts() const {
    return m_abstracts;
}
void OAIBill::setAbstracts(const QList<OAIBillAbstract> &abstracts) {
    m_abstracts = abstracts;
    m_abstracts_isSet = true;
}

bool OAIBill::is_abstracts_Set() const{
    return m_abstracts_isSet;
}

bool OAIBill::is_abstracts_Valid() const{
    return m_abstracts_isValid;
}

QList<OAIBillAction> OAIBill::getActions() const {
    return m_actions;
}
void OAIBill::setActions(const QList<OAIBillAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIBill::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIBill::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<QString> OAIBill::getClassification() const {
    return m_classification;
}
void OAIBill::setClassification(const QList<QString> &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIBill::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIBill::is_classification_Valid() const{
    return m_classification_isValid;
}

QDateTime OAIBill::getCreatedAt() const {
    return m_created_at;
}
void OAIBill::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBill::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBill::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIBillDocumentOrVersion> OAIBill::getDocuments() const {
    return m_documents;
}
void OAIBill::setDocuments(const QList<OAIBillDocumentOrVersion> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIBill::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIBill::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIObject OAIBill::getExtras() const {
    return m_extras;
}
void OAIBill::setExtras(const OAIObject &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAIBill::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAIBill::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAIBill::getFirstActionDate() const {
    return m_first_action_date;
}
void OAIBill::setFirstActionDate(const QString &first_action_date) {
    m_first_action_date = first_action_date;
    m_first_action_date_isSet = true;
}

bool OAIBill::is_first_action_date_Set() const{
    return m_first_action_date_isSet;
}

bool OAIBill::is_first_action_date_Valid() const{
    return m_first_action_date_isValid;
}

OAIOrganization OAIBill::getFromOrganization() const {
    return m_from_organization;
}
void OAIBill::setFromOrganization(const OAIOrganization &from_organization) {
    m_from_organization = from_organization;
    m_from_organization_isSet = true;
}

bool OAIBill::is_from_organization_Set() const{
    return m_from_organization_isSet;
}

bool OAIBill::is_from_organization_Valid() const{
    return m_from_organization_isValid;
}

QString OAIBill::getId() const {
    return m_id;
}
void OAIBill::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBill::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBill::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBill::getIdentifier() const {
    return m_identifier;
}
void OAIBill::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIBill::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIBill::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAICompactJurisdiction OAIBill::getJurisdiction() const {
    return m_jurisdiction;
}
void OAIBill::setJurisdiction(const OAICompactJurisdiction &jurisdiction) {
    m_jurisdiction = jurisdiction;
    m_jurisdiction_isSet = true;
}

bool OAIBill::is_jurisdiction_Set() const{
    return m_jurisdiction_isSet;
}

bool OAIBill::is_jurisdiction_Valid() const{
    return m_jurisdiction_isValid;
}

QString OAIBill::getLatestActionDate() const {
    return m_latest_action_date;
}
void OAIBill::setLatestActionDate(const QString &latest_action_date) {
    m_latest_action_date = latest_action_date;
    m_latest_action_date_isSet = true;
}

bool OAIBill::is_latest_action_date_Set() const{
    return m_latest_action_date_isSet;
}

bool OAIBill::is_latest_action_date_Valid() const{
    return m_latest_action_date_isValid;
}

QString OAIBill::getLatestActionDescription() const {
    return m_latest_action_description;
}
void OAIBill::setLatestActionDescription(const QString &latest_action_description) {
    m_latest_action_description = latest_action_description;
    m_latest_action_description_isSet = true;
}

bool OAIBill::is_latest_action_description_Set() const{
    return m_latest_action_description_isSet;
}

bool OAIBill::is_latest_action_description_Valid() const{
    return m_latest_action_description_isValid;
}

QString OAIBill::getLatestPassageDate() const {
    return m_latest_passage_date;
}
void OAIBill::setLatestPassageDate(const QString &latest_passage_date) {
    m_latest_passage_date = latest_passage_date;
    m_latest_passage_date_isSet = true;
}

bool OAIBill::is_latest_passage_date_Set() const{
    return m_latest_passage_date_isSet;
}

bool OAIBill::is_latest_passage_date_Valid() const{
    return m_latest_passage_date_isValid;
}

QString OAIBill::getOpenstatesUrl() const {
    return m_openstates_url;
}
void OAIBill::setOpenstatesUrl(const QString &openstates_url) {
    m_openstates_url = openstates_url;
    m_openstates_url_isSet = true;
}

bool OAIBill::is_openstates_url_Set() const{
    return m_openstates_url_isSet;
}

bool OAIBill::is_openstates_url_Valid() const{
    return m_openstates_url_isValid;
}

QList<OAIBillIdentifier> OAIBill::getOtherIdentifiers() const {
    return m_other_identifiers;
}
void OAIBill::setOtherIdentifiers(const QList<OAIBillIdentifier> &other_identifiers) {
    m_other_identifiers = other_identifiers;
    m_other_identifiers_isSet = true;
}

bool OAIBill::is_other_identifiers_Set() const{
    return m_other_identifiers_isSet;
}

bool OAIBill::is_other_identifiers_Valid() const{
    return m_other_identifiers_isValid;
}

QList<OAIBillTitle> OAIBill::getOtherTitles() const {
    return m_other_titles;
}
void OAIBill::setOtherTitles(const QList<OAIBillTitle> &other_titles) {
    m_other_titles = other_titles;
    m_other_titles_isSet = true;
}

bool OAIBill::is_other_titles_Set() const{
    return m_other_titles_isSet;
}

bool OAIBill::is_other_titles_Valid() const{
    return m_other_titles_isValid;
}

QList<OAIRelatedBill> OAIBill::getRelatedBills() const {
    return m_related_bills;
}
void OAIBill::setRelatedBills(const QList<OAIRelatedBill> &related_bills) {
    m_related_bills = related_bills;
    m_related_bills_isSet = true;
}

bool OAIBill::is_related_bills_Set() const{
    return m_related_bills_isSet;
}

bool OAIBill::is_related_bills_Valid() const{
    return m_related_bills_isValid;
}

QString OAIBill::getSession() const {
    return m_session;
}
void OAIBill::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIBill::is_session_Set() const{
    return m_session_isSet;
}

bool OAIBill::is_session_Valid() const{
    return m_session_isValid;
}

QList<OAILink> OAIBill::getSources() const {
    return m_sources;
}
void OAIBill::setSources(const QList<OAILink> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIBill::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIBill::is_sources_Valid() const{
    return m_sources_isValid;
}

QList<OAIBillSponsorship> OAIBill::getSponsorships() const {
    return m_sponsorships;
}
void OAIBill::setSponsorships(const QList<OAIBillSponsorship> &sponsorships) {
    m_sponsorships = sponsorships;
    m_sponsorships_isSet = true;
}

bool OAIBill::is_sponsorships_Set() const{
    return m_sponsorships_isSet;
}

bool OAIBill::is_sponsorships_Valid() const{
    return m_sponsorships_isValid;
}

QList<QString> OAIBill::getSubject() const {
    return m_subject;
}
void OAIBill::setSubject(const QList<QString> &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIBill::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIBill::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIBill::getTitle() const {
    return m_title;
}
void OAIBill::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBill::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBill::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIBill::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBill::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBill::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBill::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIBillDocumentOrVersion> OAIBill::getVersions() const {
    return m_versions;
}
void OAIBill::setVersions(const QList<OAIBillDocumentOrVersion> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIBill::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIBill::is_versions_Valid() const{
    return m_versions_isValid;
}

QList<OAIVoteEvent> OAIBill::getVotes() const {
    return m_votes;
}
void OAIBill::setVotes(const QList<OAIVoteEvent> &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIBill::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIBill::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIBill::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstracts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_action_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdiction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_action_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_action_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_passage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openstates_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_titles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_bills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsorships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBill::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_from_organization_isValid && m_id_isValid && m_identifier_isValid && m_jurisdiction_isValid && m_openstates_url_isValid && m_session_isValid && m_title_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
