/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJurisdictionInclude.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJurisdictionInclude::OAIJurisdictionInclude(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJurisdictionInclude::OAIJurisdictionInclude() {
    this->initializeModel();
}

OAIJurisdictionInclude::~OAIJurisdictionInclude() {}

void OAIJurisdictionInclude::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJurisdictionInclude::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJurisdictionInclude::fromJson(QString jsonString) {
    
    if ( jsonString.compare("organizations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionInclude::ORGANIZATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("legislative_sessions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionInclude::LEGISLATIVE_SESSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("latest_runs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJurisdictionInclude::LATEST_RUNS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJurisdictionInclude::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJurisdictionInclude::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJurisdictionInclude::ORGANIZATIONS:
            val = "organizations";
            break;
        case eOAIJurisdictionInclude::LEGISLATIVE_SESSIONS:
            val = "legislative_sessions";
            break;
        case eOAIJurisdictionInclude::LATEST_RUNS:
            val = "latest_runs";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJurisdictionInclude::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJurisdictionInclude::eOAIJurisdictionInclude OAIJurisdictionInclude::getValue() const {
    return m_value;
}

void OAIJurisdictionInclude::setValue(const OAIJurisdictionInclude::eOAIJurisdictionInclude& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJurisdictionInclude::isSet() const {
    
    return m_value_isSet;
}

bool OAIJurisdictionInclude::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
