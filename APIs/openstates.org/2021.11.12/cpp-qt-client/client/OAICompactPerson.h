/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompactPerson.h
 *
 * 
 */

#ifndef OAICompactPerson_H
#define OAICompactPerson_H

#include <QJsonObject>

#include "OAICurrentRole.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrentRole;

class OAICompactPerson : public OAIObject {
public:
    OAICompactPerson();
    OAICompactPerson(QString json);
    ~OAICompactPerson() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICurrentRole getCurrentRole() const;
    void setCurrentRole(const OAICurrentRole &current_role);
    bool is_current_role_Set() const;
    bool is_current_role_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getParty() const;
    void setParty(const QString &party);
    bool is_party_Set() const;
    bool is_party_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICurrentRole m_current_role;
    bool m_current_role_isSet;
    bool m_current_role_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_party;
    bool m_party_isSet;
    bool m_party_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompactPerson)

#endif // OAICompactPerson_H
