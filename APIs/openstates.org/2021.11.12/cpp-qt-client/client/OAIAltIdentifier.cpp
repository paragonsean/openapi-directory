/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAltIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAltIdentifier::OAIAltIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAltIdentifier::OAIAltIdentifier() {
    this->initializeModel();
}

OAIAltIdentifier::~OAIAltIdentifier() {}

void OAIAltIdentifier::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAIAltIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAltIdentifier::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;
}

QString OAIAltIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAltIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

QString OAIAltIdentifier::getIdentifier() const {
    return m_identifier;
}
void OAIAltIdentifier::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAltIdentifier::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAltIdentifier::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIAltIdentifier::getScheme() const {
    return m_scheme;
}
void OAIAltIdentifier::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIAltIdentifier::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIAltIdentifier::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAIAltIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAltIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_scheme_isValid && true;
}

} // namespace OpenAPI
