/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillSponsorship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillSponsorship::OAIBillSponsorship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillSponsorship::OAIBillSponsorship() {
    this->initializeModel();
}

OAIBillSponsorship::~OAIBillSponsorship() {}

void OAIBillSponsorship::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;
}

void OAIBillSponsorship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillSponsorship::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;
}

QString OAIBillSponsorship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillSponsorship::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    return obj;
}

QString OAIBillSponsorship::getClassification() const {
    return m_classification;
}
void OAIBillSponsorship::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIBillSponsorship::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIBillSponsorship::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIBillSponsorship::getEntityType() const {
    return m_entity_type;
}
void OAIBillSponsorship::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIBillSponsorship::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIBillSponsorship::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIBillSponsorship::getName() const {
    return m_name;
}
void OAIBillSponsorship::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBillSponsorship::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBillSponsorship::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrganization OAIBillSponsorship::getOrganization() const {
    return m_organization;
}
void OAIBillSponsorship::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIBillSponsorship::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIBillSponsorship::is_organization_Valid() const{
    return m_organization_isValid;
}

OAICompactPerson OAIBillSponsorship::getPerson() const {
    return m_person;
}
void OAIBillSponsorship::setPerson(const OAICompactPerson &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIBillSponsorship::is_person_Set() const{
    return m_person_isSet;
}

bool OAIBillSponsorship::is_person_Valid() const{
    return m_person_isValid;
}

bool OAIBillSponsorship::isPrimary() const {
    return m_primary;
}
void OAIBillSponsorship::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIBillSponsorship::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIBillSponsorship::is_primary_Valid() const{
    return m_primary_isValid;
}

bool OAIBillSponsorship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillSponsorship::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_entity_type_isValid && m_name_isValid && m_primary_isValid && true;
}

} // namespace OpenAPI
