/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommittee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommittee::OAICommittee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommittee::OAICommittee() {
    this->initializeModel();
}

OAICommittee::~OAICommittee() {}

void OAICommittee::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_extras_isSet = false;
    m_extras_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_memberships_isSet = false;
    m_memberships_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_other_names_isSet = false;
    m_other_names_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAICommittee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommittee::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_extras_isValid = ::OpenAPI::fromJsonValue(m_extras, json[QString("extras")]);
    m_extras_isSet = !json[QString("extras")].isNull() && m_extras_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_memberships_isValid = ::OpenAPI::fromJsonValue(m_memberships, json[QString("memberships")]);
    m_memberships_isSet = !json[QString("memberships")].isNull() && m_memberships_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_other_names_isValid = ::OpenAPI::fromJsonValue(m_other_names, json[QString("other_names")]);
    m_other_names_isSet = !json[QString("other_names")].isNull() && m_other_names_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAICommittee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommittee::asJsonObject() const {
    QJsonObject obj;
    if (m_classification.isSet()) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_extras_isSet) {
        obj.insert(QString("extras"), ::OpenAPI::toJsonValue(m_extras));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_memberships.size() > 0) {
        obj.insert(QString("memberships"), ::OpenAPI::toJsonValue(m_memberships));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_other_names.size() > 0) {
        obj.insert(QString("other_names"), ::OpenAPI::toJsonValue(m_other_names));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

OAICommitteeClassification OAICommittee::getClassification() const {
    return m_classification;
}
void OAICommittee::setClassification(const OAICommitteeClassification &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAICommittee::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAICommittee::is_classification_Valid() const{
    return m_classification_isValid;
}

OAIObject OAICommittee::getExtras() const {
    return m_extras;
}
void OAICommittee::setExtras(const OAIObject &extras) {
    m_extras = extras;
    m_extras_isSet = true;
}

bool OAICommittee::is_extras_Set() const{
    return m_extras_isSet;
}

bool OAICommittee::is_extras_Valid() const{
    return m_extras_isValid;
}

QString OAICommittee::getId() const {
    return m_id;
}
void OAICommittee::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommittee::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommittee::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILink> OAICommittee::getLinks() const {
    return m_links;
}
void OAICommittee::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAICommittee::is_links_Set() const{
    return m_links_isSet;
}

bool OAICommittee::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAICommitteeMembership> OAICommittee::getMemberships() const {
    return m_memberships;
}
void OAICommittee::setMemberships(const QList<OAICommitteeMembership> &memberships) {
    m_memberships = memberships;
    m_memberships_isSet = true;
}

bool OAICommittee::is_memberships_Set() const{
    return m_memberships_isSet;
}

bool OAICommittee::is_memberships_Valid() const{
    return m_memberships_isValid;
}

QString OAICommittee::getName() const {
    return m_name;
}
void OAICommittee::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommittee::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommittee::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAltName> OAICommittee::getOtherNames() const {
    return m_other_names;
}
void OAICommittee::setOtherNames(const QList<OAIAltName> &other_names) {
    m_other_names = other_names;
    m_other_names_isSet = true;
}

bool OAICommittee::is_other_names_Set() const{
    return m_other_names_isSet;
}

bool OAICommittee::is_other_names_Valid() const{
    return m_other_names_isValid;
}

QString OAICommittee::getParentId() const {
    return m_parent_id;
}
void OAICommittee::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICommittee::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICommittee::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QList<OAILink> OAICommittee::getSources() const {
    return m_sources;
}
void OAICommittee::setSources(const QList<OAILink> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICommittee::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICommittee::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAICommittee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extras_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommittee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_extras_isValid && m_id_isValid && m_name_isValid && m_parent_id_isValid && true;
}

} // namespace OpenAPI
