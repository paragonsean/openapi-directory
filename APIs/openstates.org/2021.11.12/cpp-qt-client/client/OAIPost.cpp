/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost::OAIPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost::OAIPost() {
    this->initializeModel();
}

OAIPost::~OAIPost() {}

void OAIPost::initializeModel() {

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_maximum_memberships_isSet = false;
    m_maximum_memberships_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost::fromJsonObject(QJsonObject json) {

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("division_id")]);
    m_division_id_isSet = !json[QString("division_id")].isNull() && m_division_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_maximum_memberships_isValid = ::OpenAPI::fromJsonValue(m_maximum_memberships, json[QString("maximum_memberships")]);
    m_maximum_memberships_isSet = !json[QString("maximum_memberships")].isNull() && m_maximum_memberships_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost::asJsonObject() const {
    QJsonObject obj;
    if (m_division_id_isSet) {
        obj.insert(QString("division_id"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_maximum_memberships_isSet) {
        obj.insert(QString("maximum_memberships"), ::OpenAPI::toJsonValue(m_maximum_memberships));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIPost::getDivisionId() const {
    return m_division_id;
}
void OAIPost::setDivisionId(const QString &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIPost::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIPost::is_division_id_Valid() const{
    return m_division_id_isValid;
}

QString OAIPost::getLabel() const {
    return m_label;
}
void OAIPost::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIPost::is_label_Set() const{
    return m_label_isSet;
}

bool OAIPost::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIPost::getMaximumMemberships() const {
    return m_maximum_memberships;
}
void OAIPost::setMaximumMemberships(const qint32 &maximum_memberships) {
    m_maximum_memberships = maximum_memberships;
    m_maximum_memberships_isSet = true;
}

bool OAIPost::is_maximum_memberships_Set() const{
    return m_maximum_memberships_isSet;
}

bool OAIPost::is_maximum_memberships_Valid() const{
    return m_maximum_memberships_isValid;
}

QString OAIPost::getRole() const {
    return m_role;
}
void OAIPost::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPost::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPost::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_memberships_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_division_id_isValid && m_label_isValid && m_maximum_memberships_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
