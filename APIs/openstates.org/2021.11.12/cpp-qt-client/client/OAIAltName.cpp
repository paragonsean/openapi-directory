/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAltName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAltName::OAIAltName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAltName::OAIAltName() {
    this->initializeModel();
}

OAIAltName::~OAIAltName() {}

void OAIAltName::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAIAltName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAltName::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAIAltName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAltName::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAIAltName::getName() const {
    return m_name;
}
void OAIAltName::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAltName::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAltName::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAltName::getNote() const {
    return m_note;
}
void OAIAltName::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIAltName::is_note_Set() const{
    return m_note_isSet;
}

bool OAIAltName::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIAltName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAltName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_note_isValid && true;
}

} // namespace OpenAPI
