/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillDocumentLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillDocumentLink::OAIBillDocumentLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillDocumentLink::OAIBillDocumentLink() {
    this->initializeModel();
}

OAIBillDocumentLink::~OAIBillDocumentLink() {}

void OAIBillDocumentLink::initializeModel() {

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBillDocumentLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillDocumentLink::fromJsonObject(QJsonObject json) {

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBillDocumentLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillDocumentLink::asJsonObject() const {
    QJsonObject obj;
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIBillDocumentLink::getMediaType() const {
    return m_media_type;
}
void OAIBillDocumentLink::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIBillDocumentLink::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIBillDocumentLink::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIBillDocumentLink::getUrl() const {
    return m_url;
}
void OAIBillDocumentLink::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBillDocumentLink::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBillDocumentLink::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBillDocumentLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillDocumentLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
