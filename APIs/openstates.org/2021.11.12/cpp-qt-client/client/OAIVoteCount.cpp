/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoteCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoteCount::OAIVoteCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoteCount::OAIVoteCount() {
    this->initializeModel();
}

OAIVoteCount::~OAIVoteCount() {}

void OAIVoteCount::initializeModel() {

    m_option_isSet = false;
    m_option_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIVoteCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoteCount::fromJsonObject(QJsonObject json) {

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIVoteCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoteCount::asJsonObject() const {
    QJsonObject obj;
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIVoteCount::getOption() const {
    return m_option;
}
void OAIVoteCount::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIVoteCount::is_option_Set() const{
    return m_option_isSet;
}

bool OAIVoteCount::is_option_Valid() const{
    return m_option_isValid;
}

qint32 OAIVoteCount::getValue() const {
    return m_value;
}
void OAIVoteCount::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIVoteCount::is_value_Set() const{
    return m_value_isSet;
}

bool OAIVoteCount::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIVoteCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoteCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_option_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
