/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillDocumentOrVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillDocumentOrVersion::OAIBillDocumentOrVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillDocumentOrVersion::OAIBillDocumentOrVersion() {
    this->initializeModel();
}

OAIBillDocumentOrVersion::~OAIBillDocumentOrVersion() {}

void OAIBillDocumentOrVersion::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAIBillDocumentOrVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillDocumentOrVersion::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAIBillDocumentOrVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillDocumentOrVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAIBillDocumentOrVersion::getDate() const {
    return m_date;
}
void OAIBillDocumentOrVersion::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIBillDocumentOrVersion::is_date_Set() const{
    return m_date_isSet;
}

bool OAIBillDocumentOrVersion::is_date_Valid() const{
    return m_date_isValid;
}

QList<OAIBillDocumentLink> OAIBillDocumentOrVersion::getLinks() const {
    return m_links;
}
void OAIBillDocumentOrVersion::setLinks(const QList<OAIBillDocumentLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBillDocumentOrVersion::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBillDocumentOrVersion::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIBillDocumentOrVersion::getNote() const {
    return m_note;
}
void OAIBillDocumentOrVersion::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIBillDocumentOrVersion::is_note_Set() const{
    return m_note_isSet;
}

bool OAIBillDocumentOrVersion::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIBillDocumentOrVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillDocumentOrVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_links_isValid && m_note_isValid && true;
}

} // namespace OpenAPI
