/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_agenda_isSet = false;
    m_agenda_isValid = false;

    m_all_day_isSet = false;
    m_all_day_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jurisdiction_isSet = false;
    m_jurisdiction_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_upstream_id_isSet = false;
    m_upstream_id_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_agenda_isValid = ::OpenAPI::fromJsonValue(m_agenda, json[QString("agenda")]);
    m_agenda_isSet = !json[QString("agenda")].isNull() && m_agenda_isValid;

    m_all_day_isValid = ::OpenAPI::fromJsonValue(m_all_day, json[QString("all_day")]);
    m_all_day_isSet = !json[QString("all_day")].isNull() && m_all_day_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_jurisdiction, json[QString("jurisdiction")]);
    m_jurisdiction_isSet = !json[QString("jurisdiction")].isNull() && m_jurisdiction_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_upstream_id_isValid = ::OpenAPI::fromJsonValue(m_upstream_id, json[QString("upstream_id")]);
    m_upstream_id_isSet = !json[QString("upstream_id")].isNull() && m_upstream_id_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_agenda.size() > 0) {
        obj.insert(QString("agenda"), ::OpenAPI::toJsonValue(m_agenda));
    }
    if (m_all_day_isSet) {
        obj.insert(QString("all_day"), ::OpenAPI::toJsonValue(m_all_day));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jurisdiction.isSet()) {
        obj.insert(QString("jurisdiction"), ::OpenAPI::toJsonValue(m_jurisdiction));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_upstream_id_isSet) {
        obj.insert(QString("upstream_id"), ::OpenAPI::toJsonValue(m_upstream_id));
    }
    return obj;
}

QList<OAIEventAgendaItem> OAIEvent::getAgenda() const {
    return m_agenda;
}
void OAIEvent::setAgenda(const QList<OAIEventAgendaItem> &agenda) {
    m_agenda = agenda;
    m_agenda_isSet = true;
}

bool OAIEvent::is_agenda_Set() const{
    return m_agenda_isSet;
}

bool OAIEvent::is_agenda_Valid() const{
    return m_agenda_isValid;
}

bool OAIEvent::isAllDay() const {
    return m_all_day;
}
void OAIEvent::setAllDay(const bool &all_day) {
    m_all_day = all_day;
    m_all_day_isSet = true;
}

bool OAIEvent::is_all_day_Set() const{
    return m_all_day_isSet;
}

bool OAIEvent::is_all_day_Valid() const{
    return m_all_day_isValid;
}

QString OAIEvent::getClassification() const {
    return m_classification;
}
void OAIEvent::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIEvent::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIEvent::is_classification_Valid() const{
    return m_classification_isValid;
}

bool OAIEvent::isDeleted() const {
    return m_deleted;
}
void OAIEvent::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIEvent::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIEvent::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEventDocument> OAIEvent::getDocuments() const {
    return m_documents;
}
void OAIEvent::setDocuments(const QList<OAIEventDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIEvent::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIEvent::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIEvent::getEndDate() const {
    return m_end_date;
}
void OAIEvent::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEvent::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEvent::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

OAICompactJurisdiction OAIEvent::getJurisdiction() const {
    return m_jurisdiction;
}
void OAIEvent::setJurisdiction(const OAICompactJurisdiction &jurisdiction) {
    m_jurisdiction = jurisdiction;
    m_jurisdiction_isSet = true;
}

bool OAIEvent::is_jurisdiction_Set() const{
    return m_jurisdiction_isSet;
}

bool OAIEvent::is_jurisdiction_Valid() const{
    return m_jurisdiction_isValid;
}

QList<OAILink> OAIEvent::getLinks() const {
    return m_links;
}
void OAIEvent::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIEvent::is_links_Set() const{
    return m_links_isSet;
}

bool OAIEvent::is_links_Valid() const{
    return m_links_isValid;
}

OAIEventLocation OAIEvent::getLocation() const {
    return m_location;
}
void OAIEvent::setLocation(const OAIEventLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEvent::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIEventMedia> OAIEvent::getMedia() const {
    return m_media;
}
void OAIEvent::setMedia(const QList<OAIEventMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIEvent::is_media_Set() const{
    return m_media_isSet;
}

bool OAIEvent::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIEventParticipant> OAIEvent::getParticipants() const {
    return m_participants;
}
void OAIEvent::setParticipants(const QList<OAIEventParticipant> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIEvent::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIEvent::is_participants_Valid() const{
    return m_participants_isValid;
}

QList<OAILink> OAIEvent::getSources() const {
    return m_sources;
}
void OAIEvent::setSources(const QList<OAILink> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIEvent::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIEvent::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIEvent::getStartDate() const {
    return m_start_date;
}
void OAIEvent::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEvent::getStatus() const {
    return m_status;
}
void OAIEvent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEvent::getUpstreamId() const {
    return m_upstream_id;
}
void OAIEvent::setUpstreamId(const QString &upstream_id) {
    m_upstream_id = upstream_id;
    m_upstream_id_isSet = true;
}

bool OAIEvent::is_upstream_id_Set() const{
    return m_upstream_id_isSet;
}

bool OAIEvent::is_upstream_id_Valid() const{
    return m_upstream_id_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agenda.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdiction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_day_isValid && m_classification_isValid && m_deleted_isValid && m_description_isValid && m_end_date_isValid && m_id_isValid && m_jurisdiction_isValid && m_name_isValid && m_start_date_isValid && m_status_isValid && m_upstream_id_isValid && true;
}

} // namespace OpenAPI
