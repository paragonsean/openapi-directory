/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExport::OAIDataExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExport::OAIDataExport() {
    this->initializeModel();
}

OAIDataExport::~OAIDataExport() {}

void OAIDataExport::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDataExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExport::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDataExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExport::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIDataExport::getCreatedAt() const {
    return m_created_at;
}
void OAIDataExport::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDataExport::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDataExport::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDataExport::getDataType() const {
    return m_data_type;
}
void OAIDataExport::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIDataExport::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIDataExport::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QDateTime OAIDataExport::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDataExport::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDataExport::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDataExport::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIDataExport::getUrl() const {
    return m_url;
}
void OAIDataExport::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDataExport::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDataExport::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDataExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_data_type_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
