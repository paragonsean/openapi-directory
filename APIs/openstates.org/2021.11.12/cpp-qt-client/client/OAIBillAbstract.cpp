/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillAbstract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillAbstract::OAIBillAbstract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillAbstract::OAIBillAbstract() {
    this->initializeModel();
}

OAIBillAbstract::~OAIBillAbstract() {}

void OAIBillAbstract::initializeModel() {

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAIBillAbstract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillAbstract::fromJsonObject(QJsonObject json) {

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAIBillAbstract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillAbstract::asJsonObject() const {
    QJsonObject obj;
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAIBillAbstract::getAbstract() const {
    return m_abstract;
}
void OAIBillAbstract::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIBillAbstract::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIBillAbstract::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QString OAIBillAbstract::getNote() const {
    return m_note;
}
void OAIBillAbstract::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIBillAbstract::is_note_Set() const{
    return m_note_isSet;
}

bool OAIBillAbstract::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIBillAbstract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillAbstract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abstract_isValid && m_note_isValid && true;
}

} // namespace OpenAPI
