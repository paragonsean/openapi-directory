/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompactPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompactPerson::OAICompactPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompactPerson::OAICompactPerson() {
    this->initializeModel();
}

OAICompactPerson::~OAICompactPerson() {}

void OAICompactPerson::initializeModel() {

    m_current_role_isSet = false;
    m_current_role_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;
}

void OAICompactPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompactPerson::fromJsonObject(QJsonObject json) {

    m_current_role_isValid = ::OpenAPI::fromJsonValue(m_current_role, json[QString("current_role")]);
    m_current_role_isSet = !json[QString("current_role")].isNull() && m_current_role_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;
}

QString OAICompactPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompactPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_current_role.isSet()) {
        obj.insert(QString("current_role"), ::OpenAPI::toJsonValue(m_current_role));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    return obj;
}

OAICurrentRole OAICompactPerson::getCurrentRole() const {
    return m_current_role;
}
void OAICompactPerson::setCurrentRole(const OAICurrentRole &current_role) {
    m_current_role = current_role;
    m_current_role_isSet = true;
}

bool OAICompactPerson::is_current_role_Set() const{
    return m_current_role_isSet;
}

bool OAICompactPerson::is_current_role_Valid() const{
    return m_current_role_isValid;
}

QString OAICompactPerson::getId() const {
    return m_id;
}
void OAICompactPerson::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompactPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompactPerson::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompactPerson::getName() const {
    return m_name;
}
void OAICompactPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompactPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompactPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompactPerson::getParty() const {
    return m_party;
}
void OAICompactPerson::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICompactPerson::is_party_Set() const{
    return m_party_isSet;
}

bool OAICompactPerson::is_party_Valid() const{
    return m_party_isValid;
}

bool OAICompactPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompactPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_party_isValid && true;
}

} // namespace OpenAPI
