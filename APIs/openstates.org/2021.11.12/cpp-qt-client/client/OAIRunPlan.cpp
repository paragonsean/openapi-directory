/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunPlan::OAIRunPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunPlan::OAIRunPlan() {
    this->initializeModel();
}

OAIRunPlan::~OAIRunPlan() {}

void OAIRunPlan::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIRunPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunPlan::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIRunPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QDateTime OAIRunPlan::getEndTime() const {
    return m_end_time;
}
void OAIRunPlan::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRunPlan::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRunPlan::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIRunPlan::getStartTime() const {
    return m_start_time;
}
void OAIRunPlan::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRunPlan::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRunPlan::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIRunPlan::isSuccess() const {
    return m_success;
}
void OAIRunPlan::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIRunPlan::is_success_Set() const{
    return m_success_isSet;
}

bool OAIRunPlan::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIRunPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_start_time_isValid && m_success_isValid && true;
}

} // namespace OpenAPI
