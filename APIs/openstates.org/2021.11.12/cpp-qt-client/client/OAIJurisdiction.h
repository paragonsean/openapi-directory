/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJurisdiction.h
 *
 * 
 */

#ifndef OAIJurisdiction_H
#define OAIJurisdiction_H

#include <QJsonObject>

#include "OAIChamber.h"
#include "OAIJurisdictionClassification.h"
#include "OAILegislativeSession.h"
#include "OAIRunPlan.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRunPlan;
class OAILegislativeSession;
class OAIChamber;

class OAIJurisdiction : public OAIObject {
public:
    OAIJurisdiction();
    OAIJurisdiction(QString json);
    ~OAIJurisdiction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIJurisdictionClassification getClassification() const;
    void setClassification(const OAIJurisdictionClassification &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getDivisionId() const;
    void setDivisionId(const QString &division_id);
    bool is_division_id_Set() const;
    bool is_division_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLatestBillUpdate() const;
    void setLatestBillUpdate(const QDateTime &latest_bill_update);
    bool is_latest_bill_update_Set() const;
    bool is_latest_bill_update_Valid() const;

    QDateTime getLatestPeopleUpdate() const;
    void setLatestPeopleUpdate(const QDateTime &latest_people_update);
    bool is_latest_people_update_Set() const;
    bool is_latest_people_update_Valid() const;

    QList<OAIRunPlan> getLatestRuns() const;
    void setLatestRuns(const QList<OAIRunPlan> &latest_runs);
    bool is_latest_runs_Set() const;
    bool is_latest_runs_Valid() const;

    QList<OAILegislativeSession> getLegislativeSessions() const;
    void setLegislativeSessions(const QList<OAILegislativeSession> &legislative_sessions);
    bool is_legislative_sessions_Set() const;
    bool is_legislative_sessions_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIChamber> getOrganizations() const;
    void setOrganizations(const QList<OAIChamber> &organizations);
    bool is_organizations_Set() const;
    bool is_organizations_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIJurisdictionClassification m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_division_id;
    bool m_division_id_isSet;
    bool m_division_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_latest_bill_update;
    bool m_latest_bill_update_isSet;
    bool m_latest_bill_update_isValid;

    QDateTime m_latest_people_update;
    bool m_latest_people_update_isSet;
    bool m_latest_people_update_isValid;

    QList<OAIRunPlan> m_latest_runs;
    bool m_latest_runs_isSet;
    bool m_latest_runs_isValid;

    QList<OAILegislativeSession> m_legislative_sessions;
    bool m_legislative_sessions_isSet;
    bool m_legislative_sessions_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIChamber> m_organizations;
    bool m_organizations_isSet;
    bool m_organizations_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJurisdiction)

#endif // OAIJurisdiction_H
