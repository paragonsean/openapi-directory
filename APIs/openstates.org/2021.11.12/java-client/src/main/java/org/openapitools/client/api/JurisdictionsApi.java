/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Jurisdiction;
import org.openapitools.client.model.JurisdictionClassification;
import org.openapitools.client.model.JurisdictionInclude;
import org.openapitools.client.model.JurisdictionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JurisdictionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JurisdictionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JurisdictionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jurisdictionDetailJurisdictionsJurisdictionIdGet
     * @param jurisdictionId  (required)
     * @param include Additional includes for the Jurisdiction response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionDetailJurisdictionsJurisdictionIdGetCall(String jurisdictionId, List<JurisdictionInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jurisdictions/{jurisdiction_id}"
            .replace("{" + "jurisdiction_id" + "}", localVarApiClient.escapeString(jurisdictionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jurisdictionDetailJurisdictionsJurisdictionIdGetValidateBeforeCall(String jurisdictionId, List<JurisdictionInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jurisdictionId' is set
        if (jurisdictionId == null) {
            throw new ApiException("Missing the required parameter 'jurisdictionId' when calling jurisdictionDetailJurisdictionsJurisdictionIdGet(Async)");
        }

        return jurisdictionDetailJurisdictionsJurisdictionIdGetCall(jurisdictionId, include, apikey, xApiKey, _callback);

    }

    /**
     * Jurisdiction Detail
     * Get details on a single Jurisdiction (e.g. state or municipality).
     * @param jurisdictionId  (required)
     * @param include Additional includes for the Jurisdiction response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return Jurisdiction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Jurisdiction jurisdictionDetailJurisdictionsJurisdictionIdGet(String jurisdictionId, List<JurisdictionInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<Jurisdiction> localVarResp = jurisdictionDetailJurisdictionsJurisdictionIdGetWithHttpInfo(jurisdictionId, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Jurisdiction Detail
     * Get details on a single Jurisdiction (e.g. state or municipality).
     * @param jurisdictionId  (required)
     * @param include Additional includes for the Jurisdiction response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Jurisdiction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jurisdiction> jurisdictionDetailJurisdictionsJurisdictionIdGetWithHttpInfo(String jurisdictionId, List<JurisdictionInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = jurisdictionDetailJurisdictionsJurisdictionIdGetValidateBeforeCall(jurisdictionId, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<Jurisdiction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jurisdiction Detail (asynchronously)
     * Get details on a single Jurisdiction (e.g. state or municipality).
     * @param jurisdictionId  (required)
     * @param include Additional includes for the Jurisdiction response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionDetailJurisdictionsJurisdictionIdGetAsync(String jurisdictionId, List<JurisdictionInclude> include, String apikey, String xApiKey, final ApiCallback<Jurisdiction> _callback) throws ApiException {

        okhttp3.Call localVarCall = jurisdictionDetailJurisdictionsJurisdictionIdGetValidateBeforeCall(jurisdictionId, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Jurisdiction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jurisdictionListJurisdictionsGet
     * @param classification Filter returned jurisdictions by type. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 52)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionListJurisdictionsGetCall(JurisdictionClassification classification, List<JurisdictionInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jurisdictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jurisdictionListJurisdictionsGetValidateBeforeCall(JurisdictionClassification classification, List<JurisdictionInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        return jurisdictionListJurisdictionsGetCall(classification, include, page, perPage, apikey, xApiKey, _callback);

    }

    /**
     * Jurisdiction List
     * Get list of supported Jurisdictions, a Jurisdiction is a state or municipality.
     * @param classification Filter returned jurisdictions by type. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 52)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return JurisdictionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public JurisdictionList jurisdictionListJurisdictionsGet(JurisdictionClassification classification, List<JurisdictionInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        ApiResponse<JurisdictionList> localVarResp = jurisdictionListJurisdictionsGetWithHttpInfo(classification, include, page, perPage, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Jurisdiction List
     * Get list of supported Jurisdictions, a Jurisdiction is a state or municipality.
     * @param classification Filter returned jurisdictions by type. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 52)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;JurisdictionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JurisdictionList> jurisdictionListJurisdictionsGetWithHttpInfo(JurisdictionClassification classification, List<JurisdictionInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = jurisdictionListJurisdictionsGetValidateBeforeCall(classification, include, page, perPage, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<JurisdictionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jurisdiction List (asynchronously)
     * Get list of supported Jurisdictions, a Jurisdiction is a state or municipality.
     * @param classification Filter returned jurisdictions by type. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 52)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionListJurisdictionsGetAsync(JurisdictionClassification classification, List<JurisdictionInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback<JurisdictionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jurisdictionListJurisdictionsGetValidateBeforeCall(classification, include, page, perPage, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<JurisdictionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
