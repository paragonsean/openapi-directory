/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventInclude;
import org.openapitools.client.model.EventList;
import org.openapitools.client.model.HTTPValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventDetailEventsEventIdGet
     * @param eventId  (required)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventDetailEventsEventIdGetCall(String eventId, List<EventInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventDetailEventsEventIdGetValidateBeforeCall(String eventId, List<EventInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventDetailEventsEventIdGet(Async)");
        }

        return eventDetailEventsEventIdGetCall(eventId, include, apikey, xApiKey, _callback);

    }

    /**
     * Event Detail
     * Get details on a single event by ID.
     * @param eventId  (required)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Event eventDetailEventsEventIdGet(String eventId, List<EventInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<Event> localVarResp = eventDetailEventsEventIdGetWithHttpInfo(eventId, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Event Detail
     * Get details on a single event by ID.
     * @param eventId  (required)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> eventDetailEventsEventIdGetWithHttpInfo(String eventId, List<EventInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = eventDetailEventsEventIdGetValidateBeforeCall(eventId, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event Detail (asynchronously)
     * Get details on a single event by ID.
     * @param eventId  (required)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventDetailEventsEventIdGetAsync(String eventId, List<EventInclude> include, String apikey, String xApiKey, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventDetailEventsEventIdGetValidateBeforeCall(eventId, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventListEventsGet
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param deleted Return events marked as deleted? (optional, default to false)
     * @param before Limit results to those starting before a given datetime. (optional)
     * @param after Limit results to those starting before a given datetime. (optional)
     * @param requireBills Limit results to events with associated bills. (optional, default to false)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventListEventsGetCall(String jurisdiction, Boolean deleted, String before, String after, Boolean requireBills, List<EventInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (requireBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("require_bills", requireBills));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventListEventsGetValidateBeforeCall(String jurisdiction, Boolean deleted, String before, String after, Boolean requireBills, List<EventInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback _callback) throws ApiException {
        return eventListEventsGetCall(jurisdiction, deleted, before, after, requireBills, include, apikey, page, perPage, xApiKey, _callback);

    }

    /**
     * Event List
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param deleted Return events marked as deleted? (optional, default to false)
     * @param before Limit results to those starting before a given datetime. (optional)
     * @param after Limit results to those starting before a given datetime. (optional)
     * @param requireBills Limit results to events with associated bills. (optional, default to false)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @return EventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public EventList eventListEventsGet(String jurisdiction, Boolean deleted, String before, String after, Boolean requireBills, List<EventInclude> include, String apikey, Integer page, Integer perPage, String xApiKey) throws ApiException {
        ApiResponse<EventList> localVarResp = eventListEventsGetWithHttpInfo(jurisdiction, deleted, before, after, requireBills, include, apikey, page, perPage, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Event List
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param deleted Return events marked as deleted? (optional, default to false)
     * @param before Limit results to those starting before a given datetime. (optional)
     * @param after Limit results to those starting before a given datetime. (optional)
     * @param requireBills Limit results to events with associated bills. (optional, default to false)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;EventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventList> eventListEventsGetWithHttpInfo(String jurisdiction, Boolean deleted, String before, String after, Boolean requireBills, List<EventInclude> include, String apikey, Integer page, Integer perPage, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = eventListEventsGetValidateBeforeCall(jurisdiction, deleted, before, after, requireBills, include, apikey, page, perPage, xApiKey, null);
        Type localVarReturnType = new TypeToken<EventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event List (asynchronously)
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param deleted Return events marked as deleted? (optional, default to false)
     * @param before Limit results to those starting before a given datetime. (optional)
     * @param after Limit results to those starting before a given datetime. (optional)
     * @param requireBills Limit results to events with associated bills. (optional, default to false)
     * @param include Additional includes for the Event response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventListEventsGetAsync(String jurisdiction, Boolean deleted, String before, String after, Boolean requireBills, List<EventInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback<EventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventListEventsGetValidateBeforeCall(jurisdiction, deleted, before, after, requireBills, include, apikey, page, perPage, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<EventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
