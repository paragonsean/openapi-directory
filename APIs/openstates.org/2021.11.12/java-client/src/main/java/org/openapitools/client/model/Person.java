/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AltIdentifier;
import org.openapitools.client.model.AltName;
import org.openapitools.client.model.CompactJurisdiction;
import org.openapitools.client.model.CurrentRole;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Office;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:35.610624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Person {
  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENT_ROLE = "current_role";
  @SerializedName(SERIALIZED_NAME_CURRENT_ROLE)
  private CurrentRole currentRole;

  public static final String SERIALIZED_NAME_DEATH_DATE = "death_date";
  @SerializedName(SERIALIZED_NAME_DEATH_DATE)
  private String deathDate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Object extras;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "family_name";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "given_name";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_JURISDICTION = "jurisdiction";
  @SerializedName(SERIALIZED_NAME_JURISDICTION)
  private CompactJurisdiction jurisdiction;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICES = "offices";
  @SerializedName(SERIALIZED_NAME_OFFICES)
  private List<Office> offices = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPENSTATES_URL = "openstates_url";
  @SerializedName(SERIALIZED_NAME_OPENSTATES_URL)
  private String openstatesUrl;

  public static final String SERIALIZED_NAME_OTHER_IDENTIFIERS = "other_identifiers";
  @SerializedName(SERIALIZED_NAME_OTHER_IDENTIFIERS)
  private List<AltIdentifier> otherIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_NAMES = "other_names";
  @SerializedName(SERIALIZED_NAME_OTHER_NAMES)
  private List<AltName> otherNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Link> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Person() {
  }

  public Person birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nonnull
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public Person createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Person currentRole(CurrentRole currentRole) {
    this.currentRole = currentRole;
    return this;
  }

  /**
   * Get currentRole
   * @return currentRole
   */
  @javax.annotation.Nullable
  public CurrentRole getCurrentRole() {
    return currentRole;
  }

  public void setCurrentRole(CurrentRole currentRole) {
    this.currentRole = currentRole;
  }


  public Person deathDate(String deathDate) {
    this.deathDate = deathDate;
    return this;
  }

  /**
   * Get deathDate
   * @return deathDate
   */
  @javax.annotation.Nonnull
  public String getDeathDate() {
    return deathDate;
  }

  public void setDeathDate(String deathDate) {
    this.deathDate = deathDate;
  }


  public Person email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Person extras(Object extras) {
    this.extras = extras;
    return this;
  }

  /**
   * Get extras
   * @return extras
   */
  @javax.annotation.Nonnull
  public Object getExtras() {
    return extras;
  }

  public void setExtras(Object extras) {
    this.extras = extras;
  }


  public Person familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * Get familyName
   * @return familyName
   */
  @javax.annotation.Nonnull
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public Person gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nonnull
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Person givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * Get givenName
   * @return givenName
   */
  @javax.annotation.Nonnull
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Person id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Person image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Person jurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
    return this;
  }

  /**
   * Get jurisdiction
   * @return jurisdiction
   */
  @javax.annotation.Nonnull
  public CompactJurisdiction getJurisdiction() {
    return jurisdiction;
  }

  public void setJurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
  }


  public Person links(List<Link> links) {
    this.links = links;
    return this;
  }

  public Person addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  public Person name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Person offices(List<Office> offices) {
    this.offices = offices;
    return this;
  }

  public Person addOfficesItem(Office officesItem) {
    if (this.offices == null) {
      this.offices = new ArrayList<>();
    }
    this.offices.add(officesItem);
    return this;
  }

  /**
   * Get offices
   * @return offices
   */
  @javax.annotation.Nullable
  public List<Office> getOffices() {
    return offices;
  }

  public void setOffices(List<Office> offices) {
    this.offices = offices;
  }


  public Person openstatesUrl(String openstatesUrl) {
    this.openstatesUrl = openstatesUrl;
    return this;
  }

  /**
   * Get openstatesUrl
   * @return openstatesUrl
   */
  @javax.annotation.Nonnull
  public String getOpenstatesUrl() {
    return openstatesUrl;
  }

  public void setOpenstatesUrl(String openstatesUrl) {
    this.openstatesUrl = openstatesUrl;
  }


  public Person otherIdentifiers(List<AltIdentifier> otherIdentifiers) {
    this.otherIdentifiers = otherIdentifiers;
    return this;
  }

  public Person addOtherIdentifiersItem(AltIdentifier otherIdentifiersItem) {
    if (this.otherIdentifiers == null) {
      this.otherIdentifiers = new ArrayList<>();
    }
    this.otherIdentifiers.add(otherIdentifiersItem);
    return this;
  }

  /**
   * Get otherIdentifiers
   * @return otherIdentifiers
   */
  @javax.annotation.Nullable
  public List<AltIdentifier> getOtherIdentifiers() {
    return otherIdentifiers;
  }

  public void setOtherIdentifiers(List<AltIdentifier> otherIdentifiers) {
    this.otherIdentifiers = otherIdentifiers;
  }


  public Person otherNames(List<AltName> otherNames) {
    this.otherNames = otherNames;
    return this;
  }

  public Person addOtherNamesItem(AltName otherNamesItem) {
    if (this.otherNames == null) {
      this.otherNames = new ArrayList<>();
    }
    this.otherNames.add(otherNamesItem);
    return this;
  }

  /**
   * Get otherNames
   * @return otherNames
   */
  @javax.annotation.Nullable
  public List<AltName> getOtherNames() {
    return otherNames;
  }

  public void setOtherNames(List<AltName> otherNames) {
    this.otherNames = otherNames;
  }


  public Person party(String party) {
    this.party = party;
    return this;
  }

  /**
   * Get party
   * @return party
   */
  @javax.annotation.Nonnull
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Person sources(List<Link> sources) {
    this.sources = sources;
    return this;
  }

  public Person addSourcesItem(Link sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Link> getSources() {
    return sources;
  }

  public void setSources(List<Link> sources) {
    this.sources = sources;
  }


  public Person updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.birthDate, person.birthDate) &&
        Objects.equals(this.createdAt, person.createdAt) &&
        Objects.equals(this.currentRole, person.currentRole) &&
        Objects.equals(this.deathDate, person.deathDate) &&
        Objects.equals(this.email, person.email) &&
        Objects.equals(this.extras, person.extras) &&
        Objects.equals(this.familyName, person.familyName) &&
        Objects.equals(this.gender, person.gender) &&
        Objects.equals(this.givenName, person.givenName) &&
        Objects.equals(this.id, person.id) &&
        Objects.equals(this.image, person.image) &&
        Objects.equals(this.jurisdiction, person.jurisdiction) &&
        Objects.equals(this.links, person.links) &&
        Objects.equals(this.name, person.name) &&
        Objects.equals(this.offices, person.offices) &&
        Objects.equals(this.openstatesUrl, person.openstatesUrl) &&
        Objects.equals(this.otherIdentifiers, person.otherIdentifiers) &&
        Objects.equals(this.otherNames, person.otherNames) &&
        Objects.equals(this.party, person.party) &&
        Objects.equals(this.sources, person.sources) &&
        Objects.equals(this.updatedAt, person.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthDate, createdAt, currentRole, deathDate, email, extras, familyName, gender, givenName, id, image, jurisdiction, links, name, offices, openstatesUrl, otherIdentifiers, otherNames, party, sources, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentRole: ").append(toIndentedString(currentRole)).append("\n");
    sb.append("    deathDate: ").append(toIndentedString(deathDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    jurisdiction: ").append(toIndentedString(jurisdiction)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offices: ").append(toIndentedString(offices)).append("\n");
    sb.append("    openstatesUrl: ").append(toIndentedString(openstatesUrl)).append("\n");
    sb.append("    otherIdentifiers: ").append(toIndentedString(otherIdentifiers)).append("\n");
    sb.append("    otherNames: ").append(toIndentedString(otherNames)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birth_date");
    openapiFields.add("created_at");
    openapiFields.add("current_role");
    openapiFields.add("death_date");
    openapiFields.add("email");
    openapiFields.add("extras");
    openapiFields.add("family_name");
    openapiFields.add("gender");
    openapiFields.add("given_name");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("jurisdiction");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("offices");
    openapiFields.add("openstates_url");
    openapiFields.add("other_identifiers");
    openapiFields.add("other_names");
    openapiFields.add("party");
    openapiFields.add("sources");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("birth_date");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("death_date");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("extras");
    openapiRequiredFields.add("family_name");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("given_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("jurisdiction");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("openstates_url");
    openapiRequiredFields.add("party");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Person.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("birth_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birth_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birth_date").toString()));
      }
      // validate the optional field `current_role`
      if (jsonObj.get("current_role") != null && !jsonObj.get("current_role").isJsonNull()) {
        CurrentRole.validateJsonElement(jsonObj.get("current_role"));
      }
      if (!jsonObj.get("death_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `death_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("death_date").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("family_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_name").toString()));
      }
      if (!jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("given_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `given_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("given_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the required field `jurisdiction`
      CompactJurisdiction.validateJsonElement(jsonObj.get("jurisdiction"));
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("offices") != null && !jsonObj.get("offices").isJsonNull()) {
        JsonArray jsonArrayoffices = jsonObj.getAsJsonArray("offices");
        if (jsonArrayoffices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offices` to be an array in the JSON string but got `%s`", jsonObj.get("offices").toString()));
          }

          // validate the optional field `offices` (array)
          for (int i = 0; i < jsonArrayoffices.size(); i++) {
            Office.validateJsonElement(jsonArrayoffices.get(i));
          };
        }
      }
      if (!jsonObj.get("openstates_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openstates_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openstates_url").toString()));
      }
      if (jsonObj.get("other_identifiers") != null && !jsonObj.get("other_identifiers").isJsonNull()) {
        JsonArray jsonArrayotherIdentifiers = jsonObj.getAsJsonArray("other_identifiers");
        if (jsonArrayotherIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("other_identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `other_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("other_identifiers").toString()));
          }

          // validate the optional field `other_identifiers` (array)
          for (int i = 0; i < jsonArrayotherIdentifiers.size(); i++) {
            AltIdentifier.validateJsonElement(jsonArrayotherIdentifiers.get(i));
          };
        }
      }
      if (jsonObj.get("other_names") != null && !jsonObj.get("other_names").isJsonNull()) {
        JsonArray jsonArrayotherNames = jsonObj.getAsJsonArray("other_names");
        if (jsonArrayotherNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("other_names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `other_names` to be an array in the JSON string but got `%s`", jsonObj.get("other_names").toString()));
          }

          // validate the optional field `other_names` (array)
          for (int i = 0; i < jsonArrayotherNames.size(); i++) {
            AltName.validateJsonElement(jsonArrayotherNames.get(i));
          };
        }
      }
      if (!jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Link.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

