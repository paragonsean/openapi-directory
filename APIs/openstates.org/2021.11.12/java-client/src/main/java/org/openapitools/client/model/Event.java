/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompactJurisdiction;
import org.openapitools.client.model.EventAgendaItem;
import org.openapitools.client.model.EventDocument;
import org.openapitools.client.model.EventLocation;
import org.openapitools.client.model.EventMedia;
import org.openapitools.client.model.EventParticipant;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:35.610624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_AGENDA = "agenda";
  @SerializedName(SERIALIZED_NAME_AGENDA)
  private List<EventAgendaItem> agenda = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALL_DAY = "all_day";
  @SerializedName(SERIALIZED_NAME_ALL_DAY)
  private Boolean allDay;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<EventDocument> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JURISDICTION = "jurisdiction";
  @SerializedName(SERIALIZED_NAME_JURISDICTION)
  private CompactJurisdiction jurisdiction;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private EventLocation location;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<EventMedia> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<EventParticipant> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Link> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPSTREAM_ID = "upstream_id";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_ID)
  private String upstreamId;

  public Event() {
  }

  public Event agenda(List<EventAgendaItem> agenda) {
    this.agenda = agenda;
    return this;
  }

  public Event addAgendaItem(EventAgendaItem agendaItem) {
    if (this.agenda == null) {
      this.agenda = new ArrayList<>();
    }
    this.agenda.add(agendaItem);
    return this;
  }

  /**
   * Get agenda
   * @return agenda
   */
  @javax.annotation.Nullable
  public List<EventAgendaItem> getAgenda() {
    return agenda;
  }

  public void setAgenda(List<EventAgendaItem> agenda) {
    this.agenda = agenda;
  }


  public Event allDay(Boolean allDay) {
    this.allDay = allDay;
    return this;
  }

  /**
   * Get allDay
   * @return allDay
   */
  @javax.annotation.Nonnull
  public Boolean getAllDay() {
    return allDay;
  }

  public void setAllDay(Boolean allDay) {
    this.allDay = allDay;
  }


  public Event classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nonnull
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public Event deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nonnull
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Event documents(List<EventDocument> documents) {
    this.documents = documents;
    return this;
  }

  public Event addDocumentsItem(EventDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<EventDocument> getDocuments() {
    return documents;
  }

  public void setDocuments(List<EventDocument> documents) {
    this.documents = documents;
  }


  public Event endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Event id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Event jurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
    return this;
  }

  /**
   * Get jurisdiction
   * @return jurisdiction
   */
  @javax.annotation.Nonnull
  public CompactJurisdiction getJurisdiction() {
    return jurisdiction;
  }

  public void setJurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
  }


  public Event links(List<Link> links) {
    this.links = links;
    return this;
  }

  public Event addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  public Event location(EventLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public EventLocation getLocation() {
    return location;
  }

  public void setLocation(EventLocation location) {
    this.location = location;
  }


  public Event media(List<EventMedia> media) {
    this.media = media;
    return this;
  }

  public Event addMediaItem(EventMedia mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public List<EventMedia> getMedia() {
    return media;
  }

  public void setMedia(List<EventMedia> media) {
    this.media = media;
  }


  public Event name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Event participants(List<EventParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public Event addParticipantsItem(EventParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Get participants
   * @return participants
   */
  @javax.annotation.Nullable
  public List<EventParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<EventParticipant> participants) {
    this.participants = participants;
  }


  public Event sources(List<Link> sources) {
    this.sources = sources;
    return this;
  }

  public Event addSourcesItem(Link sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Link> getSources() {
    return sources;
  }

  public void setSources(List<Link> sources) {
    this.sources = sources;
  }


  public Event startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Event status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Event upstreamId(String upstreamId) {
    this.upstreamId = upstreamId;
    return this;
  }

  /**
   * Get upstreamId
   * @return upstreamId
   */
  @javax.annotation.Nonnull
  public String getUpstreamId() {
    return upstreamId;
  }

  public void setUpstreamId(String upstreamId) {
    this.upstreamId = upstreamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.agenda, event.agenda) &&
        Objects.equals(this.allDay, event.allDay) &&
        Objects.equals(this.classification, event.classification) &&
        Objects.equals(this.deleted, event.deleted) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.documents, event.documents) &&
        Objects.equals(this.endDate, event.endDate) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.jurisdiction, event.jurisdiction) &&
        Objects.equals(this.links, event.links) &&
        Objects.equals(this.location, event.location) &&
        Objects.equals(this.media, event.media) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.participants, event.participants) &&
        Objects.equals(this.sources, event.sources) &&
        Objects.equals(this.startDate, event.startDate) &&
        Objects.equals(this.status, event.status) &&
        Objects.equals(this.upstreamId, event.upstreamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agenda, allDay, classification, deleted, description, documents, endDate, id, jurisdiction, links, location, media, name, participants, sources, startDate, status, upstreamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    agenda: ").append(toIndentedString(agenda)).append("\n");
    sb.append("    allDay: ").append(toIndentedString(allDay)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jurisdiction: ").append(toIndentedString(jurisdiction)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    upstreamId: ").append(toIndentedString(upstreamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agenda");
    openapiFields.add("all_day");
    openapiFields.add("classification");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("documents");
    openapiFields.add("end_date");
    openapiFields.add("id");
    openapiFields.add("jurisdiction");
    openapiFields.add("links");
    openapiFields.add("location");
    openapiFields.add("media");
    openapiFields.add("name");
    openapiFields.add("participants");
    openapiFields.add("sources");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("upstream_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("all_day");
    openapiRequiredFields.add("classification");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("jurisdiction");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("upstream_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("agenda") != null && !jsonObj.get("agenda").isJsonNull()) {
        JsonArray jsonArrayagenda = jsonObj.getAsJsonArray("agenda");
        if (jsonArrayagenda != null) {
          // ensure the json data is an array
          if (!jsonObj.get("agenda").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `agenda` to be an array in the JSON string but got `%s`", jsonObj.get("agenda").toString()));
          }

          // validate the optional field `agenda` (array)
          for (int i = 0; i < jsonArrayagenda.size(); i++) {
            EventAgendaItem.validateJsonElement(jsonArrayagenda.get(i));
          };
        }
      }
      if (!jsonObj.get("classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            EventDocument.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if (!jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `jurisdiction`
      CompactJurisdiction.validateJsonElement(jsonObj.get("jurisdiction"));
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        EventLocation.validateJsonElement(jsonObj.get("location"));
      }
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
        if (jsonArraymedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
          }

          // validate the optional field `media` (array)
          for (int i = 0; i < jsonArraymedia.size(); i++) {
            EventMedia.validateJsonElement(jsonArraymedia.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            EventParticipant.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Link.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("upstream_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upstream_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upstream_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

