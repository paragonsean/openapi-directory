/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillAbstract;
import org.openapitools.client.model.BillAction;
import org.openapitools.client.model.BillDocumentOrVersion;
import org.openapitools.client.model.BillIdentifier;
import org.openapitools.client.model.BillSponsorship;
import org.openapitools.client.model.BillTitle;
import org.openapitools.client.model.CompactJurisdiction;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.RelatedBill;
import org.openapitools.client.model.VoteEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bill
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:35.610624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bill {
  public static final String SERIALIZED_NAME_ABSTRACTS = "abstracts";
  @SerializedName(SERIALIZED_NAME_ABSTRACTS)
  private List<BillAbstract> abstracts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<BillAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private List<String> classification = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<BillDocumentOrVersion> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Object extras = {};

  public static final String SERIALIZED_NAME_FIRST_ACTION_DATE = "first_action_date";
  @SerializedName(SERIALIZED_NAME_FIRST_ACTION_DATE)
  private String firstActionDate = "";

  public static final String SERIALIZED_NAME_FROM_ORGANIZATION = "from_organization";
  @SerializedName(SERIALIZED_NAME_FROM_ORGANIZATION)
  private Organization fromOrganization;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_JURISDICTION = "jurisdiction";
  @SerializedName(SERIALIZED_NAME_JURISDICTION)
  private CompactJurisdiction jurisdiction;

  public static final String SERIALIZED_NAME_LATEST_ACTION_DATE = "latest_action_date";
  @SerializedName(SERIALIZED_NAME_LATEST_ACTION_DATE)
  private String latestActionDate = "";

  public static final String SERIALIZED_NAME_LATEST_ACTION_DESCRIPTION = "latest_action_description";
  @SerializedName(SERIALIZED_NAME_LATEST_ACTION_DESCRIPTION)
  private String latestActionDescription = "";

  public static final String SERIALIZED_NAME_LATEST_PASSAGE_DATE = "latest_passage_date";
  @SerializedName(SERIALIZED_NAME_LATEST_PASSAGE_DATE)
  private String latestPassageDate = "";

  public static final String SERIALIZED_NAME_OPENSTATES_URL = "openstates_url";
  @SerializedName(SERIALIZED_NAME_OPENSTATES_URL)
  private String openstatesUrl;

  public static final String SERIALIZED_NAME_OTHER_IDENTIFIERS = "other_identifiers";
  @SerializedName(SERIALIZED_NAME_OTHER_IDENTIFIERS)
  private List<BillIdentifier> otherIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_TITLES = "other_titles";
  @SerializedName(SERIALIZED_NAME_OTHER_TITLES)
  private List<BillTitle> otherTitles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_BILLS = "related_bills";
  @SerializedName(SERIALIZED_NAME_RELATED_BILLS)
  private List<RelatedBill> relatedBills = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private String session;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Link> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPONSORSHIPS = "sponsorships";
  @SerializedName(SERIALIZED_NAME_SPONSORSHIPS)
  private List<BillSponsorship> sponsorships = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<String> subject = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<BillDocumentOrVersion> versions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOTES = "votes";
  @SerializedName(SERIALIZED_NAME_VOTES)
  private List<VoteEvent> votes = new ArrayList<>();

  public Bill() {
  }

  public Bill abstracts(List<BillAbstract> abstracts) {
    this.abstracts = abstracts;
    return this;
  }

  public Bill addAbstractsItem(BillAbstract abstractsItem) {
    if (this.abstracts == null) {
      this.abstracts = new ArrayList<>();
    }
    this.abstracts.add(abstractsItem);
    return this;
  }

  /**
   * Get abstracts
   * @return abstracts
   */
  @javax.annotation.Nullable
  public List<BillAbstract> getAbstracts() {
    return abstracts;
  }

  public void setAbstracts(List<BillAbstract> abstracts) {
    this.abstracts = abstracts;
  }


  public Bill actions(List<BillAction> actions) {
    this.actions = actions;
    return this;
  }

  public Bill addActionsItem(BillAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<BillAction> getActions() {
    return actions;
  }

  public void setActions(List<BillAction> actions) {
    this.actions = actions;
  }


  public Bill classification(List<String> classification) {
    this.classification = classification;
    return this;
  }

  public Bill addClassificationItem(String classificationItem) {
    if (this.classification == null) {
      this.classification = new ArrayList<>();
    }
    this.classification.add(classificationItem);
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public List<String> getClassification() {
    return classification;
  }

  public void setClassification(List<String> classification) {
    this.classification = classification;
  }


  public Bill createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Bill documents(List<BillDocumentOrVersion> documents) {
    this.documents = documents;
    return this;
  }

  public Bill addDocumentsItem(BillDocumentOrVersion documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<BillDocumentOrVersion> getDocuments() {
    return documents;
  }

  public void setDocuments(List<BillDocumentOrVersion> documents) {
    this.documents = documents;
  }


  public Bill extras(Object extras) {
    this.extras = extras;
    return this;
  }

  /**
   * Get extras
   * @return extras
   */
  @javax.annotation.Nullable
  public Object getExtras() {
    return extras;
  }

  public void setExtras(Object extras) {
    this.extras = extras;
  }


  public Bill firstActionDate(String firstActionDate) {
    this.firstActionDate = firstActionDate;
    return this;
  }

  /**
   * Get firstActionDate
   * @return firstActionDate
   */
  @javax.annotation.Nullable
  public String getFirstActionDate() {
    return firstActionDate;
  }

  public void setFirstActionDate(String firstActionDate) {
    this.firstActionDate = firstActionDate;
  }


  public Bill fromOrganization(Organization fromOrganization) {
    this.fromOrganization = fromOrganization;
    return this;
  }

  /**
   * Get fromOrganization
   * @return fromOrganization
   */
  @javax.annotation.Nonnull
  public Organization getFromOrganization() {
    return fromOrganization;
  }

  public void setFromOrganization(Organization fromOrganization) {
    this.fromOrganization = fromOrganization;
  }


  public Bill id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Bill identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public Bill jurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
    return this;
  }

  /**
   * Get jurisdiction
   * @return jurisdiction
   */
  @javax.annotation.Nonnull
  public CompactJurisdiction getJurisdiction() {
    return jurisdiction;
  }

  public void setJurisdiction(CompactJurisdiction jurisdiction) {
    this.jurisdiction = jurisdiction;
  }


  public Bill latestActionDate(String latestActionDate) {
    this.latestActionDate = latestActionDate;
    return this;
  }

  /**
   * Get latestActionDate
   * @return latestActionDate
   */
  @javax.annotation.Nullable
  public String getLatestActionDate() {
    return latestActionDate;
  }

  public void setLatestActionDate(String latestActionDate) {
    this.latestActionDate = latestActionDate;
  }


  public Bill latestActionDescription(String latestActionDescription) {
    this.latestActionDescription = latestActionDescription;
    return this;
  }

  /**
   * Get latestActionDescription
   * @return latestActionDescription
   */
  @javax.annotation.Nullable
  public String getLatestActionDescription() {
    return latestActionDescription;
  }

  public void setLatestActionDescription(String latestActionDescription) {
    this.latestActionDescription = latestActionDescription;
  }


  public Bill latestPassageDate(String latestPassageDate) {
    this.latestPassageDate = latestPassageDate;
    return this;
  }

  /**
   * Get latestPassageDate
   * @return latestPassageDate
   */
  @javax.annotation.Nullable
  public String getLatestPassageDate() {
    return latestPassageDate;
  }

  public void setLatestPassageDate(String latestPassageDate) {
    this.latestPassageDate = latestPassageDate;
  }


  public Bill openstatesUrl(String openstatesUrl) {
    this.openstatesUrl = openstatesUrl;
    return this;
  }

  /**
   * Get openstatesUrl
   * @return openstatesUrl
   */
  @javax.annotation.Nonnull
  public String getOpenstatesUrl() {
    return openstatesUrl;
  }

  public void setOpenstatesUrl(String openstatesUrl) {
    this.openstatesUrl = openstatesUrl;
  }


  public Bill otherIdentifiers(List<BillIdentifier> otherIdentifiers) {
    this.otherIdentifiers = otherIdentifiers;
    return this;
  }

  public Bill addOtherIdentifiersItem(BillIdentifier otherIdentifiersItem) {
    if (this.otherIdentifiers == null) {
      this.otherIdentifiers = new ArrayList<>();
    }
    this.otherIdentifiers.add(otherIdentifiersItem);
    return this;
  }

  /**
   * Get otherIdentifiers
   * @return otherIdentifiers
   */
  @javax.annotation.Nullable
  public List<BillIdentifier> getOtherIdentifiers() {
    return otherIdentifiers;
  }

  public void setOtherIdentifiers(List<BillIdentifier> otherIdentifiers) {
    this.otherIdentifiers = otherIdentifiers;
  }


  public Bill otherTitles(List<BillTitle> otherTitles) {
    this.otherTitles = otherTitles;
    return this;
  }

  public Bill addOtherTitlesItem(BillTitle otherTitlesItem) {
    if (this.otherTitles == null) {
      this.otherTitles = new ArrayList<>();
    }
    this.otherTitles.add(otherTitlesItem);
    return this;
  }

  /**
   * Get otherTitles
   * @return otherTitles
   */
  @javax.annotation.Nullable
  public List<BillTitle> getOtherTitles() {
    return otherTitles;
  }

  public void setOtherTitles(List<BillTitle> otherTitles) {
    this.otherTitles = otherTitles;
  }


  public Bill relatedBills(List<RelatedBill> relatedBills) {
    this.relatedBills = relatedBills;
    return this;
  }

  public Bill addRelatedBillsItem(RelatedBill relatedBillsItem) {
    if (this.relatedBills == null) {
      this.relatedBills = new ArrayList<>();
    }
    this.relatedBills.add(relatedBillsItem);
    return this;
  }

  /**
   * Get relatedBills
   * @return relatedBills
   */
  @javax.annotation.Nullable
  public List<RelatedBill> getRelatedBills() {
    return relatedBills;
  }

  public void setRelatedBills(List<RelatedBill> relatedBills) {
    this.relatedBills = relatedBills;
  }


  public Bill session(String session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nonnull
  public String getSession() {
    return session;
  }

  public void setSession(String session) {
    this.session = session;
  }


  public Bill sources(List<Link> sources) {
    this.sources = sources;
    return this;
  }

  public Bill addSourcesItem(Link sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Link> getSources() {
    return sources;
  }

  public void setSources(List<Link> sources) {
    this.sources = sources;
  }


  public Bill sponsorships(List<BillSponsorship> sponsorships) {
    this.sponsorships = sponsorships;
    return this;
  }

  public Bill addSponsorshipsItem(BillSponsorship sponsorshipsItem) {
    if (this.sponsorships == null) {
      this.sponsorships = new ArrayList<>();
    }
    this.sponsorships.add(sponsorshipsItem);
    return this;
  }

  /**
   * Get sponsorships
   * @return sponsorships
   */
  @javax.annotation.Nullable
  public List<BillSponsorship> getSponsorships() {
    return sponsorships;
  }

  public void setSponsorships(List<BillSponsorship> sponsorships) {
    this.sponsorships = sponsorships;
  }


  public Bill subject(List<String> subject) {
    this.subject = subject;
    return this;
  }

  public Bill addSubjectItem(String subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public List<String> getSubject() {
    return subject;
  }

  public void setSubject(List<String> subject) {
    this.subject = subject;
  }


  public Bill title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Bill updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Bill versions(List<BillDocumentOrVersion> versions) {
    this.versions = versions;
    return this;
  }

  public Bill addVersionsItem(BillDocumentOrVersion versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * Get versions
   * @return versions
   */
  @javax.annotation.Nullable
  public List<BillDocumentOrVersion> getVersions() {
    return versions;
  }

  public void setVersions(List<BillDocumentOrVersion> versions) {
    this.versions = versions;
  }


  public Bill votes(List<VoteEvent> votes) {
    this.votes = votes;
    return this;
  }

  public Bill addVotesItem(VoteEvent votesItem) {
    if (this.votes == null) {
      this.votes = new ArrayList<>();
    }
    this.votes.add(votesItem);
    return this;
  }

  /**
   * Get votes
   * @return votes
   */
  @javax.annotation.Nullable
  public List<VoteEvent> getVotes() {
    return votes;
  }

  public void setVotes(List<VoteEvent> votes) {
    this.votes = votes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bill bill = (Bill) o;
    return Objects.equals(this.abstracts, bill.abstracts) &&
        Objects.equals(this.actions, bill.actions) &&
        Objects.equals(this.classification, bill.classification) &&
        Objects.equals(this.createdAt, bill.createdAt) &&
        Objects.equals(this.documents, bill.documents) &&
        Objects.equals(this.extras, bill.extras) &&
        Objects.equals(this.firstActionDate, bill.firstActionDate) &&
        Objects.equals(this.fromOrganization, bill.fromOrganization) &&
        Objects.equals(this.id, bill.id) &&
        Objects.equals(this.identifier, bill.identifier) &&
        Objects.equals(this.jurisdiction, bill.jurisdiction) &&
        Objects.equals(this.latestActionDate, bill.latestActionDate) &&
        Objects.equals(this.latestActionDescription, bill.latestActionDescription) &&
        Objects.equals(this.latestPassageDate, bill.latestPassageDate) &&
        Objects.equals(this.openstatesUrl, bill.openstatesUrl) &&
        Objects.equals(this.otherIdentifiers, bill.otherIdentifiers) &&
        Objects.equals(this.otherTitles, bill.otherTitles) &&
        Objects.equals(this.relatedBills, bill.relatedBills) &&
        Objects.equals(this.session, bill.session) &&
        Objects.equals(this.sources, bill.sources) &&
        Objects.equals(this.sponsorships, bill.sponsorships) &&
        Objects.equals(this.subject, bill.subject) &&
        Objects.equals(this.title, bill.title) &&
        Objects.equals(this.updatedAt, bill.updatedAt) &&
        Objects.equals(this.versions, bill.versions) &&
        Objects.equals(this.votes, bill.votes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abstracts, actions, classification, createdAt, documents, extras, firstActionDate, fromOrganization, id, identifier, jurisdiction, latestActionDate, latestActionDescription, latestPassageDate, openstatesUrl, otherIdentifiers, otherTitles, relatedBills, session, sources, sponsorships, subject, title, updatedAt, versions, votes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bill {\n");
    sb.append("    abstracts: ").append(toIndentedString(abstracts)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    firstActionDate: ").append(toIndentedString(firstActionDate)).append("\n");
    sb.append("    fromOrganization: ").append(toIndentedString(fromOrganization)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    jurisdiction: ").append(toIndentedString(jurisdiction)).append("\n");
    sb.append("    latestActionDate: ").append(toIndentedString(latestActionDate)).append("\n");
    sb.append("    latestActionDescription: ").append(toIndentedString(latestActionDescription)).append("\n");
    sb.append("    latestPassageDate: ").append(toIndentedString(latestPassageDate)).append("\n");
    sb.append("    openstatesUrl: ").append(toIndentedString(openstatesUrl)).append("\n");
    sb.append("    otherIdentifiers: ").append(toIndentedString(otherIdentifiers)).append("\n");
    sb.append("    otherTitles: ").append(toIndentedString(otherTitles)).append("\n");
    sb.append("    relatedBills: ").append(toIndentedString(relatedBills)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    sponsorships: ").append(toIndentedString(sponsorships)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    votes: ").append(toIndentedString(votes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abstracts");
    openapiFields.add("actions");
    openapiFields.add("classification");
    openapiFields.add("created_at");
    openapiFields.add("documents");
    openapiFields.add("extras");
    openapiFields.add("first_action_date");
    openapiFields.add("from_organization");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("jurisdiction");
    openapiFields.add("latest_action_date");
    openapiFields.add("latest_action_description");
    openapiFields.add("latest_passage_date");
    openapiFields.add("openstates_url");
    openapiFields.add("other_identifiers");
    openapiFields.add("other_titles");
    openapiFields.add("related_bills");
    openapiFields.add("session");
    openapiFields.add("sources");
    openapiFields.add("sponsorships");
    openapiFields.add("subject");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("versions");
    openapiFields.add("votes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("from_organization");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("jurisdiction");
    openapiRequiredFields.add("openstates_url");
    openapiRequiredFields.add("session");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bill
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bill.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bill is not found in the empty JSON string", Bill.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bill.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bill` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Bill.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abstracts") != null && !jsonObj.get("abstracts").isJsonNull()) {
        JsonArray jsonArrayabstracts = jsonObj.getAsJsonArray("abstracts");
        if (jsonArrayabstracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abstracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abstracts` to be an array in the JSON string but got `%s`", jsonObj.get("abstracts").toString()));
          }

          // validate the optional field `abstracts` (array)
          for (int i = 0; i < jsonArrayabstracts.size(); i++) {
            BillAbstract.validateJsonElement(jsonArrayabstracts.get(i));
          };
        }
      }
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            BillAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull() && !jsonObj.get("classification").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be an array in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            BillDocumentOrVersion.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("first_action_date") != null && !jsonObj.get("first_action_date").isJsonNull()) && !jsonObj.get("first_action_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_action_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_action_date").toString()));
      }
      // validate the required field `from_organization`
      Organization.validateJsonElement(jsonObj.get("from_organization"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      // validate the required field `jurisdiction`
      CompactJurisdiction.validateJsonElement(jsonObj.get("jurisdiction"));
      if ((jsonObj.get("latest_action_date") != null && !jsonObj.get("latest_action_date").isJsonNull()) && !jsonObj.get("latest_action_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_action_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_action_date").toString()));
      }
      if ((jsonObj.get("latest_action_description") != null && !jsonObj.get("latest_action_description").isJsonNull()) && !jsonObj.get("latest_action_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_action_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_action_description").toString()));
      }
      if ((jsonObj.get("latest_passage_date") != null && !jsonObj.get("latest_passage_date").isJsonNull()) && !jsonObj.get("latest_passage_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_passage_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_passage_date").toString()));
      }
      if (!jsonObj.get("openstates_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openstates_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openstates_url").toString()));
      }
      if (jsonObj.get("other_identifiers") != null && !jsonObj.get("other_identifiers").isJsonNull()) {
        JsonArray jsonArrayotherIdentifiers = jsonObj.getAsJsonArray("other_identifiers");
        if (jsonArrayotherIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("other_identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `other_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("other_identifiers").toString()));
          }

          // validate the optional field `other_identifiers` (array)
          for (int i = 0; i < jsonArrayotherIdentifiers.size(); i++) {
            BillIdentifier.validateJsonElement(jsonArrayotherIdentifiers.get(i));
          };
        }
      }
      if (jsonObj.get("other_titles") != null && !jsonObj.get("other_titles").isJsonNull()) {
        JsonArray jsonArrayotherTitles = jsonObj.getAsJsonArray("other_titles");
        if (jsonArrayotherTitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("other_titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `other_titles` to be an array in the JSON string but got `%s`", jsonObj.get("other_titles").toString()));
          }

          // validate the optional field `other_titles` (array)
          for (int i = 0; i < jsonArrayotherTitles.size(); i++) {
            BillTitle.validateJsonElement(jsonArrayotherTitles.get(i));
          };
        }
      }
      if (jsonObj.get("related_bills") != null && !jsonObj.get("related_bills").isJsonNull()) {
        JsonArray jsonArrayrelatedBills = jsonObj.getAsJsonArray("related_bills");
        if (jsonArrayrelatedBills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related_bills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related_bills` to be an array in the JSON string but got `%s`", jsonObj.get("related_bills").toString()));
          }

          // validate the optional field `related_bills` (array)
          for (int i = 0; i < jsonArrayrelatedBills.size(); i++) {
            RelatedBill.validateJsonElement(jsonArrayrelatedBills.get(i));
          };
        }
      }
      if (!jsonObj.get("session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Link.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if (jsonObj.get("sponsorships") != null && !jsonObj.get("sponsorships").isJsonNull()) {
        JsonArray jsonArraysponsorships = jsonObj.getAsJsonArray("sponsorships");
        if (jsonArraysponsorships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sponsorships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sponsorships` to be an array in the JSON string but got `%s`", jsonObj.get("sponsorships").toString()));
          }

          // validate the optional field `sponsorships` (array)
          for (int i = 0; i < jsonArraysponsorships.size(); i++) {
            BillSponsorship.validateJsonElement(jsonArraysponsorships.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull() && !jsonObj.get("subject").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be an array in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("versions") != null && !jsonObj.get("versions").isJsonNull()) {
        JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
        if (jsonArrayversions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("versions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
          }

          // validate the optional field `versions` (array)
          for (int i = 0; i < jsonArrayversions.size(); i++) {
            BillDocumentOrVersion.validateJsonElement(jsonArrayversions.get(i));
          };
        }
      }
      if (jsonObj.get("votes") != null && !jsonObj.get("votes").isJsonNull()) {
        JsonArray jsonArrayvotes = jsonObj.getAsJsonArray("votes");
        if (jsonArrayvotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("votes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `votes` to be an array in the JSON string but got `%s`", jsonObj.get("votes").toString()));
          }

          // validate the optional field `votes` (array)
          for (int i = 0; i < jsonArrayvotes.size(); i++) {
            VoteEvent.validateJsonElement(jsonArrayvotes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bill.class));

       return (TypeAdapter<T>) new TypeAdapter<Bill>() {
           @Override
           public void write(JsonWriter out, Bill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bill read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bill given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bill
   * @throws IOException if the JSON string is invalid with respect to Bill
   */
  public static Bill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bill.class);
  }

  /**
   * Convert an instance of Bill to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

