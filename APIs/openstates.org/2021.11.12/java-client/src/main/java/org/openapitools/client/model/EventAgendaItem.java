/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventMedia;
import org.openapitools.client.model.EventRelatedEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventAgendaItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:35.610624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventAgendaItem {
  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private List<String> classification = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private Object extras;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<EventMedia> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_RELATED_ENTITIES = "related_entities";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITIES)
  private List<EventRelatedEntity> relatedEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public EventAgendaItem() {
  }

  public EventAgendaItem classification(List<String> classification) {
    this.classification = classification;
    return this;
  }

  public EventAgendaItem addClassificationItem(String classificationItem) {
    if (this.classification == null) {
      this.classification = new ArrayList<>();
    }
    this.classification.add(classificationItem);
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nonnull
  public List<String> getClassification() {
    return classification;
  }

  public void setClassification(List<String> classification) {
    this.classification = classification;
  }


  public EventAgendaItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventAgendaItem extras(Object extras) {
    this.extras = extras;
    return this;
  }

  /**
   * Get extras
   * @return extras
   */
  @javax.annotation.Nonnull
  public Object getExtras() {
    return extras;
  }

  public void setExtras(Object extras) {
    this.extras = extras;
  }


  public EventAgendaItem media(List<EventMedia> media) {
    this.media = media;
    return this;
  }

  public EventAgendaItem addMediaItem(EventMedia mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public List<EventMedia> getMedia() {
    return media;
  }

  public void setMedia(List<EventMedia> media) {
    this.media = media;
  }


  public EventAgendaItem notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public EventAgendaItem addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nonnull
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public EventAgendaItem order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public EventAgendaItem relatedEntities(List<EventRelatedEntity> relatedEntities) {
    this.relatedEntities = relatedEntities;
    return this;
  }

  public EventAgendaItem addRelatedEntitiesItem(EventRelatedEntity relatedEntitiesItem) {
    if (this.relatedEntities == null) {
      this.relatedEntities = new ArrayList<>();
    }
    this.relatedEntities.add(relatedEntitiesItem);
    return this;
  }

  /**
   * Get relatedEntities
   * @return relatedEntities
   */
  @javax.annotation.Nonnull
  public List<EventRelatedEntity> getRelatedEntities() {
    return relatedEntities;
  }

  public void setRelatedEntities(List<EventRelatedEntity> relatedEntities) {
    this.relatedEntities = relatedEntities;
  }


  public EventAgendaItem subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public EventAgendaItem addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nonnull
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventAgendaItem eventAgendaItem = (EventAgendaItem) o;
    return Objects.equals(this.classification, eventAgendaItem.classification) &&
        Objects.equals(this.description, eventAgendaItem.description) &&
        Objects.equals(this.extras, eventAgendaItem.extras) &&
        Objects.equals(this.media, eventAgendaItem.media) &&
        Objects.equals(this.notes, eventAgendaItem.notes) &&
        Objects.equals(this.order, eventAgendaItem.order) &&
        Objects.equals(this.relatedEntities, eventAgendaItem.relatedEntities) &&
        Objects.equals(this.subjects, eventAgendaItem.subjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, description, extras, media, notes, order, relatedEntities, subjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventAgendaItem {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    relatedEntities: ").append(toIndentedString(relatedEntities)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification");
    openapiFields.add("description");
    openapiFields.add("extras");
    openapiFields.add("media");
    openapiFields.add("notes");
    openapiFields.add("order");
    openapiFields.add("related_entities");
    openapiFields.add("subjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("classification");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("extras");
    openapiRequiredFields.add("media");
    openapiRequiredFields.add("notes");
    openapiRequiredFields.add("order");
    openapiRequiredFields.add("related_entities");
    openapiRequiredFields.add("subjects");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventAgendaItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventAgendaItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventAgendaItem is not found in the empty JSON string", EventAgendaItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventAgendaItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventAgendaItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventAgendaItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("classification") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("classification").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be an array in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("media").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
      }

      JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
      // validate the required field `media` (array)
      for (int i = 0; i < jsonArraymedia.size(); i++) {
        EventMedia.validateJsonElement(jsonArraymedia.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("notes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("related_entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_entities` to be an array in the JSON string but got `%s`", jsonObj.get("related_entities").toString()));
      }

      JsonArray jsonArrayrelatedEntities = jsonObj.getAsJsonArray("related_entities");
      // validate the required field `related_entities` (array)
      for (int i = 0; i < jsonArrayrelatedEntities.size(); i++) {
        EventRelatedEntity.validateJsonElement(jsonArrayrelatedEntities.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("subjects") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventAgendaItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventAgendaItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventAgendaItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventAgendaItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EventAgendaItem>() {
           @Override
           public void write(JsonWriter out, EventAgendaItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventAgendaItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventAgendaItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventAgendaItem
   * @throws IOException if the JSON string is invalid with respect to EventAgendaItem
   */
  public static EventAgendaItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventAgendaItem.class);
  }

  /**
   * Convert an instance of EventAgendaItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

