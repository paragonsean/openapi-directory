/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Committee;
import org.openapitools.client.model.CommitteeClassification;
import org.openapitools.client.model.CommitteeInclude;
import org.openapitools.client.model.CommitteeList;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.OrgClassification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommitteesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommitteesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommitteesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for committeeDetailCommitteesCommitteeIdGet
     * @param committeeId  (required)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeDetailCommitteesCommitteeIdGetCall(String committeeId, List<CommitteeInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committees/{committee_id}"
            .replace("{" + "committee_id" + "}", localVarApiClient.escapeString(committeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeDetailCommitteesCommitteeIdGetValidateBeforeCall(String committeeId, List<CommitteeInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'committeeId' is set
        if (committeeId == null) {
            throw new ApiException("Missing the required parameter 'committeeId' when calling committeeDetailCommitteesCommitteeIdGet(Async)");
        }

        return committeeDetailCommitteesCommitteeIdGetCall(committeeId, include, apikey, xApiKey, _callback);

    }

    /**
     * Committee Detail
     * Get details on a single committee by ID.
     * @param committeeId  (required)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return Committee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Committee committeeDetailCommitteesCommitteeIdGet(String committeeId, List<CommitteeInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<Committee> localVarResp = committeeDetailCommitteesCommitteeIdGetWithHttpInfo(committeeId, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Committee Detail
     * Get details on a single committee by ID.
     * @param committeeId  (required)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Committee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Committee> committeeDetailCommitteesCommitteeIdGetWithHttpInfo(String committeeId, List<CommitteeInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = committeeDetailCommitteesCommitteeIdGetValidateBeforeCall(committeeId, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<Committee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Committee Detail (asynchronously)
     * Get details on a single committee by ID.
     * @param committeeId  (required)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeDetailCommitteesCommitteeIdGetAsync(String committeeId, List<CommitteeInclude> include, String apikey, String xApiKey, final ApiCallback<Committee> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeDetailCommitteesCommitteeIdGetValidateBeforeCall(committeeId, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Committee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for committeeListCommitteesGet
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param classification  (optional)
     * @param parent ocd-organization ID of parent committee. (optional)
     * @param chamber Chamber of committee, generally upper or lower. (optional)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeListCommitteesGetCall(String jurisdiction, CommitteeClassification classification, String parent, OrgClassification chamber, List<CommitteeInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/committees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (chamber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chamber", chamber));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call committeeListCommitteesGetValidateBeforeCall(String jurisdiction, CommitteeClassification classification, String parent, OrgClassification chamber, List<CommitteeInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback _callback) throws ApiException {
        return committeeListCommitteesGetCall(jurisdiction, classification, parent, chamber, include, apikey, page, perPage, xApiKey, _callback);

    }

    /**
     * Committee List
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param classification  (optional)
     * @param parent ocd-organization ID of parent committee. (optional)
     * @param chamber Chamber of committee, generally upper or lower. (optional)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @return CommitteeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public CommitteeList committeeListCommitteesGet(String jurisdiction, CommitteeClassification classification, String parent, OrgClassification chamber, List<CommitteeInclude> include, String apikey, Integer page, Integer perPage, String xApiKey) throws ApiException {
        ApiResponse<CommitteeList> localVarResp = committeeListCommitteesGetWithHttpInfo(jurisdiction, classification, parent, chamber, include, apikey, page, perPage, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Committee List
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param classification  (optional)
     * @param parent ocd-organization ID of parent committee. (optional)
     * @param chamber Chamber of committee, generally upper or lower. (optional)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;CommitteeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitteeList> committeeListCommitteesGetWithHttpInfo(String jurisdiction, CommitteeClassification classification, String parent, OrgClassification chamber, List<CommitteeInclude> include, String apikey, Integer page, Integer perPage, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = committeeListCommitteesGetValidateBeforeCall(jurisdiction, classification, parent, chamber, include, apikey, page, perPage, xApiKey, null);
        Type localVarReturnType = new TypeToken<CommitteeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Committee List (asynchronously)
     * 
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param classification  (optional)
     * @param parent ocd-organization ID of parent committee. (optional)
     * @param chamber Chamber of committee, generally upper or lower. (optional)
     * @param include Additional includes for the Committee response. (optional)
     * @param apikey  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call committeeListCommitteesGetAsync(String jurisdiction, CommitteeClassification classification, String parent, OrgClassification chamber, List<CommitteeInclude> include, String apikey, Integer page, Integer perPage, String xApiKey, final ApiCallback<CommitteeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = committeeListCommitteesGetValidateBeforeCall(jurisdiction, classification, parent, chamber, include, apikey, page, perPage, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<CommitteeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
