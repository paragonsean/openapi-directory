/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.OrgClassification;
import org.openapitools.client.model.PersonInclude;
import org.openapitools.client.model.PersonList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeopleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for peopleGeoPeopleGeoGet
     * @param lat Latitude of point. (required)
     * @param lng Longitude of point. (required)
     * @param include Additional information to include in the response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peopleGeoPeopleGeoGetCall(BigDecimal lat, BigDecimal lng, List<PersonInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people.geo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call peopleGeoPeopleGeoGetValidateBeforeCall(BigDecimal lat, BigDecimal lng, List<PersonInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling peopleGeoPeopleGeoGet(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling peopleGeoPeopleGeoGet(Async)");
        }

        return peopleGeoPeopleGeoGetCall(lat, lng, include, apikey, xApiKey, _callback);

    }

    /**
     * People Geo
     * Get list of people currently representing a given location.  **Note:** Currently limited to state legislators and US Congress.  Governors &amp; mayors are not included.
     * @param lat Latitude of point. (required)
     * @param lng Longitude of point. (required)
     * @param include Additional information to include in the response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return PersonList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PersonList peopleGeoPeopleGeoGet(BigDecimal lat, BigDecimal lng, List<PersonInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<PersonList> localVarResp = peopleGeoPeopleGeoGetWithHttpInfo(lat, lng, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * People Geo
     * Get list of people currently representing a given location.  **Note:** Currently limited to state legislators and US Congress.  Governors &amp; mayors are not included.
     * @param lat Latitude of point. (required)
     * @param lng Longitude of point. (required)
     * @param include Additional information to include in the response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;PersonList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonList> peopleGeoPeopleGeoGetWithHttpInfo(BigDecimal lat, BigDecimal lng, List<PersonInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = peopleGeoPeopleGeoGetValidateBeforeCall(lat, lng, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<PersonList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * People Geo (asynchronously)
     * Get list of people currently representing a given location.  **Note:** Currently limited to state legislators and US Congress.  Governors &amp; mayors are not included.
     * @param lat Latitude of point. (required)
     * @param lng Longitude of point. (required)
     * @param include Additional information to include in the response. (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peopleGeoPeopleGeoGetAsync(BigDecimal lat, BigDecimal lng, List<PersonInclude> include, String apikey, String xApiKey, final ApiCallback<PersonList> _callback) throws ApiException {

        okhttp3.Call localVarCall = peopleGeoPeopleGeoGetValidateBeforeCall(lat, lng, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PersonList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for peopleSearchPeopleGet
     * @param jurisdiction Filter by jurisdiction name or id. (optional)
     * @param name Filter by name, case-insensitive match. (optional)
     * @param id Filter by id, can be specified multiple times for multiple people. (optional)
     * @param orgClassification Filter by current role. (optional)
     * @param district Filter by district name. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peopleSearchPeopleGetCall(String jurisdiction, String name, List<String> id, OrgClassification orgClassification, String district, List<PersonInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (orgClassification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org_classification", orgClassification));
        }

        if (district != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("district", district));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call peopleSearchPeopleGetValidateBeforeCall(String jurisdiction, String name, List<String> id, OrgClassification orgClassification, String district, List<PersonInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        return peopleSearchPeopleGetCall(jurisdiction, name, id, orgClassification, district, include, page, perPage, apikey, xApiKey, _callback);

    }

    /**
     * People Search
     * Get list of people matching selected criteria.  Must provide either **jurisdiction**, **name**, or one or more **id** parameters.
     * @param jurisdiction Filter by jurisdiction name or id. (optional)
     * @param name Filter by name, case-insensitive match. (optional)
     * @param id Filter by id, can be specified multiple times for multiple people. (optional)
     * @param orgClassification Filter by current role. (optional)
     * @param district Filter by district name. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return PersonList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PersonList peopleSearchPeopleGet(String jurisdiction, String name, List<String> id, OrgClassification orgClassification, String district, List<PersonInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        ApiResponse<PersonList> localVarResp = peopleSearchPeopleGetWithHttpInfo(jurisdiction, name, id, orgClassification, district, include, page, perPage, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * People Search
     * Get list of people matching selected criteria.  Must provide either **jurisdiction**, **name**, or one or more **id** parameters.
     * @param jurisdiction Filter by jurisdiction name or id. (optional)
     * @param name Filter by name, case-insensitive match. (optional)
     * @param id Filter by id, can be specified multiple times for multiple people. (optional)
     * @param orgClassification Filter by current role. (optional)
     * @param district Filter by district name. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;PersonList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonList> peopleSearchPeopleGetWithHttpInfo(String jurisdiction, String name, List<String> id, OrgClassification orgClassification, String district, List<PersonInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = peopleSearchPeopleGetValidateBeforeCall(jurisdiction, name, id, orgClassification, district, include, page, perPage, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<PersonList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * People Search (asynchronously)
     * Get list of people matching selected criteria.  Must provide either **jurisdiction**, **name**, or one or more **id** parameters.
     * @param jurisdiction Filter by jurisdiction name or id. (optional)
     * @param name Filter by name, case-insensitive match. (optional)
     * @param id Filter by id, can be specified multiple times for multiple people. (optional)
     * @param orgClassification Filter by current role. (optional)
     * @param district Filter by district name. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call peopleSearchPeopleGetAsync(String jurisdiction, String name, List<String> id, OrgClassification orgClassification, String district, List<PersonInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback<PersonList> _callback) throws ApiException {

        okhttp3.Call localVarCall = peopleSearchPeopleGetValidateBeforeCall(jurisdiction, name, id, orgClassification, district, include, page, perPage, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PersonList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
