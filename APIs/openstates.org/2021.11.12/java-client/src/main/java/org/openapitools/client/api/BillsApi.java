/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Bill;
import org.openapitools.client.model.BillInclude;
import org.openapitools.client.model.BillList;
import org.openapitools.client.model.BillSortOption;
import org.openapitools.client.model.HTTPValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billDetailBillsJurisdictionSessionBillIdGet
     * @param jurisdiction  (required)
     * @param session  (required)
     * @param billId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billDetailBillsJurisdictionSessionBillIdGetCall(String jurisdiction, String session, String billId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bills/{jurisdiction}/{session}/{bill_id}"
            .replace("{" + "jurisdiction" + "}", localVarApiClient.escapeString(jurisdiction.toString()))
            .replace("{" + "session" + "}", localVarApiClient.escapeString(session.toString()))
            .replace("{" + "bill_id" + "}", localVarApiClient.escapeString(billId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billDetailBillsJurisdictionSessionBillIdGetValidateBeforeCall(String jurisdiction, String session, String billId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jurisdiction' is set
        if (jurisdiction == null) {
            throw new ApiException("Missing the required parameter 'jurisdiction' when calling billDetailBillsJurisdictionSessionBillIdGet(Async)");
        }

        // verify the required parameter 'session' is set
        if (session == null) {
            throw new ApiException("Missing the required parameter 'session' when calling billDetailBillsJurisdictionSessionBillIdGet(Async)");
        }

        // verify the required parameter 'billId' is set
        if (billId == null) {
            throw new ApiException("Missing the required parameter 'billId' when calling billDetailBillsJurisdictionSessionBillIdGet(Async)");
        }

        return billDetailBillsJurisdictionSessionBillIdGetCall(jurisdiction, session, billId, include, apikey, xApiKey, _callback);

    }

    /**
     * Bill Detail
     * Obtain bill information based on (state, session, bill_id).
     * @param jurisdiction  (required)
     * @param session  (required)
     * @param billId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return Bill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Bill billDetailBillsJurisdictionSessionBillIdGet(String jurisdiction, String session, String billId, List<BillInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<Bill> localVarResp = billDetailBillsJurisdictionSessionBillIdGetWithHttpInfo(jurisdiction, session, billId, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Bill Detail
     * Obtain bill information based on (state, session, bill_id).
     * @param jurisdiction  (required)
     * @param session  (required)
     * @param billId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Bill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bill> billDetailBillsJurisdictionSessionBillIdGetWithHttpInfo(String jurisdiction, String session, String billId, List<BillInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = billDetailBillsJurisdictionSessionBillIdGetValidateBeforeCall(jurisdiction, session, billId, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bill Detail (asynchronously)
     * Obtain bill information based on (state, session, bill_id).
     * @param jurisdiction  (required)
     * @param session  (required)
     * @param billId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billDetailBillsJurisdictionSessionBillIdGetAsync(String jurisdiction, String session, String billId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback<Bill> _callback) throws ApiException {

        okhttp3.Call localVarCall = billDetailBillsJurisdictionSessionBillIdGetValidateBeforeCall(jurisdiction, session, billId, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billDetailByIdBillsOcdBillOpenstatesBillIdGet
     * @param openstatesBillId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billDetailByIdBillsOcdBillOpenstatesBillIdGetCall(String openstatesBillId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bills/ocd-bill/{openstates_bill_id}"
            .replace("{" + "openstates_bill_id" + "}", localVarApiClient.escapeString(openstatesBillId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billDetailByIdBillsOcdBillOpenstatesBillIdGetValidateBeforeCall(String openstatesBillId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'openstatesBillId' is set
        if (openstatesBillId == null) {
            throw new ApiException("Missing the required parameter 'openstatesBillId' when calling billDetailByIdBillsOcdBillOpenstatesBillIdGet(Async)");
        }

        return billDetailByIdBillsOcdBillOpenstatesBillIdGetCall(openstatesBillId, include, apikey, xApiKey, _callback);

    }

    /**
     * Bill Detail By Id
     * Obtain bill information by internal ID in the format ocd-bill/_*uuid*.
     * @param openstatesBillId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return Bill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Bill billDetailByIdBillsOcdBillOpenstatesBillIdGet(String openstatesBillId, List<BillInclude> include, String apikey, String xApiKey) throws ApiException {
        ApiResponse<Bill> localVarResp = billDetailByIdBillsOcdBillOpenstatesBillIdGetWithHttpInfo(openstatesBillId, include, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Bill Detail By Id
     * Obtain bill information by internal ID in the format ocd-bill/_*uuid*.
     * @param openstatesBillId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Bill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Bill> billDetailByIdBillsOcdBillOpenstatesBillIdGetWithHttpInfo(String openstatesBillId, List<BillInclude> include, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = billDetailByIdBillsOcdBillOpenstatesBillIdGetValidateBeforeCall(openstatesBillId, include, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bill Detail By Id (asynchronously)
     * Obtain bill information by internal ID in the format ocd-bill/_*uuid*.
     * @param openstatesBillId  (required)
     * @param include  (optional)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billDetailByIdBillsOcdBillOpenstatesBillIdGetAsync(String openstatesBillId, List<BillInclude> include, String apikey, String xApiKey, final ApiCallback<Bill> _callback) throws ApiException {

        okhttp3.Call localVarCall = billDetailByIdBillsOcdBillOpenstatesBillIdGetValidateBeforeCall(openstatesBillId, include, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Bill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billsSearchBillsGet
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param session Filter by session identifier. (optional)
     * @param chamber Filter by chamber of origination. (optional)
     * @param identifier Filter to only include bills with this identifier. (optional)
     * @param classification Filter by classification, e.g. bill or resolution (optional)
     * @param subject Filter by one or more subjects. (optional)
     * @param updatedSince Filter to only include bills with updates since a given date. (optional)
     * @param createdSince Filter to only include bills created since a given date. (optional)
     * @param actionSince Filter to only include bills with an action since a given date. (optional)
     * @param sort Desired sort order for bill results. (optional, default to updated_desc)
     * @param sponsor Filter to only include bills sponsored by a given name or person ID. (optional)
     * @param sponsorClassification Filter matched sponsors to only include particular types of sponsorships. (optional)
     * @param q Filter by full text search term. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billsSearchBillsGetCall(String jurisdiction, String session, String chamber, List<String> identifier, String classification, List<String> subject, String updatedSince, String createdSince, String actionSince, BillSortOption sort, String sponsor, String sponsorClassification, String q, List<BillInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (session != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session", session));
        }

        if (chamber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chamber", chamber));
        }

        if (identifier != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "identifier", identifier));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        if (subject != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subject", subject));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (createdSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_since", createdSince));
        }

        if (actionSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_since", actionSince));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sponsor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sponsor", sponsor));
        }

        if (sponsorClassification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sponsor_classification", sponsorClassification));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billsSearchBillsGetValidateBeforeCall(String jurisdiction, String session, String chamber, List<String> identifier, String classification, List<String> subject, String updatedSince, String createdSince, String actionSince, BillSortOption sort, String sponsor, String sponsorClassification, String q, List<BillInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback _callback) throws ApiException {
        return billsSearchBillsGetCall(jurisdiction, session, chamber, identifier, classification, subject, updatedSince, createdSince, actionSince, sort, sponsor, sponsorClassification, q, include, page, perPage, apikey, xApiKey, _callback);

    }

    /**
     * Bills Search
     * Search for bills matching given criteria.  Must either specify a jurisdiction or a full text query (q).  Additional parameters will futher restrict bills returned.
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param session Filter by session identifier. (optional)
     * @param chamber Filter by chamber of origination. (optional)
     * @param identifier Filter to only include bills with this identifier. (optional)
     * @param classification Filter by classification, e.g. bill or resolution (optional)
     * @param subject Filter by one or more subjects. (optional)
     * @param updatedSince Filter to only include bills with updates since a given date. (optional)
     * @param createdSince Filter to only include bills created since a given date. (optional)
     * @param actionSince Filter to only include bills with an action since a given date. (optional)
     * @param sort Desired sort order for bill results. (optional, default to updated_desc)
     * @param sponsor Filter to only include bills sponsored by a given name or person ID. (optional)
     * @param sponsorClassification Filter matched sponsors to only include particular types of sponsorships. (optional)
     * @param q Filter by full text search term. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return BillList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public BillList billsSearchBillsGet(String jurisdiction, String session, String chamber, List<String> identifier, String classification, List<String> subject, String updatedSince, String createdSince, String actionSince, BillSortOption sort, String sponsor, String sponsorClassification, String q, List<BillInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        ApiResponse<BillList> localVarResp = billsSearchBillsGetWithHttpInfo(jurisdiction, session, chamber, identifier, classification, subject, updatedSince, createdSince, actionSince, sort, sponsor, sponsorClassification, q, include, page, perPage, apikey, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Bills Search
     * Search for bills matching given criteria.  Must either specify a jurisdiction or a full text query (q).  Additional parameters will futher restrict bills returned.
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param session Filter by session identifier. (optional)
     * @param chamber Filter by chamber of origination. (optional)
     * @param identifier Filter to only include bills with this identifier. (optional)
     * @param classification Filter by classification, e.g. bill or resolution (optional)
     * @param subject Filter by one or more subjects. (optional)
     * @param updatedSince Filter to only include bills with updates since a given date. (optional)
     * @param createdSince Filter to only include bills created since a given date. (optional)
     * @param actionSince Filter to only include bills with an action since a given date. (optional)
     * @param sort Desired sort order for bill results. (optional, default to updated_desc)
     * @param sponsor Filter to only include bills sponsored by a given name or person ID. (optional)
     * @param sponsorClassification Filter matched sponsors to only include particular types of sponsorships. (optional)
     * @param q Filter by full text search term. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;BillList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillList> billsSearchBillsGetWithHttpInfo(String jurisdiction, String session, String chamber, List<String> identifier, String classification, List<String> subject, String updatedSince, String createdSince, String actionSince, BillSortOption sort, String sponsor, String sponsorClassification, String q, List<BillInclude> include, Integer page, Integer perPage, String apikey, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = billsSearchBillsGetValidateBeforeCall(jurisdiction, session, chamber, identifier, classification, subject, updatedSince, createdSince, actionSince, sort, sponsor, sponsorClassification, q, include, page, perPage, apikey, xApiKey, null);
        Type localVarReturnType = new TypeToken<BillList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bills Search (asynchronously)
     * Search for bills matching given criteria.  Must either specify a jurisdiction or a full text query (q).  Additional parameters will futher restrict bills returned.
     * @param jurisdiction Filter by jurisdiction name or ID. (optional)
     * @param session Filter by session identifier. (optional)
     * @param chamber Filter by chamber of origination. (optional)
     * @param identifier Filter to only include bills with this identifier. (optional)
     * @param classification Filter by classification, e.g. bill or resolution (optional)
     * @param subject Filter by one or more subjects. (optional)
     * @param updatedSince Filter to only include bills with updates since a given date. (optional)
     * @param createdSince Filter to only include bills created since a given date. (optional)
     * @param actionSince Filter to only include bills with an action since a given date. (optional)
     * @param sort Desired sort order for bill results. (optional, default to updated_desc)
     * @param sponsor Filter to only include bills sponsored by a given name or person ID. (optional)
     * @param sponsorClassification Filter matched sponsors to only include particular types of sponsorships. (optional)
     * @param q Filter by full text search term. (optional)
     * @param include Additional information to include in response. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param apikey  (optional)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billsSearchBillsGetAsync(String jurisdiction, String session, String chamber, List<String> identifier, String classification, List<String> subject, String updatedSince, String createdSince, String actionSince, BillSortOption sort, String sponsor, String sponsorClassification, String q, List<BillInclude> include, Integer page, Integer perPage, String apikey, String xApiKey, final ApiCallback<BillList> _callback) throws ApiException {

        okhttp3.Call localVarCall = billsSearchBillsGetValidateBeforeCall(jurisdiction, session, chamber, identifier, classification, subject, updatedSince, createdSince, actionSince, sort, sponsor, sponsorClassification, q, include, page, perPage, apikey, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<BillList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
