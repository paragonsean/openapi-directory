/*
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Chamber;
import org.openapitools.client.model.JurisdictionClassification;
import org.openapitools.client.model.LegislativeSession;
import org.openapitools.client.model.RunPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Jurisdiction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:35.610624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Jurisdiction {
  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private JurisdictionClassification classification;

  public static final String SERIALIZED_NAME_DIVISION_ID = "division_id";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private String divisionId = "";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LATEST_BILL_UPDATE = "latest_bill_update";
  @SerializedName(SERIALIZED_NAME_LATEST_BILL_UPDATE)
  private OffsetDateTime latestBillUpdate;

  public static final String SERIALIZED_NAME_LATEST_PEOPLE_UPDATE = "latest_people_update";
  @SerializedName(SERIALIZED_NAME_LATEST_PEOPLE_UPDATE)
  private OffsetDateTime latestPeopleUpdate;

  public static final String SERIALIZED_NAME_LATEST_RUNS = "latest_runs";
  @SerializedName(SERIALIZED_NAME_LATEST_RUNS)
  private List<RunPlan> latestRuns = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGISLATIVE_SESSIONS = "legislative_sessions";
  @SerializedName(SERIALIZED_NAME_LEGISLATIVE_SESSIONS)
  private List<LegislativeSession> legislativeSessions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private List<Chamber> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Jurisdiction() {
  }

  public Jurisdiction classification(JurisdictionClassification classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nonnull
  public JurisdictionClassification getClassification() {
    return classification;
  }

  public void setClassification(JurisdictionClassification classification) {
    this.classification = classification;
  }


  public Jurisdiction divisionId(String divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * Get divisionId
   * @return divisionId
   */
  @javax.annotation.Nullable
  public String getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(String divisionId) {
    this.divisionId = divisionId;
  }


  public Jurisdiction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Jurisdiction latestBillUpdate(OffsetDateTime latestBillUpdate) {
    this.latestBillUpdate = latestBillUpdate;
    return this;
  }

  /**
   * Get latestBillUpdate
   * @return latestBillUpdate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLatestBillUpdate() {
    return latestBillUpdate;
  }

  public void setLatestBillUpdate(OffsetDateTime latestBillUpdate) {
    this.latestBillUpdate = latestBillUpdate;
  }


  public Jurisdiction latestPeopleUpdate(OffsetDateTime latestPeopleUpdate) {
    this.latestPeopleUpdate = latestPeopleUpdate;
    return this;
  }

  /**
   * Get latestPeopleUpdate
   * @return latestPeopleUpdate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLatestPeopleUpdate() {
    return latestPeopleUpdate;
  }

  public void setLatestPeopleUpdate(OffsetDateTime latestPeopleUpdate) {
    this.latestPeopleUpdate = latestPeopleUpdate;
  }


  public Jurisdiction latestRuns(List<RunPlan> latestRuns) {
    this.latestRuns = latestRuns;
    return this;
  }

  public Jurisdiction addLatestRunsItem(RunPlan latestRunsItem) {
    if (this.latestRuns == null) {
      this.latestRuns = new ArrayList<>();
    }
    this.latestRuns.add(latestRunsItem);
    return this;
  }

  /**
   * Get latestRuns
   * @return latestRuns
   */
  @javax.annotation.Nullable
  public List<RunPlan> getLatestRuns() {
    return latestRuns;
  }

  public void setLatestRuns(List<RunPlan> latestRuns) {
    this.latestRuns = latestRuns;
  }


  public Jurisdiction legislativeSessions(List<LegislativeSession> legislativeSessions) {
    this.legislativeSessions = legislativeSessions;
    return this;
  }

  public Jurisdiction addLegislativeSessionsItem(LegislativeSession legislativeSessionsItem) {
    if (this.legislativeSessions == null) {
      this.legislativeSessions = new ArrayList<>();
    }
    this.legislativeSessions.add(legislativeSessionsItem);
    return this;
  }

  /**
   * Get legislativeSessions
   * @return legislativeSessions
   */
  @javax.annotation.Nullable
  public List<LegislativeSession> getLegislativeSessions() {
    return legislativeSessions;
  }

  public void setLegislativeSessions(List<LegislativeSession> legislativeSessions) {
    this.legislativeSessions = legislativeSessions;
  }


  public Jurisdiction name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Jurisdiction organizations(List<Chamber> organizations) {
    this.organizations = organizations;
    return this;
  }

  public Jurisdiction addOrganizationsItem(Chamber organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * Get organizations
   * @return organizations
   */
  @javax.annotation.Nullable
  public List<Chamber> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(List<Chamber> organizations) {
    this.organizations = organizations;
  }


  public Jurisdiction url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Jurisdiction jurisdiction = (Jurisdiction) o;
    return Objects.equals(this.classification, jurisdiction.classification) &&
        Objects.equals(this.divisionId, jurisdiction.divisionId) &&
        Objects.equals(this.id, jurisdiction.id) &&
        Objects.equals(this.latestBillUpdate, jurisdiction.latestBillUpdate) &&
        Objects.equals(this.latestPeopleUpdate, jurisdiction.latestPeopleUpdate) &&
        Objects.equals(this.latestRuns, jurisdiction.latestRuns) &&
        Objects.equals(this.legislativeSessions, jurisdiction.legislativeSessions) &&
        Objects.equals(this.name, jurisdiction.name) &&
        Objects.equals(this.organizations, jurisdiction.organizations) &&
        Objects.equals(this.url, jurisdiction.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, divisionId, id, latestBillUpdate, latestPeopleUpdate, latestRuns, legislativeSessions, name, organizations, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Jurisdiction {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latestBillUpdate: ").append(toIndentedString(latestBillUpdate)).append("\n");
    sb.append("    latestPeopleUpdate: ").append(toIndentedString(latestPeopleUpdate)).append("\n");
    sb.append("    latestRuns: ").append(toIndentedString(latestRuns)).append("\n");
    sb.append("    legislativeSessions: ").append(toIndentedString(legislativeSessions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification");
    openapiFields.add("division_id");
    openapiFields.add("id");
    openapiFields.add("latest_bill_update");
    openapiFields.add("latest_people_update");
    openapiFields.add("latest_runs");
    openapiFields.add("legislative_sessions");
    openapiFields.add("name");
    openapiFields.add("organizations");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("classification");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("latest_bill_update");
    openapiRequiredFields.add("latest_people_update");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Jurisdiction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Jurisdiction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Jurisdiction is not found in the empty JSON string", Jurisdiction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Jurisdiction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Jurisdiction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Jurisdiction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `classification`
      JurisdictionClassification.validateJsonElement(jsonObj.get("classification"));
      if ((jsonObj.get("division_id") != null && !jsonObj.get("division_id").isJsonNull()) && !jsonObj.get("division_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `division_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("division_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("latest_runs") != null && !jsonObj.get("latest_runs").isJsonNull()) {
        JsonArray jsonArraylatestRuns = jsonObj.getAsJsonArray("latest_runs");
        if (jsonArraylatestRuns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latest_runs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latest_runs` to be an array in the JSON string but got `%s`", jsonObj.get("latest_runs").toString()));
          }

          // validate the optional field `latest_runs` (array)
          for (int i = 0; i < jsonArraylatestRuns.size(); i++) {
            RunPlan.validateJsonElement(jsonArraylatestRuns.get(i));
          };
        }
      }
      if (jsonObj.get("legislative_sessions") != null && !jsonObj.get("legislative_sessions").isJsonNull()) {
        JsonArray jsonArraylegislativeSessions = jsonObj.getAsJsonArray("legislative_sessions");
        if (jsonArraylegislativeSessions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legislative_sessions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legislative_sessions` to be an array in the JSON string but got `%s`", jsonObj.get("legislative_sessions").toString()));
          }

          // validate the optional field `legislative_sessions` (array)
          for (int i = 0; i < jsonArraylegislativeSessions.size(); i++) {
            LegislativeSession.validateJsonElement(jsonArraylegislativeSessions.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull()) {
        JsonArray jsonArrayorganizations = jsonObj.getAsJsonArray("organizations");
        if (jsonArrayorganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
          }

          // validate the optional field `organizations` (array)
          for (int i = 0; i < jsonArrayorganizations.size(); i++) {
            Chamber.validateJsonElement(jsonArrayorganizations.get(i));
          };
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Jurisdiction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Jurisdiction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Jurisdiction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Jurisdiction.class));

       return (TypeAdapter<T>) new TypeAdapter<Jurisdiction>() {
           @Override
           public void write(JsonWriter out, Jurisdiction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Jurisdiction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Jurisdiction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Jurisdiction
   * @throws IOException if the JSON string is invalid with respect to Jurisdiction
   */
  public static Jurisdiction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Jurisdiction.class);
  }

  /**
   * Convert an instance of Jurisdiction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

