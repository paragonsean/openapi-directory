# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compact_person import CompactPerson
from openapi_server import util


class CommitteeMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, person: CompactPerson=None, person_name: str=None, role: str=None):
        """CommitteeMembership - a model defined in OpenAPI

        :param person: The person of this CommitteeMembership.
        :param person_name: The person_name of this CommitteeMembership.
        :param role: The role of this CommitteeMembership.
        """
        self.openapi_types = {
            'person': CompactPerson,
            'person_name': str,
            'role': str
        }

        self.attribute_map = {
            'person': 'person',
            'person_name': 'person_name',
            'role': 'role'
        }

        self._person = person
        self._person_name = person_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitteeMembership of this CommitteeMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person(self):
        """Gets the person of this CommitteeMembership.


        :return: The person of this CommitteeMembership.
        :rtype: CompactPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CommitteeMembership.


        :param person: The person of this CommitteeMembership.
        :type person: CompactPerson
        """

        self._person = person

    @property
    def person_name(self):
        """Gets the person_name of this CommitteeMembership.


        :return: The person_name of this CommitteeMembership.
        :rtype: str
        """
        return self._person_name

    @person_name.setter
    def person_name(self, person_name):
        """Sets the person_name of this CommitteeMembership.


        :param person_name: The person_name of this CommitteeMembership.
        :type person_name: str
        """
        if person_name is None:
            raise ValueError("Invalid value for `person_name`, must not be `None`")

        self._person_name = person_name

    @property
    def role(self):
        """Gets the role of this CommitteeMembership.


        :return: The role of this CommitteeMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CommitteeMembership.


        :param role: The role of this CommitteeMembership.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
