# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_media import EventMedia
from openapi_server.models.event_related_entity import EventRelatedEntity
from openapi_server import util


class EventAgendaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: List[str]=None, description: str=None, extras: object=None, media: List[EventMedia]=None, notes: List[str]=None, order: int=None, related_entities: List[EventRelatedEntity]=None, subjects: List[str]=None):
        """EventAgendaItem - a model defined in OpenAPI

        :param classification: The classification of this EventAgendaItem.
        :param description: The description of this EventAgendaItem.
        :param extras: The extras of this EventAgendaItem.
        :param media: The media of this EventAgendaItem.
        :param notes: The notes of this EventAgendaItem.
        :param order: The order of this EventAgendaItem.
        :param related_entities: The related_entities of this EventAgendaItem.
        :param subjects: The subjects of this EventAgendaItem.
        """
        self.openapi_types = {
            'classification': List[str],
            'description': str,
            'extras': object,
            'media': List[EventMedia],
            'notes': List[str],
            'order': int,
            'related_entities': List[EventRelatedEntity],
            'subjects': List[str]
        }

        self.attribute_map = {
            'classification': 'classification',
            'description': 'description',
            'extras': 'extras',
            'media': 'media',
            'notes': 'notes',
            'order': 'order',
            'related_entities': 'related_entities',
            'subjects': 'subjects'
        }

        self._classification = classification
        self._description = description
        self._extras = extras
        self._media = media
        self._notes = notes
        self._order = order
        self._related_entities = related_entities
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventAgendaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventAgendaItem of this EventAgendaItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this EventAgendaItem.


        :return: The classification of this EventAgendaItem.
        :rtype: List[str]
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this EventAgendaItem.


        :param classification: The classification of this EventAgendaItem.
        :type classification: List[str]
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def description(self):
        """Gets the description of this EventAgendaItem.


        :return: The description of this EventAgendaItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventAgendaItem.


        :param description: The description of this EventAgendaItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def extras(self):
        """Gets the extras of this EventAgendaItem.


        :return: The extras of this EventAgendaItem.
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this EventAgendaItem.


        :param extras: The extras of this EventAgendaItem.
        :type extras: object
        """
        if extras is None:
            raise ValueError("Invalid value for `extras`, must not be `None`")

        self._extras = extras

    @property
    def media(self):
        """Gets the media of this EventAgendaItem.


        :return: The media of this EventAgendaItem.
        :rtype: List[EventMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this EventAgendaItem.


        :param media: The media of this EventAgendaItem.
        :type media: List[EventMedia]
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def notes(self):
        """Gets the notes of this EventAgendaItem.


        :return: The notes of this EventAgendaItem.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this EventAgendaItem.


        :param notes: The notes of this EventAgendaItem.
        :type notes: List[str]
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def order(self):
        """Gets the order of this EventAgendaItem.


        :return: The order of this EventAgendaItem.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this EventAgendaItem.


        :param order: The order of this EventAgendaItem.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def related_entities(self):
        """Gets the related_entities of this EventAgendaItem.


        :return: The related_entities of this EventAgendaItem.
        :rtype: List[EventRelatedEntity]
        """
        return self._related_entities

    @related_entities.setter
    def related_entities(self, related_entities):
        """Sets the related_entities of this EventAgendaItem.


        :param related_entities: The related_entities of this EventAgendaItem.
        :type related_entities: List[EventRelatedEntity]
        """
        if related_entities is None:
            raise ValueError("Invalid value for `related_entities`, must not be `None`")

        self._related_entities = related_entities

    @property
    def subjects(self):
        """Gets the subjects of this EventAgendaItem.


        :return: The subjects of this EventAgendaItem.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this EventAgendaItem.


        :param subjects: The subjects of this EventAgendaItem.
        :type subjects: List[str]
        """
        if subjects is None:
            raise ValueError("Invalid value for `subjects`, must not be `None`")

        self._subjects = subjects
