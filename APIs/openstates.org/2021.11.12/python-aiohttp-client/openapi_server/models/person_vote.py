# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compact_person import CompactPerson
from openapi_server import util


class PersonVote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, option: str=None, voter: CompactPerson=None, voter_name: str=None):
        """PersonVote - a model defined in OpenAPI

        :param option: The option of this PersonVote.
        :param voter: The voter of this PersonVote.
        :param voter_name: The voter_name of this PersonVote.
        """
        self.openapi_types = {
            'option': str,
            'voter': CompactPerson,
            'voter_name': str
        }

        self.attribute_map = {
            'option': 'option',
            'voter': 'voter',
            'voter_name': 'voter_name'
        }

        self._option = option
        self._voter = voter
        self._voter_name = voter_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonVote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonVote of this PersonVote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def option(self):
        """Gets the option of this PersonVote.


        :return: The option of this PersonVote.
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this PersonVote.


        :param option: The option of this PersonVote.
        :type option: str
        """
        if option is None:
            raise ValueError("Invalid value for `option`, must not be `None`")

        self._option = option

    @property
    def voter(self):
        """Gets the voter of this PersonVote.


        :return: The voter of this PersonVote.
        :rtype: CompactPerson
        """
        return self._voter

    @voter.setter
    def voter(self, voter):
        """Sets the voter of this PersonVote.


        :param voter: The voter of this PersonVote.
        :type voter: CompactPerson
        """

        self._voter = voter

    @property
    def voter_name(self):
        """Gets the voter_name of this PersonVote.


        :return: The voter_name of this PersonVote.
        :rtype: str
        """
        return self._voter_name

    @voter_name.setter
    def voter_name(self, voter_name):
        """Sets the voter_name of this PersonVote.


        :param voter_name: The voter_name of this PersonVote.
        :type voter_name: str
        """
        if voter_name is None:
            raise ValueError("Invalid value for `voter_name`, must not be `None`")

        self._voter_name = voter_name
