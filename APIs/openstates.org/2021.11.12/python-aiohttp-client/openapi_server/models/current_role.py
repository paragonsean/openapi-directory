# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.district import District
from openapi_server.models.org_classification import OrgClassification
from openapi_server import util


class CurrentRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, district: District=None, division_id: str='', org_classification: OrgClassification=None, title: str=None):
        """CurrentRole - a model defined in OpenAPI

        :param district: The district of this CurrentRole.
        :param division_id: The division_id of this CurrentRole.
        :param org_classification: The org_classification of this CurrentRole.
        :param title: The title of this CurrentRole.
        """
        self.openapi_types = {
            'district': District,
            'division_id': str,
            'org_classification': OrgClassification,
            'title': str
        }

        self.attribute_map = {
            'district': 'district',
            'division_id': 'division_id',
            'org_classification': 'org_classification',
            'title': 'title'
        }

        self._district = district
        self._division_id = division_id
        self._org_classification = org_classification
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentRole of this CurrentRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def district(self):
        """Gets the district of this CurrentRole.


        :return: The district of this CurrentRole.
        :rtype: District
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CurrentRole.


        :param district: The district of this CurrentRole.
        :type district: District
        """

        self._district = district

    @property
    def division_id(self):
        """Gets the division_id of this CurrentRole.


        :return: The division_id of this CurrentRole.
        :rtype: str
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this CurrentRole.


        :param division_id: The division_id of this CurrentRole.
        :type division_id: str
        """

        self._division_id = division_id

    @property
    def org_classification(self):
        """Gets the org_classification of this CurrentRole.


        :return: The org_classification of this CurrentRole.
        :rtype: OrgClassification
        """
        return self._org_classification

    @org_classification.setter
    def org_classification(self, org_classification):
        """Sets the org_classification of this CurrentRole.


        :param org_classification: The org_classification of this CurrentRole.
        :type org_classification: OrgClassification
        """
        if org_classification is None:
            raise ValueError("Invalid value for `org_classification`, must not be `None`")

        self._org_classification = org_classification

    @property
    def title(self):
        """Gets the title of this CurrentRole.


        :return: The title of this CurrentRole.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CurrentRole.


        :param title: The title of this CurrentRole.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
