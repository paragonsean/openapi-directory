# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server.models.organization import Organization
from openapi_server.models.person_vote import PersonVote
from openapi_server.models.vote_count import VoteCount
from openapi_server import util


class VoteEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[VoteCount]=None, extras: object=None, id: str=None, identifier: str=None, motion_classification: List[str]=[], motion_text: str=None, organization: Organization=None, result: str=None, sources: List[Link]=None, start_date: str=None, votes: List[PersonVote]=None):
        """VoteEvent - a model defined in OpenAPI

        :param counts: The counts of this VoteEvent.
        :param extras: The extras of this VoteEvent.
        :param id: The id of this VoteEvent.
        :param identifier: The identifier of this VoteEvent.
        :param motion_classification: The motion_classification of this VoteEvent.
        :param motion_text: The motion_text of this VoteEvent.
        :param organization: The organization of this VoteEvent.
        :param result: The result of this VoteEvent.
        :param sources: The sources of this VoteEvent.
        :param start_date: The start_date of this VoteEvent.
        :param votes: The votes of this VoteEvent.
        """
        self.openapi_types = {
            'counts': List[VoteCount],
            'extras': object,
            'id': str,
            'identifier': str,
            'motion_classification': List[str],
            'motion_text': str,
            'organization': Organization,
            'result': str,
            'sources': List[Link],
            'start_date': str,
            'votes': List[PersonVote]
        }

        self.attribute_map = {
            'counts': 'counts',
            'extras': 'extras',
            'id': 'id',
            'identifier': 'identifier',
            'motion_classification': 'motion_classification',
            'motion_text': 'motion_text',
            'organization': 'organization',
            'result': 'result',
            'sources': 'sources',
            'start_date': 'start_date',
            'votes': 'votes'
        }

        self._counts = counts
        self._extras = extras
        self._id = id
        self._identifier = identifier
        self._motion_classification = motion_classification
        self._motion_text = motion_text
        self._organization = organization
        self._result = result
        self._sources = sources
        self._start_date = start_date
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoteEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoteEvent of this VoteEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this VoteEvent.


        :return: The counts of this VoteEvent.
        :rtype: List[VoteCount]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this VoteEvent.


        :param counts: The counts of this VoteEvent.
        :type counts: List[VoteCount]
        """
        if counts is None:
            raise ValueError("Invalid value for `counts`, must not be `None`")

        self._counts = counts

    @property
    def extras(self):
        """Gets the extras of this VoteEvent.


        :return: The extras of this VoteEvent.
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this VoteEvent.


        :param extras: The extras of this VoteEvent.
        :type extras: object
        """
        if extras is None:
            raise ValueError("Invalid value for `extras`, must not be `None`")

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this VoteEvent.


        :return: The id of this VoteEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VoteEvent.


        :param id: The id of this VoteEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this VoteEvent.


        :return: The identifier of this VoteEvent.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this VoteEvent.


        :param identifier: The identifier of this VoteEvent.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def motion_classification(self):
        """Gets the motion_classification of this VoteEvent.


        :return: The motion_classification of this VoteEvent.
        :rtype: List[str]
        """
        return self._motion_classification

    @motion_classification.setter
    def motion_classification(self, motion_classification):
        """Sets the motion_classification of this VoteEvent.


        :param motion_classification: The motion_classification of this VoteEvent.
        :type motion_classification: List[str]
        """

        self._motion_classification = motion_classification

    @property
    def motion_text(self):
        """Gets the motion_text of this VoteEvent.


        :return: The motion_text of this VoteEvent.
        :rtype: str
        """
        return self._motion_text

    @motion_text.setter
    def motion_text(self, motion_text):
        """Sets the motion_text of this VoteEvent.


        :param motion_text: The motion_text of this VoteEvent.
        :type motion_text: str
        """
        if motion_text is None:
            raise ValueError("Invalid value for `motion_text`, must not be `None`")

        self._motion_text = motion_text

    @property
    def organization(self):
        """Gets the organization of this VoteEvent.


        :return: The organization of this VoteEvent.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this VoteEvent.


        :param organization: The organization of this VoteEvent.
        :type organization: Organization
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def result(self):
        """Gets the result of this VoteEvent.


        :return: The result of this VoteEvent.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this VoteEvent.


        :param result: The result of this VoteEvent.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def sources(self):
        """Gets the sources of this VoteEvent.


        :return: The sources of this VoteEvent.
        :rtype: List[Link]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this VoteEvent.


        :param sources: The sources of this VoteEvent.
        :type sources: List[Link]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def start_date(self):
        """Gets the start_date of this VoteEvent.


        :return: The start_date of this VoteEvent.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this VoteEvent.


        :param start_date: The start_date of this VoteEvent.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def votes(self):
        """Gets the votes of this VoteEvent.


        :return: The votes of this VoteEvent.
        :rtype: List[PersonVote]
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this VoteEvent.


        :param votes: The votes of this VoteEvent.
        :type votes: List[PersonVote]
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")

        self._votes = votes
