# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, data_type: str=None, updated_at: datetime=None, url: str=None):
        """DataExport - a model defined in OpenAPI

        :param created_at: The created_at of this DataExport.
        :param data_type: The data_type of this DataExport.
        :param updated_at: The updated_at of this DataExport.
        :param url: The url of this DataExport.
        """
        self.openapi_types = {
            'created_at': datetime,
            'data_type': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'data_type': 'data_type',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._data_type = data_type
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExport of this DataExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DataExport.


        :return: The created_at of this DataExport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataExport.


        :param created_at: The created_at of this DataExport.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def data_type(self):
        """Gets the data_type of this DataExport.


        :return: The data_type of this DataExport.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataExport.


        :param data_type: The data_type of this DataExport.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def updated_at(self):
        """Gets the updated_at of this DataExport.


        :return: The updated_at of this DataExport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataExport.


        :param updated_at: The updated_at of this DataExport.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this DataExport.


        :return: The url of this DataExport.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataExport.


        :param url: The url of this DataExport.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
