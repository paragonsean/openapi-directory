# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alt_identifier import AltIdentifier
from openapi_server.models.alt_name import AltName
from openapi_server.models.compact_jurisdiction import CompactJurisdiction
from openapi_server.models.current_role import CurrentRole
from openapi_server.models.link import Link
from openapi_server.models.office import Office
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_date: str=None, created_at: datetime=None, current_role: CurrentRole=None, death_date: str=None, email: str=None, extras: object=None, family_name: str=None, gender: str=None, given_name: str=None, id: str=None, image: str=None, jurisdiction: CompactJurisdiction=None, links: List[Link]=None, name: str=None, offices: List[Office]=None, openstates_url: str=None, other_identifiers: List[AltIdentifier]=None, other_names: List[AltName]=None, party: str=None, sources: List[Link]=None, updated_at: datetime=None):
        """Person - a model defined in OpenAPI

        :param birth_date: The birth_date of this Person.
        :param created_at: The created_at of this Person.
        :param current_role: The current_role of this Person.
        :param death_date: The death_date of this Person.
        :param email: The email of this Person.
        :param extras: The extras of this Person.
        :param family_name: The family_name of this Person.
        :param gender: The gender of this Person.
        :param given_name: The given_name of this Person.
        :param id: The id of this Person.
        :param image: The image of this Person.
        :param jurisdiction: The jurisdiction of this Person.
        :param links: The links of this Person.
        :param name: The name of this Person.
        :param offices: The offices of this Person.
        :param openstates_url: The openstates_url of this Person.
        :param other_identifiers: The other_identifiers of this Person.
        :param other_names: The other_names of this Person.
        :param party: The party of this Person.
        :param sources: The sources of this Person.
        :param updated_at: The updated_at of this Person.
        """
        self.openapi_types = {
            'birth_date': str,
            'created_at': datetime,
            'current_role': CurrentRole,
            'death_date': str,
            'email': str,
            'extras': object,
            'family_name': str,
            'gender': str,
            'given_name': str,
            'id': str,
            'image': str,
            'jurisdiction': CompactJurisdiction,
            'links': List[Link],
            'name': str,
            'offices': List[Office],
            'openstates_url': str,
            'other_identifiers': List[AltIdentifier],
            'other_names': List[AltName],
            'party': str,
            'sources': List[Link],
            'updated_at': datetime
        }

        self.attribute_map = {
            'birth_date': 'birth_date',
            'created_at': 'created_at',
            'current_role': 'current_role',
            'death_date': 'death_date',
            'email': 'email',
            'extras': 'extras',
            'family_name': 'family_name',
            'gender': 'gender',
            'given_name': 'given_name',
            'id': 'id',
            'image': 'image',
            'jurisdiction': 'jurisdiction',
            'links': 'links',
            'name': 'name',
            'offices': 'offices',
            'openstates_url': 'openstates_url',
            'other_identifiers': 'other_identifiers',
            'other_names': 'other_names',
            'party': 'party',
            'sources': 'sources',
            'updated_at': 'updated_at'
        }

        self._birth_date = birth_date
        self._created_at = created_at
        self._current_role = current_role
        self._death_date = death_date
        self._email = email
        self._extras = extras
        self._family_name = family_name
        self._gender = gender
        self._given_name = given_name
        self._id = id
        self._image = image
        self._jurisdiction = jurisdiction
        self._links = links
        self._name = name
        self._offices = offices
        self._openstates_url = openstates_url
        self._other_identifiers = other_identifiers
        self._other_names = other_names
        self._party = party
        self._sources = sources
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_date(self):
        """Gets the birth_date of this Person.


        :return: The birth_date of this Person.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Person.


        :param birth_date: The birth_date of this Person.
        :type birth_date: str
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date

    @property
    def created_at(self):
        """Gets the created_at of this Person.


        :return: The created_at of this Person.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Person.


        :param created_at: The created_at of this Person.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def current_role(self):
        """Gets the current_role of this Person.


        :return: The current_role of this Person.
        :rtype: CurrentRole
        """
        return self._current_role

    @current_role.setter
    def current_role(self, current_role):
        """Sets the current_role of this Person.


        :param current_role: The current_role of this Person.
        :type current_role: CurrentRole
        """

        self._current_role = current_role

    @property
    def death_date(self):
        """Gets the death_date of this Person.


        :return: The death_date of this Person.
        :rtype: str
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this Person.


        :param death_date: The death_date of this Person.
        :type death_date: str
        """
        if death_date is None:
            raise ValueError("Invalid value for `death_date`, must not be `None`")

        self._death_date = death_date

    @property
    def email(self):
        """Gets the email of this Person.


        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def extras(self):
        """Gets the extras of this Person.


        :return: The extras of this Person.
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this Person.


        :param extras: The extras of this Person.
        :type extras: object
        """
        if extras is None:
            raise ValueError("Invalid value for `extras`, must not be `None`")

        self._extras = extras

    @property
    def family_name(self):
        """Gets the family_name of this Person.


        :return: The family_name of this Person.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Person.


        :param family_name: The family_name of this Person.
        :type family_name: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")

        self._family_name = family_name

    @property
    def gender(self):
        """Gets the gender of this Person.


        :return: The gender of this Person.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.


        :param gender: The gender of this Person.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def given_name(self):
        """Gets the given_name of this Person.


        :return: The given_name of this Person.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Person.


        :param given_name: The given_name of this Person.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def id(self):
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this Person.


        :return: The image of this Person.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Person.


        :param image: The image of this Person.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this Person.


        :return: The jurisdiction of this Person.
        :rtype: CompactJurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this Person.


        :param jurisdiction: The jurisdiction of this Person.
        :type jurisdiction: CompactJurisdiction
        """
        if jurisdiction is None:
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")

        self._jurisdiction = jurisdiction

    @property
    def links(self):
        """Gets the links of this Person.


        :return: The links of this Person.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Person.


        :param links: The links of this Person.
        :type links: List[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offices(self):
        """Gets the offices of this Person.


        :return: The offices of this Person.
        :rtype: List[Office]
        """
        return self._offices

    @offices.setter
    def offices(self, offices):
        """Sets the offices of this Person.


        :param offices: The offices of this Person.
        :type offices: List[Office]
        """

        self._offices = offices

    @property
    def openstates_url(self):
        """Gets the openstates_url of this Person.


        :return: The openstates_url of this Person.
        :rtype: str
        """
        return self._openstates_url

    @openstates_url.setter
    def openstates_url(self, openstates_url):
        """Sets the openstates_url of this Person.


        :param openstates_url: The openstates_url of this Person.
        :type openstates_url: str
        """
        if openstates_url is None:
            raise ValueError("Invalid value for `openstates_url`, must not be `None`")

        self._openstates_url = openstates_url

    @property
    def other_identifiers(self):
        """Gets the other_identifiers of this Person.


        :return: The other_identifiers of this Person.
        :rtype: List[AltIdentifier]
        """
        return self._other_identifiers

    @other_identifiers.setter
    def other_identifiers(self, other_identifiers):
        """Sets the other_identifiers of this Person.


        :param other_identifiers: The other_identifiers of this Person.
        :type other_identifiers: List[AltIdentifier]
        """

        self._other_identifiers = other_identifiers

    @property
    def other_names(self):
        """Gets the other_names of this Person.


        :return: The other_names of this Person.
        :rtype: List[AltName]
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this Person.


        :param other_names: The other_names of this Person.
        :type other_names: List[AltName]
        """

        self._other_names = other_names

    @property
    def party(self):
        """Gets the party of this Person.


        :return: The party of this Person.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this Person.


        :param party: The party of this Person.
        :type party: str
        """
        if party is None:
            raise ValueError("Invalid value for `party`, must not be `None`")

        self._party = party

    @property
    def sources(self):
        """Gets the sources of this Person.


        :return: The sources of this Person.
        :rtype: List[Link]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Person.


        :param sources: The sources of this Person.
        :type sources: List[Link]
        """

        self._sources = sources

    @property
    def updated_at(self):
        """Gets the updated_at of this Person.


        :return: The updated_at of this Person.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Person.


        :param updated_at: The updated_at of this Person.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
