# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelatedBill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, legislative_session: str=None, relation_type: str=None):
        """RelatedBill - a model defined in OpenAPI

        :param identifier: The identifier of this RelatedBill.
        :param legislative_session: The legislative_session of this RelatedBill.
        :param relation_type: The relation_type of this RelatedBill.
        """
        self.openapi_types = {
            'identifier': str,
            'legislative_session': str,
            'relation_type': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'legislative_session': 'legislative_session',
            'relation_type': 'relation_type'
        }

        self._identifier = identifier
        self._legislative_session = legislative_session
        self._relation_type = relation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedBill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelatedBill of this RelatedBill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this RelatedBill.


        :return: The identifier of this RelatedBill.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this RelatedBill.


        :param identifier: The identifier of this RelatedBill.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def legislative_session(self):
        """Gets the legislative_session of this RelatedBill.


        :return: The legislative_session of this RelatedBill.
        :rtype: str
        """
        return self._legislative_session

    @legislative_session.setter
    def legislative_session(self, legislative_session):
        """Sets the legislative_session of this RelatedBill.


        :param legislative_session: The legislative_session of this RelatedBill.
        :type legislative_session: str
        """
        if legislative_session is None:
            raise ValueError("Invalid value for `legislative_session`, must not be `None`")

        self._legislative_session = legislative_session

    @property
    def relation_type(self):
        """Gets the relation_type of this RelatedBill.


        :return: The relation_type of this RelatedBill.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this RelatedBill.


        :param relation_type: The relation_type of this RelatedBill.
        :type relation_type: str
        """
        if relation_type is None:
            raise ValueError("Invalid value for `relation_type`, must not be `None`")

        self._relation_type = relation_type
