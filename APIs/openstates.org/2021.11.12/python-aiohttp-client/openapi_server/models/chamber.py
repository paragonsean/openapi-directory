# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post import Post
from openapi_server import util


class Chamber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: str=None, districts: List[Post]=None, id: str=None, name: str=None):
        """Chamber - a model defined in OpenAPI

        :param classification: The classification of this Chamber.
        :param districts: The districts of this Chamber.
        :param id: The id of this Chamber.
        :param name: The name of this Chamber.
        """
        self.openapi_types = {
            'classification': str,
            'districts': List[Post],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'classification': 'classification',
            'districts': 'districts',
            'id': 'id',
            'name': 'name'
        }

        self._classification = classification
        self._districts = districts
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chamber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chamber of this Chamber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this Chamber.


        :return: The classification of this Chamber.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Chamber.


        :param classification: The classification of this Chamber.
        :type classification: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def districts(self):
        """Gets the districts of this Chamber.


        :return: The districts of this Chamber.
        :rtype: List[Post]
        """
        return self._districts

    @districts.setter
    def districts(self, districts):
        """Sets the districts of this Chamber.


        :param districts: The districts of this Chamber.
        :type districts: List[Post]
        """

        self._districts = districts

    @property
    def id(self):
        """Gets the id of this Chamber.


        :return: The id of this Chamber.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Chamber.


        :param id: The id of this Chamber.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Chamber.


        :return: The name of this Chamber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Chamber.


        :param name: The name of this Chamber.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
