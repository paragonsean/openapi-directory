# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compact_person import CompactPerson
from openapi_server.models.organization import Organization
from openapi_server import util


class EventParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_type: str=None, name: str=None, note: str=None, organization: Organization=None, person: CompactPerson=None):
        """EventParticipant - a model defined in OpenAPI

        :param entity_type: The entity_type of this EventParticipant.
        :param name: The name of this EventParticipant.
        :param note: The note of this EventParticipant.
        :param organization: The organization of this EventParticipant.
        :param person: The person of this EventParticipant.
        """
        self.openapi_types = {
            'entity_type': str,
            'name': str,
            'note': str,
            'organization': Organization,
            'person': CompactPerson
        }

        self.attribute_map = {
            'entity_type': 'entity_type',
            'name': 'name',
            'note': 'note',
            'organization': 'organization',
            'person': 'person'
        }

        self._entity_type = entity_type
        self._name = name
        self._note = note
        self._organization = organization
        self._person = person

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventParticipant of this EventParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_type(self):
        """Gets the entity_type of this EventParticipant.


        :return: The entity_type of this EventParticipant.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EventParticipant.


        :param entity_type: The entity_type of this EventParticipant.
        :type entity_type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this EventParticipant.


        :return: The name of this EventParticipant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventParticipant.


        :param name: The name of this EventParticipant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this EventParticipant.


        :return: The note of this EventParticipant.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EventParticipant.


        :param note: The note of this EventParticipant.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def organization(self):
        """Gets the organization of this EventParticipant.


        :return: The organization of this EventParticipant.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this EventParticipant.


        :param organization: The organization of this EventParticipant.
        :type organization: Organization
        """

        self._organization = organization

    @property
    def person(self):
        """Gets the person of this EventParticipant.


        :return: The person of this EventParticipant.
        :rtype: CompactPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this EventParticipant.


        :param person: The person of this EventParticipant.
        :type person: CompactPerson
        """

        self._person = person
