# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompactBill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, identifier: str=None, session: str=None, title: str=None):
        """CompactBill - a model defined in OpenAPI

        :param id: The id of this CompactBill.
        :param identifier: The identifier of this CompactBill.
        :param session: The session of this CompactBill.
        :param title: The title of this CompactBill.
        """
        self.openapi_types = {
            'id': str,
            'identifier': str,
            'session': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'identifier': 'identifier',
            'session': 'session',
            'title': 'title'
        }

        self._id = id
        self._identifier = identifier
        self._session = session
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompactBill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompactBill of this CompactBill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CompactBill.


        :return: The id of this CompactBill.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompactBill.


        :param id: The id of this CompactBill.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this CompactBill.


        :return: The identifier of this CompactBill.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CompactBill.


        :param identifier: The identifier of this CompactBill.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def session(self):
        """Gets the session of this CompactBill.


        :return: The session of this CompactBill.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this CompactBill.


        :param session: The session of this CompactBill.
        :type session: str
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")

        self._session = session

    @property
    def title(self):
        """Gets the title of this CompactBill.


        :return: The title of this CompactBill.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CompactBill.


        :param title: The title of this CompactBill.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
