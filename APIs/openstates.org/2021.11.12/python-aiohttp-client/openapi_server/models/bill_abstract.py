# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillAbstract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abstract: str=None, note: str=None):
        """BillAbstract - a model defined in OpenAPI

        :param abstract: The abstract of this BillAbstract.
        :param note: The note of this BillAbstract.
        """
        self.openapi_types = {
            'abstract': str,
            'note': str
        }

        self.attribute_map = {
            'abstract': 'abstract',
            'note': 'note'
        }

        self._abstract = abstract
        self._note = note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillAbstract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillAbstract of this BillAbstract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abstract(self):
        """Gets the abstract of this BillAbstract.


        :return: The abstract of this BillAbstract.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this BillAbstract.


        :param abstract: The abstract of this BillAbstract.
        :type abstract: str
        """
        if abstract is None:
            raise ValueError("Invalid value for `abstract`, must not be `None`")

        self._abstract = abstract

    @property
    def note(self):
        """Gets the note of this BillAbstract.


        :return: The note of this BillAbstract.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BillAbstract.


        :param note: The note of this BillAbstract.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note
