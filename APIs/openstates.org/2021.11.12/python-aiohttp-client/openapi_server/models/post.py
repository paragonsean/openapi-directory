# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Post(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, division_id: str=None, label: str=None, maximum_memberships: int=None, role: str=None):
        """Post - a model defined in OpenAPI

        :param division_id: The division_id of this Post.
        :param label: The label of this Post.
        :param maximum_memberships: The maximum_memberships of this Post.
        :param role: The role of this Post.
        """
        self.openapi_types = {
            'division_id': str,
            'label': str,
            'maximum_memberships': int,
            'role': str
        }

        self.attribute_map = {
            'division_id': 'division_id',
            'label': 'label',
            'maximum_memberships': 'maximum_memberships',
            'role': 'role'
        }

        self._division_id = division_id
        self._label = label
        self._maximum_memberships = maximum_memberships
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Post of this Post.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def division_id(self):
        """Gets the division_id of this Post.


        :return: The division_id of this Post.
        :rtype: str
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this Post.


        :param division_id: The division_id of this Post.
        :type division_id: str
        """
        if division_id is None:
            raise ValueError("Invalid value for `division_id`, must not be `None`")

        self._division_id = division_id

    @property
    def label(self):
        """Gets the label of this Post.


        :return: The label of this Post.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Post.


        :param label: The label of this Post.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def maximum_memberships(self):
        """Gets the maximum_memberships of this Post.


        :return: The maximum_memberships of this Post.
        :rtype: int
        """
        return self._maximum_memberships

    @maximum_memberships.setter
    def maximum_memberships(self, maximum_memberships):
        """Sets the maximum_memberships of this Post.


        :param maximum_memberships: The maximum_memberships of this Post.
        :type maximum_memberships: int
        """
        if maximum_memberships is None:
            raise ValueError("Invalid value for `maximum_memberships`, must not be `None`")

        self._maximum_memberships = maximum_memberships

    @property
    def role(self):
        """Gets the role of this Post.


        :return: The role of this Post.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Post.


        :param role: The role of this Post.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
