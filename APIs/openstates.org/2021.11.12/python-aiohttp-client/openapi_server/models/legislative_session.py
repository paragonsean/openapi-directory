# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_export import DataExport
from openapi_server import util


class LegislativeSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: str=None, downloads: List[DataExport]=None, end_date: str=None, identifier: str=None, name: str=None, start_date: str=None):
        """LegislativeSession - a model defined in OpenAPI

        :param classification: The classification of this LegislativeSession.
        :param downloads: The downloads of this LegislativeSession.
        :param end_date: The end_date of this LegislativeSession.
        :param identifier: The identifier of this LegislativeSession.
        :param name: The name of this LegislativeSession.
        :param start_date: The start_date of this LegislativeSession.
        """
        self.openapi_types = {
            'classification': str,
            'downloads': List[DataExport],
            'end_date': str,
            'identifier': str,
            'name': str,
            'start_date': str
        }

        self.attribute_map = {
            'classification': 'classification',
            'downloads': 'downloads',
            'end_date': 'end_date',
            'identifier': 'identifier',
            'name': 'name',
            'start_date': 'start_date'
        }

        self._classification = classification
        self._downloads = downloads
        self._end_date = end_date
        self._identifier = identifier
        self._name = name
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegislativeSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegislativeSession of this LegislativeSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this LegislativeSession.


        :return: The classification of this LegislativeSession.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this LegislativeSession.


        :param classification: The classification of this LegislativeSession.
        :type classification: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def downloads(self):
        """Gets the downloads of this LegislativeSession.


        :return: The downloads of this LegislativeSession.
        :rtype: List[DataExport]
        """
        return self._downloads

    @downloads.setter
    def downloads(self, downloads):
        """Sets the downloads of this LegislativeSession.


        :param downloads: The downloads of this LegislativeSession.
        :type downloads: List[DataExport]
        """

        self._downloads = downloads

    @property
    def end_date(self):
        """Gets the end_date of this LegislativeSession.


        :return: The end_date of this LegislativeSession.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LegislativeSession.


        :param end_date: The end_date of this LegislativeSession.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def identifier(self):
        """Gets the identifier of this LegislativeSession.


        :return: The identifier of this LegislativeSession.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this LegislativeSession.


        :param identifier: The identifier of this LegislativeSession.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this LegislativeSession.


        :return: The name of this LegislativeSession.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegislativeSession.


        :param name: The name of this LegislativeSession.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this LegislativeSession.


        :return: The start_date of this LegislativeSession.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LegislativeSession.


        :param start_date: The start_date of this LegislativeSession.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
