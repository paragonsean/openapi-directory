# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compact_jurisdiction import CompactJurisdiction
from openapi_server.models.event_agenda_item import EventAgendaItem
from openapi_server.models.event_document import EventDocument
from openapi_server.models.event_location import EventLocation
from openapi_server.models.event_media import EventMedia
from openapi_server.models.event_participant import EventParticipant
from openapi_server.models.link import Link
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agenda: List[EventAgendaItem]=None, all_day: bool=None, classification: str=None, deleted: bool=None, description: str=None, documents: List[EventDocument]=None, end_date: str=None, id: str=None, jurisdiction: CompactJurisdiction=None, links: List[Link]=None, location: EventLocation=None, media: List[EventMedia]=None, name: str=None, participants: List[EventParticipant]=None, sources: List[Link]=None, start_date: str=None, status: str=None, upstream_id: str=None):
        """Event - a model defined in OpenAPI

        :param agenda: The agenda of this Event.
        :param all_day: The all_day of this Event.
        :param classification: The classification of this Event.
        :param deleted: The deleted of this Event.
        :param description: The description of this Event.
        :param documents: The documents of this Event.
        :param end_date: The end_date of this Event.
        :param id: The id of this Event.
        :param jurisdiction: The jurisdiction of this Event.
        :param links: The links of this Event.
        :param location: The location of this Event.
        :param media: The media of this Event.
        :param name: The name of this Event.
        :param participants: The participants of this Event.
        :param sources: The sources of this Event.
        :param start_date: The start_date of this Event.
        :param status: The status of this Event.
        :param upstream_id: The upstream_id of this Event.
        """
        self.openapi_types = {
            'agenda': List[EventAgendaItem],
            'all_day': bool,
            'classification': str,
            'deleted': bool,
            'description': str,
            'documents': List[EventDocument],
            'end_date': str,
            'id': str,
            'jurisdiction': CompactJurisdiction,
            'links': List[Link],
            'location': EventLocation,
            'media': List[EventMedia],
            'name': str,
            'participants': List[EventParticipant],
            'sources': List[Link],
            'start_date': str,
            'status': str,
            'upstream_id': str
        }

        self.attribute_map = {
            'agenda': 'agenda',
            'all_day': 'all_day',
            'classification': 'classification',
            'deleted': 'deleted',
            'description': 'description',
            'documents': 'documents',
            'end_date': 'end_date',
            'id': 'id',
            'jurisdiction': 'jurisdiction',
            'links': 'links',
            'location': 'location',
            'media': 'media',
            'name': 'name',
            'participants': 'participants',
            'sources': 'sources',
            'start_date': 'start_date',
            'status': 'status',
            'upstream_id': 'upstream_id'
        }

        self._agenda = agenda
        self._all_day = all_day
        self._classification = classification
        self._deleted = deleted
        self._description = description
        self._documents = documents
        self._end_date = end_date
        self._id = id
        self._jurisdiction = jurisdiction
        self._links = links
        self._location = location
        self._media = media
        self._name = name
        self._participants = participants
        self._sources = sources
        self._start_date = start_date
        self._status = status
        self._upstream_id = upstream_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agenda(self):
        """Gets the agenda of this Event.


        :return: The agenda of this Event.
        :rtype: List[EventAgendaItem]
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda):
        """Sets the agenda of this Event.


        :param agenda: The agenda of this Event.
        :type agenda: List[EventAgendaItem]
        """

        self._agenda = agenda

    @property
    def all_day(self):
        """Gets the all_day of this Event.


        :return: The all_day of this Event.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this Event.


        :param all_day: The all_day of this Event.
        :type all_day: bool
        """
        if all_day is None:
            raise ValueError("Invalid value for `all_day`, must not be `None`")

        self._all_day = all_day

    @property
    def classification(self):
        """Gets the classification of this Event.


        :return: The classification of this Event.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Event.


        :param classification: The classification of this Event.
        :type classification: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def deleted(self):
        """Gets the deleted of this Event.


        :return: The deleted of this Event.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Event.


        :param deleted: The deleted of this Event.
        :type deleted: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def documents(self):
        """Gets the documents of this Event.


        :return: The documents of this Event.
        :rtype: List[EventDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Event.


        :param documents: The documents of this Event.
        :type documents: List[EventDocument]
        """

        self._documents = documents

    @property
    def end_date(self):
        """Gets the end_date of this Event.


        :return: The end_date of this Event.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Event.


        :param end_date: The end_date of this Event.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this Event.


        :return: The jurisdiction of this Event.
        :rtype: CompactJurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this Event.


        :param jurisdiction: The jurisdiction of this Event.
        :type jurisdiction: CompactJurisdiction
        """
        if jurisdiction is None:
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")

        self._jurisdiction = jurisdiction

    @property
    def links(self):
        """Gets the links of this Event.


        :return: The links of this Event.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Event.


        :param links: The links of this Event.
        :type links: List[Link]
        """

        self._links = links

    @property
    def location(self):
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: EventLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: EventLocation
        """

        self._location = location

    @property
    def media(self):
        """Gets the media of this Event.


        :return: The media of this Event.
        :rtype: List[EventMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Event.


        :param media: The media of this Event.
        :type media: List[EventMedia]
        """

        self._media = media

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def participants(self):
        """Gets the participants of this Event.


        :return: The participants of this Event.
        :rtype: List[EventParticipant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this Event.


        :param participants: The participants of this Event.
        :type participants: List[EventParticipant]
        """

        self._participants = participants

    @property
    def sources(self):
        """Gets the sources of this Event.


        :return: The sources of this Event.
        :rtype: List[Link]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Event.


        :param sources: The sources of this Event.
        :type sources: List[Link]
        """

        self._sources = sources

    @property
    def start_date(self):
        """Gets the start_date of this Event.


        :return: The start_date of this Event.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Event.


        :param start_date: The start_date of this Event.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Event.


        :return: The status of this Event.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Event.


        :param status: The status of this Event.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def upstream_id(self):
        """Gets the upstream_id of this Event.


        :return: The upstream_id of this Event.
        :rtype: str
        """
        return self._upstream_id

    @upstream_id.setter
    def upstream_id(self, upstream_id):
        """Sets the upstream_id of this Event.


        :param upstream_id: The upstream_id of this Event.
        :type upstream_id: str
        """
        if upstream_id is None:
            raise ValueError("Invalid value for `upstream_id`, must not be `None`")

        self._upstream_id = upstream_id
