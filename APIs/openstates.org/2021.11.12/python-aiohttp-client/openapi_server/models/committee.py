# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alt_name import AltName
from openapi_server.models.committee_classification import CommitteeClassification
from openapi_server.models.committee_membership import CommitteeMembership
from openapi_server.models.link import Link
from openapi_server import util


class Committee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: CommitteeClassification=None, extras: object=None, id: str=None, links: List[Link]=None, memberships: List[CommitteeMembership]=None, name: str=None, other_names: List[AltName]=None, parent_id: str=None, sources: List[Link]=None):
        """Committee - a model defined in OpenAPI

        :param classification: The classification of this Committee.
        :param extras: The extras of this Committee.
        :param id: The id of this Committee.
        :param links: The links of this Committee.
        :param memberships: The memberships of this Committee.
        :param name: The name of this Committee.
        :param other_names: The other_names of this Committee.
        :param parent_id: The parent_id of this Committee.
        :param sources: The sources of this Committee.
        """
        self.openapi_types = {
            'classification': CommitteeClassification,
            'extras': object,
            'id': str,
            'links': List[Link],
            'memberships': List[CommitteeMembership],
            'name': str,
            'other_names': List[AltName],
            'parent_id': str,
            'sources': List[Link]
        }

        self.attribute_map = {
            'classification': 'classification',
            'extras': 'extras',
            'id': 'id',
            'links': 'links',
            'memberships': 'memberships',
            'name': 'name',
            'other_names': 'other_names',
            'parent_id': 'parent_id',
            'sources': 'sources'
        }

        self._classification = classification
        self._extras = extras
        self._id = id
        self._links = links
        self._memberships = memberships
        self._name = name
        self._other_names = other_names
        self._parent_id = parent_id
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Committee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Committee of this Committee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this Committee.


        :return: The classification of this Committee.
        :rtype: CommitteeClassification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Committee.


        :param classification: The classification of this Committee.
        :type classification: CommitteeClassification
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def extras(self):
        """Gets the extras of this Committee.


        :return: The extras of this Committee.
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this Committee.


        :param extras: The extras of this Committee.
        :type extras: object
        """
        if extras is None:
            raise ValueError("Invalid value for `extras`, must not be `None`")

        self._extras = extras

    @property
    def id(self):
        """Gets the id of this Committee.


        :return: The id of this Committee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Committee.


        :param id: The id of this Committee.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def links(self):
        """Gets the links of this Committee.


        :return: The links of this Committee.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Committee.


        :param links: The links of this Committee.
        :type links: List[Link]
        """

        self._links = links

    @property
    def memberships(self):
        """Gets the memberships of this Committee.


        :return: The memberships of this Committee.
        :rtype: List[CommitteeMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Committee.


        :param memberships: The memberships of this Committee.
        :type memberships: List[CommitteeMembership]
        """

        self._memberships = memberships

    @property
    def name(self):
        """Gets the name of this Committee.


        :return: The name of this Committee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Committee.


        :param name: The name of this Committee.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def other_names(self):
        """Gets the other_names of this Committee.


        :return: The other_names of this Committee.
        :rtype: List[AltName]
        """
        return self._other_names

    @other_names.setter
    def other_names(self, other_names):
        """Sets the other_names of this Committee.


        :param other_names: The other_names of this Committee.
        :type other_names: List[AltName]
        """

        self._other_names = other_names

    @property
    def parent_id(self):
        """Gets the parent_id of this Committee.


        :return: The parent_id of this Committee.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Committee.


        :param parent_id: The parent_id of this Committee.
        :type parent_id: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def sources(self):
        """Gets the sources of this Committee.


        :return: The sources of this Committee.
        :rtype: List[Link]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Committee.


        :param sources: The sources of this Committee.
        :type sources: List[Link]
        """

        self._sources = sources
