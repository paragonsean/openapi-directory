# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Office(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, classification: str=None, fax: str=None, name: str=None, voice: str=None):
        """Office - a model defined in OpenAPI

        :param address: The address of this Office.
        :param classification: The classification of this Office.
        :param fax: The fax of this Office.
        :param name: The name of this Office.
        :param voice: The voice of this Office.
        """
        self.openapi_types = {
            'address': str,
            'classification': str,
            'fax': str,
            'name': str,
            'voice': str
        }

        self.attribute_map = {
            'address': 'address',
            'classification': 'classification',
            'fax': 'fax',
            'name': 'name',
            'voice': 'voice'
        }

        self._address = address
        self._classification = classification
        self._fax = fax
        self._name = name
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Office':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Office of this Office.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Office.


        :return: The address of this Office.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Office.


        :param address: The address of this Office.
        :type address: str
        """

        self._address = address

    @property
    def classification(self):
        """Gets the classification of this Office.


        :return: The classification of this Office.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Office.


        :param classification: The classification of this Office.
        :type classification: str
        """

        self._classification = classification

    @property
    def fax(self):
        """Gets the fax of this Office.


        :return: The fax of this Office.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Office.


        :param fax: The fax of this Office.
        :type fax: str
        """

        self._fax = fax

    @property
    def name(self):
        """Gets the name of this Office.


        :return: The name of this Office.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Office.


        :param name: The name of this Office.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def voice(self):
        """Gets the voice of this Office.


        :return: The voice of this Office.
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this Office.


        :param voice: The voice of this Office.
        :type voice: str
        """

        self._voice = voice
