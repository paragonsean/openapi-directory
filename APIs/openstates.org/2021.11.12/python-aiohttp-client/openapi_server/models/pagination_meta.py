# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_page: int=None, page: int=None, per_page: int=None, total_items: int=None):
        """PaginationMeta - a model defined in OpenAPI

        :param max_page: The max_page of this PaginationMeta.
        :param page: The page of this PaginationMeta.
        :param per_page: The per_page of this PaginationMeta.
        :param total_items: The total_items of this PaginationMeta.
        """
        self.openapi_types = {
            'max_page': int,
            'page': int,
            'per_page': int,
            'total_items': int
        }

        self.attribute_map = {
            'max_page': 'max_page',
            'page': 'page',
            'per_page': 'per_page',
            'total_items': 'total_items'
        }

        self._max_page = max_page
        self._page = page
        self._per_page = per_page
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationMeta of this PaginationMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_page(self):
        """Gets the max_page of this PaginationMeta.


        :return: The max_page of this PaginationMeta.
        :rtype: int
        """
        return self._max_page

    @max_page.setter
    def max_page(self, max_page):
        """Sets the max_page of this PaginationMeta.


        :param max_page: The max_page of this PaginationMeta.
        :type max_page: int
        """
        if max_page is None:
            raise ValueError("Invalid value for `max_page`, must not be `None`")

        self._max_page = max_page

    @property
    def page(self):
        """Gets the page of this PaginationMeta.


        :return: The page of this PaginationMeta.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PaginationMeta.


        :param page: The page of this PaginationMeta.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this PaginationMeta.


        :return: The per_page of this PaginationMeta.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this PaginationMeta.


        :param per_page: The per_page of this PaginationMeta.
        :type per_page: int
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")

        self._per_page = per_page

    @property
    def total_items(self):
        """Gets the total_items of this PaginationMeta.


        :return: The total_items of this PaginationMeta.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this PaginationMeta.


        :param total_items: The total_items of this PaginationMeta.
        :type total_items: int
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")

        self._total_items = total_items
