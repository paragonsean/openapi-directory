# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_meta import PaginationMeta
from openapi_server.models.person import Person
from openapi_server import util


class PersonList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pagination: PaginationMeta=None, results: List[Person]=None):
        """PersonList - a model defined in OpenAPI

        :param pagination: The pagination of this PersonList.
        :param results: The results of this PersonList.
        """
        self.openapi_types = {
            'pagination': PaginationMeta,
            'results': List[Person]
        }

        self.attribute_map = {
            'pagination': 'pagination',
            'results': 'results'
        }

        self._pagination = pagination
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonList of this PersonList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pagination(self):
        """Gets the pagination of this PersonList.


        :return: The pagination of this PersonList.
        :rtype: PaginationMeta
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this PersonList.


        :param pagination: The pagination of this PersonList.
        :type pagination: PaginationMeta
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")

        self._pagination = pagination

    @property
    def results(self):
        """Gets the results of this PersonList.


        :return: The results of this PersonList.
        :rtype: List[Person]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this PersonList.


        :param results: The results of this PersonList.
        :type results: List[Person]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
