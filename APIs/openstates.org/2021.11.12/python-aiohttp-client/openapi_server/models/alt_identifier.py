# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AltIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, scheme: str=None):
        """AltIdentifier - a model defined in OpenAPI

        :param identifier: The identifier of this AltIdentifier.
        :param scheme: The scheme of this AltIdentifier.
        """
        self.openapi_types = {
            'identifier': str,
            'scheme': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'scheme': 'scheme'
        }

        self._identifier = identifier
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AltIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AltIdentifier of this AltIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this AltIdentifier.


        :return: The identifier of this AltIdentifier.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AltIdentifier.


        :param identifier: The identifier of this AltIdentifier.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def scheme(self):
        """Gets the scheme of this AltIdentifier.


        :return: The scheme of this AltIdentifier.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this AltIdentifier.


        :param scheme: The scheme of this AltIdentifier.
        :type scheme: str
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")

        self._scheme = scheme
