/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenStatesApiV3);
  }
}(this, function(expect, OpenStatesApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenStatesApiV3.VoteEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VoteEvent', function() {
    it('should create an instance of VoteEvent', function() {
      // uncomment below and update the code to test VoteEvent
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be.a(OpenStatesApiV3.VoteEvent);
    });

    it('should have the property counts (base name: "counts")', function() {
      // uncomment below and update the code to test the property counts
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property extras (base name: "extras")', function() {
      // uncomment below and update the code to test the property extras
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property identifier (base name: "identifier")', function() {
      // uncomment below and update the code to test the property identifier
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property motionClassification (base name: "motion_classification")', function() {
      // uncomment below and update the code to test the property motionClassification
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property motionText (base name: "motion_text")', function() {
      // uncomment below and update the code to test the property motionText
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property result (base name: "result")', function() {
      // uncomment below and update the code to test the property result
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property sources (base name: "sources")', function() {
      // uncomment below and update the code to test the property sources
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

    it('should have the property votes (base name: "votes")', function() {
      // uncomment below and update the code to test the property votes
      //var instance = new OpenStatesApiV3.VoteEvent();
      //expect(instance).to.be();
    });

  });

}));
