/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenStatesApiV3);
  }
}(this, function(expect, OpenStatesApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenStatesApiV3.Person();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Person', function() {
    it('should create an instance of Person', function() {
      // uncomment below and update the code to test Person
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be.a(OpenStatesApiV3.Person);
    });

    it('should have the property birthDate (base name: "birth_date")', function() {
      // uncomment below and update the code to test the property birthDate
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property currentRole (base name: "current_role")', function() {
      // uncomment below and update the code to test the property currentRole
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property deathDate (base name: "death_date")', function() {
      // uncomment below and update the code to test the property deathDate
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property extras (base name: "extras")', function() {
      // uncomment below and update the code to test the property extras
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property familyName (base name: "family_name")', function() {
      // uncomment below and update the code to test the property familyName
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property givenName (base name: "given_name")', function() {
      // uncomment below and update the code to test the property givenName
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property jurisdiction (base name: "jurisdiction")', function() {
      // uncomment below and update the code to test the property jurisdiction
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property offices (base name: "offices")', function() {
      // uncomment below and update the code to test the property offices
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property openstatesUrl (base name: "openstates_url")', function() {
      // uncomment below and update the code to test the property openstatesUrl
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property otherIdentifiers (base name: "other_identifiers")', function() {
      // uncomment below and update the code to test the property otherIdentifiers
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property otherNames (base name: "other_names")', function() {
      // uncomment below and update the code to test the property otherNames
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property party (base name: "party")', function() {
      // uncomment below and update the code to test the property party
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property sources (base name: "sources")', function() {
      // uncomment below and update the code to test the property sources
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new OpenStatesApiV3.Person();
      //expect(instance).to.be();
    });

  });

}));
