/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenStatesApiV3);
  }
}(this, function(expect, OpenStatesApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenStatesApiV3.Jurisdiction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Jurisdiction', function() {
    it('should create an instance of Jurisdiction', function() {
      // uncomment below and update the code to test Jurisdiction
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be.a(OpenStatesApiV3.Jurisdiction);
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property divisionId (base name: "division_id")', function() {
      // uncomment below and update the code to test the property divisionId
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property latestBillUpdate (base name: "latest_bill_update")', function() {
      // uncomment below and update the code to test the property latestBillUpdate
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property latestPeopleUpdate (base name: "latest_people_update")', function() {
      // uncomment below and update the code to test the property latestPeopleUpdate
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property latestRuns (base name: "latest_runs")', function() {
      // uncomment below and update the code to test the property latestRuns
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property legislativeSessions (base name: "legislative_sessions")', function() {
      // uncomment below and update the code to test the property legislativeSessions
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property organizations (base name: "organizations")', function() {
      // uncomment below and update the code to test the property organizations
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new OpenStatesApiV3.Jurisdiction();
      //expect(instance).to.be();
    });

  });

}));
