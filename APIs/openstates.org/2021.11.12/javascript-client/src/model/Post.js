/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Post model module.
 * @module model/Post
 * @version 2021.11.12
 */
class Post {
    /**
     * Constructs a new <code>Post</code>.
     * @alias module:model/Post
     * @param divisionId {String} 
     * @param label {String} 
     * @param maximumMemberships {Number} 
     * @param role {String} 
     */
    constructor(divisionId, label, maximumMemberships, role) { 
        
        Post.initialize(this, divisionId, label, maximumMemberships, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, divisionId, label, maximumMemberships, role) { 
        obj['division_id'] = divisionId;
        obj['label'] = label;
        obj['maximum_memberships'] = maximumMemberships;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>Post</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Post} obj Optional instance to populate.
     * @return {module:model/Post} The populated <code>Post</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Post();

            if (data.hasOwnProperty('division_id')) {
                obj['division_id'] = ApiClient.convertToType(data['division_id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('maximum_memberships')) {
                obj['maximum_memberships'] = ApiClient.convertToType(data['maximum_memberships'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Post</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Post</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Post.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['division_id'] && !(typeof data['division_id'] === 'string' || data['division_id'] instanceof String)) {
            throw new Error("Expected the field `division_id` to be a primitive type in the JSON string but got " + data['division_id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

Post.RequiredProperties = ["division_id", "label", "maximum_memberships", "role"];

/**
 * @member {String} division_id
 */
Post.prototype['division_id'] = undefined;

/**
 * @member {String} label
 */
Post.prototype['label'] = undefined;

/**
 * @member {Number} maximum_memberships
 */
Post.prototype['maximum_memberships'] = undefined;

/**
 * @member {String} role
 */
Post.prototype['role'] = undefined;






export default Post;

