/**
 * Open States API v3
 *  * [More documentation](https://docs.openstates.org/en/latest/api/v3/index.html) * [Register for an account](https://openstates.org/accounts/signup/)   **We are currently working to restore experimental support for committees & events.**  During this period please note that data is not yet available for all states and the exact format of the new endpoints may change slightly depending on user feedback.  If you have any issues or questions use our [GitHub Issues](https://github.com/openstates/issues/issues) to give feedback. 
 *
 * The version of the OpenAPI document: 2021.11.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import OrgClassification from '../model/OrgClassification';
import PersonInclude from '../model/PersonInclude';
import PersonList from '../model/PersonList';

/**
* People service.
* @module api/PeopleApi
* @version 2021.11.12
*/
export default class PeopleApi {

    /**
    * Constructs a new PeopleApi. 
    * @alias module:api/PeopleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the peopleGeoPeopleGeoGet operation.
     * @callback module:api/PeopleApi~peopleGeoPeopleGeoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * People Geo
     * Get list of people currently representing a given location.  **Note:** Currently limited to state legislators and US Congress.  Governors & mayors are not included.
     * @param {Number} lat Latitude of point.
     * @param {Number} lng Longitude of point.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PersonInclude>} [include] Additional information to include in the response.
     * @param {String} [apikey] 
     * @param {String} [xApiKey] 
     * @param {module:api/PeopleApi~peopleGeoPeopleGeoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonList}
     */
    peopleGeoPeopleGeoGet(lat, lng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling peopleGeoPeopleGeoGet");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling peopleGeoPeopleGeoGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'include': this.apiClient.buildCollectionParam(opts['include'], 'multi'),
        'apikey': opts['apikey']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonList;
      return this.apiClient.callApi(
        '/people.geo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peopleSearchPeopleGet operation.
     * @callback module:api/PeopleApi~peopleSearchPeopleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * People Search
     * Get list of people matching selected criteria.  Must provide either **jurisdiction**, **name**, or one or more **id** parameters.
     * @param {Object} opts Optional parameters
     * @param {String} [jurisdiction] Filter by jurisdiction name or id.
     * @param {String} [name] Filter by name, case-insensitive match.
     * @param {Array.<String>} [id] Filter by id, can be specified multiple times for multiple people.
     * @param {module:model/OrgClassification} [orgClassification] Filter by current role.
     * @param {String} [district] Filter by district name.
     * @param {Array.<module:model/PersonInclude>} [include] Additional information to include in response.
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {String} [apikey] 
     * @param {String} [xApiKey] 
     * @param {module:api/PeopleApi~peopleSearchPeopleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonList}
     */
    peopleSearchPeopleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'jurisdiction': opts['jurisdiction'],
        'name': opts['name'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'org_classification': opts['orgClassification'],
        'district': opts['district'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'multi'),
        'page': opts['page'],
        'per_page': opts['perPage'],
        'apikey': opts['apikey']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonList;
      return this.apiClient.callApi(
        '/people', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
