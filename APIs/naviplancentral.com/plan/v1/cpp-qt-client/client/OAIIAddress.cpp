/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIAddress::OAIIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIAddress::OAIIAddress() {
    this->initializeModel();
}

OAIIAddress::~OAIIAddress() {}

void OAIIAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_combined_city_state_province_isSet = false;
    m_combined_city_state_province_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_state_or_province_abbrev_isSet = false;
    m_state_or_province_abbrev_isValid = false;

    m_street1_isSet = false;
    m_street1_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_zip_or_postal_code_isSet = false;
    m_zip_or_postal_code_isValid = false;
}

void OAIIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_combined_city_state_province_isValid = ::OpenAPI::fromJsonValue(m_combined_city_state_province, json[QString("combinedCityStateProvince")]);
    m_combined_city_state_province_isSet = !json[QString("combinedCityStateProvince")].isNull() && m_combined_city_state_province_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_state_or_province_abbrev_isValid = ::OpenAPI::fromJsonValue(m_state_or_province_abbrev, json[QString("stateOrProvinceAbbrev")]);
    m_state_or_province_abbrev_isSet = !json[QString("stateOrProvinceAbbrev")].isNull() && m_state_or_province_abbrev_isValid;

    m_street1_isValid = ::OpenAPI::fromJsonValue(m_street1, json[QString("street1")]);
    m_street1_isSet = !json[QString("street1")].isNull() && m_street1_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("street2")]);
    m_street2_isSet = !json[QString("street2")].isNull() && m_street2_isValid;

    m_zip_or_postal_code_isValid = ::OpenAPI::fromJsonValue(m_zip_or_postal_code, json[QString("zipOrPostalCode")]);
    m_zip_or_postal_code_isSet = !json[QString("zipOrPostalCode")].isNull() && m_zip_or_postal_code_isValid;
}

QString OAIIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_combined_city_state_province_isSet) {
        obj.insert(QString("combinedCityStateProvince"), ::OpenAPI::toJsonValue(m_combined_city_state_province));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_state_or_province_abbrev_isSet) {
        obj.insert(QString("stateOrProvinceAbbrev"), ::OpenAPI::toJsonValue(m_state_or_province_abbrev));
    }
    if (m_street1_isSet) {
        obj.insert(QString("street1"), ::OpenAPI::toJsonValue(m_street1));
    }
    if (m_street2_isSet) {
        obj.insert(QString("street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_zip_or_postal_code_isSet) {
        obj.insert(QString("zipOrPostalCode"), ::OpenAPI::toJsonValue(m_zip_or_postal_code));
    }
    return obj;
}

QString OAIIAddress::getCity() const {
    return m_city;
}
void OAIIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIIAddress::getCombinedCityStateProvince() const {
    return m_combined_city_state_province;
}
void OAIIAddress::setCombinedCityStateProvince(const QString &combined_city_state_province) {
    m_combined_city_state_province = combined_city_state_province;
    m_combined_city_state_province_isSet = true;
}

bool OAIIAddress::is_combined_city_state_province_Set() const{
    return m_combined_city_state_province_isSet;
}

bool OAIIAddress::is_combined_city_state_province_Valid() const{
    return m_combined_city_state_province_isValid;
}

QString OAIIAddress::getCountry() const {
    return m_country;
}
void OAIIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIIAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIIAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIIAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIIAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIIAddress::getStateOrProvinceAbbrev() const {
    return m_state_or_province_abbrev;
}
void OAIIAddress::setStateOrProvinceAbbrev(const QString &state_or_province_abbrev) {
    m_state_or_province_abbrev = state_or_province_abbrev;
    m_state_or_province_abbrev_isSet = true;
}

bool OAIIAddress::is_state_or_province_abbrev_Set() const{
    return m_state_or_province_abbrev_isSet;
}

bool OAIIAddress::is_state_or_province_abbrev_Valid() const{
    return m_state_or_province_abbrev_isValid;
}

QString OAIIAddress::getStreet1() const {
    return m_street1;
}
void OAIIAddress::setStreet1(const QString &street1) {
    m_street1 = street1;
    m_street1_isSet = true;
}

bool OAIIAddress::is_street1_Set() const{
    return m_street1_isSet;
}

bool OAIIAddress::is_street1_Valid() const{
    return m_street1_isValid;
}

QString OAIIAddress::getStreet2() const {
    return m_street2;
}
void OAIIAddress::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAIIAddress::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAIIAddress::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAIIAddress::getZipOrPostalCode() const {
    return m_zip_or_postal_code;
}
void OAIIAddress::setZipOrPostalCode(const QString &zip_or_postal_code) {
    m_zip_or_postal_code = zip_or_postal_code;
    m_zip_or_postal_code_isSet = true;
}

bool OAIIAddress::is_zip_or_postal_code_Set() const{
    return m_zip_or_postal_code_isSet;
}

bool OAIIAddress::is_zip_or_postal_code_Valid() const{
    return m_zip_or_postal_code_isValid;
}

bool OAIIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_city_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_abbrev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_or_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
