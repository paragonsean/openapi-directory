/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIInvestmentAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIInvestmentAccount::OAIIInvestmentAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIInvestmentAccount::OAIIInvestmentAccount() {
    this->initializeModel();
}

OAIIInvestmentAccount::~OAIIInvestmentAccount() {}

void OAIIInvestmentAccount::initializeModel() {

    m_annual_fee_isSet = false;
    m_annual_fee_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exclude_in_aa_isSet = false;
    m_exclude_in_aa_isValid = false;

    m_holdings_isSet = false;
    m_holdings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_rate_of_return_isSet = false;
    m_rate_of_return_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;
}

void OAIIInvestmentAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIInvestmentAccount::fromJsonObject(QJsonObject json) {

    m_annual_fee_isValid = ::OpenAPI::fromJsonValue(m_annual_fee, json[QString("annualFee")]);
    m_annual_fee_isSet = !json[QString("annualFee")].isNull() && m_annual_fee_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("costBasis")]);
    m_cost_basis_isSet = !json[QString("costBasis")].isNull() && m_cost_basis_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_exclude_in_aa_isValid = ::OpenAPI::fromJsonValue(m_exclude_in_aa, json[QString("excludeInAA")]);
    m_exclude_in_aa_isSet = !json[QString("excludeInAA")].isNull() && m_exclude_in_aa_isValid;

    m_holdings_isValid = ::OpenAPI::fromJsonValue(m_holdings, json[QString("holdings")]);
    m_holdings_isSet = !json[QString("holdings")].isNull() && m_holdings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_rate_of_return_isValid = ::OpenAPI::fromJsonValue(m_rate_of_return, json[QString("rateOfReturn")]);
    m_rate_of_return_isSet = !json[QString("rateOfReturn")].isNull() && m_rate_of_return_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("valuationDate")]);
    m_valuation_date_isSet = !json[QString("valuationDate")].isNull() && m_valuation_date_isValid;
}

QString OAIIInvestmentAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIInvestmentAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_fee.isSet()) {
        obj.insert(QString("annualFee"), ::OpenAPI::toJsonValue(m_annual_fee));
    }
    if (m_cost_basis.isSet()) {
        obj.insert(QString("costBasis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exclude_in_aa_isSet) {
        obj.insert(QString("excludeInAA"), ::OpenAPI::toJsonValue(m_exclude_in_aa));
    }
    if (m_holdings.size() > 0) {
        obj.insert(QString("holdings"), ::OpenAPI::toJsonValue(m_holdings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_market_value.isSet()) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_rate_of_return.isSet()) {
        obj.insert(QString("rateOfReturn"), ::OpenAPI::toJsonValue(m_rate_of_return));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valuation_date.isSet()) {
        obj.insert(QString("valuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    return obj;
}

OAIPercent OAIIInvestmentAccount::getAnnualFee() const {
    return m_annual_fee;
}
void OAIIInvestmentAccount::setAnnualFee(const OAIPercent &annual_fee) {
    m_annual_fee = annual_fee;
    m_annual_fee_isSet = true;
}

bool OAIIInvestmentAccount::is_annual_fee_Set() const{
    return m_annual_fee_isSet;
}

bool OAIIInvestmentAccount::is_annual_fee_Valid() const{
    return m_annual_fee_isValid;
}

OAICurrency OAIIInvestmentAccount::getCostBasis() const {
    return m_cost_basis;
}
void OAIIInvestmentAccount::setCostBasis(const OAICurrency &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIIInvestmentAccount::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIIInvestmentAccount::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

QString OAIIInvestmentAccount::getDescription() const {
    return m_description;
}
void OAIIInvestmentAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIInvestmentAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIInvestmentAccount::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIIInvestmentAccount::isExcludeInAa() const {
    return m_exclude_in_aa;
}
void OAIIInvestmentAccount::setExcludeInAa(const bool &exclude_in_aa) {
    m_exclude_in_aa = exclude_in_aa;
    m_exclude_in_aa_isSet = true;
}

bool OAIIInvestmentAccount::is_exclude_in_aa_Set() const{
    return m_exclude_in_aa_isSet;
}

bool OAIIInvestmentAccount::is_exclude_in_aa_Valid() const{
    return m_exclude_in_aa_isValid;
}

QList<OAIIHolding> OAIIInvestmentAccount::getHoldings() const {
    return m_holdings;
}
void OAIIInvestmentAccount::setHoldings(const QList<OAIIHolding> &holdings) {
    m_holdings = holdings;
    m_holdings_isSet = true;
}

bool OAIIInvestmentAccount::is_holdings_Set() const{
    return m_holdings_isSet;
}

bool OAIIInvestmentAccount::is_holdings_Valid() const{
    return m_holdings_isValid;
}

QString OAIIInvestmentAccount::getId() const {
    return m_id;
}
void OAIIInvestmentAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIInvestmentAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIInvestmentAccount::is_id_Valid() const{
    return m_id_isValid;
}

OAICurrency OAIIInvestmentAccount::getMarketValue() const {
    return m_market_value;
}
void OAIIInvestmentAccount::setMarketValue(const OAICurrency &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIIInvestmentAccount::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIIInvestmentAccount::is_market_value_Valid() const{
    return m_market_value_isValid;
}

OAIIRateOfReturnDetails OAIIInvestmentAccount::getRateOfReturn() const {
    return m_rate_of_return;
}
void OAIIInvestmentAccount::setRateOfReturn(const OAIIRateOfReturnDetails &rate_of_return) {
    m_rate_of_return = rate_of_return;
    m_rate_of_return_isSet = true;
}

bool OAIIInvestmentAccount::is_rate_of_return_Set() const{
    return m_rate_of_return_isSet;
}

bool OAIIInvestmentAccount::is_rate_of_return_Valid() const{
    return m_rate_of_return_isValid;
}

QString OAIIInvestmentAccount::getType() const {
    return m_type;
}
void OAIIInvestmentAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIInvestmentAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIInvestmentAccount::is_type_Valid() const{
    return m_type_isValid;
}

OAIDate OAIIInvestmentAccount::getValuationDate() const {
    return m_valuation_date;
}
void OAIIInvestmentAccount::setValuationDate(const OAIDate &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIIInvestmentAccount::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIIInvestmentAccount::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

bool OAIIInvestmentAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_in_aa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_of_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIInvestmentAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
