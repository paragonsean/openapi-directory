/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments() {
    this->initializeModel();
}

OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::~OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments() {}

void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::initializeModel() {

    m_client_retirement_age_isSet = false;
    m_client_retirement_age_isValid = false;

    m_co_client_retirement_age_isSet = false;
    m_co_client_retirement_age_isValid = false;

    m_discretionary_expense_coverage_isSet = false;
    m_discretionary_expense_coverage_isValid = false;

    m_fixed_expense_coverage_isSet = false;
    m_fixed_expense_coverage_isValid = false;

    m_lump_sum_contribution_isSet = false;
    m_lump_sum_contribution_isValid = false;

    m_lump_sum_date_isSet = false;
    m_lump_sum_date_isValid = false;

    m_monthly_savings_contribution_isSet = false;
    m_monthly_savings_contribution_isValid = false;
}

void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::fromJsonObject(QJsonObject json) {

    m_client_retirement_age_isValid = ::OpenAPI::fromJsonValue(m_client_retirement_age, json[QString("clientRetirementAge")]);
    m_client_retirement_age_isSet = !json[QString("clientRetirementAge")].isNull() && m_client_retirement_age_isValid;

    m_co_client_retirement_age_isValid = ::OpenAPI::fromJsonValue(m_co_client_retirement_age, json[QString("coClientRetirementAge")]);
    m_co_client_retirement_age_isSet = !json[QString("coClientRetirementAge")].isNull() && m_co_client_retirement_age_isValid;

    m_discretionary_expense_coverage_isValid = ::OpenAPI::fromJsonValue(m_discretionary_expense_coverage, json[QString("discretionaryExpenseCoverage")]);
    m_discretionary_expense_coverage_isSet = !json[QString("discretionaryExpenseCoverage")].isNull() && m_discretionary_expense_coverage_isValid;

    m_fixed_expense_coverage_isValid = ::OpenAPI::fromJsonValue(m_fixed_expense_coverage, json[QString("fixedExpenseCoverage")]);
    m_fixed_expense_coverage_isSet = !json[QString("fixedExpenseCoverage")].isNull() && m_fixed_expense_coverage_isValid;

    m_lump_sum_contribution_isValid = ::OpenAPI::fromJsonValue(m_lump_sum_contribution, json[QString("lumpSumContribution")]);
    m_lump_sum_contribution_isSet = !json[QString("lumpSumContribution")].isNull() && m_lump_sum_contribution_isValid;

    m_lump_sum_date_isValid = ::OpenAPI::fromJsonValue(m_lump_sum_date, json[QString("lumpSumDate")]);
    m_lump_sum_date_isSet = !json[QString("lumpSumDate")].isNull() && m_lump_sum_date_isValid;

    m_monthly_savings_contribution_isValid = ::OpenAPI::fromJsonValue(m_monthly_savings_contribution, json[QString("monthlySavingsContribution")]);
    m_monthly_savings_contribution_isSet = !json[QString("monthlySavingsContribution")].isNull() && m_monthly_savings_contribution_isValid;
}

QString OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::asJsonObject() const {
    QJsonObject obj;
    if (m_client_retirement_age_isSet) {
        obj.insert(QString("clientRetirementAge"), ::OpenAPI::toJsonValue(m_client_retirement_age));
    }
    if (m_co_client_retirement_age_isSet) {
        obj.insert(QString("coClientRetirementAge"), ::OpenAPI::toJsonValue(m_co_client_retirement_age));
    }
    if (m_discretionary_expense_coverage_isSet) {
        obj.insert(QString("discretionaryExpenseCoverage"), ::OpenAPI::toJsonValue(m_discretionary_expense_coverage));
    }
    if (m_fixed_expense_coverage_isSet) {
        obj.insert(QString("fixedExpenseCoverage"), ::OpenAPI::toJsonValue(m_fixed_expense_coverage));
    }
    if (m_lump_sum_contribution_isSet) {
        obj.insert(QString("lumpSumContribution"), ::OpenAPI::toJsonValue(m_lump_sum_contribution));
    }
    if (m_lump_sum_date_isSet) {
        obj.insert(QString("lumpSumDate"), ::OpenAPI::toJsonValue(m_lump_sum_date));
    }
    if (m_monthly_savings_contribution_isSet) {
        obj.insert(QString("monthlySavingsContribution"), ::OpenAPI::toJsonValue(m_monthly_savings_contribution));
    }
    return obj;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getClientRetirementAge() const {
    return m_client_retirement_age;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setClientRetirementAge(const double &client_retirement_age) {
    m_client_retirement_age = client_retirement_age;
    m_client_retirement_age_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_client_retirement_age_Set() const{
    return m_client_retirement_age_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_client_retirement_age_Valid() const{
    return m_client_retirement_age_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getCoClientRetirementAge() const {
    return m_co_client_retirement_age;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setCoClientRetirementAge(const double &co_client_retirement_age) {
    m_co_client_retirement_age = co_client_retirement_age;
    m_co_client_retirement_age_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_co_client_retirement_age_Set() const{
    return m_co_client_retirement_age_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_co_client_retirement_age_Valid() const{
    return m_co_client_retirement_age_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getDiscretionaryExpenseCoverage() const {
    return m_discretionary_expense_coverage;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setDiscretionaryExpenseCoverage(const double &discretionary_expense_coverage) {
    m_discretionary_expense_coverage = discretionary_expense_coverage;
    m_discretionary_expense_coverage_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_discretionary_expense_coverage_Set() const{
    return m_discretionary_expense_coverage_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_discretionary_expense_coverage_Valid() const{
    return m_discretionary_expense_coverage_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getFixedExpenseCoverage() const {
    return m_fixed_expense_coverage;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setFixedExpenseCoverage(const double &fixed_expense_coverage) {
    m_fixed_expense_coverage = fixed_expense_coverage;
    m_fixed_expense_coverage_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_fixed_expense_coverage_Set() const{
    return m_fixed_expense_coverage_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_fixed_expense_coverage_Valid() const{
    return m_fixed_expense_coverage_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getLumpSumContribution() const {
    return m_lump_sum_contribution;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setLumpSumContribution(const double &lump_sum_contribution) {
    m_lump_sum_contribution = lump_sum_contribution;
    m_lump_sum_contribution_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_lump_sum_contribution_Set() const{
    return m_lump_sum_contribution_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_lump_sum_contribution_Valid() const{
    return m_lump_sum_contribution_isValid;
}

QDateTime OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getLumpSumDate() const {
    return m_lump_sum_date;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setLumpSumDate(const QDateTime &lump_sum_date) {
    m_lump_sum_date = lump_sum_date;
    m_lump_sum_date_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_lump_sum_date_Set() const{
    return m_lump_sum_date_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_lump_sum_date_Valid() const{
    return m_lump_sum_date_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::getMonthlySavingsContribution() const {
    return m_monthly_savings_contribution;
}
void OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::setMonthlySavingsContribution(const double &monthly_savings_contribution) {
    m_monthly_savings_contribution = monthly_savings_contribution;
    m_monthly_savings_contribution_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_monthly_savings_contribution_Set() const{
    return m_monthly_savings_contribution_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::is_monthly_savings_contribution_Valid() const{
    return m_monthly_savings_contribution_isValid;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_retirement_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_retirement_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discretionary_expense_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_expense_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lump_sum_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lump_sum_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_savings_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
