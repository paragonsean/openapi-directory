/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPeriodicSavingsStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPeriodicSavingsStrategy::OAIIPeriodicSavingsStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPeriodicSavingsStrategy::OAIIPeriodicSavingsStrategy() {
    this->initializeModel();
}

OAIIPeriodicSavingsStrategy::~OAIIPeriodicSavingsStrategy() {}

void OAIIPeriodicSavingsStrategy::initializeModel() {

    m_amount_or_percent_of_salary_isSet = false;
    m_amount_or_percent_of_salary_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_formatted_frequency_abbrv_isSet = false;
    m_formatted_frequency_abbrv_isValid = false;

    m_formatted_savings_type_with_dash_isSet = false;
    m_formatted_savings_type_with_dash_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;

    m_is_max_contribution_isSet = false;
    m_is_max_contribution_isValid = false;

    m_savings_frequency_isSet = false;
    m_savings_frequency_isValid = false;

    m_savings_type_isSet = false;
    m_savings_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIPeriodicSavingsStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPeriodicSavingsStrategy::fromJsonObject(QJsonObject json) {

    m_amount_or_percent_of_salary_isValid = ::OpenAPI::fromJsonValue(m_amount_or_percent_of_salary, json[QString("amountOrPercentOfSalary")]);
    m_amount_or_percent_of_salary_isSet = !json[QString("amountOrPercentOfSalary")].isNull() && m_amount_or_percent_of_salary_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_formatted_frequency_abbrv_isValid = ::OpenAPI::fromJsonValue(m_formatted_frequency_abbrv, json[QString("formattedFrequencyAbbrv")]);
    m_formatted_frequency_abbrv_isSet = !json[QString("formattedFrequencyAbbrv")].isNull() && m_formatted_frequency_abbrv_isValid;

    m_formatted_savings_type_with_dash_isValid = ::OpenAPI::fromJsonValue(m_formatted_savings_type_with_dash, json[QString("formattedSavingsTypeWithDash")]);
    m_formatted_savings_type_with_dash_isSet = !json[QString("formattedSavingsTypeWithDash")].isNull() && m_formatted_savings_type_with_dash_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;

    m_is_max_contribution_isValid = ::OpenAPI::fromJsonValue(m_is_max_contribution, json[QString("isMaxContribution")]);
    m_is_max_contribution_isSet = !json[QString("isMaxContribution")].isNull() && m_is_max_contribution_isValid;

    m_savings_frequency_isValid = ::OpenAPI::fromJsonValue(m_savings_frequency, json[QString("savingsFrequency")]);
    m_savings_frequency_isSet = !json[QString("savingsFrequency")].isNull() && m_savings_frequency_isValid;

    m_savings_type_isValid = ::OpenAPI::fromJsonValue(m_savings_type, json[QString("savingsType")]);
    m_savings_type_isSet = !json[QString("savingsType")].isNull() && m_savings_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIPeriodicSavingsStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPeriodicSavingsStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_or_percent_of_salary.isSet()) {
        obj.insert(QString("amountOrPercentOfSalary"), ::OpenAPI::toJsonValue(m_amount_or_percent_of_salary));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_formatted_frequency_abbrv_isSet) {
        obj.insert(QString("formattedFrequencyAbbrv"), ::OpenAPI::toJsonValue(m_formatted_frequency_abbrv));
    }
    if (m_formatted_savings_type_with_dash_isSet) {
        obj.insert(QString("formattedSavingsTypeWithDash"), ::OpenAPI::toJsonValue(m_formatted_savings_type_with_dash));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    if (m_is_max_contribution_isSet) {
        obj.insert(QString("isMaxContribution"), ::OpenAPI::toJsonValue(m_is_max_contribution));
    }
    if (m_savings_frequency.isSet()) {
        obj.insert(QString("savingsFrequency"), ::OpenAPI::toJsonValue(m_savings_frequency));
    }
    if (m_savings_type.isSet()) {
        obj.insert(QString("savingsType"), ::OpenAPI::toJsonValue(m_savings_type));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAIPercentOr_Currency OAIIPeriodicSavingsStrategy::getAmountOrPercentOfSalary() const {
    return m_amount_or_percent_of_salary;
}
void OAIIPeriodicSavingsStrategy::setAmountOrPercentOfSalary(const OAIPercentOr_Currency &amount_or_percent_of_salary) {
    m_amount_or_percent_of_salary = amount_or_percent_of_salary;
    m_amount_or_percent_of_salary_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_amount_or_percent_of_salary_Set() const{
    return m_amount_or_percent_of_salary_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_amount_or_percent_of_salary_Valid() const{
    return m_amount_or_percent_of_salary_isValid;
}

OAIDate OAIIPeriodicSavingsStrategy::getEndDate() const {
    return m_end_date;
}
void OAIIPeriodicSavingsStrategy::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIIPeriodicSavingsStrategy::getFormattedFrequencyAbbrv() const {
    return m_formatted_frequency_abbrv;
}
void OAIIPeriodicSavingsStrategy::setFormattedFrequencyAbbrv(const QString &formatted_frequency_abbrv) {
    m_formatted_frequency_abbrv = formatted_frequency_abbrv;
    m_formatted_frequency_abbrv_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_formatted_frequency_abbrv_Set() const{
    return m_formatted_frequency_abbrv_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_formatted_frequency_abbrv_Valid() const{
    return m_formatted_frequency_abbrv_isValid;
}

QString OAIIPeriodicSavingsStrategy::getFormattedSavingsTypeWithDash() const {
    return m_formatted_savings_type_with_dash;
}
void OAIIPeriodicSavingsStrategy::setFormattedSavingsTypeWithDash(const QString &formatted_savings_type_with_dash) {
    m_formatted_savings_type_with_dash = formatted_savings_type_with_dash;
    m_formatted_savings_type_with_dash_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_formatted_savings_type_with_dash_Set() const{
    return m_formatted_savings_type_with_dash_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_formatted_savings_type_with_dash_Valid() const{
    return m_formatted_savings_type_with_dash_isValid;
}

OAIGrowthRateValues OAIIPeriodicSavingsStrategy::getIndexRate() const {
    return m_index_rate;
}
void OAIIPeriodicSavingsStrategy::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

bool OAIIPeriodicSavingsStrategy::isIsMaxContribution() const {
    return m_is_max_contribution;
}
void OAIIPeriodicSavingsStrategy::setIsMaxContribution(const bool &is_max_contribution) {
    m_is_max_contribution = is_max_contribution;
    m_is_max_contribution_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_is_max_contribution_Set() const{
    return m_is_max_contribution_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_is_max_contribution_Valid() const{
    return m_is_max_contribution_isValid;
}

OAIFormattedEnumType_Frequency OAIIPeriodicSavingsStrategy::getSavingsFrequency() const {
    return m_savings_frequency;
}
void OAIIPeriodicSavingsStrategy::setSavingsFrequency(const OAIFormattedEnumType_Frequency &savings_frequency) {
    m_savings_frequency = savings_frequency;
    m_savings_frequency_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_savings_frequency_Set() const{
    return m_savings_frequency_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_savings_frequency_Valid() const{
    return m_savings_frequency_isValid;
}

OAIFormattedEnumType_SavingsStrategyType OAIIPeriodicSavingsStrategy::getSavingsType() const {
    return m_savings_type;
}
void OAIIPeriodicSavingsStrategy::setSavingsType(const OAIFormattedEnumType_SavingsStrategyType &savings_type) {
    m_savings_type = savings_type;
    m_savings_type_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_savings_type_Set() const{
    return m_savings_type_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_savings_type_Valid() const{
    return m_savings_type_isValid;
}

OAIDate OAIIPeriodicSavingsStrategy::getStartDate() const {
    return m_start_date;
}
void OAIIPeriodicSavingsStrategy::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIPeriodicSavingsStrategy::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIPeriodicSavingsStrategy::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIPeriodicSavingsStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_or_percent_of_salary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_frequency_abbrv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_savings_type_with_dash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_max_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPeriodicSavingsStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
