/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectedGoalsSummary_AssetsFundingGoalSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectedGoalsSummary_AssetsFundingGoalSummary::OAIProjectedGoalsSummary_AssetsFundingGoalSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectedGoalsSummary_AssetsFundingGoalSummary::OAIProjectedGoalsSummary_AssetsFundingGoalSummary() {
    this->initializeModel();
}

OAIProjectedGoalsSummary_AssetsFundingGoalSummary::~OAIProjectedGoalsSummary_AssetsFundingGoalSummary() {}

void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::initializeModel() {

    m_client_age_isSet = false;
    m_client_age_isValid = false;

    m_co_client_age_isSet = false;
    m_co_client_age_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::fromJsonObject(QJsonObject json) {

    m_client_age_isValid = ::OpenAPI::fromJsonValue(m_client_age, json[QString("clientAge")]);
    m_client_age_isSet = !json[QString("clientAge")].isNull() && m_client_age_isValid;

    m_co_client_age_isValid = ::OpenAPI::fromJsonValue(m_co_client_age, json[QString("coClientAge")]);
    m_co_client_age_isSet = !json[QString("coClientAge")].isNull() && m_co_client_age_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("goals")]);
    m_goals_isSet = !json[QString("goals")].isNull() && m_goals_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIProjectedGoalsSummary_AssetsFundingGoalSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectedGoalsSummary_AssetsFundingGoalSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_client_age_isSet) {
        obj.insert(QString("clientAge"), ::OpenAPI::toJsonValue(m_client_age));
    }
    if (m_co_client_age_isSet) {
        obj.insert(QString("coClientAge"), ::OpenAPI::toJsonValue(m_co_client_age));
    }
    if (m_goals.size() > 0) {
        obj.insert(QString("goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIProjectedGoalsSummary_AssetsFundingGoalSummary::getClientAge() const {
    return m_client_age;
}
void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::setClientAge(const qint32 &client_age) {
    m_client_age = client_age;
    m_client_age_isSet = true;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_client_age_Set() const{
    return m_client_age_isSet;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_client_age_Valid() const{
    return m_client_age_isValid;
}

qint32 OAIProjectedGoalsSummary_AssetsFundingGoalSummary::getCoClientAge() const {
    return m_co_client_age;
}
void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::setCoClientAge(const qint32 &co_client_age) {
    m_co_client_age = co_client_age;
    m_co_client_age_isSet = true;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_co_client_age_Set() const{
    return m_co_client_age_isSet;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_co_client_age_Valid() const{
    return m_co_client_age_isValid;
}

QList<OAIAssetsFundingGoalSummary> OAIProjectedGoalsSummary_AssetsFundingGoalSummary::getGoals() const {
    return m_goals;
}
void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::setGoals(const QList<OAIAssetsFundingGoalSummary> &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_goals_Valid() const{
    return m_goals_isValid;
}

qint32 OAIProjectedGoalsSummary_AssetsFundingGoalSummary::getYear() const {
    return m_year;
}
void OAIProjectedGoalsSummary_AssetsFundingGoalSummary::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_year_Set() const{
    return m_year_isSet;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectedGoalsSummary_AssetsFundingGoalSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
