/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalNeedsVsAbilitiesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalNeedsVsAbilitiesSummary::OAIGoalNeedsVsAbilitiesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalNeedsVsAbilitiesSummary::OAIGoalNeedsVsAbilitiesSummary() {
    this->initializeModel();
}

OAIGoalNeedsVsAbilitiesSummary::~OAIGoalNeedsVsAbilitiesSummary() {}

void OAIGoalNeedsVsAbilitiesSummary::initializeModel() {

    m_abilities_isSet = false;
    m_abilities_isValid = false;

    m_fixed_needs_isSet = false;
    m_fixed_needs_isValid = false;

    m_fixed_needs_with_taxes_isSet = false;
    m_fixed_needs_with_taxes_isValid = false;

    m_goal_type_isSet = false;
    m_goal_type_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_total_needs_isSet = false;
    m_total_needs_isValid = false;

    m_total_needs_with_taxes_isSet = false;
    m_total_needs_with_taxes_isValid = false;
}

void OAIGoalNeedsVsAbilitiesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalNeedsVsAbilitiesSummary::fromJsonObject(QJsonObject json) {

    m_abilities_isValid = ::OpenAPI::fromJsonValue(m_abilities, json[QString("abilities")]);
    m_abilities_isSet = !json[QString("abilities")].isNull() && m_abilities_isValid;

    m_fixed_needs_isValid = ::OpenAPI::fromJsonValue(m_fixed_needs, json[QString("fixedNeeds")]);
    m_fixed_needs_isSet = !json[QString("fixedNeeds")].isNull() && m_fixed_needs_isValid;

    m_fixed_needs_with_taxes_isValid = ::OpenAPI::fromJsonValue(m_fixed_needs_with_taxes, json[QString("fixedNeedsWithTaxes")]);
    m_fixed_needs_with_taxes_isSet = !json[QString("fixedNeedsWithTaxes")].isNull() && m_fixed_needs_with_taxes_isValid;

    m_goal_type_isValid = ::OpenAPI::fromJsonValue(m_goal_type, json[QString("goalType")]);
    m_goal_type_isSet = !json[QString("goalType")].isNull() && m_goal_type_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_total_needs_isValid = ::OpenAPI::fromJsonValue(m_total_needs, json[QString("totalNeeds")]);
    m_total_needs_isSet = !json[QString("totalNeeds")].isNull() && m_total_needs_isValid;

    m_total_needs_with_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_needs_with_taxes, json[QString("totalNeedsWithTaxes")]);
    m_total_needs_with_taxes_isSet = !json[QString("totalNeedsWithTaxes")].isNull() && m_total_needs_with_taxes_isValid;
}

QString OAIGoalNeedsVsAbilitiesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalNeedsVsAbilitiesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_abilities_isSet) {
        obj.insert(QString("abilities"), ::OpenAPI::toJsonValue(m_abilities));
    }
    if (m_fixed_needs_isSet) {
        obj.insert(QString("fixedNeeds"), ::OpenAPI::toJsonValue(m_fixed_needs));
    }
    if (m_fixed_needs_with_taxes_isSet) {
        obj.insert(QString("fixedNeedsWithTaxes"), ::OpenAPI::toJsonValue(m_fixed_needs_with_taxes));
    }
    if (m_goal_type_isSet) {
        obj.insert(QString("goalType"), ::OpenAPI::toJsonValue(m_goal_type));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_total_needs_isSet) {
        obj.insert(QString("totalNeeds"), ::OpenAPI::toJsonValue(m_total_needs));
    }
    if (m_total_needs_with_taxes_isSet) {
        obj.insert(QString("totalNeedsWithTaxes"), ::OpenAPI::toJsonValue(m_total_needs_with_taxes));
    }
    return obj;
}

double OAIGoalNeedsVsAbilitiesSummary::getAbilities() const {
    return m_abilities;
}
void OAIGoalNeedsVsAbilitiesSummary::setAbilities(const double &abilities) {
    m_abilities = abilities;
    m_abilities_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_abilities_Set() const{
    return m_abilities_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_abilities_Valid() const{
    return m_abilities_isValid;
}

double OAIGoalNeedsVsAbilitiesSummary::getFixedNeeds() const {
    return m_fixed_needs;
}
void OAIGoalNeedsVsAbilitiesSummary::setFixedNeeds(const double &fixed_needs) {
    m_fixed_needs = fixed_needs;
    m_fixed_needs_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_fixed_needs_Set() const{
    return m_fixed_needs_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_fixed_needs_Valid() const{
    return m_fixed_needs_isValid;
}

double OAIGoalNeedsVsAbilitiesSummary::getFixedNeedsWithTaxes() const {
    return m_fixed_needs_with_taxes;
}
void OAIGoalNeedsVsAbilitiesSummary::setFixedNeedsWithTaxes(const double &fixed_needs_with_taxes) {
    m_fixed_needs_with_taxes = fixed_needs_with_taxes;
    m_fixed_needs_with_taxes_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_fixed_needs_with_taxes_Set() const{
    return m_fixed_needs_with_taxes_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_fixed_needs_with_taxes_Valid() const{
    return m_fixed_needs_with_taxes_isValid;
}

QString OAIGoalNeedsVsAbilitiesSummary::getGoalType() const {
    return m_goal_type;
}
void OAIGoalNeedsVsAbilitiesSummary::setGoalType(const QString &goal_type) {
    m_goal_type = goal_type;
    m_goal_type_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_goal_type_Set() const{
    return m_goal_type_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_goal_type_Valid() const{
    return m_goal_type_isValid;
}

qint32 OAIGoalNeedsVsAbilitiesSummary::getIdentifier() const {
    return m_identifier;
}
void OAIGoalNeedsVsAbilitiesSummary::setIdentifier(const qint32 &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_identifier_Valid() const{
    return m_identifier_isValid;
}

double OAIGoalNeedsVsAbilitiesSummary::getTotalNeeds() const {
    return m_total_needs;
}
void OAIGoalNeedsVsAbilitiesSummary::setTotalNeeds(const double &total_needs) {
    m_total_needs = total_needs;
    m_total_needs_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_total_needs_Set() const{
    return m_total_needs_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_total_needs_Valid() const{
    return m_total_needs_isValid;
}

double OAIGoalNeedsVsAbilitiesSummary::getTotalNeedsWithTaxes() const {
    return m_total_needs_with_taxes;
}
void OAIGoalNeedsVsAbilitiesSummary::setTotalNeedsWithTaxes(const double &total_needs_with_taxes) {
    m_total_needs_with_taxes = total_needs_with_taxes;
    m_total_needs_with_taxes_isSet = true;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_total_needs_with_taxes_Set() const{
    return m_total_needs_with_taxes_isSet;
}

bool OAIGoalNeedsVsAbilitiesSummary::is_total_needs_with_taxes_Valid() const{
    return m_total_needs_with_taxes_isValid;
}

bool OAIGoalNeedsVsAbilitiesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_needs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_needs_with_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_needs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_needs_with_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalNeedsVsAbilitiesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
