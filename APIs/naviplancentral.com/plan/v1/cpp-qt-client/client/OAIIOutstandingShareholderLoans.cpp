/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIOutstandingShareholderLoans.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIOutstandingShareholderLoans::OAIIOutstandingShareholderLoans(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIOutstandingShareholderLoans::OAIIOutstandingShareholderLoans() {
    this->initializeModel();
}

OAIIOutstandingShareholderLoans::~OAIIOutstandingShareholderLoans() {}

void OAIIOutstandingShareholderLoans::initializeModel() {

    m_client_amount_isSet = false;
    m_client_amount_isValid = false;

    m_co_client_amount_isSet = false;
    m_co_client_amount_isValid = false;

    m_other_amount_isSet = false;
    m_other_amount_isValid = false;
}

void OAIIOutstandingShareholderLoans::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIOutstandingShareholderLoans::fromJsonObject(QJsonObject json) {

    m_client_amount_isValid = ::OpenAPI::fromJsonValue(m_client_amount, json[QString("clientAmount")]);
    m_client_amount_isSet = !json[QString("clientAmount")].isNull() && m_client_amount_isValid;

    m_co_client_amount_isValid = ::OpenAPI::fromJsonValue(m_co_client_amount, json[QString("coClientAmount")]);
    m_co_client_amount_isSet = !json[QString("coClientAmount")].isNull() && m_co_client_amount_isValid;

    m_other_amount_isValid = ::OpenAPI::fromJsonValue(m_other_amount, json[QString("otherAmount")]);
    m_other_amount_isSet = !json[QString("otherAmount")].isNull() && m_other_amount_isValid;
}

QString OAIIOutstandingShareholderLoans::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIOutstandingShareholderLoans::asJsonObject() const {
    QJsonObject obj;
    if (m_client_amount.isSet()) {
        obj.insert(QString("clientAmount"), ::OpenAPI::toJsonValue(m_client_amount));
    }
    if (m_co_client_amount.isSet()) {
        obj.insert(QString("coClientAmount"), ::OpenAPI::toJsonValue(m_co_client_amount));
    }
    if (m_other_amount.isSet()) {
        obj.insert(QString("otherAmount"), ::OpenAPI::toJsonValue(m_other_amount));
    }
    return obj;
}

OAICurrency OAIIOutstandingShareholderLoans::getClientAmount() const {
    return m_client_amount;
}
void OAIIOutstandingShareholderLoans::setClientAmount(const OAICurrency &client_amount) {
    m_client_amount = client_amount;
    m_client_amount_isSet = true;
}

bool OAIIOutstandingShareholderLoans::is_client_amount_Set() const{
    return m_client_amount_isSet;
}

bool OAIIOutstandingShareholderLoans::is_client_amount_Valid() const{
    return m_client_amount_isValid;
}

OAICurrency OAIIOutstandingShareholderLoans::getCoClientAmount() const {
    return m_co_client_amount;
}
void OAIIOutstandingShareholderLoans::setCoClientAmount(const OAICurrency &co_client_amount) {
    m_co_client_amount = co_client_amount;
    m_co_client_amount_isSet = true;
}

bool OAIIOutstandingShareholderLoans::is_co_client_amount_Set() const{
    return m_co_client_amount_isSet;
}

bool OAIIOutstandingShareholderLoans::is_co_client_amount_Valid() const{
    return m_co_client_amount_isValid;
}

OAICurrency OAIIOutstandingShareholderLoans::getOtherAmount() const {
    return m_other_amount;
}
void OAIIOutstandingShareholderLoans::setOtherAmount(const OAICurrency &other_amount) {
    m_other_amount = other_amount;
    m_other_amount_isSet = true;
}

bool OAIIOutstandingShareholderLoans::is_other_amount_Set() const{
    return m_other_amount_isSet;
}

bool OAIIOutstandingShareholderLoans::is_other_amount_Valid() const{
    return m_other_amount_isValid;
}

bool OAIIOutstandingShareholderLoans::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIOutstandingShareholderLoans::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
