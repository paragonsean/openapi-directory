/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::~OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel() {}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::initializeModel() {

    m_end_of_year_retirement_assets_isSet = false;
    m_end_of_year_retirement_assets_isValid = false;

    m_end_of_year_total_assets_isSet = false;
    m_end_of_year_total_assets_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::fromJsonObject(QJsonObject json) {

    m_end_of_year_retirement_assets_isValid = ::OpenAPI::fromJsonValue(m_end_of_year_retirement_assets, json[QString("endOfYearRetirementAssets")]);
    m_end_of_year_retirement_assets_isSet = !json[QString("endOfYearRetirementAssets")].isNull() && m_end_of_year_retirement_assets_isValid;

    m_end_of_year_total_assets_isValid = ::OpenAPI::fromJsonValue(m_end_of_year_total_assets, json[QString("endOfYearTotalAssets")]);
    m_end_of_year_total_assets_isSet = !json[QString("endOfYearTotalAssets")].isNull() && m_end_of_year_total_assets_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::asJsonObject() const {
    QJsonObject obj;
    if (m_end_of_year_retirement_assets_isSet) {
        obj.insert(QString("endOfYearRetirementAssets"), ::OpenAPI::toJsonValue(m_end_of_year_retirement_assets));
    }
    if (m_end_of_year_total_assets_isSet) {
        obj.insert(QString("endOfYearTotalAssets"), ::OpenAPI::toJsonValue(m_end_of_year_total_assets));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

double OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::getEndOfYearRetirementAssets() const {
    return m_end_of_year_retirement_assets;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::setEndOfYearRetirementAssets(const double &end_of_year_retirement_assets) {
    m_end_of_year_retirement_assets = end_of_year_retirement_assets;
    m_end_of_year_retirement_assets_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_end_of_year_retirement_assets_Set() const{
    return m_end_of_year_retirement_assets_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_end_of_year_retirement_assets_Valid() const{
    return m_end_of_year_retirement_assets_isValid;
}

double OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::getEndOfYearTotalAssets() const {
    return m_end_of_year_total_assets;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::setEndOfYearTotalAssets(const double &end_of_year_total_assets) {
    m_end_of_year_total_assets = end_of_year_total_assets;
    m_end_of_year_total_assets_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_end_of_year_total_assets_Set() const{
    return m_end_of_year_total_assets_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_end_of_year_total_assets_Valid() const{
    return m_end_of_year_total_assets_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::getYear() const {
    return m_year;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_year_Set() const{
    return m_year_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_of_year_retirement_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_year_total_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
