/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICashFlowOutflows.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICashFlowOutflows::OAIICashFlowOutflows(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICashFlowOutflows::OAIICashFlowOutflows() {
    this->initializeModel();
}

OAIICashFlowOutflows::~OAIICashFlowOutflows() {}

void OAIICashFlowOutflows::initializeModel() {

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_education_expenses_isSet = false;
    m_education_expenses_isValid = false;

    m_employer_expenses_isSet = false;
    m_employer_expenses_isValid = false;

    m_employment_business_expenses_isSet = false;
    m_employment_business_expenses_isValid = false;

    m_investment_expenses_isSet = false;
    m_investment_expenses_isValid = false;

    m_lifestyle_expenses_isSet = false;
    m_lifestyle_expenses_isValid = false;

    m_lifestyle_expenses_discretionary_isSet = false;
    m_lifestyle_expenses_discretionary_isValid = false;

    m_lifestyle_expenses_fixed_isSet = false;
    m_lifestyle_expenses_fixed_isValid = false;

    m_locked_in_contributions_isSet = false;
    m_locked_in_contributions_isValid = false;

    m_medical_expenses_isSet = false;
    m_medical_expenses_isValid = false;

    m_miscellaneous_expenses_isSet = false;
    m_miscellaneous_expenses_isValid = false;

    m_miscellaneous_expenses_discretionary_isSet = false;
    m_miscellaneous_expenses_discretionary_isValid = false;

    m_miscellaneous_expenses_fixed_isSet = false;
    m_miscellaneous_expenses_fixed_isValid = false;

    m_non_qualified_contributions_isSet = false;
    m_non_qualified_contributions_isValid = false;

    m_non_qualified_reinvestments_isSet = false;
    m_non_qualified_reinvestments_isValid = false;

    m_private_corporation_outflows_isSet = false;
    m_private_corporation_outflows_isValid = false;

    m_qualified_contributions_isSet = false;
    m_qualified_contributions_isValid = false;

    m_roth_contributions_isSet = false;
    m_roth_contributions_isValid = false;

    m_surplus_outflows_isSet = false;
    m_surplus_outflows_isValid = false;

    m_surplus_savings_isSet = false;
    m_surplus_savings_isValid = false;

    m_tfsa_contributions_isSet = false;
    m_tfsa_contributions_isValid = false;

    m_total_needs_isSet = false;
    m_total_needs_isValid = false;

    m_total_with_taxes_isSet = false;
    m_total_with_taxes_isValid = false;

    m_total_without_taxes_isSet = false;
    m_total_without_taxes_isValid = false;
}

void OAIICashFlowOutflows::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIICashFlowOutflows::fromJsonObject(QJsonObject json) {

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_education_expenses_isValid = ::OpenAPI::fromJsonValue(m_education_expenses, json[QString("educationExpenses")]);
    m_education_expenses_isSet = !json[QString("educationExpenses")].isNull() && m_education_expenses_isValid;

    m_employer_expenses_isValid = ::OpenAPI::fromJsonValue(m_employer_expenses, json[QString("employerExpenses")]);
    m_employer_expenses_isSet = !json[QString("employerExpenses")].isNull() && m_employer_expenses_isValid;

    m_employment_business_expenses_isValid = ::OpenAPI::fromJsonValue(m_employment_business_expenses, json[QString("employmentBusinessExpenses")]);
    m_employment_business_expenses_isSet = !json[QString("employmentBusinessExpenses")].isNull() && m_employment_business_expenses_isValid;

    m_investment_expenses_isValid = ::OpenAPI::fromJsonValue(m_investment_expenses, json[QString("investmentExpenses")]);
    m_investment_expenses_isSet = !json[QString("investmentExpenses")].isNull() && m_investment_expenses_isValid;

    m_lifestyle_expenses_isValid = ::OpenAPI::fromJsonValue(m_lifestyle_expenses, json[QString("lifestyleExpenses")]);
    m_lifestyle_expenses_isSet = !json[QString("lifestyleExpenses")].isNull() && m_lifestyle_expenses_isValid;

    m_lifestyle_expenses_discretionary_isValid = ::OpenAPI::fromJsonValue(m_lifestyle_expenses_discretionary, json[QString("lifestyleExpensesDiscretionary")]);
    m_lifestyle_expenses_discretionary_isSet = !json[QString("lifestyleExpensesDiscretionary")].isNull() && m_lifestyle_expenses_discretionary_isValid;

    m_lifestyle_expenses_fixed_isValid = ::OpenAPI::fromJsonValue(m_lifestyle_expenses_fixed, json[QString("lifestyleExpensesFixed")]);
    m_lifestyle_expenses_fixed_isSet = !json[QString("lifestyleExpensesFixed")].isNull() && m_lifestyle_expenses_fixed_isValid;

    m_locked_in_contributions_isValid = ::OpenAPI::fromJsonValue(m_locked_in_contributions, json[QString("lockedInContributions")]);
    m_locked_in_contributions_isSet = !json[QString("lockedInContributions")].isNull() && m_locked_in_contributions_isValid;

    m_medical_expenses_isValid = ::OpenAPI::fromJsonValue(m_medical_expenses, json[QString("medicalExpenses")]);
    m_medical_expenses_isSet = !json[QString("medicalExpenses")].isNull() && m_medical_expenses_isValid;

    m_miscellaneous_expenses_isValid = ::OpenAPI::fromJsonValue(m_miscellaneous_expenses, json[QString("miscellaneousExpenses")]);
    m_miscellaneous_expenses_isSet = !json[QString("miscellaneousExpenses")].isNull() && m_miscellaneous_expenses_isValid;

    m_miscellaneous_expenses_discretionary_isValid = ::OpenAPI::fromJsonValue(m_miscellaneous_expenses_discretionary, json[QString("miscellaneousExpensesDiscretionary")]);
    m_miscellaneous_expenses_discretionary_isSet = !json[QString("miscellaneousExpensesDiscretionary")].isNull() && m_miscellaneous_expenses_discretionary_isValid;

    m_miscellaneous_expenses_fixed_isValid = ::OpenAPI::fromJsonValue(m_miscellaneous_expenses_fixed, json[QString("miscellaneousExpensesFixed")]);
    m_miscellaneous_expenses_fixed_isSet = !json[QString("miscellaneousExpensesFixed")].isNull() && m_miscellaneous_expenses_fixed_isValid;

    m_non_qualified_contributions_isValid = ::OpenAPI::fromJsonValue(m_non_qualified_contributions, json[QString("nonQualifiedContributions")]);
    m_non_qualified_contributions_isSet = !json[QString("nonQualifiedContributions")].isNull() && m_non_qualified_contributions_isValid;

    m_non_qualified_reinvestments_isValid = ::OpenAPI::fromJsonValue(m_non_qualified_reinvestments, json[QString("nonQualifiedReinvestments")]);
    m_non_qualified_reinvestments_isSet = !json[QString("nonQualifiedReinvestments")].isNull() && m_non_qualified_reinvestments_isValid;

    m_private_corporation_outflows_isValid = ::OpenAPI::fromJsonValue(m_private_corporation_outflows, json[QString("privateCorporationOutflows")]);
    m_private_corporation_outflows_isSet = !json[QString("privateCorporationOutflows")].isNull() && m_private_corporation_outflows_isValid;

    m_qualified_contributions_isValid = ::OpenAPI::fromJsonValue(m_qualified_contributions, json[QString("qualifiedContributions")]);
    m_qualified_contributions_isSet = !json[QString("qualifiedContributions")].isNull() && m_qualified_contributions_isValid;

    m_roth_contributions_isValid = ::OpenAPI::fromJsonValue(m_roth_contributions, json[QString("rothContributions")]);
    m_roth_contributions_isSet = !json[QString("rothContributions")].isNull() && m_roth_contributions_isValid;

    m_surplus_outflows_isValid = ::OpenAPI::fromJsonValue(m_surplus_outflows, json[QString("surplusOutflows")]);
    m_surplus_outflows_isSet = !json[QString("surplusOutflows")].isNull() && m_surplus_outflows_isValid;

    m_surplus_savings_isValid = ::OpenAPI::fromJsonValue(m_surplus_savings, json[QString("surplusSavings")]);
    m_surplus_savings_isSet = !json[QString("surplusSavings")].isNull() && m_surplus_savings_isValid;

    m_tfsa_contributions_isValid = ::OpenAPI::fromJsonValue(m_tfsa_contributions, json[QString("tfsaContributions")]);
    m_tfsa_contributions_isSet = !json[QString("tfsaContributions")].isNull() && m_tfsa_contributions_isValid;

    m_total_needs_isValid = ::OpenAPI::fromJsonValue(m_total_needs, json[QString("totalNeeds")]);
    m_total_needs_isSet = !json[QString("totalNeeds")].isNull() && m_total_needs_isValid;

    m_total_with_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_with_taxes, json[QString("totalWithTaxes")]);
    m_total_with_taxes_isSet = !json[QString("totalWithTaxes")].isNull() && m_total_with_taxes_isValid;

    m_total_without_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_without_taxes, json[QString("totalWithoutTaxes")]);
    m_total_without_taxes_isSet = !json[QString("totalWithoutTaxes")].isNull() && m_total_without_taxes_isValid;
}

QString OAIICashFlowOutflows::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIICashFlowOutflows::asJsonObject() const {
    QJsonObject obj;
    if (m_contributions.isSet()) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_education_expenses.isSet()) {
        obj.insert(QString("educationExpenses"), ::OpenAPI::toJsonValue(m_education_expenses));
    }
    if (m_employer_expenses.isSet()) {
        obj.insert(QString("employerExpenses"), ::OpenAPI::toJsonValue(m_employer_expenses));
    }
    if (m_employment_business_expenses.isSet()) {
        obj.insert(QString("employmentBusinessExpenses"), ::OpenAPI::toJsonValue(m_employment_business_expenses));
    }
    if (m_investment_expenses.isSet()) {
        obj.insert(QString("investmentExpenses"), ::OpenAPI::toJsonValue(m_investment_expenses));
    }
    if (m_lifestyle_expenses.isSet()) {
        obj.insert(QString("lifestyleExpenses"), ::OpenAPI::toJsonValue(m_lifestyle_expenses));
    }
    if (m_lifestyle_expenses_discretionary.isSet()) {
        obj.insert(QString("lifestyleExpensesDiscretionary"), ::OpenAPI::toJsonValue(m_lifestyle_expenses_discretionary));
    }
    if (m_lifestyle_expenses_fixed.isSet()) {
        obj.insert(QString("lifestyleExpensesFixed"), ::OpenAPI::toJsonValue(m_lifestyle_expenses_fixed));
    }
    if (m_locked_in_contributions.isSet()) {
        obj.insert(QString("lockedInContributions"), ::OpenAPI::toJsonValue(m_locked_in_contributions));
    }
    if (m_medical_expenses.isSet()) {
        obj.insert(QString("medicalExpenses"), ::OpenAPI::toJsonValue(m_medical_expenses));
    }
    if (m_miscellaneous_expenses.isSet()) {
        obj.insert(QString("miscellaneousExpenses"), ::OpenAPI::toJsonValue(m_miscellaneous_expenses));
    }
    if (m_miscellaneous_expenses_discretionary.isSet()) {
        obj.insert(QString("miscellaneousExpensesDiscretionary"), ::OpenAPI::toJsonValue(m_miscellaneous_expenses_discretionary));
    }
    if (m_miscellaneous_expenses_fixed.isSet()) {
        obj.insert(QString("miscellaneousExpensesFixed"), ::OpenAPI::toJsonValue(m_miscellaneous_expenses_fixed));
    }
    if (m_non_qualified_contributions.isSet()) {
        obj.insert(QString("nonQualifiedContributions"), ::OpenAPI::toJsonValue(m_non_qualified_contributions));
    }
    if (m_non_qualified_reinvestments.isSet()) {
        obj.insert(QString("nonQualifiedReinvestments"), ::OpenAPI::toJsonValue(m_non_qualified_reinvestments));
    }
    if (m_private_corporation_outflows.isSet()) {
        obj.insert(QString("privateCorporationOutflows"), ::OpenAPI::toJsonValue(m_private_corporation_outflows));
    }
    if (m_qualified_contributions.isSet()) {
        obj.insert(QString("qualifiedContributions"), ::OpenAPI::toJsonValue(m_qualified_contributions));
    }
    if (m_roth_contributions.isSet()) {
        obj.insert(QString("rothContributions"), ::OpenAPI::toJsonValue(m_roth_contributions));
    }
    if (m_surplus_outflows.isSet()) {
        obj.insert(QString("surplusOutflows"), ::OpenAPI::toJsonValue(m_surplus_outflows));
    }
    if (m_surplus_savings.isSet()) {
        obj.insert(QString("surplusSavings"), ::OpenAPI::toJsonValue(m_surplus_savings));
    }
    if (m_tfsa_contributions.isSet()) {
        obj.insert(QString("tfsaContributions"), ::OpenAPI::toJsonValue(m_tfsa_contributions));
    }
    if (m_total_needs.isSet()) {
        obj.insert(QString("totalNeeds"), ::OpenAPI::toJsonValue(m_total_needs));
    }
    if (m_total_with_taxes.isSet()) {
        obj.insert(QString("totalWithTaxes"), ::OpenAPI::toJsonValue(m_total_with_taxes));
    }
    if (m_total_without_taxes.isSet()) {
        obj.insert(QString("totalWithoutTaxes"), ::OpenAPI::toJsonValue(m_total_without_taxes));
    }
    return obj;
}

OAICurrency OAIICashFlowOutflows::getContributions() const {
    return m_contributions;
}
void OAIICashFlowOutflows::setContributions(const OAICurrency &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAIICashFlowOutflows::is_contributions_Valid() const{
    return m_contributions_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getEducationExpenses() const {
    return m_education_expenses;
}
void OAIICashFlowOutflows::setEducationExpenses(const OAIICashFlowCategory &education_expenses) {
    m_education_expenses = education_expenses;
    m_education_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_education_expenses_Set() const{
    return m_education_expenses_isSet;
}

bool OAIICashFlowOutflows::is_education_expenses_Valid() const{
    return m_education_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getEmployerExpenses() const {
    return m_employer_expenses;
}
void OAIICashFlowOutflows::setEmployerExpenses(const OAIICashFlowCategory &employer_expenses) {
    m_employer_expenses = employer_expenses;
    m_employer_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_employer_expenses_Set() const{
    return m_employer_expenses_isSet;
}

bool OAIICashFlowOutflows::is_employer_expenses_Valid() const{
    return m_employer_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getEmploymentBusinessExpenses() const {
    return m_employment_business_expenses;
}
void OAIICashFlowOutflows::setEmploymentBusinessExpenses(const OAIICashFlowCategory &employment_business_expenses) {
    m_employment_business_expenses = employment_business_expenses;
    m_employment_business_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_employment_business_expenses_Set() const{
    return m_employment_business_expenses_isSet;
}

bool OAIICashFlowOutflows::is_employment_business_expenses_Valid() const{
    return m_employment_business_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getInvestmentExpenses() const {
    return m_investment_expenses;
}
void OAIICashFlowOutflows::setInvestmentExpenses(const OAIICashFlowCategory &investment_expenses) {
    m_investment_expenses = investment_expenses;
    m_investment_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_investment_expenses_Set() const{
    return m_investment_expenses_isSet;
}

bool OAIICashFlowOutflows::is_investment_expenses_Valid() const{
    return m_investment_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getLifestyleExpenses() const {
    return m_lifestyle_expenses;
}
void OAIICashFlowOutflows::setLifestyleExpenses(const OAIICashFlowCategory &lifestyle_expenses) {
    m_lifestyle_expenses = lifestyle_expenses;
    m_lifestyle_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_Set() const{
    return m_lifestyle_expenses_isSet;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_Valid() const{
    return m_lifestyle_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getLifestyleExpensesDiscretionary() const {
    return m_lifestyle_expenses_discretionary;
}
void OAIICashFlowOutflows::setLifestyleExpensesDiscretionary(const OAIICashFlowCategory &lifestyle_expenses_discretionary) {
    m_lifestyle_expenses_discretionary = lifestyle_expenses_discretionary;
    m_lifestyle_expenses_discretionary_isSet = true;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_discretionary_Set() const{
    return m_lifestyle_expenses_discretionary_isSet;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_discretionary_Valid() const{
    return m_lifestyle_expenses_discretionary_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getLifestyleExpensesFixed() const {
    return m_lifestyle_expenses_fixed;
}
void OAIICashFlowOutflows::setLifestyleExpensesFixed(const OAIICashFlowCategory &lifestyle_expenses_fixed) {
    m_lifestyle_expenses_fixed = lifestyle_expenses_fixed;
    m_lifestyle_expenses_fixed_isSet = true;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_fixed_Set() const{
    return m_lifestyle_expenses_fixed_isSet;
}

bool OAIICashFlowOutflows::is_lifestyle_expenses_fixed_Valid() const{
    return m_lifestyle_expenses_fixed_isValid;
}

OAICurrency OAIICashFlowOutflows::getLockedInContributions() const {
    return m_locked_in_contributions;
}
void OAIICashFlowOutflows::setLockedInContributions(const OAICurrency &locked_in_contributions) {
    m_locked_in_contributions = locked_in_contributions;
    m_locked_in_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_locked_in_contributions_Set() const{
    return m_locked_in_contributions_isSet;
}

bool OAIICashFlowOutflows::is_locked_in_contributions_Valid() const{
    return m_locked_in_contributions_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getMedicalExpenses() const {
    return m_medical_expenses;
}
void OAIICashFlowOutflows::setMedicalExpenses(const OAIICashFlowCategory &medical_expenses) {
    m_medical_expenses = medical_expenses;
    m_medical_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_medical_expenses_Set() const{
    return m_medical_expenses_isSet;
}

bool OAIICashFlowOutflows::is_medical_expenses_Valid() const{
    return m_medical_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getMiscellaneousExpenses() const {
    return m_miscellaneous_expenses;
}
void OAIICashFlowOutflows::setMiscellaneousExpenses(const OAIICashFlowCategory &miscellaneous_expenses) {
    m_miscellaneous_expenses = miscellaneous_expenses;
    m_miscellaneous_expenses_isSet = true;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_Set() const{
    return m_miscellaneous_expenses_isSet;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_Valid() const{
    return m_miscellaneous_expenses_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getMiscellaneousExpensesDiscretionary() const {
    return m_miscellaneous_expenses_discretionary;
}
void OAIICashFlowOutflows::setMiscellaneousExpensesDiscretionary(const OAIICashFlowCategory &miscellaneous_expenses_discretionary) {
    m_miscellaneous_expenses_discretionary = miscellaneous_expenses_discretionary;
    m_miscellaneous_expenses_discretionary_isSet = true;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_discretionary_Set() const{
    return m_miscellaneous_expenses_discretionary_isSet;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_discretionary_Valid() const{
    return m_miscellaneous_expenses_discretionary_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getMiscellaneousExpensesFixed() const {
    return m_miscellaneous_expenses_fixed;
}
void OAIICashFlowOutflows::setMiscellaneousExpensesFixed(const OAIICashFlowCategory &miscellaneous_expenses_fixed) {
    m_miscellaneous_expenses_fixed = miscellaneous_expenses_fixed;
    m_miscellaneous_expenses_fixed_isSet = true;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_fixed_Set() const{
    return m_miscellaneous_expenses_fixed_isSet;
}

bool OAIICashFlowOutflows::is_miscellaneous_expenses_fixed_Valid() const{
    return m_miscellaneous_expenses_fixed_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getNonQualifiedContributions() const {
    return m_non_qualified_contributions;
}
void OAIICashFlowOutflows::setNonQualifiedContributions(const OAIICashFlowCategory &non_qualified_contributions) {
    m_non_qualified_contributions = non_qualified_contributions;
    m_non_qualified_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_non_qualified_contributions_Set() const{
    return m_non_qualified_contributions_isSet;
}

bool OAIICashFlowOutflows::is_non_qualified_contributions_Valid() const{
    return m_non_qualified_contributions_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getNonQualifiedReinvestments() const {
    return m_non_qualified_reinvestments;
}
void OAIICashFlowOutflows::setNonQualifiedReinvestments(const OAIICashFlowCategory &non_qualified_reinvestments) {
    m_non_qualified_reinvestments = non_qualified_reinvestments;
    m_non_qualified_reinvestments_isSet = true;
}

bool OAIICashFlowOutflows::is_non_qualified_reinvestments_Set() const{
    return m_non_qualified_reinvestments_isSet;
}

bool OAIICashFlowOutflows::is_non_qualified_reinvestments_Valid() const{
    return m_non_qualified_reinvestments_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getPrivateCorporationOutflows() const {
    return m_private_corporation_outflows;
}
void OAIICashFlowOutflows::setPrivateCorporationOutflows(const OAIICashFlowCategory &private_corporation_outflows) {
    m_private_corporation_outflows = private_corporation_outflows;
    m_private_corporation_outflows_isSet = true;
}

bool OAIICashFlowOutflows::is_private_corporation_outflows_Set() const{
    return m_private_corporation_outflows_isSet;
}

bool OAIICashFlowOutflows::is_private_corporation_outflows_Valid() const{
    return m_private_corporation_outflows_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getQualifiedContributions() const {
    return m_qualified_contributions;
}
void OAIICashFlowOutflows::setQualifiedContributions(const OAIICashFlowCategory &qualified_contributions) {
    m_qualified_contributions = qualified_contributions;
    m_qualified_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_qualified_contributions_Set() const{
    return m_qualified_contributions_isSet;
}

bool OAIICashFlowOutflows::is_qualified_contributions_Valid() const{
    return m_qualified_contributions_isValid;
}

OAICurrency OAIICashFlowOutflows::getRothContributions() const {
    return m_roth_contributions;
}
void OAIICashFlowOutflows::setRothContributions(const OAICurrency &roth_contributions) {
    m_roth_contributions = roth_contributions;
    m_roth_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_roth_contributions_Set() const{
    return m_roth_contributions_isSet;
}

bool OAIICashFlowOutflows::is_roth_contributions_Valid() const{
    return m_roth_contributions_isValid;
}

OAIICashFlowCategory OAIICashFlowOutflows::getSurplusOutflows() const {
    return m_surplus_outflows;
}
void OAIICashFlowOutflows::setSurplusOutflows(const OAIICashFlowCategory &surplus_outflows) {
    m_surplus_outflows = surplus_outflows;
    m_surplus_outflows_isSet = true;
}

bool OAIICashFlowOutflows::is_surplus_outflows_Set() const{
    return m_surplus_outflows_isSet;
}

bool OAIICashFlowOutflows::is_surplus_outflows_Valid() const{
    return m_surplus_outflows_isValid;
}

OAICurrency OAIICashFlowOutflows::getSurplusSavings() const {
    return m_surplus_savings;
}
void OAIICashFlowOutflows::setSurplusSavings(const OAICurrency &surplus_savings) {
    m_surplus_savings = surplus_savings;
    m_surplus_savings_isSet = true;
}

bool OAIICashFlowOutflows::is_surplus_savings_Set() const{
    return m_surplus_savings_isSet;
}

bool OAIICashFlowOutflows::is_surplus_savings_Valid() const{
    return m_surplus_savings_isValid;
}

OAICurrency OAIICashFlowOutflows::getTfsaContributions() const {
    return m_tfsa_contributions;
}
void OAIICashFlowOutflows::setTfsaContributions(const OAICurrency &tfsa_contributions) {
    m_tfsa_contributions = tfsa_contributions;
    m_tfsa_contributions_isSet = true;
}

bool OAIICashFlowOutflows::is_tfsa_contributions_Set() const{
    return m_tfsa_contributions_isSet;
}

bool OAIICashFlowOutflows::is_tfsa_contributions_Valid() const{
    return m_tfsa_contributions_isValid;
}

OAICurrency OAIICashFlowOutflows::getTotalNeeds() const {
    return m_total_needs;
}
void OAIICashFlowOutflows::setTotalNeeds(const OAICurrency &total_needs) {
    m_total_needs = total_needs;
    m_total_needs_isSet = true;
}

bool OAIICashFlowOutflows::is_total_needs_Set() const{
    return m_total_needs_isSet;
}

bool OAIICashFlowOutflows::is_total_needs_Valid() const{
    return m_total_needs_isValid;
}

OAICurrency OAIICashFlowOutflows::getTotalWithTaxes() const {
    return m_total_with_taxes;
}
void OAIICashFlowOutflows::setTotalWithTaxes(const OAICurrency &total_with_taxes) {
    m_total_with_taxes = total_with_taxes;
    m_total_with_taxes_isSet = true;
}

bool OAIICashFlowOutflows::is_total_with_taxes_Set() const{
    return m_total_with_taxes_isSet;
}

bool OAIICashFlowOutflows::is_total_with_taxes_Valid() const{
    return m_total_with_taxes_isValid;
}

OAICurrency OAIICashFlowOutflows::getTotalWithoutTaxes() const {
    return m_total_without_taxes;
}
void OAIICashFlowOutflows::setTotalWithoutTaxes(const OAICurrency &total_without_taxes) {
    m_total_without_taxes = total_without_taxes;
    m_total_without_taxes_isSet = true;
}

bool OAIICashFlowOutflows::is_total_without_taxes_Set() const{
    return m_total_without_taxes_isSet;
}

bool OAIICashFlowOutflows::is_total_without_taxes_Valid() const{
    return m_total_without_taxes_isValid;
}

bool OAIICashFlowOutflows::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_education_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_business_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_investment_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifestyle_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifestyle_expenses_discretionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifestyle_expenses_fixed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_in_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_medical_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miscellaneous_expenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miscellaneous_expenses_discretionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miscellaneous_expenses_fixed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified_reinvestments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_corporation_outflows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roth_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surplus_outflows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surplus_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfsa_contributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_needs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_with_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_without_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIICashFlowOutflows::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
