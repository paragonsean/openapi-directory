/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIAssetClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIAssetClass::OAIIAssetClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIAssetClass::OAIIAssetClass() {
    this->initializeModel();
}

OAIIAssetClass::~OAIIAssetClass() {}

void OAIIAssetClass::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_max_constraint_isSet = false;
    m_max_constraint_isValid = false;

    m_min_constraint_isSet = false;
    m_min_constraint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_super_asset_class_index_isSet = false;
    m_parent_super_asset_class_index_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIIAssetClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIAssetClass::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_max_constraint_isValid = ::OpenAPI::fromJsonValue(m_max_constraint, json[QString("maxConstraint")]);
    m_max_constraint_isSet = !json[QString("maxConstraint")].isNull() && m_max_constraint_isValid;

    m_min_constraint_isValid = ::OpenAPI::fromJsonValue(m_min_constraint, json[QString("minConstraint")]);
    m_min_constraint_isSet = !json[QString("minConstraint")].isNull() && m_min_constraint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_super_asset_class_index_isValid = ::OpenAPI::fromJsonValue(m_parent_super_asset_class_index, json[QString("parentSuperAssetClassIndex")]);
    m_parent_super_asset_class_index_isSet = !json[QString("parentSuperAssetClassIndex")].isNull() && m_parent_super_asset_class_index_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIIAssetClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIAssetClass::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_max_constraint.isSet()) {
        obj.insert(QString("maxConstraint"), ::OpenAPI::toJsonValue(m_max_constraint));
    }
    if (m_min_constraint.isSet()) {
        obj.insert(QString("minConstraint"), ::OpenAPI::toJsonValue(m_min_constraint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_super_asset_class_index_isSet) {
        obj.insert(QString("parentSuperAssetClassIndex"), ::OpenAPI::toJsonValue(m_parent_super_asset_class_index));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAIIAssetClass::getIndex() const {
    return m_index;
}
void OAIIAssetClass::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIIAssetClass::is_index_Set() const{
    return m_index_isSet;
}

bool OAIIAssetClass::is_index_Valid() const{
    return m_index_isValid;
}

OAIPercent OAIIAssetClass::getMaxConstraint() const {
    return m_max_constraint;
}
void OAIIAssetClass::setMaxConstraint(const OAIPercent &max_constraint) {
    m_max_constraint = max_constraint;
    m_max_constraint_isSet = true;
}

bool OAIIAssetClass::is_max_constraint_Set() const{
    return m_max_constraint_isSet;
}

bool OAIIAssetClass::is_max_constraint_Valid() const{
    return m_max_constraint_isValid;
}

OAIPercent OAIIAssetClass::getMinConstraint() const {
    return m_min_constraint;
}
void OAIIAssetClass::setMinConstraint(const OAIPercent &min_constraint) {
    m_min_constraint = min_constraint;
    m_min_constraint_isSet = true;
}

bool OAIIAssetClass::is_min_constraint_Set() const{
    return m_min_constraint_isSet;
}

bool OAIIAssetClass::is_min_constraint_Valid() const{
    return m_min_constraint_isValid;
}

QString OAIIAssetClass::getName() const {
    return m_name;
}
void OAIIAssetClass::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIAssetClass::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIAssetClass::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIIAssetClass::getParentSuperAssetClassIndex() const {
    return m_parent_super_asset_class_index;
}
void OAIIAssetClass::setParentSuperAssetClassIndex(const qint32 &parent_super_asset_class_index) {
    m_parent_super_asset_class_index = parent_super_asset_class_index;
    m_parent_super_asset_class_index_isSet = true;
}

bool OAIIAssetClass::is_parent_super_asset_class_index_Set() const{
    return m_parent_super_asset_class_index_isSet;
}

bool OAIIAssetClass::is_parent_super_asset_class_index_Valid() const{
    return m_parent_super_asset_class_index_isValid;
}

OAIIAssetClassWeight OAIIAssetClass::getWeight() const {
    return m_weight;
}
void OAIIAssetClass::setWeight(const OAIIAssetClassWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIIAssetClass::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIIAssetClass::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIIAssetClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_super_asset_class_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIAssetClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
