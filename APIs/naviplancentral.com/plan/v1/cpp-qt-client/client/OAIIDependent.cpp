/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIDependent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIDependent::OAIIDependent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIDependent::OAIIDependent() {
    this->initializeModel();
}

OAIIDependent::~OAIIDependent() {}

void OAIIDependent::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_age_as_of_plan_date_isSet = false;
    m_age_as_of_plan_date_isValid = false;

    m_birthdate_isSet = false;
    m_birthdate_isValid = false;

    m_citizenship_isSet = false;
    m_citizenship_isValid = false;

    m_dependent_of_isSet = false;
    m_dependent_of_isValid = false;

    m_dependent_of_id_isSet = false;
    m_dependent_of_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_id_isSet = false;
    m_ownership_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_relationship_isSet = false;
    m_relationship_isValid = false;
}

void OAIIDependent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIDependent::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_age_as_of_plan_date_isValid = ::OpenAPI::fromJsonValue(m_age_as_of_plan_date, json[QString("ageAsOfPlanDate")]);
    m_age_as_of_plan_date_isSet = !json[QString("ageAsOfPlanDate")].isNull() && m_age_as_of_plan_date_isValid;

    m_birthdate_isValid = ::OpenAPI::fromJsonValue(m_birthdate, json[QString("birthdate")]);
    m_birthdate_isSet = !json[QString("birthdate")].isNull() && m_birthdate_isValid;

    m_citizenship_isValid = ::OpenAPI::fromJsonValue(m_citizenship, json[QString("citizenship")]);
    m_citizenship_isSet = !json[QString("citizenship")].isNull() && m_citizenship_isValid;

    m_dependent_of_isValid = ::OpenAPI::fromJsonValue(m_dependent_of, json[QString("dependentOf")]);
    m_dependent_of_isSet = !json[QString("dependentOf")].isNull() && m_dependent_of_isValid;

    m_dependent_of_id_isValid = ::OpenAPI::fromJsonValue(m_dependent_of_id, json[QString("dependentOfId")]);
    m_dependent_of_id_isSet = !json[QString("dependentOfId")].isNull() && m_dependent_of_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ownership_id_isValid = ::OpenAPI::fromJsonValue(m_ownership_id, json[QString("ownershipId")]);
    m_ownership_id_isSet = !json[QString("ownershipId")].isNull() && m_ownership_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_relationship_isValid = ::OpenAPI::fromJsonValue(m_relationship, json[QString("relationship")]);
    m_relationship_isSet = !json[QString("relationship")].isNull() && m_relationship_isValid;
}

QString OAIIDependent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIDependent::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_age_as_of_plan_date_isSet) {
        obj.insert(QString("ageAsOfPlanDate"), ::OpenAPI::toJsonValue(m_age_as_of_plan_date));
    }
    if (m_birthdate.isSet()) {
        obj.insert(QString("birthdate"), ::OpenAPI::toJsonValue(m_birthdate));
    }
    if (m_citizenship_isSet) {
        obj.insert(QString("citizenship"), ::OpenAPI::toJsonValue(m_citizenship));
    }
    if (m_dependent_of_isSet) {
        obj.insert(QString("dependentOf"), ::OpenAPI::toJsonValue(m_dependent_of));
    }
    if (m_dependent_of_id_isSet) {
        obj.insert(QString("dependentOfId"), ::OpenAPI::toJsonValue(m_dependent_of_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_gender.isSet()) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership_id_isSet) {
        obj.insert(QString("ownershipId"), ::OpenAPI::toJsonValue(m_ownership_id));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_relationship_isSet) {
        obj.insert(QString("relationship"), ::OpenAPI::toJsonValue(m_relationship));
    }
    return obj;
}

OAIIAddress OAIIDependent::getAddress() const {
    return m_address;
}
void OAIIDependent::setAddress(const OAIIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIIDependent::is_address_Set() const{
    return m_address_isSet;
}

bool OAIIDependent::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIIDependent::getAgeAsOfPlanDate() const {
    return m_age_as_of_plan_date;
}
void OAIIDependent::setAgeAsOfPlanDate(const qint32 &age_as_of_plan_date) {
    m_age_as_of_plan_date = age_as_of_plan_date;
    m_age_as_of_plan_date_isSet = true;
}

bool OAIIDependent::is_age_as_of_plan_date_Set() const{
    return m_age_as_of_plan_date_isSet;
}

bool OAIIDependent::is_age_as_of_plan_date_Valid() const{
    return m_age_as_of_plan_date_isValid;
}

OAIDate OAIIDependent::getBirthdate() const {
    return m_birthdate;
}
void OAIIDependent::setBirthdate(const OAIDate &birthdate) {
    m_birthdate = birthdate;
    m_birthdate_isSet = true;
}

bool OAIIDependent::is_birthdate_Set() const{
    return m_birthdate_isSet;
}

bool OAIIDependent::is_birthdate_Valid() const{
    return m_birthdate_isValid;
}

QString OAIIDependent::getCitizenship() const {
    return m_citizenship;
}
void OAIIDependent::setCitizenship(const QString &citizenship) {
    m_citizenship = citizenship;
    m_citizenship_isSet = true;
}

bool OAIIDependent::is_citizenship_Set() const{
    return m_citizenship_isSet;
}

bool OAIIDependent::is_citizenship_Valid() const{
    return m_citizenship_isValid;
}

QString OAIIDependent::getDependentOf() const {
    return m_dependent_of;
}
void OAIIDependent::setDependentOf(const QString &dependent_of) {
    m_dependent_of = dependent_of;
    m_dependent_of_isSet = true;
}

bool OAIIDependent::is_dependent_of_Set() const{
    return m_dependent_of_isSet;
}

bool OAIIDependent::is_dependent_of_Valid() const{
    return m_dependent_of_isValid;
}

QString OAIIDependent::getDependentOfId() const {
    return m_dependent_of_id;
}
void OAIIDependent::setDependentOfId(const QString &dependent_of_id) {
    m_dependent_of_id = dependent_of_id;
    m_dependent_of_id_isSet = true;
}

bool OAIIDependent::is_dependent_of_id_Set() const{
    return m_dependent_of_id_isSet;
}

bool OAIIDependent::is_dependent_of_id_Valid() const{
    return m_dependent_of_id_isValid;
}

QString OAIIDependent::getEmail() const {
    return m_email;
}
void OAIIDependent::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIDependent::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIDependent::is_email_Valid() const{
    return m_email_isValid;
}

OAIIEmployer OAIIDependent::getEmployer() const {
    return m_employer;
}
void OAIIDependent::setEmployer(const OAIIEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAIIDependent::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAIIDependent::is_employer_Valid() const{
    return m_employer_isValid;
}

OAIFormattedEnumType_Gender OAIIDependent::getGender() const {
    return m_gender;
}
void OAIIDependent::setGender(const OAIFormattedEnumType_Gender &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIIDependent::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIIDependent::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIIPersonName OAIIDependent::getName() const {
    return m_name;
}
void OAIIDependent::setName(const OAIIPersonName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIDependent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIDependent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIDependent::getOwnershipId() const {
    return m_ownership_id;
}
void OAIIDependent::setOwnershipId(const QString &ownership_id) {
    m_ownership_id = ownership_id;
    m_ownership_id_isSet = true;
}

bool OAIIDependent::is_ownership_id_Set() const{
    return m_ownership_id_isSet;
}

bool OAIIDependent::is_ownership_id_Valid() const{
    return m_ownership_id_isValid;
}

OAIIPhoneNumbers OAIIDependent::getPhone() const {
    return m_phone;
}
void OAIIDependent::setPhone(const OAIIPhoneNumbers &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIIDependent::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIIDependent::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIIDependent::getRelationship() const {
    return m_relationship;
}
void OAIIDependent::setRelationship(const QString &relationship) {
    m_relationship = relationship;
    m_relationship_isSet = true;
}

bool OAIIDependent::is_relationship_Set() const{
    return m_relationship_isSet;
}

bool OAIIDependent::is_relationship_Valid() const{
    return m_relationship_isValid;
}

bool OAIIDependent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_as_of_plan_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthdate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_citizenship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_of_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIDependent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
