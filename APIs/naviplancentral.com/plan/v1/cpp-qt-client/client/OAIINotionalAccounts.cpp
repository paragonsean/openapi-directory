/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIINotionalAccounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIINotionalAccounts::OAIINotionalAccounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIINotionalAccounts::OAIINotionalAccounts() {
    this->initializeModel();
}

OAIINotionalAccounts::~OAIINotionalAccounts() {}

void OAIINotionalAccounts::initializeModel() {

    m_capital_dividend_account_end_of_year_value_isSet = false;
    m_capital_dividend_account_end_of_year_value_isValid = false;

    m_capital_losses_carryover_end_of_year_value_isSet = false;
    m_capital_losses_carryover_end_of_year_value_isValid = false;

    m_dividend_refund_isSet = false;
    m_dividend_refund_isValid = false;

    m_general_rate_of_income_pool_end_of_year_value_isSet = false;
    m_general_rate_of_income_pool_end_of_year_value_isValid = false;

    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isSet = false;
    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isValid = false;

    m_nrdtoh_dividend_refund_isSet = false;
    m_nrdtoh_dividend_refund_isValid = false;

    m_refundable_dividend_tax_on_hand_end_of_year_value_isSet = false;
    m_refundable_dividend_tax_on_hand_end_of_year_value_isValid = false;
}

void OAIINotionalAccounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIINotionalAccounts::fromJsonObject(QJsonObject json) {

    m_capital_dividend_account_end_of_year_value_isValid = ::OpenAPI::fromJsonValue(m_capital_dividend_account_end_of_year_value, json[QString("capitalDividendAccountEndOfYearValue")]);
    m_capital_dividend_account_end_of_year_value_isSet = !json[QString("capitalDividendAccountEndOfYearValue")].isNull() && m_capital_dividend_account_end_of_year_value_isValid;

    m_capital_losses_carryover_end_of_year_value_isValid = ::OpenAPI::fromJsonValue(m_capital_losses_carryover_end_of_year_value, json[QString("capitalLossesCarryoverEndOfYearValue")]);
    m_capital_losses_carryover_end_of_year_value_isSet = !json[QString("capitalLossesCarryoverEndOfYearValue")].isNull() && m_capital_losses_carryover_end_of_year_value_isValid;

    m_dividend_refund_isValid = ::OpenAPI::fromJsonValue(m_dividend_refund, json[QString("dividendRefund")]);
    m_dividend_refund_isSet = !json[QString("dividendRefund")].isNull() && m_dividend_refund_isValid;

    m_general_rate_of_income_pool_end_of_year_value_isValid = ::OpenAPI::fromJsonValue(m_general_rate_of_income_pool_end_of_year_value, json[QString("generalRateOfIncomePoolEndOfYearValue")]);
    m_general_rate_of_income_pool_end_of_year_value_isSet = !json[QString("generalRateOfIncomePoolEndOfYearValue")].isNull() && m_general_rate_of_income_pool_end_of_year_value_isValid;

    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isValid = ::OpenAPI::fromJsonValue(m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value, json[QString("nonEligibleRefundableDividendTaxOnHandEndOfYearValue")]);
    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isSet = !json[QString("nonEligibleRefundableDividendTaxOnHandEndOfYearValue")].isNull() && m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isValid;

    m_nrdtoh_dividend_refund_isValid = ::OpenAPI::fromJsonValue(m_nrdtoh_dividend_refund, json[QString("nrdtohDividendRefund")]);
    m_nrdtoh_dividend_refund_isSet = !json[QString("nrdtohDividendRefund")].isNull() && m_nrdtoh_dividend_refund_isValid;

    m_refundable_dividend_tax_on_hand_end_of_year_value_isValid = ::OpenAPI::fromJsonValue(m_refundable_dividend_tax_on_hand_end_of_year_value, json[QString("refundableDividendTaxOnHandEndOfYearValue")]);
    m_refundable_dividend_tax_on_hand_end_of_year_value_isSet = !json[QString("refundableDividendTaxOnHandEndOfYearValue")].isNull() && m_refundable_dividend_tax_on_hand_end_of_year_value_isValid;
}

QString OAIINotionalAccounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIINotionalAccounts::asJsonObject() const {
    QJsonObject obj;
    if (m_capital_dividend_account_end_of_year_value.isSet()) {
        obj.insert(QString("capitalDividendAccountEndOfYearValue"), ::OpenAPI::toJsonValue(m_capital_dividend_account_end_of_year_value));
    }
    if (m_capital_losses_carryover_end_of_year_value.isSet()) {
        obj.insert(QString("capitalLossesCarryoverEndOfYearValue"), ::OpenAPI::toJsonValue(m_capital_losses_carryover_end_of_year_value));
    }
    if (m_dividend_refund.isSet()) {
        obj.insert(QString("dividendRefund"), ::OpenAPI::toJsonValue(m_dividend_refund));
    }
    if (m_general_rate_of_income_pool_end_of_year_value.isSet()) {
        obj.insert(QString("generalRateOfIncomePoolEndOfYearValue"), ::OpenAPI::toJsonValue(m_general_rate_of_income_pool_end_of_year_value));
    }
    if (m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value.isSet()) {
        obj.insert(QString("nonEligibleRefundableDividendTaxOnHandEndOfYearValue"), ::OpenAPI::toJsonValue(m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value));
    }
    if (m_nrdtoh_dividend_refund.isSet()) {
        obj.insert(QString("nrdtohDividendRefund"), ::OpenAPI::toJsonValue(m_nrdtoh_dividend_refund));
    }
    if (m_refundable_dividend_tax_on_hand_end_of_year_value.isSet()) {
        obj.insert(QString("refundableDividendTaxOnHandEndOfYearValue"), ::OpenAPI::toJsonValue(m_refundable_dividend_tax_on_hand_end_of_year_value));
    }
    return obj;
}

OAICurrency OAIINotionalAccounts::getCapitalDividendAccountEndOfYearValue() const {
    return m_capital_dividend_account_end_of_year_value;
}
void OAIINotionalAccounts::setCapitalDividendAccountEndOfYearValue(const OAICurrency &capital_dividend_account_end_of_year_value) {
    m_capital_dividend_account_end_of_year_value = capital_dividend_account_end_of_year_value;
    m_capital_dividend_account_end_of_year_value_isSet = true;
}

bool OAIINotionalAccounts::is_capital_dividend_account_end_of_year_value_Set() const{
    return m_capital_dividend_account_end_of_year_value_isSet;
}

bool OAIINotionalAccounts::is_capital_dividend_account_end_of_year_value_Valid() const{
    return m_capital_dividend_account_end_of_year_value_isValid;
}

OAICurrency OAIINotionalAccounts::getCapitalLossesCarryoverEndOfYearValue() const {
    return m_capital_losses_carryover_end_of_year_value;
}
void OAIINotionalAccounts::setCapitalLossesCarryoverEndOfYearValue(const OAICurrency &capital_losses_carryover_end_of_year_value) {
    m_capital_losses_carryover_end_of_year_value = capital_losses_carryover_end_of_year_value;
    m_capital_losses_carryover_end_of_year_value_isSet = true;
}

bool OAIINotionalAccounts::is_capital_losses_carryover_end_of_year_value_Set() const{
    return m_capital_losses_carryover_end_of_year_value_isSet;
}

bool OAIINotionalAccounts::is_capital_losses_carryover_end_of_year_value_Valid() const{
    return m_capital_losses_carryover_end_of_year_value_isValid;
}

OAICurrency OAIINotionalAccounts::getDividendRefund() const {
    return m_dividend_refund;
}
void OAIINotionalAccounts::setDividendRefund(const OAICurrency &dividend_refund) {
    m_dividend_refund = dividend_refund;
    m_dividend_refund_isSet = true;
}

bool OAIINotionalAccounts::is_dividend_refund_Set() const{
    return m_dividend_refund_isSet;
}

bool OAIINotionalAccounts::is_dividend_refund_Valid() const{
    return m_dividend_refund_isValid;
}

OAICurrency OAIINotionalAccounts::getGeneralRateOfIncomePoolEndOfYearValue() const {
    return m_general_rate_of_income_pool_end_of_year_value;
}
void OAIINotionalAccounts::setGeneralRateOfIncomePoolEndOfYearValue(const OAICurrency &general_rate_of_income_pool_end_of_year_value) {
    m_general_rate_of_income_pool_end_of_year_value = general_rate_of_income_pool_end_of_year_value;
    m_general_rate_of_income_pool_end_of_year_value_isSet = true;
}

bool OAIINotionalAccounts::is_general_rate_of_income_pool_end_of_year_value_Set() const{
    return m_general_rate_of_income_pool_end_of_year_value_isSet;
}

bool OAIINotionalAccounts::is_general_rate_of_income_pool_end_of_year_value_Valid() const{
    return m_general_rate_of_income_pool_end_of_year_value_isValid;
}

OAICurrency OAIINotionalAccounts::getNonEligibleRefundableDividendTaxOnHandEndOfYearValue() const {
    return m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value;
}
void OAIINotionalAccounts::setNonEligibleRefundableDividendTaxOnHandEndOfYearValue(const OAICurrency &non_eligible_refundable_dividend_tax_on_hand_end_of_year_value) {
    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value = non_eligible_refundable_dividend_tax_on_hand_end_of_year_value;
    m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isSet = true;
}

bool OAIINotionalAccounts::is_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_Set() const{
    return m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isSet;
}

bool OAIINotionalAccounts::is_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_Valid() const{
    return m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isValid;
}

OAICurrency OAIINotionalAccounts::getNrdtohDividendRefund() const {
    return m_nrdtoh_dividend_refund;
}
void OAIINotionalAccounts::setNrdtohDividendRefund(const OAICurrency &nrdtoh_dividend_refund) {
    m_nrdtoh_dividend_refund = nrdtoh_dividend_refund;
    m_nrdtoh_dividend_refund_isSet = true;
}

bool OAIINotionalAccounts::is_nrdtoh_dividend_refund_Set() const{
    return m_nrdtoh_dividend_refund_isSet;
}

bool OAIINotionalAccounts::is_nrdtoh_dividend_refund_Valid() const{
    return m_nrdtoh_dividend_refund_isValid;
}

OAICurrency OAIINotionalAccounts::getRefundableDividendTaxOnHandEndOfYearValue() const {
    return m_refundable_dividend_tax_on_hand_end_of_year_value;
}
void OAIINotionalAccounts::setRefundableDividendTaxOnHandEndOfYearValue(const OAICurrency &refundable_dividend_tax_on_hand_end_of_year_value) {
    m_refundable_dividend_tax_on_hand_end_of_year_value = refundable_dividend_tax_on_hand_end_of_year_value;
    m_refundable_dividend_tax_on_hand_end_of_year_value_isSet = true;
}

bool OAIINotionalAccounts::is_refundable_dividend_tax_on_hand_end_of_year_value_Set() const{
    return m_refundable_dividend_tax_on_hand_end_of_year_value_isSet;
}

bool OAIINotionalAccounts::is_refundable_dividend_tax_on_hand_end_of_year_value_Valid() const{
    return m_refundable_dividend_tax_on_hand_end_of_year_value_isValid;
}

bool OAIINotionalAccounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capital_dividend_account_end_of_year_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_losses_carryover_end_of_year_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dividend_refund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_rate_of_income_pool_end_of_year_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nrdtoh_dividend_refund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refundable_dividend_tax_on_hand_end_of_year_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIINotionalAccounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
