/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashFlowSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashFlowSummary::OAICashFlowSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashFlowSummary::OAICashFlowSummary() {
    this->initializeModel();
}

OAICashFlowSummary::~OAICashFlowSummary() {}

void OAICashFlowSummary::initializeModel() {

    m_surplus_deficit_isSet = false;
    m_surplus_deficit_isValid = false;

    m_total_income_isSet = false;
    m_total_income_isValid = false;

    m_total_outflows_with_taxes_isSet = false;
    m_total_outflows_with_taxes_isValid = false;

    m_total_outflows_without_taxes_isSet = false;
    m_total_outflows_without_taxes_isValid = false;

    m_total_taxes_isSet = false;
    m_total_taxes_isValid = false;
}

void OAICashFlowSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashFlowSummary::fromJsonObject(QJsonObject json) {

    m_surplus_deficit_isValid = ::OpenAPI::fromJsonValue(m_surplus_deficit, json[QString("surplusDeficit")]);
    m_surplus_deficit_isSet = !json[QString("surplusDeficit")].isNull() && m_surplus_deficit_isValid;

    m_total_income_isValid = ::OpenAPI::fromJsonValue(m_total_income, json[QString("totalIncome")]);
    m_total_income_isSet = !json[QString("totalIncome")].isNull() && m_total_income_isValid;

    m_total_outflows_with_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_outflows_with_taxes, json[QString("totalOutflowsWithTaxes")]);
    m_total_outflows_with_taxes_isSet = !json[QString("totalOutflowsWithTaxes")].isNull() && m_total_outflows_with_taxes_isValid;

    m_total_outflows_without_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_outflows_without_taxes, json[QString("totalOutflowsWithoutTaxes")]);
    m_total_outflows_without_taxes_isSet = !json[QString("totalOutflowsWithoutTaxes")].isNull() && m_total_outflows_without_taxes_isValid;

    m_total_taxes_isValid = ::OpenAPI::fromJsonValue(m_total_taxes, json[QString("totalTaxes")]);
    m_total_taxes_isSet = !json[QString("totalTaxes")].isNull() && m_total_taxes_isValid;
}

QString OAICashFlowSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashFlowSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_surplus_deficit_isSet) {
        obj.insert(QString("surplusDeficit"), ::OpenAPI::toJsonValue(m_surplus_deficit));
    }
    if (m_total_income_isSet) {
        obj.insert(QString("totalIncome"), ::OpenAPI::toJsonValue(m_total_income));
    }
    if (m_total_outflows_with_taxes_isSet) {
        obj.insert(QString("totalOutflowsWithTaxes"), ::OpenAPI::toJsonValue(m_total_outflows_with_taxes));
    }
    if (m_total_outflows_without_taxes_isSet) {
        obj.insert(QString("totalOutflowsWithoutTaxes"), ::OpenAPI::toJsonValue(m_total_outflows_without_taxes));
    }
    if (m_total_taxes_isSet) {
        obj.insert(QString("totalTaxes"), ::OpenAPI::toJsonValue(m_total_taxes));
    }
    return obj;
}

double OAICashFlowSummary::getSurplusDeficit() const {
    return m_surplus_deficit;
}
void OAICashFlowSummary::setSurplusDeficit(const double &surplus_deficit) {
    m_surplus_deficit = surplus_deficit;
    m_surplus_deficit_isSet = true;
}

bool OAICashFlowSummary::is_surplus_deficit_Set() const{
    return m_surplus_deficit_isSet;
}

bool OAICashFlowSummary::is_surplus_deficit_Valid() const{
    return m_surplus_deficit_isValid;
}

double OAICashFlowSummary::getTotalIncome() const {
    return m_total_income;
}
void OAICashFlowSummary::setTotalIncome(const double &total_income) {
    m_total_income = total_income;
    m_total_income_isSet = true;
}

bool OAICashFlowSummary::is_total_income_Set() const{
    return m_total_income_isSet;
}

bool OAICashFlowSummary::is_total_income_Valid() const{
    return m_total_income_isValid;
}

double OAICashFlowSummary::getTotalOutflowsWithTaxes() const {
    return m_total_outflows_with_taxes;
}
void OAICashFlowSummary::setTotalOutflowsWithTaxes(const double &total_outflows_with_taxes) {
    m_total_outflows_with_taxes = total_outflows_with_taxes;
    m_total_outflows_with_taxes_isSet = true;
}

bool OAICashFlowSummary::is_total_outflows_with_taxes_Set() const{
    return m_total_outflows_with_taxes_isSet;
}

bool OAICashFlowSummary::is_total_outflows_with_taxes_Valid() const{
    return m_total_outflows_with_taxes_isValid;
}

double OAICashFlowSummary::getTotalOutflowsWithoutTaxes() const {
    return m_total_outflows_without_taxes;
}
void OAICashFlowSummary::setTotalOutflowsWithoutTaxes(const double &total_outflows_without_taxes) {
    m_total_outflows_without_taxes = total_outflows_without_taxes;
    m_total_outflows_without_taxes_isSet = true;
}

bool OAICashFlowSummary::is_total_outflows_without_taxes_Set() const{
    return m_total_outflows_without_taxes_isSet;
}

bool OAICashFlowSummary::is_total_outflows_without_taxes_Valid() const{
    return m_total_outflows_without_taxes_isValid;
}

double OAICashFlowSummary::getTotalTaxes() const {
    return m_total_taxes;
}
void OAICashFlowSummary::setTotalTaxes(const double &total_taxes) {
    m_total_taxes = total_taxes;
    m_total_taxes_isSet = true;
}

bool OAICashFlowSummary::is_total_taxes_Set() const{
    return m_total_taxes_isSet;
}

bool OAICashFlowSummary::is_total_taxes_Valid() const{
    return m_total_taxes_isValid;
}

bool OAICashFlowSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_surplus_deficit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_outflows_with_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_outflows_without_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashFlowSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
