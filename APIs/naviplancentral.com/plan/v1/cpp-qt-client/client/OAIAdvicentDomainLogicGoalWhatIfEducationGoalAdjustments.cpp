/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments() {
    this->initializeModel();
}

OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::~OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments() {}

void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_expenses_covered_isSet = false;
    m_expenses_covered_isValid = false;

    m_lump_sum_contribution_isSet = false;
    m_lump_sum_contribution_isValid = false;

    m_lump_sum_date_isSet = false;
    m_lump_sum_date_isValid = false;

    m_monthly_savings_contribution_isSet = false;
    m_monthly_savings_contribution_isValid = false;
}

void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_expenses_covered_isValid = ::OpenAPI::fromJsonValue(m_expenses_covered, json[QString("expensesCovered")]);
    m_expenses_covered_isSet = !json[QString("expensesCovered")].isNull() && m_expenses_covered_isValid;

    m_lump_sum_contribution_isValid = ::OpenAPI::fromJsonValue(m_lump_sum_contribution, json[QString("lumpSumContribution")]);
    m_lump_sum_contribution_isSet = !json[QString("lumpSumContribution")].isNull() && m_lump_sum_contribution_isValid;

    m_lump_sum_date_isValid = ::OpenAPI::fromJsonValue(m_lump_sum_date, json[QString("lumpSumDate")]);
    m_lump_sum_date_isSet = !json[QString("lumpSumDate")].isNull() && m_lump_sum_date_isValid;

    m_monthly_savings_contribution_isValid = ::OpenAPI::fromJsonValue(m_monthly_savings_contribution, json[QString("monthlySavingsContribution")]);
    m_monthly_savings_contribution_isSet = !json[QString("monthlySavingsContribution")].isNull() && m_monthly_savings_contribution_isValid;
}

QString OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_expenses_covered_isSet) {
        obj.insert(QString("expensesCovered"), ::OpenAPI::toJsonValue(m_expenses_covered));
    }
    if (m_lump_sum_contribution_isSet) {
        obj.insert(QString("lumpSumContribution"), ::OpenAPI::toJsonValue(m_lump_sum_contribution));
    }
    if (m_lump_sum_date_isSet) {
        obj.insert(QString("lumpSumDate"), ::OpenAPI::toJsonValue(m_lump_sum_date));
    }
    if (m_monthly_savings_contribution_isSet) {
        obj.insert(QString("monthlySavingsContribution"), ::OpenAPI::toJsonValue(m_monthly_savings_contribution));
    }
    return obj;
}

double OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::getDuration() const {
    return m_duration;
}
void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::getExpensesCovered() const {
    return m_expenses_covered;
}
void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::setExpensesCovered(const double &expenses_covered) {
    m_expenses_covered = expenses_covered;
    m_expenses_covered_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_expenses_covered_Set() const{
    return m_expenses_covered_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_expenses_covered_Valid() const{
    return m_expenses_covered_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::getLumpSumContribution() const {
    return m_lump_sum_contribution;
}
void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::setLumpSumContribution(const double &lump_sum_contribution) {
    m_lump_sum_contribution = lump_sum_contribution;
    m_lump_sum_contribution_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_lump_sum_contribution_Set() const{
    return m_lump_sum_contribution_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_lump_sum_contribution_Valid() const{
    return m_lump_sum_contribution_isValid;
}

QDateTime OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::getLumpSumDate() const {
    return m_lump_sum_date;
}
void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::setLumpSumDate(const QDateTime &lump_sum_date) {
    m_lump_sum_date = lump_sum_date;
    m_lump_sum_date_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_lump_sum_date_Set() const{
    return m_lump_sum_date_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_lump_sum_date_Valid() const{
    return m_lump_sum_date_isValid;
}

double OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::getMonthlySavingsContribution() const {
    return m_monthly_savings_contribution;
}
void OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::setMonthlySavingsContribution(const double &monthly_savings_contribution) {
    m_monthly_savings_contribution = monthly_savings_contribution;
    m_monthly_savings_contribution_isSet = true;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_monthly_savings_contribution_Set() const{
    return m_monthly_savings_contribution_isSet;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::is_monthly_savings_contribution_Valid() const{
    return m_monthly_savings_contribution_isValid;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expenses_covered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lump_sum_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lump_sum_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_savings_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
