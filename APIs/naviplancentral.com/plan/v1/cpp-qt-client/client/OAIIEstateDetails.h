/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIEstateDetails.h
 *
 * 
 */

#ifndef OAIIEstateDetails_H
#define OAIIEstateDetails_H

#include <QJsonObject>

#include "OAIDate.h"
#include "OAIDescriptiveBoolean.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescriptiveBoolean;
class OAIDate;

class OAIIEstateDetails : public OAIObject {
public:
    OAIIEstateDetails();
    OAIIEstateDetails(QString json);
    ~OAIIEstateDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDescriptiveBoolean getEnableFiftyPercentSolution() const;
    void setEnableFiftyPercentSolution(const OAIDescriptiveBoolean &enable_fifty_percent_solution);
    bool is_enable_fifty_percent_solution_Set() const;
    bool is_enable_fifty_percent_solution_Valid() const;

    OAIDescriptiveBoolean getEstateFreeze() const;
    void setEstateFreeze(const OAIDescriptiveBoolean &estate_freeze);
    bool is_estate_freeze_Set() const;
    bool is_estate_freeze_Valid() const;

    OAIDate getEstateFreezeDate() const;
    void setEstateFreezeDate(const OAIDate &estate_freeze_date);
    bool is_estate_freeze_date_Set() const;
    bool is_estate_freeze_date_Valid() const;

    QString getShareOptionsAtFirstDeath() const;
    void setShareOptionsAtFirstDeath(const QString &share_options_at_first_death);
    bool is_share_options_at_first_death_Set() const;
    bool is_share_options_at_first_death_Valid() const;

    QString getShareOptionsAtSecondDeathAndDeathInTheSameYear() const;
    void setShareOptionsAtSecondDeathAndDeathInTheSameYear(const QString &share_options_at_second_death_and_death_in_the_same_year);
    bool is_share_options_at_second_death_and_death_in_the_same_year_Set() const;
    bool is_share_options_at_second_death_and_death_in_the_same_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDescriptiveBoolean m_enable_fifty_percent_solution;
    bool m_enable_fifty_percent_solution_isSet;
    bool m_enable_fifty_percent_solution_isValid;

    OAIDescriptiveBoolean m_estate_freeze;
    bool m_estate_freeze_isSet;
    bool m_estate_freeze_isValid;

    OAIDate m_estate_freeze_date;
    bool m_estate_freeze_date_isSet;
    bool m_estate_freeze_date_isValid;

    QString m_share_options_at_first_death;
    bool m_share_options_at_first_death_isSet;
    bool m_share_options_at_first_death_isValid;

    QString m_share_options_at_second_death_and_death_in_the_same_year;
    bool m_share_options_at_second_death_and_death_in_the_same_year_isSet;
    bool m_share_options_at_second_death_and_death_in_the_same_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIEstateDetails)

#endif // OAIIEstateDetails_H
