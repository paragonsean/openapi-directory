/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIAccumulationCategoryData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIAccumulationCategoryData::OAIIAccumulationCategoryData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIAccumulationCategoryData::OAIIAccumulationCategoryData() {
    this->initializeModel();
}

OAIIAccumulationCategoryData::~OAIIAccumulationCategoryData() {}

void OAIIAccumulationCategoryData::initializeModel() {

    m_all_assets_isSet = false;
    m_all_assets_isValid = false;

    m_locked_in_isSet = false;
    m_locked_in_isValid = false;

    m_non_qualified_isSet = false;
    m_non_qualified_isValid = false;

    m_qualified_isSet = false;
    m_qualified_isValid = false;

    m_roth_isSet = false;
    m_roth_isValid = false;

    m_tfsa_isSet = false;
    m_tfsa_isValid = false;
}

void OAIIAccumulationCategoryData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIAccumulationCategoryData::fromJsonObject(QJsonObject json) {

    m_all_assets_isValid = ::OpenAPI::fromJsonValue(m_all_assets, json[QString("allAssets")]);
    m_all_assets_isSet = !json[QString("allAssets")].isNull() && m_all_assets_isValid;

    m_locked_in_isValid = ::OpenAPI::fromJsonValue(m_locked_in, json[QString("lockedIn")]);
    m_locked_in_isSet = !json[QString("lockedIn")].isNull() && m_locked_in_isValid;

    m_non_qualified_isValid = ::OpenAPI::fromJsonValue(m_non_qualified, json[QString("nonQualified")]);
    m_non_qualified_isSet = !json[QString("nonQualified")].isNull() && m_non_qualified_isValid;

    m_qualified_isValid = ::OpenAPI::fromJsonValue(m_qualified, json[QString("qualified")]);
    m_qualified_isSet = !json[QString("qualified")].isNull() && m_qualified_isValid;

    m_roth_isValid = ::OpenAPI::fromJsonValue(m_roth, json[QString("roth")]);
    m_roth_isSet = !json[QString("roth")].isNull() && m_roth_isValid;

    m_tfsa_isValid = ::OpenAPI::fromJsonValue(m_tfsa, json[QString("tfsa")]);
    m_tfsa_isSet = !json[QString("tfsa")].isNull() && m_tfsa_isValid;
}

QString OAIIAccumulationCategoryData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIAccumulationCategoryData::asJsonObject() const {
    QJsonObject obj;
    if (m_all_assets.isSet()) {
        obj.insert(QString("allAssets"), ::OpenAPI::toJsonValue(m_all_assets));
    }
    if (m_locked_in.isSet()) {
        obj.insert(QString("lockedIn"), ::OpenAPI::toJsonValue(m_locked_in));
    }
    if (m_non_qualified.isSet()) {
        obj.insert(QString("nonQualified"), ::OpenAPI::toJsonValue(m_non_qualified));
    }
    if (m_qualified.isSet()) {
        obj.insert(QString("qualified"), ::OpenAPI::toJsonValue(m_qualified));
    }
    if (m_roth.isSet()) {
        obj.insert(QString("roth"), ::OpenAPI::toJsonValue(m_roth));
    }
    if (m_tfsa.isSet()) {
        obj.insert(QString("tfsa"), ::OpenAPI::toJsonValue(m_tfsa));
    }
    return obj;
}

OAICurrency OAIIAccumulationCategoryData::getAllAssets() const {
    return m_all_assets;
}
void OAIIAccumulationCategoryData::setAllAssets(const OAICurrency &all_assets) {
    m_all_assets = all_assets;
    m_all_assets_isSet = true;
}

bool OAIIAccumulationCategoryData::is_all_assets_Set() const{
    return m_all_assets_isSet;
}

bool OAIIAccumulationCategoryData::is_all_assets_Valid() const{
    return m_all_assets_isValid;
}

OAICurrency OAIIAccumulationCategoryData::getLockedIn() const {
    return m_locked_in;
}
void OAIIAccumulationCategoryData::setLockedIn(const OAICurrency &locked_in) {
    m_locked_in = locked_in;
    m_locked_in_isSet = true;
}

bool OAIIAccumulationCategoryData::is_locked_in_Set() const{
    return m_locked_in_isSet;
}

bool OAIIAccumulationCategoryData::is_locked_in_Valid() const{
    return m_locked_in_isValid;
}

OAICurrency OAIIAccumulationCategoryData::getNonQualified() const {
    return m_non_qualified;
}
void OAIIAccumulationCategoryData::setNonQualified(const OAICurrency &non_qualified) {
    m_non_qualified = non_qualified;
    m_non_qualified_isSet = true;
}

bool OAIIAccumulationCategoryData::is_non_qualified_Set() const{
    return m_non_qualified_isSet;
}

bool OAIIAccumulationCategoryData::is_non_qualified_Valid() const{
    return m_non_qualified_isValid;
}

OAICurrency OAIIAccumulationCategoryData::getQualified() const {
    return m_qualified;
}
void OAIIAccumulationCategoryData::setQualified(const OAICurrency &qualified) {
    m_qualified = qualified;
    m_qualified_isSet = true;
}

bool OAIIAccumulationCategoryData::is_qualified_Set() const{
    return m_qualified_isSet;
}

bool OAIIAccumulationCategoryData::is_qualified_Valid() const{
    return m_qualified_isValid;
}

OAICurrency OAIIAccumulationCategoryData::getRoth() const {
    return m_roth;
}
void OAIIAccumulationCategoryData::setRoth(const OAICurrency &roth) {
    m_roth = roth;
    m_roth_isSet = true;
}

bool OAIIAccumulationCategoryData::is_roth_Set() const{
    return m_roth_isSet;
}

bool OAIIAccumulationCategoryData::is_roth_Valid() const{
    return m_roth_isValid;
}

OAICurrency OAIIAccumulationCategoryData::getTfsa() const {
    return m_tfsa;
}
void OAIIAccumulationCategoryData::setTfsa(const OAICurrency &tfsa) {
    m_tfsa = tfsa;
    m_tfsa_isSet = true;
}

bool OAIIAccumulationCategoryData::is_tfsa_Set() const{
    return m_tfsa_isSet;
}

bool OAIIAccumulationCategoryData::is_tfsa_Valid() const{
    return m_tfsa_isValid;
}

bool OAIIAccumulationCategoryData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_qualified.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfsa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIAccumulationCategoryData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
