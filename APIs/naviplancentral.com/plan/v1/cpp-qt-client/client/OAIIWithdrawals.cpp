/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIWithdrawals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIWithdrawals::OAIIWithdrawals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIWithdrawals::OAIIWithdrawals() {
    this->initializeModel();
}

OAIIWithdrawals::~OAIIWithdrawals() {}

void OAIIWithdrawals::initializeModel() {

    m_loan_repayments_to_shareholder_isSet = false;
    m_loan_repayments_to_shareholder_isValid = false;

    m_manual_dividend_distributions_isSet = false;
    m_manual_dividend_distributions_isValid = false;

    m_share_redemptions_isSet = false;
    m_share_redemptions_isValid = false;
}

void OAIIWithdrawals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIWithdrawals::fromJsonObject(QJsonObject json) {

    m_loan_repayments_to_shareholder_isValid = ::OpenAPI::fromJsonValue(m_loan_repayments_to_shareholder, json[QString("loanRepaymentsToShareholder")]);
    m_loan_repayments_to_shareholder_isSet = !json[QString("loanRepaymentsToShareholder")].isNull() && m_loan_repayments_to_shareholder_isValid;

    m_manual_dividend_distributions_isValid = ::OpenAPI::fromJsonValue(m_manual_dividend_distributions, json[QString("manualDividendDistributions")]);
    m_manual_dividend_distributions_isSet = !json[QString("manualDividendDistributions")].isNull() && m_manual_dividend_distributions_isValid;

    m_share_redemptions_isValid = ::OpenAPI::fromJsonValue(m_share_redemptions, json[QString("shareRedemptions")]);
    m_share_redemptions_isSet = !json[QString("shareRedemptions")].isNull() && m_share_redemptions_isValid;
}

QString OAIIWithdrawals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIWithdrawals::asJsonObject() const {
    QJsonObject obj;
    if (m_loan_repayments_to_shareholder.size() > 0) {
        obj.insert(QString("loanRepaymentsToShareholder"), ::OpenAPI::toJsonValue(m_loan_repayments_to_shareholder));
    }
    if (m_manual_dividend_distributions.size() > 0) {
        obj.insert(QString("manualDividendDistributions"), ::OpenAPI::toJsonValue(m_manual_dividend_distributions));
    }
    if (m_share_redemptions.size() > 0) {
        obj.insert(QString("shareRedemptions"), ::OpenAPI::toJsonValue(m_share_redemptions));
    }
    return obj;
}

QList<OAIILoanRepaymentToShareholder> OAIIWithdrawals::getLoanRepaymentsToShareholder() const {
    return m_loan_repayments_to_shareholder;
}
void OAIIWithdrawals::setLoanRepaymentsToShareholder(const QList<OAIILoanRepaymentToShareholder> &loan_repayments_to_shareholder) {
    m_loan_repayments_to_shareholder = loan_repayments_to_shareholder;
    m_loan_repayments_to_shareholder_isSet = true;
}

bool OAIIWithdrawals::is_loan_repayments_to_shareholder_Set() const{
    return m_loan_repayments_to_shareholder_isSet;
}

bool OAIIWithdrawals::is_loan_repayments_to_shareholder_Valid() const{
    return m_loan_repayments_to_shareholder_isValid;
}

QList<OAIIManualDividendDistribution> OAIIWithdrawals::getManualDividendDistributions() const {
    return m_manual_dividend_distributions;
}
void OAIIWithdrawals::setManualDividendDistributions(const QList<OAIIManualDividendDistribution> &manual_dividend_distributions) {
    m_manual_dividend_distributions = manual_dividend_distributions;
    m_manual_dividend_distributions_isSet = true;
}

bool OAIIWithdrawals::is_manual_dividend_distributions_Set() const{
    return m_manual_dividend_distributions_isSet;
}

bool OAIIWithdrawals::is_manual_dividend_distributions_Valid() const{
    return m_manual_dividend_distributions_isValid;
}

QList<OAIIShareRedemption> OAIIWithdrawals::getShareRedemptions() const {
    return m_share_redemptions;
}
void OAIIWithdrawals::setShareRedemptions(const QList<OAIIShareRedemption> &share_redemptions) {
    m_share_redemptions = share_redemptions;
    m_share_redemptions_isSet = true;
}

bool OAIIWithdrawals::is_share_redemptions_Set() const{
    return m_share_redemptions_isSet;
}

bool OAIIWithdrawals::is_share_redemptions_Valid() const{
    return m_share_redemptions_isValid;
}

bool OAIIWithdrawals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loan_repayments_to_shareholder.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_dividend_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_redemptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIWithdrawals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
