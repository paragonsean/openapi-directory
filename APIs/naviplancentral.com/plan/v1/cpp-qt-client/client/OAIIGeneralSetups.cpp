/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIGeneralSetups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIGeneralSetups::OAIIGeneralSetups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIGeneralSetups::OAIIGeneralSetups() {
    this->initializeModel();
}

OAIIGeneralSetups::~OAIIGeneralSetups() {}

void OAIIGeneralSetups::initializeModel() {

    m_applied_business_limit_isSet = false;
    m_applied_business_limit_isValid = false;

    m_good_will_future_sales_market_value_isSet = false;
    m_good_will_future_sales_market_value_isValid = false;

    m_percentage_of_limit_to_use_isSet = false;
    m_percentage_of_limit_to_use_isValid = false;

    m_previous_year_adjusted_aggregate_investment_income_isSet = false;
    m_previous_year_adjusted_aggregate_investment_income_isValid = false;
}

void OAIIGeneralSetups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIGeneralSetups::fromJsonObject(QJsonObject json) {

    m_applied_business_limit_isValid = ::OpenAPI::fromJsonValue(m_applied_business_limit, json[QString("appliedBusinessLimit")]);
    m_applied_business_limit_isSet = !json[QString("appliedBusinessLimit")].isNull() && m_applied_business_limit_isValid;

    m_good_will_future_sales_market_value_isValid = ::OpenAPI::fromJsonValue(m_good_will_future_sales_market_value, json[QString("goodWillFutureSalesMarketValue")]);
    m_good_will_future_sales_market_value_isSet = !json[QString("goodWillFutureSalesMarketValue")].isNull() && m_good_will_future_sales_market_value_isValid;

    m_percentage_of_limit_to_use_isValid = ::OpenAPI::fromJsonValue(m_percentage_of_limit_to_use, json[QString("percentageOfLimitToUse")]);
    m_percentage_of_limit_to_use_isSet = !json[QString("percentageOfLimitToUse")].isNull() && m_percentage_of_limit_to_use_isValid;

    m_previous_year_adjusted_aggregate_investment_income_isValid = ::OpenAPI::fromJsonValue(m_previous_year_adjusted_aggregate_investment_income, json[QString("previousYearAdjustedAggregateInvestmentIncome")]);
    m_previous_year_adjusted_aggregate_investment_income_isSet = !json[QString("previousYearAdjustedAggregateInvestmentIncome")].isNull() && m_previous_year_adjusted_aggregate_investment_income_isValid;
}

QString OAIIGeneralSetups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIGeneralSetups::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_business_limit.isSet()) {
        obj.insert(QString("appliedBusinessLimit"), ::OpenAPI::toJsonValue(m_applied_business_limit));
    }
    if (m_good_will_future_sales_market_value.isSet()) {
        obj.insert(QString("goodWillFutureSalesMarketValue"), ::OpenAPI::toJsonValue(m_good_will_future_sales_market_value));
    }
    if (m_percentage_of_limit_to_use.isSet()) {
        obj.insert(QString("percentageOfLimitToUse"), ::OpenAPI::toJsonValue(m_percentage_of_limit_to_use));
    }
    if (m_previous_year_adjusted_aggregate_investment_income.isSet()) {
        obj.insert(QString("previousYearAdjustedAggregateInvestmentIncome"), ::OpenAPI::toJsonValue(m_previous_year_adjusted_aggregate_investment_income));
    }
    return obj;
}

OAICurrency OAIIGeneralSetups::getAppliedBusinessLimit() const {
    return m_applied_business_limit;
}
void OAIIGeneralSetups::setAppliedBusinessLimit(const OAICurrency &applied_business_limit) {
    m_applied_business_limit = applied_business_limit;
    m_applied_business_limit_isSet = true;
}

bool OAIIGeneralSetups::is_applied_business_limit_Set() const{
    return m_applied_business_limit_isSet;
}

bool OAIIGeneralSetups::is_applied_business_limit_Valid() const{
    return m_applied_business_limit_isValid;
}

OAICurrency OAIIGeneralSetups::getGoodWillFutureSalesMarketValue() const {
    return m_good_will_future_sales_market_value;
}
void OAIIGeneralSetups::setGoodWillFutureSalesMarketValue(const OAICurrency &good_will_future_sales_market_value) {
    m_good_will_future_sales_market_value = good_will_future_sales_market_value;
    m_good_will_future_sales_market_value_isSet = true;
}

bool OAIIGeneralSetups::is_good_will_future_sales_market_value_Set() const{
    return m_good_will_future_sales_market_value_isSet;
}

bool OAIIGeneralSetups::is_good_will_future_sales_market_value_Valid() const{
    return m_good_will_future_sales_market_value_isValid;
}

OAIPercent OAIIGeneralSetups::getPercentageOfLimitToUse() const {
    return m_percentage_of_limit_to_use;
}
void OAIIGeneralSetups::setPercentageOfLimitToUse(const OAIPercent &percentage_of_limit_to_use) {
    m_percentage_of_limit_to_use = percentage_of_limit_to_use;
    m_percentage_of_limit_to_use_isSet = true;
}

bool OAIIGeneralSetups::is_percentage_of_limit_to_use_Set() const{
    return m_percentage_of_limit_to_use_isSet;
}

bool OAIIGeneralSetups::is_percentage_of_limit_to_use_Valid() const{
    return m_percentage_of_limit_to_use_isValid;
}

OAICurrency OAIIGeneralSetups::getPreviousYearAdjustedAggregateInvestmentIncome() const {
    return m_previous_year_adjusted_aggregate_investment_income;
}
void OAIIGeneralSetups::setPreviousYearAdjustedAggregateInvestmentIncome(const OAICurrency &previous_year_adjusted_aggregate_investment_income) {
    m_previous_year_adjusted_aggregate_investment_income = previous_year_adjusted_aggregate_investment_income;
    m_previous_year_adjusted_aggregate_investment_income_isSet = true;
}

bool OAIIGeneralSetups::is_previous_year_adjusted_aggregate_investment_income_Set() const{
    return m_previous_year_adjusted_aggregate_investment_income_isSet;
}

bool OAIIGeneralSetups::is_previous_year_adjusted_aggregate_investment_income_Valid() const{
    return m_previous_year_adjusted_aggregate_investment_income_isValid;
}

bool OAIIGeneralSetups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_business_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_will_future_sales_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_of_limit_to_use.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_year_adjusted_aggregate_investment_income.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIGeneralSetups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
