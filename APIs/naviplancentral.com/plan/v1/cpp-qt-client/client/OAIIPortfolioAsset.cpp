/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPortfolioAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPortfolioAsset::OAIIPortfolioAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPortfolioAsset::OAIIPortfolioAsset() {
    this->initializeModel();
}

OAIIPortfolioAsset::~OAIIPortfolioAsset() {}

void OAIIPortfolioAsset::initializeModel() {

    m_applicable_range_retirement_liquidated_assets_isSet = false;
    m_applicable_range_retirement_liquidated_assets_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_goal_funding_description_isSet = false;
    m_goal_funding_description_isValid = false;

    m_goal_funding_goal_id_isSet = false;
    m_goal_funding_goal_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_income_reinvested_isSet = false;
    m_income_reinvested_isValid = false;

    m_is_system_generated_isSet = false;
    m_is_system_generated_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_parent_account_id_isSet = false;
    m_parent_account_id_isValid = false;

    m_rate_of_return_isSet = false;
    m_rate_of_return_isValid = false;

    m_redemption_strategies_isSet = false;
    m_redemption_strategies_isValid = false;
}

void OAIIPortfolioAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPortfolioAsset::fromJsonObject(QJsonObject json) {

    m_applicable_range_retirement_liquidated_assets_isValid = ::OpenAPI::fromJsonValue(m_applicable_range_retirement_liquidated_assets, json[QString("applicableRangeRetirementLiquidatedAssets")]);
    m_applicable_range_retirement_liquidated_assets_isSet = !json[QString("applicableRangeRetirementLiquidatedAssets")].isNull() && m_applicable_range_retirement_liquidated_assets_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("costBasis")]);
    m_cost_basis_isSet = !json[QString("costBasis")].isNull() && m_cost_basis_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_goal_funding_description_isValid = ::OpenAPI::fromJsonValue(m_goal_funding_description, json[QString("goalFundingDescription")]);
    m_goal_funding_description_isSet = !json[QString("goalFundingDescription")].isNull() && m_goal_funding_description_isValid;

    m_goal_funding_goal_id_isValid = ::OpenAPI::fromJsonValue(m_goal_funding_goal_id, json[QString("goalFundingGoalId")]);
    m_goal_funding_goal_id_isSet = !json[QString("goalFundingGoalId")].isNull() && m_goal_funding_goal_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_income_reinvested_isValid = ::OpenAPI::fromJsonValue(m_income_reinvested, json[QString("incomeReinvested")]);
    m_income_reinvested_isSet = !json[QString("incomeReinvested")].isNull() && m_income_reinvested_isValid;

    m_is_system_generated_isValid = ::OpenAPI::fromJsonValue(m_is_system_generated, json[QString("isSystemGenerated")]);
    m_is_system_generated_isSet = !json[QString("isSystemGenerated")].isNull() && m_is_system_generated_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_parent_account_id_isValid = ::OpenAPI::fromJsonValue(m_parent_account_id, json[QString("parentAccountId")]);
    m_parent_account_id_isSet = !json[QString("parentAccountId")].isNull() && m_parent_account_id_isValid;

    m_rate_of_return_isValid = ::OpenAPI::fromJsonValue(m_rate_of_return, json[QString("rateOfReturn")]);
    m_rate_of_return_isSet = !json[QString("rateOfReturn")].isNull() && m_rate_of_return_isValid;

    m_redemption_strategies_isValid = ::OpenAPI::fromJsonValue(m_redemption_strategies, json[QString("redemptionStrategies")]);
    m_redemption_strategies_isSet = !json[QString("redemptionStrategies")].isNull() && m_redemption_strategies_isValid;
}

QString OAIIPortfolioAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPortfolioAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_range_retirement_liquidated_assets.isSet()) {
        obj.insert(QString("applicableRangeRetirementLiquidatedAssets"), ::OpenAPI::toJsonValue(m_applicable_range_retirement_liquidated_assets));
    }
    if (m_cost_basis.isSet()) {
        obj.insert(QString("costBasis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_goal_funding_description_isSet) {
        obj.insert(QString("goalFundingDescription"), ::OpenAPI::toJsonValue(m_goal_funding_description));
    }
    if (m_goal_funding_goal_id.isSet()) {
        obj.insert(QString("goalFundingGoalId"), ::OpenAPI::toJsonValue(m_goal_funding_goal_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_income_reinvested.isSet()) {
        obj.insert(QString("incomeReinvested"), ::OpenAPI::toJsonValue(m_income_reinvested));
    }
    if (m_is_system_generated_isSet) {
        obj.insert(QString("isSystemGenerated"), ::OpenAPI::toJsonValue(m_is_system_generated));
    }
    if (m_market_value.isSet()) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_parent_account_id_isSet) {
        obj.insert(QString("parentAccountId"), ::OpenAPI::toJsonValue(m_parent_account_id));
    }
    if (m_rate_of_return.isSet()) {
        obj.insert(QString("rateOfReturn"), ::OpenAPI::toJsonValue(m_rate_of_return));
    }
    if (m_redemption_strategies.isSet()) {
        obj.insert(QString("redemptionStrategies"), ::OpenAPI::toJsonValue(m_redemption_strategies));
    }
    return obj;
}

OAIFormattedDateRange OAIIPortfolioAsset::getApplicableRangeRetirementLiquidatedAssets() const {
    return m_applicable_range_retirement_liquidated_assets;
}
void OAIIPortfolioAsset::setApplicableRangeRetirementLiquidatedAssets(const OAIFormattedDateRange &applicable_range_retirement_liquidated_assets) {
    m_applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets;
    m_applicable_range_retirement_liquidated_assets_isSet = true;
}

bool OAIIPortfolioAsset::is_applicable_range_retirement_liquidated_assets_Set() const{
    return m_applicable_range_retirement_liquidated_assets_isSet;
}

bool OAIIPortfolioAsset::is_applicable_range_retirement_liquidated_assets_Valid() const{
    return m_applicable_range_retirement_liquidated_assets_isValid;
}

OAICurrency OAIIPortfolioAsset::getCostBasis() const {
    return m_cost_basis;
}
void OAIIPortfolioAsset::setCostBasis(const OAICurrency &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIIPortfolioAsset::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIIPortfolioAsset::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

QString OAIIPortfolioAsset::getDescription() const {
    return m_description;
}
void OAIIPortfolioAsset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIPortfolioAsset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIPortfolioAsset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIPortfolioAsset::getGoalFundingDescription() const {
    return m_goal_funding_description;
}
void OAIIPortfolioAsset::setGoalFundingDescription(const QString &goal_funding_description) {
    m_goal_funding_description = goal_funding_description;
    m_goal_funding_description_isSet = true;
}

bool OAIIPortfolioAsset::is_goal_funding_description_Set() const{
    return m_goal_funding_description_isSet;
}

bool OAIIPortfolioAsset::is_goal_funding_description_Valid() const{
    return m_goal_funding_description_isValid;
}

OAIGoalId OAIIPortfolioAsset::getGoalFundingGoalId() const {
    return m_goal_funding_goal_id;
}
void OAIIPortfolioAsset::setGoalFundingGoalId(const OAIGoalId &goal_funding_goal_id) {
    m_goal_funding_goal_id = goal_funding_goal_id;
    m_goal_funding_goal_id_isSet = true;
}

bool OAIIPortfolioAsset::is_goal_funding_goal_id_Set() const{
    return m_goal_funding_goal_id_isSet;
}

bool OAIIPortfolioAsset::is_goal_funding_goal_id_Valid() const{
    return m_goal_funding_goal_id_isValid;
}

QString OAIIPortfolioAsset::getId() const {
    return m_id;
}
void OAIIPortfolioAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIPortfolioAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIPortfolioAsset::is_id_Valid() const{
    return m_id_isValid;
}

OAIIReturnIncomeReinvestedDetails OAIIPortfolioAsset::getIncomeReinvested() const {
    return m_income_reinvested;
}
void OAIIPortfolioAsset::setIncomeReinvested(const OAIIReturnIncomeReinvestedDetails &income_reinvested) {
    m_income_reinvested = income_reinvested;
    m_income_reinvested_isSet = true;
}

bool OAIIPortfolioAsset::is_income_reinvested_Set() const{
    return m_income_reinvested_isSet;
}

bool OAIIPortfolioAsset::is_income_reinvested_Valid() const{
    return m_income_reinvested_isValid;
}

bool OAIIPortfolioAsset::isIsSystemGenerated() const {
    return m_is_system_generated;
}
void OAIIPortfolioAsset::setIsSystemGenerated(const bool &is_system_generated) {
    m_is_system_generated = is_system_generated;
    m_is_system_generated_isSet = true;
}

bool OAIIPortfolioAsset::is_is_system_generated_Set() const{
    return m_is_system_generated_isSet;
}

bool OAIIPortfolioAsset::is_is_system_generated_Valid() const{
    return m_is_system_generated_isValid;
}

OAICurrency OAIIPortfolioAsset::getMarketValue() const {
    return m_market_value;
}
void OAIIPortfolioAsset::setMarketValue(const OAICurrency &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIIPortfolioAsset::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIIPortfolioAsset::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIIPortfolioAsset::getParentAccountId() const {
    return m_parent_account_id;
}
void OAIIPortfolioAsset::setParentAccountId(const QString &parent_account_id) {
    m_parent_account_id = parent_account_id;
    m_parent_account_id_isSet = true;
}

bool OAIIPortfolioAsset::is_parent_account_id_Set() const{
    return m_parent_account_id_isSet;
}

bool OAIIPortfolioAsset::is_parent_account_id_Valid() const{
    return m_parent_account_id_isValid;
}

OAIIRateOfReturnDetails OAIIPortfolioAsset::getRateOfReturn() const {
    return m_rate_of_return;
}
void OAIIPortfolioAsset::setRateOfReturn(const OAIIRateOfReturnDetails &rate_of_return) {
    m_rate_of_return = rate_of_return;
    m_rate_of_return_isSet = true;
}

bool OAIIPortfolioAsset::is_rate_of_return_Set() const{
    return m_rate_of_return_isSet;
}

bool OAIIPortfolioAsset::is_rate_of_return_Valid() const{
    return m_rate_of_return_isValid;
}

OAIIRedemptionStrategies OAIIPortfolioAsset::getRedemptionStrategies() const {
    return m_redemption_strategies;
}
void OAIIPortfolioAsset::setRedemptionStrategies(const OAIIRedemptionStrategies &redemption_strategies) {
    m_redemption_strategies = redemption_strategies;
    m_redemption_strategies_isSet = true;
}

bool OAIIPortfolioAsset::is_redemption_strategies_Set() const{
    return m_redemption_strategies_isSet;
}

bool OAIIPortfolioAsset::is_redemption_strategies_Valid() const{
    return m_redemption_strategies_isValid;
}

bool OAIIPortfolioAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_range_retirement_liquidated_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_funding_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_funding_goal_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_reinvested.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_of_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_strategies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPortfolioAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
