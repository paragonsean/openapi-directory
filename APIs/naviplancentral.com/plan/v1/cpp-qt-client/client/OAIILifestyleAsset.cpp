/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILifestyleAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILifestyleAsset::OAIILifestyleAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILifestyleAsset::OAIILifestyleAsset() {
    this->initializeModel();
}

OAIILifestyleAsset::~OAIILifestyleAsset() {}

void OAIILifestyleAsset::initializeModel() {

    m_after_tax_proceeds_account_name_isSet = false;
    m_after_tax_proceeds_account_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_future_value_projected_gross_sale_value_isSet = false;
    m_future_value_projected_gross_sale_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_major_purchase_goal_isSet = false;
    m_is_major_purchase_goal_isValid = false;

    m_market_value_as_of_isSet = false;
    m_market_value_as_of_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pre_tax_growth_rate_isSet = false;
    m_pre_tax_growth_rate_isValid = false;

    m_present_value_projected_gross_sale_value_isSet = false;
    m_present_value_projected_gross_sale_value_isValid = false;

    m_projected_sale_date_isSet = false;
    m_projected_sale_date_isValid = false;

    m_purchase_amount_isSet = false;
    m_purchase_amount_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_selling_cost_percent_isSet = false;
    m_selling_cost_percent_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIILifestyleAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILifestyleAsset::fromJsonObject(QJsonObject json) {

    m_after_tax_proceeds_account_name_isValid = ::OpenAPI::fromJsonValue(m_after_tax_proceeds_account_name, json[QString("afterTaxProceedsAccountName")]);
    m_after_tax_proceeds_account_name_isSet = !json[QString("afterTaxProceedsAccountName")].isNull() && m_after_tax_proceeds_account_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_future_value_projected_gross_sale_value_isValid = ::OpenAPI::fromJsonValue(m_future_value_projected_gross_sale_value, json[QString("futureValueProjectedGrossSaleValue")]);
    m_future_value_projected_gross_sale_value_isSet = !json[QString("futureValueProjectedGrossSaleValue")].isNull() && m_future_value_projected_gross_sale_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_major_purchase_goal_isValid = ::OpenAPI::fromJsonValue(m_is_major_purchase_goal, json[QString("isMajorPurchaseGoal")]);
    m_is_major_purchase_goal_isSet = !json[QString("isMajorPurchaseGoal")].isNull() && m_is_major_purchase_goal_isValid;

    m_market_value_as_of_isValid = ::OpenAPI::fromJsonValue(m_market_value_as_of, json[QString("marketValueAsOf")]);
    m_market_value_as_of_isSet = !json[QString("marketValueAsOf")].isNull() && m_market_value_as_of_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pre_tax_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_pre_tax_growth_rate, json[QString("preTaxGrowthRate")]);
    m_pre_tax_growth_rate_isSet = !json[QString("preTaxGrowthRate")].isNull() && m_pre_tax_growth_rate_isValid;

    m_present_value_projected_gross_sale_value_isValid = ::OpenAPI::fromJsonValue(m_present_value_projected_gross_sale_value, json[QString("presentValueProjectedGrossSaleValue")]);
    m_present_value_projected_gross_sale_value_isSet = !json[QString("presentValueProjectedGrossSaleValue")].isNull() && m_present_value_projected_gross_sale_value_isValid;

    m_projected_sale_date_isValid = ::OpenAPI::fromJsonValue(m_projected_sale_date, json[QString("projectedSaleDate")]);
    m_projected_sale_date_isSet = !json[QString("projectedSaleDate")].isNull() && m_projected_sale_date_isValid;

    m_purchase_amount_isValid = ::OpenAPI::fromJsonValue(m_purchase_amount, json[QString("purchaseAmount")]);
    m_purchase_amount_isSet = !json[QString("purchaseAmount")].isNull() && m_purchase_amount_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_selling_cost_percent_isValid = ::OpenAPI::fromJsonValue(m_selling_cost_percent, json[QString("sellingCostPercent")]);
    m_selling_cost_percent_isSet = !json[QString("sellingCostPercent")].isNull() && m_selling_cost_percent_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIILifestyleAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILifestyleAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_after_tax_proceeds_account_name_isSet) {
        obj.insert(QString("afterTaxProceedsAccountName"), ::OpenAPI::toJsonValue(m_after_tax_proceeds_account_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_future_value_projected_gross_sale_value.isSet()) {
        obj.insert(QString("futureValueProjectedGrossSaleValue"), ::OpenAPI::toJsonValue(m_future_value_projected_gross_sale_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_major_purchase_goal_isSet) {
        obj.insert(QString("isMajorPurchaseGoal"), ::OpenAPI::toJsonValue(m_is_major_purchase_goal));
    }
    if (m_market_value_as_of.isSet()) {
        obj.insert(QString("marketValueAsOf"), ::OpenAPI::toJsonValue(m_market_value_as_of));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pre_tax_growth_rate.isSet()) {
        obj.insert(QString("preTaxGrowthRate"), ::OpenAPI::toJsonValue(m_pre_tax_growth_rate));
    }
    if (m_present_value_projected_gross_sale_value.isSet()) {
        obj.insert(QString("presentValueProjectedGrossSaleValue"), ::OpenAPI::toJsonValue(m_present_value_projected_gross_sale_value));
    }
    if (m_projected_sale_date.isSet()) {
        obj.insert(QString("projectedSaleDate"), ::OpenAPI::toJsonValue(m_projected_sale_date));
    }
    if (m_purchase_amount.isSet()) {
        obj.insert(QString("purchaseAmount"), ::OpenAPI::toJsonValue(m_purchase_amount));
    }
    if (m_purchase_date.isSet()) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_selling_cost_percent.isSet()) {
        obj.insert(QString("sellingCostPercent"), ::OpenAPI::toJsonValue(m_selling_cost_percent));
    }
    if (m_standard_deviation.isSet()) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIILifestyleAsset::getAfterTaxProceedsAccountName() const {
    return m_after_tax_proceeds_account_name;
}
void OAIILifestyleAsset::setAfterTaxProceedsAccountName(const QString &after_tax_proceeds_account_name) {
    m_after_tax_proceeds_account_name = after_tax_proceeds_account_name;
    m_after_tax_proceeds_account_name_isSet = true;
}

bool OAIILifestyleAsset::is_after_tax_proceeds_account_name_Set() const{
    return m_after_tax_proceeds_account_name_isSet;
}

bool OAIILifestyleAsset::is_after_tax_proceeds_account_name_Valid() const{
    return m_after_tax_proceeds_account_name_isValid;
}

QString OAIILifestyleAsset::getDescription() const {
    return m_description;
}
void OAIILifestyleAsset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIILifestyleAsset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIILifestyleAsset::is_description_Valid() const{
    return m_description_isValid;
}

OAICurrency OAIILifestyleAsset::getFutureValueProjectedGrossSaleValue() const {
    return m_future_value_projected_gross_sale_value;
}
void OAIILifestyleAsset::setFutureValueProjectedGrossSaleValue(const OAICurrency &future_value_projected_gross_sale_value) {
    m_future_value_projected_gross_sale_value = future_value_projected_gross_sale_value;
    m_future_value_projected_gross_sale_value_isSet = true;
}

bool OAIILifestyleAsset::is_future_value_projected_gross_sale_value_Set() const{
    return m_future_value_projected_gross_sale_value_isSet;
}

bool OAIILifestyleAsset::is_future_value_projected_gross_sale_value_Valid() const{
    return m_future_value_projected_gross_sale_value_isValid;
}

QString OAIILifestyleAsset::getId() const {
    return m_id;
}
void OAIILifestyleAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIILifestyleAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIILifestyleAsset::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIILifestyleAsset::isIsMajorPurchaseGoal() const {
    return m_is_major_purchase_goal;
}
void OAIILifestyleAsset::setIsMajorPurchaseGoal(const bool &is_major_purchase_goal) {
    m_is_major_purchase_goal = is_major_purchase_goal;
    m_is_major_purchase_goal_isSet = true;
}

bool OAIILifestyleAsset::is_is_major_purchase_goal_Set() const{
    return m_is_major_purchase_goal_isSet;
}

bool OAIILifestyleAsset::is_is_major_purchase_goal_Valid() const{
    return m_is_major_purchase_goal_isValid;
}

OAICurrencyWithDate OAIILifestyleAsset::getMarketValueAsOf() const {
    return m_market_value_as_of;
}
void OAIILifestyleAsset::setMarketValueAsOf(const OAICurrencyWithDate &market_value_as_of) {
    m_market_value_as_of = market_value_as_of;
    m_market_value_as_of_isSet = true;
}

bool OAIILifestyleAsset::is_market_value_as_of_Set() const{
    return m_market_value_as_of_isSet;
}

bool OAIILifestyleAsset::is_market_value_as_of_Valid() const{
    return m_market_value_as_of_isValid;
}

QString OAIILifestyleAsset::getOwner() const {
    return m_owner;
}
void OAIILifestyleAsset::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIILifestyleAsset::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIILifestyleAsset::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPercent OAIILifestyleAsset::getPreTaxGrowthRate() const {
    return m_pre_tax_growth_rate;
}
void OAIILifestyleAsset::setPreTaxGrowthRate(const OAIPercent &pre_tax_growth_rate) {
    m_pre_tax_growth_rate = pre_tax_growth_rate;
    m_pre_tax_growth_rate_isSet = true;
}

bool OAIILifestyleAsset::is_pre_tax_growth_rate_Set() const{
    return m_pre_tax_growth_rate_isSet;
}

bool OAIILifestyleAsset::is_pre_tax_growth_rate_Valid() const{
    return m_pre_tax_growth_rate_isValid;
}

OAICurrency OAIILifestyleAsset::getPresentValueProjectedGrossSaleValue() const {
    return m_present_value_projected_gross_sale_value;
}
void OAIILifestyleAsset::setPresentValueProjectedGrossSaleValue(const OAICurrency &present_value_projected_gross_sale_value) {
    m_present_value_projected_gross_sale_value = present_value_projected_gross_sale_value;
    m_present_value_projected_gross_sale_value_isSet = true;
}

bool OAIILifestyleAsset::is_present_value_projected_gross_sale_value_Set() const{
    return m_present_value_projected_gross_sale_value_isSet;
}

bool OAIILifestyleAsset::is_present_value_projected_gross_sale_value_Valid() const{
    return m_present_value_projected_gross_sale_value_isValid;
}

OAIDate OAIILifestyleAsset::getProjectedSaleDate() const {
    return m_projected_sale_date;
}
void OAIILifestyleAsset::setProjectedSaleDate(const OAIDate &projected_sale_date) {
    m_projected_sale_date = projected_sale_date;
    m_projected_sale_date_isSet = true;
}

bool OAIILifestyleAsset::is_projected_sale_date_Set() const{
    return m_projected_sale_date_isSet;
}

bool OAIILifestyleAsset::is_projected_sale_date_Valid() const{
    return m_projected_sale_date_isValid;
}

OAICurrency OAIILifestyleAsset::getPurchaseAmount() const {
    return m_purchase_amount;
}
void OAIILifestyleAsset::setPurchaseAmount(const OAICurrency &purchase_amount) {
    m_purchase_amount = purchase_amount;
    m_purchase_amount_isSet = true;
}

bool OAIILifestyleAsset::is_purchase_amount_Set() const{
    return m_purchase_amount_isSet;
}

bool OAIILifestyleAsset::is_purchase_amount_Valid() const{
    return m_purchase_amount_isValid;
}

OAIDate OAIILifestyleAsset::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIILifestyleAsset::setPurchaseDate(const OAIDate &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIILifestyleAsset::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIILifestyleAsset::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

OAIPercent OAIILifestyleAsset::getSellingCostPercent() const {
    return m_selling_cost_percent;
}
void OAIILifestyleAsset::setSellingCostPercent(const OAIPercent &selling_cost_percent) {
    m_selling_cost_percent = selling_cost_percent;
    m_selling_cost_percent_isSet = true;
}

bool OAIILifestyleAsset::is_selling_cost_percent_Set() const{
    return m_selling_cost_percent_isSet;
}

bool OAIILifestyleAsset::is_selling_cost_percent_Valid() const{
    return m_selling_cost_percent_isValid;
}

OAIPercent OAIILifestyleAsset::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIILifestyleAsset::setStandardDeviation(const OAIPercent &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIILifestyleAsset::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIILifestyleAsset::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

OAIFormattedLifestyleType OAIILifestyleAsset::getType() const {
    return m_type;
}
void OAIILifestyleAsset::setType(const OAIFormattedLifestyleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIILifestyleAsset::is_type_Set() const{
    return m_type_isSet;
}

bool OAIILifestyleAsset::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIILifestyleAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_tax_proceeds_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_future_value_projected_gross_sale_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_major_purchase_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_as_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_tax_growth_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_value_projected_gross_sale_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_sale_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_cost_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILifestyleAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
