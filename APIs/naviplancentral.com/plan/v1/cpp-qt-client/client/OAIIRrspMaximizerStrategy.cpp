/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRrspMaximizerStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRrspMaximizerStrategy::OAIIRrspMaximizerStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRrspMaximizerStrategy::OAIIRrspMaximizerStrategy() {
    this->initializeModel();
}

OAIIRrspMaximizerStrategy::~OAIIRrspMaximizerStrategy() {}

void OAIIRrspMaximizerStrategy::initializeModel() {

    m_applicable_isSet = false;
    m_applicable_isValid = false;

    m_applicable_range_isSet = false;
    m_applicable_range_isValid = false;

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_constrained_by_cashflow_isSet = false;
    m_constrained_by_cashflow_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;
}

void OAIIRrspMaximizerStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRrspMaximizerStrategy::fromJsonObject(QJsonObject json) {

    m_applicable_isValid = ::OpenAPI::fromJsonValue(m_applicable, json[QString("applicable")]);
    m_applicable_isSet = !json[QString("applicable")].isNull() && m_applicable_isValid;

    m_applicable_range_isValid = ::OpenAPI::fromJsonValue(m_applicable_range, json[QString("applicableRange")]);
    m_applicable_range_isSet = !json[QString("applicableRange")].isNull() && m_applicable_range_isValid;

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("assetName")]);
    m_asset_name_isSet = !json[QString("assetName")].isNull() && m_asset_name_isValid;

    m_constrained_by_cashflow_isValid = ::OpenAPI::fromJsonValue(m_constrained_by_cashflow, json[QString("constrainedByCashflow")]);
    m_constrained_by_cashflow_isSet = !json[QString("constrainedByCashflow")].isNull() && m_constrained_by_cashflow_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;
}

QString OAIIRrspMaximizerStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRrspMaximizerStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_isSet) {
        obj.insert(QString("applicable"), ::OpenAPI::toJsonValue(m_applicable));
    }
    if (m_applicable_range.isSet()) {
        obj.insert(QString("applicableRange"), ::OpenAPI::toJsonValue(m_applicable_range));
    }
    if (m_asset_name_isSet) {
        obj.insert(QString("assetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_constrained_by_cashflow.isSet()) {
        obj.insert(QString("constrainedByCashflow"), ::OpenAPI::toJsonValue(m_constrained_by_cashflow));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    return obj;
}

QString OAIIRrspMaximizerStrategy::getApplicable() const {
    return m_applicable;
}
void OAIIRrspMaximizerStrategy::setApplicable(const QString &applicable) {
    m_applicable = applicable;
    m_applicable_isSet = true;
}

bool OAIIRrspMaximizerStrategy::is_applicable_Set() const{
    return m_applicable_isSet;
}

bool OAIIRrspMaximizerStrategy::is_applicable_Valid() const{
    return m_applicable_isValid;
}

OAIFormattedDateRange OAIIRrspMaximizerStrategy::getApplicableRange() const {
    return m_applicable_range;
}
void OAIIRrspMaximizerStrategy::setApplicableRange(const OAIFormattedDateRange &applicable_range) {
    m_applicable_range = applicable_range;
    m_applicable_range_isSet = true;
}

bool OAIIRrspMaximizerStrategy::is_applicable_range_Set() const{
    return m_applicable_range_isSet;
}

bool OAIIRrspMaximizerStrategy::is_applicable_range_Valid() const{
    return m_applicable_range_isValid;
}

QString OAIIRrspMaximizerStrategy::getAssetName() const {
    return m_asset_name;
}
void OAIIRrspMaximizerStrategy::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIIRrspMaximizerStrategy::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIIRrspMaximizerStrategy::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

OAIDescriptiveBoolean OAIIRrspMaximizerStrategy::getConstrainedByCashflow() const {
    return m_constrained_by_cashflow;
}
void OAIIRrspMaximizerStrategy::setConstrainedByCashflow(const OAIDescriptiveBoolean &constrained_by_cashflow) {
    m_constrained_by_cashflow = constrained_by_cashflow;
    m_constrained_by_cashflow_isSet = true;
}

bool OAIIRrspMaximizerStrategy::is_constrained_by_cashflow_Set() const{
    return m_constrained_by_cashflow_isSet;
}

bool OAIIRrspMaximizerStrategy::is_constrained_by_cashflow_Valid() const{
    return m_constrained_by_cashflow_isValid;
}

QString OAIIRrspMaximizerStrategy::getMonth() const {
    return m_month;
}
void OAIIRrspMaximizerStrategy::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIIRrspMaximizerStrategy::is_month_Set() const{
    return m_month_isSet;
}

bool OAIIRrspMaximizerStrategy::is_month_Valid() const{
    return m_month_isValid;
}

bool OAIIRrspMaximizerStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constrained_by_cashflow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRrspMaximizerStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
