/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyWithGrowth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyWithGrowth::OAICurrencyWithGrowth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyWithGrowth::OAICurrencyWithGrowth() {
    this->initializeModel();
}

OAICurrencyWithGrowth::~OAICurrencyWithGrowth() {}

void OAICurrencyWithGrowth::initializeModel() {

    m_formatted_decimal_isSet = false;
    m_formatted_decimal_isValid = false;

    m_formatted_no_decimal_isSet = false;
    m_formatted_no_decimal_isValid = false;

    m_growth_isSet = false;
    m_growth_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;
}

void OAICurrencyWithGrowth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyWithGrowth::fromJsonObject(QJsonObject json) {

    m_formatted_decimal_isValid = ::OpenAPI::fromJsonValue(m_formatted_decimal, json[QString("formattedDecimal")]);
    m_formatted_decimal_isSet = !json[QString("formattedDecimal")].isNull() && m_formatted_decimal_isValid;

    m_formatted_no_decimal_isValid = ::OpenAPI::fromJsonValue(m_formatted_no_decimal, json[QString("formattedNoDecimal")]);
    m_formatted_no_decimal_isSet = !json[QString("formattedNoDecimal")].isNull() && m_formatted_no_decimal_isValid;

    m_growth_isValid = ::OpenAPI::fromJsonValue(m_growth, json[QString("growth")]);
    m_growth_isSet = !json[QString("growth")].isNull() && m_growth_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;
}

QString OAICurrencyWithGrowth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyWithGrowth::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_decimal_isSet) {
        obj.insert(QString("formattedDecimal"), ::OpenAPI::toJsonValue(m_formatted_decimal));
    }
    if (m_formatted_no_decimal_isSet) {
        obj.insert(QString("formattedNoDecimal"), ::OpenAPI::toJsonValue(m_formatted_no_decimal));
    }
    if (m_growth.isSet()) {
        obj.insert(QString("growth"), ::OpenAPI::toJsonValue(m_growth));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    return obj;
}

QString OAICurrencyWithGrowth::getFormattedDecimal() const {
    return m_formatted_decimal;
}
void OAICurrencyWithGrowth::setFormattedDecimal(const QString &formatted_decimal) {
    m_formatted_decimal = formatted_decimal;
    m_formatted_decimal_isSet = true;
}

bool OAICurrencyWithGrowth::is_formatted_decimal_Set() const{
    return m_formatted_decimal_isSet;
}

bool OAICurrencyWithGrowth::is_formatted_decimal_Valid() const{
    return m_formatted_decimal_isValid;
}

QString OAICurrencyWithGrowth::getFormattedNoDecimal() const {
    return m_formatted_no_decimal;
}
void OAICurrencyWithGrowth::setFormattedNoDecimal(const QString &formatted_no_decimal) {
    m_formatted_no_decimal = formatted_no_decimal;
    m_formatted_no_decimal_isSet = true;
}

bool OAICurrencyWithGrowth::is_formatted_no_decimal_Set() const{
    return m_formatted_no_decimal_isSet;
}

bool OAICurrencyWithGrowth::is_formatted_no_decimal_Valid() const{
    return m_formatted_no_decimal_isValid;
}

OAIGrowthRateValues OAICurrencyWithGrowth::getGrowth() const {
    return m_growth;
}
void OAICurrencyWithGrowth::setGrowth(const OAIGrowthRateValues &growth) {
    m_growth = growth;
    m_growth_isSet = true;
}

bool OAICurrencyWithGrowth::is_growth_Set() const{
    return m_growth_isSet;
}

bool OAICurrencyWithGrowth::is_growth_Valid() const{
    return m_growth_isValid;
}

double OAICurrencyWithGrowth::getRaw() const {
    return m_raw;
}
void OAICurrencyWithGrowth::setRaw(const double &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAICurrencyWithGrowth::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAICurrencyWithGrowth::is_raw_Valid() const{
    return m_raw_isValid;
}

bool OAICurrencyWithGrowth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_no_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyWithGrowth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
