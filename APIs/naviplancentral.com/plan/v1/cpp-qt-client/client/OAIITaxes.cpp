/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIITaxes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIITaxes::OAIITaxes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIITaxes::OAIITaxes() {
    this->initializeModel();
}

OAIITaxes::~OAIITaxes() {}

void OAIITaxes::initializeModel() {

    m_estate_isSet = false;
    m_estate_isValid = false;

    m_federal_income_isSet = false;
    m_federal_income_isValid = false;

    m_gift_and_generation_skipping_transfer_isSet = false;
    m_gift_and_generation_skipping_transfer_isValid = false;

    m_medicare_isSet = false;
    m_medicare_isValid = false;

    m_pension_early_distribution_penalty_isSet = false;
    m_pension_early_distribution_penalty_isValid = false;

    m_pension_penalty_on_excess_distributions_isSet = false;
    m_pension_penalty_on_excess_distributions_isValid = false;

    m_refundable_credits_isSet = false;
    m_refundable_credits_isValid = false;

    m_social_security_employer_isSet = false;
    m_social_security_employer_isValid = false;

    m_social_security_self_employed_isSet = false;
    m_social_security_self_employed_isValid = false;

    m_state_income_isSet = false;
    m_state_income_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIITaxes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIITaxes::fromJsonObject(QJsonObject json) {

    m_estate_isValid = ::OpenAPI::fromJsonValue(m_estate, json[QString("estate")]);
    m_estate_isSet = !json[QString("estate")].isNull() && m_estate_isValid;

    m_federal_income_isValid = ::OpenAPI::fromJsonValue(m_federal_income, json[QString("federalIncome")]);
    m_federal_income_isSet = !json[QString("federalIncome")].isNull() && m_federal_income_isValid;

    m_gift_and_generation_skipping_transfer_isValid = ::OpenAPI::fromJsonValue(m_gift_and_generation_skipping_transfer, json[QString("giftAndGenerationSkippingTransfer")]);
    m_gift_and_generation_skipping_transfer_isSet = !json[QString("giftAndGenerationSkippingTransfer")].isNull() && m_gift_and_generation_skipping_transfer_isValid;

    m_medicare_isValid = ::OpenAPI::fromJsonValue(m_medicare, json[QString("medicare")]);
    m_medicare_isSet = !json[QString("medicare")].isNull() && m_medicare_isValid;

    m_pension_early_distribution_penalty_isValid = ::OpenAPI::fromJsonValue(m_pension_early_distribution_penalty, json[QString("pensionEarlyDistributionPenalty")]);
    m_pension_early_distribution_penalty_isSet = !json[QString("pensionEarlyDistributionPenalty")].isNull() && m_pension_early_distribution_penalty_isValid;

    m_pension_penalty_on_excess_distributions_isValid = ::OpenAPI::fromJsonValue(m_pension_penalty_on_excess_distributions, json[QString("pensionPenaltyOnExcessDistributions")]);
    m_pension_penalty_on_excess_distributions_isSet = !json[QString("pensionPenaltyOnExcessDistributions")].isNull() && m_pension_penalty_on_excess_distributions_isValid;

    m_refundable_credits_isValid = ::OpenAPI::fromJsonValue(m_refundable_credits, json[QString("refundableCredits")]);
    m_refundable_credits_isSet = !json[QString("refundableCredits")].isNull() && m_refundable_credits_isValid;

    m_social_security_employer_isValid = ::OpenAPI::fromJsonValue(m_social_security_employer, json[QString("socialSecurityEmployer")]);
    m_social_security_employer_isSet = !json[QString("socialSecurityEmployer")].isNull() && m_social_security_employer_isValid;

    m_social_security_self_employed_isValid = ::OpenAPI::fromJsonValue(m_social_security_self_employed, json[QString("socialSecuritySelfEmployed")]);
    m_social_security_self_employed_isSet = !json[QString("socialSecuritySelfEmployed")].isNull() && m_social_security_self_employed_isValid;

    m_state_income_isValid = ::OpenAPI::fromJsonValue(m_state_income, json[QString("stateIncome")]);
    m_state_income_isSet = !json[QString("stateIncome")].isNull() && m_state_income_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIITaxes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIITaxes::asJsonObject() const {
    QJsonObject obj;
    if (m_estate.isSet()) {
        obj.insert(QString("estate"), ::OpenAPI::toJsonValue(m_estate));
    }
    if (m_federal_income.isSet()) {
        obj.insert(QString("federalIncome"), ::OpenAPI::toJsonValue(m_federal_income));
    }
    if (m_gift_and_generation_skipping_transfer.isSet()) {
        obj.insert(QString("giftAndGenerationSkippingTransfer"), ::OpenAPI::toJsonValue(m_gift_and_generation_skipping_transfer));
    }
    if (m_medicare.isSet()) {
        obj.insert(QString("medicare"), ::OpenAPI::toJsonValue(m_medicare));
    }
    if (m_pension_early_distribution_penalty.isSet()) {
        obj.insert(QString("pensionEarlyDistributionPenalty"), ::OpenAPI::toJsonValue(m_pension_early_distribution_penalty));
    }
    if (m_pension_penalty_on_excess_distributions.isSet()) {
        obj.insert(QString("pensionPenaltyOnExcessDistributions"), ::OpenAPI::toJsonValue(m_pension_penalty_on_excess_distributions));
    }
    if (m_refundable_credits.isSet()) {
        obj.insert(QString("refundableCredits"), ::OpenAPI::toJsonValue(m_refundable_credits));
    }
    if (m_social_security_employer.isSet()) {
        obj.insert(QString("socialSecurityEmployer"), ::OpenAPI::toJsonValue(m_social_security_employer));
    }
    if (m_social_security_self_employed.isSet()) {
        obj.insert(QString("socialSecuritySelfEmployed"), ::OpenAPI::toJsonValue(m_social_security_self_employed));
    }
    if (m_state_income.isSet()) {
        obj.insert(QString("stateIncome"), ::OpenAPI::toJsonValue(m_state_income));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAICurrency OAIITaxes::getEstate() const {
    return m_estate;
}
void OAIITaxes::setEstate(const OAICurrency &estate) {
    m_estate = estate;
    m_estate_isSet = true;
}

bool OAIITaxes::is_estate_Set() const{
    return m_estate_isSet;
}

bool OAIITaxes::is_estate_Valid() const{
    return m_estate_isValid;
}

OAICurrency OAIITaxes::getFederalIncome() const {
    return m_federal_income;
}
void OAIITaxes::setFederalIncome(const OAICurrency &federal_income) {
    m_federal_income = federal_income;
    m_federal_income_isSet = true;
}

bool OAIITaxes::is_federal_income_Set() const{
    return m_federal_income_isSet;
}

bool OAIITaxes::is_federal_income_Valid() const{
    return m_federal_income_isValid;
}

OAICurrency OAIITaxes::getGiftAndGenerationSkippingTransfer() const {
    return m_gift_and_generation_skipping_transfer;
}
void OAIITaxes::setGiftAndGenerationSkippingTransfer(const OAICurrency &gift_and_generation_skipping_transfer) {
    m_gift_and_generation_skipping_transfer = gift_and_generation_skipping_transfer;
    m_gift_and_generation_skipping_transfer_isSet = true;
}

bool OAIITaxes::is_gift_and_generation_skipping_transfer_Set() const{
    return m_gift_and_generation_skipping_transfer_isSet;
}

bool OAIITaxes::is_gift_and_generation_skipping_transfer_Valid() const{
    return m_gift_and_generation_skipping_transfer_isValid;
}

OAICurrency OAIITaxes::getMedicare() const {
    return m_medicare;
}
void OAIITaxes::setMedicare(const OAICurrency &medicare) {
    m_medicare = medicare;
    m_medicare_isSet = true;
}

bool OAIITaxes::is_medicare_Set() const{
    return m_medicare_isSet;
}

bool OAIITaxes::is_medicare_Valid() const{
    return m_medicare_isValid;
}

OAICurrency OAIITaxes::getPensionEarlyDistributionPenalty() const {
    return m_pension_early_distribution_penalty;
}
void OAIITaxes::setPensionEarlyDistributionPenalty(const OAICurrency &pension_early_distribution_penalty) {
    m_pension_early_distribution_penalty = pension_early_distribution_penalty;
    m_pension_early_distribution_penalty_isSet = true;
}

bool OAIITaxes::is_pension_early_distribution_penalty_Set() const{
    return m_pension_early_distribution_penalty_isSet;
}

bool OAIITaxes::is_pension_early_distribution_penalty_Valid() const{
    return m_pension_early_distribution_penalty_isValid;
}

OAICurrency OAIITaxes::getPensionPenaltyOnExcessDistributions() const {
    return m_pension_penalty_on_excess_distributions;
}
void OAIITaxes::setPensionPenaltyOnExcessDistributions(const OAICurrency &pension_penalty_on_excess_distributions) {
    m_pension_penalty_on_excess_distributions = pension_penalty_on_excess_distributions;
    m_pension_penalty_on_excess_distributions_isSet = true;
}

bool OAIITaxes::is_pension_penalty_on_excess_distributions_Set() const{
    return m_pension_penalty_on_excess_distributions_isSet;
}

bool OAIITaxes::is_pension_penalty_on_excess_distributions_Valid() const{
    return m_pension_penalty_on_excess_distributions_isValid;
}

OAICurrency OAIITaxes::getRefundableCredits() const {
    return m_refundable_credits;
}
void OAIITaxes::setRefundableCredits(const OAICurrency &refundable_credits) {
    m_refundable_credits = refundable_credits;
    m_refundable_credits_isSet = true;
}

bool OAIITaxes::is_refundable_credits_Set() const{
    return m_refundable_credits_isSet;
}

bool OAIITaxes::is_refundable_credits_Valid() const{
    return m_refundable_credits_isValid;
}

OAICurrency OAIITaxes::getSocialSecurityEmployer() const {
    return m_social_security_employer;
}
void OAIITaxes::setSocialSecurityEmployer(const OAICurrency &social_security_employer) {
    m_social_security_employer = social_security_employer;
    m_social_security_employer_isSet = true;
}

bool OAIITaxes::is_social_security_employer_Set() const{
    return m_social_security_employer_isSet;
}

bool OAIITaxes::is_social_security_employer_Valid() const{
    return m_social_security_employer_isValid;
}

OAICurrency OAIITaxes::getSocialSecuritySelfEmployed() const {
    return m_social_security_self_employed;
}
void OAIITaxes::setSocialSecuritySelfEmployed(const OAICurrency &social_security_self_employed) {
    m_social_security_self_employed = social_security_self_employed;
    m_social_security_self_employed_isSet = true;
}

bool OAIITaxes::is_social_security_self_employed_Set() const{
    return m_social_security_self_employed_isSet;
}

bool OAIITaxes::is_social_security_self_employed_Valid() const{
    return m_social_security_self_employed_isValid;
}

OAICurrency OAIITaxes::getStateIncome() const {
    return m_state_income;
}
void OAIITaxes::setStateIncome(const OAICurrency &state_income) {
    m_state_income = state_income;
    m_state_income_isSet = true;
}

bool OAIITaxes::is_state_income_Set() const{
    return m_state_income_isSet;
}

bool OAIITaxes::is_state_income_Valid() const{
    return m_state_income_isValid;
}

OAICurrency OAIITaxes::getTotal() const {
    return m_total;
}
void OAIITaxes::setTotal(const OAICurrency &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIITaxes::is_total_Set() const{
    return m_total_isSet;
}

bool OAIITaxes::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIITaxes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_and_generation_skipping_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_medicare.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pension_early_distribution_penalty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pension_penalty_on_excess_distributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refundable_credits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_self_employed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIITaxes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
