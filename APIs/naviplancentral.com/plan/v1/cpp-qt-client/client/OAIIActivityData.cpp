/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIActivityData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIActivityData::OAIIActivityData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIActivityData::OAIIActivityData() {
    this->initializeModel();
}

OAIIActivityData::~OAIIActivityData() {}

void OAIIActivityData::initializeModel() {

    m_amount_with_growth_isSet = false;
    m_amount_with_growth_isValid = false;

    m_applicable_date_range_isSet = false;
    m_applicable_date_range_isValid = false;

    m_direct_to_isSet = false;
    m_direct_to_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;
}

void OAIIActivityData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIActivityData::fromJsonObject(QJsonObject json) {

    m_amount_with_growth_isValid = ::OpenAPI::fromJsonValue(m_amount_with_growth, json[QString("amountWithGrowth")]);
    m_amount_with_growth_isSet = !json[QString("amountWithGrowth")].isNull() && m_amount_with_growth_isValid;

    m_applicable_date_range_isValid = ::OpenAPI::fromJsonValue(m_applicable_date_range, json[QString("applicableDateRange")]);
    m_applicable_date_range_isSet = !json[QString("applicableDateRange")].isNull() && m_applicable_date_range_isValid;

    m_direct_to_isValid = ::OpenAPI::fromJsonValue(m_direct_to, json[QString("directTo")]);
    m_direct_to_isSet = !json[QString("directTo")].isNull() && m_direct_to_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;
}

QString OAIIActivityData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIActivityData::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_with_growth.isSet()) {
        obj.insert(QString("amountWithGrowth"), ::OpenAPI::toJsonValue(m_amount_with_growth));
    }
    if (m_applicable_date_range.isSet()) {
        obj.insert(QString("applicableDateRange"), ::OpenAPI::toJsonValue(m_applicable_date_range));
    }
    if (m_direct_to_isSet) {
        obj.insert(QString("directTo"), ::OpenAPI::toJsonValue(m_direct_to));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    return obj;
}

OAICurrencyWithGrowth OAIIActivityData::getAmountWithGrowth() const {
    return m_amount_with_growth;
}
void OAIIActivityData::setAmountWithGrowth(const OAICurrencyWithGrowth &amount_with_growth) {
    m_amount_with_growth = amount_with_growth;
    m_amount_with_growth_isSet = true;
}

bool OAIIActivityData::is_amount_with_growth_Set() const{
    return m_amount_with_growth_isSet;
}

bool OAIIActivityData::is_amount_with_growth_Valid() const{
    return m_amount_with_growth_isValid;
}

OAIFormattedDateRange OAIIActivityData::getApplicableDateRange() const {
    return m_applicable_date_range;
}
void OAIIActivityData::setApplicableDateRange(const OAIFormattedDateRange &applicable_date_range) {
    m_applicable_date_range = applicable_date_range;
    m_applicable_date_range_isSet = true;
}

bool OAIIActivityData::is_applicable_date_range_Set() const{
    return m_applicable_date_range_isSet;
}

bool OAIIActivityData::is_applicable_date_range_Valid() const{
    return m_applicable_date_range_isValid;
}

QString OAIIActivityData::getDirectTo() const {
    return m_direct_to;
}
void OAIIActivityData::setDirectTo(const QString &direct_to) {
    m_direct_to = direct_to;
    m_direct_to_isSet = true;
}

bool OAIIActivityData::is_direct_to_Set() const{
    return m_direct_to_isSet;
}

bool OAIIActivityData::is_direct_to_Valid() const{
    return m_direct_to_isValid;
}

OAIIFormattedFrequency OAIIActivityData::getFrequency() const {
    return m_frequency;
}
void OAIIActivityData::setFrequency(const OAIIFormattedFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIIActivityData::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIIActivityData::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAIIActivityData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_with_growth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIActivityData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
