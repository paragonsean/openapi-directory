/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGoalAdjustmentsApi_H
#define OAI_OAIGoalAdjustmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGoalAdjustmentsApi : public QObject {
    Q_OBJECT

public:
    OAIGoalAdjustmentsApi(const int timeOut = 0);
    ~OAIGoalAdjustmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetEducationByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetGoalSuccessRatesByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetRetirementByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  goal_adjustments OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments [required]
    */
    virtual void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(const qint32 &id, const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments &goal_adjustments);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  goal_adjustments OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments [required]
    */
    virtual void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(const qint32 &id, const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments &goal_adjustments);

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  goal_adjustments OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments [required]
    */
    virtual void goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments &goal_adjustments);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void goalAdjustmentsGetEducationByIdClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsGetRetirementByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker);
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void goalAdjustmentsGetEducationByIdClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel summary);
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel summary);
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel summary);
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel summary);
    void goalAdjustmentsGetRetirementByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel summary);
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary);
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments summary);
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments summary);
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments summary);


    void goalAdjustmentsGetEducationByIdClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel summary);
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel summary);
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel summary);
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel summary);
    void goalAdjustmentsGetRetirementByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel summary);
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary);
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments summary);
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments summary);
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments summary);

    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetEducationByIdClientidPlanidSignalError() instead")
    void goalAdjustmentsGetEducationByIdClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetEducationByIdClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalError() instead")
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalError() instead")
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalError() instead")
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetRetirementByClientidPlanidSignalError() instead")
    void goalAdjustmentsGetRetirementByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetRetirementByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalError() instead")
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalError() instead")
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalError() instead")
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalError() instead")
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetEducationByIdClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetEducationByIdClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetEducationByIdClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetRetirementByClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetRetirementByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetRetirementByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull() instead")
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalErrorFull() instead")
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalErrorFull() instead")
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalErrorFull() instead")
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
