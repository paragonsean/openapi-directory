/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIShareClassStructure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIShareClassStructure::OAIIShareClassStructure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIShareClassStructure::OAIIShareClassStructure() {
    this->initializeModel();
}

OAIIShareClassStructure::~OAIIShareClassStructure() {}

void OAIIShareClassStructure::initializeModel() {

    m_client_ownership_data_isSet = false;
    m_client_ownership_data_isValid = false;

    m_co_client_ownership_data_isSet = false;
    m_co_client_ownership_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_other_ownership_data_isSet = false;
    m_other_ownership_data_isValid = false;

    m_parent_corporation_ownership_data_isSet = false;
    m_parent_corporation_ownership_data_isValid = false;
}

void OAIIShareClassStructure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIShareClassStructure::fromJsonObject(QJsonObject json) {

    m_client_ownership_data_isValid = ::OpenAPI::fromJsonValue(m_client_ownership_data, json[QString("clientOwnershipData")]);
    m_client_ownership_data_isSet = !json[QString("clientOwnershipData")].isNull() && m_client_ownership_data_isValid;

    m_co_client_ownership_data_isValid = ::OpenAPI::fromJsonValue(m_co_client_ownership_data, json[QString("coClientOwnershipData")]);
    m_co_client_ownership_data_isSet = !json[QString("coClientOwnershipData")].isNull() && m_co_client_ownership_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_other_ownership_data_isValid = ::OpenAPI::fromJsonValue(m_other_ownership_data, json[QString("otherOwnershipData")]);
    m_other_ownership_data_isSet = !json[QString("otherOwnershipData")].isNull() && m_other_ownership_data_isValid;

    m_parent_corporation_ownership_data_isValid = ::OpenAPI::fromJsonValue(m_parent_corporation_ownership_data, json[QString("parentCorporationOwnershipData")]);
    m_parent_corporation_ownership_data_isSet = !json[QString("parentCorporationOwnershipData")].isNull() && m_parent_corporation_ownership_data_isValid;
}

QString OAIIShareClassStructure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIShareClassStructure::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ownership_data.isSet()) {
        obj.insert(QString("clientOwnershipData"), ::OpenAPI::toJsonValue(m_client_ownership_data));
    }
    if (m_co_client_ownership_data.isSet()) {
        obj.insert(QString("coClientOwnershipData"), ::OpenAPI::toJsonValue(m_co_client_ownership_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_other_ownership_data.isSet()) {
        obj.insert(QString("otherOwnershipData"), ::OpenAPI::toJsonValue(m_other_ownership_data));
    }
    if (m_parent_corporation_ownership_data.isSet()) {
        obj.insert(QString("parentCorporationOwnershipData"), ::OpenAPI::toJsonValue(m_parent_corporation_ownership_data));
    }
    return obj;
}

OAIIOwnershipData OAIIShareClassStructure::getClientOwnershipData() const {
    return m_client_ownership_data;
}
void OAIIShareClassStructure::setClientOwnershipData(const OAIIOwnershipData &client_ownership_data) {
    m_client_ownership_data = client_ownership_data;
    m_client_ownership_data_isSet = true;
}

bool OAIIShareClassStructure::is_client_ownership_data_Set() const{
    return m_client_ownership_data_isSet;
}

bool OAIIShareClassStructure::is_client_ownership_data_Valid() const{
    return m_client_ownership_data_isValid;
}

OAIIOwnershipData OAIIShareClassStructure::getCoClientOwnershipData() const {
    return m_co_client_ownership_data;
}
void OAIIShareClassStructure::setCoClientOwnershipData(const OAIIOwnershipData &co_client_ownership_data) {
    m_co_client_ownership_data = co_client_ownership_data;
    m_co_client_ownership_data_isSet = true;
}

bool OAIIShareClassStructure::is_co_client_ownership_data_Set() const{
    return m_co_client_ownership_data_isSet;
}

bool OAIIShareClassStructure::is_co_client_ownership_data_Valid() const{
    return m_co_client_ownership_data_isValid;
}

QString OAIIShareClassStructure::getDescription() const {
    return m_description;
}
void OAIIShareClassStructure::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIShareClassStructure::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIShareClassStructure::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIIShareClassStructure::getId() const {
    return m_id;
}
void OAIIShareClassStructure::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIShareClassStructure::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIShareClassStructure::is_id_Valid() const{
    return m_id_isValid;
}

OAIIOwnershipData OAIIShareClassStructure::getOtherOwnershipData() const {
    return m_other_ownership_data;
}
void OAIIShareClassStructure::setOtherOwnershipData(const OAIIOwnershipData &other_ownership_data) {
    m_other_ownership_data = other_ownership_data;
    m_other_ownership_data_isSet = true;
}

bool OAIIShareClassStructure::is_other_ownership_data_Set() const{
    return m_other_ownership_data_isSet;
}

bool OAIIShareClassStructure::is_other_ownership_data_Valid() const{
    return m_other_ownership_data_isValid;
}

OAIIOwnershipData OAIIShareClassStructure::getParentCorporationOwnershipData() const {
    return m_parent_corporation_ownership_data;
}
void OAIIShareClassStructure::setParentCorporationOwnershipData(const OAIIOwnershipData &parent_corporation_ownership_data) {
    m_parent_corporation_ownership_data = parent_corporation_ownership_data;
    m_parent_corporation_ownership_data_isSet = true;
}

bool OAIIShareClassStructure::is_parent_corporation_ownership_data_Set() const{
    return m_parent_corporation_ownership_data_isSet;
}

bool OAIIShareClassStructure::is_parent_corporation_ownership_data_Valid() const{
    return m_parent_corporation_ownership_data_isValid;
}

bool OAIIShareClassStructure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ownership_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_ownership_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_ownership_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_corporation_ownership_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIShareClassStructure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
