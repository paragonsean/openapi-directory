/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIINotionalAccounts.h
 *
 * 
 */

#ifndef OAIINotionalAccounts_H
#define OAIINotionalAccounts_H

#include <QJsonObject>

#include "OAICurrency.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrency;

class OAIINotionalAccounts : public OAIObject {
public:
    OAIINotionalAccounts();
    OAIINotionalAccounts(QString json);
    ~OAIINotionalAccounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICurrency getCapitalDividendAccountEndOfYearValue() const;
    void setCapitalDividendAccountEndOfYearValue(const OAICurrency &capital_dividend_account_end_of_year_value);
    bool is_capital_dividend_account_end_of_year_value_Set() const;
    bool is_capital_dividend_account_end_of_year_value_Valid() const;

    OAICurrency getCapitalLossesCarryoverEndOfYearValue() const;
    void setCapitalLossesCarryoverEndOfYearValue(const OAICurrency &capital_losses_carryover_end_of_year_value);
    bool is_capital_losses_carryover_end_of_year_value_Set() const;
    bool is_capital_losses_carryover_end_of_year_value_Valid() const;

    OAICurrency getDividendRefund() const;
    void setDividendRefund(const OAICurrency &dividend_refund);
    bool is_dividend_refund_Set() const;
    bool is_dividend_refund_Valid() const;

    OAICurrency getGeneralRateOfIncomePoolEndOfYearValue() const;
    void setGeneralRateOfIncomePoolEndOfYearValue(const OAICurrency &general_rate_of_income_pool_end_of_year_value);
    bool is_general_rate_of_income_pool_end_of_year_value_Set() const;
    bool is_general_rate_of_income_pool_end_of_year_value_Valid() const;

    OAICurrency getNonEligibleRefundableDividendTaxOnHandEndOfYearValue() const;
    void setNonEligibleRefundableDividendTaxOnHandEndOfYearValue(const OAICurrency &non_eligible_refundable_dividend_tax_on_hand_end_of_year_value);
    bool is_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_Set() const;
    bool is_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_Valid() const;

    OAICurrency getNrdtohDividendRefund() const;
    void setNrdtohDividendRefund(const OAICurrency &nrdtoh_dividend_refund);
    bool is_nrdtoh_dividend_refund_Set() const;
    bool is_nrdtoh_dividend_refund_Valid() const;

    OAICurrency getRefundableDividendTaxOnHandEndOfYearValue() const;
    void setRefundableDividendTaxOnHandEndOfYearValue(const OAICurrency &refundable_dividend_tax_on_hand_end_of_year_value);
    bool is_refundable_dividend_tax_on_hand_end_of_year_value_Set() const;
    bool is_refundable_dividend_tax_on_hand_end_of_year_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICurrency m_capital_dividend_account_end_of_year_value;
    bool m_capital_dividend_account_end_of_year_value_isSet;
    bool m_capital_dividend_account_end_of_year_value_isValid;

    OAICurrency m_capital_losses_carryover_end_of_year_value;
    bool m_capital_losses_carryover_end_of_year_value_isSet;
    bool m_capital_losses_carryover_end_of_year_value_isValid;

    OAICurrency m_dividend_refund;
    bool m_dividend_refund_isSet;
    bool m_dividend_refund_isValid;

    OAICurrency m_general_rate_of_income_pool_end_of_year_value;
    bool m_general_rate_of_income_pool_end_of_year_value_isSet;
    bool m_general_rate_of_income_pool_end_of_year_value_isValid;

    OAICurrency m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value;
    bool m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isSet;
    bool m_non_eligible_refundable_dividend_tax_on_hand_end_of_year_value_isValid;

    OAICurrency m_nrdtoh_dividend_refund;
    bool m_nrdtoh_dividend_refund_isSet;
    bool m_nrdtoh_dividend_refund_isValid;

    OAICurrency m_refundable_dividend_tax_on_hand_end_of_year_value;
    bool m_refundable_dividend_tax_on_hand_end_of_year_value_isSet;
    bool m_refundable_dividend_tax_on_hand_end_of_year_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIINotionalAccounts)

#endif // OAIINotionalAccounts_H
