/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIFormattedFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIFormattedFrequency::OAIIFormattedFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIFormattedFrequency::OAIIFormattedFrequency() {
    this->initializeModel();
}

OAIIFormattedFrequency::~OAIIFormattedFrequency() {}

void OAIIFormattedFrequency::initializeModel() {

    m_every_n_periods_isSet = false;
    m_every_n_periods_isValid = false;

    m_formatted_isSet = false;
    m_formatted_isValid = false;

    m_formatted_abbrv_isSet = false;
    m_formatted_abbrv_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIIFormattedFrequency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIFormattedFrequency::fromJsonObject(QJsonObject json) {

    m_every_n_periods_isValid = ::OpenAPI::fromJsonValue(m_every_n_periods, json[QString("everyNPeriods")]);
    m_every_n_periods_isSet = !json[QString("everyNPeriods")].isNull() && m_every_n_periods_isValid;

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;

    m_formatted_abbrv_isValid = ::OpenAPI::fromJsonValue(m_formatted_abbrv, json[QString("formattedAbbrv")]);
    m_formatted_abbrv_isSet = !json[QString("formattedAbbrv")].isNull() && m_formatted_abbrv_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIIFormattedFrequency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIFormattedFrequency::asJsonObject() const {
    QJsonObject obj;
    if (m_every_n_periods_isSet) {
        obj.insert(QString("everyNPeriods"), ::OpenAPI::toJsonValue(m_every_n_periods));
    }
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    if (m_formatted_abbrv_isSet) {
        obj.insert(QString("formattedAbbrv"), ::OpenAPI::toJsonValue(m_formatted_abbrv));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIIFormattedFrequency::getEveryNPeriods() const {
    return m_every_n_periods;
}
void OAIIFormattedFrequency::setEveryNPeriods(const qint32 &every_n_periods) {
    m_every_n_periods = every_n_periods;
    m_every_n_periods_isSet = true;
}

bool OAIIFormattedFrequency::is_every_n_periods_Set() const{
    return m_every_n_periods_isSet;
}

bool OAIIFormattedFrequency::is_every_n_periods_Valid() const{
    return m_every_n_periods_isValid;
}

QString OAIIFormattedFrequency::getFormatted() const {
    return m_formatted;
}
void OAIIFormattedFrequency::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIIFormattedFrequency::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIIFormattedFrequency::is_formatted_Valid() const{
    return m_formatted_isValid;
}

QString OAIIFormattedFrequency::getFormattedAbbrv() const {
    return m_formatted_abbrv;
}
void OAIIFormattedFrequency::setFormattedAbbrv(const QString &formatted_abbrv) {
    m_formatted_abbrv = formatted_abbrv;
    m_formatted_abbrv_isSet = true;
}

bool OAIIFormattedFrequency::is_formatted_abbrv_Set() const{
    return m_formatted_abbrv_isSet;
}

bool OAIIFormattedFrequency::is_formatted_abbrv_Valid() const{
    return m_formatted_abbrv_isValid;
}

QString OAIIFormattedFrequency::getValue() const {
    return m_value;
}
void OAIIFormattedFrequency::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIIFormattedFrequency::is_value_Set() const{
    return m_value_isSet;
}

bool OAIIFormattedFrequency::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIIFormattedFrequency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_every_n_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_abbrv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIFormattedFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
