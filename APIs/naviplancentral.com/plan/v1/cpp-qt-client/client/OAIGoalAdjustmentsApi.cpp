/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalAdjustmentsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIGoalAdjustmentsApi::OAIGoalAdjustmentsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIGoalAdjustmentsApi::~OAIGoalAdjustmentsApi() {
}

void OAIGoalAdjustmentsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://demo.uat.naviplancentral.com/plan"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://demo.uat.naviplancentral.com/plan"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("goalAdjustmentsGetEducationByIdClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetEducationByIdClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsGetGoalSuccessRatesByClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetGoalSuccessRatesByClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsGetMajorPurchaseByIdClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetMajorPurchaseByIdClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsGetRetirementByClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetRetirementByClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid", 0);
    _serverConfigs.insert("goalAdjustmentsPostRetirementByGoaladjustmentsPlanid", defaultConf);
    _serverIndices.insert("goalAdjustmentsPostRetirementByGoaladjustmentsPlanid", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIGoalAdjustmentsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIGoalAdjustmentsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIGoalAdjustmentsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIGoalAdjustmentsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIGoalAdjustmentsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIGoalAdjustmentsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIGoalAdjustmentsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIGoalAdjustmentsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIGoalAdjustmentsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIGoalAdjustmentsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGoalAdjustmentsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIGoalAdjustmentsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIGoalAdjustmentsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIGoalAdjustmentsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIGoalAdjustmentsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIGoalAdjustmentsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIGoalAdjustmentsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIGoalAdjustmentsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIGoalAdjustmentsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetEducationByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetEducationByIdClientidPlanid"][_serverIndices.value("goalAdjustmentsGetEducationByIdClientidPlanid")].URL()+"/api/GoalAdjustments/Education/{id}/Adjustments");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetEducationByIdClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetEducationByIdClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetEducationByIdClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid"][_serverIndices.value("goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanid")].URL()+"/api/GoalAdjustments/Restrictions");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetGoalAdjustmentRestrictionsByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalSuccessRatesByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetGoalSuccessRatesByClientidPlanid"][_serverIndices.value("goalAdjustmentsGetGoalSuccessRatesByClientidPlanid")].URL()+"/api/GoalAdjustments/GoalSuccessRates");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetGoalSuccessRatesByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetGoalSuccessRatesByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetMajorPurchaseByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetMajorPurchaseByIdClientidPlanid"][_serverIndices.value("goalAdjustmentsGetMajorPurchaseByIdClientidPlanid")].URL()+"/api/GoalAdjustments/MajorPurchase/{id}/Adjustments");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetMajorPurchaseByIdClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetMajorPurchaseByIdClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetRetirementByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetRetirementByClientidPlanid"][_serverIndices.value("goalAdjustmentsGetRetirementByClientidPlanid")].URL()+"/api/GoalAdjustments/Retirement/Adjustments");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetRetirementByClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetRetirementByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetRetirementByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid"][_serverIndices.value("goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanid")].URL()+"/api/GoalAdjustments/{id}/WhatAreMyOptions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignal(output);
        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid(const qint32 &id, const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments &goal_adjustments) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid"][_serverIndices.value("goalAdjustmentsPostEducationByIdGoaladjustmentsPlanid")].URL()+"/api/GoalAdjustments/Education/{id}/Calculations");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = goal_adjustments.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignal(output);
        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostEducationByIdGoaladjustmentsPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid(const qint32 &id, const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments &goal_adjustments) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid"][_serverIndices.value("goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanid")].URL()+"/api/GoalAdjustments/MajorPurchase/{id}/Calculations");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = goal_adjustments.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignal(output);
        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostMajorPurchaseByIdGoaladjustmentsPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostRetirementByGoaladjustmentsPlanid(const QString &plan_id, const OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments &goal_adjustments) {
    QString fullPath = QString(_serverConfigs["goalAdjustmentsPostRetirementByGoaladjustmentsPlanid"][_serverIndices.value("goalAdjustmentsPostRetirementByGoaladjustmentsPlanid")].URL()+"/api/GoalAdjustments/Retirement/Calculations");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = goal_adjustments.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIGoalAdjustmentsApi::goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCallback);
    connect(this, &OAIGoalAdjustmentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIGoalAdjustmentsApi::goalAdjustmentsPostRetirementByGoaladjustmentsPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignal(output);
        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalE(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalError(output, error_type, error_str);
        Q_EMIT goalAdjustmentsPostRetirementByGoaladjustmentsPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIGoalAdjustmentsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
