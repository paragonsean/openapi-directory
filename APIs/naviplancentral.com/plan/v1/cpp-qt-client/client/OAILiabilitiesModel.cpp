/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiabilitiesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiabilitiesModel::OAILiabilitiesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiabilitiesModel::OAILiabilitiesModel() {
    this->initializeModel();
}

OAILiabilitiesModel::~OAILiabilitiesModel() {}

void OAILiabilitiesModel::initializeModel() {

    m_liabilities_isSet = false;
    m_liabilities_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAILiabilitiesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiabilitiesModel::fromJsonObject(QJsonObject json) {

    m_liabilities_isValid = ::OpenAPI::fromJsonValue(m_liabilities, json[QString("liabilities")]);
    m_liabilities_isSet = !json[QString("liabilities")].isNull() && m_liabilities_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAILiabilitiesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiabilitiesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_liabilities.size() > 0) {
        obj.insert(QString("liabilities"), ::OpenAPI::toJsonValue(m_liabilities));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

QList<OAIILiability> OAILiabilitiesModel::getLiabilities() const {
    return m_liabilities;
}
void OAILiabilitiesModel::setLiabilities(const QList<OAIILiability> &liabilities) {
    m_liabilities = liabilities;
    m_liabilities_isSet = true;
}

bool OAILiabilitiesModel::is_liabilities_Set() const{
    return m_liabilities_isSet;
}

bool OAILiabilitiesModel::is_liabilities_Valid() const{
    return m_liabilities_isValid;
}

QList<OAIObjectLink> OAILiabilitiesModel::getLinks() const {
    return m_links;
}
void OAILiabilitiesModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAILiabilitiesModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAILiabilitiesModel::is_links_Valid() const{
    return m_links_isValid;
}

bool OAILiabilitiesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_liabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiabilitiesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
