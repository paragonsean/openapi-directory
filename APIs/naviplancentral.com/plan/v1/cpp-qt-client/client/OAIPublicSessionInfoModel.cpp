/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicSessionInfoModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicSessionInfoModel::OAIPublicSessionInfoModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicSessionInfoModel::OAIPublicSessionInfoModel() {
    this->initializeModel();
}

OAIPublicSessionInfoModel::~OAIPublicSessionInfoModel() {}

void OAIPublicSessionInfoModel::initializeModel() {

    m_eula_accepted_isSet = false;
    m_eula_accepted_isValid = false;

    m_has_account_aggregation_isSet = false;
    m_has_account_aggregation_isValid = false;

    m_has_goal_what_ifing_isSet = false;
    m_has_goal_what_ifing_isValid = false;

    m_has_user_set_password_isSet = false;
    m_has_user_set_password_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_advisor_isSet = false;
    m_is_advisor_isValid = false;

    m_is_client_isSet = false;
    m_is_client_isValid = false;

    m_is_password_expired_isSet = false;
    m_is_password_expired_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIPublicSessionInfoModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicSessionInfoModel::fromJsonObject(QJsonObject json) {

    m_eula_accepted_isValid = ::OpenAPI::fromJsonValue(m_eula_accepted, json[QString("eulaAccepted")]);
    m_eula_accepted_isSet = !json[QString("eulaAccepted")].isNull() && m_eula_accepted_isValid;

    m_has_account_aggregation_isValid = ::OpenAPI::fromJsonValue(m_has_account_aggregation, json[QString("hasAccountAggregation")]);
    m_has_account_aggregation_isSet = !json[QString("hasAccountAggregation")].isNull() && m_has_account_aggregation_isValid;

    m_has_goal_what_ifing_isValid = ::OpenAPI::fromJsonValue(m_has_goal_what_ifing, json[QString("hasGoalWhatIfing")]);
    m_has_goal_what_ifing_isSet = !json[QString("hasGoalWhatIfing")].isNull() && m_has_goal_what_ifing_isValid;

    m_has_user_set_password_isValid = ::OpenAPI::fromJsonValue(m_has_user_set_password, json[QString("hasUserSetPassword")]);
    m_has_user_set_password_isSet = !json[QString("hasUserSetPassword")].isNull() && m_has_user_set_password_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("isAdmin")]);
    m_is_admin_isSet = !json[QString("isAdmin")].isNull() && m_is_admin_isValid;

    m_is_advisor_isValid = ::OpenAPI::fromJsonValue(m_is_advisor, json[QString("isAdvisor")]);
    m_is_advisor_isSet = !json[QString("isAdvisor")].isNull() && m_is_advisor_isValid;

    m_is_client_isValid = ::OpenAPI::fromJsonValue(m_is_client, json[QString("isClient")]);
    m_is_client_isSet = !json[QString("isClient")].isNull() && m_is_client_isValid;

    m_is_password_expired_isValid = ::OpenAPI::fromJsonValue(m_is_password_expired, json[QString("isPasswordExpired")]);
    m_is_password_expired_isSet = !json[QString("isPasswordExpired")].isNull() && m_is_password_expired_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIPublicSessionInfoModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicSessionInfoModel::asJsonObject() const {
    QJsonObject obj;
    if (m_eula_accepted_isSet) {
        obj.insert(QString("eulaAccepted"), ::OpenAPI::toJsonValue(m_eula_accepted));
    }
    if (m_has_account_aggregation_isSet) {
        obj.insert(QString("hasAccountAggregation"), ::OpenAPI::toJsonValue(m_has_account_aggregation));
    }
    if (m_has_goal_what_ifing_isSet) {
        obj.insert(QString("hasGoalWhatIfing"), ::OpenAPI::toJsonValue(m_has_goal_what_ifing));
    }
    if (m_has_user_set_password_isSet) {
        obj.insert(QString("hasUserSetPassword"), ::OpenAPI::toJsonValue(m_has_user_set_password));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("isAdmin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_advisor_isSet) {
        obj.insert(QString("isAdvisor"), ::OpenAPI::toJsonValue(m_is_advisor));
    }
    if (m_is_client_isSet) {
        obj.insert(QString("isClient"), ::OpenAPI::toJsonValue(m_is_client));
    }
    if (m_is_password_expired_isSet) {
        obj.insert(QString("isPasswordExpired"), ::OpenAPI::toJsonValue(m_is_password_expired));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

bool OAIPublicSessionInfoModel::isEulaAccepted() const {
    return m_eula_accepted;
}
void OAIPublicSessionInfoModel::setEulaAccepted(const bool &eula_accepted) {
    m_eula_accepted = eula_accepted;
    m_eula_accepted_isSet = true;
}

bool OAIPublicSessionInfoModel::is_eula_accepted_Set() const{
    return m_eula_accepted_isSet;
}

bool OAIPublicSessionInfoModel::is_eula_accepted_Valid() const{
    return m_eula_accepted_isValid;
}

bool OAIPublicSessionInfoModel::isHasAccountAggregation() const {
    return m_has_account_aggregation;
}
void OAIPublicSessionInfoModel::setHasAccountAggregation(const bool &has_account_aggregation) {
    m_has_account_aggregation = has_account_aggregation;
    m_has_account_aggregation_isSet = true;
}

bool OAIPublicSessionInfoModel::is_has_account_aggregation_Set() const{
    return m_has_account_aggregation_isSet;
}

bool OAIPublicSessionInfoModel::is_has_account_aggregation_Valid() const{
    return m_has_account_aggregation_isValid;
}

bool OAIPublicSessionInfoModel::isHasGoalWhatIfing() const {
    return m_has_goal_what_ifing;
}
void OAIPublicSessionInfoModel::setHasGoalWhatIfing(const bool &has_goal_what_ifing) {
    m_has_goal_what_ifing = has_goal_what_ifing;
    m_has_goal_what_ifing_isSet = true;
}

bool OAIPublicSessionInfoModel::is_has_goal_what_ifing_Set() const{
    return m_has_goal_what_ifing_isSet;
}

bool OAIPublicSessionInfoModel::is_has_goal_what_ifing_Valid() const{
    return m_has_goal_what_ifing_isValid;
}

bool OAIPublicSessionInfoModel::isHasUserSetPassword() const {
    return m_has_user_set_password;
}
void OAIPublicSessionInfoModel::setHasUserSetPassword(const bool &has_user_set_password) {
    m_has_user_set_password = has_user_set_password;
    m_has_user_set_password_isSet = true;
}

bool OAIPublicSessionInfoModel::is_has_user_set_password_Set() const{
    return m_has_user_set_password_isSet;
}

bool OAIPublicSessionInfoModel::is_has_user_set_password_Valid() const{
    return m_has_user_set_password_isValid;
}

bool OAIPublicSessionInfoModel::isIsAdmin() const {
    return m_is_admin;
}
void OAIPublicSessionInfoModel::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIPublicSessionInfoModel::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIPublicSessionInfoModel::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIPublicSessionInfoModel::isIsAdvisor() const {
    return m_is_advisor;
}
void OAIPublicSessionInfoModel::setIsAdvisor(const bool &is_advisor) {
    m_is_advisor = is_advisor;
    m_is_advisor_isSet = true;
}

bool OAIPublicSessionInfoModel::is_is_advisor_Set() const{
    return m_is_advisor_isSet;
}

bool OAIPublicSessionInfoModel::is_is_advisor_Valid() const{
    return m_is_advisor_isValid;
}

bool OAIPublicSessionInfoModel::isIsClient() const {
    return m_is_client;
}
void OAIPublicSessionInfoModel::setIsClient(const bool &is_client) {
    m_is_client = is_client;
    m_is_client_isSet = true;
}

bool OAIPublicSessionInfoModel::is_is_client_Set() const{
    return m_is_client_isSet;
}

bool OAIPublicSessionInfoModel::is_is_client_Valid() const{
    return m_is_client_isValid;
}

bool OAIPublicSessionInfoModel::isIsPasswordExpired() const {
    return m_is_password_expired;
}
void OAIPublicSessionInfoModel::setIsPasswordExpired(const bool &is_password_expired) {
    m_is_password_expired = is_password_expired;
    m_is_password_expired_isSet = true;
}

bool OAIPublicSessionInfoModel::is_is_password_expired_Set() const{
    return m_is_password_expired_isSet;
}

bool OAIPublicSessionInfoModel::is_is_password_expired_Valid() const{
    return m_is_password_expired_isValid;
}

QString OAIPublicSessionInfoModel::getUserId() const {
    return m_user_id;
}
void OAIPublicSessionInfoModel::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPublicSessionInfoModel::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPublicSessionInfoModel::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIPublicSessionInfoModel::getUserName() const {
    return m_user_name;
}
void OAIPublicSessionInfoModel::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIPublicSessionInfoModel::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIPublicSessionInfoModel::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIPublicSessionInfoModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eula_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_account_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_goal_what_ifing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_user_set_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_advisor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_password_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicSessionInfoModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
