/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILumpSumSavingsStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILumpSumSavingsStrategy::OAIILumpSumSavingsStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILumpSumSavingsStrategy::OAIILumpSumSavingsStrategy() {
    this->initializeModel();
}

OAIILumpSumSavingsStrategy::~OAIILumpSumSavingsStrategy() {}

void OAIILumpSumSavingsStrategy::initializeModel() {

    m_amount_or_percent_of_salary_isSet = false;
    m_amount_or_percent_of_salary_isValid = false;

    m_formatted_savings_type_with_dash_isSet = false;
    m_formatted_savings_type_with_dash_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;

    m_savings_date_isSet = false;
    m_savings_date_isValid = false;

    m_savings_type_isSet = false;
    m_savings_type_isValid = false;
}

void OAIILumpSumSavingsStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILumpSumSavingsStrategy::fromJsonObject(QJsonObject json) {

    m_amount_or_percent_of_salary_isValid = ::OpenAPI::fromJsonValue(m_amount_or_percent_of_salary, json[QString("amountOrPercentOfSalary")]);
    m_amount_or_percent_of_salary_isSet = !json[QString("amountOrPercentOfSalary")].isNull() && m_amount_or_percent_of_salary_isValid;

    m_formatted_savings_type_with_dash_isValid = ::OpenAPI::fromJsonValue(m_formatted_savings_type_with_dash, json[QString("formattedSavingsTypeWithDash")]);
    m_formatted_savings_type_with_dash_isSet = !json[QString("formattedSavingsTypeWithDash")].isNull() && m_formatted_savings_type_with_dash_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;

    m_savings_date_isValid = ::OpenAPI::fromJsonValue(m_savings_date, json[QString("savingsDate")]);
    m_savings_date_isSet = !json[QString("savingsDate")].isNull() && m_savings_date_isValid;

    m_savings_type_isValid = ::OpenAPI::fromJsonValue(m_savings_type, json[QString("savingsType")]);
    m_savings_type_isSet = !json[QString("savingsType")].isNull() && m_savings_type_isValid;
}

QString OAIILumpSumSavingsStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILumpSumSavingsStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_or_percent_of_salary.isSet()) {
        obj.insert(QString("amountOrPercentOfSalary"), ::OpenAPI::toJsonValue(m_amount_or_percent_of_salary));
    }
    if (m_formatted_savings_type_with_dash_isSet) {
        obj.insert(QString("formattedSavingsTypeWithDash"), ::OpenAPI::toJsonValue(m_formatted_savings_type_with_dash));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    if (m_savings_date.isSet()) {
        obj.insert(QString("savingsDate"), ::OpenAPI::toJsonValue(m_savings_date));
    }
    if (m_savings_type.isSet()) {
        obj.insert(QString("savingsType"), ::OpenAPI::toJsonValue(m_savings_type));
    }
    return obj;
}

OAIPercentOr_Currency OAIILumpSumSavingsStrategy::getAmountOrPercentOfSalary() const {
    return m_amount_or_percent_of_salary;
}
void OAIILumpSumSavingsStrategy::setAmountOrPercentOfSalary(const OAIPercentOr_Currency &amount_or_percent_of_salary) {
    m_amount_or_percent_of_salary = amount_or_percent_of_salary;
    m_amount_or_percent_of_salary_isSet = true;
}

bool OAIILumpSumSavingsStrategy::is_amount_or_percent_of_salary_Set() const{
    return m_amount_or_percent_of_salary_isSet;
}

bool OAIILumpSumSavingsStrategy::is_amount_or_percent_of_salary_Valid() const{
    return m_amount_or_percent_of_salary_isValid;
}

QString OAIILumpSumSavingsStrategy::getFormattedSavingsTypeWithDash() const {
    return m_formatted_savings_type_with_dash;
}
void OAIILumpSumSavingsStrategy::setFormattedSavingsTypeWithDash(const QString &formatted_savings_type_with_dash) {
    m_formatted_savings_type_with_dash = formatted_savings_type_with_dash;
    m_formatted_savings_type_with_dash_isSet = true;
}

bool OAIILumpSumSavingsStrategy::is_formatted_savings_type_with_dash_Set() const{
    return m_formatted_savings_type_with_dash_isSet;
}

bool OAIILumpSumSavingsStrategy::is_formatted_savings_type_with_dash_Valid() const{
    return m_formatted_savings_type_with_dash_isValid;
}

OAIGrowthRateValues OAIILumpSumSavingsStrategy::getIndexRate() const {
    return m_index_rate;
}
void OAIILumpSumSavingsStrategy::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIILumpSumSavingsStrategy::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIILumpSumSavingsStrategy::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

OAIDate OAIILumpSumSavingsStrategy::getSavingsDate() const {
    return m_savings_date;
}
void OAIILumpSumSavingsStrategy::setSavingsDate(const OAIDate &savings_date) {
    m_savings_date = savings_date;
    m_savings_date_isSet = true;
}

bool OAIILumpSumSavingsStrategy::is_savings_date_Set() const{
    return m_savings_date_isSet;
}

bool OAIILumpSumSavingsStrategy::is_savings_date_Valid() const{
    return m_savings_date_isValid;
}

OAIFormattedEnumType_SavingsStrategyType OAIILumpSumSavingsStrategy::getSavingsType() const {
    return m_savings_type;
}
void OAIILumpSumSavingsStrategy::setSavingsType(const OAIFormattedEnumType_SavingsStrategyType &savings_type) {
    m_savings_type = savings_type;
    m_savings_type_isSet = true;
}

bool OAIILumpSumSavingsStrategy::is_savings_type_Set() const{
    return m_savings_type_isSet;
}

bool OAIILumpSumSavingsStrategy::is_savings_type_Valid() const{
    return m_savings_type_isValid;
}

bool OAIILumpSumSavingsStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_or_percent_of_salary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_savings_type_with_dash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILumpSumSavingsStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
