/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPeriodicDebtModStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPeriodicDebtModStrategy::OAIIPeriodicDebtModStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPeriodicDebtModStrategy::OAIIPeriodicDebtModStrategy() {
    this->initializeModel();
}

OAIIPeriodicDebtModStrategy::~OAIIPeriodicDebtModStrategy() {}

void OAIIPeriodicDebtModStrategy::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_applicable_date_range_isSet = false;
    m_applicable_date_range_isValid = false;

    m_debt_modification_frequency_isSet = false;
    m_debt_modification_frequency_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;
}

void OAIIPeriodicDebtModStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPeriodicDebtModStrategy::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_applicable_date_range_isValid = ::OpenAPI::fromJsonValue(m_applicable_date_range, json[QString("applicableDateRange")]);
    m_applicable_date_range_isSet = !json[QString("applicableDateRange")].isNull() && m_applicable_date_range_isValid;

    m_debt_modification_frequency_isValid = ::OpenAPI::fromJsonValue(m_debt_modification_frequency, json[QString("debtModificationFrequency")]);
    m_debt_modification_frequency_isSet = !json[QString("debtModificationFrequency")].isNull() && m_debt_modification_frequency_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;
}

QString OAIIPeriodicDebtModStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPeriodicDebtModStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_applicable_date_range.isSet()) {
        obj.insert(QString("applicableDateRange"), ::OpenAPI::toJsonValue(m_applicable_date_range));
    }
    if (m_debt_modification_frequency.isSet()) {
        obj.insert(QString("debtModificationFrequency"), ::OpenAPI::toJsonValue(m_debt_modification_frequency));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    return obj;
}

OAICurrency OAIIPeriodicDebtModStrategy::getAmount() const {
    return m_amount;
}
void OAIIPeriodicDebtModStrategy::setAmount(const OAICurrency &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIIPeriodicDebtModStrategy::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIIPeriodicDebtModStrategy::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIFormattedDateRange OAIIPeriodicDebtModStrategy::getApplicableDateRange() const {
    return m_applicable_date_range;
}
void OAIIPeriodicDebtModStrategy::setApplicableDateRange(const OAIFormattedDateRange &applicable_date_range) {
    m_applicable_date_range = applicable_date_range;
    m_applicable_date_range_isSet = true;
}

bool OAIIPeriodicDebtModStrategy::is_applicable_date_range_Set() const{
    return m_applicable_date_range_isSet;
}

bool OAIIPeriodicDebtModStrategy::is_applicable_date_range_Valid() const{
    return m_applicable_date_range_isValid;
}

OAIFormattedEnumType_Frequency OAIIPeriodicDebtModStrategy::getDebtModificationFrequency() const {
    return m_debt_modification_frequency;
}
void OAIIPeriodicDebtModStrategy::setDebtModificationFrequency(const OAIFormattedEnumType_Frequency &debt_modification_frequency) {
    m_debt_modification_frequency = debt_modification_frequency;
    m_debt_modification_frequency_isSet = true;
}

bool OAIIPeriodicDebtModStrategy::is_debt_modification_frequency_Set() const{
    return m_debt_modification_frequency_isSet;
}

bool OAIIPeriodicDebtModStrategy::is_debt_modification_frequency_Valid() const{
    return m_debt_modification_frequency_isValid;
}

OAIGrowthRateValues OAIIPeriodicDebtModStrategy::getIndexRate() const {
    return m_index_rate;
}
void OAIIPeriodicDebtModStrategy::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIIPeriodicDebtModStrategy::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIIPeriodicDebtModStrategy::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

bool OAIIPeriodicDebtModStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_modification_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPeriodicDebtModStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
