/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRestrictedStock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRestrictedStock::OAIIRestrictedStock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRestrictedStock::OAIIRestrictedStock() {
    this->initializeModel();
}

OAIIRestrictedStock::~OAIIRestrictedStock() {}

void OAIIRestrictedStock::initializeModel() {

    m_annual_dividend_per_unit_isSet = false;
    m_annual_dividend_per_unit_isValid = false;

    m_applicable_range_retirement_liquidated_assets_isSet = false;
    m_applicable_range_retirement_liquidated_assets_isValid = false;

    m_awarded_date_isSet = false;
    m_awarded_date_isValid = false;

    m_current_unit_value_isSet = false;
    m_current_unit_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_growth_rate_isSet = false;
    m_growth_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_of_units_isSet = false;
    m_number_of_units_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_price_paid_for_award_isSet = false;
    m_price_paid_for_award_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIRestrictedStock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRestrictedStock::fromJsonObject(QJsonObject json) {

    m_annual_dividend_per_unit_isValid = ::OpenAPI::fromJsonValue(m_annual_dividend_per_unit, json[QString("annualDividendPerUnit")]);
    m_annual_dividend_per_unit_isSet = !json[QString("annualDividendPerUnit")].isNull() && m_annual_dividend_per_unit_isValid;

    m_applicable_range_retirement_liquidated_assets_isValid = ::OpenAPI::fromJsonValue(m_applicable_range_retirement_liquidated_assets, json[QString("applicableRangeRetirementLiquidatedAssets")]);
    m_applicable_range_retirement_liquidated_assets_isSet = !json[QString("applicableRangeRetirementLiquidatedAssets")].isNull() && m_applicable_range_retirement_liquidated_assets_isValid;

    m_awarded_date_isValid = ::OpenAPI::fromJsonValue(m_awarded_date, json[QString("awardedDate")]);
    m_awarded_date_isSet = !json[QString("awardedDate")].isNull() && m_awarded_date_isValid;

    m_current_unit_value_isValid = ::OpenAPI::fromJsonValue(m_current_unit_value, json[QString("currentUnitValue")]);
    m_current_unit_value_isSet = !json[QString("currentUnitValue")].isNull() && m_current_unit_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_growth_rate, json[QString("growthRate")]);
    m_growth_rate_isSet = !json[QString("growthRate")].isNull() && m_growth_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_of_units_isValid = ::OpenAPI::fromJsonValue(m_number_of_units, json[QString("numberOfUnits")]);
    m_number_of_units_isSet = !json[QString("numberOfUnits")].isNull() && m_number_of_units_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_price_paid_for_award_isValid = ::OpenAPI::fromJsonValue(m_price_paid_for_award, json[QString("pricePaidForAward")]);
    m_price_paid_for_award_isSet = !json[QString("pricePaidForAward")].isNull() && m_price_paid_for_award_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIRestrictedStock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRestrictedStock::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_dividend_per_unit.isSet()) {
        obj.insert(QString("annualDividendPerUnit"), ::OpenAPI::toJsonValue(m_annual_dividend_per_unit));
    }
    if (m_applicable_range_retirement_liquidated_assets.isSet()) {
        obj.insert(QString("applicableRangeRetirementLiquidatedAssets"), ::OpenAPI::toJsonValue(m_applicable_range_retirement_liquidated_assets));
    }
    if (m_awarded_date.isSet()) {
        obj.insert(QString("awardedDate"), ::OpenAPI::toJsonValue(m_awarded_date));
    }
    if (m_current_unit_value.isSet()) {
        obj.insert(QString("currentUnitValue"), ::OpenAPI::toJsonValue(m_current_unit_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_growth_rate.isSet()) {
        obj.insert(QString("growthRate"), ::OpenAPI::toJsonValue(m_growth_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_of_units_isSet) {
        obj.insert(QString("numberOfUnits"), ::OpenAPI::toJsonValue(m_number_of_units));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_price_paid_for_award.isSet()) {
        obj.insert(QString("pricePaidForAward"), ::OpenAPI::toJsonValue(m_price_paid_for_award));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICurrency OAIIRestrictedStock::getAnnualDividendPerUnit() const {
    return m_annual_dividend_per_unit;
}
void OAIIRestrictedStock::setAnnualDividendPerUnit(const OAICurrency &annual_dividend_per_unit) {
    m_annual_dividend_per_unit = annual_dividend_per_unit;
    m_annual_dividend_per_unit_isSet = true;
}

bool OAIIRestrictedStock::is_annual_dividend_per_unit_Set() const{
    return m_annual_dividend_per_unit_isSet;
}

bool OAIIRestrictedStock::is_annual_dividend_per_unit_Valid() const{
    return m_annual_dividend_per_unit_isValid;
}

OAIFormattedDateRange OAIIRestrictedStock::getApplicableRangeRetirementLiquidatedAssets() const {
    return m_applicable_range_retirement_liquidated_assets;
}
void OAIIRestrictedStock::setApplicableRangeRetirementLiquidatedAssets(const OAIFormattedDateRange &applicable_range_retirement_liquidated_assets) {
    m_applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets;
    m_applicable_range_retirement_liquidated_assets_isSet = true;
}

bool OAIIRestrictedStock::is_applicable_range_retirement_liquidated_assets_Set() const{
    return m_applicable_range_retirement_liquidated_assets_isSet;
}

bool OAIIRestrictedStock::is_applicable_range_retirement_liquidated_assets_Valid() const{
    return m_applicable_range_retirement_liquidated_assets_isValid;
}

OAIDate OAIIRestrictedStock::getAwardedDate() const {
    return m_awarded_date;
}
void OAIIRestrictedStock::setAwardedDate(const OAIDate &awarded_date) {
    m_awarded_date = awarded_date;
    m_awarded_date_isSet = true;
}

bool OAIIRestrictedStock::is_awarded_date_Set() const{
    return m_awarded_date_isSet;
}

bool OAIIRestrictedStock::is_awarded_date_Valid() const{
    return m_awarded_date_isValid;
}

OAICurrency OAIIRestrictedStock::getCurrentUnitValue() const {
    return m_current_unit_value;
}
void OAIIRestrictedStock::setCurrentUnitValue(const OAICurrency &current_unit_value) {
    m_current_unit_value = current_unit_value;
    m_current_unit_value_isSet = true;
}

bool OAIIRestrictedStock::is_current_unit_value_Set() const{
    return m_current_unit_value_isSet;
}

bool OAIIRestrictedStock::is_current_unit_value_Valid() const{
    return m_current_unit_value_isValid;
}

QString OAIIRestrictedStock::getDescription() const {
    return m_description;
}
void OAIIRestrictedStock::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIRestrictedStock::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIRestrictedStock::is_description_Valid() const{
    return m_description_isValid;
}

OAIPercent OAIIRestrictedStock::getGrowthRate() const {
    return m_growth_rate;
}
void OAIIRestrictedStock::setGrowthRate(const OAIPercent &growth_rate) {
    m_growth_rate = growth_rate;
    m_growth_rate_isSet = true;
}

bool OAIIRestrictedStock::is_growth_rate_Set() const{
    return m_growth_rate_isSet;
}

bool OAIIRestrictedStock::is_growth_rate_Valid() const{
    return m_growth_rate_isValid;
}

QString OAIIRestrictedStock::getId() const {
    return m_id;
}
void OAIIRestrictedStock::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIRestrictedStock::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIRestrictedStock::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIIRestrictedStock::getNumberOfUnits() const {
    return m_number_of_units;
}
void OAIIRestrictedStock::setNumberOfUnits(const qint32 &number_of_units) {
    m_number_of_units = number_of_units;
    m_number_of_units_isSet = true;
}

bool OAIIRestrictedStock::is_number_of_units_Set() const{
    return m_number_of_units_isSet;
}

bool OAIIRestrictedStock::is_number_of_units_Valid() const{
    return m_number_of_units_isValid;
}

QString OAIIRestrictedStock::getOwner() const {
    return m_owner;
}
void OAIIRestrictedStock::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIRestrictedStock::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIRestrictedStock::is_owner_Valid() const{
    return m_owner_isValid;
}

OAICurrency OAIIRestrictedStock::getPricePaidForAward() const {
    return m_price_paid_for_award;
}
void OAIIRestrictedStock::setPricePaidForAward(const OAICurrency &price_paid_for_award) {
    m_price_paid_for_award = price_paid_for_award;
    m_price_paid_for_award_isSet = true;
}

bool OAIIRestrictedStock::is_price_paid_for_award_Set() const{
    return m_price_paid_for_award_isSet;
}

bool OAIIRestrictedStock::is_price_paid_for_award_Valid() const{
    return m_price_paid_for_award_isValid;
}

QString OAIIRestrictedStock::getType() const {
    return m_type;
}
void OAIIRestrictedStock::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIRestrictedStock::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIRestrictedStock::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIRestrictedStock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_dividend_per_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_range_retirement_liquidated_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_awarded_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_unit_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_paid_for_award.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRestrictedStock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
