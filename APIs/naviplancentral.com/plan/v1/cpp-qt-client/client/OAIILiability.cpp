/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILiability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILiability::OAIILiability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILiability::OAIILiability() {
    this->initializeModel();
}

OAIILiability::~OAIILiability() {}

void OAIILiability::initializeModel() {

    m_annual_payment_amount_isSet = false;
    m_annual_payment_amount_isValid = false;

    m_balance_as_of_isSet = false;
    m_balance_as_of_isValid = false;

    m_balance_as_of_plan_date_isSet = false;
    m_balance_as_of_plan_date_isValid = false;

    m_debt_mod_strategies_isSet = false;
    m_debt_mod_strategies_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insured_for_disability_isSet = false;
    m_insured_for_disability_isValid = false;

    m_insured_for_life_isSet = false;
    m_insured_for_life_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_is_interest_rate_variable_isSet = false;
    m_is_interest_rate_variable_isValid = false;

    m_is_payment_variable_isSet = false;
    m_is_payment_variable_isValid = false;

    m_linked_asset_id_isSet = false;
    m_linked_asset_id_isValid = false;

    m_linked_asset_name_isSet = false;
    m_linked_asset_name_isValid = false;

    m_loan_date_isSet = false;
    m_loan_date_isValid = false;

    m_original_balance_isSet = false;
    m_original_balance_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_paid_off_by_retirement_isSet = false;
    m_paid_off_by_retirement_isValid = false;

    m_pay_off_date_isSet = false;
    m_pay_off_date_isValid = false;

    m_pay_off_option_type_isSet = false;
    m_pay_off_option_type_isValid = false;

    m_payment_amount_isSet = false;
    m_payment_amount_isValid = false;

    m_payment_frequency_isSet = false;
    m_payment_frequency_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIILiability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILiability::fromJsonObject(QJsonObject json) {

    m_annual_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_annual_payment_amount, json[QString("annualPaymentAmount")]);
    m_annual_payment_amount_isSet = !json[QString("annualPaymentAmount")].isNull() && m_annual_payment_amount_isValid;

    m_balance_as_of_isValid = ::OpenAPI::fromJsonValue(m_balance_as_of, json[QString("balanceAsOf")]);
    m_balance_as_of_isSet = !json[QString("balanceAsOf")].isNull() && m_balance_as_of_isValid;

    m_balance_as_of_plan_date_isValid = ::OpenAPI::fromJsonValue(m_balance_as_of_plan_date, json[QString("balanceAsOfPlanDate")]);
    m_balance_as_of_plan_date_isSet = !json[QString("balanceAsOfPlanDate")].isNull() && m_balance_as_of_plan_date_isValid;

    m_debt_mod_strategies_isValid = ::OpenAPI::fromJsonValue(m_debt_mod_strategies, json[QString("debtModStrategies")]);
    m_debt_mod_strategies_isSet = !json[QString("debtModStrategies")].isNull() && m_debt_mod_strategies_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insured_for_disability_isValid = ::OpenAPI::fromJsonValue(m_insured_for_disability, json[QString("insuredForDisability")]);
    m_insured_for_disability_isSet = !json[QString("insuredForDisability")].isNull() && m_insured_for_disability_isValid;

    m_insured_for_life_isValid = ::OpenAPI::fromJsonValue(m_insured_for_life, json[QString("insuredForLife")]);
    m_insured_for_life_isSet = !json[QString("insuredForLife")].isNull() && m_insured_for_life_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_is_interest_rate_variable_isValid = ::OpenAPI::fromJsonValue(m_is_interest_rate_variable, json[QString("isInterestRateVariable")]);
    m_is_interest_rate_variable_isSet = !json[QString("isInterestRateVariable")].isNull() && m_is_interest_rate_variable_isValid;

    m_is_payment_variable_isValid = ::OpenAPI::fromJsonValue(m_is_payment_variable, json[QString("isPaymentVariable")]);
    m_is_payment_variable_isSet = !json[QString("isPaymentVariable")].isNull() && m_is_payment_variable_isValid;

    m_linked_asset_id_isValid = ::OpenAPI::fromJsonValue(m_linked_asset_id, json[QString("linkedAssetId")]);
    m_linked_asset_id_isSet = !json[QString("linkedAssetId")].isNull() && m_linked_asset_id_isValid;

    m_linked_asset_name_isValid = ::OpenAPI::fromJsonValue(m_linked_asset_name, json[QString("linkedAssetName")]);
    m_linked_asset_name_isSet = !json[QString("linkedAssetName")].isNull() && m_linked_asset_name_isValid;

    m_loan_date_isValid = ::OpenAPI::fromJsonValue(m_loan_date, json[QString("loanDate")]);
    m_loan_date_isSet = !json[QString("loanDate")].isNull() && m_loan_date_isValid;

    m_original_balance_isValid = ::OpenAPI::fromJsonValue(m_original_balance, json[QString("originalBalance")]);
    m_original_balance_isSet = !json[QString("originalBalance")].isNull() && m_original_balance_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_paid_off_by_retirement_isValid = ::OpenAPI::fromJsonValue(m_paid_off_by_retirement, json[QString("paidOffByRetirement")]);
    m_paid_off_by_retirement_isSet = !json[QString("paidOffByRetirement")].isNull() && m_paid_off_by_retirement_isValid;

    m_pay_off_date_isValid = ::OpenAPI::fromJsonValue(m_pay_off_date, json[QString("payOffDate")]);
    m_pay_off_date_isSet = !json[QString("payOffDate")].isNull() && m_pay_off_date_isValid;

    m_pay_off_option_type_isValid = ::OpenAPI::fromJsonValue(m_pay_off_option_type, json[QString("payOffOptionType")]);
    m_pay_off_option_type_isSet = !json[QString("payOffOptionType")].isNull() && m_pay_off_option_type_isValid;

    m_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_payment_amount, json[QString("paymentAmount")]);
    m_payment_amount_isSet = !json[QString("paymentAmount")].isNull() && m_payment_amount_isValid;

    m_payment_frequency_isValid = ::OpenAPI::fromJsonValue(m_payment_frequency, json[QString("paymentFrequency")]);
    m_payment_frequency_isSet = !json[QString("paymentFrequency")].isNull() && m_payment_frequency_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIILiability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILiability::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_payment_amount.isSet()) {
        obj.insert(QString("annualPaymentAmount"), ::OpenAPI::toJsonValue(m_annual_payment_amount));
    }
    if (m_balance_as_of.isSet()) {
        obj.insert(QString("balanceAsOf"), ::OpenAPI::toJsonValue(m_balance_as_of));
    }
    if (m_balance_as_of_plan_date.isSet()) {
        obj.insert(QString("balanceAsOfPlanDate"), ::OpenAPI::toJsonValue(m_balance_as_of_plan_date));
    }
    if (m_debt_mod_strategies.isSet()) {
        obj.insert(QString("debtModStrategies"), ::OpenAPI::toJsonValue(m_debt_mod_strategies));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insured_for_disability.isSet()) {
        obj.insert(QString("insuredForDisability"), ::OpenAPI::toJsonValue(m_insured_for_disability));
    }
    if (m_insured_for_life.isSet()) {
        obj.insert(QString("insuredForLife"), ::OpenAPI::toJsonValue(m_insured_for_life));
    }
    if (m_interest_rate.isSet()) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_is_interest_rate_variable.isSet()) {
        obj.insert(QString("isInterestRateVariable"), ::OpenAPI::toJsonValue(m_is_interest_rate_variable));
    }
    if (m_is_payment_variable.isSet()) {
        obj.insert(QString("isPaymentVariable"), ::OpenAPI::toJsonValue(m_is_payment_variable));
    }
    if (m_linked_asset_id_isSet) {
        obj.insert(QString("linkedAssetId"), ::OpenAPI::toJsonValue(m_linked_asset_id));
    }
    if (m_linked_asset_name_isSet) {
        obj.insert(QString("linkedAssetName"), ::OpenAPI::toJsonValue(m_linked_asset_name));
    }
    if (m_loan_date.isSet()) {
        obj.insert(QString("loanDate"), ::OpenAPI::toJsonValue(m_loan_date));
    }
    if (m_original_balance.isSet()) {
        obj.insert(QString("originalBalance"), ::OpenAPI::toJsonValue(m_original_balance));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_paid_off_by_retirement.isSet()) {
        obj.insert(QString("paidOffByRetirement"), ::OpenAPI::toJsonValue(m_paid_off_by_retirement));
    }
    if (m_pay_off_date.isSet()) {
        obj.insert(QString("payOffDate"), ::OpenAPI::toJsonValue(m_pay_off_date));
    }
    if (m_pay_off_option_type.isSet()) {
        obj.insert(QString("payOffOptionType"), ::OpenAPI::toJsonValue(m_pay_off_option_type));
    }
    if (m_payment_amount.isSet()) {
        obj.insert(QString("paymentAmount"), ::OpenAPI::toJsonValue(m_payment_amount));
    }
    if (m_payment_frequency.isSet()) {
        obj.insert(QString("paymentFrequency"), ::OpenAPI::toJsonValue(m_payment_frequency));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICurrency OAIILiability::getAnnualPaymentAmount() const {
    return m_annual_payment_amount;
}
void OAIILiability::setAnnualPaymentAmount(const OAICurrency &annual_payment_amount) {
    m_annual_payment_amount = annual_payment_amount;
    m_annual_payment_amount_isSet = true;
}

bool OAIILiability::is_annual_payment_amount_Set() const{
    return m_annual_payment_amount_isSet;
}

bool OAIILiability::is_annual_payment_amount_Valid() const{
    return m_annual_payment_amount_isValid;
}

OAICurrencyWithDate OAIILiability::getBalanceAsOf() const {
    return m_balance_as_of;
}
void OAIILiability::setBalanceAsOf(const OAICurrencyWithDate &balance_as_of) {
    m_balance_as_of = balance_as_of;
    m_balance_as_of_isSet = true;
}

bool OAIILiability::is_balance_as_of_Set() const{
    return m_balance_as_of_isSet;
}

bool OAIILiability::is_balance_as_of_Valid() const{
    return m_balance_as_of_isValid;
}

OAICurrency OAIILiability::getBalanceAsOfPlanDate() const {
    return m_balance_as_of_plan_date;
}
void OAIILiability::setBalanceAsOfPlanDate(const OAICurrency &balance_as_of_plan_date) {
    m_balance_as_of_plan_date = balance_as_of_plan_date;
    m_balance_as_of_plan_date_isSet = true;
}

bool OAIILiability::is_balance_as_of_plan_date_Set() const{
    return m_balance_as_of_plan_date_isSet;
}

bool OAIILiability::is_balance_as_of_plan_date_Valid() const{
    return m_balance_as_of_plan_date_isValid;
}

OAIIDebtModStrategies OAIILiability::getDebtModStrategies() const {
    return m_debt_mod_strategies;
}
void OAIILiability::setDebtModStrategies(const OAIIDebtModStrategies &debt_mod_strategies) {
    m_debt_mod_strategies = debt_mod_strategies;
    m_debt_mod_strategies_isSet = true;
}

bool OAIILiability::is_debt_mod_strategies_Set() const{
    return m_debt_mod_strategies_isSet;
}

bool OAIILiability::is_debt_mod_strategies_Valid() const{
    return m_debt_mod_strategies_isValid;
}

QString OAIILiability::getDescription() const {
    return m_description;
}
void OAIILiability::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIILiability::is_description_Set() const{
    return m_description_isSet;
}

bool OAIILiability::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIILiability::getId() const {
    return m_id;
}
void OAIILiability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIILiability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIILiability::is_id_Valid() const{
    return m_id_isValid;
}

OAIDescriptiveBoolean OAIILiability::getInsuredForDisability() const {
    return m_insured_for_disability;
}
void OAIILiability::setInsuredForDisability(const OAIDescriptiveBoolean &insured_for_disability) {
    m_insured_for_disability = insured_for_disability;
    m_insured_for_disability_isSet = true;
}

bool OAIILiability::is_insured_for_disability_Set() const{
    return m_insured_for_disability_isSet;
}

bool OAIILiability::is_insured_for_disability_Valid() const{
    return m_insured_for_disability_isValid;
}

OAIDescriptiveBoolean OAIILiability::getInsuredForLife() const {
    return m_insured_for_life;
}
void OAIILiability::setInsuredForLife(const OAIDescriptiveBoolean &insured_for_life) {
    m_insured_for_life = insured_for_life;
    m_insured_for_life_isSet = true;
}

bool OAIILiability::is_insured_for_life_Set() const{
    return m_insured_for_life_isSet;
}

bool OAIILiability::is_insured_for_life_Valid() const{
    return m_insured_for_life_isValid;
}

OAIPercent OAIILiability::getInterestRate() const {
    return m_interest_rate;
}
void OAIILiability::setInterestRate(const OAIPercent &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIILiability::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIILiability::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

OAIDescriptiveBoolean OAIILiability::getIsInterestRateVariable() const {
    return m_is_interest_rate_variable;
}
void OAIILiability::setIsInterestRateVariable(const OAIDescriptiveBoolean &is_interest_rate_variable) {
    m_is_interest_rate_variable = is_interest_rate_variable;
    m_is_interest_rate_variable_isSet = true;
}

bool OAIILiability::is_is_interest_rate_variable_Set() const{
    return m_is_interest_rate_variable_isSet;
}

bool OAIILiability::is_is_interest_rate_variable_Valid() const{
    return m_is_interest_rate_variable_isValid;
}

OAIDescriptiveBoolean OAIILiability::getIsPaymentVariable() const {
    return m_is_payment_variable;
}
void OAIILiability::setIsPaymentVariable(const OAIDescriptiveBoolean &is_payment_variable) {
    m_is_payment_variable = is_payment_variable;
    m_is_payment_variable_isSet = true;
}

bool OAIILiability::is_is_payment_variable_Set() const{
    return m_is_payment_variable_isSet;
}

bool OAIILiability::is_is_payment_variable_Valid() const{
    return m_is_payment_variable_isValid;
}

QString OAIILiability::getLinkedAssetId() const {
    return m_linked_asset_id;
}
void OAIILiability::setLinkedAssetId(const QString &linked_asset_id) {
    m_linked_asset_id = linked_asset_id;
    m_linked_asset_id_isSet = true;
}

bool OAIILiability::is_linked_asset_id_Set() const{
    return m_linked_asset_id_isSet;
}

bool OAIILiability::is_linked_asset_id_Valid() const{
    return m_linked_asset_id_isValid;
}

QString OAIILiability::getLinkedAssetName() const {
    return m_linked_asset_name;
}
void OAIILiability::setLinkedAssetName(const QString &linked_asset_name) {
    m_linked_asset_name = linked_asset_name;
    m_linked_asset_name_isSet = true;
}

bool OAIILiability::is_linked_asset_name_Set() const{
    return m_linked_asset_name_isSet;
}

bool OAIILiability::is_linked_asset_name_Valid() const{
    return m_linked_asset_name_isValid;
}

OAIDate OAIILiability::getLoanDate() const {
    return m_loan_date;
}
void OAIILiability::setLoanDate(const OAIDate &loan_date) {
    m_loan_date = loan_date;
    m_loan_date_isSet = true;
}

bool OAIILiability::is_loan_date_Set() const{
    return m_loan_date_isSet;
}

bool OAIILiability::is_loan_date_Valid() const{
    return m_loan_date_isValid;
}

OAICurrency OAIILiability::getOriginalBalance() const {
    return m_original_balance;
}
void OAIILiability::setOriginalBalance(const OAICurrency &original_balance) {
    m_original_balance = original_balance;
    m_original_balance_isSet = true;
}

bool OAIILiability::is_original_balance_Set() const{
    return m_original_balance_isSet;
}

bool OAIILiability::is_original_balance_Valid() const{
    return m_original_balance_isValid;
}

QString OAIILiability::getOwner() const {
    return m_owner;
}
void OAIILiability::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIILiability::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIILiability::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIIOptionalField_DescriptiveBoolean OAIILiability::getPaidOffByRetirement() const {
    return m_paid_off_by_retirement;
}
void OAIILiability::setPaidOffByRetirement(const OAIIOptionalField_DescriptiveBoolean &paid_off_by_retirement) {
    m_paid_off_by_retirement = paid_off_by_retirement;
    m_paid_off_by_retirement_isSet = true;
}

bool OAIILiability::is_paid_off_by_retirement_Set() const{
    return m_paid_off_by_retirement_isSet;
}

bool OAIILiability::is_paid_off_by_retirement_Valid() const{
    return m_paid_off_by_retirement_isValid;
}

OAIIOptionalField_Date OAIILiability::getPayOffDate() const {
    return m_pay_off_date;
}
void OAIILiability::setPayOffDate(const OAIIOptionalField_Date &pay_off_date) {
    m_pay_off_date = pay_off_date;
    m_pay_off_date_isSet = true;
}

bool OAIILiability::is_pay_off_date_Set() const{
    return m_pay_off_date_isSet;
}

bool OAIILiability::is_pay_off_date_Valid() const{
    return m_pay_off_date_isValid;
}

OAIFormattedEnumType_PayOffOptionsType OAIILiability::getPayOffOptionType() const {
    return m_pay_off_option_type;
}
void OAIILiability::setPayOffOptionType(const OAIFormattedEnumType_PayOffOptionsType &pay_off_option_type) {
    m_pay_off_option_type = pay_off_option_type;
    m_pay_off_option_type_isSet = true;
}

bool OAIILiability::is_pay_off_option_type_Set() const{
    return m_pay_off_option_type_isSet;
}

bool OAIILiability::is_pay_off_option_type_Valid() const{
    return m_pay_off_option_type_isValid;
}

OAIIOptionalField_Currency OAIILiability::getPaymentAmount() const {
    return m_payment_amount;
}
void OAIILiability::setPaymentAmount(const OAIIOptionalField_Currency &payment_amount) {
    m_payment_amount = payment_amount;
    m_payment_amount_isSet = true;
}

bool OAIILiability::is_payment_amount_Set() const{
    return m_payment_amount_isSet;
}

bool OAIILiability::is_payment_amount_Valid() const{
    return m_payment_amount_isValid;
}

OAIFormattedEnumType_Frequency OAIILiability::getPaymentFrequency() const {
    return m_payment_frequency;
}
void OAIILiability::setPaymentFrequency(const OAIFormattedEnumType_Frequency &payment_frequency) {
    m_payment_frequency = payment_frequency;
    m_payment_frequency_isSet = true;
}

bool OAIILiability::is_payment_frequency_Set() const{
    return m_payment_frequency_isSet;
}

bool OAIILiability::is_payment_frequency_Valid() const{
    return m_payment_frequency_isValid;
}

OAIFormattedEnumType_PaymentType OAIILiability::getPaymentType() const {
    return m_payment_type;
}
void OAIILiability::setPaymentType(const OAIFormattedEnumType_PaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIILiability::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIILiability::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIFormattedEnumType_LiabilityType OAIILiability::getType() const {
    return m_type;
}
void OAIILiability::setType(const OAIFormattedEnumType_LiabilityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIILiability::is_type_Set() const{
    return m_type_isSet;
}

bool OAIILiability::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIILiability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_payment_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_as_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_as_of_plan_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_mod_strategies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insured_for_disability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insured_for_life.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_interest_rate_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_payment_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_off_by_retirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_off_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_off_option_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILiability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
