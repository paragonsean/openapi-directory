/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIHoldingCompany.h
 *
 * 
 */

#ifndef OAIIHoldingCompany_H
#define OAIIHoldingCompany_H

#include <QJsonObject>

#include "OAICurrency.h"
#include "OAIDate.h"
#include "OAIDescriptiveBoolean.h"
#include "OAIIContributions.h"
#include "OAIICorporationRealEstateAsset.h"
#include "OAIIEstateDetails.h"
#include "OAIIHistoricalData.h"
#include "OAIIInvestmentAccount.h"
#include "OAIILiability.h"
#include "OAIILifeInsurancePolicy.h"
#include "OAIIOwnershipDetails.h"
#include "OAIIRealEstateAsset.h"
#include "OAIIWithdrawals.h"
#include "OAIPercent.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPercent;
class OAIDescriptiveBoolean;
class OAIIContributions;
class OAIDate;
class OAIIEstateDetails;
class OAIIHistoricalData;
class OAIIInvestmentAccount;
class OAIILiability;
class OAIILifeInsurancePolicy;
class OAICurrency;
class OAIIRealEstateAsset;
class OAIIOwnershipDetails;
class OAIICorporationRealEstateAsset;
class OAIIWithdrawals;

class OAIIHoldingCompany : public OAIObject {
public:
    OAIIHoldingCompany();
    OAIIHoldingCompany(QString json);
    ~OAIIHoldingCompany() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPercent getAnnualDividendYield() const;
    void setAnnualDividendYield(const OAIPercent &annual_dividend_yield);
    bool is_annual_dividend_yield_Set() const;
    bool is_annual_dividend_yield_Valid() const;

    OAIDescriptiveBoolean getCcpc() const;
    void setCcpc(const OAIDescriptiveBoolean &ccpc);
    bool is_ccpc_Set() const;
    bool is_ccpc_Valid() const;

    qint32 getCommonSharesOutstanding() const;
    void setCommonSharesOutstanding(const qint32 &common_shares_outstanding);
    bool is_common_shares_outstanding_Set() const;
    bool is_common_shares_outstanding_Valid() const;

    OAIIContributions getContributions() const;
    void setContributions(const OAIIContributions &contributions);
    bool is_contributions_Set() const;
    bool is_contributions_Valid() const;

    OAIDate getCorporateYearEnd() const;
    void setCorporateYearEnd(const OAIDate &corporate_year_end);
    bool is_corporate_year_end_Set() const;
    bool is_corporate_year_end_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDividendType() const;
    void setDividendType(const QString &dividend_type);
    bool is_dividend_type_Set() const;
    bool is_dividend_type_Valid() const;

    QString getDividendTypeFormatted() const;
    void setDividendTypeFormatted(const QString &dividend_type_formatted);
    bool is_dividend_type_formatted_Set() const;
    bool is_dividend_type_formatted_Valid() const;

    OAIIEstateDetails getEstateDetails() const;
    void setEstateDetails(const OAIIEstateDetails &estate_details);
    bool is_estate_details_Set() const;
    bool is_estate_details_Valid() const;

    OAIIHistoricalData getHistoricalData() const;
    void setHistoricalData(const OAIIHistoricalData &historical_data);
    bool is_historical_data_Set() const;
    bool is_historical_data_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIIInvestmentAccount> getInvestmentAccounts() const;
    void setInvestmentAccounts(const QList<OAIIInvestmentAccount> &investment_accounts);
    bool is_investment_accounts_Set() const;
    bool is_investment_accounts_Valid() const;

    QList<OAIILiability> getLiabilities() const;
    void setLiabilities(const QList<OAIILiability> &liabilities);
    bool is_liabilities_Set() const;
    bool is_liabilities_Valid() const;

    QList<OAIILifeInsurancePolicy> getLifeInsurancePolicies() const;
    void setLifeInsurancePolicies(const QList<OAIILifeInsurancePolicy> &life_insurance_policies);
    bool is_life_insurance_policies_Set() const;
    bool is_life_insurance_policies_Valid() const;

    OAICurrency getMarketValue() const;
    void setMarketValue(const OAICurrency &market_value);
    bool is_market_value_Set() const;
    bool is_market_value_Valid() const;

    qint32 getNumPreferredShareClasses() const;
    void setNumPreferredShareClasses(const qint32 &num_preferred_share_classes);
    bool is_num_preferred_share_classes_Set() const;
    bool is_num_preferred_share_classes_Valid() const;

    QList<OAIIRealEstateAsset> getOtherAssets() const;
    void setOtherAssets(const QList<OAIIRealEstateAsset> &other_assets);
    bool is_other_assets_Set() const;
    bool is_other_assets_Valid() const;

    OAIDate getOwnershipAsOfDate() const;
    void setOwnershipAsOfDate(const OAIDate &ownership_as_of_date);
    bool is_ownership_as_of_date_Set() const;
    bool is_ownership_as_of_date_Valid() const;

    OAIIOwnershipDetails getOwnershipDetails() const;
    void setOwnershipDetails(const OAIIOwnershipDetails &ownership_details);
    bool is_ownership_details_Set() const;
    bool is_ownership_details_Valid() const;

    qint32 getPreferredSharesOutstanding() const;
    void setPreferredSharesOutstanding(const qint32 &preferred_shares_outstanding);
    bool is_preferred_shares_outstanding_Set() const;
    bool is_preferred_shares_outstanding_Valid() const;

    QString getProvinceOfIncorporation() const;
    void setProvinceOfIncorporation(const QString &province_of_incorporation);
    bool is_province_of_incorporation_Set() const;
    bool is_province_of_incorporation_Valid() const;

    QString getProvinceOfTaxation() const;
    void setProvinceOfTaxation(const QString &province_of_taxation);
    bool is_province_of_taxation_Set() const;
    bool is_province_of_taxation_Valid() const;

    QList<OAIICorporationRealEstateAsset> getRealEstateAssets() const;
    void setRealEstateAssets(const QList<OAIICorporationRealEstateAsset> &real_estate_assets);
    bool is_real_estate_assets_Set() const;
    bool is_real_estate_assets_Valid() const;

    OAICurrency getValueOfAllCommonShares() const;
    void setValueOfAllCommonShares(const OAICurrency &value_of_all_common_shares);
    bool is_value_of_all_common_shares_Set() const;
    bool is_value_of_all_common_shares_Valid() const;

    OAICurrency getValueOfAllPreferredShares() const;
    void setValueOfAllPreferredShares(const OAICurrency &value_of_all_preferred_shares);
    bool is_value_of_all_preferred_shares_Set() const;
    bool is_value_of_all_preferred_shares_Valid() const;

    OAIIWithdrawals getWithdrawals() const;
    void setWithdrawals(const OAIIWithdrawals &withdrawals);
    bool is_withdrawals_Set() const;
    bool is_withdrawals_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPercent m_annual_dividend_yield;
    bool m_annual_dividend_yield_isSet;
    bool m_annual_dividend_yield_isValid;

    OAIDescriptiveBoolean m_ccpc;
    bool m_ccpc_isSet;
    bool m_ccpc_isValid;

    qint32 m_common_shares_outstanding;
    bool m_common_shares_outstanding_isSet;
    bool m_common_shares_outstanding_isValid;

    OAIIContributions m_contributions;
    bool m_contributions_isSet;
    bool m_contributions_isValid;

    OAIDate m_corporate_year_end;
    bool m_corporate_year_end_isSet;
    bool m_corporate_year_end_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_dividend_type;
    bool m_dividend_type_isSet;
    bool m_dividend_type_isValid;

    QString m_dividend_type_formatted;
    bool m_dividend_type_formatted_isSet;
    bool m_dividend_type_formatted_isValid;

    OAIIEstateDetails m_estate_details;
    bool m_estate_details_isSet;
    bool m_estate_details_isValid;

    OAIIHistoricalData m_historical_data;
    bool m_historical_data_isSet;
    bool m_historical_data_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIIInvestmentAccount> m_investment_accounts;
    bool m_investment_accounts_isSet;
    bool m_investment_accounts_isValid;

    QList<OAIILiability> m_liabilities;
    bool m_liabilities_isSet;
    bool m_liabilities_isValid;

    QList<OAIILifeInsurancePolicy> m_life_insurance_policies;
    bool m_life_insurance_policies_isSet;
    bool m_life_insurance_policies_isValid;

    OAICurrency m_market_value;
    bool m_market_value_isSet;
    bool m_market_value_isValid;

    qint32 m_num_preferred_share_classes;
    bool m_num_preferred_share_classes_isSet;
    bool m_num_preferred_share_classes_isValid;

    QList<OAIIRealEstateAsset> m_other_assets;
    bool m_other_assets_isSet;
    bool m_other_assets_isValid;

    OAIDate m_ownership_as_of_date;
    bool m_ownership_as_of_date_isSet;
    bool m_ownership_as_of_date_isValid;

    OAIIOwnershipDetails m_ownership_details;
    bool m_ownership_details_isSet;
    bool m_ownership_details_isValid;

    qint32 m_preferred_shares_outstanding;
    bool m_preferred_shares_outstanding_isSet;
    bool m_preferred_shares_outstanding_isValid;

    QString m_province_of_incorporation;
    bool m_province_of_incorporation_isSet;
    bool m_province_of_incorporation_isValid;

    QString m_province_of_taxation;
    bool m_province_of_taxation_isSet;
    bool m_province_of_taxation_isValid;

    QList<OAIICorporationRealEstateAsset> m_real_estate_assets;
    bool m_real_estate_assets_isSet;
    bool m_real_estate_assets_isValid;

    OAICurrency m_value_of_all_common_shares;
    bool m_value_of_all_common_shares_isSet;
    bool m_value_of_all_common_shares_isValid;

    OAICurrency m_value_of_all_preferred_shares;
    bool m_value_of_all_preferred_shares_isSet;
    bool m_value_of_all_preferred_shares_isValid;

    OAIIWithdrawals m_withdrawals;
    bool m_withdrawals_isSet;
    bool m_withdrawals_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIHoldingCompany)

#endif // OAIIHoldingCompany_H
