/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectedAnnualSummaryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectedAnnualSummaryModel::OAIProjectedAnnualSummaryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectedAnnualSummaryModel::OAIProjectedAnnualSummaryModel() {
    this->initializeModel();
}

OAIProjectedAnnualSummaryModel::~OAIProjectedAnnualSummaryModel() {}

void OAIProjectedAnnualSummaryModel::initializeModel() {

    m_annual_summary_isSet = false;
    m_annual_summary_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAIProjectedAnnualSummaryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectedAnnualSummaryModel::fromJsonObject(QJsonObject json) {

    m_annual_summary_isValid = ::OpenAPI::fromJsonValue(m_annual_summary, json[QString("annualSummary")]);
    m_annual_summary_isSet = !json[QString("annualSummary")].isNull() && m_annual_summary_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAIProjectedAnnualSummaryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectedAnnualSummaryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_summary.isSet()) {
        obj.insert(QString("annualSummary"), ::OpenAPI::toJsonValue(m_annual_summary));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

OAIProjectedAnnualSummary OAIProjectedAnnualSummaryModel::getAnnualSummary() const {
    return m_annual_summary;
}
void OAIProjectedAnnualSummaryModel::setAnnualSummary(const OAIProjectedAnnualSummary &annual_summary) {
    m_annual_summary = annual_summary;
    m_annual_summary_isSet = true;
}

bool OAIProjectedAnnualSummaryModel::is_annual_summary_Set() const{
    return m_annual_summary_isSet;
}

bool OAIProjectedAnnualSummaryModel::is_annual_summary_Valid() const{
    return m_annual_summary_isValid;
}

QList<OAIObjectLink> OAIProjectedAnnualSummaryModel::getLinks() const {
    return m_links;
}
void OAIProjectedAnnualSummaryModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProjectedAnnualSummaryModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProjectedAnnualSummaryModel::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIProjectedAnnualSummaryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectedAnnualSummaryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
