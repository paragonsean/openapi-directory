/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPortfolioAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPortfolioAccount::OAIIPortfolioAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPortfolioAccount::OAIIPortfolioAccount() {
    this->initializeModel();
}

OAIIPortfolioAccount::~OAIIPortfolioAccount() {}

void OAIIPortfolioAccount::initializeModel() {

    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet = false;
    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isValid = false;

    m_annual_fee_isSet = false;
    m_annual_fee_isValid = false;

    m_applicable_range_retirement_liquidated_assets_isSet = false;
    m_applicable_range_retirement_liquidated_assets_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_with_owner_isSet = false;
    m_description_with_owner_isValid = false;

    m_exclude_in_aa_isSet = false;
    m_exclude_in_aa_isValid = false;

    m_holdings_isSet = false;
    m_holdings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_system_generated_isSet = false;
    m_is_system_generated_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_portfolio_assets_isSet = false;
    m_portfolio_assets_isValid = false;

    m_rate_of_return_isSet = false;
    m_rate_of_return_isValid = false;

    m_savings_strategies_isSet = false;
    m_savings_strategies_isValid = false;

    m_sepp_redemption_strategy_isSet = false;
    m_sepp_redemption_strategy_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;
}

void OAIIPortfolioAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPortfolioAccount::fromJsonObject(QJsonObject json) {

    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isValid = ::OpenAPI::fromJsonValue(m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm, json[QString("accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm")]);
    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet = !json[QString("accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm")].isNull() && m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isValid;

    m_annual_fee_isValid = ::OpenAPI::fromJsonValue(m_annual_fee, json[QString("annualFee")]);
    m_annual_fee_isSet = !json[QString("annualFee")].isNull() && m_annual_fee_isValid;

    m_applicable_range_retirement_liquidated_assets_isValid = ::OpenAPI::fromJsonValue(m_applicable_range_retirement_liquidated_assets, json[QString("applicableRangeRetirementLiquidatedAssets")]);
    m_applicable_range_retirement_liquidated_assets_isSet = !json[QString("applicableRangeRetirementLiquidatedAssets")].isNull() && m_applicable_range_retirement_liquidated_assets_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("costBasis")]);
    m_cost_basis_isSet = !json[QString("costBasis")].isNull() && m_cost_basis_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_with_owner_isValid = ::OpenAPI::fromJsonValue(m_description_with_owner, json[QString("descriptionWithOwner")]);
    m_description_with_owner_isSet = !json[QString("descriptionWithOwner")].isNull() && m_description_with_owner_isValid;

    m_exclude_in_aa_isValid = ::OpenAPI::fromJsonValue(m_exclude_in_aa, json[QString("excludeInAA")]);
    m_exclude_in_aa_isSet = !json[QString("excludeInAA")].isNull() && m_exclude_in_aa_isValid;

    m_holdings_isValid = ::OpenAPI::fromJsonValue(m_holdings, json[QString("holdings")]);
    m_holdings_isSet = !json[QString("holdings")].isNull() && m_holdings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_system_generated_isValid = ::OpenAPI::fromJsonValue(m_is_system_generated, json[QString("isSystemGenerated")]);
    m_is_system_generated_isSet = !json[QString("isSystemGenerated")].isNull() && m_is_system_generated_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_portfolio_assets_isValid = ::OpenAPI::fromJsonValue(m_portfolio_assets, json[QString("portfolioAssets")]);
    m_portfolio_assets_isSet = !json[QString("portfolioAssets")].isNull() && m_portfolio_assets_isValid;

    m_rate_of_return_isValid = ::OpenAPI::fromJsonValue(m_rate_of_return, json[QString("rateOfReturn")]);
    m_rate_of_return_isSet = !json[QString("rateOfReturn")].isNull() && m_rate_of_return_isValid;

    m_savings_strategies_isValid = ::OpenAPI::fromJsonValue(m_savings_strategies, json[QString("savingsStrategies")]);
    m_savings_strategies_isSet = !json[QString("savingsStrategies")].isNull() && m_savings_strategies_isValid;

    m_sepp_redemption_strategy_isValid = ::OpenAPI::fromJsonValue(m_sepp_redemption_strategy, json[QString("seppRedemptionStrategy")]);
    m_sepp_redemption_strategy_isSet = !json[QString("seppRedemptionStrategy")].isNull() && m_sepp_redemption_strategy_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("valuationDate")]);
    m_valuation_date_isSet = !json[QString("valuationDate")].isNull() && m_valuation_date_isValid;
}

QString OAIIPortfolioAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPortfolioAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet) {
        obj.insert(QString("accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm"), ::OpenAPI::toJsonValue(m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm));
    }
    if (m_annual_fee.isSet()) {
        obj.insert(QString("annualFee"), ::OpenAPI::toJsonValue(m_annual_fee));
    }
    if (m_applicable_range_retirement_liquidated_assets.isSet()) {
        obj.insert(QString("applicableRangeRetirementLiquidatedAssets"), ::OpenAPI::toJsonValue(m_applicable_range_retirement_liquidated_assets));
    }
    if (m_cost_basis.isSet()) {
        obj.insert(QString("costBasis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_with_owner_isSet) {
        obj.insert(QString("descriptionWithOwner"), ::OpenAPI::toJsonValue(m_description_with_owner));
    }
    if (m_exclude_in_aa_isSet) {
        obj.insert(QString("excludeInAA"), ::OpenAPI::toJsonValue(m_exclude_in_aa));
    }
    if (m_holdings.size() > 0) {
        obj.insert(QString("holdings"), ::OpenAPI::toJsonValue(m_holdings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_system_generated_isSet) {
        obj.insert(QString("isSystemGenerated"), ::OpenAPI::toJsonValue(m_is_system_generated));
    }
    if (m_market_value.isSet()) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_portfolio_assets.size() > 0) {
        obj.insert(QString("portfolioAssets"), ::OpenAPI::toJsonValue(m_portfolio_assets));
    }
    if (m_rate_of_return.isSet()) {
        obj.insert(QString("rateOfReturn"), ::OpenAPI::toJsonValue(m_rate_of_return));
    }
    if (m_savings_strategies.isSet()) {
        obj.insert(QString("savingsStrategies"), ::OpenAPI::toJsonValue(m_savings_strategies));
    }
    if (m_sepp_redemption_strategy.isSet()) {
        obj.insert(QString("seppRedemptionStrategy"), ::OpenAPI::toJsonValue(m_sepp_redemption_strategy));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valuation_date.isSet()) {
        obj.insert(QString("valuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    return obj;
}

bool OAIIPortfolioAccount::isAccountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm() const {
    return m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm;
}
void OAIIPortfolioAccount::setAccountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm(const bool &account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm) {
    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm = account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm;
    m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet = true;
}

bool OAIIPortfolioAccount::is_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_Set() const{
    return m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet;
}

bool OAIIPortfolioAccount::is_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_Valid() const{
    return m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isValid;
}

OAIPercent OAIIPortfolioAccount::getAnnualFee() const {
    return m_annual_fee;
}
void OAIIPortfolioAccount::setAnnualFee(const OAIPercent &annual_fee) {
    m_annual_fee = annual_fee;
    m_annual_fee_isSet = true;
}

bool OAIIPortfolioAccount::is_annual_fee_Set() const{
    return m_annual_fee_isSet;
}

bool OAIIPortfolioAccount::is_annual_fee_Valid() const{
    return m_annual_fee_isValid;
}

OAIFormattedDateRange OAIIPortfolioAccount::getApplicableRangeRetirementLiquidatedAssets() const {
    return m_applicable_range_retirement_liquidated_assets;
}
void OAIIPortfolioAccount::setApplicableRangeRetirementLiquidatedAssets(const OAIFormattedDateRange &applicable_range_retirement_liquidated_assets) {
    m_applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets;
    m_applicable_range_retirement_liquidated_assets_isSet = true;
}

bool OAIIPortfolioAccount::is_applicable_range_retirement_liquidated_assets_Set() const{
    return m_applicable_range_retirement_liquidated_assets_isSet;
}

bool OAIIPortfolioAccount::is_applicable_range_retirement_liquidated_assets_Valid() const{
    return m_applicable_range_retirement_liquidated_assets_isValid;
}

OAICurrency OAIIPortfolioAccount::getCostBasis() const {
    return m_cost_basis;
}
void OAIIPortfolioAccount::setCostBasis(const OAICurrency &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIIPortfolioAccount::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIIPortfolioAccount::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

QString OAIIPortfolioAccount::getDescription() const {
    return m_description;
}
void OAIIPortfolioAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIPortfolioAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIPortfolioAccount::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIPortfolioAccount::getDescriptionWithOwner() const {
    return m_description_with_owner;
}
void OAIIPortfolioAccount::setDescriptionWithOwner(const QString &description_with_owner) {
    m_description_with_owner = description_with_owner;
    m_description_with_owner_isSet = true;
}

bool OAIIPortfolioAccount::is_description_with_owner_Set() const{
    return m_description_with_owner_isSet;
}

bool OAIIPortfolioAccount::is_description_with_owner_Valid() const{
    return m_description_with_owner_isValid;
}

bool OAIIPortfolioAccount::isExcludeInAa() const {
    return m_exclude_in_aa;
}
void OAIIPortfolioAccount::setExcludeInAa(const bool &exclude_in_aa) {
    m_exclude_in_aa = exclude_in_aa;
    m_exclude_in_aa_isSet = true;
}

bool OAIIPortfolioAccount::is_exclude_in_aa_Set() const{
    return m_exclude_in_aa_isSet;
}

bool OAIIPortfolioAccount::is_exclude_in_aa_Valid() const{
    return m_exclude_in_aa_isValid;
}

QList<OAIIHolding> OAIIPortfolioAccount::getHoldings() const {
    return m_holdings;
}
void OAIIPortfolioAccount::setHoldings(const QList<OAIIHolding> &holdings) {
    m_holdings = holdings;
    m_holdings_isSet = true;
}

bool OAIIPortfolioAccount::is_holdings_Set() const{
    return m_holdings_isSet;
}

bool OAIIPortfolioAccount::is_holdings_Valid() const{
    return m_holdings_isValid;
}

QString OAIIPortfolioAccount::getId() const {
    return m_id;
}
void OAIIPortfolioAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIPortfolioAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIPortfolioAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIIPortfolioAccount::isIsSystemGenerated() const {
    return m_is_system_generated;
}
void OAIIPortfolioAccount::setIsSystemGenerated(const bool &is_system_generated) {
    m_is_system_generated = is_system_generated;
    m_is_system_generated_isSet = true;
}

bool OAIIPortfolioAccount::is_is_system_generated_Set() const{
    return m_is_system_generated_isSet;
}

bool OAIIPortfolioAccount::is_is_system_generated_Valid() const{
    return m_is_system_generated_isValid;
}

OAICurrency OAIIPortfolioAccount::getMarketValue() const {
    return m_market_value;
}
void OAIIPortfolioAccount::setMarketValue(const OAICurrency &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIIPortfolioAccount::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIIPortfolioAccount::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIIPortfolioAccount::getOwner() const {
    return m_owner;
}
void OAIIPortfolioAccount::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIPortfolioAccount::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIPortfolioAccount::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAIIPortfolioAsset> OAIIPortfolioAccount::getPortfolioAssets() const {
    return m_portfolio_assets;
}
void OAIIPortfolioAccount::setPortfolioAssets(const QList<OAIIPortfolioAsset> &portfolio_assets) {
    m_portfolio_assets = portfolio_assets;
    m_portfolio_assets_isSet = true;
}

bool OAIIPortfolioAccount::is_portfolio_assets_Set() const{
    return m_portfolio_assets_isSet;
}

bool OAIIPortfolioAccount::is_portfolio_assets_Valid() const{
    return m_portfolio_assets_isValid;
}

OAIIRateOfReturnDetails OAIIPortfolioAccount::getRateOfReturn() const {
    return m_rate_of_return;
}
void OAIIPortfolioAccount::setRateOfReturn(const OAIIRateOfReturnDetails &rate_of_return) {
    m_rate_of_return = rate_of_return;
    m_rate_of_return_isSet = true;
}

bool OAIIPortfolioAccount::is_rate_of_return_Set() const{
    return m_rate_of_return_isSet;
}

bool OAIIPortfolioAccount::is_rate_of_return_Valid() const{
    return m_rate_of_return_isValid;
}

OAIISavingsStrategies OAIIPortfolioAccount::getSavingsStrategies() const {
    return m_savings_strategies;
}
void OAIIPortfolioAccount::setSavingsStrategies(const OAIISavingsStrategies &savings_strategies) {
    m_savings_strategies = savings_strategies;
    m_savings_strategies_isSet = true;
}

bool OAIIPortfolioAccount::is_savings_strategies_Set() const{
    return m_savings_strategies_isSet;
}

bool OAIIPortfolioAccount::is_savings_strategies_Valid() const{
    return m_savings_strategies_isValid;
}

OAIISEPPRedemptionStrategy OAIIPortfolioAccount::getSeppRedemptionStrategy() const {
    return m_sepp_redemption_strategy;
}
void OAIIPortfolioAccount::setSeppRedemptionStrategy(const OAIISEPPRedemptionStrategy &sepp_redemption_strategy) {
    m_sepp_redemption_strategy = sepp_redemption_strategy;
    m_sepp_redemption_strategy_isSet = true;
}

bool OAIIPortfolioAccount::is_sepp_redemption_strategy_Set() const{
    return m_sepp_redemption_strategy_isSet;
}

bool OAIIPortfolioAccount::is_sepp_redemption_strategy_Valid() const{
    return m_sepp_redemption_strategy_isValid;
}

QString OAIIPortfolioAccount::getType() const {
    return m_type;
}
void OAIIPortfolioAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIPortfolioAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIPortfolioAccount::is_type_Valid() const{
    return m_type_isValid;
}

OAIDate OAIIPortfolioAccount::getValuationDate() const {
    return m_valuation_date;
}
void OAIIPortfolioAccount::setValuationDate(const OAIDate &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIIPortfolioAccount::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIIPortfolioAccount::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

bool OAIIPortfolioAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_return_rates_no_longer_correlate_to_assumed_asset_mix_due_to_override_in_gsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_range_retirement_liquidated_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_with_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_in_aa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_of_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_strategies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepp_redemption_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPortfolioAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
