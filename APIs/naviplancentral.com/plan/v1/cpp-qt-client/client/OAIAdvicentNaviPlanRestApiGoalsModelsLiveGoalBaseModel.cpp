/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::~OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel() {}

void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::initializeModel() {

    m_client_description_isSet = false;
    m_client_description_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_plan_description_isSet = false;
    m_plan_description_isValid = false;

    m_plan_last_update_time_isSet = false;
    m_plan_last_update_time_isValid = false;
}

void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::fromJsonObject(QJsonObject json) {

    m_client_description_isValid = ::OpenAPI::fromJsonValue(m_client_description, json[QString("clientDescription")]);
    m_client_description_isSet = !json[QString("clientDescription")].isNull() && m_client_description_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("goals")]);
    m_goals_isSet = !json[QString("goals")].isNull() && m_goals_isValid;

    m_plan_description_isValid = ::OpenAPI::fromJsonValue(m_plan_description, json[QString("planDescription")]);
    m_plan_description_isSet = !json[QString("planDescription")].isNull() && m_plan_description_isValid;

    m_plan_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_plan_last_update_time, json[QString("planLastUpdateTime")]);
    m_plan_last_update_time_isSet = !json[QString("planLastUpdateTime")].isNull() && m_plan_last_update_time_isValid;
}

QString OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_client_description_isSet) {
        obj.insert(QString("clientDescription"), ::OpenAPI::toJsonValue(m_client_description));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_goals.size() > 0) {
        obj.insert(QString("goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_plan_description_isSet) {
        obj.insert(QString("planDescription"), ::OpenAPI::toJsonValue(m_plan_description));
    }
    if (m_plan_last_update_time_isSet) {
        obj.insert(QString("planLastUpdateTime"), ::OpenAPI::toJsonValue(m_plan_last_update_time));
    }
    return obj;
}

QString OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::getClientDescription() const {
    return m_client_description;
}
void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::setClientDescription(const QString &client_description) {
    m_client_description = client_description;
    m_client_description_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_client_description_Set() const{
    return m_client_description_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_client_description_Valid() const{
    return m_client_description_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::getClientId() const {
    return m_client_id;
}
void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QList<OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBase> OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::getGoals() const {
    return m_goals;
}
void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::setGoals(const QList<OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBase> &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_goals_Valid() const{
    return m_goals_isValid;
}

QString OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::getPlanDescription() const {
    return m_plan_description;
}
void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::setPlanDescription(const QString &plan_description) {
    m_plan_description = plan_description;
    m_plan_description_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_plan_description_Set() const{
    return m_plan_description_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_plan_description_Valid() const{
    return m_plan_description_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::getPlanLastUpdateTime() const {
    return m_plan_last_update_time;
}
void OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::setPlanLastUpdateTime(const QDateTime &plan_last_update_time) {
    m_plan_last_update_time = plan_last_update_time;
    m_plan_last_update_time_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_plan_last_update_time_Set() const{
    return m_plan_last_update_time_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::is_plan_last_update_time_Valid() const{
    return m_plan_last_update_time_isValid;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
