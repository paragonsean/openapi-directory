/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments.h
 *
 * 
 */

#ifndef OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments_H
#define OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments : public OAIObject {
public:
    OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments();
    OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments(QString json);
    ~OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getClientRetirementAge() const;
    void setClientRetirementAge(const double &client_retirement_age);
    bool is_client_retirement_age_Set() const;
    bool is_client_retirement_age_Valid() const;

    double getCoClientRetirementAge() const;
    void setCoClientRetirementAge(const double &co_client_retirement_age);
    bool is_co_client_retirement_age_Set() const;
    bool is_co_client_retirement_age_Valid() const;

    double getDiscretionaryExpenseCoverage() const;
    void setDiscretionaryExpenseCoverage(const double &discretionary_expense_coverage);
    bool is_discretionary_expense_coverage_Set() const;
    bool is_discretionary_expense_coverage_Valid() const;

    double getFixedExpenseCoverage() const;
    void setFixedExpenseCoverage(const double &fixed_expense_coverage);
    bool is_fixed_expense_coverage_Set() const;
    bool is_fixed_expense_coverage_Valid() const;

    double getLumpSumContribution() const;
    void setLumpSumContribution(const double &lump_sum_contribution);
    bool is_lump_sum_contribution_Set() const;
    bool is_lump_sum_contribution_Valid() const;

    QDateTime getLumpSumDate() const;
    void setLumpSumDate(const QDateTime &lump_sum_date);
    bool is_lump_sum_date_Set() const;
    bool is_lump_sum_date_Valid() const;

    double getMonthlySavingsContribution() const;
    void setMonthlySavingsContribution(const double &monthly_savings_contribution);
    bool is_monthly_savings_contribution_Set() const;
    bool is_monthly_savings_contribution_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_client_retirement_age;
    bool m_client_retirement_age_isSet;
    bool m_client_retirement_age_isValid;

    double m_co_client_retirement_age;
    bool m_co_client_retirement_age_isSet;
    bool m_co_client_retirement_age_isValid;

    double m_discretionary_expense_coverage;
    bool m_discretionary_expense_coverage_isSet;
    bool m_discretionary_expense_coverage_isValid;

    double m_fixed_expense_coverage;
    bool m_fixed_expense_coverage_isSet;
    bool m_fixed_expense_coverage_isValid;

    double m_lump_sum_contribution;
    bool m_lump_sum_contribution_isSet;
    bool m_lump_sum_contribution_isValid;

    QDateTime m_lump_sum_date;
    bool m_lump_sum_date_isSet;
    bool m_lump_sum_date_isValid;

    double m_monthly_savings_contribution;
    bool m_monthly_savings_contribution_isSet;
    bool m_monthly_savings_contribution_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments)

#endif // OAIAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments_H
