/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDate::OAIDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDate::OAIDate() {
    this->initializeModel();
}

OAIDate::~OAIDate() {}

void OAIDate::initializeModel() {

    m_day_isSet = false;
    m_day_isValid = false;

    m_formatted_isSet = false;
    m_formatted_isValid = false;

    m_formatted_mmm_mddyyyy_isSet = false;
    m_formatted_mmm_mddyyyy_isValid = false;

    m_formatted_mm_mdd_isSet = false;
    m_formatted_mm_mdd_isValid = false;

    m_formatted_mm_mddyyyy_isSet = false;
    m_formatted_mm_mddyyyy_isValid = false;

    m_formatted_mm_myyyy_isSet = false;
    m_formatted_mm_myyyy_isValid = false;

    m_formatted_na_isSet = false;
    m_formatted_na_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_to_date_time_isSet = false;
    m_to_date_time_isValid = false;

    m_url_encoded_isSet = false;
    m_url_encoded_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDate::fromJsonObject(QJsonObject json) {

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;

    m_formatted_mmm_mddyyyy_isValid = ::OpenAPI::fromJsonValue(m_formatted_mmm_mddyyyy, json[QString("formattedMMMMddyyyy")]);
    m_formatted_mmm_mddyyyy_isSet = !json[QString("formattedMMMMddyyyy")].isNull() && m_formatted_mmm_mddyyyy_isValid;

    m_formatted_mm_mdd_isValid = ::OpenAPI::fromJsonValue(m_formatted_mm_mdd, json[QString("formattedMMMdd")]);
    m_formatted_mm_mdd_isSet = !json[QString("formattedMMMdd")].isNull() && m_formatted_mm_mdd_isValid;

    m_formatted_mm_mddyyyy_isValid = ::OpenAPI::fromJsonValue(m_formatted_mm_mddyyyy, json[QString("formattedMMMddyyyy")]);
    m_formatted_mm_mddyyyy_isSet = !json[QString("formattedMMMddyyyy")].isNull() && m_formatted_mm_mddyyyy_isValid;

    m_formatted_mm_myyyy_isValid = ::OpenAPI::fromJsonValue(m_formatted_mm_myyyy, json[QString("formattedMMMyyyy")]);
    m_formatted_mm_myyyy_isSet = !json[QString("formattedMMMyyyy")].isNull() && m_formatted_mm_myyyy_isValid;

    m_formatted_na_isValid = ::OpenAPI::fromJsonValue(m_formatted_na, json[QString("formattedNA")]);
    m_formatted_na_isSet = !json[QString("formattedNA")].isNull() && m_formatted_na_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_to_date_time_isValid = ::OpenAPI::fromJsonValue(m_to_date_time, json[QString("toDateTime")]);
    m_to_date_time_isSet = !json[QString("toDateTime")].isNull() && m_to_date_time_isValid;

    m_url_encoded_isValid = ::OpenAPI::fromJsonValue(m_url_encoded, json[QString("urlEncoded")]);
    m_url_encoded_isSet = !json[QString("urlEncoded")].isNull() && m_url_encoded_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDate::asJsonObject() const {
    QJsonObject obj;
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    if (m_formatted_mmm_mddyyyy_isSet) {
        obj.insert(QString("formattedMMMMddyyyy"), ::OpenAPI::toJsonValue(m_formatted_mmm_mddyyyy));
    }
    if (m_formatted_mm_mdd_isSet) {
        obj.insert(QString("formattedMMMdd"), ::OpenAPI::toJsonValue(m_formatted_mm_mdd));
    }
    if (m_formatted_mm_mddyyyy_isSet) {
        obj.insert(QString("formattedMMMddyyyy"), ::OpenAPI::toJsonValue(m_formatted_mm_mddyyyy));
    }
    if (m_formatted_mm_myyyy_isSet) {
        obj.insert(QString("formattedMMMyyyy"), ::OpenAPI::toJsonValue(m_formatted_mm_myyyy));
    }
    if (m_formatted_na_isSet) {
        obj.insert(QString("formattedNA"), ::OpenAPI::toJsonValue(m_formatted_na));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_to_date_time_isSet) {
        obj.insert(QString("toDateTime"), ::OpenAPI::toJsonValue(m_to_date_time));
    }
    if (m_url_encoded_isSet) {
        obj.insert(QString("urlEncoded"), ::OpenAPI::toJsonValue(m_url_encoded));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIDate::getDay() const {
    return m_day;
}
void OAIDate::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIDate::is_day_Set() const{
    return m_day_isSet;
}

bool OAIDate::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIDate::getFormatted() const {
    return m_formatted;
}
void OAIDate::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIDate::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIDate::is_formatted_Valid() const{
    return m_formatted_isValid;
}

QString OAIDate::getFormattedMmmMddyyyy() const {
    return m_formatted_mmm_mddyyyy;
}
void OAIDate::setFormattedMmmMddyyyy(const QString &formatted_mmm_mddyyyy) {
    m_formatted_mmm_mddyyyy = formatted_mmm_mddyyyy;
    m_formatted_mmm_mddyyyy_isSet = true;
}

bool OAIDate::is_formatted_mmm_mddyyyy_Set() const{
    return m_formatted_mmm_mddyyyy_isSet;
}

bool OAIDate::is_formatted_mmm_mddyyyy_Valid() const{
    return m_formatted_mmm_mddyyyy_isValid;
}

QString OAIDate::getFormattedMmMdd() const {
    return m_formatted_mm_mdd;
}
void OAIDate::setFormattedMmMdd(const QString &formatted_mm_mdd) {
    m_formatted_mm_mdd = formatted_mm_mdd;
    m_formatted_mm_mdd_isSet = true;
}

bool OAIDate::is_formatted_mm_mdd_Set() const{
    return m_formatted_mm_mdd_isSet;
}

bool OAIDate::is_formatted_mm_mdd_Valid() const{
    return m_formatted_mm_mdd_isValid;
}

QString OAIDate::getFormattedMmMddyyyy() const {
    return m_formatted_mm_mddyyyy;
}
void OAIDate::setFormattedMmMddyyyy(const QString &formatted_mm_mddyyyy) {
    m_formatted_mm_mddyyyy = formatted_mm_mddyyyy;
    m_formatted_mm_mddyyyy_isSet = true;
}

bool OAIDate::is_formatted_mm_mddyyyy_Set() const{
    return m_formatted_mm_mddyyyy_isSet;
}

bool OAIDate::is_formatted_mm_mddyyyy_Valid() const{
    return m_formatted_mm_mddyyyy_isValid;
}

QString OAIDate::getFormattedMmMyyyy() const {
    return m_formatted_mm_myyyy;
}
void OAIDate::setFormattedMmMyyyy(const QString &formatted_mm_myyyy) {
    m_formatted_mm_myyyy = formatted_mm_myyyy;
    m_formatted_mm_myyyy_isSet = true;
}

bool OAIDate::is_formatted_mm_myyyy_Set() const{
    return m_formatted_mm_myyyy_isSet;
}

bool OAIDate::is_formatted_mm_myyyy_Valid() const{
    return m_formatted_mm_myyyy_isValid;
}

QString OAIDate::getFormattedNa() const {
    return m_formatted_na;
}
void OAIDate::setFormattedNa(const QString &formatted_na) {
    m_formatted_na = formatted_na;
    m_formatted_na_isSet = true;
}

bool OAIDate::is_formatted_na_Set() const{
    return m_formatted_na_isSet;
}

bool OAIDate::is_formatted_na_Valid() const{
    return m_formatted_na_isValid;
}

qint32 OAIDate::getMonth() const {
    return m_month;
}
void OAIDate::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIDate::is_month_Set() const{
    return m_month_isSet;
}

bool OAIDate::is_month_Valid() const{
    return m_month_isValid;
}

QDateTime OAIDate::getToDateTime() const {
    return m_to_date_time;
}
void OAIDate::setToDateTime(const QDateTime &to_date_time) {
    m_to_date_time = to_date_time;
    m_to_date_time_isSet = true;
}

bool OAIDate::is_to_date_time_Set() const{
    return m_to_date_time_isSet;
}

bool OAIDate::is_to_date_time_Valid() const{
    return m_to_date_time_isValid;
}

QString OAIDate::getUrlEncoded() const {
    return m_url_encoded;
}
void OAIDate::setUrlEncoded(const QString &url_encoded) {
    m_url_encoded = url_encoded;
    m_url_encoded_isSet = true;
}

bool OAIDate::is_url_encoded_Set() const{
    return m_url_encoded_isSet;
}

bool OAIDate::is_url_encoded_Valid() const{
    return m_url_encoded_isValid;
}

qint32 OAIDate::getYear() const {
    return m_year;
}
void OAIDate::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIDate::is_year_Set() const{
    return m_year_isSet;
}

bool OAIDate::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_mmm_mddyyyy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_mm_mdd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_mm_mddyyyy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_mm_myyyy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_na_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
