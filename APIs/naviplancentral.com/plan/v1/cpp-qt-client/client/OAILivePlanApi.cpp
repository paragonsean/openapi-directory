/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePlanApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAILivePlanApi::OAILivePlanApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAILivePlanApi::~OAILivePlanApi() {
}

void OAILivePlanApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://demo.uat.naviplancentral.com/plan"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://demo.uat.naviplancentral.com/plan"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("livePlanGetAccountsByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetAccountsByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetGoalFundingListByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetGoalFundingListByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetGoalsByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetGoalsByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetLiabilitiesByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetLiabilitiesByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetLifestyleAssetsByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetLifestyleAssetsByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetProjectedNetWorthByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetProjectedNetWorthByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetRealEstateAssetsByClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetRealEstateAssetsByClientidPlanid", 0);
    _serverConfigs.insert("livePlanGetWhatAreMyOptionsByIdClientidPlanid", defaultConf);
    _serverIndices.insert("livePlanGetWhatAreMyOptionsByIdClientidPlanid", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAILivePlanApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAILivePlanApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAILivePlanApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAILivePlanApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAILivePlanApi::setUsername(const QString &username) {
    _username = username;
}

void OAILivePlanApi::setPassword(const QString &password) {
    _password = password;
}


void OAILivePlanApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAILivePlanApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAILivePlanApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAILivePlanApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILivePlanApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILivePlanApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAILivePlanApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAILivePlanApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAILivePlanApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAILivePlanApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAILivePlanApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAILivePlanApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAILivePlanApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAILivePlanApi::livePlanGetAccountsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetAccountsByClientidPlanid"][_serverIndices.value("livePlanGetAccountsByClientidPlanid")].URL()+"/api/LivePlan/NetWorth/Accounts");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetAccountsByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetAccountsByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetAccountsByClientidPlanidSignal(output);
        Q_EMIT livePlanGetAccountsByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetAccountsByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetAccountsByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetAccountsByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetAccountsByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetGoalFundingListByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetGoalFundingListByClientidPlanid"][_serverIndices.value("livePlanGetGoalFundingListByClientidPlanid")].URL()+"/api/LivePlan/Goals/Funding");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetGoalFundingListByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetGoalFundingListByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignal(output);
        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetGoalFundingListByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetGoalsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetGoalsByClientidPlanid"][_serverIndices.value("livePlanGetGoalsByClientidPlanid")].URL()+"/api/LivePlan/Goals");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetGoalsByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetGoalsByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetGoalsByClientidPlanidSignal(output);
        Q_EMIT livePlanGetGoalsByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetGoalsByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetGoalsByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetGoalsByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetGoalsByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetLiabilitiesByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetLiabilitiesByClientidPlanid"][_serverIndices.value("livePlanGetLiabilitiesByClientidPlanid")].URL()+"/api/LivePlan/NetWorth/Liabilities");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetLiabilitiesByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetLiabilitiesByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignal(output);
        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetLiabilitiesByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetLifestyleAssetsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetLifestyleAssetsByClientidPlanid"][_serverIndices.value("livePlanGetLifestyleAssetsByClientidPlanid")].URL()+"/api/LivePlan/NetWorth/LifestyleAssets");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetLifestyleAssetsByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetLifestyleAssetsByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignal(output);
        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetLifestyleAssetsByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid"][_serverIndices.value("livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid")].URL()+"/api/LivePlan/Projections/{id}/NeedsVsAbilities");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignal(output);
        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetProjectedNetWorthByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetProjectedNetWorthByClientidPlanid"][_serverIndices.value("livePlanGetProjectedNetWorthByClientidPlanid")].URL()+"/api/LivePlan/Projections/NetWorth");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetProjectedNetWorthByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetProjectedNetWorthByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignal(output);
        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetProjectedNetWorthByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetRealEstateAssetsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetRealEstateAssetsByClientidPlanid"][_serverIndices.value("livePlanGetRealEstateAssetsByClientidPlanid")].URL()+"/api/LivePlan/NetWorth/RealEstate");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetRealEstateAssetsByClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetRealEstateAssetsByClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignal(output);
        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetRealEstateAssetsByClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::livePlanGetWhatAreMyOptionsByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["livePlanGetWhatAreMyOptionsByIdClientidPlanid"][_serverIndices.value("livePlanGetWhatAreMyOptionsByIdClientidPlanid")].URL()+"/api/LivePlan/Goals/{id}/WhatAreMyOptions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (client_id.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientId")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planId")).append(querySuffix).append(QUrl::toPercentEncoding(plan_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILivePlanApi::livePlanGetWhatAreMyOptionsByIdClientidPlanidCallback);
    connect(this, &OAILivePlanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILivePlanApi::livePlanGetWhatAreMyOptionsByIdClientidPlanidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignal(output);
        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalE(output, error_type, error_str);
        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalError(output, error_type, error_str);
        Q_EMIT livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILivePlanApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
