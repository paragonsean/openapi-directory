/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIStockOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIStockOption::OAIIStockOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIStockOption::OAIIStockOption() {
    this->initializeModel();
}

OAIIStockOption::~OAIIStockOption() {}

void OAIIStockOption::initializeModel() {

    m_annual_dividend_per_unit_isSet = false;
    m_annual_dividend_per_unit_isValid = false;

    m_applicable_range_retirement_liquidated_assets_isSet = false;
    m_applicable_range_retirement_liquidated_assets_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_current_unit_price_isSet = false;
    m_current_unit_price_isValid = false;

    m_current_unit_price_date_isSet = false;
    m_current_unit_price_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_of_plan_year_exercisable_gross_value_isSet = false;
    m_end_of_plan_year_exercisable_gross_value_isValid = false;

    m_exercise_cost_isSet = false;
    m_exercise_cost_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_grant_date_isSet = false;
    m_grant_date_isValid = false;

    m_granted_options_isSet = false;
    m_granted_options_isValid = false;

    m_growth_rate_isSet = false;
    m_growth_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_options_exercisable_isSet = false;
    m_options_exercisable_isValid = false;

    m_options_exercised_isSet = false;
    m_options_exercised_isValid = false;

    m_options_vested_isSet = false;
    m_options_vested_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pre_tax_profit_isSet = false;
    m_pre_tax_profit_isValid = false;

    m_start_of_year_amt_basis_isSet = false;
    m_start_of_year_amt_basis_isValid = false;

    m_start_of_year_cost_basis_isSet = false;
    m_start_of_year_cost_basis_isValid = false;

    m_start_of_year_unit_price_isSet = false;
    m_start_of_year_unit_price_isValid = false;

    m_strike_price_isSet = false;
    m_strike_price_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_formatted_isSet = false;
    m_type_formatted_isValid = false;

    m_vesting_schedule_isSet = false;
    m_vesting_schedule_isValid = false;
}

void OAIIStockOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIStockOption::fromJsonObject(QJsonObject json) {

    m_annual_dividend_per_unit_isValid = ::OpenAPI::fromJsonValue(m_annual_dividend_per_unit, json[QString("annualDividendPerUnit")]);
    m_annual_dividend_per_unit_isSet = !json[QString("annualDividendPerUnit")].isNull() && m_annual_dividend_per_unit_isValid;

    m_applicable_range_retirement_liquidated_assets_isValid = ::OpenAPI::fromJsonValue(m_applicable_range_retirement_liquidated_assets, json[QString("applicableRangeRetirementLiquidatedAssets")]);
    m_applicable_range_retirement_liquidated_assets_isSet = !json[QString("applicableRangeRetirementLiquidatedAssets")].isNull() && m_applicable_range_retirement_liquidated_assets_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_current_unit_price_isValid = ::OpenAPI::fromJsonValue(m_current_unit_price, json[QString("currentUnitPrice")]);
    m_current_unit_price_isSet = !json[QString("currentUnitPrice")].isNull() && m_current_unit_price_isValid;

    m_current_unit_price_date_isValid = ::OpenAPI::fromJsonValue(m_current_unit_price_date, json[QString("currentUnitPriceDate")]);
    m_current_unit_price_date_isSet = !json[QString("currentUnitPriceDate")].isNull() && m_current_unit_price_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_of_plan_year_exercisable_gross_value_isValid = ::OpenAPI::fromJsonValue(m_end_of_plan_year_exercisable_gross_value, json[QString("endOfPlanYearExercisableGrossValue")]);
    m_end_of_plan_year_exercisable_gross_value_isSet = !json[QString("endOfPlanYearExercisableGrossValue")].isNull() && m_end_of_plan_year_exercisable_gross_value_isValid;

    m_exercise_cost_isValid = ::OpenAPI::fromJsonValue(m_exercise_cost, json[QString("exerciseCost")]);
    m_exercise_cost_isSet = !json[QString("exerciseCost")].isNull() && m_exercise_cost_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_grant_date_isValid = ::OpenAPI::fromJsonValue(m_grant_date, json[QString("grantDate")]);
    m_grant_date_isSet = !json[QString("grantDate")].isNull() && m_grant_date_isValid;

    m_granted_options_isValid = ::OpenAPI::fromJsonValue(m_granted_options, json[QString("grantedOptions")]);
    m_granted_options_isSet = !json[QString("grantedOptions")].isNull() && m_granted_options_isValid;

    m_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_growth_rate, json[QString("growthRate")]);
    m_growth_rate_isSet = !json[QString("growthRate")].isNull() && m_growth_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_options_exercisable_isValid = ::OpenAPI::fromJsonValue(m_options_exercisable, json[QString("optionsExercisable")]);
    m_options_exercisable_isSet = !json[QString("optionsExercisable")].isNull() && m_options_exercisable_isValid;

    m_options_exercised_isValid = ::OpenAPI::fromJsonValue(m_options_exercised, json[QString("optionsExercised")]);
    m_options_exercised_isSet = !json[QString("optionsExercised")].isNull() && m_options_exercised_isValid;

    m_options_vested_isValid = ::OpenAPI::fromJsonValue(m_options_vested, json[QString("optionsVested")]);
    m_options_vested_isSet = !json[QString("optionsVested")].isNull() && m_options_vested_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pre_tax_profit_isValid = ::OpenAPI::fromJsonValue(m_pre_tax_profit, json[QString("preTaxProfit")]);
    m_pre_tax_profit_isSet = !json[QString("preTaxProfit")].isNull() && m_pre_tax_profit_isValid;

    m_start_of_year_amt_basis_isValid = ::OpenAPI::fromJsonValue(m_start_of_year_amt_basis, json[QString("startOfYearAMTBasis")]);
    m_start_of_year_amt_basis_isSet = !json[QString("startOfYearAMTBasis")].isNull() && m_start_of_year_amt_basis_isValid;

    m_start_of_year_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_start_of_year_cost_basis, json[QString("startOfYearCostBasis")]);
    m_start_of_year_cost_basis_isSet = !json[QString("startOfYearCostBasis")].isNull() && m_start_of_year_cost_basis_isValid;

    m_start_of_year_unit_price_isValid = ::OpenAPI::fromJsonValue(m_start_of_year_unit_price, json[QString("startOfYearUnitPrice")]);
    m_start_of_year_unit_price_isSet = !json[QString("startOfYearUnitPrice")].isNull() && m_start_of_year_unit_price_isValid;

    m_strike_price_isValid = ::OpenAPI::fromJsonValue(m_strike_price, json[QString("strikePrice")]);
    m_strike_price_isSet = !json[QString("strikePrice")].isNull() && m_strike_price_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_formatted_isValid = ::OpenAPI::fromJsonValue(m_type_formatted, json[QString("typeFormatted")]);
    m_type_formatted_isSet = !json[QString("typeFormatted")].isNull() && m_type_formatted_isValid;

    m_vesting_schedule_isValid = ::OpenAPI::fromJsonValue(m_vesting_schedule, json[QString("vestingSchedule")]);
    m_vesting_schedule_isSet = !json[QString("vestingSchedule")].isNull() && m_vesting_schedule_isValid;
}

QString OAIIStockOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIStockOption::asJsonObject() const {
    QJsonObject obj;
    if (m_annual_dividend_per_unit.isSet()) {
        obj.insert(QString("annualDividendPerUnit"), ::OpenAPI::toJsonValue(m_annual_dividend_per_unit));
    }
    if (m_applicable_range_retirement_liquidated_assets.isSet()) {
        obj.insert(QString("applicableRangeRetirementLiquidatedAssets"), ::OpenAPI::toJsonValue(m_applicable_range_retirement_liquidated_assets));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_current_unit_price.isSet()) {
        obj.insert(QString("currentUnitPrice"), ::OpenAPI::toJsonValue(m_current_unit_price));
    }
    if (m_current_unit_price_date.isSet()) {
        obj.insert(QString("currentUnitPriceDate"), ::OpenAPI::toJsonValue(m_current_unit_price_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_of_plan_year_exercisable_gross_value.isSet()) {
        obj.insert(QString("endOfPlanYearExercisableGrossValue"), ::OpenAPI::toJsonValue(m_end_of_plan_year_exercisable_gross_value));
    }
    if (m_exercise_cost.isSet()) {
        obj.insert(QString("exerciseCost"), ::OpenAPI::toJsonValue(m_exercise_cost));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_grant_date.isSet()) {
        obj.insert(QString("grantDate"), ::OpenAPI::toJsonValue(m_grant_date));
    }
    if (m_granted_options_isSet) {
        obj.insert(QString("grantedOptions"), ::OpenAPI::toJsonValue(m_granted_options));
    }
    if (m_growth_rate.isSet()) {
        obj.insert(QString("growthRate"), ::OpenAPI::toJsonValue(m_growth_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_options_exercisable_isSet) {
        obj.insert(QString("optionsExercisable"), ::OpenAPI::toJsonValue(m_options_exercisable));
    }
    if (m_options_exercised_isSet) {
        obj.insert(QString("optionsExercised"), ::OpenAPI::toJsonValue(m_options_exercised));
    }
    if (m_options_vested_isSet) {
        obj.insert(QString("optionsVested"), ::OpenAPI::toJsonValue(m_options_vested));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pre_tax_profit.isSet()) {
        obj.insert(QString("preTaxProfit"), ::OpenAPI::toJsonValue(m_pre_tax_profit));
    }
    if (m_start_of_year_amt_basis.isSet()) {
        obj.insert(QString("startOfYearAMTBasis"), ::OpenAPI::toJsonValue(m_start_of_year_amt_basis));
    }
    if (m_start_of_year_cost_basis.isSet()) {
        obj.insert(QString("startOfYearCostBasis"), ::OpenAPI::toJsonValue(m_start_of_year_cost_basis));
    }
    if (m_start_of_year_unit_price.isSet()) {
        obj.insert(QString("startOfYearUnitPrice"), ::OpenAPI::toJsonValue(m_start_of_year_unit_price));
    }
    if (m_strike_price.isSet()) {
        obj.insert(QString("strikePrice"), ::OpenAPI::toJsonValue(m_strike_price));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_formatted_isSet) {
        obj.insert(QString("typeFormatted"), ::OpenAPI::toJsonValue(m_type_formatted));
    }
    if (m_vesting_schedule.size() > 0) {
        obj.insert(QString("vestingSchedule"), ::OpenAPI::toJsonValue(m_vesting_schedule));
    }
    return obj;
}

OAICurrency OAIIStockOption::getAnnualDividendPerUnit() const {
    return m_annual_dividend_per_unit;
}
void OAIIStockOption::setAnnualDividendPerUnit(const OAICurrency &annual_dividend_per_unit) {
    m_annual_dividend_per_unit = annual_dividend_per_unit;
    m_annual_dividend_per_unit_isSet = true;
}

bool OAIIStockOption::is_annual_dividend_per_unit_Set() const{
    return m_annual_dividend_per_unit_isSet;
}

bool OAIIStockOption::is_annual_dividend_per_unit_Valid() const{
    return m_annual_dividend_per_unit_isValid;
}

OAIFormattedDateRange OAIIStockOption::getApplicableRangeRetirementLiquidatedAssets() const {
    return m_applicable_range_retirement_liquidated_assets;
}
void OAIIStockOption::setApplicableRangeRetirementLiquidatedAssets(const OAIFormattedDateRange &applicable_range_retirement_liquidated_assets) {
    m_applicable_range_retirement_liquidated_assets = applicable_range_retirement_liquidated_assets;
    m_applicable_range_retirement_liquidated_assets_isSet = true;
}

bool OAIIStockOption::is_applicable_range_retirement_liquidated_assets_Set() const{
    return m_applicable_range_retirement_liquidated_assets_isSet;
}

bool OAIIStockOption::is_applicable_range_retirement_liquidated_assets_Valid() const{
    return m_applicable_range_retirement_liquidated_assets_isValid;
}

QString OAIIStockOption::getCompany() const {
    return m_company;
}
void OAIIStockOption::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIIStockOption::is_company_Set() const{
    return m_company_isSet;
}

bool OAIIStockOption::is_company_Valid() const{
    return m_company_isValid;
}

OAICurrency OAIIStockOption::getCurrentUnitPrice() const {
    return m_current_unit_price;
}
void OAIIStockOption::setCurrentUnitPrice(const OAICurrency &current_unit_price) {
    m_current_unit_price = current_unit_price;
    m_current_unit_price_isSet = true;
}

bool OAIIStockOption::is_current_unit_price_Set() const{
    return m_current_unit_price_isSet;
}

bool OAIIStockOption::is_current_unit_price_Valid() const{
    return m_current_unit_price_isValid;
}

OAIDate OAIIStockOption::getCurrentUnitPriceDate() const {
    return m_current_unit_price_date;
}
void OAIIStockOption::setCurrentUnitPriceDate(const OAIDate &current_unit_price_date) {
    m_current_unit_price_date = current_unit_price_date;
    m_current_unit_price_date_isSet = true;
}

bool OAIIStockOption::is_current_unit_price_date_Set() const{
    return m_current_unit_price_date_isSet;
}

bool OAIIStockOption::is_current_unit_price_date_Valid() const{
    return m_current_unit_price_date_isValid;
}

QString OAIIStockOption::getDescription() const {
    return m_description;
}
void OAIIStockOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIStockOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIStockOption::is_description_Valid() const{
    return m_description_isValid;
}

OAICurrency OAIIStockOption::getEndOfPlanYearExercisableGrossValue() const {
    return m_end_of_plan_year_exercisable_gross_value;
}
void OAIIStockOption::setEndOfPlanYearExercisableGrossValue(const OAICurrency &end_of_plan_year_exercisable_gross_value) {
    m_end_of_plan_year_exercisable_gross_value = end_of_plan_year_exercisable_gross_value;
    m_end_of_plan_year_exercisable_gross_value_isSet = true;
}

bool OAIIStockOption::is_end_of_plan_year_exercisable_gross_value_Set() const{
    return m_end_of_plan_year_exercisable_gross_value_isSet;
}

bool OAIIStockOption::is_end_of_plan_year_exercisable_gross_value_Valid() const{
    return m_end_of_plan_year_exercisable_gross_value_isValid;
}

OAICurrency OAIIStockOption::getExerciseCost() const {
    return m_exercise_cost;
}
void OAIIStockOption::setExerciseCost(const OAICurrency &exercise_cost) {
    m_exercise_cost = exercise_cost;
    m_exercise_cost_isSet = true;
}

bool OAIIStockOption::is_exercise_cost_Set() const{
    return m_exercise_cost_isSet;
}

bool OAIIStockOption::is_exercise_cost_Valid() const{
    return m_exercise_cost_isValid;
}

OAIDate OAIIStockOption::getExpirationDate() const {
    return m_expiration_date;
}
void OAIIStockOption::setExpirationDate(const OAIDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIIStockOption::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIIStockOption::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDate OAIIStockOption::getGrantDate() const {
    return m_grant_date;
}
void OAIIStockOption::setGrantDate(const OAIDate &grant_date) {
    m_grant_date = grant_date;
    m_grant_date_isSet = true;
}

bool OAIIStockOption::is_grant_date_Set() const{
    return m_grant_date_isSet;
}

bool OAIIStockOption::is_grant_date_Valid() const{
    return m_grant_date_isValid;
}

qint32 OAIIStockOption::getGrantedOptions() const {
    return m_granted_options;
}
void OAIIStockOption::setGrantedOptions(const qint32 &granted_options) {
    m_granted_options = granted_options;
    m_granted_options_isSet = true;
}

bool OAIIStockOption::is_granted_options_Set() const{
    return m_granted_options_isSet;
}

bool OAIIStockOption::is_granted_options_Valid() const{
    return m_granted_options_isValid;
}

OAIPercent OAIIStockOption::getGrowthRate() const {
    return m_growth_rate;
}
void OAIIStockOption::setGrowthRate(const OAIPercent &growth_rate) {
    m_growth_rate = growth_rate;
    m_growth_rate_isSet = true;
}

bool OAIIStockOption::is_growth_rate_Set() const{
    return m_growth_rate_isSet;
}

bool OAIIStockOption::is_growth_rate_Valid() const{
    return m_growth_rate_isValid;
}

QString OAIIStockOption::getId() const {
    return m_id;
}
void OAIIStockOption::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIStockOption::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIStockOption::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIIStockOption::getOptionsExercisable() const {
    return m_options_exercisable;
}
void OAIIStockOption::setOptionsExercisable(const qint32 &options_exercisable) {
    m_options_exercisable = options_exercisable;
    m_options_exercisable_isSet = true;
}

bool OAIIStockOption::is_options_exercisable_Set() const{
    return m_options_exercisable_isSet;
}

bool OAIIStockOption::is_options_exercisable_Valid() const{
    return m_options_exercisable_isValid;
}

qint32 OAIIStockOption::getOptionsExercised() const {
    return m_options_exercised;
}
void OAIIStockOption::setOptionsExercised(const qint32 &options_exercised) {
    m_options_exercised = options_exercised;
    m_options_exercised_isSet = true;
}

bool OAIIStockOption::is_options_exercised_Set() const{
    return m_options_exercised_isSet;
}

bool OAIIStockOption::is_options_exercised_Valid() const{
    return m_options_exercised_isValid;
}

qint32 OAIIStockOption::getOptionsVested() const {
    return m_options_vested;
}
void OAIIStockOption::setOptionsVested(const qint32 &options_vested) {
    m_options_vested = options_vested;
    m_options_vested_isSet = true;
}

bool OAIIStockOption::is_options_vested_Set() const{
    return m_options_vested_isSet;
}

bool OAIIStockOption::is_options_vested_Valid() const{
    return m_options_vested_isValid;
}

QString OAIIStockOption::getOwner() const {
    return m_owner;
}
void OAIIStockOption::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIStockOption::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIStockOption::is_owner_Valid() const{
    return m_owner_isValid;
}

OAICurrency OAIIStockOption::getPreTaxProfit() const {
    return m_pre_tax_profit;
}
void OAIIStockOption::setPreTaxProfit(const OAICurrency &pre_tax_profit) {
    m_pre_tax_profit = pre_tax_profit;
    m_pre_tax_profit_isSet = true;
}

bool OAIIStockOption::is_pre_tax_profit_Set() const{
    return m_pre_tax_profit_isSet;
}

bool OAIIStockOption::is_pre_tax_profit_Valid() const{
    return m_pre_tax_profit_isValid;
}

OAICurrency OAIIStockOption::getStartOfYearAmtBasis() const {
    return m_start_of_year_amt_basis;
}
void OAIIStockOption::setStartOfYearAmtBasis(const OAICurrency &start_of_year_amt_basis) {
    m_start_of_year_amt_basis = start_of_year_amt_basis;
    m_start_of_year_amt_basis_isSet = true;
}

bool OAIIStockOption::is_start_of_year_amt_basis_Set() const{
    return m_start_of_year_amt_basis_isSet;
}

bool OAIIStockOption::is_start_of_year_amt_basis_Valid() const{
    return m_start_of_year_amt_basis_isValid;
}

OAICurrency OAIIStockOption::getStartOfYearCostBasis() const {
    return m_start_of_year_cost_basis;
}
void OAIIStockOption::setStartOfYearCostBasis(const OAICurrency &start_of_year_cost_basis) {
    m_start_of_year_cost_basis = start_of_year_cost_basis;
    m_start_of_year_cost_basis_isSet = true;
}

bool OAIIStockOption::is_start_of_year_cost_basis_Set() const{
    return m_start_of_year_cost_basis_isSet;
}

bool OAIIStockOption::is_start_of_year_cost_basis_Valid() const{
    return m_start_of_year_cost_basis_isValid;
}

OAICurrency OAIIStockOption::getStartOfYearUnitPrice() const {
    return m_start_of_year_unit_price;
}
void OAIIStockOption::setStartOfYearUnitPrice(const OAICurrency &start_of_year_unit_price) {
    m_start_of_year_unit_price = start_of_year_unit_price;
    m_start_of_year_unit_price_isSet = true;
}

bool OAIIStockOption::is_start_of_year_unit_price_Set() const{
    return m_start_of_year_unit_price_isSet;
}

bool OAIIStockOption::is_start_of_year_unit_price_Valid() const{
    return m_start_of_year_unit_price_isValid;
}

OAICurrency OAIIStockOption::getStrikePrice() const {
    return m_strike_price;
}
void OAIIStockOption::setStrikePrice(const OAICurrency &strike_price) {
    m_strike_price = strike_price;
    m_strike_price_isSet = true;
}

bool OAIIStockOption::is_strike_price_Set() const{
    return m_strike_price_isSet;
}

bool OAIIStockOption::is_strike_price_Valid() const{
    return m_strike_price_isValid;
}

QString OAIIStockOption::getSymbol() const {
    return m_symbol;
}
void OAIIStockOption::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIIStockOption::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIIStockOption::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIIStockOption::getType() const {
    return m_type;
}
void OAIIStockOption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIStockOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIStockOption::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIIStockOption::getTypeFormatted() const {
    return m_type_formatted;
}
void OAIIStockOption::setTypeFormatted(const QString &type_formatted) {
    m_type_formatted = type_formatted;
    m_type_formatted_isSet = true;
}

bool OAIIStockOption::is_type_formatted_Set() const{
    return m_type_formatted_isSet;
}

bool OAIIStockOption::is_type_formatted_Valid() const{
    return m_type_formatted_isValid;
}

QList<OAIIVestingData> OAIIStockOption::getVestingSchedule() const {
    return m_vesting_schedule;
}
void OAIIStockOption::setVestingSchedule(const QList<OAIIVestingData> &vesting_schedule) {
    m_vesting_schedule = vesting_schedule;
    m_vesting_schedule_isSet = true;
}

bool OAIIStockOption::is_vesting_schedule_Set() const{
    return m_vesting_schedule_isSet;
}

bool OAIIStockOption::is_vesting_schedule_Valid() const{
    return m_vesting_schedule_isValid;
}

bool OAIIStockOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annual_dividend_per_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_range_retirement_liquidated_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_unit_price_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_plan_year_exercisable_gross_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exercise_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granted_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_exercisable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_exercised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_vested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_tax_profit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_year_amt_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_year_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_year_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strike_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vesting_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIStockOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
