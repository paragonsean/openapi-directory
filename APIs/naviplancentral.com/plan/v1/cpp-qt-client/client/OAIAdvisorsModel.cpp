/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvisorsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvisorsModel::OAIAdvisorsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvisorsModel::OAIAdvisorsModel() {
    this->initializeModel();
}

OAIAdvisorsModel::~OAIAdvisorsModel() {}

void OAIAdvisorsModel::initializeModel() {

    m_advisors_isSet = false;
    m_advisors_isValid = false;
}

void OAIAdvisorsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvisorsModel::fromJsonObject(QJsonObject json) {

    m_advisors_isValid = ::OpenAPI::fromJsonValue(m_advisors, json[QString("advisors")]);
    m_advisors_isSet = !json[QString("advisors")].isNull() && m_advisors_isValid;
}

QString OAIAdvisorsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvisorsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_advisors.size() > 0) {
        obj.insert(QString("advisors"), ::OpenAPI::toJsonValue(m_advisors));
    }
    return obj;
}

QList<OAIAdvisorModel> OAIAdvisorsModel::getAdvisors() const {
    return m_advisors;
}
void OAIAdvisorsModel::setAdvisors(const QList<OAIAdvisorModel> &advisors) {
    m_advisors = advisors;
    m_advisors_isSet = true;
}

bool OAIAdvisorsModel::is_advisors_Set() const{
    return m_advisors_isSet;
}

bool OAIAdvisorsModel::is_advisors_Valid() const{
    return m_advisors_isValid;
}

bool OAIAdvisorsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advisors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvisorsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
