/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIContributions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIContributions::OAIIContributions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIContributions::OAIIContributions() {
    this->initializeModel();
}

OAIIContributions::~OAIIContributions() {}

void OAIIContributions::initializeModel() {

    m_inter_company_dividends_received_isSet = false;
    m_inter_company_dividends_received_isValid = false;

    m_share_purchases_isSet = false;
    m_share_purchases_isValid = false;

    m_shareholder_loans_isSet = false;
    m_shareholder_loans_isValid = false;
}

void OAIIContributions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIContributions::fromJsonObject(QJsonObject json) {

    m_inter_company_dividends_received_isValid = ::OpenAPI::fromJsonValue(m_inter_company_dividends_received, json[QString("interCompanyDividendsReceived")]);
    m_inter_company_dividends_received_isSet = !json[QString("interCompanyDividendsReceived")].isNull() && m_inter_company_dividends_received_isValid;

    m_share_purchases_isValid = ::OpenAPI::fromJsonValue(m_share_purchases, json[QString("sharePurchases")]);
    m_share_purchases_isSet = !json[QString("sharePurchases")].isNull() && m_share_purchases_isValid;

    m_shareholder_loans_isValid = ::OpenAPI::fromJsonValue(m_shareholder_loans, json[QString("shareholderLoans")]);
    m_shareholder_loans_isSet = !json[QString("shareholderLoans")].isNull() && m_shareholder_loans_isValid;
}

QString OAIIContributions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIContributions::asJsonObject() const {
    QJsonObject obj;
    if (m_inter_company_dividends_received.size() > 0) {
        obj.insert(QString("interCompanyDividendsReceived"), ::OpenAPI::toJsonValue(m_inter_company_dividends_received));
    }
    if (m_share_purchases.size() > 0) {
        obj.insert(QString("sharePurchases"), ::OpenAPI::toJsonValue(m_share_purchases));
    }
    if (m_shareholder_loans.size() > 0) {
        obj.insert(QString("shareholderLoans"), ::OpenAPI::toJsonValue(m_shareholder_loans));
    }
    return obj;
}

QList<OAIIInterCompanyDividendReceived> OAIIContributions::getInterCompanyDividendsReceived() const {
    return m_inter_company_dividends_received;
}
void OAIIContributions::setInterCompanyDividendsReceived(const QList<OAIIInterCompanyDividendReceived> &inter_company_dividends_received) {
    m_inter_company_dividends_received = inter_company_dividends_received;
    m_inter_company_dividends_received_isSet = true;
}

bool OAIIContributions::is_inter_company_dividends_received_Set() const{
    return m_inter_company_dividends_received_isSet;
}

bool OAIIContributions::is_inter_company_dividends_received_Valid() const{
    return m_inter_company_dividends_received_isValid;
}

QList<OAIISharePurchase> OAIIContributions::getSharePurchases() const {
    return m_share_purchases;
}
void OAIIContributions::setSharePurchases(const QList<OAIISharePurchase> &share_purchases) {
    m_share_purchases = share_purchases;
    m_share_purchases_isSet = true;
}

bool OAIIContributions::is_share_purchases_Set() const{
    return m_share_purchases_isSet;
}

bool OAIIContributions::is_share_purchases_Valid() const{
    return m_share_purchases_isValid;
}

QList<OAIIShareholderLoan> OAIIContributions::getShareholderLoans() const {
    return m_shareholder_loans;
}
void OAIIContributions::setShareholderLoans(const QList<OAIIShareholderLoan> &shareholder_loans) {
    m_shareholder_loans = shareholder_loans;
    m_shareholder_loans_isSet = true;
}

bool OAIIContributions::is_shareholder_loans_Set() const{
    return m_shareholder_loans_isSet;
}

bool OAIIContributions::is_shareholder_loans_Valid() const{
    return m_shareholder_loans_isValid;
}

bool OAIIContributions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inter_company_dividends_received.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_purchases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_loans.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIContributions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
