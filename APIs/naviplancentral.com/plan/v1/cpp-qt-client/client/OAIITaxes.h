/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIITaxes.h
 *
 * 
 */

#ifndef OAIITaxes_H
#define OAIITaxes_H

#include <QJsonObject>

#include "OAICurrency.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrency;

class OAIITaxes : public OAIObject {
public:
    OAIITaxes();
    OAIITaxes(QString json);
    ~OAIITaxes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICurrency getEstate() const;
    void setEstate(const OAICurrency &estate);
    bool is_estate_Set() const;
    bool is_estate_Valid() const;

    OAICurrency getFederalIncome() const;
    void setFederalIncome(const OAICurrency &federal_income);
    bool is_federal_income_Set() const;
    bool is_federal_income_Valid() const;

    OAICurrency getGiftAndGenerationSkippingTransfer() const;
    void setGiftAndGenerationSkippingTransfer(const OAICurrency &gift_and_generation_skipping_transfer);
    bool is_gift_and_generation_skipping_transfer_Set() const;
    bool is_gift_and_generation_skipping_transfer_Valid() const;

    OAICurrency getMedicare() const;
    void setMedicare(const OAICurrency &medicare);
    bool is_medicare_Set() const;
    bool is_medicare_Valid() const;

    OAICurrency getPensionEarlyDistributionPenalty() const;
    void setPensionEarlyDistributionPenalty(const OAICurrency &pension_early_distribution_penalty);
    bool is_pension_early_distribution_penalty_Set() const;
    bool is_pension_early_distribution_penalty_Valid() const;

    OAICurrency getPensionPenaltyOnExcessDistributions() const;
    void setPensionPenaltyOnExcessDistributions(const OAICurrency &pension_penalty_on_excess_distributions);
    bool is_pension_penalty_on_excess_distributions_Set() const;
    bool is_pension_penalty_on_excess_distributions_Valid() const;

    OAICurrency getRefundableCredits() const;
    void setRefundableCredits(const OAICurrency &refundable_credits);
    bool is_refundable_credits_Set() const;
    bool is_refundable_credits_Valid() const;

    OAICurrency getSocialSecurityEmployer() const;
    void setSocialSecurityEmployer(const OAICurrency &social_security_employer);
    bool is_social_security_employer_Set() const;
    bool is_social_security_employer_Valid() const;

    OAICurrency getSocialSecuritySelfEmployed() const;
    void setSocialSecuritySelfEmployed(const OAICurrency &social_security_self_employed);
    bool is_social_security_self_employed_Set() const;
    bool is_social_security_self_employed_Valid() const;

    OAICurrency getStateIncome() const;
    void setStateIncome(const OAICurrency &state_income);
    bool is_state_income_Set() const;
    bool is_state_income_Valid() const;

    OAICurrency getTotal() const;
    void setTotal(const OAICurrency &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICurrency m_estate;
    bool m_estate_isSet;
    bool m_estate_isValid;

    OAICurrency m_federal_income;
    bool m_federal_income_isSet;
    bool m_federal_income_isValid;

    OAICurrency m_gift_and_generation_skipping_transfer;
    bool m_gift_and_generation_skipping_transfer_isSet;
    bool m_gift_and_generation_skipping_transfer_isValid;

    OAICurrency m_medicare;
    bool m_medicare_isSet;
    bool m_medicare_isValid;

    OAICurrency m_pension_early_distribution_penalty;
    bool m_pension_early_distribution_penalty_isSet;
    bool m_pension_early_distribution_penalty_isValid;

    OAICurrency m_pension_penalty_on_excess_distributions;
    bool m_pension_penalty_on_excess_distributions_isSet;
    bool m_pension_penalty_on_excess_distributions_isValid;

    OAICurrency m_refundable_credits;
    bool m_refundable_credits_isSet;
    bool m_refundable_credits_isValid;

    OAICurrency m_social_security_employer;
    bool m_social_security_employer_isSet;
    bool m_social_security_employer_isValid;

    OAICurrency m_social_security_self_employed;
    bool m_social_security_self_employed_isSet;
    bool m_social_security_self_employed_isValid;

    OAICurrency m_state_income;
    bool m_state_income_isSet;
    bool m_state_income_isValid;

    OAICurrency m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIITaxes)

#endif // OAIITaxes_H
