/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIBusinessEntityActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIBusinessEntityActivity::OAIIBusinessEntityActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIBusinessEntityActivity::OAIIBusinessEntityActivity() {
    this->initializeModel();
}

OAIIBusinessEntityActivity::~OAIIBusinessEntityActivity() {}

void OAIIBusinessEntityActivity::initializeModel() {

    m_applicable_date_range_isSet = false;
    m_applicable_date_range_isValid = false;

    m_distributions_isSet = false;
    m_distributions_isValid = false;

    m_expense_isSet = false;
    m_expense_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_income_isSet = false;
    m_income_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;
}

void OAIIBusinessEntityActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIBusinessEntityActivity::fromJsonObject(QJsonObject json) {

    m_applicable_date_range_isValid = ::OpenAPI::fromJsonValue(m_applicable_date_range, json[QString("applicableDateRange")]);
    m_applicable_date_range_isSet = !json[QString("applicableDateRange")].isNull() && m_applicable_date_range_isValid;

    m_distributions_isValid = ::OpenAPI::fromJsonValue(m_distributions, json[QString("distributions")]);
    m_distributions_isSet = !json[QString("distributions")].isNull() && m_distributions_isValid;

    m_expense_isValid = ::OpenAPI::fromJsonValue(m_expense, json[QString("expense")]);
    m_expense_isSet = !json[QString("expense")].isNull() && m_expense_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_income_isValid = ::OpenAPI::fromJsonValue(m_income, json[QString("income")]);
    m_income_isSet = !json[QString("income")].isNull() && m_income_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;
}

QString OAIIBusinessEntityActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIBusinessEntityActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_date_range.isSet()) {
        obj.insert(QString("applicableDateRange"), ::OpenAPI::toJsonValue(m_applicable_date_range));
    }
    if (m_distributions.isSet()) {
        obj.insert(QString("distributions"), ::OpenAPI::toJsonValue(m_distributions));
    }
    if (m_expense.isSet()) {
        obj.insert(QString("expense"), ::OpenAPI::toJsonValue(m_expense));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_income.isSet()) {
        obj.insert(QString("income"), ::OpenAPI::toJsonValue(m_income));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    return obj;
}

OAIFormattedDateRange OAIIBusinessEntityActivity::getApplicableDateRange() const {
    return m_applicable_date_range;
}
void OAIIBusinessEntityActivity::setApplicableDateRange(const OAIFormattedDateRange &applicable_date_range) {
    m_applicable_date_range = applicable_date_range;
    m_applicable_date_range_isSet = true;
}

bool OAIIBusinessEntityActivity::is_applicable_date_range_Set() const{
    return m_applicable_date_range_isSet;
}

bool OAIIBusinessEntityActivity::is_applicable_date_range_Valid() const{
    return m_applicable_date_range_isValid;
}

OAICurrency OAIIBusinessEntityActivity::getDistributions() const {
    return m_distributions;
}
void OAIIBusinessEntityActivity::setDistributions(const OAICurrency &distributions) {
    m_distributions = distributions;
    m_distributions_isSet = true;
}

bool OAIIBusinessEntityActivity::is_distributions_Set() const{
    return m_distributions_isSet;
}

bool OAIIBusinessEntityActivity::is_distributions_Valid() const{
    return m_distributions_isValid;
}

OAICurrency OAIIBusinessEntityActivity::getExpense() const {
    return m_expense;
}
void OAIIBusinessEntityActivity::setExpense(const OAICurrency &expense) {
    m_expense = expense;
    m_expense_isSet = true;
}

bool OAIIBusinessEntityActivity::is_expense_Set() const{
    return m_expense_isSet;
}

bool OAIIBusinessEntityActivity::is_expense_Valid() const{
    return m_expense_isValid;
}

OAIFormattedEnumType_Frequency OAIIBusinessEntityActivity::getFrequency() const {
    return m_frequency;
}
void OAIIBusinessEntityActivity::setFrequency(const OAIFormattedEnumType_Frequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIIBusinessEntityActivity::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIIBusinessEntityActivity::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAICurrency OAIIBusinessEntityActivity::getIncome() const {
    return m_income;
}
void OAIIBusinessEntityActivity::setIncome(const OAICurrency &income) {
    m_income = income;
    m_income_isSet = true;
}

bool OAIIBusinessEntityActivity::is_income_Set() const{
    return m_income_isSet;
}

bool OAIIBusinessEntityActivity::is_income_Valid() const{
    return m_income_isValid;
}

OAIGrowthRateValues OAIIBusinessEntityActivity::getIndexRate() const {
    return m_index_rate;
}
void OAIIBusinessEntityActivity::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIIBusinessEntityActivity::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIIBusinessEntityActivity::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

bool OAIIBusinessEntityActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIBusinessEntityActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
