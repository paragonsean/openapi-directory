/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPersonName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPersonName::OAIIPersonName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPersonName::OAIIPersonName() {
    this->initializeModel();
}

OAIIPersonName::~OAIIPersonName() {}

void OAIIPersonName::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_formal_isSet = false;
    m_formal_isValid = false;

    m_full_isSet = false;
    m_full_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_middle_isSet = false;
    m_middle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIIPersonName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPersonName::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_formal_isValid = ::OpenAPI::fromJsonValue(m_formal, json[QString("formal")]);
    m_formal_isSet = !json[QString("formal")].isNull() && m_formal_isValid;

    m_full_isValid = ::OpenAPI::fromJsonValue(m_full, json[QString("full")]);
    m_full_isSet = !json[QString("full")].isNull() && m_full_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_middle_isValid = ::OpenAPI::fromJsonValue(m_middle, json[QString("middle")]);
    m_middle_isSet = !json[QString("middle")].isNull() && m_middle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIIPersonName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPersonName::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_formal_isSet) {
        obj.insert(QString("formal"), ::OpenAPI::toJsonValue(m_formal));
    }
    if (m_full_isSet) {
        obj.insert(QString("full"), ::OpenAPI::toJsonValue(m_full));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_middle_isSet) {
        obj.insert(QString("middle"), ::OpenAPI::toJsonValue(m_middle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIIPersonName::getFirstName() const {
    return m_first_name;
}
void OAIIPersonName::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIIPersonName::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIIPersonName::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIIPersonName::getFormal() const {
    return m_formal;
}
void OAIIPersonName::setFormal(const QString &formal) {
    m_formal = formal;
    m_formal_isSet = true;
}

bool OAIIPersonName::is_formal_Set() const{
    return m_formal_isSet;
}

bool OAIIPersonName::is_formal_Valid() const{
    return m_formal_isValid;
}

QString OAIIPersonName::getFull() const {
    return m_full;
}
void OAIIPersonName::setFull(const QString &full) {
    m_full = full;
    m_full_isSet = true;
}

bool OAIIPersonName::is_full_Set() const{
    return m_full_isSet;
}

bool OAIIPersonName::is_full_Valid() const{
    return m_full_isValid;
}

QString OAIIPersonName::getLastName() const {
    return m_last_name;
}
void OAIIPersonName::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIIPersonName::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIIPersonName::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIIPersonName::getMiddle() const {
    return m_middle;
}
void OAIIPersonName::setMiddle(const QString &middle) {
    m_middle = middle;
    m_middle_isSet = true;
}

bool OAIIPersonName::is_middle_Set() const{
    return m_middle_isSet;
}

bool OAIIPersonName::is_middle_Valid() const{
    return m_middle_isValid;
}

QString OAIIPersonName::getTitle() const {
    return m_title;
}
void OAIIPersonName::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIPersonName::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIPersonName::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIIPersonName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPersonName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
