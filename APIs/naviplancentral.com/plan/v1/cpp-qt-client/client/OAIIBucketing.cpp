/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIBucketing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIBucketing::OAIIBucketing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIBucketing::OAIIBucketing() {
    this->initializeModel();
}

OAIIBucketing::~OAIIBucketing() {}

void OAIIBucketing::initializeModel() {

    m_distribution_bucket_target_balance_isSet = false;
    m_distribution_bucket_target_balance_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_indexed_at_isSet = false;
    m_indexed_at_isValid = false;

    m_return_rate_isSet = false;
    m_return_rate_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIBucketing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIBucketing::fromJsonObject(QJsonObject json) {

    m_distribution_bucket_target_balance_isValid = ::OpenAPI::fromJsonValue(m_distribution_bucket_target_balance, json[QString("distributionBucketTargetBalance")]);
    m_distribution_bucket_target_balance_isSet = !json[QString("distributionBucketTargetBalance")].isNull() && m_distribution_bucket_target_balance_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_indexed_at_isValid = ::OpenAPI::fromJsonValue(m_indexed_at, json[QString("indexedAt")]);
    m_indexed_at_isSet = !json[QString("indexedAt")].isNull() && m_indexed_at_isValid;

    m_return_rate_isValid = ::OpenAPI::fromJsonValue(m_return_rate, json[QString("returnRate")]);
    m_return_rate_isSet = !json[QString("returnRate")].isNull() && m_return_rate_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIBucketing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIBucketing::asJsonObject() const {
    QJsonObject obj;
    if (m_distribution_bucket_target_balance.isSet()) {
        obj.insert(QString("distributionBucketTargetBalance"), ::OpenAPI::toJsonValue(m_distribution_bucket_target_balance));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_indexed_at.isSet()) {
        obj.insert(QString("indexedAt"), ::OpenAPI::toJsonValue(m_indexed_at));
    }
    if (m_return_rate.isSet()) {
        obj.insert(QString("returnRate"), ::OpenAPI::toJsonValue(m_return_rate));
    }
    if (m_standard_deviation.isSet()) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAICurrency OAIIBucketing::getDistributionBucketTargetBalance() const {
    return m_distribution_bucket_target_balance;
}
void OAIIBucketing::setDistributionBucketTargetBalance(const OAICurrency &distribution_bucket_target_balance) {
    m_distribution_bucket_target_balance = distribution_bucket_target_balance;
    m_distribution_bucket_target_balance_isSet = true;
}

bool OAIIBucketing::is_distribution_bucket_target_balance_Set() const{
    return m_distribution_bucket_target_balance_isSet;
}

bool OAIIBucketing::is_distribution_bucket_target_balance_Valid() const{
    return m_distribution_bucket_target_balance_isValid;
}

OAIDate OAIIBucketing::getEndDate() const {
    return m_end_date;
}
void OAIIBucketing::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIIBucketing::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIIBucketing::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIPercent OAIIBucketing::getIndexedAt() const {
    return m_indexed_at;
}
void OAIIBucketing::setIndexedAt(const OAIPercent &indexed_at) {
    m_indexed_at = indexed_at;
    m_indexed_at_isSet = true;
}

bool OAIIBucketing::is_indexed_at_Set() const{
    return m_indexed_at_isSet;
}

bool OAIIBucketing::is_indexed_at_Valid() const{
    return m_indexed_at_isValid;
}

OAIPercent OAIIBucketing::getReturnRate() const {
    return m_return_rate;
}
void OAIIBucketing::setReturnRate(const OAIPercent &return_rate) {
    m_return_rate = return_rate;
    m_return_rate_isSet = true;
}

bool OAIIBucketing::is_return_rate_Set() const{
    return m_return_rate_isSet;
}

bool OAIIBucketing::is_return_rate_Valid() const{
    return m_return_rate_isValid;
}

OAIPercent OAIIBucketing::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIIBucketing::setStandardDeviation(const OAIPercent &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIIBucketing::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIIBucketing::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

OAIDate OAIIBucketing::getStartDate() const {
    return m_start_date;
}
void OAIIBucketing::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIBucketing::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIBucketing::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIBucketing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distribution_bucket_target_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIBucketing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
