/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIInsurancePremium.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIInsurancePremium::OAIIInsurancePremium(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIInsurancePremium::OAIIInsurancePremium() {
    this->initializeModel();
}

OAIIInsurancePremium::~OAIIInsurancePremium() {}

void OAIIInsurancePremium::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_annual_amount_isSet = false;
    m_annual_amount_isValid = false;

    m_cease_date_isSet = false;
    m_cease_date_isValid = false;

    m_formatted_paying_member_isSet = false;
    m_formatted_paying_member_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_paying_member_isSet = false;
    m_paying_member_isValid = false;

    m_premium_refund_amount_isSet = false;
    m_premium_refund_amount_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIInsurancePremium::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIInsurancePremium::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_annual_amount_isValid = ::OpenAPI::fromJsonValue(m_annual_amount, json[QString("annualAmount")]);
    m_annual_amount_isSet = !json[QString("annualAmount")].isNull() && m_annual_amount_isValid;

    m_cease_date_isValid = ::OpenAPI::fromJsonValue(m_cease_date, json[QString("ceaseDate")]);
    m_cease_date_isSet = !json[QString("ceaseDate")].isNull() && m_cease_date_isValid;

    m_formatted_paying_member_isValid = ::OpenAPI::fromJsonValue(m_formatted_paying_member, json[QString("formattedPayingMember")]);
    m_formatted_paying_member_isSet = !json[QString("formattedPayingMember")].isNull() && m_formatted_paying_member_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_paying_member_isValid = ::OpenAPI::fromJsonValue(m_paying_member, json[QString("payingMember")]);
    m_paying_member_isSet = !json[QString("payingMember")].isNull() && m_paying_member_isValid;

    m_premium_refund_amount_isValid = ::OpenAPI::fromJsonValue(m_premium_refund_amount, json[QString("premiumRefundAmount")]);
    m_premium_refund_amount_isSet = !json[QString("premiumRefundAmount")].isNull() && m_premium_refund_amount_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIInsurancePremium::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIInsurancePremium::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_annual_amount.isSet()) {
        obj.insert(QString("annualAmount"), ::OpenAPI::toJsonValue(m_annual_amount));
    }
    if (m_cease_date.isSet()) {
        obj.insert(QString("ceaseDate"), ::OpenAPI::toJsonValue(m_cease_date));
    }
    if (m_formatted_paying_member_isSet) {
        obj.insert(QString("formattedPayingMember"), ::OpenAPI::toJsonValue(m_formatted_paying_member));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_paying_member_isSet) {
        obj.insert(QString("payingMember"), ::OpenAPI::toJsonValue(m_paying_member));
    }
    if (m_premium_refund_amount.isSet()) {
        obj.insert(QString("premiumRefundAmount"), ::OpenAPI::toJsonValue(m_premium_refund_amount));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAICurrencyWithGrowth OAIIInsurancePremium::getAmount() const {
    return m_amount;
}
void OAIIInsurancePremium::setAmount(const OAICurrencyWithGrowth &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIIInsurancePremium::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIIInsurancePremium::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICurrency OAIIInsurancePremium::getAnnualAmount() const {
    return m_annual_amount;
}
void OAIIInsurancePremium::setAnnualAmount(const OAICurrency &annual_amount) {
    m_annual_amount = annual_amount;
    m_annual_amount_isSet = true;
}

bool OAIIInsurancePremium::is_annual_amount_Set() const{
    return m_annual_amount_isSet;
}

bool OAIIInsurancePremium::is_annual_amount_Valid() const{
    return m_annual_amount_isValid;
}

OAIDate OAIIInsurancePremium::getCeaseDate() const {
    return m_cease_date;
}
void OAIIInsurancePremium::setCeaseDate(const OAIDate &cease_date) {
    m_cease_date = cease_date;
    m_cease_date_isSet = true;
}

bool OAIIInsurancePremium::is_cease_date_Set() const{
    return m_cease_date_isSet;
}

bool OAIIInsurancePremium::is_cease_date_Valid() const{
    return m_cease_date_isValid;
}

QString OAIIInsurancePremium::getFormattedPayingMember() const {
    return m_formatted_paying_member;
}
void OAIIInsurancePremium::setFormattedPayingMember(const QString &formatted_paying_member) {
    m_formatted_paying_member = formatted_paying_member;
    m_formatted_paying_member_isSet = true;
}

bool OAIIInsurancePremium::is_formatted_paying_member_Set() const{
    return m_formatted_paying_member_isSet;
}

bool OAIIInsurancePremium::is_formatted_paying_member_Valid() const{
    return m_formatted_paying_member_isValid;
}

OAIIFormattedFrequency OAIIInsurancePremium::getFrequency() const {
    return m_frequency;
}
void OAIIInsurancePremium::setFrequency(const OAIIFormattedFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIIInsurancePremium::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIIInsurancePremium::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIIInsurancePremium::getPayingMember() const {
    return m_paying_member;
}
void OAIIInsurancePremium::setPayingMember(const QString &paying_member) {
    m_paying_member = paying_member;
    m_paying_member_isSet = true;
}

bool OAIIInsurancePremium::is_paying_member_Set() const{
    return m_paying_member_isSet;
}

bool OAIIInsurancePremium::is_paying_member_Valid() const{
    return m_paying_member_isValid;
}

OAIPercent OAIIInsurancePremium::getPremiumRefundAmount() const {
    return m_premium_refund_amount;
}
void OAIIInsurancePremium::setPremiumRefundAmount(const OAIPercent &premium_refund_amount) {
    m_premium_refund_amount = premium_refund_amount;
    m_premium_refund_amount_isSet = true;
}

bool OAIIInsurancePremium::is_premium_refund_amount_Set() const{
    return m_premium_refund_amount_isSet;
}

bool OAIIInsurancePremium::is_premium_refund_amount_Valid() const{
    return m_premium_refund_amount_isValid;
}

OAIDate OAIIInsurancePremium::getStartDate() const {
    return m_start_date;
}
void OAIIInsurancePremium::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIInsurancePremium::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIInsurancePremium::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIInsurancePremium::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cease_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_paying_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paying_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_refund_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIInsurancePremium::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
