/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILoanRepaymentToShareholder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILoanRepaymentToShareholder::OAIILoanRepaymentToShareholder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILoanRepaymentToShareholder::OAIILoanRepaymentToShareholder() {
    this->initializeModel();
}

OAIILoanRepaymentToShareholder::~OAIILoanRepaymentToShareholder() {}

void OAIILoanRepaymentToShareholder::initializeModel() {

    m_activity_data_isSet = false;
    m_activity_data_isValid = false;

    m_shareholder_isSet = false;
    m_shareholder_isValid = false;
}

void OAIILoanRepaymentToShareholder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILoanRepaymentToShareholder::fromJsonObject(QJsonObject json) {

    m_activity_data_isValid = ::OpenAPI::fromJsonValue(m_activity_data, json[QString("activityData")]);
    m_activity_data_isSet = !json[QString("activityData")].isNull() && m_activity_data_isValid;

    m_shareholder_isValid = ::OpenAPI::fromJsonValue(m_shareholder, json[QString("shareholder")]);
    m_shareholder_isSet = !json[QString("shareholder")].isNull() && m_shareholder_isValid;
}

QString OAIILoanRepaymentToShareholder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILoanRepaymentToShareholder::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_data.isSet()) {
        obj.insert(QString("activityData"), ::OpenAPI::toJsonValue(m_activity_data));
    }
    if (m_shareholder_isSet) {
        obj.insert(QString("shareholder"), ::OpenAPI::toJsonValue(m_shareholder));
    }
    return obj;
}

OAIIActivityData OAIILoanRepaymentToShareholder::getActivityData() const {
    return m_activity_data;
}
void OAIILoanRepaymentToShareholder::setActivityData(const OAIIActivityData &activity_data) {
    m_activity_data = activity_data;
    m_activity_data_isSet = true;
}

bool OAIILoanRepaymentToShareholder::is_activity_data_Set() const{
    return m_activity_data_isSet;
}

bool OAIILoanRepaymentToShareholder::is_activity_data_Valid() const{
    return m_activity_data_isValid;
}

QString OAIILoanRepaymentToShareholder::getShareholder() const {
    return m_shareholder;
}
void OAIILoanRepaymentToShareholder::setShareholder(const QString &shareholder) {
    m_shareholder = shareholder;
    m_shareholder_isSet = true;
}

bool OAIILoanRepaymentToShareholder::is_shareholder_Set() const{
    return m_shareholder_isSet;
}

bool OAIILoanRepaymentToShareholder::is_shareholder_Valid() const{
    return m_shareholder_isValid;
}

bool OAIILoanRepaymentToShareholder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILoanRepaymentToShareholder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
