/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPeriodicRedemptionStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPeriodicRedemptionStrategy::OAIIPeriodicRedemptionStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPeriodicRedemptionStrategy::OAIIPeriodicRedemptionStrategy() {
    this->initializeModel();
}

OAIIPeriodicRedemptionStrategy::~OAIIPeriodicRedemptionStrategy() {}

void OAIIPeriodicRedemptionStrategy::initializeModel() {

    m_amount_or_percent_of_value_isSet = false;
    m_amount_or_percent_of_value_isValid = false;

    m_applicable_date_range_isSet = false;
    m_applicable_date_range_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;

    m_redemption_frequency_isSet = false;
    m_redemption_frequency_isValid = false;
}

void OAIIPeriodicRedemptionStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPeriodicRedemptionStrategy::fromJsonObject(QJsonObject json) {

    m_amount_or_percent_of_value_isValid = ::OpenAPI::fromJsonValue(m_amount_or_percent_of_value, json[QString("amountOrPercentOfValue")]);
    m_amount_or_percent_of_value_isSet = !json[QString("amountOrPercentOfValue")].isNull() && m_amount_or_percent_of_value_isValid;

    m_applicable_date_range_isValid = ::OpenAPI::fromJsonValue(m_applicable_date_range, json[QString("applicableDateRange")]);
    m_applicable_date_range_isSet = !json[QString("applicableDateRange")].isNull() && m_applicable_date_range_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;

    m_redemption_frequency_isValid = ::OpenAPI::fromJsonValue(m_redemption_frequency, json[QString("redemptionFrequency")]);
    m_redemption_frequency_isSet = !json[QString("redemptionFrequency")].isNull() && m_redemption_frequency_isValid;
}

QString OAIIPeriodicRedemptionStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPeriodicRedemptionStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_or_percent_of_value.isSet()) {
        obj.insert(QString("amountOrPercentOfValue"), ::OpenAPI::toJsonValue(m_amount_or_percent_of_value));
    }
    if (m_applicable_date_range.isSet()) {
        obj.insert(QString("applicableDateRange"), ::OpenAPI::toJsonValue(m_applicable_date_range));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    if (m_redemption_frequency.isSet()) {
        obj.insert(QString("redemptionFrequency"), ::OpenAPI::toJsonValue(m_redemption_frequency));
    }
    return obj;
}

OAIPercentOr_Currency OAIIPeriodicRedemptionStrategy::getAmountOrPercentOfValue() const {
    return m_amount_or_percent_of_value;
}
void OAIIPeriodicRedemptionStrategy::setAmountOrPercentOfValue(const OAIPercentOr_Currency &amount_or_percent_of_value) {
    m_amount_or_percent_of_value = amount_or_percent_of_value;
    m_amount_or_percent_of_value_isSet = true;
}

bool OAIIPeriodicRedemptionStrategy::is_amount_or_percent_of_value_Set() const{
    return m_amount_or_percent_of_value_isSet;
}

bool OAIIPeriodicRedemptionStrategy::is_amount_or_percent_of_value_Valid() const{
    return m_amount_or_percent_of_value_isValid;
}

OAIFormattedDateRange OAIIPeriodicRedemptionStrategy::getApplicableDateRange() const {
    return m_applicable_date_range;
}
void OAIIPeriodicRedemptionStrategy::setApplicableDateRange(const OAIFormattedDateRange &applicable_date_range) {
    m_applicable_date_range = applicable_date_range;
    m_applicable_date_range_isSet = true;
}

bool OAIIPeriodicRedemptionStrategy::is_applicable_date_range_Set() const{
    return m_applicable_date_range_isSet;
}

bool OAIIPeriodicRedemptionStrategy::is_applicable_date_range_Valid() const{
    return m_applicable_date_range_isValid;
}

OAIGrowthRateValues OAIIPeriodicRedemptionStrategy::getIndexRate() const {
    return m_index_rate;
}
void OAIIPeriodicRedemptionStrategy::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIIPeriodicRedemptionStrategy::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIIPeriodicRedemptionStrategy::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

OAIFormattedEnumType_Frequency OAIIPeriodicRedemptionStrategy::getRedemptionFrequency() const {
    return m_redemption_frequency;
}
void OAIIPeriodicRedemptionStrategy::setRedemptionFrequency(const OAIFormattedEnumType_Frequency &redemption_frequency) {
    m_redemption_frequency = redemption_frequency;
    m_redemption_frequency_isSet = true;
}

bool OAIIPeriodicRedemptionStrategy::is_redemption_frequency_Set() const{
    return m_redemption_frequency_isSet;
}

bool OAIIPeriodicRedemptionStrategy::is_redemption_frequency_Valid() const{
    return m_redemption_frequency_isValid;
}

bool OAIIPeriodicRedemptionStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_or_percent_of_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPeriodicRedemptionStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
