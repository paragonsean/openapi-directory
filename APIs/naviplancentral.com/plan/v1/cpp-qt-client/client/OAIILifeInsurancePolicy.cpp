/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILifeInsurancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILifeInsurancePolicy::OAIILifeInsurancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILifeInsurancePolicy::OAIILifeInsurancePolicy() {
    this->initializeModel();
}

OAIILifeInsurancePolicy::~OAIILifeInsurancePolicy() {}

void OAIILifeInsurancePolicy::initializeModel() {

    m_beneficiary_name_isSet = false;
    m_beneficiary_name_isValid = false;

    m_benefit_period_isSet = false;
    m_benefit_period_isValid = false;

    m_cash_surrender_value_isSet = false;
    m_cash_surrender_value_isValid = false;

    m_coverage_cease_date_isSet = false;
    m_coverage_cease_date_isValid = false;

    m_daily_benefit_value_isSet = false;
    m_daily_benefit_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_formatted_benefit_value_isSet = false;
    m_formatted_benefit_value_isValid = false;

    m_formatted_insured_type_isSet = false;
    m_formatted_insured_type_isValid = false;

    m_formatted_policy_type_isSet = false;
    m_formatted_policy_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insured_isSet = false;
    m_insured_isValid = false;

    m_is_csv_payable_with_death_benefit_isSet = false;
    m_is_csv_payable_with_death_benefit_isValid = false;

    m_monthly_benefit_value_isSet = false;
    m_monthly_benefit_value_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_premium_data_isSet = false;
    m_premium_data_isValid = false;

    m_premiums_waived_at_disability_isSet = false;
    m_premiums_waived_at_disability_isValid = false;

    m_raw_benefit_value_isSet = false;
    m_raw_benefit_value_isValid = false;

    m_waiting_period_isSet = false;
    m_waiting_period_isValid = false;
}

void OAIILifeInsurancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILifeInsurancePolicy::fromJsonObject(QJsonObject json) {

    m_beneficiary_name_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_name, json[QString("beneficiaryName")]);
    m_beneficiary_name_isSet = !json[QString("beneficiaryName")].isNull() && m_beneficiary_name_isValid;

    m_benefit_period_isValid = ::OpenAPI::fromJsonValue(m_benefit_period, json[QString("benefitPeriod")]);
    m_benefit_period_isSet = !json[QString("benefitPeriod")].isNull() && m_benefit_period_isValid;

    m_cash_surrender_value_isValid = ::OpenAPI::fromJsonValue(m_cash_surrender_value, json[QString("cashSurrenderValue")]);
    m_cash_surrender_value_isSet = !json[QString("cashSurrenderValue")].isNull() && m_cash_surrender_value_isValid;

    m_coverage_cease_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_cease_date, json[QString("coverageCeaseDate")]);
    m_coverage_cease_date_isSet = !json[QString("coverageCeaseDate")].isNull() && m_coverage_cease_date_isValid;

    m_daily_benefit_value_isValid = ::OpenAPI::fromJsonValue(m_daily_benefit_value, json[QString("dailyBenefitValue")]);
    m_daily_benefit_value_isSet = !json[QString("dailyBenefitValue")].isNull() && m_daily_benefit_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_formatted_benefit_value_isValid = ::OpenAPI::fromJsonValue(m_formatted_benefit_value, json[QString("formattedBenefitValue")]);
    m_formatted_benefit_value_isSet = !json[QString("formattedBenefitValue")].isNull() && m_formatted_benefit_value_isValid;

    m_formatted_insured_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_insured_type, json[QString("formattedInsuredType")]);
    m_formatted_insured_type_isSet = !json[QString("formattedInsuredType")].isNull() && m_formatted_insured_type_isValid;

    m_formatted_policy_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_policy_type, json[QString("formattedPolicyType")]);
    m_formatted_policy_type_isSet = !json[QString("formattedPolicyType")].isNull() && m_formatted_policy_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insured_isValid = ::OpenAPI::fromJsonValue(m_insured, json[QString("insured")]);
    m_insured_isSet = !json[QString("insured")].isNull() && m_insured_isValid;

    m_is_csv_payable_with_death_benefit_isValid = ::OpenAPI::fromJsonValue(m_is_csv_payable_with_death_benefit, json[QString("isCSVPayableWithDeathBenefit")]);
    m_is_csv_payable_with_death_benefit_isSet = !json[QString("isCSVPayableWithDeathBenefit")].isNull() && m_is_csv_payable_with_death_benefit_isValid;

    m_monthly_benefit_value_isValid = ::OpenAPI::fromJsonValue(m_monthly_benefit_value, json[QString("monthlyBenefitValue")]);
    m_monthly_benefit_value_isSet = !json[QString("monthlyBenefitValue")].isNull() && m_monthly_benefit_value_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;

    m_premium_data_isValid = ::OpenAPI::fromJsonValue(m_premium_data, json[QString("premiumData")]);
    m_premium_data_isSet = !json[QString("premiumData")].isNull() && m_premium_data_isValid;

    m_premiums_waived_at_disability_isValid = ::OpenAPI::fromJsonValue(m_premiums_waived_at_disability, json[QString("premiumsWaivedAtDisability")]);
    m_premiums_waived_at_disability_isSet = !json[QString("premiumsWaivedAtDisability")].isNull() && m_premiums_waived_at_disability_isValid;

    m_raw_benefit_value_isValid = ::OpenAPI::fromJsonValue(m_raw_benefit_value, json[QString("rawBenefitValue")]);
    m_raw_benefit_value_isSet = !json[QString("rawBenefitValue")].isNull() && m_raw_benefit_value_isValid;

    m_waiting_period_isValid = ::OpenAPI::fromJsonValue(m_waiting_period, json[QString("waitingPeriod")]);
    m_waiting_period_isSet = !json[QString("waitingPeriod")].isNull() && m_waiting_period_isValid;
}

QString OAIILifeInsurancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILifeInsurancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_beneficiary_name_isSet) {
        obj.insert(QString("beneficiaryName"), ::OpenAPI::toJsonValue(m_beneficiary_name));
    }
    if (m_benefit_period.isSet()) {
        obj.insert(QString("benefitPeriod"), ::OpenAPI::toJsonValue(m_benefit_period));
    }
    if (m_cash_surrender_value.isSet()) {
        obj.insert(QString("cashSurrenderValue"), ::OpenAPI::toJsonValue(m_cash_surrender_value));
    }
    if (m_coverage_cease_date.isSet()) {
        obj.insert(QString("coverageCeaseDate"), ::OpenAPI::toJsonValue(m_coverage_cease_date));
    }
    if (m_daily_benefit_value_isSet) {
        obj.insert(QString("dailyBenefitValue"), ::OpenAPI::toJsonValue(m_daily_benefit_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_date.isSet()) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_formatted_benefit_value_isSet) {
        obj.insert(QString("formattedBenefitValue"), ::OpenAPI::toJsonValue(m_formatted_benefit_value));
    }
    if (m_formatted_insured_type_isSet) {
        obj.insert(QString("formattedInsuredType"), ::OpenAPI::toJsonValue(m_formatted_insured_type));
    }
    if (m_formatted_policy_type_isSet) {
        obj.insert(QString("formattedPolicyType"), ::OpenAPI::toJsonValue(m_formatted_policy_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insured_isSet) {
        obj.insert(QString("insured"), ::OpenAPI::toJsonValue(m_insured));
    }
    if (m_is_csv_payable_with_death_benefit.isSet()) {
        obj.insert(QString("isCSVPayableWithDeathBenefit"), ::OpenAPI::toJsonValue(m_is_csv_payable_with_death_benefit));
    }
    if (m_monthly_benefit_value_isSet) {
        obj.insert(QString("monthlyBenefitValue"), ::OpenAPI::toJsonValue(m_monthly_benefit_value));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_premium_data.isSet()) {
        obj.insert(QString("premiumData"), ::OpenAPI::toJsonValue(m_premium_data));
    }
    if (m_premiums_waived_at_disability.isSet()) {
        obj.insert(QString("premiumsWaivedAtDisability"), ::OpenAPI::toJsonValue(m_premiums_waived_at_disability));
    }
    if (m_raw_benefit_value_isSet) {
        obj.insert(QString("rawBenefitValue"), ::OpenAPI::toJsonValue(m_raw_benefit_value));
    }
    if (m_waiting_period.isSet()) {
        obj.insert(QString("waitingPeriod"), ::OpenAPI::toJsonValue(m_waiting_period));
    }
    return obj;
}

QString OAIILifeInsurancePolicy::getBeneficiaryName() const {
    return m_beneficiary_name;
}
void OAIILifeInsurancePolicy::setBeneficiaryName(const QString &beneficiary_name) {
    m_beneficiary_name = beneficiary_name;
    m_beneficiary_name_isSet = true;
}

bool OAIILifeInsurancePolicy::is_beneficiary_name_Set() const{
    return m_beneficiary_name_isSet;
}

bool OAIILifeInsurancePolicy::is_beneficiary_name_Valid() const{
    return m_beneficiary_name_isValid;
}

OAITimePeriod OAIILifeInsurancePolicy::getBenefitPeriod() const {
    return m_benefit_period;
}
void OAIILifeInsurancePolicy::setBenefitPeriod(const OAITimePeriod &benefit_period) {
    m_benefit_period = benefit_period;
    m_benefit_period_isSet = true;
}

bool OAIILifeInsurancePolicy::is_benefit_period_Set() const{
    return m_benefit_period_isSet;
}

bool OAIILifeInsurancePolicy::is_benefit_period_Valid() const{
    return m_benefit_period_isValid;
}

OAICurrency OAIILifeInsurancePolicy::getCashSurrenderValue() const {
    return m_cash_surrender_value;
}
void OAIILifeInsurancePolicy::setCashSurrenderValue(const OAICurrency &cash_surrender_value) {
    m_cash_surrender_value = cash_surrender_value;
    m_cash_surrender_value_isSet = true;
}

bool OAIILifeInsurancePolicy::is_cash_surrender_value_Set() const{
    return m_cash_surrender_value_isSet;
}

bool OAIILifeInsurancePolicy::is_cash_surrender_value_Valid() const{
    return m_cash_surrender_value_isValid;
}

OAIDate OAIILifeInsurancePolicy::getCoverageCeaseDate() const {
    return m_coverage_cease_date;
}
void OAIILifeInsurancePolicy::setCoverageCeaseDate(const OAIDate &coverage_cease_date) {
    m_coverage_cease_date = coverage_cease_date;
    m_coverage_cease_date_isSet = true;
}

bool OAIILifeInsurancePolicy::is_coverage_cease_date_Set() const{
    return m_coverage_cease_date_isSet;
}

bool OAIILifeInsurancePolicy::is_coverage_cease_date_Valid() const{
    return m_coverage_cease_date_isValid;
}

double OAIILifeInsurancePolicy::getDailyBenefitValue() const {
    return m_daily_benefit_value;
}
void OAIILifeInsurancePolicy::setDailyBenefitValue(const double &daily_benefit_value) {
    m_daily_benefit_value = daily_benefit_value;
    m_daily_benefit_value_isSet = true;
}

bool OAIILifeInsurancePolicy::is_daily_benefit_value_Set() const{
    return m_daily_benefit_value_isSet;
}

bool OAIILifeInsurancePolicy::is_daily_benefit_value_Valid() const{
    return m_daily_benefit_value_isValid;
}

QString OAIILifeInsurancePolicy::getDescription() const {
    return m_description;
}
void OAIILifeInsurancePolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIILifeInsurancePolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIILifeInsurancePolicy::is_description_Valid() const{
    return m_description_isValid;
}

OAIDate OAIILifeInsurancePolicy::getEffectiveDate() const {
    return m_effective_date;
}
void OAIILifeInsurancePolicy::setEffectiveDate(const OAIDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIILifeInsurancePolicy::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIILifeInsurancePolicy::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIILifeInsurancePolicy::getFormattedBenefitValue() const {
    return m_formatted_benefit_value;
}
void OAIILifeInsurancePolicy::setFormattedBenefitValue(const QString &formatted_benefit_value) {
    m_formatted_benefit_value = formatted_benefit_value;
    m_formatted_benefit_value_isSet = true;
}

bool OAIILifeInsurancePolicy::is_formatted_benefit_value_Set() const{
    return m_formatted_benefit_value_isSet;
}

bool OAIILifeInsurancePolicy::is_formatted_benefit_value_Valid() const{
    return m_formatted_benefit_value_isValid;
}

QString OAIILifeInsurancePolicy::getFormattedInsuredType() const {
    return m_formatted_insured_type;
}
void OAIILifeInsurancePolicy::setFormattedInsuredType(const QString &formatted_insured_type) {
    m_formatted_insured_type = formatted_insured_type;
    m_formatted_insured_type_isSet = true;
}

bool OAIILifeInsurancePolicy::is_formatted_insured_type_Set() const{
    return m_formatted_insured_type_isSet;
}

bool OAIILifeInsurancePolicy::is_formatted_insured_type_Valid() const{
    return m_formatted_insured_type_isValid;
}

QString OAIILifeInsurancePolicy::getFormattedPolicyType() const {
    return m_formatted_policy_type;
}
void OAIILifeInsurancePolicy::setFormattedPolicyType(const QString &formatted_policy_type) {
    m_formatted_policy_type = formatted_policy_type;
    m_formatted_policy_type_isSet = true;
}

bool OAIILifeInsurancePolicy::is_formatted_policy_type_Set() const{
    return m_formatted_policy_type_isSet;
}

bool OAIILifeInsurancePolicy::is_formatted_policy_type_Valid() const{
    return m_formatted_policy_type_isValid;
}

QString OAIILifeInsurancePolicy::getId() const {
    return m_id;
}
void OAIILifeInsurancePolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIILifeInsurancePolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIILifeInsurancePolicy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIILifeInsurancePolicy::getInsured() const {
    return m_insured;
}
void OAIILifeInsurancePolicy::setInsured(const QString &insured) {
    m_insured = insured;
    m_insured_isSet = true;
}

bool OAIILifeInsurancePolicy::is_insured_Set() const{
    return m_insured_isSet;
}

bool OAIILifeInsurancePolicy::is_insured_Valid() const{
    return m_insured_isValid;
}

OAIDescriptiveBoolean OAIILifeInsurancePolicy::getIsCsvPayableWithDeathBenefit() const {
    return m_is_csv_payable_with_death_benefit;
}
void OAIILifeInsurancePolicy::setIsCsvPayableWithDeathBenefit(const OAIDescriptiveBoolean &is_csv_payable_with_death_benefit) {
    m_is_csv_payable_with_death_benefit = is_csv_payable_with_death_benefit;
    m_is_csv_payable_with_death_benefit_isSet = true;
}

bool OAIILifeInsurancePolicy::is_is_csv_payable_with_death_benefit_Set() const{
    return m_is_csv_payable_with_death_benefit_isSet;
}

bool OAIILifeInsurancePolicy::is_is_csv_payable_with_death_benefit_Valid() const{
    return m_is_csv_payable_with_death_benefit_isValid;
}

double OAIILifeInsurancePolicy::getMonthlyBenefitValue() const {
    return m_monthly_benefit_value;
}
void OAIILifeInsurancePolicy::setMonthlyBenefitValue(const double &monthly_benefit_value) {
    m_monthly_benefit_value = monthly_benefit_value;
    m_monthly_benefit_value_isSet = true;
}

bool OAIILifeInsurancePolicy::is_monthly_benefit_value_Set() const{
    return m_monthly_benefit_value_isSet;
}

bool OAIILifeInsurancePolicy::is_monthly_benefit_value_Valid() const{
    return m_monthly_benefit_value_isValid;
}

QString OAIILifeInsurancePolicy::getOwnerName() const {
    return m_owner_name;
}
void OAIILifeInsurancePolicy::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIILifeInsurancePolicy::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIILifeInsurancePolicy::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIILifeInsurancePolicy::getPolicyType() const {
    return m_policy_type;
}
void OAIILifeInsurancePolicy::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIILifeInsurancePolicy::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIILifeInsurancePolicy::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

OAIIInsurancePremium OAIILifeInsurancePolicy::getPremiumData() const {
    return m_premium_data;
}
void OAIILifeInsurancePolicy::setPremiumData(const OAIIInsurancePremium &premium_data) {
    m_premium_data = premium_data;
    m_premium_data_isSet = true;
}

bool OAIILifeInsurancePolicy::is_premium_data_Set() const{
    return m_premium_data_isSet;
}

bool OAIILifeInsurancePolicy::is_premium_data_Valid() const{
    return m_premium_data_isValid;
}

OAIDescriptiveBoolean OAIILifeInsurancePolicy::getPremiumsWaivedAtDisability() const {
    return m_premiums_waived_at_disability;
}
void OAIILifeInsurancePolicy::setPremiumsWaivedAtDisability(const OAIDescriptiveBoolean &premiums_waived_at_disability) {
    m_premiums_waived_at_disability = premiums_waived_at_disability;
    m_premiums_waived_at_disability_isSet = true;
}

bool OAIILifeInsurancePolicy::is_premiums_waived_at_disability_Set() const{
    return m_premiums_waived_at_disability_isSet;
}

bool OAIILifeInsurancePolicy::is_premiums_waived_at_disability_Valid() const{
    return m_premiums_waived_at_disability_isValid;
}

double OAIILifeInsurancePolicy::getRawBenefitValue() const {
    return m_raw_benefit_value;
}
void OAIILifeInsurancePolicy::setRawBenefitValue(const double &raw_benefit_value) {
    m_raw_benefit_value = raw_benefit_value;
    m_raw_benefit_value_isSet = true;
}

bool OAIILifeInsurancePolicy::is_raw_benefit_value_Set() const{
    return m_raw_benefit_value_isSet;
}

bool OAIILifeInsurancePolicy::is_raw_benefit_value_Valid() const{
    return m_raw_benefit_value_isValid;
}

OAITimePeriod OAIILifeInsurancePolicy::getWaitingPeriod() const {
    return m_waiting_period;
}
void OAIILifeInsurancePolicy::setWaitingPeriod(const OAITimePeriod &waiting_period) {
    m_waiting_period = waiting_period;
    m_waiting_period_isSet = true;
}

bool OAIILifeInsurancePolicy::is_waiting_period_Set() const{
    return m_waiting_period_isSet;
}

bool OAIILifeInsurancePolicy::is_waiting_period_Valid() const{
    return m_waiting_period_isValid;
}

bool OAIILifeInsurancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beneficiary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefit_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_surrender_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_cease_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_benefit_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_benefit_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_insured_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_csv_payable_with_death_benefit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_benefit_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_premiums_waived_at_disability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_benefit_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waiting_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILifeInsurancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
