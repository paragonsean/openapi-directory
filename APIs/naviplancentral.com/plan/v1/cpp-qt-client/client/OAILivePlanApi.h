/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILivePlanApi_H
#define OAI_OAILivePlanApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel.h"
#include "OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel.h"
#include "OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel.h"
#include "OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel.h"
#include "OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel.h"
#include "OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel.h"
#include "OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel.h"
#include "OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILivePlanApi : public QObject {
    Q_OBJECT

public:
    OAILivePlanApi(const int timeOut = 0);
    ~OAILivePlanApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetAccountsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetGoalFundingListByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetGoalsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetLiabilitiesByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetLifestyleAssetsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetProjectedNetWorthByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetRealEstateAssetsByClientidPlanid(const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  client_id QString [optional]
    */
    virtual void livePlanGetWhatAreMyOptionsByIdClientidPlanid(const qint32 &id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void livePlanGetAccountsByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetGoalFundingListByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetGoalsByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetLiabilitiesByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetLifestyleAssetsByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetProjectedNetWorthByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetRealEstateAssetsByClientidPlanidCallback(OAIHttpRequestWorker *worker);
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void livePlanGetAccountsByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel summary);
    void livePlanGetGoalFundingListByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel summary);
    void livePlanGetGoalsByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel summary);
    void livePlanGetLiabilitiesByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel summary);
    void livePlanGetLifestyleAssetsByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel summary);
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignal(OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel summary);
    void livePlanGetProjectedNetWorthByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel summary);
    void livePlanGetRealEstateAssetsByClientidPlanidSignal(OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel summary);
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignal(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary);


    void livePlanGetAccountsByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel summary);
    void livePlanGetGoalFundingListByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel summary);
    void livePlanGetGoalsByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel summary);
    void livePlanGetLiabilitiesByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel summary);
    void livePlanGetLifestyleAssetsByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel summary);
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel summary);
    void livePlanGetProjectedNetWorthByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel summary);
    void livePlanGetRealEstateAssetsByClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel summary);
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalFull(OAIHttpRequestWorker *worker, OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary);

    Q_DECL_DEPRECATED_X("Use livePlanGetAccountsByClientidPlanidSignalError() instead")
    void livePlanGetAccountsByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetAccountsByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetGoalFundingListByClientidPlanidSignalError() instead")
    void livePlanGetGoalFundingListByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetGoalFundingListByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetGoalsByClientidPlanidSignalError() instead")
    void livePlanGetGoalsByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetGoalsByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetLiabilitiesByClientidPlanidSignalError() instead")
    void livePlanGetLiabilitiesByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetLiabilitiesByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetLifestyleAssetsByClientidPlanidSignalError() instead")
    void livePlanGetLifestyleAssetsByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetLifestyleAssetsByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalError() instead")
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetProjectedNetWorthByClientidPlanidSignalError() instead")
    void livePlanGetProjectedNetWorthByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetProjectedNetWorthByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetRealEstateAssetsByClientidPlanidSignalError() instead")
    void livePlanGetRealEstateAssetsByClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetRealEstateAssetsByClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalError() instead")
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalE(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalError(OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use livePlanGetAccountsByClientidPlanidSignalErrorFull() instead")
    void livePlanGetAccountsByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetAccountsByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetGoalFundingListByClientidPlanidSignalErrorFull() instead")
    void livePlanGetGoalFundingListByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetGoalFundingListByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetGoalsByClientidPlanidSignalErrorFull() instead")
    void livePlanGetGoalsByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetGoalsByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetLiabilitiesByClientidPlanidSignalErrorFull() instead")
    void livePlanGetLiabilitiesByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetLiabilitiesByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetLifestyleAssetsByClientidPlanidSignalErrorFull() instead")
    void livePlanGetLifestyleAssetsByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetLifestyleAssetsByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalErrorFull() instead")
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetProjectedNeedsVsAbilitiesByIdClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetProjectedNetWorthByClientidPlanidSignalErrorFull() instead")
    void livePlanGetProjectedNetWorthByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetProjectedNetWorthByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetRealEstateAssetsByClientidPlanidSignalErrorFull() instead")
    void livePlanGetRealEstateAssetsByClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetRealEstateAssetsByClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull() instead")
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void livePlanGetWhatAreMyOptionsByIdClientidPlanidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
