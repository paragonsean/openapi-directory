/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPercent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPercent::OAIPercent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPercent::OAIPercent() {
    this->initializeModel();
}

OAIPercent::~OAIPercent() {}

void OAIPercent::initializeModel() {

    m_formatted_double_decimal_isSet = false;
    m_formatted_double_decimal_isValid = false;

    m_formatted_no_decimal_isSet = false;
    m_formatted_no_decimal_isValid = false;

    m_formatted_single_decimal_isSet = false;
    m_formatted_single_decimal_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_raw_capped_at100_isSet = false;
    m_raw_capped_at100_isValid = false;
}

void OAIPercent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPercent::fromJsonObject(QJsonObject json) {

    m_formatted_double_decimal_isValid = ::OpenAPI::fromJsonValue(m_formatted_double_decimal, json[QString("formattedDoubleDecimal")]);
    m_formatted_double_decimal_isSet = !json[QString("formattedDoubleDecimal")].isNull() && m_formatted_double_decimal_isValid;

    m_formatted_no_decimal_isValid = ::OpenAPI::fromJsonValue(m_formatted_no_decimal, json[QString("formattedNoDecimal")]);
    m_formatted_no_decimal_isSet = !json[QString("formattedNoDecimal")].isNull() && m_formatted_no_decimal_isValid;

    m_formatted_single_decimal_isValid = ::OpenAPI::fromJsonValue(m_formatted_single_decimal, json[QString("formattedSingleDecimal")]);
    m_formatted_single_decimal_isSet = !json[QString("formattedSingleDecimal")].isNull() && m_formatted_single_decimal_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_raw_capped_at100_isValid = ::OpenAPI::fromJsonValue(m_raw_capped_at100, json[QString("rawCappedAt100")]);
    m_raw_capped_at100_isSet = !json[QString("rawCappedAt100")].isNull() && m_raw_capped_at100_isValid;
}

QString OAIPercent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPercent::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_double_decimal_isSet) {
        obj.insert(QString("formattedDoubleDecimal"), ::OpenAPI::toJsonValue(m_formatted_double_decimal));
    }
    if (m_formatted_no_decimal_isSet) {
        obj.insert(QString("formattedNoDecimal"), ::OpenAPI::toJsonValue(m_formatted_no_decimal));
    }
    if (m_formatted_single_decimal_isSet) {
        obj.insert(QString("formattedSingleDecimal"), ::OpenAPI::toJsonValue(m_formatted_single_decimal));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_raw_capped_at100_isSet) {
        obj.insert(QString("rawCappedAt100"), ::OpenAPI::toJsonValue(m_raw_capped_at100));
    }
    return obj;
}

QString OAIPercent::getFormattedDoubleDecimal() const {
    return m_formatted_double_decimal;
}
void OAIPercent::setFormattedDoubleDecimal(const QString &formatted_double_decimal) {
    m_formatted_double_decimal = formatted_double_decimal;
    m_formatted_double_decimal_isSet = true;
}

bool OAIPercent::is_formatted_double_decimal_Set() const{
    return m_formatted_double_decimal_isSet;
}

bool OAIPercent::is_formatted_double_decimal_Valid() const{
    return m_formatted_double_decimal_isValid;
}

QString OAIPercent::getFormattedNoDecimal() const {
    return m_formatted_no_decimal;
}
void OAIPercent::setFormattedNoDecimal(const QString &formatted_no_decimal) {
    m_formatted_no_decimal = formatted_no_decimal;
    m_formatted_no_decimal_isSet = true;
}

bool OAIPercent::is_formatted_no_decimal_Set() const{
    return m_formatted_no_decimal_isSet;
}

bool OAIPercent::is_formatted_no_decimal_Valid() const{
    return m_formatted_no_decimal_isValid;
}

QString OAIPercent::getFormattedSingleDecimal() const {
    return m_formatted_single_decimal;
}
void OAIPercent::setFormattedSingleDecimal(const QString &formatted_single_decimal) {
    m_formatted_single_decimal = formatted_single_decimal;
    m_formatted_single_decimal_isSet = true;
}

bool OAIPercent::is_formatted_single_decimal_Set() const{
    return m_formatted_single_decimal_isSet;
}

bool OAIPercent::is_formatted_single_decimal_Valid() const{
    return m_formatted_single_decimal_isValid;
}

double OAIPercent::getRaw() const {
    return m_raw;
}
void OAIPercent::setRaw(const double &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIPercent::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIPercent::is_raw_Valid() const{
    return m_raw_isValid;
}

double OAIPercent::getRawCappedAt100() const {
    return m_raw_capped_at100;
}
void OAIPercent::setRawCappedAt100(const double &raw_capped_at100) {
    m_raw_capped_at100 = raw_capped_at100;
    m_raw_capped_at100_isSet = true;
}

bool OAIPercent::is_raw_capped_at100_Set() const{
    return m_raw_capped_at100_isSet;
}

bool OAIPercent::is_raw_capped_at100_Valid() const{
    return m_raw_capped_at100_isValid;
}

bool OAIPercent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_double_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_no_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_single_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_capped_at100_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPercent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
