/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILumpSumRedemptionStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILumpSumRedemptionStrategy::OAIILumpSumRedemptionStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILumpSumRedemptionStrategy::OAIILumpSumRedemptionStrategy() {
    this->initializeModel();
}

OAIILumpSumRedemptionStrategy::~OAIILumpSumRedemptionStrategy() {}

void OAIILumpSumRedemptionStrategy::initializeModel() {

    m_amount_or_percent_of_value_isSet = false;
    m_amount_or_percent_of_value_isValid = false;

    m_index_rate_isSet = false;
    m_index_rate_isValid = false;

    m_redemption_date_isSet = false;
    m_redemption_date_isValid = false;
}

void OAIILumpSumRedemptionStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILumpSumRedemptionStrategy::fromJsonObject(QJsonObject json) {

    m_amount_or_percent_of_value_isValid = ::OpenAPI::fromJsonValue(m_amount_or_percent_of_value, json[QString("amountOrPercentOfValue")]);
    m_amount_or_percent_of_value_isSet = !json[QString("amountOrPercentOfValue")].isNull() && m_amount_or_percent_of_value_isValid;

    m_index_rate_isValid = ::OpenAPI::fromJsonValue(m_index_rate, json[QString("indexRate")]);
    m_index_rate_isSet = !json[QString("indexRate")].isNull() && m_index_rate_isValid;

    m_redemption_date_isValid = ::OpenAPI::fromJsonValue(m_redemption_date, json[QString("redemptionDate")]);
    m_redemption_date_isSet = !json[QString("redemptionDate")].isNull() && m_redemption_date_isValid;
}

QString OAIILumpSumRedemptionStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILumpSumRedemptionStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_or_percent_of_value.isSet()) {
        obj.insert(QString("amountOrPercentOfValue"), ::OpenAPI::toJsonValue(m_amount_or_percent_of_value));
    }
    if (m_index_rate.isSet()) {
        obj.insert(QString("indexRate"), ::OpenAPI::toJsonValue(m_index_rate));
    }
    if (m_redemption_date.isSet()) {
        obj.insert(QString("redemptionDate"), ::OpenAPI::toJsonValue(m_redemption_date));
    }
    return obj;
}

OAIPercentOr_Currency OAIILumpSumRedemptionStrategy::getAmountOrPercentOfValue() const {
    return m_amount_or_percent_of_value;
}
void OAIILumpSumRedemptionStrategy::setAmountOrPercentOfValue(const OAIPercentOr_Currency &amount_or_percent_of_value) {
    m_amount_or_percent_of_value = amount_or_percent_of_value;
    m_amount_or_percent_of_value_isSet = true;
}

bool OAIILumpSumRedemptionStrategy::is_amount_or_percent_of_value_Set() const{
    return m_amount_or_percent_of_value_isSet;
}

bool OAIILumpSumRedemptionStrategy::is_amount_or_percent_of_value_Valid() const{
    return m_amount_or_percent_of_value_isValid;
}

OAIGrowthRateValues OAIILumpSumRedemptionStrategy::getIndexRate() const {
    return m_index_rate;
}
void OAIILumpSumRedemptionStrategy::setIndexRate(const OAIGrowthRateValues &index_rate) {
    m_index_rate = index_rate;
    m_index_rate_isSet = true;
}

bool OAIILumpSumRedemptionStrategy::is_index_rate_Set() const{
    return m_index_rate_isSet;
}

bool OAIILumpSumRedemptionStrategy::is_index_rate_Valid() const{
    return m_index_rate_isValid;
}

OAIDate OAIILumpSumRedemptionStrategy::getRedemptionDate() const {
    return m_redemption_date;
}
void OAIILumpSumRedemptionStrategy::setRedemptionDate(const OAIDate &redemption_date) {
    m_redemption_date = redemption_date;
    m_redemption_date_isSet = true;
}

bool OAIILumpSumRedemptionStrategy::is_redemption_date_Set() const{
    return m_redemption_date_isSet;
}

bool OAIILumpSumRedemptionStrategy::is_redemption_date_Valid() const{
    return m_redemption_date_isValid;
}

bool OAIILumpSumRedemptionStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_or_percent_of_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILumpSumRedemptionStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
