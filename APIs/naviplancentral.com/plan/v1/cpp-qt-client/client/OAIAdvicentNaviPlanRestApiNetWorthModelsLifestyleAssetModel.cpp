/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::~OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel() {}

void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_purchase_value_isSet = false;
    m_purchase_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;

    m_valuation_value_isSet = false;
    m_valuation_value_isValid = false;
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_purchase_value_isValid = ::OpenAPI::fromJsonValue(m_purchase_value, json[QString("purchaseValue")]);
    m_purchase_value_isSet = !json[QString("purchaseValue")].isNull() && m_purchase_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("valuationDate")]);
    m_valuation_date_isSet = !json[QString("valuationDate")].isNull() && m_valuation_date_isValid;

    m_valuation_value_isValid = ::OpenAPI::fromJsonValue(m_valuation_value, json[QString("valuationValue")]);
    m_valuation_value_isSet = !json[QString("valuationValue")].isNull() && m_valuation_value_isValid;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_purchase_date_isSet) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_purchase_value_isSet) {
        obj.insert(QString("purchaseValue"), ::OpenAPI::toJsonValue(m_purchase_value));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valuation_date_isSet) {
        obj.insert(QString("valuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    if (m_valuation_value_isSet) {
        obj.insert(QString("valuationValue"), ::OpenAPI::toJsonValue(m_valuation_value));
    }
    return obj;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getDescription() const {
    return m_description;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getId() const {
    return m_id;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_id_Valid() const{
    return m_id_isValid;
}

OAIAdvicentNaviPlanRestApiModelsOwnerModel OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getOwner() const {
    return m_owner;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setOwner(const OAIAdvicentNaviPlanRestApiModelsOwnerModel &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setPurchaseDate(const QDateTime &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

double OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getPurchaseValue() const {
    return m_purchase_value;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setPurchaseValue(const double &purchase_value) {
    m_purchase_value = purchase_value;
    m_purchase_value_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_purchase_value_Set() const{
    return m_purchase_value_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_purchase_value_Valid() const{
    return m_purchase_value_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getType() const {
    return m_type;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getValuationDate() const {
    return m_valuation_date;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setValuationDate(const QDateTime &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

double OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::getValuationValue() const {
    return m_valuation_value;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::setValuationValue(const double &valuation_value) {
    m_valuation_value = valuation_value;
    m_valuation_value_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_valuation_value_Set() const{
    return m_valuation_value_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::is_valuation_value_Valid() const{
    return m_valuation_value_isValid;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
