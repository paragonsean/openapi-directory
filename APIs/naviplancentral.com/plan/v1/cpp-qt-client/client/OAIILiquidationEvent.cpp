/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIILiquidationEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIILiquidationEvent::OAIILiquidationEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIILiquidationEvent::OAIILiquidationEvent() {
    this->initializeModel();
}

OAIILiquidationEvent::~OAIILiquidationEvent() {}

void OAIILiquidationEvent::initializeModel() {

    m_first_sale_date_isSet = false;
    m_first_sale_date_isValid = false;

    m_last_sale_date_isSet = false;
    m_last_sale_date_isValid = false;

    m_liquidation_type_isSet = false;
    m_liquidation_type_isValid = false;

    m_liquidation_type_description_isSet = false;
    m_liquidation_type_description_isValid = false;

    m_sale_dates_description_isSet = false;
    m_sale_dates_description_isValid = false;
}

void OAIILiquidationEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIILiquidationEvent::fromJsonObject(QJsonObject json) {

    m_first_sale_date_isValid = ::OpenAPI::fromJsonValue(m_first_sale_date, json[QString("firstSaleDate")]);
    m_first_sale_date_isSet = !json[QString("firstSaleDate")].isNull() && m_first_sale_date_isValid;

    m_last_sale_date_isValid = ::OpenAPI::fromJsonValue(m_last_sale_date, json[QString("lastSaleDate")]);
    m_last_sale_date_isSet = !json[QString("lastSaleDate")].isNull() && m_last_sale_date_isValid;

    m_liquidation_type_isValid = ::OpenAPI::fromJsonValue(m_liquidation_type, json[QString("liquidationType")]);
    m_liquidation_type_isSet = !json[QString("liquidationType")].isNull() && m_liquidation_type_isValid;

    m_liquidation_type_description_isValid = ::OpenAPI::fromJsonValue(m_liquidation_type_description, json[QString("liquidationTypeDescription")]);
    m_liquidation_type_description_isSet = !json[QString("liquidationTypeDescription")].isNull() && m_liquidation_type_description_isValid;

    m_sale_dates_description_isValid = ::OpenAPI::fromJsonValue(m_sale_dates_description, json[QString("saleDatesDescription")]);
    m_sale_dates_description_isSet = !json[QString("saleDatesDescription")].isNull() && m_sale_dates_description_isValid;
}

QString OAIILiquidationEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIILiquidationEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_first_sale_date.isSet()) {
        obj.insert(QString("firstSaleDate"), ::OpenAPI::toJsonValue(m_first_sale_date));
    }
    if (m_last_sale_date.isSet()) {
        obj.insert(QString("lastSaleDate"), ::OpenAPI::toJsonValue(m_last_sale_date));
    }
    if (m_liquidation_type_isSet) {
        obj.insert(QString("liquidationType"), ::OpenAPI::toJsonValue(m_liquidation_type));
    }
    if (m_liquidation_type_description_isSet) {
        obj.insert(QString("liquidationTypeDescription"), ::OpenAPI::toJsonValue(m_liquidation_type_description));
    }
    if (m_sale_dates_description_isSet) {
        obj.insert(QString("saleDatesDescription"), ::OpenAPI::toJsonValue(m_sale_dates_description));
    }
    return obj;
}

OAIDate OAIILiquidationEvent::getFirstSaleDate() const {
    return m_first_sale_date;
}
void OAIILiquidationEvent::setFirstSaleDate(const OAIDate &first_sale_date) {
    m_first_sale_date = first_sale_date;
    m_first_sale_date_isSet = true;
}

bool OAIILiquidationEvent::is_first_sale_date_Set() const{
    return m_first_sale_date_isSet;
}

bool OAIILiquidationEvent::is_first_sale_date_Valid() const{
    return m_first_sale_date_isValid;
}

OAIDate OAIILiquidationEvent::getLastSaleDate() const {
    return m_last_sale_date;
}
void OAIILiquidationEvent::setLastSaleDate(const OAIDate &last_sale_date) {
    m_last_sale_date = last_sale_date;
    m_last_sale_date_isSet = true;
}

bool OAIILiquidationEvent::is_last_sale_date_Set() const{
    return m_last_sale_date_isSet;
}

bool OAIILiquidationEvent::is_last_sale_date_Valid() const{
    return m_last_sale_date_isValid;
}

QString OAIILiquidationEvent::getLiquidationType() const {
    return m_liquidation_type;
}
void OAIILiquidationEvent::setLiquidationType(const QString &liquidation_type) {
    m_liquidation_type = liquidation_type;
    m_liquidation_type_isSet = true;
}

bool OAIILiquidationEvent::is_liquidation_type_Set() const{
    return m_liquidation_type_isSet;
}

bool OAIILiquidationEvent::is_liquidation_type_Valid() const{
    return m_liquidation_type_isValid;
}

QString OAIILiquidationEvent::getLiquidationTypeDescription() const {
    return m_liquidation_type_description;
}
void OAIILiquidationEvent::setLiquidationTypeDescription(const QString &liquidation_type_description) {
    m_liquidation_type_description = liquidation_type_description;
    m_liquidation_type_description_isSet = true;
}

bool OAIILiquidationEvent::is_liquidation_type_description_Set() const{
    return m_liquidation_type_description_isSet;
}

bool OAIILiquidationEvent::is_liquidation_type_description_Valid() const{
    return m_liquidation_type_description_isValid;
}

QString OAIILiquidationEvent::getSaleDatesDescription() const {
    return m_sale_dates_description;
}
void OAIILiquidationEvent::setSaleDatesDescription(const QString &sale_dates_description) {
    m_sale_dates_description = sale_dates_description;
    m_sale_dates_description_isSet = true;
}

bool OAIILiquidationEvent::is_sale_dates_description_Set() const{
    return m_sale_dates_description_isSet;
}

bool OAIILiquidationEvent::is_sale_dates_description_Valid() const{
    return m_sale_dates_description_isValid;
}

bool OAIILiquidationEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_sale_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sale_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_dates_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIILiquidationEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
