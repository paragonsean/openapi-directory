/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRateOfReturnDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRateOfReturnDetails::OAIIRateOfReturnDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRateOfReturnDetails::OAIIRateOfReturnDetails() {
    this->initializeModel();
}

OAIIRateOfReturnDetails::~OAIIRateOfReturnDetails() {}

void OAIIRateOfReturnDetails::initializeModel() {

    m_pre_retirement_isSet = false;
    m_pre_retirement_isValid = false;

    m_retirement_isSet = false;
    m_retirement_isValid = false;
}

void OAIIRateOfReturnDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRateOfReturnDetails::fromJsonObject(QJsonObject json) {

    m_pre_retirement_isValid = ::OpenAPI::fromJsonValue(m_pre_retirement, json[QString("preRetirement")]);
    m_pre_retirement_isSet = !json[QString("preRetirement")].isNull() && m_pre_retirement_isValid;

    m_retirement_isValid = ::OpenAPI::fromJsonValue(m_retirement, json[QString("retirement")]);
    m_retirement_isSet = !json[QString("retirement")].isNull() && m_retirement_isValid;
}

QString OAIIRateOfReturnDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRateOfReturnDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_pre_retirement.isSet()) {
        obj.insert(QString("preRetirement"), ::OpenAPI::toJsonValue(m_pre_retirement));
    }
    if (m_retirement.isSet()) {
        obj.insert(QString("retirement"), ::OpenAPI::toJsonValue(m_retirement));
    }
    return obj;
}

OAIIPeriodRateOfReturnDetails OAIIRateOfReturnDetails::getPreRetirement() const {
    return m_pre_retirement;
}
void OAIIRateOfReturnDetails::setPreRetirement(const OAIIPeriodRateOfReturnDetails &pre_retirement) {
    m_pre_retirement = pre_retirement;
    m_pre_retirement_isSet = true;
}

bool OAIIRateOfReturnDetails::is_pre_retirement_Set() const{
    return m_pre_retirement_isSet;
}

bool OAIIRateOfReturnDetails::is_pre_retirement_Valid() const{
    return m_pre_retirement_isValid;
}

OAIIPeriodRateOfReturnDetails OAIIRateOfReturnDetails::getRetirement() const {
    return m_retirement;
}
void OAIIRateOfReturnDetails::setRetirement(const OAIIPeriodRateOfReturnDetails &retirement) {
    m_retirement = retirement;
    m_retirement_isSet = true;
}

bool OAIIRateOfReturnDetails::is_retirement_Set() const{
    return m_retirement_isSet;
}

bool OAIIRateOfReturnDetails::is_retirement_Valid() const{
    return m_retirement_isValid;
}

bool OAIIRateOfReturnDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pre_retirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRateOfReturnDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
