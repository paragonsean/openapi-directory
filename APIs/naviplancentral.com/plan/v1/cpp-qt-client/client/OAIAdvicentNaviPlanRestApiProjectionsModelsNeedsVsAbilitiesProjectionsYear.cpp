/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::~OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear() {}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::initializeModel() {

    m_projected_abilities_isSet = false;
    m_projected_abilities_isValid = false;

    m_projected_need_isSet = false;
    m_projected_need_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::fromJsonObject(QJsonObject json) {

    m_projected_abilities_isValid = ::OpenAPI::fromJsonValue(m_projected_abilities, json[QString("projectedAbilities")]);
    m_projected_abilities_isSet = !json[QString("projectedAbilities")].isNull() && m_projected_abilities_isValid;

    m_projected_need_isValid = ::OpenAPI::fromJsonValue(m_projected_need, json[QString("projectedNeed")]);
    m_projected_need_isSet = !json[QString("projectedNeed")].isNull() && m_projected_need_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::asJsonObject() const {
    QJsonObject obj;
    if (m_projected_abilities_isSet) {
        obj.insert(QString("projectedAbilities"), ::OpenAPI::toJsonValue(m_projected_abilities));
    }
    if (m_projected_need_isSet) {
        obj.insert(QString("projectedNeed"), ::OpenAPI::toJsonValue(m_projected_need));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

double OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::getProjectedAbilities() const {
    return m_projected_abilities;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::setProjectedAbilities(const double &projected_abilities) {
    m_projected_abilities = projected_abilities;
    m_projected_abilities_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_projected_abilities_Set() const{
    return m_projected_abilities_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_projected_abilities_Valid() const{
    return m_projected_abilities_isValid;
}

double OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::getProjectedNeed() const {
    return m_projected_need;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::setProjectedNeed(const double &projected_need) {
    m_projected_need = projected_need;
    m_projected_need_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_projected_need_Set() const{
    return m_projected_need_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_projected_need_Valid() const{
    return m_projected_need_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::getYear() const {
    return m_year;
}
void OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_year_Set() const{
    return m_year_isSet;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_projected_abilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_need_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
