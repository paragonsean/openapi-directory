/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::~OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel() {}

void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_holdings_isSet = false;
    m_holdings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legacy_id_isSet = false;
    m_legacy_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_holdings_isValid = ::OpenAPI::fromJsonValue(m_holdings, json[QString("holdings")]);
    m_holdings_isSet = !json[QString("holdings")].isNull() && m_holdings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legacy_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_id, json[QString("legacyId")]);
    m_legacy_id_isSet = !json[QString("legacyId")].isNull() && m_legacy_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_holdings.size() > 0) {
        obj.insert(QString("holdings"), ::OpenAPI::toJsonValue(m_holdings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legacy_id_isSet) {
        obj.insert(QString("legacyId"), ::OpenAPI::toJsonValue(m_legacy_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getDescription() const {
    return m_description;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIAdvicentNaviPlanRestApiNetWorthModelsHoldingModel> OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getHoldings() const {
    return m_holdings;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setHoldings(const QList<OAIAdvicentNaviPlanRestApiNetWorthModelsHoldingModel> &holdings) {
    m_holdings = holdings;
    m_holdings_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_holdings_Set() const{
    return m_holdings_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_holdings_Valid() const{
    return m_holdings_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getId() const {
    return m_id;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getLegacyId() const {
    return m_legacy_id;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setLegacyId(const QString &legacy_id) {
    m_legacy_id = legacy_id;
    m_legacy_id_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_legacy_id_Set() const{
    return m_legacy_id_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_legacy_id_Valid() const{
    return m_legacy_id_isValid;
}

OAIAdvicentNaviPlanRestApiModelsOwnerModel OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getOwner() const {
    return m_owner;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setOwner(const OAIAdvicentNaviPlanRestApiModelsOwnerModel &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::getType() const {
    return m_type;
}
void OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiNetWorthModelsAccountModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
