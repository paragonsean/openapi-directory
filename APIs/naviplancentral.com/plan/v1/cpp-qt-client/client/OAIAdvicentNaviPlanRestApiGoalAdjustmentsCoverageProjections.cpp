/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::~OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections() {}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::initializeModel() {

    m_goal_id_isSet = false;
    m_goal_id_isValid = false;

    m_percent_covered_isSet = false;
    m_percent_covered_isValid = false;

    m_projections_isSet = false;
    m_projections_isValid = false;
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::fromJsonObject(QJsonObject json) {

    m_goal_id_isValid = ::OpenAPI::fromJsonValue(m_goal_id, json[QString("goalId")]);
    m_goal_id_isSet = !json[QString("goalId")].isNull() && m_goal_id_isValid;

    m_percent_covered_isValid = ::OpenAPI::fromJsonValue(m_percent_covered, json[QString("percentCovered")]);
    m_percent_covered_isSet = !json[QString("percentCovered")].isNull() && m_percent_covered_isValid;

    m_projections_isValid = ::OpenAPI::fromJsonValue(m_projections, json[QString("projections")]);
    m_projections_isSet = !json[QString("projections")].isNull() && m_projections_isValid;
}

QString OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::asJsonObject() const {
    QJsonObject obj;
    if (m_goal_id_isSet) {
        obj.insert(QString("goalId"), ::OpenAPI::toJsonValue(m_goal_id));
    }
    if (m_percent_covered_isSet) {
        obj.insert(QString("percentCovered"), ::OpenAPI::toJsonValue(m_percent_covered));
    }
    if (m_projections.size() > 0) {
        obj.insert(QString("projections"), ::OpenAPI::toJsonValue(m_projections));
    }
    return obj;
}

qint32 OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::getGoalId() const {
    return m_goal_id;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::setGoalId(const qint32 &goal_id) {
    m_goal_id = goal_id;
    m_goal_id_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_goal_id_Set() const{
    return m_goal_id_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_goal_id_Valid() const{
    return m_goal_id_isValid;
}

double OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::getPercentCovered() const {
    return m_percent_covered;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::setPercentCovered(const double &percent_covered) {
    m_percent_covered = percent_covered;
    m_percent_covered_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_percent_covered_Set() const{
    return m_percent_covered_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_percent_covered_Valid() const{
    return m_percent_covered_isValid;
}

QList<OAIAdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection> OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::getProjections() const {
    return m_projections;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::setProjections(const QList<OAIAdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection> &projections) {
    m_projections = projections;
    m_projections_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_projections_Set() const{
    return m_projections_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::is_projections_Valid() const{
    return m_projections_isValid;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_goal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_covered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
