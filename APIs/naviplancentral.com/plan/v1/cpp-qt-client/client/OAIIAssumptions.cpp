/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIAssumptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIAssumptions::OAIIAssumptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIAssumptions::OAIIAssumptions() {
    this->initializeModel();
}

OAIIAssumptions::~OAIIAssumptions() {}

void OAIIAssumptions::initializeModel() {

    m_any_head_already_retired_isSet = false;
    m_any_head_already_retired_isValid = false;

    m_both_retired_isSet = false;
    m_both_retired_isValid = false;

    m_bucketing_isSet = false;
    m_bucketing_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_co_client_isSet = false;
    m_co_client_isValid = false;

    m_first_to_die_date_isSet = false;
    m_first_to_die_date_isValid = false;

    m_first_to_die_member_isSet = false;
    m_first_to_die_member_isValid = false;

    m_first_to_retire_date_isSet = false;
    m_first_to_retire_date_isValid = false;

    m_inflation_rate_isSet = false;
    m_inflation_rate_isValid = false;

    m_last_to_die_date_isSet = false;
    m_last_to_die_date_isValid = false;

    m_last_to_die_member_isSet = false;
    m_last_to_die_member_isValid = false;

    m_last_to_retire_date_isSet = false;
    m_last_to_retire_date_isValid = false;

    m_retirement_year_adjusted_if_already_retired_isSet = false;
    m_retirement_year_adjusted_if_already_retired_isValid = false;

    m_split_surplus_savings_strategies_enabled_isSet = false;
    m_split_surplus_savings_strategies_enabled_isValid = false;

    m_tax_method_isSet = false;
    m_tax_method_isValid = false;
}

void OAIIAssumptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIAssumptions::fromJsonObject(QJsonObject json) {

    m_any_head_already_retired_isValid = ::OpenAPI::fromJsonValue(m_any_head_already_retired, json[QString("anyHeadAlreadyRetired")]);
    m_any_head_already_retired_isSet = !json[QString("anyHeadAlreadyRetired")].isNull() && m_any_head_already_retired_isValid;

    m_both_retired_isValid = ::OpenAPI::fromJsonValue(m_both_retired, json[QString("bothRetired")]);
    m_both_retired_isSet = !json[QString("bothRetired")].isNull() && m_both_retired_isValid;

    m_bucketing_isValid = ::OpenAPI::fromJsonValue(m_bucketing, json[QString("bucketing")]);
    m_bucketing_isSet = !json[QString("bucketing")].isNull() && m_bucketing_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_co_client_isValid = ::OpenAPI::fromJsonValue(m_co_client, json[QString("coClient")]);
    m_co_client_isSet = !json[QString("coClient")].isNull() && m_co_client_isValid;

    m_first_to_die_date_isValid = ::OpenAPI::fromJsonValue(m_first_to_die_date, json[QString("firstToDieDate")]);
    m_first_to_die_date_isSet = !json[QString("firstToDieDate")].isNull() && m_first_to_die_date_isValid;

    m_first_to_die_member_isValid = ::OpenAPI::fromJsonValue(m_first_to_die_member, json[QString("firstToDieMember")]);
    m_first_to_die_member_isSet = !json[QString("firstToDieMember")].isNull() && m_first_to_die_member_isValid;

    m_first_to_retire_date_isValid = ::OpenAPI::fromJsonValue(m_first_to_retire_date, json[QString("firstToRetireDate")]);
    m_first_to_retire_date_isSet = !json[QString("firstToRetireDate")].isNull() && m_first_to_retire_date_isValid;

    m_inflation_rate_isValid = ::OpenAPI::fromJsonValue(m_inflation_rate, json[QString("inflationRate")]);
    m_inflation_rate_isSet = !json[QString("inflationRate")].isNull() && m_inflation_rate_isValid;

    m_last_to_die_date_isValid = ::OpenAPI::fromJsonValue(m_last_to_die_date, json[QString("lastToDieDate")]);
    m_last_to_die_date_isSet = !json[QString("lastToDieDate")].isNull() && m_last_to_die_date_isValid;

    m_last_to_die_member_isValid = ::OpenAPI::fromJsonValue(m_last_to_die_member, json[QString("lastToDieMember")]);
    m_last_to_die_member_isSet = !json[QString("lastToDieMember")].isNull() && m_last_to_die_member_isValid;

    m_last_to_retire_date_isValid = ::OpenAPI::fromJsonValue(m_last_to_retire_date, json[QString("lastToRetireDate")]);
    m_last_to_retire_date_isSet = !json[QString("lastToRetireDate")].isNull() && m_last_to_retire_date_isValid;

    m_retirement_year_adjusted_if_already_retired_isValid = ::OpenAPI::fromJsonValue(m_retirement_year_adjusted_if_already_retired, json[QString("retirementYearAdjustedIfAlreadyRetired")]);
    m_retirement_year_adjusted_if_already_retired_isSet = !json[QString("retirementYearAdjustedIfAlreadyRetired")].isNull() && m_retirement_year_adjusted_if_already_retired_isValid;

    m_split_surplus_savings_strategies_enabled_isValid = ::OpenAPI::fromJsonValue(m_split_surplus_savings_strategies_enabled, json[QString("splitSurplusSavingsStrategiesEnabled")]);
    m_split_surplus_savings_strategies_enabled_isSet = !json[QString("splitSurplusSavingsStrategiesEnabled")].isNull() && m_split_surplus_savings_strategies_enabled_isValid;

    m_tax_method_isValid = ::OpenAPI::fromJsonValue(m_tax_method, json[QString("taxMethod")]);
    m_tax_method_isSet = !json[QString("taxMethod")].isNull() && m_tax_method_isValid;
}

QString OAIIAssumptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIAssumptions::asJsonObject() const {
    QJsonObject obj;
    if (m_any_head_already_retired_isSet) {
        obj.insert(QString("anyHeadAlreadyRetired"), ::OpenAPI::toJsonValue(m_any_head_already_retired));
    }
    if (m_both_retired_isSet) {
        obj.insert(QString("bothRetired"), ::OpenAPI::toJsonValue(m_both_retired));
    }
    if (m_bucketing.isSet()) {
        obj.insert(QString("bucketing"), ::OpenAPI::toJsonValue(m_bucketing));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_co_client.isSet()) {
        obj.insert(QString("coClient"), ::OpenAPI::toJsonValue(m_co_client));
    }
    if (m_first_to_die_date.isSet()) {
        obj.insert(QString("firstToDieDate"), ::OpenAPI::toJsonValue(m_first_to_die_date));
    }
    if (m_first_to_die_member_isSet) {
        obj.insert(QString("firstToDieMember"), ::OpenAPI::toJsonValue(m_first_to_die_member));
    }
    if (m_first_to_retire_date.isSet()) {
        obj.insert(QString("firstToRetireDate"), ::OpenAPI::toJsonValue(m_first_to_retire_date));
    }
    if (m_inflation_rate.isSet()) {
        obj.insert(QString("inflationRate"), ::OpenAPI::toJsonValue(m_inflation_rate));
    }
    if (m_last_to_die_date.isSet()) {
        obj.insert(QString("lastToDieDate"), ::OpenAPI::toJsonValue(m_last_to_die_date));
    }
    if (m_last_to_die_member_isSet) {
        obj.insert(QString("lastToDieMember"), ::OpenAPI::toJsonValue(m_last_to_die_member));
    }
    if (m_last_to_retire_date.isSet()) {
        obj.insert(QString("lastToRetireDate"), ::OpenAPI::toJsonValue(m_last_to_retire_date));
    }
    if (m_retirement_year_adjusted_if_already_retired.isSet()) {
        obj.insert(QString("retirementYearAdjustedIfAlreadyRetired"), ::OpenAPI::toJsonValue(m_retirement_year_adjusted_if_already_retired));
    }
    if (m_split_surplus_savings_strategies_enabled_isSet) {
        obj.insert(QString("splitSurplusSavingsStrategiesEnabled"), ::OpenAPI::toJsonValue(m_split_surplus_savings_strategies_enabled));
    }
    if (m_tax_method_isSet) {
        obj.insert(QString("taxMethod"), ::OpenAPI::toJsonValue(m_tax_method));
    }
    return obj;
}

bool OAIIAssumptions::isAnyHeadAlreadyRetired() const {
    return m_any_head_already_retired;
}
void OAIIAssumptions::setAnyHeadAlreadyRetired(const bool &any_head_already_retired) {
    m_any_head_already_retired = any_head_already_retired;
    m_any_head_already_retired_isSet = true;
}

bool OAIIAssumptions::is_any_head_already_retired_Set() const{
    return m_any_head_already_retired_isSet;
}

bool OAIIAssumptions::is_any_head_already_retired_Valid() const{
    return m_any_head_already_retired_isValid;
}

bool OAIIAssumptions::isBothRetired() const {
    return m_both_retired;
}
void OAIIAssumptions::setBothRetired(const bool &both_retired) {
    m_both_retired = both_retired;
    m_both_retired_isSet = true;
}

bool OAIIAssumptions::is_both_retired_Set() const{
    return m_both_retired_isSet;
}

bool OAIIAssumptions::is_both_retired_Valid() const{
    return m_both_retired_isValid;
}

OAIIBucketing OAIIAssumptions::getBucketing() const {
    return m_bucketing;
}
void OAIIAssumptions::setBucketing(const OAIIBucketing &bucketing) {
    m_bucketing = bucketing;
    m_bucketing_isSet = true;
}

bool OAIIAssumptions::is_bucketing_Set() const{
    return m_bucketing_isSet;
}

bool OAIIAssumptions::is_bucketing_Valid() const{
    return m_bucketing_isValid;
}

OAIIHeadAssumptions OAIIAssumptions::getClient() const {
    return m_client;
}
void OAIIAssumptions::setClient(const OAIIHeadAssumptions &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIIAssumptions::is_client_Set() const{
    return m_client_isSet;
}

bool OAIIAssumptions::is_client_Valid() const{
    return m_client_isValid;
}

OAIIHeadAssumptions OAIIAssumptions::getCoClient() const {
    return m_co_client;
}
void OAIIAssumptions::setCoClient(const OAIIHeadAssumptions &co_client) {
    m_co_client = co_client;
    m_co_client_isSet = true;
}

bool OAIIAssumptions::is_co_client_Set() const{
    return m_co_client_isSet;
}

bool OAIIAssumptions::is_co_client_Valid() const{
    return m_co_client_isValid;
}

OAIDate OAIIAssumptions::getFirstToDieDate() const {
    return m_first_to_die_date;
}
void OAIIAssumptions::setFirstToDieDate(const OAIDate &first_to_die_date) {
    m_first_to_die_date = first_to_die_date;
    m_first_to_die_date_isSet = true;
}

bool OAIIAssumptions::is_first_to_die_date_Set() const{
    return m_first_to_die_date_isSet;
}

bool OAIIAssumptions::is_first_to_die_date_Valid() const{
    return m_first_to_die_date_isValid;
}

QString OAIIAssumptions::getFirstToDieMember() const {
    return m_first_to_die_member;
}
void OAIIAssumptions::setFirstToDieMember(const QString &first_to_die_member) {
    m_first_to_die_member = first_to_die_member;
    m_first_to_die_member_isSet = true;
}

bool OAIIAssumptions::is_first_to_die_member_Set() const{
    return m_first_to_die_member_isSet;
}

bool OAIIAssumptions::is_first_to_die_member_Valid() const{
    return m_first_to_die_member_isValid;
}

OAIDate OAIIAssumptions::getFirstToRetireDate() const {
    return m_first_to_retire_date;
}
void OAIIAssumptions::setFirstToRetireDate(const OAIDate &first_to_retire_date) {
    m_first_to_retire_date = first_to_retire_date;
    m_first_to_retire_date_isSet = true;
}

bool OAIIAssumptions::is_first_to_retire_date_Set() const{
    return m_first_to_retire_date_isSet;
}

bool OAIIAssumptions::is_first_to_retire_date_Valid() const{
    return m_first_to_retire_date_isValid;
}

OAIPercent OAIIAssumptions::getInflationRate() const {
    return m_inflation_rate;
}
void OAIIAssumptions::setInflationRate(const OAIPercent &inflation_rate) {
    m_inflation_rate = inflation_rate;
    m_inflation_rate_isSet = true;
}

bool OAIIAssumptions::is_inflation_rate_Set() const{
    return m_inflation_rate_isSet;
}

bool OAIIAssumptions::is_inflation_rate_Valid() const{
    return m_inflation_rate_isValid;
}

OAIDate OAIIAssumptions::getLastToDieDate() const {
    return m_last_to_die_date;
}
void OAIIAssumptions::setLastToDieDate(const OAIDate &last_to_die_date) {
    m_last_to_die_date = last_to_die_date;
    m_last_to_die_date_isSet = true;
}

bool OAIIAssumptions::is_last_to_die_date_Set() const{
    return m_last_to_die_date_isSet;
}

bool OAIIAssumptions::is_last_to_die_date_Valid() const{
    return m_last_to_die_date_isValid;
}

QString OAIIAssumptions::getLastToDieMember() const {
    return m_last_to_die_member;
}
void OAIIAssumptions::setLastToDieMember(const QString &last_to_die_member) {
    m_last_to_die_member = last_to_die_member;
    m_last_to_die_member_isSet = true;
}

bool OAIIAssumptions::is_last_to_die_member_Set() const{
    return m_last_to_die_member_isSet;
}

bool OAIIAssumptions::is_last_to_die_member_Valid() const{
    return m_last_to_die_member_isValid;
}

OAIDate OAIIAssumptions::getLastToRetireDate() const {
    return m_last_to_retire_date;
}
void OAIIAssumptions::setLastToRetireDate(const OAIDate &last_to_retire_date) {
    m_last_to_retire_date = last_to_retire_date;
    m_last_to_retire_date_isSet = true;
}

bool OAIIAssumptions::is_last_to_retire_date_Set() const{
    return m_last_to_retire_date_isSet;
}

bool OAIIAssumptions::is_last_to_retire_date_Valid() const{
    return m_last_to_retire_date_isValid;
}

OAIYear OAIIAssumptions::getRetirementYearAdjustedIfAlreadyRetired() const {
    return m_retirement_year_adjusted_if_already_retired;
}
void OAIIAssumptions::setRetirementYearAdjustedIfAlreadyRetired(const OAIYear &retirement_year_adjusted_if_already_retired) {
    m_retirement_year_adjusted_if_already_retired = retirement_year_adjusted_if_already_retired;
    m_retirement_year_adjusted_if_already_retired_isSet = true;
}

bool OAIIAssumptions::is_retirement_year_adjusted_if_already_retired_Set() const{
    return m_retirement_year_adjusted_if_already_retired_isSet;
}

bool OAIIAssumptions::is_retirement_year_adjusted_if_already_retired_Valid() const{
    return m_retirement_year_adjusted_if_already_retired_isValid;
}

bool OAIIAssumptions::isSplitSurplusSavingsStrategiesEnabled() const {
    return m_split_surplus_savings_strategies_enabled;
}
void OAIIAssumptions::setSplitSurplusSavingsStrategiesEnabled(const bool &split_surplus_savings_strategies_enabled) {
    m_split_surplus_savings_strategies_enabled = split_surplus_savings_strategies_enabled;
    m_split_surplus_savings_strategies_enabled_isSet = true;
}

bool OAIIAssumptions::is_split_surplus_savings_strategies_enabled_Set() const{
    return m_split_surplus_savings_strategies_enabled_isSet;
}

bool OAIIAssumptions::is_split_surplus_savings_strategies_enabled_Valid() const{
    return m_split_surplus_savings_strategies_enabled_isValid;
}

QString OAIIAssumptions::getTaxMethod() const {
    return m_tax_method;
}
void OAIIAssumptions::setTaxMethod(const QString &tax_method) {
    m_tax_method = tax_method;
    m_tax_method_isSet = true;
}

bool OAIIAssumptions::is_tax_method_Set() const{
    return m_tax_method_isSet;
}

bool OAIIAssumptions::is_tax_method_Valid() const{
    return m_tax_method_isValid;
}

bool OAIIAssumptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_any_head_already_retired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_both_retired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucketing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_to_die_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_to_die_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_to_retire_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inflation_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_to_die_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_to_die_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_to_retire_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_year_adjusted_if_already_retired.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_surplus_savings_strategies_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIAssumptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
