/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIBusinessEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIBusinessEntity::OAIIBusinessEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIBusinessEntity::OAIIBusinessEntity() {
    this->initializeModel();
}

OAIIBusinessEntity::~OAIIBusinessEntity() {}

void OAIIBusinessEntity::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_business_type_isSet = false;
    m_business_type_isValid = false;

    m_business_type_formatted_isSet = false;
    m_business_type_formatted_isValid = false;

    m_current_annual_distributions_isSet = false;
    m_current_annual_distributions_isValid = false;

    m_current_annual_dividends_isSet = false;
    m_current_annual_dividends_isValid = false;

    m_current_annual_growth_rate_isSet = false;
    m_current_annual_growth_rate_isValid = false;

    m_current_annual_net_income_isSet = false;
    m_current_annual_net_income_isValid = false;

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_liquidation_event_isSet = false;
    m_liquidation_event_isValid = false;

    m_market_valuation_date_isSet = false;
    m_market_valuation_date_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_purchase_amount_isSet = false;
    m_purchase_amount_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;
}

void OAIIBusinessEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIBusinessEntity::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_business_type_isValid = ::OpenAPI::fromJsonValue(m_business_type, json[QString("businessType")]);
    m_business_type_isSet = !json[QString("businessType")].isNull() && m_business_type_isValid;

    m_business_type_formatted_isValid = ::OpenAPI::fromJsonValue(m_business_type_formatted, json[QString("businessTypeFormatted")]);
    m_business_type_formatted_isSet = !json[QString("businessTypeFormatted")].isNull() && m_business_type_formatted_isValid;

    m_current_annual_distributions_isValid = ::OpenAPI::fromJsonValue(m_current_annual_distributions, json[QString("currentAnnualDistributions")]);
    m_current_annual_distributions_isSet = !json[QString("currentAnnualDistributions")].isNull() && m_current_annual_distributions_isValid;

    m_current_annual_dividends_isValid = ::OpenAPI::fromJsonValue(m_current_annual_dividends, json[QString("currentAnnualDividends")]);
    m_current_annual_dividends_isSet = !json[QString("currentAnnualDividends")].isNull() && m_current_annual_dividends_isValid;

    m_current_annual_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_current_annual_growth_rate, json[QString("currentAnnualGrowthRate")]);
    m_current_annual_growth_rate_isSet = !json[QString("currentAnnualGrowthRate")].isNull() && m_current_annual_growth_rate_isValid;

    m_current_annual_net_income_isValid = ::OpenAPI::fromJsonValue(m_current_annual_net_income, json[QString("currentAnnualNetIncome")]);
    m_current_annual_net_income_isSet = !json[QString("currentAnnualNetIncome")].isNull() && m_current_annual_net_income_isValid;

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("entityName")]);
    m_entity_name_isSet = !json[QString("entityName")].isNull() && m_entity_name_isValid;

    m_liquidation_event_isValid = ::OpenAPI::fromJsonValue(m_liquidation_event, json[QString("liquidationEvent")]);
    m_liquidation_event_isSet = !json[QString("liquidationEvent")].isNull() && m_liquidation_event_isValid;

    m_market_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_market_valuation_date, json[QString("marketValuationDate")]);
    m_market_valuation_date_isSet = !json[QString("marketValuationDate")].isNull() && m_market_valuation_date_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("marketValue")]);
    m_market_value_isSet = !json[QString("marketValue")].isNull() && m_market_value_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_purchase_amount_isValid = ::OpenAPI::fromJsonValue(m_purchase_amount, json[QString("purchaseAmount")]);
    m_purchase_amount_isSet = !json[QString("purchaseAmount")].isNull() && m_purchase_amount_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;
}

QString OAIIBusinessEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIBusinessEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_asset_id.isSet()) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_business_type_isSet) {
        obj.insert(QString("businessType"), ::OpenAPI::toJsonValue(m_business_type));
    }
    if (m_business_type_formatted_isSet) {
        obj.insert(QString("businessTypeFormatted"), ::OpenAPI::toJsonValue(m_business_type_formatted));
    }
    if (m_current_annual_distributions.isSet()) {
        obj.insert(QString("currentAnnualDistributions"), ::OpenAPI::toJsonValue(m_current_annual_distributions));
    }
    if (m_current_annual_dividends.isSet()) {
        obj.insert(QString("currentAnnualDividends"), ::OpenAPI::toJsonValue(m_current_annual_dividends));
    }
    if (m_current_annual_growth_rate.isSet()) {
        obj.insert(QString("currentAnnualGrowthRate"), ::OpenAPI::toJsonValue(m_current_annual_growth_rate));
    }
    if (m_current_annual_net_income.isSet()) {
        obj.insert(QString("currentAnnualNetIncome"), ::OpenAPI::toJsonValue(m_current_annual_net_income));
    }
    if (m_entity_name_isSet) {
        obj.insert(QString("entityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_liquidation_event.isSet()) {
        obj.insert(QString("liquidationEvent"), ::OpenAPI::toJsonValue(m_liquidation_event));
    }
    if (m_market_valuation_date.isSet()) {
        obj.insert(QString("marketValuationDate"), ::OpenAPI::toJsonValue(m_market_valuation_date));
    }
    if (m_market_value.isSet()) {
        obj.insert(QString("marketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_purchase_amount.isSet()) {
        obj.insert(QString("purchaseAmount"), ::OpenAPI::toJsonValue(m_purchase_amount));
    }
    if (m_purchase_date.isSet()) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_standard_deviation.isSet()) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    return obj;
}

QList<OAIIBusinessEntityActivity> OAIIBusinessEntity::getActivities() const {
    return m_activities;
}
void OAIIBusinessEntity::setActivities(const QList<OAIIBusinessEntityActivity> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIIBusinessEntity::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIIBusinessEntity::is_activities_Valid() const{
    return m_activities_isValid;
}

OAIIAssetId OAIIBusinessEntity::getAssetId() const {
    return m_asset_id;
}
void OAIIBusinessEntity::setAssetId(const OAIIAssetId &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIIBusinessEntity::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIIBusinessEntity::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIIBusinessEntity::getBusinessType() const {
    return m_business_type;
}
void OAIIBusinessEntity::setBusinessType(const QString &business_type) {
    m_business_type = business_type;
    m_business_type_isSet = true;
}

bool OAIIBusinessEntity::is_business_type_Set() const{
    return m_business_type_isSet;
}

bool OAIIBusinessEntity::is_business_type_Valid() const{
    return m_business_type_isValid;
}

QString OAIIBusinessEntity::getBusinessTypeFormatted() const {
    return m_business_type_formatted;
}
void OAIIBusinessEntity::setBusinessTypeFormatted(const QString &business_type_formatted) {
    m_business_type_formatted = business_type_formatted;
    m_business_type_formatted_isSet = true;
}

bool OAIIBusinessEntity::is_business_type_formatted_Set() const{
    return m_business_type_formatted_isSet;
}

bool OAIIBusinessEntity::is_business_type_formatted_Valid() const{
    return m_business_type_formatted_isValid;
}

OAICurrency OAIIBusinessEntity::getCurrentAnnualDistributions() const {
    return m_current_annual_distributions;
}
void OAIIBusinessEntity::setCurrentAnnualDistributions(const OAICurrency &current_annual_distributions) {
    m_current_annual_distributions = current_annual_distributions;
    m_current_annual_distributions_isSet = true;
}

bool OAIIBusinessEntity::is_current_annual_distributions_Set() const{
    return m_current_annual_distributions_isSet;
}

bool OAIIBusinessEntity::is_current_annual_distributions_Valid() const{
    return m_current_annual_distributions_isValid;
}

OAICurrency OAIIBusinessEntity::getCurrentAnnualDividends() const {
    return m_current_annual_dividends;
}
void OAIIBusinessEntity::setCurrentAnnualDividends(const OAICurrency &current_annual_dividends) {
    m_current_annual_dividends = current_annual_dividends;
    m_current_annual_dividends_isSet = true;
}

bool OAIIBusinessEntity::is_current_annual_dividends_Set() const{
    return m_current_annual_dividends_isSet;
}

bool OAIIBusinessEntity::is_current_annual_dividends_Valid() const{
    return m_current_annual_dividends_isValid;
}

OAIPercent OAIIBusinessEntity::getCurrentAnnualGrowthRate() const {
    return m_current_annual_growth_rate;
}
void OAIIBusinessEntity::setCurrentAnnualGrowthRate(const OAIPercent &current_annual_growth_rate) {
    m_current_annual_growth_rate = current_annual_growth_rate;
    m_current_annual_growth_rate_isSet = true;
}

bool OAIIBusinessEntity::is_current_annual_growth_rate_Set() const{
    return m_current_annual_growth_rate_isSet;
}

bool OAIIBusinessEntity::is_current_annual_growth_rate_Valid() const{
    return m_current_annual_growth_rate_isValid;
}

OAICurrency OAIIBusinessEntity::getCurrentAnnualNetIncome() const {
    return m_current_annual_net_income;
}
void OAIIBusinessEntity::setCurrentAnnualNetIncome(const OAICurrency &current_annual_net_income) {
    m_current_annual_net_income = current_annual_net_income;
    m_current_annual_net_income_isSet = true;
}

bool OAIIBusinessEntity::is_current_annual_net_income_Set() const{
    return m_current_annual_net_income_isSet;
}

bool OAIIBusinessEntity::is_current_annual_net_income_Valid() const{
    return m_current_annual_net_income_isValid;
}

QString OAIIBusinessEntity::getEntityName() const {
    return m_entity_name;
}
void OAIIBusinessEntity::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAIIBusinessEntity::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAIIBusinessEntity::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

OAIILiquidationEvent OAIIBusinessEntity::getLiquidationEvent() const {
    return m_liquidation_event;
}
void OAIIBusinessEntity::setLiquidationEvent(const OAIILiquidationEvent &liquidation_event) {
    m_liquidation_event = liquidation_event;
    m_liquidation_event_isSet = true;
}

bool OAIIBusinessEntity::is_liquidation_event_Set() const{
    return m_liquidation_event_isSet;
}

bool OAIIBusinessEntity::is_liquidation_event_Valid() const{
    return m_liquidation_event_isValid;
}

OAIDate OAIIBusinessEntity::getMarketValuationDate() const {
    return m_market_valuation_date;
}
void OAIIBusinessEntity::setMarketValuationDate(const OAIDate &market_valuation_date) {
    m_market_valuation_date = market_valuation_date;
    m_market_valuation_date_isSet = true;
}

bool OAIIBusinessEntity::is_market_valuation_date_Set() const{
    return m_market_valuation_date_isSet;
}

bool OAIIBusinessEntity::is_market_valuation_date_Valid() const{
    return m_market_valuation_date_isValid;
}

OAICurrency OAIIBusinessEntity::getMarketValue() const {
    return m_market_value;
}
void OAIIBusinessEntity::setMarketValue(const OAICurrency &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIIBusinessEntity::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIIBusinessEntity::is_market_value_Valid() const{
    return m_market_value_isValid;
}

QString OAIIBusinessEntity::getOwner() const {
    return m_owner;
}
void OAIIBusinessEntity::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIBusinessEntity::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIBusinessEntity::is_owner_Valid() const{
    return m_owner_isValid;
}

OAICurrency OAIIBusinessEntity::getPurchaseAmount() const {
    return m_purchase_amount;
}
void OAIIBusinessEntity::setPurchaseAmount(const OAICurrency &purchase_amount) {
    m_purchase_amount = purchase_amount;
    m_purchase_amount_isSet = true;
}

bool OAIIBusinessEntity::is_purchase_amount_Set() const{
    return m_purchase_amount_isSet;
}

bool OAIIBusinessEntity::is_purchase_amount_Valid() const{
    return m_purchase_amount_isValid;
}

OAIDate OAIIBusinessEntity::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIIBusinessEntity::setPurchaseDate(const OAIDate &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIIBusinessEntity::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIIBusinessEntity::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

OAIPercent OAIIBusinessEntity::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIIBusinessEntity::setStandardDeviation(const OAIPercent &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIIBusinessEntity::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIIBusinessEntity::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

bool OAIIBusinessEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_type_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_annual_distributions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_annual_dividends.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_annual_growth_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_annual_net_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_valuation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIBusinessEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
