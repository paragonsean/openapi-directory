/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescriptiveBoolean.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescriptiveBoolean::OAIDescriptiveBoolean(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescriptiveBoolean::OAIDescriptiveBoolean() {
    this->initializeModel();
}

OAIDescriptiveBoolean::~OAIDescriptiveBoolean() {}

void OAIDescriptiveBoolean::initializeModel() {

    m_raw_value_isSet = false;
    m_raw_value_isValid = false;

    m_value_as_yes_no_isSet = false;
    m_value_as_yes_no_isValid = false;
}

void OAIDescriptiveBoolean::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescriptiveBoolean::fromJsonObject(QJsonObject json) {

    m_raw_value_isValid = ::OpenAPI::fromJsonValue(m_raw_value, json[QString("rawValue")]);
    m_raw_value_isSet = !json[QString("rawValue")].isNull() && m_raw_value_isValid;

    m_value_as_yes_no_isValid = ::OpenAPI::fromJsonValue(m_value_as_yes_no, json[QString("valueAsYesNo")]);
    m_value_as_yes_no_isSet = !json[QString("valueAsYesNo")].isNull() && m_value_as_yes_no_isValid;
}

QString OAIDescriptiveBoolean::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescriptiveBoolean::asJsonObject() const {
    QJsonObject obj;
    if (m_raw_value_isSet) {
        obj.insert(QString("rawValue"), ::OpenAPI::toJsonValue(m_raw_value));
    }
    if (m_value_as_yes_no_isSet) {
        obj.insert(QString("valueAsYesNo"), ::OpenAPI::toJsonValue(m_value_as_yes_no));
    }
    return obj;
}

bool OAIDescriptiveBoolean::isRawValue() const {
    return m_raw_value;
}
void OAIDescriptiveBoolean::setRawValue(const bool &raw_value) {
    m_raw_value = raw_value;
    m_raw_value_isSet = true;
}

bool OAIDescriptiveBoolean::is_raw_value_Set() const{
    return m_raw_value_isSet;
}

bool OAIDescriptiveBoolean::is_raw_value_Valid() const{
    return m_raw_value_isValid;
}

QString OAIDescriptiveBoolean::getValueAsYesNo() const {
    return m_value_as_yes_no;
}
void OAIDescriptiveBoolean::setValueAsYesNo(const QString &value_as_yes_no) {
    m_value_as_yes_no = value_as_yes_no;
    m_value_as_yes_no_isSet = true;
}

bool OAIDescriptiveBoolean::is_value_as_yes_no_Set() const{
    return m_value_as_yes_no_isSet;
}

bool OAIDescriptiveBoolean::is_value_as_yes_no_Valid() const{
    return m_value_as_yes_no_isValid;
}

bool OAIDescriptiveBoolean::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_raw_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_yes_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescriptiveBoolean::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
