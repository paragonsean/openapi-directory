/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetsFundingGoalSummary.h
 *
 * 
 */

#ifndef OAIAssetsFundingGoalSummary_H
#define OAIAssetsFundingGoalSummary_H

#include <QJsonObject>

#include "OAIIAccumulationCategoryData.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIAccumulationCategoryData;

class OAIAssetsFundingGoalSummary : public OAIObject {
public:
    OAIAssetsFundingGoalSummary();
    OAIAssetsFundingGoalSummary(QString json);
    ~OAIAssetsFundingGoalSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIAccumulationCategoryData getContributions() const;
    void setContributions(const OAIIAccumulationCategoryData &contributions);
    bool is_contributions_Set() const;
    bool is_contributions_Valid() const;

    OAIIAccumulationCategoryData getEndOfYearAssets() const;
    void setEndOfYearAssets(const OAIIAccumulationCategoryData &end_of_year_assets);
    bool is_end_of_year_assets_Set() const;
    bool is_end_of_year_assets_Valid() const;

    QString getGoalType() const;
    void setGoalType(const QString &goal_type);
    bool is_goal_type_Set() const;
    bool is_goal_type_Valid() const;

    OAIIAccumulationCategoryData getGrowthAndReinvestments() const;
    void setGrowthAndReinvestments(const OAIIAccumulationCategoryData &growth_and_reinvestments);
    bool is_growth_and_reinvestments_Set() const;
    bool is_growth_and_reinvestments_Valid() const;

    qint32 getIdentifier() const;
    void setIdentifier(const qint32 &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    double getNetWithdrawals() const;
    void setNetWithdrawals(const double &net_withdrawals);
    bool is_net_withdrawals_Set() const;
    bool is_net_withdrawals_Valid() const;

    OAIIAccumulationCategoryData getWithdrawals() const;
    void setWithdrawals(const OAIIAccumulationCategoryData &withdrawals);
    bool is_withdrawals_Set() const;
    bool is_withdrawals_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIAccumulationCategoryData m_contributions;
    bool m_contributions_isSet;
    bool m_contributions_isValid;

    OAIIAccumulationCategoryData m_end_of_year_assets;
    bool m_end_of_year_assets_isSet;
    bool m_end_of_year_assets_isValid;

    QString m_goal_type;
    bool m_goal_type_isSet;
    bool m_goal_type_isValid;

    OAIIAccumulationCategoryData m_growth_and_reinvestments;
    bool m_growth_and_reinvestments_isSet;
    bool m_growth_and_reinvestments_isValid;

    qint32 m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    double m_net_withdrawals;
    bool m_net_withdrawals_isSet;
    bool m_net_withdrawals_isValid;

    OAIIAccumulationCategoryData m_withdrawals;
    bool m_withdrawals_isSet;
    bool m_withdrawals_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetsFundingGoalSummary)

#endif // OAIAssetsFundingGoalSummary_H
