/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIHolding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIHolding::OAIIHolding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIHolding::OAIIHolding() {
    this->initializeModel();
}

OAIIHolding::~OAIIHolding() {}

void OAIIHolding::initializeModel() {

    m_asset_mix_isSet = false;
    m_asset_mix_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hold_amount_isSet = false;
    m_hold_amount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_classified_isSet = false;
    m_is_classified_isValid = false;

    m_pre_retirement_return_rates_isSet = false;
    m_pre_retirement_return_rates_isValid = false;

    m_retirement_return_rates_isSet = false;
    m_retirement_return_rates_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_valuation_isSet = false;
    m_valuation_isValid = false;
}

void OAIIHolding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIHolding::fromJsonObject(QJsonObject json) {

    m_asset_mix_isValid = ::OpenAPI::fromJsonValue(m_asset_mix, json[QString("assetMix")]);
    m_asset_mix_isSet = !json[QString("assetMix")].isNull() && m_asset_mix_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hold_amount_isValid = ::OpenAPI::fromJsonValue(m_hold_amount, json[QString("holdAmount")]);
    m_hold_amount_isSet = !json[QString("holdAmount")].isNull() && m_hold_amount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_classified_isValid = ::OpenAPI::fromJsonValue(m_is_classified, json[QString("isClassified")]);
    m_is_classified_isSet = !json[QString("isClassified")].isNull() && m_is_classified_isValid;

    m_pre_retirement_return_rates_isValid = ::OpenAPI::fromJsonValue(m_pre_retirement_return_rates, json[QString("preRetirementReturnRates")]);
    m_pre_retirement_return_rates_isSet = !json[QString("preRetirementReturnRates")].isNull() && m_pre_retirement_return_rates_isValid;

    m_retirement_return_rates_isValid = ::OpenAPI::fromJsonValue(m_retirement_return_rates, json[QString("retirementReturnRates")]);
    m_retirement_return_rates_isSet = !json[QString("retirementReturnRates")].isNull() && m_retirement_return_rates_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_valuation_isValid = ::OpenAPI::fromJsonValue(m_valuation, json[QString("valuation")]);
    m_valuation_isSet = !json[QString("valuation")].isNull() && m_valuation_isValid;
}

QString OAIIHolding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIHolding::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_mix.isSet()) {
        obj.insert(QString("assetMix"), ::OpenAPI::toJsonValue(m_asset_mix));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hold_amount.isSet()) {
        obj.insert(QString("holdAmount"), ::OpenAPI::toJsonValue(m_hold_amount));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_classified_isSet) {
        obj.insert(QString("isClassified"), ::OpenAPI::toJsonValue(m_is_classified));
    }
    if (m_pre_retirement_return_rates.isSet()) {
        obj.insert(QString("preRetirementReturnRates"), ::OpenAPI::toJsonValue(m_pre_retirement_return_rates));
    }
    if (m_retirement_return_rates.isSet()) {
        obj.insert(QString("retirementReturnRates"), ::OpenAPI::toJsonValue(m_retirement_return_rates));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_valuation.isSet()) {
        obj.insert(QString("valuation"), ::OpenAPI::toJsonValue(m_valuation));
    }
    return obj;
}

OAIIAssetMix OAIIHolding::getAssetMix() const {
    return m_asset_mix;
}
void OAIIHolding::setAssetMix(const OAIIAssetMix &asset_mix) {
    m_asset_mix = asset_mix;
    m_asset_mix_isSet = true;
}

bool OAIIHolding::is_asset_mix_Set() const{
    return m_asset_mix_isSet;
}

bool OAIIHolding::is_asset_mix_Valid() const{
    return m_asset_mix_isValid;
}

QString OAIIHolding::getDescription() const {
    return m_description;
}
void OAIIHolding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIHolding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIHolding::is_description_Valid() const{
    return m_description_isValid;
}

OAIPercentOr_Currency OAIIHolding::getHoldAmount() const {
    return m_hold_amount;
}
void OAIIHolding::setHoldAmount(const OAIPercentOr_Currency &hold_amount) {
    m_hold_amount = hold_amount;
    m_hold_amount_isSet = true;
}

bool OAIIHolding::is_hold_amount_Set() const{
    return m_hold_amount_isSet;
}

bool OAIIHolding::is_hold_amount_Valid() const{
    return m_hold_amount_isValid;
}

QString OAIIHolding::getId() const {
    return m_id;
}
void OAIIHolding::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIHolding::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIHolding::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIIHolding::isIsClassified() const {
    return m_is_classified;
}
void OAIIHolding::setIsClassified(const bool &is_classified) {
    m_is_classified = is_classified;
    m_is_classified_isSet = true;
}

bool OAIIHolding::is_is_classified_Set() const{
    return m_is_classified_isSet;
}

bool OAIIHolding::is_is_classified_Valid() const{
    return m_is_classified_isValid;
}

OAIIPeriodRateOfReturnDetails OAIIHolding::getPreRetirementReturnRates() const {
    return m_pre_retirement_return_rates;
}
void OAIIHolding::setPreRetirementReturnRates(const OAIIPeriodRateOfReturnDetails &pre_retirement_return_rates) {
    m_pre_retirement_return_rates = pre_retirement_return_rates;
    m_pre_retirement_return_rates_isSet = true;
}

bool OAIIHolding::is_pre_retirement_return_rates_Set() const{
    return m_pre_retirement_return_rates_isSet;
}

bool OAIIHolding::is_pre_retirement_return_rates_Valid() const{
    return m_pre_retirement_return_rates_isValid;
}

OAIIPeriodRateOfReturnDetails OAIIHolding::getRetirementReturnRates() const {
    return m_retirement_return_rates;
}
void OAIIHolding::setRetirementReturnRates(const OAIIPeriodRateOfReturnDetails &retirement_return_rates) {
    m_retirement_return_rates = retirement_return_rates;
    m_retirement_return_rates_isSet = true;
}

bool OAIIHolding::is_retirement_return_rates_Set() const{
    return m_retirement_return_rates_isSet;
}

bool OAIIHolding::is_retirement_return_rates_Valid() const{
    return m_retirement_return_rates_isValid;
}

QString OAIIHolding::getSymbol() const {
    return m_symbol;
}
void OAIIHolding::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIIHolding::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIIHolding::is_symbol_Valid() const{
    return m_symbol_isValid;
}

OAIIAssetValuation OAIIHolding::getValuation() const {
    return m_valuation;
}
void OAIIHolding::setValuation(const OAIIAssetValuation &valuation) {
    m_valuation = valuation;
    m_valuation_isSet = true;
}

bool OAIIHolding::is_valuation_Set() const{
    return m_valuation_isSet;
}

bool OAIIHolding::is_valuation_Valid() const{
    return m_valuation_isValid;
}

bool OAIIHolding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_mix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_retirement_return_rates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_return_rates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIHolding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
