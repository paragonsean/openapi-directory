/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEstateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEstateDetails::OAIIEstateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEstateDetails::OAIIEstateDetails() {
    this->initializeModel();
}

OAIIEstateDetails::~OAIIEstateDetails() {}

void OAIIEstateDetails::initializeModel() {

    m_enable_fifty_percent_solution_isSet = false;
    m_enable_fifty_percent_solution_isValid = false;

    m_estate_freeze_isSet = false;
    m_estate_freeze_isValid = false;

    m_estate_freeze_date_isSet = false;
    m_estate_freeze_date_isValid = false;

    m_share_options_at_first_death_isSet = false;
    m_share_options_at_first_death_isValid = false;

    m_share_options_at_second_death_and_death_in_the_same_year_isSet = false;
    m_share_options_at_second_death_and_death_in_the_same_year_isValid = false;
}

void OAIIEstateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEstateDetails::fromJsonObject(QJsonObject json) {

    m_enable_fifty_percent_solution_isValid = ::OpenAPI::fromJsonValue(m_enable_fifty_percent_solution, json[QString("enableFiftyPercentSolution")]);
    m_enable_fifty_percent_solution_isSet = !json[QString("enableFiftyPercentSolution")].isNull() && m_enable_fifty_percent_solution_isValid;

    m_estate_freeze_isValid = ::OpenAPI::fromJsonValue(m_estate_freeze, json[QString("estateFreeze")]);
    m_estate_freeze_isSet = !json[QString("estateFreeze")].isNull() && m_estate_freeze_isValid;

    m_estate_freeze_date_isValid = ::OpenAPI::fromJsonValue(m_estate_freeze_date, json[QString("estateFreezeDate")]);
    m_estate_freeze_date_isSet = !json[QString("estateFreezeDate")].isNull() && m_estate_freeze_date_isValid;

    m_share_options_at_first_death_isValid = ::OpenAPI::fromJsonValue(m_share_options_at_first_death, json[QString("shareOptionsAtFirstDeath")]);
    m_share_options_at_first_death_isSet = !json[QString("shareOptionsAtFirstDeath")].isNull() && m_share_options_at_first_death_isValid;

    m_share_options_at_second_death_and_death_in_the_same_year_isValid = ::OpenAPI::fromJsonValue(m_share_options_at_second_death_and_death_in_the_same_year, json[QString("shareOptionsAtSecondDeathAndDeathInTheSameYear")]);
    m_share_options_at_second_death_and_death_in_the_same_year_isSet = !json[QString("shareOptionsAtSecondDeathAndDeathInTheSameYear")].isNull() && m_share_options_at_second_death_and_death_in_the_same_year_isValid;
}

QString OAIIEstateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEstateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_fifty_percent_solution.isSet()) {
        obj.insert(QString("enableFiftyPercentSolution"), ::OpenAPI::toJsonValue(m_enable_fifty_percent_solution));
    }
    if (m_estate_freeze.isSet()) {
        obj.insert(QString("estateFreeze"), ::OpenAPI::toJsonValue(m_estate_freeze));
    }
    if (m_estate_freeze_date.isSet()) {
        obj.insert(QString("estateFreezeDate"), ::OpenAPI::toJsonValue(m_estate_freeze_date));
    }
    if (m_share_options_at_first_death_isSet) {
        obj.insert(QString("shareOptionsAtFirstDeath"), ::OpenAPI::toJsonValue(m_share_options_at_first_death));
    }
    if (m_share_options_at_second_death_and_death_in_the_same_year_isSet) {
        obj.insert(QString("shareOptionsAtSecondDeathAndDeathInTheSameYear"), ::OpenAPI::toJsonValue(m_share_options_at_second_death_and_death_in_the_same_year));
    }
    return obj;
}

OAIDescriptiveBoolean OAIIEstateDetails::getEnableFiftyPercentSolution() const {
    return m_enable_fifty_percent_solution;
}
void OAIIEstateDetails::setEnableFiftyPercentSolution(const OAIDescriptiveBoolean &enable_fifty_percent_solution) {
    m_enable_fifty_percent_solution = enable_fifty_percent_solution;
    m_enable_fifty_percent_solution_isSet = true;
}

bool OAIIEstateDetails::is_enable_fifty_percent_solution_Set() const{
    return m_enable_fifty_percent_solution_isSet;
}

bool OAIIEstateDetails::is_enable_fifty_percent_solution_Valid() const{
    return m_enable_fifty_percent_solution_isValid;
}

OAIDescriptiveBoolean OAIIEstateDetails::getEstateFreeze() const {
    return m_estate_freeze;
}
void OAIIEstateDetails::setEstateFreeze(const OAIDescriptiveBoolean &estate_freeze) {
    m_estate_freeze = estate_freeze;
    m_estate_freeze_isSet = true;
}

bool OAIIEstateDetails::is_estate_freeze_Set() const{
    return m_estate_freeze_isSet;
}

bool OAIIEstateDetails::is_estate_freeze_Valid() const{
    return m_estate_freeze_isValid;
}

OAIDate OAIIEstateDetails::getEstateFreezeDate() const {
    return m_estate_freeze_date;
}
void OAIIEstateDetails::setEstateFreezeDate(const OAIDate &estate_freeze_date) {
    m_estate_freeze_date = estate_freeze_date;
    m_estate_freeze_date_isSet = true;
}

bool OAIIEstateDetails::is_estate_freeze_date_Set() const{
    return m_estate_freeze_date_isSet;
}

bool OAIIEstateDetails::is_estate_freeze_date_Valid() const{
    return m_estate_freeze_date_isValid;
}

QString OAIIEstateDetails::getShareOptionsAtFirstDeath() const {
    return m_share_options_at_first_death;
}
void OAIIEstateDetails::setShareOptionsAtFirstDeath(const QString &share_options_at_first_death) {
    m_share_options_at_first_death = share_options_at_first_death;
    m_share_options_at_first_death_isSet = true;
}

bool OAIIEstateDetails::is_share_options_at_first_death_Set() const{
    return m_share_options_at_first_death_isSet;
}

bool OAIIEstateDetails::is_share_options_at_first_death_Valid() const{
    return m_share_options_at_first_death_isValid;
}

QString OAIIEstateDetails::getShareOptionsAtSecondDeathAndDeathInTheSameYear() const {
    return m_share_options_at_second_death_and_death_in_the_same_year;
}
void OAIIEstateDetails::setShareOptionsAtSecondDeathAndDeathInTheSameYear(const QString &share_options_at_second_death_and_death_in_the_same_year) {
    m_share_options_at_second_death_and_death_in_the_same_year = share_options_at_second_death_and_death_in_the_same_year;
    m_share_options_at_second_death_and_death_in_the_same_year_isSet = true;
}

bool OAIIEstateDetails::is_share_options_at_second_death_and_death_in_the_same_year_Set() const{
    return m_share_options_at_second_death_and_death_in_the_same_year_isSet;
}

bool OAIIEstateDetails::is_share_options_at_second_death_and_death_in_the_same_year_Valid() const{
    return m_share_options_at_second_death_and_death_in_the_same_year_isValid;
}

bool OAIIEstateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_fifty_percent_solution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_freeze.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_freeze_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_options_at_first_death_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_options_at_second_death_and_death_in_the_same_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEstateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
