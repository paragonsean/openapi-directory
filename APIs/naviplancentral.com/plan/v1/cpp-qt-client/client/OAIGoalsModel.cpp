/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalsModel::OAIGoalsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalsModel::OAIGoalsModel() {
    this->initializeModel();
}

OAIGoalsModel::~OAIGoalsModel() {}

void OAIGoalsModel::initializeModel() {

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAIGoalsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalsModel::fromJsonObject(QJsonObject json) {

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("goals")]);
    m_goals_isSet = !json[QString("goals")].isNull() && m_goals_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAIGoalsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_goals.size() > 0) {
        obj.insert(QString("goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

QList<OAIIGoal> OAIGoalsModel::getGoals() const {
    return m_goals;
}
void OAIGoalsModel::setGoals(const QList<OAIIGoal> &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIGoalsModel::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIGoalsModel::is_goals_Valid() const{
    return m_goals_isValid;
}

QList<OAIObjectLink> OAIGoalsModel::getLinks() const {
    return m_links;
}
void OAIGoalsModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGoalsModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGoalsModel::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIGoalsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
