/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIGoal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIGoal::OAIIGoal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIGoal::OAIIGoal() {
    this->initializeModel();
}

OAIIGoal::~OAIIGoal() {}

void OAIIGoal::initializeModel() {

    m_assets_remaining_after_funding_goal_isSet = false;
    m_assets_remaining_after_funding_goal_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_year_assets_depleted_isSet = false;
    m_year_assets_depleted_isValid = false;
}

void OAIIGoal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIGoal::fromJsonObject(QJsonObject json) {

    m_assets_remaining_after_funding_goal_isValid = ::OpenAPI::fromJsonValue(m_assets_remaining_after_funding_goal, json[QString("assetsRemainingAfterFundingGoal")]);
    m_assets_remaining_after_funding_goal_isSet = !json[QString("assetsRemainingAfterFundingGoal")].isNull() && m_assets_remaining_after_funding_goal_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("coverage")]);
    m_coverage_isSet = !json[QString("coverage")].isNull() && m_coverage_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_year_assets_depleted_isValid = ::OpenAPI::fromJsonValue(m_year_assets_depleted, json[QString("yearAssetsDepleted")]);
    m_year_assets_depleted_isSet = !json[QString("yearAssetsDepleted")].isNull() && m_year_assets_depleted_isValid;
}

QString OAIIGoal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIGoal::asJsonObject() const {
    QJsonObject obj;
    if (m_assets_remaining_after_funding_goal.isSet()) {
        obj.insert(QString("assetsRemainingAfterFundingGoal"), ::OpenAPI::toJsonValue(m_assets_remaining_after_funding_goal));
    }
    if (m_coverage.isSet()) {
        obj.insert(QString("coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_identifier.isSet()) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_year_assets_depleted.isSet()) {
        obj.insert(QString("yearAssetsDepleted"), ::OpenAPI::toJsonValue(m_year_assets_depleted));
    }
    return obj;
}

OAIIOptionalField_Currency OAIIGoal::getAssetsRemainingAfterFundingGoal() const {
    return m_assets_remaining_after_funding_goal;
}
void OAIIGoal::setAssetsRemainingAfterFundingGoal(const OAIIOptionalField_Currency &assets_remaining_after_funding_goal) {
    m_assets_remaining_after_funding_goal = assets_remaining_after_funding_goal;
    m_assets_remaining_after_funding_goal_isSet = true;
}

bool OAIIGoal::is_assets_remaining_after_funding_goal_Set() const{
    return m_assets_remaining_after_funding_goal_isSet;
}

bool OAIIGoal::is_assets_remaining_after_funding_goal_Valid() const{
    return m_assets_remaining_after_funding_goal_isValid;
}

OAIIOptionalField_GoalCoveragePercent OAIIGoal::getCoverage() const {
    return m_coverage;
}
void OAIIGoal::setCoverage(const OAIIOptionalField_GoalCoveragePercent &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIIGoal::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIIGoal::is_coverage_Valid() const{
    return m_coverage_isValid;
}

QString OAIIGoal::getDescription() const {
    return m_description;
}
void OAIIGoal::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIGoal::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIGoal::is_description_Valid() const{
    return m_description_isValid;
}

OAIDate OAIIGoal::getEndDate() const {
    return m_end_date;
}
void OAIIGoal::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIIGoal::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIIGoal::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIGoalId OAIIGoal::getIdentifier() const {
    return m_identifier;
}
void OAIIGoal::setIdentifier(const OAIGoalId &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIIGoal::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIIGoal::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIDate OAIIGoal::getStartDate() const {
    return m_start_date;
}
void OAIIGoal::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIGoal::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIGoal::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIIGoal::getType() const {
    return m_type;
}
void OAIIGoal::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIGoal::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIGoal::is_type_Valid() const{
    return m_type_isValid;
}

OAIIOptionalField_Year OAIIGoal::getYearAssetsDepleted() const {
    return m_year_assets_depleted;
}
void OAIIGoal::setYearAssetsDepleted(const OAIIOptionalField_Year &year_assets_depleted) {
    m_year_assets_depleted = year_assets_depleted;
    m_year_assets_depleted_isSet = true;
}

bool OAIIGoal::is_year_assets_depleted_Set() const{
    return m_year_assets_depleted_isSet;
}

bool OAIIGoal::is_year_assets_depleted_Valid() const{
    return m_year_assets_depleted_isValid;
}

bool OAIIGoal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets_remaining_after_funding_goal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_assets_depleted.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIGoal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
