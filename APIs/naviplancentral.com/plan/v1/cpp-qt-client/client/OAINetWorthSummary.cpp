/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetWorthSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetWorthSummary::OAINetWorthSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetWorthSummary::OAINetWorthSummary() {
    this->initializeModel();
}

OAINetWorthSummary::~OAINetWorthSummary() {}

void OAINetWorthSummary::initializeModel() {

    m_total_assets_isSet = false;
    m_total_assets_isValid = false;

    m_total_liabilities_isSet = false;
    m_total_liabilities_isValid = false;

    m_total_net_worth_isSet = false;
    m_total_net_worth_isValid = false;
}

void OAINetWorthSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetWorthSummary::fromJsonObject(QJsonObject json) {

    m_total_assets_isValid = ::OpenAPI::fromJsonValue(m_total_assets, json[QString("totalAssets")]);
    m_total_assets_isSet = !json[QString("totalAssets")].isNull() && m_total_assets_isValid;

    m_total_liabilities_isValid = ::OpenAPI::fromJsonValue(m_total_liabilities, json[QString("totalLiabilities")]);
    m_total_liabilities_isSet = !json[QString("totalLiabilities")].isNull() && m_total_liabilities_isValid;

    m_total_net_worth_isValid = ::OpenAPI::fromJsonValue(m_total_net_worth, json[QString("totalNetWorth")]);
    m_total_net_worth_isSet = !json[QString("totalNetWorth")].isNull() && m_total_net_worth_isValid;
}

QString OAINetWorthSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetWorthSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_assets_isSet) {
        obj.insert(QString("totalAssets"), ::OpenAPI::toJsonValue(m_total_assets));
    }
    if (m_total_liabilities_isSet) {
        obj.insert(QString("totalLiabilities"), ::OpenAPI::toJsonValue(m_total_liabilities));
    }
    if (m_total_net_worth_isSet) {
        obj.insert(QString("totalNetWorth"), ::OpenAPI::toJsonValue(m_total_net_worth));
    }
    return obj;
}

double OAINetWorthSummary::getTotalAssets() const {
    return m_total_assets;
}
void OAINetWorthSummary::setTotalAssets(const double &total_assets) {
    m_total_assets = total_assets;
    m_total_assets_isSet = true;
}

bool OAINetWorthSummary::is_total_assets_Set() const{
    return m_total_assets_isSet;
}

bool OAINetWorthSummary::is_total_assets_Valid() const{
    return m_total_assets_isValid;
}

double OAINetWorthSummary::getTotalLiabilities() const {
    return m_total_liabilities;
}
void OAINetWorthSummary::setTotalLiabilities(const double &total_liabilities) {
    m_total_liabilities = total_liabilities;
    m_total_liabilities_isSet = true;
}

bool OAINetWorthSummary::is_total_liabilities_Set() const{
    return m_total_liabilities_isSet;
}

bool OAINetWorthSummary::is_total_liabilities_Valid() const{
    return m_total_liabilities_isValid;
}

double OAINetWorthSummary::getTotalNetWorth() const {
    return m_total_net_worth;
}
void OAINetWorthSummary::setTotalNetWorth(const double &total_net_worth) {
    m_total_net_worth = total_net_worth;
    m_total_net_worth_isSet = true;
}

bool OAINetWorthSummary::is_total_net_worth_Set() const{
    return m_total_net_worth_isSet;
}

bool OAINetWorthSummary::is_total_net_worth_Valid() const{
    return m_total_net_worth_isValid;
}

bool OAINetWorthSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_liabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetWorthSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
