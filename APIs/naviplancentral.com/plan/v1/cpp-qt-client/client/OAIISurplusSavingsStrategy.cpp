/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIISurplusSavingsStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIISurplusSavingsStrategy::OAIISurplusSavingsStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIISurplusSavingsStrategy::OAIISurplusSavingsStrategy() {
    this->initializeModel();
}

OAIISurplusSavingsStrategy::~OAIISurplusSavingsStrategy() {}

void OAIISurplusSavingsStrategy::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_percent_of_surplus_isSet = false;
    m_percent_of_surplus_isValid = false;

    m_percent_of_surplus_client_isSet = false;
    m_percent_of_surplus_client_isValid = false;

    m_percent_of_surplus_co_client_isSet = false;
    m_percent_of_surplus_co_client_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIISurplusSavingsStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIISurplusSavingsStrategy::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_percent_of_surplus_isValid = ::OpenAPI::fromJsonValue(m_percent_of_surplus, json[QString("percentOfSurplus")]);
    m_percent_of_surplus_isSet = !json[QString("percentOfSurplus")].isNull() && m_percent_of_surplus_isValid;

    m_percent_of_surplus_client_isValid = ::OpenAPI::fromJsonValue(m_percent_of_surplus_client, json[QString("percentOfSurplusClient")]);
    m_percent_of_surplus_client_isSet = !json[QString("percentOfSurplusClient")].isNull() && m_percent_of_surplus_client_isValid;

    m_percent_of_surplus_co_client_isValid = ::OpenAPI::fromJsonValue(m_percent_of_surplus_co_client, json[QString("percentOfSurplusCoClient")]);
    m_percent_of_surplus_co_client_isSet = !json[QString("percentOfSurplusCoClient")].isNull() && m_percent_of_surplus_co_client_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIISurplusSavingsStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIISurplusSavingsStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_percent_of_surplus.isSet()) {
        obj.insert(QString("percentOfSurplus"), ::OpenAPI::toJsonValue(m_percent_of_surplus));
    }
    if (m_percent_of_surplus_client.isSet()) {
        obj.insert(QString("percentOfSurplusClient"), ::OpenAPI::toJsonValue(m_percent_of_surplus_client));
    }
    if (m_percent_of_surplus_co_client.isSet()) {
        obj.insert(QString("percentOfSurplusCoClient"), ::OpenAPI::toJsonValue(m_percent_of_surplus_co_client));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAIDate OAIISurplusSavingsStrategy::getEndDate() const {
    return m_end_date;
}
void OAIISurplusSavingsStrategy::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIISurplusSavingsStrategy::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIISurplusSavingsStrategy::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIPercent OAIISurplusSavingsStrategy::getPercentOfSurplus() const {
    return m_percent_of_surplus;
}
void OAIISurplusSavingsStrategy::setPercentOfSurplus(const OAIPercent &percent_of_surplus) {
    m_percent_of_surplus = percent_of_surplus;
    m_percent_of_surplus_isSet = true;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_Set() const{
    return m_percent_of_surplus_isSet;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_Valid() const{
    return m_percent_of_surplus_isValid;
}

OAIPercent OAIISurplusSavingsStrategy::getPercentOfSurplusClient() const {
    return m_percent_of_surplus_client;
}
void OAIISurplusSavingsStrategy::setPercentOfSurplusClient(const OAIPercent &percent_of_surplus_client) {
    m_percent_of_surplus_client = percent_of_surplus_client;
    m_percent_of_surplus_client_isSet = true;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_client_Set() const{
    return m_percent_of_surplus_client_isSet;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_client_Valid() const{
    return m_percent_of_surplus_client_isValid;
}

OAIPercent OAIISurplusSavingsStrategy::getPercentOfSurplusCoClient() const {
    return m_percent_of_surplus_co_client;
}
void OAIISurplusSavingsStrategy::setPercentOfSurplusCoClient(const OAIPercent &percent_of_surplus_co_client) {
    m_percent_of_surplus_co_client = percent_of_surplus_co_client;
    m_percent_of_surplus_co_client_isSet = true;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_co_client_Set() const{
    return m_percent_of_surplus_co_client_isSet;
}

bool OAIISurplusSavingsStrategy::is_percent_of_surplus_co_client_Valid() const{
    return m_percent_of_surplus_co_client_isValid;
}

OAIDate OAIISurplusSavingsStrategy::getStartDate() const {
    return m_start_date;
}
void OAIISurplusSavingsStrategy::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIISurplusSavingsStrategy::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIISurplusSavingsStrategy::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIISurplusSavingsStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_of_surplus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_of_surplus_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_of_surplus_co_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIISurplusSavingsStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
