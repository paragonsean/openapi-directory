/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIDefinedBenefitPension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIDefinedBenefitPension::OAIIDefinedBenefitPension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIDefinedBenefitPension::OAIIDefinedBenefitPension() {
    this->initializeModel();
}

OAIIDefinedBenefitPension::~OAIIDefinedBenefitPension() {}

void OAIIDefinedBenefitPension::initializeModel() {

    m_benefit_isSet = false;
    m_benefit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_benefit_formula_isSet = false;
    m_is_benefit_formula_isValid = false;

    m_is_benefit_integrated_with_cpp_qpp_isSet = false;
    m_is_benefit_integrated_with_cpp_qpp_isValid = false;

    m_is_formula_integrated_with_cpp_qpp_isSet = false;
    m_is_formula_integrated_with_cpp_qpp_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pension_type_isSet = false;
    m_pension_type_isValid = false;

    m_percent_payable_to_survivor_isSet = false;
    m_percent_payable_to_survivor_isValid = false;

    m_projected_years_of_service_isSet = false;
    m_projected_years_of_service_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIIDefinedBenefitPension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIDefinedBenefitPension::fromJsonObject(QJsonObject json) {

    m_benefit_isValid = ::OpenAPI::fromJsonValue(m_benefit, json[QString("benefit")]);
    m_benefit_isSet = !json[QString("benefit")].isNull() && m_benefit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_benefit_formula_isValid = ::OpenAPI::fromJsonValue(m_is_benefit_formula, json[QString("isBenefitFormula")]);
    m_is_benefit_formula_isSet = !json[QString("isBenefitFormula")].isNull() && m_is_benefit_formula_isValid;

    m_is_benefit_integrated_with_cpp_qpp_isValid = ::OpenAPI::fromJsonValue(m_is_benefit_integrated_with_cpp_qpp, json[QString("isBenefitIntegratedWithCppQpp")]);
    m_is_benefit_integrated_with_cpp_qpp_isSet = !json[QString("isBenefitIntegratedWithCppQpp")].isNull() && m_is_benefit_integrated_with_cpp_qpp_isValid;

    m_is_formula_integrated_with_cpp_qpp_isValid = ::OpenAPI::fromJsonValue(m_is_formula_integrated_with_cpp_qpp, json[QString("isFormulaIntegratedWithCppQpp")]);
    m_is_formula_integrated_with_cpp_qpp_isSet = !json[QString("isFormulaIntegratedWithCppQpp")].isNull() && m_is_formula_integrated_with_cpp_qpp_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pension_type_isValid = ::OpenAPI::fromJsonValue(m_pension_type, json[QString("pensionType")]);
    m_pension_type_isSet = !json[QString("pensionType")].isNull() && m_pension_type_isValid;

    m_percent_payable_to_survivor_isValid = ::OpenAPI::fromJsonValue(m_percent_payable_to_survivor, json[QString("percentPayableToSurvivor")]);
    m_percent_payable_to_survivor_isSet = !json[QString("percentPayableToSurvivor")].isNull() && m_percent_payable_to_survivor_isValid;

    m_projected_years_of_service_isValid = ::OpenAPI::fromJsonValue(m_projected_years_of_service, json[QString("projectedYearsOfService")]);
    m_projected_years_of_service_isSet = !json[QString("projectedYearsOfService")].isNull() && m_projected_years_of_service_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIIDefinedBenefitPension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIDefinedBenefitPension::asJsonObject() const {
    QJsonObject obj;
    if (m_benefit.isSet()) {
        obj.insert(QString("benefit"), ::OpenAPI::toJsonValue(m_benefit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_benefit_formula_isSet) {
        obj.insert(QString("isBenefitFormula"), ::OpenAPI::toJsonValue(m_is_benefit_formula));
    }
    if (m_is_benefit_integrated_with_cpp_qpp_isSet) {
        obj.insert(QString("isBenefitIntegratedWithCppQpp"), ::OpenAPI::toJsonValue(m_is_benefit_integrated_with_cpp_qpp));
    }
    if (m_is_formula_integrated_with_cpp_qpp_isSet) {
        obj.insert(QString("isFormulaIntegratedWithCppQpp"), ::OpenAPI::toJsonValue(m_is_formula_integrated_with_cpp_qpp));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pension_type_isSet) {
        obj.insert(QString("pensionType"), ::OpenAPI::toJsonValue(m_pension_type));
    }
    if (m_percent_payable_to_survivor.isSet()) {
        obj.insert(QString("percentPayableToSurvivor"), ::OpenAPI::toJsonValue(m_percent_payable_to_survivor));
    }
    if (m_projected_years_of_service_isSet) {
        obj.insert(QString("projectedYearsOfService"), ::OpenAPI::toJsonValue(m_projected_years_of_service));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAIIOptionalField_Benefit_CurrencyWithGrowth OAIIDefinedBenefitPension::getBenefit() const {
    return m_benefit;
}
void OAIIDefinedBenefitPension::setBenefit(const OAIIOptionalField_Benefit_CurrencyWithGrowth &benefit) {
    m_benefit = benefit;
    m_benefit_isSet = true;
}

bool OAIIDefinedBenefitPension::is_benefit_Set() const{
    return m_benefit_isSet;
}

bool OAIIDefinedBenefitPension::is_benefit_Valid() const{
    return m_benefit_isValid;
}

QString OAIIDefinedBenefitPension::getDescription() const {
    return m_description;
}
void OAIIDefinedBenefitPension::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIDefinedBenefitPension::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIDefinedBenefitPension::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIIDefinedBenefitPension::isIsBenefitFormula() const {
    return m_is_benefit_formula;
}
void OAIIDefinedBenefitPension::setIsBenefitFormula(const bool &is_benefit_formula) {
    m_is_benefit_formula = is_benefit_formula;
    m_is_benefit_formula_isSet = true;
}

bool OAIIDefinedBenefitPension::is_is_benefit_formula_Set() const{
    return m_is_benefit_formula_isSet;
}

bool OAIIDefinedBenefitPension::is_is_benefit_formula_Valid() const{
    return m_is_benefit_formula_isValid;
}

bool OAIIDefinedBenefitPension::isIsBenefitIntegratedWithCppQpp() const {
    return m_is_benefit_integrated_with_cpp_qpp;
}
void OAIIDefinedBenefitPension::setIsBenefitIntegratedWithCppQpp(const bool &is_benefit_integrated_with_cpp_qpp) {
    m_is_benefit_integrated_with_cpp_qpp = is_benefit_integrated_with_cpp_qpp;
    m_is_benefit_integrated_with_cpp_qpp_isSet = true;
}

bool OAIIDefinedBenefitPension::is_is_benefit_integrated_with_cpp_qpp_Set() const{
    return m_is_benefit_integrated_with_cpp_qpp_isSet;
}

bool OAIIDefinedBenefitPension::is_is_benefit_integrated_with_cpp_qpp_Valid() const{
    return m_is_benefit_integrated_with_cpp_qpp_isValid;
}

bool OAIIDefinedBenefitPension::isIsFormulaIntegratedWithCppQpp() const {
    return m_is_formula_integrated_with_cpp_qpp;
}
void OAIIDefinedBenefitPension::setIsFormulaIntegratedWithCppQpp(const bool &is_formula_integrated_with_cpp_qpp) {
    m_is_formula_integrated_with_cpp_qpp = is_formula_integrated_with_cpp_qpp;
    m_is_formula_integrated_with_cpp_qpp_isSet = true;
}

bool OAIIDefinedBenefitPension::is_is_formula_integrated_with_cpp_qpp_Set() const{
    return m_is_formula_integrated_with_cpp_qpp_isSet;
}

bool OAIIDefinedBenefitPension::is_is_formula_integrated_with_cpp_qpp_Valid() const{
    return m_is_formula_integrated_with_cpp_qpp_isValid;
}

QString OAIIDefinedBenefitPension::getOwner() const {
    return m_owner;
}
void OAIIDefinedBenefitPension::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIDefinedBenefitPension::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIDefinedBenefitPension::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIIDefinedBenefitPension::getPensionType() const {
    return m_pension_type;
}
void OAIIDefinedBenefitPension::setPensionType(const QString &pension_type) {
    m_pension_type = pension_type;
    m_pension_type_isSet = true;
}

bool OAIIDefinedBenefitPension::is_pension_type_Set() const{
    return m_pension_type_isSet;
}

bool OAIIDefinedBenefitPension::is_pension_type_Valid() const{
    return m_pension_type_isValid;
}

OAIPercent OAIIDefinedBenefitPension::getPercentPayableToSurvivor() const {
    return m_percent_payable_to_survivor;
}
void OAIIDefinedBenefitPension::setPercentPayableToSurvivor(const OAIPercent &percent_payable_to_survivor) {
    m_percent_payable_to_survivor = percent_payable_to_survivor;
    m_percent_payable_to_survivor_isSet = true;
}

bool OAIIDefinedBenefitPension::is_percent_payable_to_survivor_Set() const{
    return m_percent_payable_to_survivor_isSet;
}

bool OAIIDefinedBenefitPension::is_percent_payable_to_survivor_Valid() const{
    return m_percent_payable_to_survivor_isValid;
}

qint32 OAIIDefinedBenefitPension::getProjectedYearsOfService() const {
    return m_projected_years_of_service;
}
void OAIIDefinedBenefitPension::setProjectedYearsOfService(const qint32 &projected_years_of_service) {
    m_projected_years_of_service = projected_years_of_service;
    m_projected_years_of_service_isSet = true;
}

bool OAIIDefinedBenefitPension::is_projected_years_of_service_Set() const{
    return m_projected_years_of_service_isSet;
}

bool OAIIDefinedBenefitPension::is_projected_years_of_service_Valid() const{
    return m_projected_years_of_service_isValid;
}

OAIDate OAIIDefinedBenefitPension::getStartDate() const {
    return m_start_date;
}
void OAIIDefinedBenefitPension::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIIDefinedBenefitPension::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIIDefinedBenefitPension::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIIDefinedBenefitPension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_benefit_formula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_benefit_integrated_with_cpp_qpp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_formula_integrated_with_cpp_qpp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pension_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_payable_to_survivor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_years_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIDefinedBenefitPension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
