/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIHeadAssumptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIHeadAssumptions::OAIIHeadAssumptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIHeadAssumptions::OAIIHeadAssumptions() {
    this->initializeModel();
}

OAIIHeadAssumptions::~OAIIHeadAssumptions() {}

void OAIIHeadAssumptions::initializeModel() {

    m_already_retired_isSet = false;
    m_already_retired_isValid = false;

    m_deceased_age_isSet = false;
    m_deceased_age_isValid = false;

    m_deceased_date_isSet = false;
    m_deceased_date_isValid = false;

    m_estate_income_taxes_isSet = false;
    m_estate_income_taxes_isValid = false;

    m_government_pensions_isSet = false;
    m_government_pensions_isValid = false;

    m_marital_or_tax_filing_status_isSet = false;
    m_marital_or_tax_filing_status_isValid = false;

    m_pre_retirement_income_taxes_isSet = false;
    m_pre_retirement_income_taxes_isValid = false;

    m_retirement_age_isSet = false;
    m_retirement_age_isValid = false;

    m_retirement_date_isSet = false;
    m_retirement_date_isValid = false;

    m_retirement_income_taxes_isSet = false;
    m_retirement_income_taxes_isValid = false;
}

void OAIIHeadAssumptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIHeadAssumptions::fromJsonObject(QJsonObject json) {

    m_already_retired_isValid = ::OpenAPI::fromJsonValue(m_already_retired, json[QString("alreadyRetired")]);
    m_already_retired_isSet = !json[QString("alreadyRetired")].isNull() && m_already_retired_isValid;

    m_deceased_age_isValid = ::OpenAPI::fromJsonValue(m_deceased_age, json[QString("deceasedAge")]);
    m_deceased_age_isSet = !json[QString("deceasedAge")].isNull() && m_deceased_age_isValid;

    m_deceased_date_isValid = ::OpenAPI::fromJsonValue(m_deceased_date, json[QString("deceasedDate")]);
    m_deceased_date_isSet = !json[QString("deceasedDate")].isNull() && m_deceased_date_isValid;

    m_estate_income_taxes_isValid = ::OpenAPI::fromJsonValue(m_estate_income_taxes, json[QString("estateIncomeTaxes")]);
    m_estate_income_taxes_isSet = !json[QString("estateIncomeTaxes")].isNull() && m_estate_income_taxes_isValid;

    m_government_pensions_isValid = ::OpenAPI::fromJsonValue(m_government_pensions, json[QString("governmentPensions")]);
    m_government_pensions_isSet = !json[QString("governmentPensions")].isNull() && m_government_pensions_isValid;

    m_marital_or_tax_filing_status_isValid = ::OpenAPI::fromJsonValue(m_marital_or_tax_filing_status, json[QString("maritalOrTaxFilingStatus")]);
    m_marital_or_tax_filing_status_isSet = !json[QString("maritalOrTaxFilingStatus")].isNull() && m_marital_or_tax_filing_status_isValid;

    m_pre_retirement_income_taxes_isValid = ::OpenAPI::fromJsonValue(m_pre_retirement_income_taxes, json[QString("preRetirementIncomeTaxes")]);
    m_pre_retirement_income_taxes_isSet = !json[QString("preRetirementIncomeTaxes")].isNull() && m_pre_retirement_income_taxes_isValid;

    m_retirement_age_isValid = ::OpenAPI::fromJsonValue(m_retirement_age, json[QString("retirementAge")]);
    m_retirement_age_isSet = !json[QString("retirementAge")].isNull() && m_retirement_age_isValid;

    m_retirement_date_isValid = ::OpenAPI::fromJsonValue(m_retirement_date, json[QString("retirementDate")]);
    m_retirement_date_isSet = !json[QString("retirementDate")].isNull() && m_retirement_date_isValid;

    m_retirement_income_taxes_isValid = ::OpenAPI::fromJsonValue(m_retirement_income_taxes, json[QString("retirementIncomeTaxes")]);
    m_retirement_income_taxes_isSet = !json[QString("retirementIncomeTaxes")].isNull() && m_retirement_income_taxes_isValid;
}

QString OAIIHeadAssumptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIHeadAssumptions::asJsonObject() const {
    QJsonObject obj;
    if (m_already_retired_isSet) {
        obj.insert(QString("alreadyRetired"), ::OpenAPI::toJsonValue(m_already_retired));
    }
    if (m_deceased_age_isSet) {
        obj.insert(QString("deceasedAge"), ::OpenAPI::toJsonValue(m_deceased_age));
    }
    if (m_deceased_date.isSet()) {
        obj.insert(QString("deceasedDate"), ::OpenAPI::toJsonValue(m_deceased_date));
    }
    if (m_estate_income_taxes.isSet()) {
        obj.insert(QString("estateIncomeTaxes"), ::OpenAPI::toJsonValue(m_estate_income_taxes));
    }
    if (m_government_pensions.isSet()) {
        obj.insert(QString("governmentPensions"), ::OpenAPI::toJsonValue(m_government_pensions));
    }
    if (m_marital_or_tax_filing_status.isSet()) {
        obj.insert(QString("maritalOrTaxFilingStatus"), ::OpenAPI::toJsonValue(m_marital_or_tax_filing_status));
    }
    if (m_pre_retirement_income_taxes.isSet()) {
        obj.insert(QString("preRetirementIncomeTaxes"), ::OpenAPI::toJsonValue(m_pre_retirement_income_taxes));
    }
    if (m_retirement_age_isSet) {
        obj.insert(QString("retirementAge"), ::OpenAPI::toJsonValue(m_retirement_age));
    }
    if (m_retirement_date.isSet()) {
        obj.insert(QString("retirementDate"), ::OpenAPI::toJsonValue(m_retirement_date));
    }
    if (m_retirement_income_taxes.isSet()) {
        obj.insert(QString("retirementIncomeTaxes"), ::OpenAPI::toJsonValue(m_retirement_income_taxes));
    }
    return obj;
}

bool OAIIHeadAssumptions::isAlreadyRetired() const {
    return m_already_retired;
}
void OAIIHeadAssumptions::setAlreadyRetired(const bool &already_retired) {
    m_already_retired = already_retired;
    m_already_retired_isSet = true;
}

bool OAIIHeadAssumptions::is_already_retired_Set() const{
    return m_already_retired_isSet;
}

bool OAIIHeadAssumptions::is_already_retired_Valid() const{
    return m_already_retired_isValid;
}

qint32 OAIIHeadAssumptions::getDeceasedAge() const {
    return m_deceased_age;
}
void OAIIHeadAssumptions::setDeceasedAge(const qint32 &deceased_age) {
    m_deceased_age = deceased_age;
    m_deceased_age_isSet = true;
}

bool OAIIHeadAssumptions::is_deceased_age_Set() const{
    return m_deceased_age_isSet;
}

bool OAIIHeadAssumptions::is_deceased_age_Valid() const{
    return m_deceased_age_isValid;
}

OAIDate OAIIHeadAssumptions::getDeceasedDate() const {
    return m_deceased_date;
}
void OAIIHeadAssumptions::setDeceasedDate(const OAIDate &deceased_date) {
    m_deceased_date = deceased_date;
    m_deceased_date_isSet = true;
}

bool OAIIHeadAssumptions::is_deceased_date_Set() const{
    return m_deceased_date_isSet;
}

bool OAIIHeadAssumptions::is_deceased_date_Valid() const{
    return m_deceased_date_isValid;
}

OAIIIncomeTaxes OAIIHeadAssumptions::getEstateIncomeTaxes() const {
    return m_estate_income_taxes;
}
void OAIIHeadAssumptions::setEstateIncomeTaxes(const OAIIIncomeTaxes &estate_income_taxes) {
    m_estate_income_taxes = estate_income_taxes;
    m_estate_income_taxes_isSet = true;
}

bool OAIIHeadAssumptions::is_estate_income_taxes_Set() const{
    return m_estate_income_taxes_isSet;
}

bool OAIIHeadAssumptions::is_estate_income_taxes_Valid() const{
    return m_estate_income_taxes_isValid;
}

OAIIGovernmentPensions OAIIHeadAssumptions::getGovernmentPensions() const {
    return m_government_pensions;
}
void OAIIHeadAssumptions::setGovernmentPensions(const OAIIGovernmentPensions &government_pensions) {
    m_government_pensions = government_pensions;
    m_government_pensions_isSet = true;
}

bool OAIIHeadAssumptions::is_government_pensions_Set() const{
    return m_government_pensions_isSet;
}

bool OAIIHeadAssumptions::is_government_pensions_Valid() const{
    return m_government_pensions_isValid;
}

OAIFormattedMaritalOrTaxFilingStatus OAIIHeadAssumptions::getMaritalOrTaxFilingStatus() const {
    return m_marital_or_tax_filing_status;
}
void OAIIHeadAssumptions::setMaritalOrTaxFilingStatus(const OAIFormattedMaritalOrTaxFilingStatus &marital_or_tax_filing_status) {
    m_marital_or_tax_filing_status = marital_or_tax_filing_status;
    m_marital_or_tax_filing_status_isSet = true;
}

bool OAIIHeadAssumptions::is_marital_or_tax_filing_status_Set() const{
    return m_marital_or_tax_filing_status_isSet;
}

bool OAIIHeadAssumptions::is_marital_or_tax_filing_status_Valid() const{
    return m_marital_or_tax_filing_status_isValid;
}

OAIIIncomeTaxes OAIIHeadAssumptions::getPreRetirementIncomeTaxes() const {
    return m_pre_retirement_income_taxes;
}
void OAIIHeadAssumptions::setPreRetirementIncomeTaxes(const OAIIIncomeTaxes &pre_retirement_income_taxes) {
    m_pre_retirement_income_taxes = pre_retirement_income_taxes;
    m_pre_retirement_income_taxes_isSet = true;
}

bool OAIIHeadAssumptions::is_pre_retirement_income_taxes_Set() const{
    return m_pre_retirement_income_taxes_isSet;
}

bool OAIIHeadAssumptions::is_pre_retirement_income_taxes_Valid() const{
    return m_pre_retirement_income_taxes_isValid;
}

qint32 OAIIHeadAssumptions::getRetirementAge() const {
    return m_retirement_age;
}
void OAIIHeadAssumptions::setRetirementAge(const qint32 &retirement_age) {
    m_retirement_age = retirement_age;
    m_retirement_age_isSet = true;
}

bool OAIIHeadAssumptions::is_retirement_age_Set() const{
    return m_retirement_age_isSet;
}

bool OAIIHeadAssumptions::is_retirement_age_Valid() const{
    return m_retirement_age_isValid;
}

OAIDate OAIIHeadAssumptions::getRetirementDate() const {
    return m_retirement_date;
}
void OAIIHeadAssumptions::setRetirementDate(const OAIDate &retirement_date) {
    m_retirement_date = retirement_date;
    m_retirement_date_isSet = true;
}

bool OAIIHeadAssumptions::is_retirement_date_Set() const{
    return m_retirement_date_isSet;
}

bool OAIIHeadAssumptions::is_retirement_date_Valid() const{
    return m_retirement_date_isValid;
}

OAIIIncomeTaxes OAIIHeadAssumptions::getRetirementIncomeTaxes() const {
    return m_retirement_income_taxes;
}
void OAIIHeadAssumptions::setRetirementIncomeTaxes(const OAIIIncomeTaxes &retirement_income_taxes) {
    m_retirement_income_taxes = retirement_income_taxes;
    m_retirement_income_taxes_isSet = true;
}

bool OAIIHeadAssumptions::is_retirement_income_taxes_Set() const{
    return m_retirement_income_taxes_isSet;
}

bool OAIIHeadAssumptions::is_retirement_income_taxes_Valid() const{
    return m_retirement_income_taxes_isValid;
}

bool OAIIHeadAssumptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_already_retired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deceased_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deceased_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_income_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_government_pensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marital_or_tax_filing_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_retirement_income_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_income_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIHeadAssumptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
