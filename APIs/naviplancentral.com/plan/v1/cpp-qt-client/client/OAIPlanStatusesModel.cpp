/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanStatusesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanStatusesModel::OAIPlanStatusesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanStatusesModel::OAIPlanStatusesModel() {
    this->initializeModel();
}

OAIPlanStatusesModel::~OAIPlanStatusesModel() {}

void OAIPlanStatusesModel::initializeModel() {

    m_has_integrated_accounts_isSet = false;
    m_has_integrated_accounts_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_plan_data_status_isSet = false;
    m_plan_data_status_isValid = false;

    m_serialized_data_status_isSet = false;
    m_serialized_data_status_isValid = false;
}

void OAIPlanStatusesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanStatusesModel::fromJsonObject(QJsonObject json) {

    m_has_integrated_accounts_isValid = ::OpenAPI::fromJsonValue(m_has_integrated_accounts, json[QString("hasIntegratedAccounts")]);
    m_has_integrated_accounts_isSet = !json[QString("hasIntegratedAccounts")].isNull() && m_has_integrated_accounts_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_plan_data_status_isValid = ::OpenAPI::fromJsonValue(m_plan_data_status, json[QString("planDataStatus")]);
    m_plan_data_status_isSet = !json[QString("planDataStatus")].isNull() && m_plan_data_status_isValid;

    m_serialized_data_status_isValid = ::OpenAPI::fromJsonValue(m_serialized_data_status, json[QString("serializedDataStatus")]);
    m_serialized_data_status_isSet = !json[QString("serializedDataStatus")].isNull() && m_serialized_data_status_isValid;
}

QString OAIPlanStatusesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanStatusesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_has_integrated_accounts_isSet) {
        obj.insert(QString("hasIntegratedAccounts"), ::OpenAPI::toJsonValue(m_has_integrated_accounts));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_plan_data_status_isSet) {
        obj.insert(QString("planDataStatus"), ::OpenAPI::toJsonValue(m_plan_data_status));
    }
    if (m_serialized_data_status_isSet) {
        obj.insert(QString("serializedDataStatus"), ::OpenAPI::toJsonValue(m_serialized_data_status));
    }
    return obj;
}

QString OAIPlanStatusesModel::getHasIntegratedAccounts() const {
    return m_has_integrated_accounts;
}
void OAIPlanStatusesModel::setHasIntegratedAccounts(const QString &has_integrated_accounts) {
    m_has_integrated_accounts = has_integrated_accounts;
    m_has_integrated_accounts_isSet = true;
}

bool OAIPlanStatusesModel::is_has_integrated_accounts_Set() const{
    return m_has_integrated_accounts_isSet;
}

bool OAIPlanStatusesModel::is_has_integrated_accounts_Valid() const{
    return m_has_integrated_accounts_isValid;
}

QList<OAIObjectLink> OAIPlanStatusesModel::getLinks() const {
    return m_links;
}
void OAIPlanStatusesModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPlanStatusesModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPlanStatusesModel::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPlanStatusesModel::getPlanDataStatus() const {
    return m_plan_data_status;
}
void OAIPlanStatusesModel::setPlanDataStatus(const QString &plan_data_status) {
    m_plan_data_status = plan_data_status;
    m_plan_data_status_isSet = true;
}

bool OAIPlanStatusesModel::is_plan_data_status_Set() const{
    return m_plan_data_status_isSet;
}

bool OAIPlanStatusesModel::is_plan_data_status_Valid() const{
    return m_plan_data_status_isValid;
}

QString OAIPlanStatusesModel::getSerializedDataStatus() const {
    return m_serialized_data_status;
}
void OAIPlanStatusesModel::setSerializedDataStatus(const QString &serialized_data_status) {
    m_serialized_data_status = serialized_data_status;
    m_serialized_data_status_isSet = true;
}

bool OAIPlanStatusesModel::is_serialized_data_status_Set() const{
    return m_serialized_data_status_isSet;
}

bool OAIPlanStatusesModel::is_serialized_data_status_Valid() const{
    return m_serialized_data_status_isValid;
}

bool OAIPlanStatusesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_integrated_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_data_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialized_data_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanStatusesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
