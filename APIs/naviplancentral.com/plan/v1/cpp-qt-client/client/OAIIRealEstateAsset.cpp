/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIRealEstateAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIRealEstateAsset::OAIIRealEstateAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIRealEstateAsset::OAIIRealEstateAsset() {
    this->initializeModel();
}

OAIIRealEstateAsset::~OAIIRealEstateAsset() {}

void OAIIRealEstateAsset::initializeModel() {

    m_current_year_net_rental_income_isSet = false;
    m_current_year_net_rental_income_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_market_value_as_of_isSet = false;
    m_market_value_as_of_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pre_tax_growth_rate_isSet = false;
    m_pre_tax_growth_rate_isValid = false;

    m_purchase_amount_isSet = false;
    m_purchase_amount_isValid = false;

    m_purchase_date_isSet = false;
    m_purchase_date_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_start_of_year_cost_basis_isSet = false;
    m_start_of_year_cost_basis_isValid = false;

    m_start_of_year_market_value_isSet = false;
    m_start_of_year_market_value_isValid = false;
}

void OAIIRealEstateAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIRealEstateAsset::fromJsonObject(QJsonObject json) {

    m_current_year_net_rental_income_isValid = ::OpenAPI::fromJsonValue(m_current_year_net_rental_income, json[QString("currentYearNetRentalIncome")]);
    m_current_year_net_rental_income_isSet = !json[QString("currentYearNetRentalIncome")].isNull() && m_current_year_net_rental_income_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_market_value_as_of_isValid = ::OpenAPI::fromJsonValue(m_market_value_as_of, json[QString("marketValueAsOf")]);
    m_market_value_as_of_isSet = !json[QString("marketValueAsOf")].isNull() && m_market_value_as_of_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pre_tax_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_pre_tax_growth_rate, json[QString("preTaxGrowthRate")]);
    m_pre_tax_growth_rate_isSet = !json[QString("preTaxGrowthRate")].isNull() && m_pre_tax_growth_rate_isValid;

    m_purchase_amount_isValid = ::OpenAPI::fromJsonValue(m_purchase_amount, json[QString("purchaseAmount")]);
    m_purchase_amount_isSet = !json[QString("purchaseAmount")].isNull() && m_purchase_amount_isValid;

    m_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_purchase_date, json[QString("purchaseDate")]);
    m_purchase_date_isSet = !json[QString("purchaseDate")].isNull() && m_purchase_date_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;

    m_start_of_year_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_start_of_year_cost_basis, json[QString("startOfYearCostBasis")]);
    m_start_of_year_cost_basis_isSet = !json[QString("startOfYearCostBasis")].isNull() && m_start_of_year_cost_basis_isValid;

    m_start_of_year_market_value_isValid = ::OpenAPI::fromJsonValue(m_start_of_year_market_value, json[QString("startOfYearMarketValue")]);
    m_start_of_year_market_value_isSet = !json[QString("startOfYearMarketValue")].isNull() && m_start_of_year_market_value_isValid;
}

QString OAIIRealEstateAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIRealEstateAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_current_year_net_rental_income.isSet()) {
        obj.insert(QString("currentYearNetRentalIncome"), ::OpenAPI::toJsonValue(m_current_year_net_rental_income));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_market_value_as_of.isSet()) {
        obj.insert(QString("marketValueAsOf"), ::OpenAPI::toJsonValue(m_market_value_as_of));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pre_tax_growth_rate.isSet()) {
        obj.insert(QString("preTaxGrowthRate"), ::OpenAPI::toJsonValue(m_pre_tax_growth_rate));
    }
    if (m_purchase_amount.isSet()) {
        obj.insert(QString("purchaseAmount"), ::OpenAPI::toJsonValue(m_purchase_amount));
    }
    if (m_purchase_date.isSet()) {
        obj.insert(QString("purchaseDate"), ::OpenAPI::toJsonValue(m_purchase_date));
    }
    if (m_standard_deviation.isSet()) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_start_of_year_cost_basis.isSet()) {
        obj.insert(QString("startOfYearCostBasis"), ::OpenAPI::toJsonValue(m_start_of_year_cost_basis));
    }
    if (m_start_of_year_market_value.isSet()) {
        obj.insert(QString("startOfYearMarketValue"), ::OpenAPI::toJsonValue(m_start_of_year_market_value));
    }
    return obj;
}

OAICurrency OAIIRealEstateAsset::getCurrentYearNetRentalIncome() const {
    return m_current_year_net_rental_income;
}
void OAIIRealEstateAsset::setCurrentYearNetRentalIncome(const OAICurrency &current_year_net_rental_income) {
    m_current_year_net_rental_income = current_year_net_rental_income;
    m_current_year_net_rental_income_isSet = true;
}

bool OAIIRealEstateAsset::is_current_year_net_rental_income_Set() const{
    return m_current_year_net_rental_income_isSet;
}

bool OAIIRealEstateAsset::is_current_year_net_rental_income_Valid() const{
    return m_current_year_net_rental_income_isValid;
}

QString OAIIRealEstateAsset::getDescription() const {
    return m_description;
}
void OAIIRealEstateAsset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIRealEstateAsset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIRealEstateAsset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIRealEstateAsset::getId() const {
    return m_id;
}
void OAIIRealEstateAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIRealEstateAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIRealEstateAsset::is_id_Valid() const{
    return m_id_isValid;
}

OAICurrencyWithDate OAIIRealEstateAsset::getMarketValueAsOf() const {
    return m_market_value_as_of;
}
void OAIIRealEstateAsset::setMarketValueAsOf(const OAICurrencyWithDate &market_value_as_of) {
    m_market_value_as_of = market_value_as_of;
    m_market_value_as_of_isSet = true;
}

bool OAIIRealEstateAsset::is_market_value_as_of_Set() const{
    return m_market_value_as_of_isSet;
}

bool OAIIRealEstateAsset::is_market_value_as_of_Valid() const{
    return m_market_value_as_of_isValid;
}

QString OAIIRealEstateAsset::getOwner() const {
    return m_owner;
}
void OAIIRealEstateAsset::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIIRealEstateAsset::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIIRealEstateAsset::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPercent OAIIRealEstateAsset::getPreTaxGrowthRate() const {
    return m_pre_tax_growth_rate;
}
void OAIIRealEstateAsset::setPreTaxGrowthRate(const OAIPercent &pre_tax_growth_rate) {
    m_pre_tax_growth_rate = pre_tax_growth_rate;
    m_pre_tax_growth_rate_isSet = true;
}

bool OAIIRealEstateAsset::is_pre_tax_growth_rate_Set() const{
    return m_pre_tax_growth_rate_isSet;
}

bool OAIIRealEstateAsset::is_pre_tax_growth_rate_Valid() const{
    return m_pre_tax_growth_rate_isValid;
}

OAICurrency OAIIRealEstateAsset::getPurchaseAmount() const {
    return m_purchase_amount;
}
void OAIIRealEstateAsset::setPurchaseAmount(const OAICurrency &purchase_amount) {
    m_purchase_amount = purchase_amount;
    m_purchase_amount_isSet = true;
}

bool OAIIRealEstateAsset::is_purchase_amount_Set() const{
    return m_purchase_amount_isSet;
}

bool OAIIRealEstateAsset::is_purchase_amount_Valid() const{
    return m_purchase_amount_isValid;
}

OAIDate OAIIRealEstateAsset::getPurchaseDate() const {
    return m_purchase_date;
}
void OAIIRealEstateAsset::setPurchaseDate(const OAIDate &purchase_date) {
    m_purchase_date = purchase_date;
    m_purchase_date_isSet = true;
}

bool OAIIRealEstateAsset::is_purchase_date_Set() const{
    return m_purchase_date_isSet;
}

bool OAIIRealEstateAsset::is_purchase_date_Valid() const{
    return m_purchase_date_isValid;
}

OAIPercent OAIIRealEstateAsset::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIIRealEstateAsset::setStandardDeviation(const OAIPercent &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIIRealEstateAsset::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIIRealEstateAsset::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

OAICurrency OAIIRealEstateAsset::getStartOfYearCostBasis() const {
    return m_start_of_year_cost_basis;
}
void OAIIRealEstateAsset::setStartOfYearCostBasis(const OAICurrency &start_of_year_cost_basis) {
    m_start_of_year_cost_basis = start_of_year_cost_basis;
    m_start_of_year_cost_basis_isSet = true;
}

bool OAIIRealEstateAsset::is_start_of_year_cost_basis_Set() const{
    return m_start_of_year_cost_basis_isSet;
}

bool OAIIRealEstateAsset::is_start_of_year_cost_basis_Valid() const{
    return m_start_of_year_cost_basis_isValid;
}

OAICurrency OAIIRealEstateAsset::getStartOfYearMarketValue() const {
    return m_start_of_year_market_value;
}
void OAIIRealEstateAsset::setStartOfYearMarketValue(const OAICurrency &start_of_year_market_value) {
    m_start_of_year_market_value = start_of_year_market_value;
    m_start_of_year_market_value_isSet = true;
}

bool OAIIRealEstateAsset::is_start_of_year_market_value_Set() const{
    return m_start_of_year_market_value_isSet;
}

bool OAIIRealEstateAsset::is_start_of_year_market_value_Valid() const{
    return m_start_of_year_market_value_isValid;
}

bool OAIIRealEstateAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_year_net_rental_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_as_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_tax_growth_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_year_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_year_market_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIRealEstateAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
