/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIIncomeTaxes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIIncomeTaxes::OAIIIncomeTaxes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIIncomeTaxes::OAIIIncomeTaxes() {
    this->initializeModel();
}

OAIIIncomeTaxes::~OAIIIncomeTaxes() {}

void OAIIIncomeTaxes::initializeModel() {

    m_average_tax_rate_isSet = false;
    m_average_tax_rate_isValid = false;

    m_combined_state_and_average_tax_rate_isSet = false;
    m_combined_state_and_average_tax_rate_isValid = false;

    m_combined_state_and_long_term_capital_gains_tax_rate_isSet = false;
    m_combined_state_and_long_term_capital_gains_tax_rate_isValid = false;

    m_combined_state_and_marginal_tax_rate_isSet = false;
    m_combined_state_and_marginal_tax_rate_isValid = false;

    m_long_term_capital_gains_tax_rate_isSet = false;
    m_long_term_capital_gains_tax_rate_isValid = false;

    m_marginal_tax_rate_isSet = false;
    m_marginal_tax_rate_isValid = false;

    m_state_tax_rate_isSet = false;
    m_state_tax_rate_isValid = false;
}

void OAIIIncomeTaxes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIIncomeTaxes::fromJsonObject(QJsonObject json) {

    m_average_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_average_tax_rate, json[QString("averageTaxRate")]);
    m_average_tax_rate_isSet = !json[QString("averageTaxRate")].isNull() && m_average_tax_rate_isValid;

    m_combined_state_and_average_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_combined_state_and_average_tax_rate, json[QString("combinedStateAndAverageTaxRate")]);
    m_combined_state_and_average_tax_rate_isSet = !json[QString("combinedStateAndAverageTaxRate")].isNull() && m_combined_state_and_average_tax_rate_isValid;

    m_combined_state_and_long_term_capital_gains_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_combined_state_and_long_term_capital_gains_tax_rate, json[QString("combinedStateAndLongTermCapitalGainsTaxRate")]);
    m_combined_state_and_long_term_capital_gains_tax_rate_isSet = !json[QString("combinedStateAndLongTermCapitalGainsTaxRate")].isNull() && m_combined_state_and_long_term_capital_gains_tax_rate_isValid;

    m_combined_state_and_marginal_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_combined_state_and_marginal_tax_rate, json[QString("combinedStateAndMarginalTaxRate")]);
    m_combined_state_and_marginal_tax_rate_isSet = !json[QString("combinedStateAndMarginalTaxRate")].isNull() && m_combined_state_and_marginal_tax_rate_isValid;

    m_long_term_capital_gains_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_long_term_capital_gains_tax_rate, json[QString("longTermCapitalGainsTaxRate")]);
    m_long_term_capital_gains_tax_rate_isSet = !json[QString("longTermCapitalGainsTaxRate")].isNull() && m_long_term_capital_gains_tax_rate_isValid;

    m_marginal_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_marginal_tax_rate, json[QString("marginalTaxRate")]);
    m_marginal_tax_rate_isSet = !json[QString("marginalTaxRate")].isNull() && m_marginal_tax_rate_isValid;

    m_state_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_state_tax_rate, json[QString("stateTaxRate")]);
    m_state_tax_rate_isSet = !json[QString("stateTaxRate")].isNull() && m_state_tax_rate_isValid;
}

QString OAIIIncomeTaxes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIIncomeTaxes::asJsonObject() const {
    QJsonObject obj;
    if (m_average_tax_rate.isSet()) {
        obj.insert(QString("averageTaxRate"), ::OpenAPI::toJsonValue(m_average_tax_rate));
    }
    if (m_combined_state_and_average_tax_rate.isSet()) {
        obj.insert(QString("combinedStateAndAverageTaxRate"), ::OpenAPI::toJsonValue(m_combined_state_and_average_tax_rate));
    }
    if (m_combined_state_and_long_term_capital_gains_tax_rate.isSet()) {
        obj.insert(QString("combinedStateAndLongTermCapitalGainsTaxRate"), ::OpenAPI::toJsonValue(m_combined_state_and_long_term_capital_gains_tax_rate));
    }
    if (m_combined_state_and_marginal_tax_rate.isSet()) {
        obj.insert(QString("combinedStateAndMarginalTaxRate"), ::OpenAPI::toJsonValue(m_combined_state_and_marginal_tax_rate));
    }
    if (m_long_term_capital_gains_tax_rate.isSet()) {
        obj.insert(QString("longTermCapitalGainsTaxRate"), ::OpenAPI::toJsonValue(m_long_term_capital_gains_tax_rate));
    }
    if (m_marginal_tax_rate.isSet()) {
        obj.insert(QString("marginalTaxRate"), ::OpenAPI::toJsonValue(m_marginal_tax_rate));
    }
    if (m_state_tax_rate.isSet()) {
        obj.insert(QString("stateTaxRate"), ::OpenAPI::toJsonValue(m_state_tax_rate));
    }
    return obj;
}

OAIPercent OAIIIncomeTaxes::getAverageTaxRate() const {
    return m_average_tax_rate;
}
void OAIIIncomeTaxes::setAverageTaxRate(const OAIPercent &average_tax_rate) {
    m_average_tax_rate = average_tax_rate;
    m_average_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_average_tax_rate_Set() const{
    return m_average_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_average_tax_rate_Valid() const{
    return m_average_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getCombinedStateAndAverageTaxRate() const {
    return m_combined_state_and_average_tax_rate;
}
void OAIIIncomeTaxes::setCombinedStateAndAverageTaxRate(const OAIPercent &combined_state_and_average_tax_rate) {
    m_combined_state_and_average_tax_rate = combined_state_and_average_tax_rate;
    m_combined_state_and_average_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_combined_state_and_average_tax_rate_Set() const{
    return m_combined_state_and_average_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_combined_state_and_average_tax_rate_Valid() const{
    return m_combined_state_and_average_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getCombinedStateAndLongTermCapitalGainsTaxRate() const {
    return m_combined_state_and_long_term_capital_gains_tax_rate;
}
void OAIIIncomeTaxes::setCombinedStateAndLongTermCapitalGainsTaxRate(const OAIPercent &combined_state_and_long_term_capital_gains_tax_rate) {
    m_combined_state_and_long_term_capital_gains_tax_rate = combined_state_and_long_term_capital_gains_tax_rate;
    m_combined_state_and_long_term_capital_gains_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_combined_state_and_long_term_capital_gains_tax_rate_Set() const{
    return m_combined_state_and_long_term_capital_gains_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_combined_state_and_long_term_capital_gains_tax_rate_Valid() const{
    return m_combined_state_and_long_term_capital_gains_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getCombinedStateAndMarginalTaxRate() const {
    return m_combined_state_and_marginal_tax_rate;
}
void OAIIIncomeTaxes::setCombinedStateAndMarginalTaxRate(const OAIPercent &combined_state_and_marginal_tax_rate) {
    m_combined_state_and_marginal_tax_rate = combined_state_and_marginal_tax_rate;
    m_combined_state_and_marginal_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_combined_state_and_marginal_tax_rate_Set() const{
    return m_combined_state_and_marginal_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_combined_state_and_marginal_tax_rate_Valid() const{
    return m_combined_state_and_marginal_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getLongTermCapitalGainsTaxRate() const {
    return m_long_term_capital_gains_tax_rate;
}
void OAIIIncomeTaxes::setLongTermCapitalGainsTaxRate(const OAIPercent &long_term_capital_gains_tax_rate) {
    m_long_term_capital_gains_tax_rate = long_term_capital_gains_tax_rate;
    m_long_term_capital_gains_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_long_term_capital_gains_tax_rate_Set() const{
    return m_long_term_capital_gains_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_long_term_capital_gains_tax_rate_Valid() const{
    return m_long_term_capital_gains_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getMarginalTaxRate() const {
    return m_marginal_tax_rate;
}
void OAIIIncomeTaxes::setMarginalTaxRate(const OAIPercent &marginal_tax_rate) {
    m_marginal_tax_rate = marginal_tax_rate;
    m_marginal_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_marginal_tax_rate_Set() const{
    return m_marginal_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_marginal_tax_rate_Valid() const{
    return m_marginal_tax_rate_isValid;
}

OAIPercent OAIIIncomeTaxes::getStateTaxRate() const {
    return m_state_tax_rate;
}
void OAIIIncomeTaxes::setStateTaxRate(const OAIPercent &state_tax_rate) {
    m_state_tax_rate = state_tax_rate;
    m_state_tax_rate_isSet = true;
}

bool OAIIIncomeTaxes::is_state_tax_rate_Set() const{
    return m_state_tax_rate_isSet;
}

bool OAIIIncomeTaxes::is_state_tax_rate_Valid() const{
    return m_state_tax_rate_isValid;
}

bool OAIIIncomeTaxes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_state_and_average_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_state_and_long_term_capital_gains_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combined_state_and_marginal_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_capital_gains_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marginal_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIIncomeTaxes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
