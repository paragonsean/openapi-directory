/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIAssets::OAIIAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIAssets::OAIIAssets() {
    this->initializeModel();
}

OAIIAssets::~OAIIAssets() {}

void OAIIAssets::initializeModel() {

    m_all_assets_isSet = false;
    m_all_assets_isValid = false;

    m_client_assets_isSet = false;
    m_client_assets_isValid = false;

    m_co_client_assets_isSet = false;
    m_co_client_assets_isValid = false;

    m_community_property_assets_isSet = false;
    m_community_property_assets_isValid = false;

    m_joint_assets_isSet = false;
    m_joint_assets_isValid = false;
}

void OAIIAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIAssets::fromJsonObject(QJsonObject json) {

    m_all_assets_isValid = ::OpenAPI::fromJsonValue(m_all_assets, json[QString("allAssets")]);
    m_all_assets_isSet = !json[QString("allAssets")].isNull() && m_all_assets_isValid;

    m_client_assets_isValid = ::OpenAPI::fromJsonValue(m_client_assets, json[QString("clientAssets")]);
    m_client_assets_isSet = !json[QString("clientAssets")].isNull() && m_client_assets_isValid;

    m_co_client_assets_isValid = ::OpenAPI::fromJsonValue(m_co_client_assets, json[QString("coClientAssets")]);
    m_co_client_assets_isSet = !json[QString("coClientAssets")].isNull() && m_co_client_assets_isValid;

    m_community_property_assets_isValid = ::OpenAPI::fromJsonValue(m_community_property_assets, json[QString("communityPropertyAssets")]);
    m_community_property_assets_isSet = !json[QString("communityPropertyAssets")].isNull() && m_community_property_assets_isValid;

    m_joint_assets_isValid = ::OpenAPI::fromJsonValue(m_joint_assets, json[QString("jointAssets")]);
    m_joint_assets_isSet = !json[QString("jointAssets")].isNull() && m_joint_assets_isValid;
}

QString OAIIAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_all_assets.isSet()) {
        obj.insert(QString("allAssets"), ::OpenAPI::toJsonValue(m_all_assets));
    }
    if (m_client_assets.isSet()) {
        obj.insert(QString("clientAssets"), ::OpenAPI::toJsonValue(m_client_assets));
    }
    if (m_co_client_assets.isSet()) {
        obj.insert(QString("coClientAssets"), ::OpenAPI::toJsonValue(m_co_client_assets));
    }
    if (m_community_property_assets.isSet()) {
        obj.insert(QString("communityPropertyAssets"), ::OpenAPI::toJsonValue(m_community_property_assets));
    }
    if (m_joint_assets.isSet()) {
        obj.insert(QString("jointAssets"), ::OpenAPI::toJsonValue(m_joint_assets));
    }
    return obj;
}

OAIIAssetCategories OAIIAssets::getAllAssets() const {
    return m_all_assets;
}
void OAIIAssets::setAllAssets(const OAIIAssetCategories &all_assets) {
    m_all_assets = all_assets;
    m_all_assets_isSet = true;
}

bool OAIIAssets::is_all_assets_Set() const{
    return m_all_assets_isSet;
}

bool OAIIAssets::is_all_assets_Valid() const{
    return m_all_assets_isValid;
}

OAIIAssetCategories OAIIAssets::getClientAssets() const {
    return m_client_assets;
}
void OAIIAssets::setClientAssets(const OAIIAssetCategories &client_assets) {
    m_client_assets = client_assets;
    m_client_assets_isSet = true;
}

bool OAIIAssets::is_client_assets_Set() const{
    return m_client_assets_isSet;
}

bool OAIIAssets::is_client_assets_Valid() const{
    return m_client_assets_isValid;
}

OAIIAssetCategories OAIIAssets::getCoClientAssets() const {
    return m_co_client_assets;
}
void OAIIAssets::setCoClientAssets(const OAIIAssetCategories &co_client_assets) {
    m_co_client_assets = co_client_assets;
    m_co_client_assets_isSet = true;
}

bool OAIIAssets::is_co_client_assets_Set() const{
    return m_co_client_assets_isSet;
}

bool OAIIAssets::is_co_client_assets_Valid() const{
    return m_co_client_assets_isValid;
}

OAIIAssetCategories OAIIAssets::getCommunityPropertyAssets() const {
    return m_community_property_assets;
}
void OAIIAssets::setCommunityPropertyAssets(const OAIIAssetCategories &community_property_assets) {
    m_community_property_assets = community_property_assets;
    m_community_property_assets_isSet = true;
}

bool OAIIAssets::is_community_property_assets_Set() const{
    return m_community_property_assets_isSet;
}

bool OAIIAssets::is_community_property_assets_Valid() const{
    return m_community_property_assets_isValid;
}

OAIIAssetCategories OAIIAssets::getJointAssets() const {
    return m_joint_assets;
}
void OAIIAssets::setJointAssets(const OAIIAssetCategories &joint_assets) {
    m_joint_assets = joint_assets;
    m_joint_assets_isSet = true;
}

bool OAIIAssets::is_joint_assets_Set() const{
    return m_joint_assets_isSet;
}

bool OAIIAssets::is_joint_assets_Valid() const{
    return m_joint_assets_isValid;
}

bool OAIIAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_client_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_property_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_joint_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
