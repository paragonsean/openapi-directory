/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIHistoricalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIHistoricalData::OAIIHistoricalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIHistoricalData::OAIIHistoricalData() {
    this->initializeModel();
}

OAIIHistoricalData::~OAIIHistoricalData() {}

void OAIIHistoricalData::initializeModel() {

    m_general_setups_isSet = false;
    m_general_setups_isValid = false;

    m_notional_accounts_isSet = false;
    m_notional_accounts_isValid = false;

    m_outstanding_shareholder_loans_isSet = false;
    m_outstanding_shareholder_loans_isValid = false;
}

void OAIIHistoricalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIHistoricalData::fromJsonObject(QJsonObject json) {

    m_general_setups_isValid = ::OpenAPI::fromJsonValue(m_general_setups, json[QString("generalSetups")]);
    m_general_setups_isSet = !json[QString("generalSetups")].isNull() && m_general_setups_isValid;

    m_notional_accounts_isValid = ::OpenAPI::fromJsonValue(m_notional_accounts, json[QString("notionalAccounts")]);
    m_notional_accounts_isSet = !json[QString("notionalAccounts")].isNull() && m_notional_accounts_isValid;

    m_outstanding_shareholder_loans_isValid = ::OpenAPI::fromJsonValue(m_outstanding_shareholder_loans, json[QString("outstandingShareholderLoans")]);
    m_outstanding_shareholder_loans_isSet = !json[QString("outstandingShareholderLoans")].isNull() && m_outstanding_shareholder_loans_isValid;
}

QString OAIIHistoricalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIHistoricalData::asJsonObject() const {
    QJsonObject obj;
    if (m_general_setups.isSet()) {
        obj.insert(QString("generalSetups"), ::OpenAPI::toJsonValue(m_general_setups));
    }
    if (m_notional_accounts.isSet()) {
        obj.insert(QString("notionalAccounts"), ::OpenAPI::toJsonValue(m_notional_accounts));
    }
    if (m_outstanding_shareholder_loans.isSet()) {
        obj.insert(QString("outstandingShareholderLoans"), ::OpenAPI::toJsonValue(m_outstanding_shareholder_loans));
    }
    return obj;
}

OAIIGeneralSetups OAIIHistoricalData::getGeneralSetups() const {
    return m_general_setups;
}
void OAIIHistoricalData::setGeneralSetups(const OAIIGeneralSetups &general_setups) {
    m_general_setups = general_setups;
    m_general_setups_isSet = true;
}

bool OAIIHistoricalData::is_general_setups_Set() const{
    return m_general_setups_isSet;
}

bool OAIIHistoricalData::is_general_setups_Valid() const{
    return m_general_setups_isValid;
}

OAIINotionalAccounts OAIIHistoricalData::getNotionalAccounts() const {
    return m_notional_accounts;
}
void OAIIHistoricalData::setNotionalAccounts(const OAIINotionalAccounts &notional_accounts) {
    m_notional_accounts = notional_accounts;
    m_notional_accounts_isSet = true;
}

bool OAIIHistoricalData::is_notional_accounts_Set() const{
    return m_notional_accounts_isSet;
}

bool OAIIHistoricalData::is_notional_accounts_Valid() const{
    return m_notional_accounts_isValid;
}

OAIIOutstandingShareholderLoans OAIIHistoricalData::getOutstandingShareholderLoans() const {
    return m_outstanding_shareholder_loans;
}
void OAIIHistoricalData::setOutstandingShareholderLoans(const OAIIOutstandingShareholderLoans &outstanding_shareholder_loans) {
    m_outstanding_shareholder_loans = outstanding_shareholder_loans;
    m_outstanding_shareholder_loans_isSet = true;
}

bool OAIIHistoricalData::is_outstanding_shareholder_loans_Set() const{
    return m_outstanding_shareholder_loans_isSet;
}

bool OAIIHistoricalData::is_outstanding_shareholder_loans_Valid() const{
    return m_outstanding_shareholder_loans_isValid;
}

bool OAIIHistoricalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_general_setups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notional_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outstanding_shareholder_loans.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIHistoricalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
