/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanInformationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanInformationModel::OAIPlanInformationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanInformationModel::OAIPlanInformationModel() {
    this->initializeModel();
}

OAIPlanInformationModel::~OAIPlanInformationModel() {}

void OAIPlanInformationModel::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_joint_analysis_isSet = false;
    m_is_joint_analysis_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_plan_date_isSet = false;
    m_plan_date_isValid = false;

    m_plan_description_isSet = false;
    m_plan_description_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_level_isSet = false;
    m_plan_level_isValid = false;

    m_plan_modules_isSet = false;
    m_plan_modules_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;
}

void OAIPlanInformationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanInformationModel::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_joint_analysis_isValid = ::OpenAPI::fromJsonValue(m_is_joint_analysis, json[QString("isJointAnalysis")]);
    m_is_joint_analysis_isSet = !json[QString("isJointAnalysis")].isNull() && m_is_joint_analysis_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_plan_date_isValid = ::OpenAPI::fromJsonValue(m_plan_date, json[QString("planDate")]);
    m_plan_date_isSet = !json[QString("planDate")].isNull() && m_plan_date_isValid;

    m_plan_description_isValid = ::OpenAPI::fromJsonValue(m_plan_description, json[QString("planDescription")]);
    m_plan_description_isSet = !json[QString("planDescription")].isNull() && m_plan_description_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_plan_level_isValid = ::OpenAPI::fromJsonValue(m_plan_level, json[QString("planLevel")]);
    m_plan_level_isSet = !json[QString("planLevel")].isNull() && m_plan_level_isValid;

    m_plan_modules_isValid = ::OpenAPI::fromJsonValue(m_plan_modules, json[QString("planModules")]);
    m_plan_modules_isSet = !json[QString("planModules")].isNull() && m_plan_modules_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("planType")]);
    m_plan_type_isSet = !json[QString("planType")].isNull() && m_plan_type_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;
}

QString OAIPlanInformationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanInformationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_joint_analysis_isSet) {
        obj.insert(QString("isJointAnalysis"), ::OpenAPI::toJsonValue(m_is_joint_analysis));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_plan_date.isSet()) {
        obj.insert(QString("planDate"), ::OpenAPI::toJsonValue(m_plan_date));
    }
    if (m_plan_description_isSet) {
        obj.insert(QString("planDescription"), ::OpenAPI::toJsonValue(m_plan_description));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_level_isSet) {
        obj.insert(QString("planLevel"), ::OpenAPI::toJsonValue(m_plan_level));
    }
    if (m_plan_modules.isSet()) {
        obj.insert(QString("planModules"), ::OpenAPI::toJsonValue(m_plan_modules));
    }
    if (m_plan_type_isSet) {
        obj.insert(QString("planType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_publish_date.isSet()) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    return obj;
}

QString OAIPlanInformationModel::getCountry() const {
    return m_country;
}
void OAIPlanInformationModel::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlanInformationModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlanInformationModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPlanInformationModel::getDescription() const {
    return m_description;
}
void OAIPlanInformationModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlanInformationModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlanInformationModel::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPlanInformationModel::isIsJointAnalysis() const {
    return m_is_joint_analysis;
}
void OAIPlanInformationModel::setIsJointAnalysis(const bool &is_joint_analysis) {
    m_is_joint_analysis = is_joint_analysis;
    m_is_joint_analysis_isSet = true;
}

bool OAIPlanInformationModel::is_is_joint_analysis_Set() const{
    return m_is_joint_analysis_isSet;
}

bool OAIPlanInformationModel::is_is_joint_analysis_Valid() const{
    return m_is_joint_analysis_isValid;
}

QList<OAIObjectLink> OAIPlanInformationModel::getLinks() const {
    return m_links;
}
void OAIPlanInformationModel::setLinks(const QList<OAIObjectLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPlanInformationModel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPlanInformationModel::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPlanInformationModel::getLocale() const {
    return m_locale;
}
void OAIPlanInformationModel::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIPlanInformationModel::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIPlanInformationModel::is_locale_Valid() const{
    return m_locale_isValid;
}

OAIDate OAIPlanInformationModel::getPlanDate() const {
    return m_plan_date;
}
void OAIPlanInformationModel::setPlanDate(const OAIDate &plan_date) {
    m_plan_date = plan_date;
    m_plan_date_isSet = true;
}

bool OAIPlanInformationModel::is_plan_date_Set() const{
    return m_plan_date_isSet;
}

bool OAIPlanInformationModel::is_plan_date_Valid() const{
    return m_plan_date_isValid;
}

QString OAIPlanInformationModel::getPlanDescription() const {
    return m_plan_description;
}
void OAIPlanInformationModel::setPlanDescription(const QString &plan_description) {
    m_plan_description = plan_description;
    m_plan_description_isSet = true;
}

bool OAIPlanInformationModel::is_plan_description_Set() const{
    return m_plan_description_isSet;
}

bool OAIPlanInformationModel::is_plan_description_Valid() const{
    return m_plan_description_isValid;
}

QString OAIPlanInformationModel::getPlanId() const {
    return m_plan_id;
}
void OAIPlanInformationModel::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIPlanInformationModel::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIPlanInformationModel::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIPlanInformationModel::getPlanLevel() const {
    return m_plan_level;
}
void OAIPlanInformationModel::setPlanLevel(const QString &plan_level) {
    m_plan_level = plan_level;
    m_plan_level_isSet = true;
}

bool OAIPlanInformationModel::is_plan_level_Set() const{
    return m_plan_level_isSet;
}

bool OAIPlanInformationModel::is_plan_level_Valid() const{
    return m_plan_level_isValid;
}

OAIIPlanModules OAIPlanInformationModel::getPlanModules() const {
    return m_plan_modules;
}
void OAIPlanInformationModel::setPlanModules(const OAIIPlanModules &plan_modules) {
    m_plan_modules = plan_modules;
    m_plan_modules_isSet = true;
}

bool OAIPlanInformationModel::is_plan_modules_Set() const{
    return m_plan_modules_isSet;
}

bool OAIPlanInformationModel::is_plan_modules_Valid() const{
    return m_plan_modules_isValid;
}

QString OAIPlanInformationModel::getPlanType() const {
    return m_plan_type;
}
void OAIPlanInformationModel::setPlanType(const QString &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAIPlanInformationModel::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAIPlanInformationModel::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

OAIDate OAIPlanInformationModel::getPublishDate() const {
    return m_publish_date;
}
void OAIPlanInformationModel::setPublishDate(const OAIDate &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAIPlanInformationModel::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAIPlanInformationModel::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

bool OAIPlanInformationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_joint_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_modules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanInformationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
