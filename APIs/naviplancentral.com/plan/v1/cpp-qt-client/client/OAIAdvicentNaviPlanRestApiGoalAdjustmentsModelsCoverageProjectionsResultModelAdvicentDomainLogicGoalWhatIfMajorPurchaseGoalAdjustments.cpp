/**
 * NaviPlan API
 * An API for accessing NaviPlan plan data for a client.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments() {
    this->initializeModel();
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::~OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments() {}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::initializeModel() {

    m_goal_adjustments_isSet = false;
    m_goal_adjustments_isValid = false;

    m_projected_results_isSet = false;
    m_projected_results_isValid = false;
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::fromJsonObject(QJsonObject json) {

    m_goal_adjustments_isValid = ::OpenAPI::fromJsonValue(m_goal_adjustments, json[QString("goalAdjustments")]);
    m_goal_adjustments_isSet = !json[QString("goalAdjustments")].isNull() && m_goal_adjustments_isValid;

    m_projected_results_isValid = ::OpenAPI::fromJsonValue(m_projected_results, json[QString("projectedResults")]);
    m_projected_results_isSet = !json[QString("projectedResults")].isNull() && m_projected_results_isValid;
}

QString OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::asJsonObject() const {
    QJsonObject obj;
    if (m_goal_adjustments.isSet()) {
        obj.insert(QString("goalAdjustments"), ::OpenAPI::toJsonValue(m_goal_adjustments));
    }
    if (m_projected_results.isSet()) {
        obj.insert(QString("projectedResults"), ::OpenAPI::toJsonValue(m_projected_results));
    }
    return obj;
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsGoalAdjustmentsResultAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::getGoalAdjustments() const {
    return m_goal_adjustments;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::setGoalAdjustments(const OAIAdvicentNaviPlanRestApiGoalAdjustmentsGoalAdjustmentsResultAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments &goal_adjustments) {
    m_goal_adjustments = goal_adjustments;
    m_goal_adjustments_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::is_goal_adjustments_Set() const{
    return m_goal_adjustments_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::is_goal_adjustments_Valid() const{
    return m_goal_adjustments_isValid;
}

OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::getProjectedResults() const {
    return m_projected_results;
}
void OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::setProjectedResults(const OAIAdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections &projected_results) {
    m_projected_results = projected_results;
    m_projected_results_isSet = true;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::is_projected_results_Set() const{
    return m_projected_results_isSet;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::is_projected_results_Valid() const{
    return m_projected_results_isValid;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_goal_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
